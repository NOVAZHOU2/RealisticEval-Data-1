Sure! Below is the TypeScript version of your Jest test case using `describe`:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Calculates the discount percentage based on the given price and the actual price paid.
 *
 * @param {number} originalPrice - The original price of the item.
 * @param {number} actualPrice - The actual price paid for the item.
 * @returns {number} - The discount percentage, rounded to two decimal places.
 */
function calculateDiscount(originalPrice: number, actualPrice: number): number {
    if (originalPrice <= 0 || actualPrice <= 0 || actualPrice > originalPrice) {
        throw new Error('Invalid input values');
    }
    const discount = ((originalPrice - actualPrice) / originalPrice) * 100;
    return parseFloat(discount.toFixed(2));
}

describe('calculateDiscount', () => {
    it('should calculate the correct discount percentage', () => {
        expect(calculateDiscount(100, 80)).toBe(20);
        expect(calculateDiscount(50, 40)).toBe(20);
        expect(calculateDiscount(200, 150)).toBe(25);
    });

    it('should handle invalid input values', () => {
        expect(() => calculateDiscount(-10, 5)).toThrowError('Invalid input values');
        expect(() => calculateDiscount(50, -10)).toThrowError('Invalid input values');
        expect(() => calculateDiscount(50, 60)).toThrowError('Invalid input values');
    });
});
```

In this TypeScript version:
- I added type annotations to the function parameters and return value.
- I used the `@jest/globals` import to access `describe`, `it`, and `expect`.
- I included tests to check both valid and invalid input scenarios.

Make sure you have the necessary dependencies installed in your project, such as `ts-jest` for running TypeScript tests with Jest.