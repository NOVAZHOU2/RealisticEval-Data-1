Sure! Below is the TypeScript version of your JavaScript Jest test case using `describe`:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Calculates the discount percentage based on the given price and the actual price paid.
 *
 * @param {number} originalPrice - The original price of the item.
 * @param {number} actualPrice - The actual price paid for the item.
 * @returns {number} - The discount percentage, rounded to two decimal places.
 */
function calculateDiscount(originalPrice: number, actualPrice: number): number {
    if (actualPrice > originalPrice) {
        throw new Error('Actual price cannot be greater than original price');
    }
    const discount = ((originalPrice - actualPrice) / originalPrice) * 100;
    return parseFloat(discount.toFixed(2));
}

describe('calculateDiscount', () => {
    it('should calculate the correct discount percentage', () => {
        expect(calculateDiscount(100, 80)).toBe(20);
        expect(calculateDiscount(50, 40)).toBe(20);
        expect(calculateDiscount(100, 90)).toBe(10);
    });

    it('should handle cases where actual price is equal to original price', () => {
        expect(calculateDiscount(100, 100)).toBe(0);
    });

    it('should throw an error when actual price is greater than original price', () => {
        expect(() => calculateDiscount(100, 120)).toThrowError('Actual price cannot be greater than original price');
    });
});
```

### Explanation:
- **TypeScript Types**: I've added type annotations to the parameters and return value of the `calculateDiscount` function.
- **Jest Test Cases**:
  - `it('should calculate the correct discount percentage')`: Tests various scenarios where the discount calculation should work correctly.
  - `it('should handle cases where actual price is equal to original price')`: Checks that a discount of 0% is returned when the actual price equals the original price.
  - `it('should throw an error when actual price is greater than original price')`: Ensures that an error is thrown when the actual price is greater than the original price.

This setup ensures that your function behaves as expected in different scenarios and handles edge cases appropriately.