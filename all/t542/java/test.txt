Sure, here's how you can convert the provided JavaScript Jest test case into a Java JUnit test case. 

First, let's define the `calculateDiscount` function in Java:

```java
package org.real.temp;

public class DiscountCalculator {

    /**
     * Calculates the discount percentage based on the given price and the actual price paid.
     *
     * @param originalPrice - The original price of the item.
     * @param actualPrice - The actual price paid for the item.
     * @return The discount percentage, rounded to two decimal places.
     */
    public static double calculateDiscount(double originalPrice, double actualPrice) {
        if (originalPrice <= 0 || actualPrice <= 0) {
            throw new IllegalArgumentException("Original and actual prices must be greater than zero.");
        }
        double discount = ((originalPrice - actualPrice) / originalPrice) * 100;
        return Math.round(discount * 100.0) / 100.0;
    }

    public static void main(String[] args) {
        // Example usage:
        System.out.println(calculateDiscount(100, 80)); // Output: 20.0
    }
}
```

Next, let's create a JUnit test case for the `calculateDiscount` method:

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class Tester {

    @Test
    public void testCalculateDiscount() {
        assertEquals(20.0, DiscountCalculator.calculateDiscount(100, 80), "The discount should be 20%");
        assertEquals(50.0, DiscountCalculator.calculateDiscount(100, 50), "The discount should be 50%");
        assertEquals(0.0, DiscountCalculator.calculateDiscount(100, 100), "There should be no discount");
        
        // Testing with negative values
        try {
            DiscountCalculator.calculateDiscount(-100, 80);
        } catch (IllegalArgumentException e) {
            assertEquals("Original and actual prices must be greater than zero.", e.getMessage());
        }

        try {
            DiscountCalculator.calculateDiscount(100, -80);
        } catch (IllegalArgumentException e) {
            assertEquals("Original and actual prices must be greater than zero.", e.getMessage());
        }

        try {
            DiscountCalculator.calculateDiscount(0, 80);
        } catch (IllegalArgumentException e) {
            assertEquals("Original and actual prices must be greater than zero.", e.getMessage());
        }

        try {
            DiscountCalculator.calculateDiscount(100, 0);
        } catch (IllegalArgumentException e) {
            assertEquals("Original and actual prices must be greater than zero.", e.getMessage());
        }
    }
}
```

This JUnit test case covers various scenarios including valid discounts and edge cases where the input prices are invalid (negative or zero).