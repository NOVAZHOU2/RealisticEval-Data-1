Certainly! Below is the equivalent Java JUnit test case for the provided JavaScript Jest test function `calculateDiscount`. This Java code assumes that you have a class named `Calculator` with a method `calculateDiscount` that performs the same logic.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    // Assuming Calculator class has a method calculateDiscount
    private Calculator calculator = new Calculator();

    @Test
    public void testCalculateDiscount() {
        // Test data
        double originalPrice = 100.00;
        double actualPrice = 80.00;
        
        // Expected result
        double expectedDiscount = 20.00;
        
        // Actual result
        double actualDiscount = calculator.calculateDiscount(originalPrice, actualPrice);
        
        // Verify the result
        assertEquals(expectedDiscount, actualDiscount, "The calculated discount should be 20.00");
    }
}

// Example Calculator class
class Calculator {
    public double calculateDiscount(double originalPrice, double actualPrice) {
        return Math.round(((originalPrice - actualPrice) / originalPrice) * 100.0) / 100.0;
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration is set to `org.real.temp`.
2. **Class Declaration**: The class `Tester` contains the test cases.
3. **JUnit Import Statements**: The necessary JUnit imports are included.
4. **Test Method**: The `testCalculateDiscount` method is annotated with `@Test`, indicating it's a test method.
5. **Test Data**: Sample input values (`originalPrice` and `actualPrice`) and the expected output (`expectedDiscount`) are defined.
6. **Actual Result Calculation**: The `calculateDiscount` method from the `Calculator` class is called to get the actual discount.
7. **Assertion**: The `assertEquals` method from JUnit is used to verify that the actual discount matches the expected discount.
8. **Example Calculator Class**: A simple `Calculator` class is provided to demonstrate how the `calculateDiscount` method might look in Java.

This setup ensures that your Java code is tested similarly to how the JavaScript code would be using Jest.