To convert the provided JavaScript Jest test case into a C++ Catch2 test case, we need to implement the `calculateDiscount` function in C++ and then write a test case using Catch2.

Here's how you can do it:

### Step 1: Implement the `calculateDiscount` Function in C++

```cpp
#include <cmath>
#include <iostream>

// Function to calculate the discount percentage
double calculateDiscount(double originalPrice, double actualPrice) {
    if (originalPrice <= 0 || actualPrice > originalPrice) {
        return 0; // Invalid input or no discount possible
    }
    double discount = (originalPrice - actualPrice) / originalPrice;
    return std::round(discount * 100) / 100; // Round to two decimal places
}
```

### Step 2: Write a Test Case Using Catch2

First, make sure you have Catch2 installed. If not, you can download it from [Catch2 GitHub repository](https://github.com/catchorg/Catch2).

Here is an example of how you can write a test case for the `calculateDiscount` function using Catch2:

```cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

// Forward declaration of the function to be tested
double calculateDiscount(double originalPrice, double actualPrice);

// Test cases using Catch2
TEST_CASE("Calculate Discount", "[discount]") {
    REQUIRE(calculateDiscount(100, 80) == Approx(20.0).epsilon(0.01));
    REQUIRE(calculateDiscount(50, 40) == Approx(20.0).epsilon(0.01));
    REQUIRE(calculateDiscount(100, 100) == Approx(0.0).epsilon(0.01)); // No discount
    REQUIRE(calculateDiscount(100, 120) == 0); // Invalid input
    REQUIRE(calculateDiscount(-100, 80) == 0); // Invalid input
}

int main() {
    // This will run all the tests defined above
    return Catch::Session().run();
}
```

### Explanation

- **CATCH_CONFIG_MAIN**: This macro tells Catch2 to automatically define `main` for us.
- **TEST_CASE**: Defines a test case with a name and a tag (`[discount]`).
- **REQUIRE**: Checks that the condition is true, otherwise the test fails.
- **Approx**: Compares floating-point numbers approximately rather than exactly, which is useful when dealing with rounding errors.

### Running the Tests

To run the tests, compile your C++ code with the Catch2 library included. For example, using g++:

```sh
g++ -std=c++17 -o test_calculate_discount test_calculate_discount.cpp -lcatch2_main
./test_calculate_discount
```

This will execute the test cases and output the results.