Here’s how you can convert the provided JavaScript function calculateDiscount into Python. The logic remains the same, and we’ll use Python's exception handling and rounding features to achieve similar functionality.
Converted Python Code
python
def calculate_discount(original_price: float, actual_price: float) -> float:
    """
    Calculates the discount percentage based on the given price and the actual price paid.

    :param original_price: The original price of the item.
    :param actual_price: The actual price paid for the item.
    :return: The discount percentage, rounded to two decimal places.
    """
    # Validate input
    if original_price <= 0:
        raise ValueError('Original price must be greater than zero.')
    if actual_price < 0:
        raise ValueError('Actual price cannot be negative.')

    # Calculate the discount
    discount_amount = original_price - actual_price
    discount_percentage = (discount_amount / original_price) * 100

    # Return the discount percentage, rounded to two decimal places
    return round(discount_percentage, 2)

# Example usage
if __name__ == "__main__":
    original_price = 100.0
    actual_price = 75.0
    print(f"Discount Percentage: {calculate_discount(original_price, actual_price)}%")
Explanation of the Converted Code:
Function Definition:
The function is defined using def calculate_discount(...) with type hints for parameters and return type.
original_price: float and actual_price: float indicate that both inputs should be floating-point numbers.
Docstring:
The docstring provides documentation similar to the JavaScript comments, explaining the function's purpose, parameters, and return value.
Input Validation:
The if statements check if the original_price is less than or equal to zero and if the actual_price is negative. If either condition is true, a ValueError is raised with an appropriate message.
Calculating the Discount:
The discount amount is calculated by subtracting actual_price from original_price.
The discount percentage is then calculated using the formula and stored in discount_percentage.
Rounding the Result:
The round function is used to round the discount percentage to two decimal places, similar to JavaScript’s toFixed(2).
Example Usage:
An example usage section demonstrates how to call the function and prints the result.
This Python implementation retains the same logic and functionality as the original JavaScript function while adhering to Pythonic conventions.