Hereâ€™s how you can convert the provided JavaScript Jest test cases into Python unit tests using the unittest framework. The test cases will check the functionality of the calculate_discount function.
Python unittest Code
python
import unittest

def calculate_discount(original_price: float, actual_price: float) -> float:
    """
    Calculates the discount percentage based on the given price and the actual price paid.

    Args:
        original_price (float): The original price of the item.
        actual_price (float): The actual price paid for the item.

    Returns:
        float: The discount percentage, rounded to two decimal places.
    """
    if original_price <= 0:
        raise ValueError('Original price must be greater than zero.')
    if actual_price < 0:
        raise ValueError('Actual price cannot be negative.')

    discount_amount = original_price - actual_price
    discount_percentage = (discount_amount / original_price) * 100
    return round(discount_percentage, 2)

class TestCalculateDiscount(unittest.TestCase):

    def test_discount_25_percent(self):
        self.assertEqual(calculate_discount(100, 75), 25.00)

    def test_discount_0_percent(self):
        self.assertEqual(calculate_discount(50, 50), 0.00)

    def test_discount_100_percent(self):
        self.assertEqual(calculate_discount(100, 0), 100.00)

    def test_discount_50_percent(self):
        self.assertEqual(calculate_discount(200, 100), 50.00)

if __name__ == '__main__':
    unittest.main()
Explanation:
Function Definition: The calculate_discount function is included to ensure that the test cases have a function to test.
UnitTest Class:
class TestCalculateDiscount(unittest.TestCase): defines a test case class that inherits from unittest.TestCase.
Each test method within the class uses the self.assertEqual() method to compare the expected output with the actual output from the calculate_discount function.
Test Methods:
Each test case corresponds to one of the JavaScript tests:
test_discount_25_percent: Tests for a 25% discount.
test_discount_0_percent: Tests for a 0% discount.
test_discount_100_percent: Tests for a 100% discount.
test_discount_50_percent: Tests for a 50% discount.
Main Block: The if __name__ == '__main__': block runs the tests when the script is executed directly.
Running the Tests
You can run this script from your terminal or command prompt. If you're using an IDE, it may have built-in support for running unit tests. The output will indicate whether all tests passed or if any failed, along with relevant messages.