Sure! Below is the equivalent Python unit test case using the `unittest` framework:

```python
import unittest

def calculate_discount(original_price, actual_price):
    # Placeholder implementation (replace with actual logic)
    return 0.0

class TestCalculateDiscount(unittest.TestCase):

    def test_calculate_discount(self):
        self.assertEqual(calculate_discount(100, 80), 20.00)
        self.assertEqual(calculate_discount(50, 45), 10.00)
        self.assertEqual(calculate_discount(1000, 900), 10.00)
        self.assertEqual(calculate_discount(100, 100), 0.00)

if __name__ == '__main__':
    unittest.main()
```

In this example:
- We define a placeholder function `calculate_discount` that returns `0.0`. You should replace this with the actual logic for calculating the discount percentage.
- We create a test class `TestCalculateDiscount` that inherits from `unittest.TestCase`.
- Inside the test class, we define a method `test_calculate_discount` where we use `self.assertEqual` to check if the function returns the expected results.

To run the tests, you can execute the script directly in your Python environment.