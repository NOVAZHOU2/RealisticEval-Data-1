Sure! Below is the equivalent Python unit test case using the `unittest` framework for the JavaScript function `calculateDiscount`.

```python
import unittest

def calculate_discount(original_price, actual_price):
    # Placeholder implementation of the calculateDiscount function
    if original_price == 0:
        return 0
    discount = ((original_price - actual_price) / original_price) * 100
    return round(discount, 2)

class TestCalculateDiscount(unittest.TestCase):

    def test_calculate_discount(self):
        self.assertEqual(calculate_discount(100, 80), 20.0)
        self.assertEqual(calculate_discount(50, 40), 20.0)
        self.assertEqual(calculate_discount(100, 100), 0.0)
        self.assertEqual(calculate_discount(0, 0), 0.0)
        self.assertEqual(calculate_discount(100, 50), 50.0)

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
- **Function Definition**: The `calculate_discount` function calculates the discount percentage based on the original price and the actual price paid. It handles edge cases where the original price is zero.
- **Test Case Class**: The `TestCalculateDiscount` class inherits from `unittest.TestCase`.
- **Test Methods**: Several test methods are defined to verify different scenarios:
  - `test_calculate_discount`: This method tests various cases including typical discounts, no discount (when prices are equal), and edge cases where either price is zero.

To run these tests, you can simply execute the Python script. If all tests pass, you will see output indicating that all tests were successful. If any test fails, the details of the failure will be displayed.