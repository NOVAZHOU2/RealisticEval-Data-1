/*
 
 Generated by ChatGPT
 
 */

#include <stdlib.h>
#include "rgb_effects.h"
#include "light_ws2812.h"

// Define the number of LEDs in the strip
#define NUM_LEDS 20

// Effect function prototypes
void fadeInOut();
void rainbow();
void fade();
void rainbowCycle();
void rainbowColorChaseEffect();
void twinkle();
void meteorShower();
void colorWipe();
void theaterChase();
void singleColorChaseEffect();

// Define the LED strip
struct cRGB leds[NUM_LEDS];

// Define the current effect index
uint8_t effectIndex = 0;

// Define the starting color (der8auer Yellow)
uint8_t effectR = 242;
uint8_t effectG = 230;
uint8_t effectB = 23;

// Effects static variables
uint8_t step = 0;
uint8_t slow_cnt = 0;
uint8_t led = 0;

// Define an array of function pointers to the different effects
void (*effects[NUM_EFFECTS])() = { fadeInOut, rainbow, fade, rainbowCycle, rainbowColorChaseEffect, twinkle, meteorShower, colorWipe, theaterChase, singleColorChaseEffect };

// Define the loop function
void rgb_effects_loop() {
    
  // Call the current effect function
  effects[effectIndex]();
  
  // Update LEDs
  ws2812_sendarray((uint8_t *)leds, NUM_LEDS * 3);
  
}

void rgb_set_effect(uint8_t effect) {
    effectIndex = (effect) % NUM_EFFECTS;
    
    // Reset LEDs
    for (int i = 0; i < NUM_LEDS; i++) {
        leds[i].r = 0;
        leds[i].g = 0;
        leds[i].b = 0;
    }
    
    step = 0;
    led = 0;
    slow_cnt = 0;
    
}

void rgb_get_effect(uint8_t* effect) { 
    *effect = effectIndex;
}

void rgb_set_color(uint8_t r, uint8_t g, uint8_t b) {
    effectR = r;
    effectG = g;
    effectB = b;
}

void rgb_get_color(uint8_t* r, uint8_t* g, uint8_t* b) {
    *r = effectR;
    *g = effectG;
    *b = effectB;
}


void rainbow_get_values(uint8_t hue, uint8_t* r, uint8_t* g, uint8_t* b) {
    uint8_t red, green, blue;
    uint8_t segment = hue / 43;
    uint8_t offset = hue % 43;

    switch (segment) {
      case 0:
        red = 255;
        green = offset * 6;
        blue = 0;
        break;
      case 1:
        red = 255 - offset * 6;
        green = 255;
        blue = 0;
        break;
      case 2:
        red = 0;
        green = 255;
        blue = offset * 6;
        break;
      case 3:
        red = 0;
        green = 255 - offset * 6;
        blue = 255;
        break;
      case 4:
        red = offset * 6;
        green = 0;
        blue = 255;
        break;
      default:
        red = 255;
        green = 0;
        blue = 255 - offset * 6;
        break;
    }
    
    *r = red;
    *g = green;
    *b = blue;
    
}
