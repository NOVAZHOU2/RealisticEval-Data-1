Certainly! Below is the equivalent Java code for the provided JavaScript function:

```java
import java.util.ArrayList;
import java.util.List;

/**
 * Counts the occurrences of consecutive identical letters in a given string.
 *
 * @param inputString The string to analyze for letter changes.
 * @return A list of counts representing the number of consecutive
 *         identical letters before a different letter is found.
 */
public class LetterChangeCounter {

    public static List<Integer> countLetterChanges(String inputString) {
        List<Integer> counts = new ArrayList<>();
        
        if (inputString == null || inputString.isEmpty()) {
            return counts;
        }

        int count = 1;
        char currentChar = inputString.charAt(0);

        for (int i = 1; i < inputString.length(); i++) {
            if (inputString.charAt(i) == currentChar) {
                count++;
            } else {
                counts.add(count);
                count = 1;
                currentChar = inputString.charAt(i);
            }
        }

        // Add the count for the last sequence of characters
        counts.add(count);

        return counts;
    }

    public static void main(String[] args) {
        String testString = "aaabbccddeee";
        List<Integer> result = countLetterChanges(testString);
        System.out.println(result); // Output: [3, 2, 2, 1, 3]
    }
}
```

### Explanation:
1. **Imports**: The `ArrayList` and `List` classes are imported from the `java.util` package.
2. **Class Definition**: The `LetterChangeCounter` class contains the `countLetterChanges` method.
3. **Method Signature**: The `countLetterChanges` method takes a `String` parameter and returns a `List<Integer>`.
4. **Edge Case Handling**: If the input string is `null` or empty, an empty list is returned.
5. **Counting Logic**:
   - Initialize `count` to 1 and `currentChar` to the first character of the string.
   - Iterate through the string starting from the second character.
   - If the current character matches `currentChar`, increment `count`.
   - If it does not match, add `count` to the list and reset `count` to 1, updating `currentChar`.
6. **Final Count Addition**: After the loop, add the final count to the list.
7. **Main Method**: The `main` method demonstrates how to use the `countLetterChanges` method with a test string.

This Java code should produce the same output as the JavaScript function for counting consecutive identical letters.