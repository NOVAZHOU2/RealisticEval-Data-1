Sure! Below is the equivalent Java JUnit test case for the provided JavaScript Jest test function.

First, let's assume the implementation of `countLetterChanges` in Java:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Tester {

    /**
     * Counts the occurrences of consecutive identical letters in a given string.
     *
     * @param inputString - The string to analyze for letter changes.
     * @return List<Integer> An array of counts representing the number of consecutive
     *                      identical letters before a different letter is found.
     */
    public static List<Integer> countLetterChanges(String inputString) {
        List<Integer> result = new ArrayList<>();
        if (inputString == null || inputString.isEmpty()) {
            return result;
        }

        int count = 1;
        for (int i = 1; i < inputString.length(); i++) {
            if (inputString.charAt(i) == inputString.charAt(i - 1)) {
                count++;
            } else {
                result.add(count);
                count = 1;
            }
        }
        result.add(count); // Add the last count

        return result;
    }
}
```

Now, let's write the JUnit test case for this method:

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TesterTest {

    @Test
    public void testCountLetterChanges() {
        assertEquals(List.of(2, 3), Tester.countLetterChanges("aabbb"));
        assertEquals(List.of(1, 1, 1, 1, 1), Tester.countLetterChanges("abcde"));
        assertEquals(List.of(4, 1, 2), Tester.countLetterChanges("aaaabbc"));
        assertEquals(List.of(), Tester.countLetterChanges(""));
        assertEquals(null, Tester.countLetterChanges(null));
    }
}
```

This JUnit test case checks various scenarios:
- A string with consecutive identical letters (`"aabbb"`).
- A string with all distinct letters (`"abcde"`).
- A string with mixed consecutive and non-consecutive letters (`"aaaabbc"`).
- An empty string (`""`).
- A `null` string (`null`).