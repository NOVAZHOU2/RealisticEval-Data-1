Certainly! Below is an equivalent Java JUnit test case for your JavaScript Jest test function. The package and class names are set according to your requirements.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    /**
     * Counts the occurrences of consecutive identical letters in a given string.
     *
     * @param inputString - The string to analyze for letter changes.
     * @return An array of counts representing the number of consecutive
     *         identical letters before a different letter is found.
     */
    public int[] countLetterChanges(String inputString) {
        if (inputString == null || inputString.isEmpty()) {
            return new int[0];
        }

        int[] result = new int[inputString.length()];
        int count = 1;

        for (int i = 1; i < inputString.length(); i++) {
            if (inputString.charAt(i) == inputString.charAt(i - 1)) {
                count++;
            } else {
                result[i - 1] = count;
                count = 1;
            }
        }

        // Add the last group's count
        result[inputString.length() - 1] = count;

        // Trim the array to remove trailing zeros
        int nonZeroCount = 0;
        for (int value : result) {
            if (value != 0) {
                nonZeroCount++;
            }
        }

        int[] trimmedResult = new int[nonZeroCount];
        System.arraycopy(result, 0, trimmedResult, 0, nonZeroCount);

        return trimmedResult;
    }

    @Test
    public void testCountLetterChanges() {
        Tester tester = new Tester();

        assertEquals(new int[]{1}, tester.countLetterChanges("a"));
        assertEquals(new int[]{2, 1}, tester.countLetterChanges("aaab"));
        assertEquals(new int[]{3, 1, 2}, tester.countLetterChanges("aaaabbcc"));
        assertEquals(new int[]{1, 2, 3}, tester.countLetterChanges("abcabcabc"));
        assertEquals(new int[]{5}, tester.countLetterChanges("aaaaa"));
        assertEquals(new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1}, tester.countLetterChanges("abcdefghi"));
        assertEquals(new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2}, tester.countLetterChanges("aaaaaaaaa"));
        assertEquals(new int[]{2, 1, 1, 2, 1}, tester.countLetterChanges("aabbbac"));
    }
}
```

### Explanation:
- **countLetterChanges** method: This method takes a string as input and returns an array of integers representing the count of consecutive identical letters.
- **testCountLetterChanges** method: This is a JUnit test method that tests various cases to ensure the `countLetterChanges` method works correctly.

Make sure you have the necessary JUnit dependencies in your `pom.xml` if you're using Maven:

```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
```

This setup should help you transition from your JavaScript Jest test case to a Java JUnit test case effectively.