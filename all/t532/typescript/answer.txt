Sure! Here's how you can convert the JavaScript function to TypeScript:

```typescript
/**
 * Counts the occurrences of consecutive identical letters in a given string.
 *
 * @param {string} inputString - The string to analyze for letter changes.
 * @returns {number[]} An array of counts representing the number of consecutive
 *                          identical letters before a different letter is found.
 */
function countLetterChanges(inputString: string): number[] {
    const result: number[] = [];
    let currentCount = 1;

    for (let i = 1; i < inputString.length; i++) {
        if (inputString[i] === inputString[i - 1]) {
            currentCount++;
        } else {
            result.push(currentCount);
            currentCount = 1;
        }
    }

    // Push the last count
    result.push(currentCount);

    return result;
}
```

### Explanation:
1. **Type Annotations**: 
   - `inputString: string`: Specifies that the `inputString` parameter must be a string.
   - `: number[]`: Indicates that the function should return an array of numbers.

2. **Initialization**:
   - `const result: number[] = []`: Initializes an empty array to store the counts.
   - `let currentCount = 1`: Initializes a counter for consecutive identical letters.

3. **Loop through the String**:
   - `for (let i = 1; i < inputString.length; i++)`: Iterates over the string starting from the second character.
   - `if (inputString[i] === inputString[i - 1])`: Checks if the current character is the same as the previous one.
     - If true, increments `currentCount`.
     - If false, pushes `currentCount` to the `result` array and resets `currentCount` to 1.

4. **Push the Last Count**:
   - After the loop, pushes the final `currentCount` to the `result` array to account for the last sequence of identical letters.

This TypeScript version maintains the functionality of the original JavaScript function while adding type safety.