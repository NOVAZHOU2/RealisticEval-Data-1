Certainly! Below is the equivalent Python unit test case using the `unittest` framework:

```python
import unittest

def count_letter_changes(input_string):
    if not input_string:
        return []

    counts = []
    current_count = 1

    for i in range(1, len(input_string)):
        if input_string[i] == input_string[i-1]:
            current_count += 1
        else:
            counts.append(current_count)
            current_count = 1

    counts.append(current_count)
    return counts

class TestCountLetterChanges(unittest.TestCase):

    def test_empty_string(self):
        self.assertEqual(count_letter_changes(""), [])

    def test_single_character(self):
        self.assertEqual(count_letter_changes("a"), [1])

    def test_multiple_identical_characters(self):
        self.assertEqual(count_letter_changes("aaaa"), [4])

    def test_mixed_characters(self):
        self.assertEqual(count_letter_changes("aabbbccdd"), [2, 3, 2, 2])

    def test_consecutive_different_characters(self):
        self.assertEqual(count_letter_changes("abcd"), [1, 1, 1, 1])

if __name__ == '__main__':
    unittest.main()
```

This Python code defines the `count_letter_changes` function and includes a series of unit tests using the `unittest` framework to verify its correctness. Each test case checks a different scenario to ensure that the function behaves as expected.