Hereâ€™s the equivalent Python code for the provided JavaScript function that counts the occurrences of consecutive identical letters in a given string:
python
def count_letter_changes(input_string: str) -> list:
    """Counts the occurrences of consecutive identical letters in a given string.

    Args:
        input_string (str): The string to analyze for letter changes.

    Returns:
        list: A list of counts representing the number of consecutive
              identical letters before a different letter is found.
    """
    # List to hold counts of consecutive letters
    counts = []
    current_count = 1  # Initialize the count of the current letter

    # Iterate through the string starting from the second character
    for i in range(1, len(input_string)):
        # If the current character is different from the previous one
        if input_string[i] != input_string[i - 1]:
            counts.append(current_count)  # Store the count of the previous letter
            current_count = 1  # Reset count for the new letter
        else:
            current_count += 1  # Increment count for the current letter

    counts.append(current_count)  # Push the count of the last letter
    return counts

# Example usage:
input_str = "aaabbccddddee"
result = count_letter_changes(input_str)
print(result)  # Output: [3, 2, 2, 5]
Explanation of the Python Code:
Function Definition: The function count_letter_changes is defined to take a single argument input_string, which is of type str.
Docstring: A docstring describes the function's purpose, arguments, and return value.
Initialization:
An empty list counts is created to store the counts of consecutive letters.
The variable current_count is initialized to 1 to start counting occurrences of the first character.
Iteration:
A for loop iterates through the string starting from the second character (index 1).
Inside the loop, we check if the current character is different from the previous one.
If it is different, the current count is appended to counts, and current_count is reset to 1.
If it is the same, current_count is incremented.
Final Count: After the loop, the count of the last character is appended to the counts list.
Return Statement: The list counts is returned, which contains the number of occurrences of consecutive identical letters.
Example Usage:
The example usage demonstrates how to call the function and print the results. You can test the function with different input strings to see how it behaves.