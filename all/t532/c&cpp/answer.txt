Certainly! Below is the equivalent C++ code that performs the same functionality as the provided JavaScript function:

```cpp
#include <iostream>
#include <vector>
#include <string>

/**
 * Counts the occurrences of consecutive identical letters in a given string.
 *
 * @param inputString - The string to analyze for letter changes.
 * @return A vector of integers representing the number of consecutive
 *         identical letters before a different letter is found.
 */
std::vector<int> countLetterChanges(const std::string& inputString) {
    std::vector<int> result;
    if (inputString.empty()) return result;

    int count = 1; // Start counting from the first character

    for (size_t i = 1; i < inputString.length(); ++i) {
        if (inputString[i] == inputString[i - 1]) {
            ++count; // Increment count if the current character is the same as the previous one
        } else {
            result.push_back(count); // Add the count to the result when a different character is found
            count = 1; // Reset the count for the new character
        }
    }

    result.push_back(count); // Add the last count to the result

    return result;
}

int main() {
    std::string inputString = "aaabbccddddd";
    std::vector<int> counts = countLetterChanges(inputString);

    for (int count : counts) {
        std::cout << count << " ";
    }

    return 0;
}
```

### Explanation:
- **Function Definition**: The `countLetterChanges` function takes a constant reference to a `std::string` and returns a `std::vector<int>` containing the counts of consecutive identical letters.
- **Edge Case Handling**: If the input string is empty, the function immediately returns an empty vector.
- **Counting Logic**: 
  - Initialize `count` to 1 because we start counting from the first character.
  - Iterate through the string starting from the second character.
  - If the current character is the same as the previous one, increment the `count`.
  - If the current character is different, push the `count` into the `result` vector and reset `count` to 1.
- **Final Count Push**: After the loop, push the final count into the `result` vector since there won't be another different character after the last character.

This C++ code should work similarly to the original JavaScript function.