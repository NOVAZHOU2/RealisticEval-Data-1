Sure! Below is an equivalent C++ test case using Catch2 framework:

```cpp
#include <catch2/catch.hpp>
#include <vector>
#include <string>

/**
 * Counts the occurrences of consecutive identical letters in a given string.
 *
 * @param inputString - The string to analyze for letter changes.
 * @returns A vector of counts representing the number of consecutive
 *          identical letters before a different letter is found.
 */
std::vector<int> countLetterChanges(const std::string& inputString) {
    std::vector<int> counts;
    if (inputString.empty()) return counts;

    int currentCount = 1;
    for (size_t i = 1; i < inputString.length(); ++i) {
        if (inputString[i] == inputString[i - 1]) {
            ++currentCount;
        } else {
            counts.push_back(currentCount);
            currentCount = 1;
        }
    }
    counts.push_back(currentCount);

    return counts;
}

TEST_CASE("countLetterChanges", "[countLetterChanges]") {
    REQUIRE(countLetterChanges("") == std::vector<int>());
    REQUIRE(countLetterChanges("a") == std::vector<int>({1}));
    REQUIRE(countLetterChanges("aa") == std::vector<int>({2}));
    REQUIRE(countLetterChanges("aab") == std::vector<int>({2, 1}));
    REQUIRE(countLetterChanges("aaabbcccaaa") == std::vector<int>({3, 2, 3, 1}));
}
```

### Explanation:
- **Catch2**: We include `catch2/catch.hpp` and use the `TEST_CASE` macro to define our test cases.
- **Function Implementation**: The `countLetterChanges` function remains unchanged from your JavaScript version.
- **Test Cases**:
  - Empty string: Should return an empty vector.
  - Single character: Should return a vector with a single element (1).
  - Multiple identical characters: Should return a vector with the count of consecutive identical characters.
  - Mixed characters: Should return a vector with the counts of consecutive identical characters.

This should give you a good starting point for testing your C++ function using Catch2.