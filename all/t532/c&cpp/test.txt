Sure! Below is an equivalent C++ test case using Catch2, which is a modern C++ testing framework.

```cpp
#include <catch2/catch.hpp>
#include <vector>
#include <string>

/**
 * Counts the occurrences of consecutive identical letters in a given string.
 *
 * @param inputString - The string to analyze for letter changes.
 * @returns A vector of counts representing the number of consecutive
 *          identical letters before a different letter is found.
 */
std::vector<int> countLetterChanges(const std::string& inputString) {
    std::vector<int> counts;
    if (inputString.empty()) return counts;

    int currentCount = 1;
    for (size_t i = 1; i < inputString.length(); ++i) {
        if (inputString[i] == inputString[i - 1]) {
            ++currentCount;
        } else {
            counts.push_back(currentCount);
            currentCount = 1;
        }
    }
    counts.push_back(currentCount);

    return counts;
}

TEST_CASE("countLetterChanges function tests", "[countLetterChanges]") {
    // Test cases
    REQUIRE(countLetterChanges("") == std::vector<int>());
    REQUIRE(countLetterChanges("a") == std::vector<int>({1}));
    REQUIRE(countLetterChanges("aa") == std::vector<int>({2}));
    REQUIRE(countLetterChanges("aabbbcccd") == std::vector<int>({2, 3, 3, 1}));
    REQUIRE(countLetterChanges("abcde") == std::vector<int>({1, 1, 1, 1, 1}));
    REQUIRE(countLetterChanges("aaaabbbbccccddddeeeeee") == std::vector<int>({4, 4, 4, 4, 6}));
}
```

### Explanation:
- **Function Definition**: The `countLetterChanges` function is defined to take a `const std::string&` and returns a `std::vector<int>`.
- **Catch2 Test Case**:
  - `TEST_CASE`: Defines a test case named "countLetterChanges function tests".
  - `REQUIRE`: Asserts that the output of `countLetterChanges` matches the expected result.
  
This should cover the same functionality as your Jest test case in JavaScript using Catch2 in C++.