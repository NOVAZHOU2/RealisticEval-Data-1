Here’s how you can convert the provided TypeScript Jest test cases into Python unit tests using the unittest framework.
TypeScript Jest Test Cases
typescript
describe('arabicToEnglishNumbers', () => {
    test('converts single Arabic numerals to English', () => {
        expect(arabicToEnglishNumbers('١')).toBe('1');
        expect(arabicToEnglishNumbers('٥')).toBe('5');
        expect(arabicToEnglishNumbers('٩')).toBe('9');
    });
    
    test('converts a string of Arabic numerals to English', () => {
        expect(arabicToEnglishNumbers('٠١٢٣٤٥٦٧٨٩')).toBe('0123456789');
    });
    
    test('handles strings with Arabic and English numerals mixed', () => {
        expect(arabicToEnglishNumbers('٠١23٤5')).toBe('012345');
    });
    
    test('leaves non-numeral characters unchanged', () => {
        expect(arabicToEnglishNumbers('Hello World!')).toBe('Hello World!');
        expect(arabicToEnglishNumbers('2022-٢٠٢٣')).toBe('2022-2023');
    });
    
    test('works with full sentences that include Arabic numerals', () => {
        expect(arabicToEnglishNumbers('The year is ٢٠٢٤!')).toBe('The year is 2024!');
    });
    
    test('handles empty strings correctly', () => {
        expect(arabicToEnglishNumbers('')).toBe('');
    });
    
    test('processes Arabic numerals in a complex mixed context', () => {
        expect(arabicToEnglishNumbers('Price: ٥٠٠$ and Date: ٢٠٢٣-١٢-٠١')).toBe('Price: 500$ and Date: 2023-12-01');
    });
});
Python unittest Test Cases
Here’s the equivalent code using Python's unittest framework:
python
import unittest

def arabic_to_english_numbers(value: str) -> str:
    arabic_to_english_map = {
        '٠': '0', '١': '1', '٢': '2', '٣': '3', '٤': '4',
        '٥': '5', '٦': '6', '٧': '7', '٨': '8', '٩': '9'
    }
    return ''.join(arabic_to_english_map.get(char, char) for char in value)

class TestArabicToEnglishNumbers(unittest.TestCase):
    
    def test_converts_single_arabic_numerals_to_english(self):
        self.assertEqual(arabic_to_english_numbers('١'), '1')
        self.assertEqual(arabic_to_english_numbers('٥'), '5')
        self.assertEqual(arabic_to_english_numbers('٩'), '9')

    def test_converts_a_string_of_arabic_numerals_to_english(self):
        self.assertEqual(arabic_to_english_numbers('٠١٢٣٤٥٦٧٨٩'), '0123456789')

    def test_handles_strings_with_arabic_and_english_numerals_mixed(self):
        self.assertEqual(arabic_to_english_numbers('٠١23٤5'), '012345')

    def test_leaves_non_numeral_characters_unchanged(self):
        self.assertEqual(arabic_to_english_numbers('Hello World!'), 'Hello World!')
        self.assertEqual(arabic_to_english_numbers('2022-٢٠٢٣'), '2022-2023')

    def test_works_with_full_sentences_that_include_arabic_numerals(self):
        self.assertEqual(arabic_to_english_numbers('The year is ٢٠٢٤!'), 'The year is 2024!')

    def test_handles_empty_strings_correctly(self):
        self.assertEqual(arabic_to_english_numbers(''), '')

    def test_processes_arabic_numerals_in_a_complex_mixed_context(self):
        self.assertEqual(arabic_to_english_numbers('Price: ٥٠٠$ and Date: ٢٠٢٣-١٢-٠١'), 'Price: 500$ and Date: 2023-12-01')

if __name__ == '__main__':
    unittest.main()
Explanation of Changes:
Importing unittest:
The unittest module is imported to create the test cases.
Function Definition:
The arabic_to_english_numbers function is defined as in the previous Python conversion.
Test Class:
A class TestArabicToEnglishNumbers is created, inheriting from unittest.TestCase. This groups all the test methods together.
Test Methods:
Each test case from the TypeScript code is converted into a method in the Python class.
The method names are formatted using underscores to adhere to Python's naming conventions.
Assertions:
The expect(...).toBe(...) method from Jest is replaced with self.assertEqual(...), which checks if the actual output matches the expected output.
Running the Tests:
The if __name__ == '__main__': block allows the test cases to be run directly.
You can run the above Python code to test the arabic_to_english_numbers function using the defined test cases!