Here’s how you can convert the TypeScript code signature to Python, while preserving the comments:
TypeScript Signature
typescript
/** 
 * Converts Arabic numerals in a string to English numerals.
 * This function iterates over each character in the input string, replacing Arabic numerals (٠-٩)
 * with their corresponding English numerals (0-9) while leaving other characters unchanged.
 * For example:
 *      input: ٠١٢٣٤٥٦٧٨٩
 *      output: 012345678
 *
 * @param {string} value - The string containing Arabic numerals to be converted.
 * @returns {string} The converted string with Arabic numerals replaced by English numerals.
 */
function arabicToEnglishNumbers(value: string): string {}
Python Signature
python
def arabic_to_english_numbers(value: str) -> str:
    """
    Converts Arabic numerals in a string to English numerals.
    This function iterates over each character in the input string, replacing Arabic numerals (٠-٩)
    with their corresponding English numerals (0-9) while leaving other characters unchanged.
    For example:
         input: ٠١٢٣٤٥٦٧٨٩
         output: 012345678

    Args:
        value (str): The string containing Arabic numerals to be converted.

    Returns:
        str: The converted string with Arabic numerals replaced by English numerals.
    """
    pass
Explanation of Changes:
Docstring in Python:
In Python, the docstring is written inside triple quotes (""") and provides a description of the function's purpose, its parameters, and its return value, similar to TypeScript's comments.
I've translated the TypeScript JSDoc comments into Python docstring format.
Parameter Type:
Python uses str to define a string, which is equivalent to string in TypeScript.
Return Type:
Python uses -> str to specify that the function returns a string, which corresponds to the : string return type in TypeScript.
Function Name:
I used Python's snake_case convention for function names, i.e., arabic_to_english_numbers.
This Python signature mirrors the functionality and description provided by the original TypeScript code while adhering to Python's syntax conventions.