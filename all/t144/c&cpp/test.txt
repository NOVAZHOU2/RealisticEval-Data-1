Here’s the equivalent C++ Catch2 test case for the provided TypeScript Jest test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include "arabicToEnglishNumbers.h" // Include the header where the function is declared

TEST_CASE("arabicToEnglishNumbers", "[conversion]") {
    SECTION("converts single Arabic numerals to English") {
        REQUIRE(arabicToEnglishNumbers("١") == "1");
        REQUIRE(arabicToEnglishNumbers("٥") == "5");
        REQUIRE(arabicToEnglishNumbers("٩") == "9");
    }

    SECTION("converts a string of Arabic numerals to English") {
        REQUIRE(arabicToEnglishNumbers("٠١٢٣٤٥٦٧٨٩") == "0123456789");
    }

    SECTION("handles strings with Arabic and English numerals mixed") {
        REQUIRE(arabicToEnglishNumbers("٠١23٤5") == "012345");
    }

    SECTION("leaves non-numeral characters unchanged") {
        REQUIRE(arabicToEnglishNumbers("Hello World!") == "Hello World!");
        REQUIRE(arabicToEnglishNumbers("2022-٢٠٢٣") == "2022-2023");
    }

    SECTION("works with full sentences that include Arabic numerals") {
        REQUIRE(arabicToEnglishNumbers("The year is ٢٠٢٤!") == "The year is 2024!");
    }

    SECTION("handles empty strings correctly") {
        REQUIRE(arabicToEnglishNumbers("") == "");
    }

    SECTION("processes Arabic numerals in a complex mixed context") {
        REQUIRE(arabicToEnglishNumbers("Price: ٥٠٠$ and Date: ٢٠٢٣-١٢-٠١") == "Price: 500$ and Date: 2023-12-01");
    }
}
```

### Explanation:
1. **Includes**: Make sure to include the Catch2 header and the header file where the `arabicToEnglishNumbers` function is declared.
2. **Test Cases**: Each `SECTION` corresponds to a `test` in Jest, and `REQUIRE` is used to check the expected outputs.
3. **Structure**: The structure is similar, maintaining clarity in what each section tests, matching the original Jest logic. 

You can run this test suite in a C++ environment configured with Catch2.