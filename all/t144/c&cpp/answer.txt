Here's the equivalent C++ code for the provided TypeScript function that converts Arabic numerals to English numerals:

```cpp
#include <iostream>
#include <string>
#include <unordered_map>
#include <algorithm>

std::string arabicToEnglishNumbers(const std::string& value) {
    std::unordered_map<char, char> arabicToEnglishMap = {
        {'٠', '0'}, {'١', '1'}, {'٢', '2'}, {'٣', '3'}, {'٤', '4'},
        {'٥', '5'}, {'٦', '6'}, {'٧', '7'}, {'٨', '8'}, {'٩', '9'}
    };

    std::string result;
    result.reserve(value.size()); // Reserve space for efficiency

    for (char ch : value) {
        // Check if the character is in the map, otherwise keep the original
        if (arabicToEnglishMap.find(ch) != arabicToEnglishMap.end()) {
            result += arabicToEnglishMap[ch];
        } else {
            result += ch;
        }
    }

    return result;
}

int main() {
    std::string input = "١٢٣٤٥٦٧٨٩";
    std::string output = arabicToEnglishNumbers(input);
    std::cout << "Converted: " << output << std::endl; // Output: 123456789
    return 0;
}
```

### Explanation:
1. **Header Files**: We include necessary headers for input/output, strings, and maps.
2. **Mapping**: An unordered map is used to map Arabic characters to their English equivalents.
3. **Conversion Logic**: We iterate over each character in the input string, check if it exists in the map, and append the corresponding character to the result.
4. **Main Function**: A simple test is included to demonstrate the conversion. 

You can compile and run this C++ code in any standard C++ environment.