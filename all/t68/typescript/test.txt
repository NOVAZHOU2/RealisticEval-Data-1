Here's how you can convert your Python unittest test class to TypeScript using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('divideList', () => {
  it('should divide list evenly into n parts', () => {
    const result = divideList([1, 2, 3, 4, 5], 2);
    expect(result).toEqual([[1, 2, 3], [4, 5]]);
  });

  it('should handle list with length not divisible by n', () => {
    const result = divideList([1, 2, 3, 4, 5, 6], 3);
    expect(result).toEqual([[1, 2], [3, 4], [5, 6]]);
  });
});

function divideList<T>(lst: T[], n: number): T[][] {
  const result: T[][] = [];
  for (let i = 0; i < lst.length; i += Math.ceil(lst.length / n)) {
    result.push(lst.slice(i, i + Math.ceil(lst.length / n)));
  }
  return result;
}
```

In this example, we're using Jest's `describe` and `it` functions to group our tests and define individual test cases. We're also using `expect` to assert that our function behaves as expected. The `divideList` function is defined in TypeScript, and we've used TypeScript generics to make it more flexible.