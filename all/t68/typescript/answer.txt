Sure! Below is the equivalent TypeScript code for your Python function:

```typescript
type List<T> = T[];

function divideList<T>(lst: T[], n: number): List<List<T>> {
    /**
     * Divide a list evenly into n parts and return a list of these parts. If the list length is not divisible by n,
     * additional elements are added to the previous sections one by one.
     *
     * @param lst - The list to be divided.
     * @param n - The number of parts to divide the list into.
     * @returns A list containing n sublists, where each sublist represents a part of the original list.
     */
    const result: List<List<T>> = [];
    const length = lst.length;
    const size = Math.ceil(length / n);

    for (let i = 0; i < n; i++) {
        const start = i * size;
        const end = start + size;
        result.push(lst.slice(start, end));
    }

    return result;
}
```

### Explanation:
1. **Type Definitions**: 
   - `List<T>` is defined as an alias for `T[]`, which represents a generic list or array in TypeScript.

2. **Function Definition**:
   - The `divideList` function takes two parameters: `lst` of type `List<T>` and `n` of type `number`.
   - It returns a new list of lists (`List<List<T>>`).

3. **Logic**:
   - The function calculates the size of each part using `Math.ceil(length / n)` to ensure that any remainder is distributed among the first few parts.
   - It then iterates `n` times, slicing the input list `lst` into chunks of the calculated size and pushing each chunk into the result list.

This TypeScript code should work similarly to your Python function, dividing the input list into approximately equal-sized parts.