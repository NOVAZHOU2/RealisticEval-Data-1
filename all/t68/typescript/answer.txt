Hereâ€™s the equivalent TypeScript code for the provided Python function, with proper type definitions and adjustments for TypeScript syntax and features:

```typescript
function divideList(lst: number[], n: number): number[][] {
    // Total number of elements in the list
    const L = lst.length;
    // Calculate the size of each part
    const baseSize = Math.floor(L / n);
    // Calculate the number of sections that will have an additional element
    const remainder = L % n;

    const result: number[][] = [];
    // Start index of the sublist
    let startIndex = 0;

    for (let i = 0; i < n; i++) {
        // Determine the size of the current part
        const partSize = baseSize + (i < remainder ? 1 : 0);
        // Append the sublist to the result list
        result.push(lst.slice(startIndex, startIndex + partSize));
        // Update the start index for the next part
        startIndex += partSize;
    }

    return result;
}

// Example usage
const exampleList = [1, 2, 3, 4, 5, 6, 7, 8];
const numberOfParts = 3;
console.log(divideList(exampleList, numberOfParts));
```

### Explanation:
1. **Type Definitions**: 
   - `lst` is defined as `number[]`.
   - `n` is defined as `number`.
   - The return type is `number[][]`.

2. **Math.floor**: 
   - In TypeScript, integer division is performed using `Math.floor(L / n)`.

3. **Array Slicing**:
   - The `slice` method is used instead of Python's slicing syntax to create sublists.

4. **Looping**:
   - A standard `for` loop is used to iterate over the range from `0` to `n`.

5. **Example Usage**:
   - An example list and the number of parts are provided to demonstrate the function's usage.

This TypeScript code maintains the same functionality and logic as the Python code, ensuring that the list is divided into `n` parts as evenly as possible, with excess elements distributed to earlier sublists.