Sure! Hereâ€™s the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
import { List } from "typescript";

/**
 * Divides a list evenly into n parts and returns a list of these parts.
 * If the list length is not divisible by n, additional elements are added to the previous sections one by one.
 * 
 * @param lst - The list to be divided.
 * @param n - The number of parts to divide the list into.
 * @returns A list containing n sublists, where each sublist represents a part of the original list.
 */
function divideList(lst: number[], n: number): number[][] {
    // Total number of elements in the list
    const L = lst.length;
    // Calculate the size of each part
    const baseSize = Math.floor(L / n);
    // Calculate the number of sections that will have an additional element
    const remainder = L % n;

    const result: number[][] = [];
    // Start index of the sublist
    let startIndex = 0;

    for (let i = 0; i < n; i++) {
        // Determine the size of the current part
        const partSize = baseSize + (i < remainder ? 1 : 0);
        // Append the sublist to the result list
        result.push(lst.slice(startIndex, startIndex + partSize));
        // Update the start index for the next part
        startIndex += partSize;
    }

    return result;
}

// Example usage
const exampleList = [1, 2, 3, 4, 5, 6, 7, 8];
const numberOfParts = 3;
console.log(divideList(exampleList, numberOfParts));
```

### Explanation:
1. **Type Annotations**:
   - `lst` is defined as `number[]`.
   - `n` is defined as `number`.
   - The return type is `number[][]`.

2. **JSDoc Comments**:
   - The JSDoc-style comments provide detailed documentation for the function, including parameters and return values.

3. **Math.floor**:
   - Integer division is performed using `Math.floor(L / n)`.

4. **Array Slicing**:
   - The `slice` method is used to create sublists.

5. **Looping**:
   - A standard `for` loop is used to iterate over the range from `0` to `n`.

6. **Example Usage**:
   - An example list and the number of parts are provided to demonstrate the function's usage.

This TypeScript code preserves the original functionality and structure of the Python code, ensuring that the list is divided into `n` parts as evenly as possible, with excess elements distributed to earlier sublists.