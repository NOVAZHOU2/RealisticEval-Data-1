```cpp
#include <vector>
#include <iostream>

/**
 * Divide a vector evenly into n parts and return a vector of these parts. If the vector size is not divisible by n,
 * additional elements are added to the previous sections one by one.
 *
 * @param vec The vector to be divided.
 * @param n The number of parts to divide the vector into.
 * @return A vector containing n subvectors, where each subvector represents a part of the original vector.
 */
std::vector<std::vector<int>> divide_vector(const std::vector<int>& vec, int n) {
    std::vector<std::vector<int>> result;
    int total_size = vec.size();
    int base_size = total_size / n;
    int remainder = total_size % n;

    for(int i = 0; i < n; ++i) {
        int start_index = i * base_size + (i < remainder ? i : remainder);
        int end_index = start_index + base_size + (i < remainder ? 1 : 0);
        result.push_back(std::vector<int>(vec.begin() + start_index, vec.begin() + end_index));
    }

    return result;
}

// Example usage
int main() {
    std::vector<int> myVector = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    int numberOfParts = 3;
    auto dividedVectors = divide_vector(myVector, numberOfParts);

    for(auto& subVec : dividedVectors) {
        for(int val : subVec) {
            std::cout << val << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
```

This C++ code defines a function `divide_vector` that takes a vector of integers and an integer `n`, and divides the vector into `n` parts as described in the Python function. It also includes an example usage in the `main` function demonstrating how to call `divide_vector`.