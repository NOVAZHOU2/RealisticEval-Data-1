Certainly! Here is the equivalent C++ code for the provided Python function, including the translation of type annotations, comments, and documentation:

```cpp
#include <iostream>
#include <vector>

/**
 * Divide a vector evenly into n parts and return a vector of these parts.
 * If the vector length is not divisible by n, additional elements are added to the previous sections one by one.
 *
 * @param lst The vector to be divided.
 * @param n The number of parts to divide the vector into.
 * @return A vector containing n subvectors, where each subvector represents a part of the original vector.
 */
std::vector<std::vector<int>> divide_list(const std::vector<int>& lst, int n) {
    // Total number of elements in the vector
    int L = lst.size();
    // Calculate the size of each part
    int base_size = L / n;
    // Calculate the number of sections that will have an additional element
    int remainder = L % n;

    std::vector<std::vector<int>> result;
    // Start index of the subvector
    int start_index = 0;

    for (int i = 0; i < n; ++i) {
        // Determine the size of the current part
        int part_size = base_size + (i < remainder ? 1 : 0);
        // Create a new subvector from the original vector
        std::vector<int> subvector(lst.begin() + start_index, lst.begin() + start_index + part_size);
        // Append the subvector to the result vector
        result.push_back(subvector);
        // Update the start index for the next part
        start_index += part_size;
    }

    return result;
}

// Example usage
int main() {
    std::vector<int> lst = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    int n = 3;
    std::vector<std::vector<int>> result = divide_list(lst, n);

    // Print the result
    for (const auto& subvector : result) {
        for (int elem : subvector) {
            std::cout << elem << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
```

### Explanation:
- **Function Signature**: The function `divide_list` takes a `std::vector<int>` and an `int` as arguments and returns a `std::vector<std::vector<int>>`.
- **Documentation**: The Python docstring is translated into a C++ style comment block using `/** */`.
- **Type Annotations**: The Python type annotations `List` and `int` are translated to `std::vector<int>` and `int` respectively.
- **Calculations**: The total number of elements (`L`), the base size of each part (`base_size`), and the remainder (`remainder`) are calculated similarly to the Python code.
- **Result Vector**: A vector of vectors (`result`) is used to store the subvectors.
- **Loop**: A loop iterates `n` times to create subvectors and append them to the result vector.
- **Subvector Creation**: Each subvector is created using iterators from the original vector.
- **Example Usage**: An example usage is provided in the `main` function to demonstrate how to call the `divide_list` function and print the result.

This code preserves the original functionality and structure while adhering to C++ syntax and conventions.