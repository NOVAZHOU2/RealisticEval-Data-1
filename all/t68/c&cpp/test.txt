Sure! Below is an equivalent C++ test case using Catch2 for the provided Python `unittest` test class. Since you haven't provided the actual test cases in your Python code, I'll assume some basic tests that you might have for the `divide_list` function.

First, let's define the `divide_list` function in C++:

```cpp
#include <vector>
#include <stdexcept>

std::vector<std::vector<int>> divide_list(const std::vector<int>& lst, int n) {
    if (n <= 0) {
        throw std::invalid_argument("Number of parts must be greater than zero");
    }

    std::vector<std::vector<int>> result;
    int size = lst.size();
    int base_size = size / n;
    int remainder = size % n;

    for (int i = 0; i < n; ++i) {
        int start = i * base_size + (i < remainder ? 1 : 0);
        int end = start + base_size + (i < remainder ? 1 : 0);
        result.push_back(std::vector<int>(lst.begin() + start, lst.begin() + end));
    }

    return result;
}
```

Now, let's write the corresponding Catch2 test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

#include <vector>
#include <stdexcept>

std::vector<std::vector<int>> divide_list(const std::vector<int>& lst, int n);

TEST_CASE("Divide list into equal parts", "[divide_list]") {
    SECTION("List with 5 elements divided into 3 parts") {
        std::vector<int> input = {1, 2, 3, 4, 5};
        auto result = divide_list(input, 3);
        REQUIRE(result.size() == 3);
        REQUIRE(result[0] == std::vector<int>({1, 2}));
        REQUIRE(result[1] == std::vector<int>({3, 4}));
        REQUIRE(result[2] == std::vector<int>({5}));
    }

    SECTION("List with 6 elements divided into 3 parts") {
        std::vector<int> input = {1, 2, 3, 4, 5, 6};
        auto result = divide_list(input, 3);
        REQUIRE(result.size() == 3);
        REQUIRE(result[0] == std::vector<int>({1, 2}));
        REQUIRE(result[1] == std::vector<int>({3, 4}));
        REQUIRE(result[2] == std::vector<int>({5, 6}));
    }

    SECTION("List with 7 elements divided into 3 parts") {
        std::vector<int> input = {1, 2, 3, 4, 5, 6, 7};
        auto result = divide_list(input, 3);
        REQUIRE(result.size() == 3);
        REQUIRE(result[0] == std::vector<int>({1, 2}));
        REQUIRE(result[1] == std::vector<int>({3, 4}));
        REQUIRE(result[2] == std::vector<int>({5, 6, 7}));
    }

    SECTION("List with 0 elements divided into 3 parts") {
        std::vector<int> input = {};
        auto result = divide_list(input, 3);
        REQUIRE(result.size() == 0);
    }

    SECTION("List with 5 elements divided into 1 part") {
        std::vector<int> input = {1, 2, 3, 4, 5};
        auto result = divide_list(input, 1);
        REQUIRE(result.size() == 1);
        REQUIRE(result[0] == std::vector<int>({1, 2, 3, 4, 5}));
    }

    SECTION("List with 5 elements divided into 0 parts should throw exception") {
        std::vector<int> input = {1, 2, 3, 4, 5};
        CHECK_THROWS_AS(divide_list(input, 0), std::invalid_argument);
    }
}
```

This C++ code includes the `divide_list` function and several test cases using Catch2. Each section represents a different scenario to ensure the function behaves as expected. Make sure you have Catch2 installed and properly configured in your project to compile and run these tests.