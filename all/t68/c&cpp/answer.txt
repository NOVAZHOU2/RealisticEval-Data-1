Here's how you can convert the Python code to C++:

```c++
#include <vector>
#include <algorithm>

std::vector<std::vector<int>> divideList(std::vector<int> &lst, int n) {
    std::vector<std::vector<int>> result;
    int size = lst.size();
    for(int i=0; i<n; ++i){
        int start = i*size/n;
        int end = (i+1)*size/n + (i<size%n);
        if(start>=end)
            break;
        result.push_back(std::vector<int>(lst.begin()+start, lst.begin()+end));
    }
    return result;
}
```

And here's how you can convert it to C:

```c
#include <stdlib.h>
#include <string.h>

void divideList(int* lst, int size, int n, int*** result, int** sizes) {
    *result = malloc(n * sizeof(int*));
    *sizes = malloc(n * sizeof(int));

    for(int i=0; i<n; ++i){
        int start = i*size/n;
        int end = (i+1)*size/n + (i<size%n);
        (*sizes)[i] = end - start;

        (*result)[i] = malloc((*sizes)[i] * sizeof(int));
        memcpy((*result)[i], lst+start, (*sizes)[i]*sizeof(int));
    }
}
```
In both versions, `divideList` function divides the input list (`lst`) into `n` parts. In the C++ version, the function returns a vector of vectors, and in the C version, it modifies the output parameters `result` and `sizes`. Note that in C++, we use smart pointers or RAII techniques to manage memory automatically, but in C, manual memory management is necessary and must be handled carefully to avoid memory leaks.