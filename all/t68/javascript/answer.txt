Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function divideList(lst, n) {
    /**
     * Divide an array into n parts as evenly as possible. Excess elements are distributed to earlier subarrays.
     *
     * @param {Array} lst - The array to be divided.
     * @param {number} n - The number of parts to divide the array into.
     *
     * @returns {Array<Array>} - An array containing n subarrays, where each subarray represents a part of the original array.
     */
    // Total number of elements in the array
    const L = lst.length;
    // Calculate the size of each part
    const baseSize = Math.floor(L / n);
    // Calculate the number of sections that will have an additional element
    const remainder = L % n;

    const result = [];
    // Start index of the subarray
    let startIndex = 0;

    for (let i = 0; i < n; i++) {
        // Determine the size of the current part
        const partSize = baseSize + (i < remainder ? 1 : 0);
        // Append the subarray to the result array
        result.push(lst.slice(startIndex, startIndex + partSize));
        // Update the start index for the next part
        startIndex += partSize;
    }

    return result;
}
```

### Explanation:
- **Function Definition**: The function `divideList` takes two parameters: `lst` (the array to be divided) and `n` (the number of parts to divide the array into).
- **Calculations**:
  - `L`: The total number of elements in the array.
  - `baseSize`: The base size of each part calculated by dividing the total length by `n`.
  - `remainder`: The number of parts that will have one extra element.
- **Result Array**: An empty array `result` is initialized to store the resulting subarrays.
- **Loop**: A loop iterates from `0` to `n-1` to create each subarray.
  - `startIndex`: The starting index of the current subarray.
  - `partSize`: The size of the current part, which includes an extra element if `i` is less than `remainder`.
  - `slice`: The `slice` method is used to extract the subarray from `lst`.
  - `push`: The subarray is added to the `result` array.
  - `startIndex` is updated for the next iteration.
- **Return**: The `result` array is returned, containing all the subarrays.

This JavaScript code mirrors the behavior of the Python code, ensuring that the list is divided into `n` parts as evenly as possible, with any excess elements distributed to the earlier subarrays.