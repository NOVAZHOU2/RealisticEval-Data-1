Certainly! Here is the equivalent Java code for the given Python function, including appropriate Javadoc comments and Java conventions:

```java
import java.util.ArrayList;
import java.util.List;

public class Answer {

    /**
     * Divides a list evenly into n parts and returns a list of these parts.
     * If the list length is not divisible by n, additional elements are added to the previous sections one by one.
     *
     * @param lst The list to be divided.
     * @param n The number of parts to divide the list into.
     * @return A list containing n sublists, where each sublist represents a part of the original list.
     */
    public static List<List<Integer>> divideList(List<Integer> lst, int n) {
        // Total number of elements in the list
        int L = lst.size();
        // Calculate the size of each part
        int baseSize = L / n;
        // Calculate the number of sections that will have an additional element
        int remainder = L % n;

        List<List<Integer>> result = new ArrayList<>();
        // Start index of the sublist
        int startIndex = 0;

        for (int i = 0; i < n; i++) {
            // Determine the size of the current part
            int partSize = baseSize + (i < remainder ? 1 : 0);
            // Append the sublist to the result list
            result.add(new ArrayList<>(lst.subList(startIndex, startIndex + partSize)));
            // Update the start index for the next part
            startIndex += partSize;
        }

        return result;
    }

    public static void main(String[] args) {
        List<Integer> lst = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        int n = 3;
        List<List<Integer>> dividedList = divideList(lst, n);
        System.out.println(dividedList);
    }
}
```

### Explanation:
1. **Import Statements**: The necessary import statements are included at the beginning of the file.
   - `import java.util.ArrayList;`
   - `import java.util.List;`

2. **Class Definition**: The class `Answer` is defined.

3. **Javadoc Comments**: The method `divideList` includes detailed Javadoc comments that describe the purpose, arguments, and return value of the method.

4. **Method Signature**:
   - The method signature `public static List<List<Integer>> divideList(List<Integer> lst, int n)` matches the Python function signature.
   - The parameter types are specified as `List<Integer>` and `int`.

5. **Logic Implementation**: The logic for dividing the list into `n` parts is implemented similarly to the Python code, ensuring the same functionality.

6. **Main Method**: A `main` method is included to demonstrate how to call the `divideList` method and print the result.

This Java code preserves the original functionality and structure of the Python code while adhering to Java's conventions and syntax.