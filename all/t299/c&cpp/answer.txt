Sure! Below is the equivalent C++ code for your JavaScript function:

```cpp
#include <iostream>
#include <string>
#include <sstream>
#include <ctime>

std::string calculateAge(const std::string& birthDateString) {
    // Check if the birth date string is empty
    if (birthDateString.empty()) {
        return "";
    }

    // Parse the birth date string into a tm structure
    struct tm birthDate = {};
    strptime(birthDateString.c_str(), "%Y-%m-%d", &birthDate);

    // Get the current time
    time_t now = time(nullptr);
    struct tm* current = localtime(&now);

    // Calculate the difference in years
    int age = current->tm_year + 1900 - (birthDate.tm_year + 1900);

    // Adjust the age if the current month and day are before the birth month and day
    if ((current->tm_mon < birthDate.tm_mon) || 
        (current->tm_mon == birthDate.tm_mon && current->tm_mday < birthDate.tm_mday)) {
        age--;
    }

    // Format the result string
    std::ostringstream oss;
    oss << birthDateString << " (" << age << ")";
    return oss.str();
}

int main() {
    // Example usage
    std::string birthDateString = "1990-05-20";
    std::cout << calculateAge(birthDateString) << std::endl;  // Output: 1990-05-20 (33)
    return 0;
}
```

### Explanation:
1. **Input Validation**: The function first checks if the `birthDateString` is empty and returns an empty string if it is.
2. **Parsing the Birth Date**: The `strptime` function is used to parse the birth date string into a `tm` structure.
3. **Getting Current Time**: The `time` and `localtime` functions are used to get the current date and time.
4. **Calculating Age**: The age is calculated by subtracting the birth year from the current year. If the current month and day are before the birth month and day, the age is decremented by one.
5. **Formatting the Result**: The result is formatted into a string and returned.

This C++ code should provide similar functionality to your JavaScript function.