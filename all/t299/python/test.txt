To convert the provided JavaScript Jest test cases to Python unit tests using the unittest framework, you can follow this structure. Below is the equivalent Python code:
Python Unit Test Code
python
import unittest
from datetime import datetime
from your_module import calculate_age  # Adjust the import based on your module structure

class TestCalculateAge(unittest.TestCase):

    def test_birthday_today(self):
        self.assertEqual(calculate_age('2000-08-23'), '2000-08-23 (24)')

    def test_birthday_passed_this_year(self):
        self.assertEqual(calculate_age('1990-01-15'), '1990-01-15 (34)')

    def test_birthday_at_end_of_year(self):
        self.assertEqual(calculate_age('1985-12-31'), '1985-12-31 (38)')

    def test_recently_turned_one_year_old(self):
        self.assertEqual(calculate_age('2023-05-05'), '2023-05-05 (1)')

    def test_invalid_date_input(self):
        self.assertEqual(calculate_age('invalid-date'), '')

if __name__ == '__main__':
    unittest.main()
Explanation:
Import Statements:
Import the unittest module for creating test cases.
Import calculate_age from the appropriate module where it's defined. Replace your_module with the actual name of the module.
Test Class:
Create a class TestCalculateAge that inherits from unittest.TestCase. This class will contain all the test methods.
Test Methods:
Each test case is defined as a method within the class.
Use self.assertEqual() to compare the result of calculate_age with the expected output. This is analogous to expect(...).toBe(...) in Jest.
Main Block:
The if __name__ == '__main__': block allows the script to be run directly, which triggers the unit tests.
Running the Tests:
To run the tests, save this code in a Python file (e.g., test_calculate_age.py) and execute it. You can do this from the command line using:
bash
python -m unittest test_calculate_age.py
This will run all the tests and provide output about their success or failure.