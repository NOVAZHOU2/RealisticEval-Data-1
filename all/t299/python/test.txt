Sure! Below is the equivalent Python unit test case using the `unittest` framework for the JavaScript function you provided.

```python
import unittest
from datetime import datetime

def calculate_age(birth_date_string):
    if not birth_date_string:
        return ""
    
    try:
        birth_date = datetime.strptime(birth_date_string, '%Y-%m-%d')
        today = datetime.today()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        return f"{birth_date_string} ({age})"
    except ValueError:
        return ""

class TestCalculateAge(unittest.TestCase):
    def test_valid_birth_date(self):
        self.assertEqual(calculate_age("1990-05-15"), "1990-05-15 (33)")
    
    def test_invalid_birth_date(self):
        self.assertEqual(calculate_age("2020-13-01"), "")
    
    def test_empty_birth_date(self):
        self.assertEqual(calculate_age(""), "")

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
1. **Function Definition**: The `calculate_age` function remains the same as in your JavaScript example.
2. **Test Class**: We create a test class `TestCalculateAge` inheriting from `unittest.TestCase`.
3. **Test Methods**:
   - `test_valid_birth_date`: Tests the function with a valid birth date string.
   - `test_invalid_birth_date`: Tests the function with an invalid birth date string.
   - `test_empty_birth_date`: Tests the function with an empty birth date string.
4. **Assertions**: We use `self.assertEqual` to check if the output of the function matches the expected result.
5. **Running Tests**: The `if __name__ == '__main__': unittest.main()` line ensures that the tests run when the script is executed directly.

This Python test case should cover the same scenarios as your JavaScript Jest test cases.