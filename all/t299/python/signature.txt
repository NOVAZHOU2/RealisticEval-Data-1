Certainly! Below is the equivalent Python code with the same functionality and comments:

```python
import datetime

def calculate_age(birth_date_string):
    """
    Calculates the age from the given birth date string and returns a string containing the original birth date and the calculated age. 
    If the entered date string is invalid or empty, the function returns an empty string.

    :param birth_date_string: The birth date as a string in a recognizable date format (e.g., 'YYYY-MM-DD').
    :type birth_date_string: str
    :return: A string that includes the original birth date and the calculated age in the format 'birth_date_string (age)', or an empty string if the input is invalid.
    :rtype: str
    """

    # Check if the input is empty
    if not birth_date_string:
        return ""

    try:
        # Parse the birth date string into a datetime object
        birth_date = datetime.datetime.strptime(birth_date_string, '%Y-%m-%d')
        
        # Calculate the current date
        today = datetime.datetime.today()
        
        # Calculate the difference in years
        age = today.year - birth_date.year
        
        # Adjust the age if the current month is before the birth month or if it's the same month but the day is before the birth day
        if today.month < birth_date.month or (today.month == birth_date.month and today.day < birth_date.day):
            age -= 1
        
        # Return the formatted result
        return f"{birth_date_string} ({age})"
    
    except ValueError:
        # Handle the case where the input date string is invalid
        return ""
```

This Python function `calculate_age` performs the same task as the JavaScript function `calculateAge`, including validating the input date string and calculating the age based on the provided birth date.