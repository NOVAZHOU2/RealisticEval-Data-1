Sure, here is how you can convert your Python unittest test class into a Jest test case in JavaScript:

```javascript
const fs = require('fs');
const path = require('path');

function prependToEachLine(filePath, prefix) {
    try {
        let data = fs.readFileSync(filePath, 'utf8');
        let lines = data.split('\n');
        for(let i=0; i<lines.length; i++) {
            lines[i] = prefix + lines[i];
        }
        fs.writeFileSync(filePath, lines.join('\n'), 'utf8');
    } catch (error) {
        throw error;
    }
}

// Jest test case
describe('prependToEachLine', () => {
  it('should prepend prefix to each line of the file', async () => {
    const tempFilePath = path.join(__dirname, 'temp.txt');
    const content = "line1\nline2\nline3";
    
    // Create a temporary file with initial content
    fs.writeFileSync(tempFilePath, content);

    // Call the function
    prependToEachLine(tempFilePath, 'prefix_');

    // Read the updated file and check if the content is correct
    let updatedContent = fs.readFileSync(tempFilePath, 'utf8');
    expect(updatedContent).toBe("prefix_line1\nprefix_line2\nprefix_line3");

    // Clean up - remove the temporary file
    fs.unlinkSync(tempFilePath);
  });
});
```

This JavaScript code uses Node.js's built-in `fs` module to read from and write to files, similar to what the Python code does using `open`. The Jest test case checks that the `prependToEachLine` function correctly prepends a prefix to each line of the file and then cleans up by removing the temporary file after the test has run.