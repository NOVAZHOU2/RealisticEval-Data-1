Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The conversion includes maintaining the functionality and logic of the tests, as well as documenting any necessary changes due to language differences between Python and JavaScript.

### Python Code:
```python
import unittest
import os

def prepend_to_each_line(file_path, prefix):
    """
    Appends the specified string to the beginning of each line of the file.

    Args:
    file_path (str): Path to the file whose lines will be modified.
    prefix (str): String to append to the beginning of each line.
    """
    import os
    temp_file_path = file_path + ".tmp"

    with open(file_path, 'r') as file, open(temp_file_path, 'w') as temp_file:
        for line in file:
            temp_file.write(prefix + line)

    # Replace the original file with the modified file
    os.replace(temp_file_path, file_path)


class TestPrependToEachLine(unittest.TestCase):
    def setUp(self):
        """Create a temporary file for testing."""
        self.test_file_path = "test_file.txt"
        with open(self.test_file_path, 'w') as f:
            f.write("Line 1\nLine 2\nLine 3")

    def tearDown(self):
        """Remove the temporary file after testing."""
        os.remove(self.test_file_path)

    def test_prepend_string(self):
        """Test appending a simple string to the beginning of each line."""
        prepend_to_each_line(self.test_file_path, "Test: ")
        with open(self.test_file_path, 'r') as f:
            lines = f.readlines()
            self.assertEqual(lines, ["Test: Line 1\n", "Test: Line 2\n", "Test: Line 3"])

    def test_prepend_empty_string(self):
        """Test appending an empty string."""
        prepend_to_each_line(self.test_file_path, "")
        with open(self.test_file_path, 'r') as f:
            lines = f.readlines()
            self.assertEqual(lines, ["Line 1\n", "Line 2\n", "Line 3"])

    def test_prepend_special_characters(self):
        """Test appending special characters to the beginning of each line."""
        prepend_to_each_line(self.test_file_path, "#$%^&* ")
        with open(self.test_file_path, 'r') as f:
            lines = f.readlines()
            self.assertEqual(lines, ["#$%^&* Line 1\n", "#$%^&* Line 2\n", "#$%^&* Line 3"])

    def test_prepend_numeric_string(self):
        """Test appending numeric string to the beginning of each line."""
        prepend_to_each_line(self.test_file_path, "123 ")
        with open(self.test_file_path, 'r') as f:
            lines = f.readlines()
            self.assertEqual(lines, ["123 Line 1\n", "123 Line 2\n", "123 Line 3"])

    def test_file_not_found(self):
        """Test the response when the file does not exist."""
        with self.assertRaises(FileNotFoundError):
            prepend_to_each_line("non_existent_file.txt", "Test: ")


# Import necessary modules for Jest
const fs = require('fs').promises;
const os = require('os');

function prependToEachLine(file_path, prefix) {
    const tempFilePath = file_path + ".tmp";

    // Read the original file
    const fileContent = fs.readFile(file_path, 'utf8');
    return fileContent.then(content => {
        const lines = content.split(os.EOL);

        // Write the modified content to a temporary file
        let modifiedContent = '';
        for (const line of lines) {
            modifiedContent += prefix + line + os.EOL;
        }

        return fs.writeFile(tempFilePath, modifiedContent).then(() => {
            // Replace the original file with the modified file
            return fs.rename(tempFilePath, file_path);
        });
    });
}

describe('TestPrependToEachLine', () => {
    let testFilePath;

    beforeAll(() => {
        testFilePath = 'test_file.txt';
        return fs.writeFile(testFilePath, 'Line 1\nLine 2\nLine 3');
    });

    afterAll(() => {
        return fs.unlink(testFilePath);
    });

    it('should prepend a simple string to each line', async () => {
        await prependToEachLine(testFilePath, 'Test: ');
        const content = await fs.readFile(testFilePath, 'utf8');
        const lines = content.split(os.EOL);
        expect(lines).toEqual(['Test: Line 1', 'Test: Line 2', 'Test: Line 3']);
    });

    it('should prepend an empty string', async () => {
        await prependToEachLine(testFilePath, '');
        const content = await fs.readFile(testFilePath, 'utf8');
        const lines = content.split(os.EOL);
        expect(lines).toEqual(['Line 1', 'Line 2', 'Line 3']);
    });

    it('should prepend special characters to each line', async () => {
        await prependToEachLine(testFilePath, '#$%^&* ');
        const content = await fs.readFile(testFilePath, 'utf8');
        const lines = content.split(os.EOL);
        expect(lines).toEqual(['#$%^&* Line 1', '#$%^&* Line 2', '#$%^&* Line 3']);
    });

    it('should prepend a numeric string to each line', async () => {
        await prependToEachLine(testFilePath, '123 ');
        const content = await fs.readFile(testFilePath, 'utf8');
        const lines = content.split(os.EOL);
        expect(lines).toEqual(['123 Line 1', '123 Line 2', '123 Line 3']);
    });

    it('should throw an error if the file does not exist', async () => {
        await expect(prependToEachLine('non_existent_file.txt', 'Test: '))
            .rejects.toThrowError(/ENOENT/);
    });
});
```

### Explanation:
1. **Setup and Teardown**:
   - `beforeAll`: Creates the test file before running the tests.
   - `afterAll`: Removes the test file after all tests have run.

2. **Test Cases**:
   - Each test case uses `async` functions and `await` to handle asynchronous operations.
   - Assertions are made using Jest's `expect` function.

3. **File Operations**:
   - `fs.promises` is used for asynchronous file operations.
   - `os.EOL` is used to determine the end-of-line character specific to the operating system.

4. **Error Handling**:
   - The `test_file_not_found` test case uses `expect(...).rejects.toThrowError` to check for errors when the file does not exist.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to JavaScript's Jest testing framework.