Certainly! Below is the equivalent JavaScript code with the function signature and JSDoc comments:

```javascript
/**
 * Appends the specified string to the beginning of each line of the file.
 * 
 * @param {string} file_path - Path to the file whose lines will be modified.
 * @param {string} prefix - String to append to the beginning of each line.
 */
async function prependToEachLine(file_path, prefix) {
    const tempFilePath = file_path + ".tmp";

    // Read the original file
    const fileContent = await fs.promises.readFile(file_path, 'utf8');
    const lines = fileContent.split(os.EOL);

    // Write the modified content to a temporary file
    let modifiedContent = '';
    for (const line of lines) {
        modifiedContent += prefix + line + os.EOL;
    }

    await fs.promises.writeFile(tempFilePath, modifiedContent);

    // Replace the original file with the modified file
    await fs.promises.rename(tempFilePath, file_path);
}

// Example usage
(async () => {
    try {
        await prependToEachLine('example.txt', '>>> ');
        console.log('File has been modified successfully.');
    } catch (error) {
        console.error('An error occurred:', error);
    }
})();
```

### Explanation:
1. **JSDoc Comments**: The JSDoc comments provide detailed documentation for the function, including parameter types and descriptions.
2. **Function Signature**: The function `prependToEachLine` is defined with the appropriate parameters and types.
3. **Async/Await**: The function uses `async/await` for asynchronous file operations.
4. **File Operations**: The `fs.promises` API is used for asynchronous file reading and writing.
5. **Operating System EOL**: The `os.EOL` constant is used to determine the end-of-line character specific to the operating system.
6. **Example Usage**: An example usage is provided within an immediately-invoked async function to demonstrate how to call the `prependToEachLine` function.

This ensures that the JavaScript code preserves the purpose and structure of the original Python code while adhering to JavaScript documentation standards.