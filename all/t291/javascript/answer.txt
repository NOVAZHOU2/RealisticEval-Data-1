Sure! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
const fs = require('fs').promises;
const os = require('os');

async function prependToEachLine(file_path, prefix) {
    /**
     * Appends the specified string to the beginning of each line of the file.
     *
     * @param {string} file_path - Path to the file whose lines will be modified.
     * @param {string} prefix - String to append to the beginning of each line.
     */
    const tempFilePath = file_path + ".tmp";

    // Read the original file
    const fileContent = await fs.readFile(file_path, 'utf8');
    const lines = fileContent.split(os.EOL);

    // Write the modified content to a temporary file
    let modifiedContent = '';
    for (let line of lines) {
        modifiedContent += prefix + line + os.EOL;
    }

    await fs.writeFile(tempFilePath, modifiedContent);

    // Replace the original file with the modified file
    await fs.rename(tempFilePath, file_path);
}

// Example usage
(async () => {
    try {
        await prependToEachLine('example.txt', '>>> ');
        console.log('File has been modified successfully.');
    } catch (error) {
        console.error('An error occurred:', error);
    }
})();
```

### Explanation:
1. **Imports**: The `fs.promises` and `os` modules are imported to handle file system operations and operating system-specific newline characters.
2. **Function Definition**: The `prependToEachLine` function is defined with the same docstring and parameters as the Python version.
3. **Reading the File**: The file content is read using `fs.readFile` and split into lines using the operating system's newline character (`os.EOL`).
4. **Modifying the Content**: A loop iterates over each line, prepending the specified prefix and constructing the modified content.
5. **Writing to Temporary File**: The modified content is written to a temporary file using `fs.writeFile`.
6. **Replacing the Original File**: The temporary file is renamed to replace the original file using `fs.rename`.

This JavaScript code performs the same operation as the Python code, appending the specified prefix to the beginning of each line in the file.