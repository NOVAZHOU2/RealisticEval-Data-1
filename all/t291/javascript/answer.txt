Sure! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
const fs = require('fs').promises;
const os = require('os');

async function prependToEachLine(file_path, prefix) {
    /**
     * Appends the specified string to the beginning of each line of the file.
     *
     * @param {string} file_path - Path to the file whose lines will be modified.
     * @param {string} prefix - String to append to the beginning of each line.
     */
    const tempFilePath = file_path + ".tmp";

    // Read the original file
    const fileContent = await fs.readFile(file_path, 'utf8');
    const lines = fileContent.split(os.EOL);

    // Write the modified content to a temporary file
    let modifiedContent = '';
    for (const line of lines) {
        modifiedContent += prefix + line + os.EOL;
    }

    await fs.writeFile(tempFilePath, modifiedContent);

    // Replace the original file with the modified file
    await fs.rename(tempFilePath, file_path);
}

// Example usage
(async () => {
    try {
        await prependToEachLine('example.txt', '>>> ');
        console.log('File has been modified successfully.');
    } catch (error) {
        console.error('An error occurred:', error);
    }
})();
```

### Explanation:
1. **Imports**: The `fs.promises` module is used for asynchronous file operations, and `os` is used to get the operating system's end-of-line character.
2. **Function Definition**: The `prependToEachLine` function takes two parameters: `file_path` and `prefix`.
3. **Temporary File**: A temporary file path is created by appending `.tmp` to the original file path.
4. **Reading the File**: The original file is read, and its content is split into an array of lines using the OS-specific end-of-line character.
5. **Modifying Content**: Each line is prepended with the specified `prefix`, and the modified content is written to the temporary file.
6. **Replacing the Original File**: The temporary file is renamed to replace the original file.
7. **Example Usage**: An example usage is provided within an immediately-invoked async function to demonstrate how to call the `prependToEachLine` function.