Certainly! Below is the equivalent C++ code for the given Python function. This code appends the specified string to the beginning of each line in a file:

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <filesystem>

namespace fs = std::filesystem;

void prepend_to_each_line(const std::string& file_path, const std::string& prefix) {
    /**
     * Appends the specified string to the beginning of each line of the file.
     *
     * Args:
     * file_path (std::string): Path to the file whose lines will be modified.
     * prefix (std::string): String to append to the beginning of each line.
     */
    std::string temp_file_path = file_path + ".tmp";

    std::ifstream file(file_path);
    std::ofstream temp_file(temp_file_path);

    if (!file.is_open() || !temp_file.is_open()) {
        std::cerr << "Error opening files." << std::endl;
        return;
    }

    std::string line;
    while (std::getline(file, line)) {
        temp_file << prefix << line << std::endl;
    }

    file.close();
    temp_file.close();

    // Replace the original file with the modified file
    fs::replace(temp_file_path, file_path);

    // Remove the temporary file if the replacement fails
    if (fs::exists(temp_file_path)) {
        fs::remove(temp_file_path);
    }
}

int main() {
    std::string file_path = "example.txt";
    std::string prefix = "Prefix: ";
    prepend_to_each_line(file_path, prefix);
    return 0;
}
```

### Explanation:
1. **File Handling**: The code uses `std::ifstream` and `std::ofstream` to read from and write to files, respectively.
2. **Temporary File**: A temporary file is created by appending `.tmp` to the original file path.
3. **Reading Lines**: Each line is read using `std::getline`.
4. **Writing Lines**: Each line is written to the temporary file with the prefix added at the beginning.
5. **File Replacement**: The `std::filesystem::replace` function is used to replace the original file with the temporary file.
6. **Error Handling**: Error handling checks if files are opened successfully and removes the temporary file if the replacement fails.

This code ensures that the functionality, logic, and structure remain consistent with the original Python code while adapting to C++ syntax and features.