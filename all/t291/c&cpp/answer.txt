Certainly! Below is the equivalent C++ code for the given Python function. This code appends a specified string to the beginning of each line in a file:

```cpp
#include <iostream>
#include <fstream>
#include <string>

void prepend_to_each_line(const std::string& file_path, const std::string& prefix) {
    /**
     * Appends the specified string to the beginning of each line of the file.
     *
     * Args:
     * file_path (std::string): Path to the file whose lines will be modified.
     * prefix (std::string): String to append to the beginning of each line.
     */
    std::string temp_file_path = file_path + ".tmp";

    std::ifstream file(file_path);
    std::ofstream temp_file(temp_file_path);

    if (!file.is_open() || !temp_file.is_open()) {
        std::cerr << "Error opening files." << std::endl;
        return;
    }

    std::string line;
    while (std::getline(file, line)) {
        temp_file << prefix << line << '\n';
    }

    file.close();
    temp_file.close();

    // Replace the original file with the modified file
    if (std::rename(temp_file_path.c_str(), file_path.c_str()) != 0) {
        std::cerr << "Error replacing the file." << std::endl;
    }
}

int main() {
    std::string file_path = "example.txt";
    std::string prefix = "Prefix: ";
    prepend_to_each_line(file_path, prefix);
    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<iostream>`, `<fstream>`, `<string>`) are included.
2. **Function Definition**: The `prepend_to_each_line` function takes two parameters: `file_path` and `prefix`.
3. **Temporary File**: A temporary file path is created by appending `.tmp` to the original file path.
4. **File Streams**: `std::ifstream` and `std::ofstream` are used to read from and write to the files, respectively.
5. **Error Handling**: Checks if the files are successfully opened; if not, an error message is printed.
6. **Reading and Writing Lines**: Each line is read from the original file, prefixed with the specified string, and written to the temporary file.
7. **Closing Files**: Both input and output files are closed after processing.
8. **Replacing the Original File**: The temporary file is renamed to replace the original file using `std::rename`. If this operation fails, an error message is printed.
9. **Main Function**: Demonstrates how to call the `prepend_to_each_line` function with a sample file path and prefix.