Sure, here is an equivalent C++ test case using Catch2 for the given Python unittest function `prepend_to_each_line`. Note that Catch2 is a header-only testing framework for C++ and you need to include it in your project.

First, let's define the function `prepend_to_each_line` in C++. For simplicity, I'll assume that the function reads from a file into memory, modifies the lines, and then writes them back to the same file. In a real-world scenario, you might want to handle file operations more carefully, but for the sake of this example, we'll keep it simple.

```cpp
#include <fstream>
#include <sstream>
#include <string>

void prepend_to_each_line(const std::string& file_path, const std::string& prefix) {
    std::ifstream input_file(file_path);
    if (!input_file.is_open()) {
        throw std::runtime_error("Failed to open file");
    }

    std::stringstream buffer;
    buffer << input_file.rdbuf();
    input_file.close();

    std::ofstream output_file(file_path);
    if (!output_file.is_open()) {
        throw std::runtime_error("Failed to open file for writing");
    }

    std::string line;
    while (std::getline(buffer, line)) {
        output_file << prefix << line << '\n';
    }
    output_file.close();
}
```

Now, let's write the corresponding Catch2 test cases:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"

TEST_CASE("Prepend to Each Line", "[prepend_to_each_line]") {
    std::string test_file = "test.txt";
    std::string expected_output = "prefixLine1\nprefixLine2\n";

    // Create a temporary test file with some content
    std::ofstream temp_file(test_file);
    temp_file << "Line1\nLine2\n";
    temp_file.close();

    try {
        prepend_to_each_line(test_file, "prefix");

        // Read the modified content back from the file
        std::ifstream result_file(test_file);
        std::string actual_output((std::istreambuf_iterator<char>(result_file)), std::istreambuf_iterator<char>());
        result_file.close();

        REQUIRE(actual_output == expected_output);
    } catch (const std::exception& e) {
        REQUIRE(false);  // If an exception was thrown, the test failed
    }

    // Clean up the temporary test file
    std::remove(test_file.c_str());
}
```

In this Catch2 test case:

1. We define a test file `test.txt` with some initial content.
2. We call the `prepend_to_each_line` function with the prefix `"prefix"`.
3. We read the modified content back from the file and compare it with the expected output.
4. We clean up the temporary test file after the test.

Make sure to include the Catch2 library in your project and link against it when compiling your tests. The `CATCH_CONFIG_MAIN` macro automatically defines a `main` function for you, so you don't need to write one manually.