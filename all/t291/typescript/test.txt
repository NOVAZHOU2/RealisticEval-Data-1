Sure! Below is the equivalent TypeScript test case using Jest for the given Python `unittest` test class. The function `prepend_to_each_line` is not provided in your Python code, so I'll assume you have a basic implementation that reads from a file and prepends a string to each line before writing it back to the same or another file.

First, let's create the TypeScript version of the function:

```typescript
import fs from 'fs';

function prependToEachLine(filePath: string, prefix: string): void {
    const data = fs.readFileSync(filePath, 'utf8');
    const lines = data.split('\n');
    const modifiedLines = lines.map(line => prefix + line);
    const modifiedData = modifiedLines.join('\n');
    fs.writeFileSync(filePath, modifiedData, 'utf8');
}
```

Now, let's write the Jest test cases for this function:

```typescript
import { prependToEachLine } from './path-to-your-function'; // Adjust the import path accordingly

describe('prependToEachLine', () => {
    const tempFilePath = '/tmp/testfile.txt';

    beforeEach(() => {
        // Create a temporary test file with some content
        fs.writeFileSync(tempFilePath, 'line1\nline2\nline3', 'utf8');
    });

    afterEach(() => {
        // Clean up the temporary test file after each test
        fs.unlinkSync(tempFilePath);
    });

    test('should prepend a prefix to each line', () => {
        prependToEachLine(tempFilePath, 'prefix_');

        const modifiedContent = fs.readFileSync(tempFilePath, 'utf8');
        expect(modifiedContent).toBe('prefix_line1\nprefix_line2\nprefix_line3');
    });

    test('should handle empty lines correctly', () => {
        fs.writeFileSync(tempFilePath, '\nline2\n\nline4', 'utf8');
        prependToEachLine(tempFilePath, 'prefix_');

        const modifiedContent = fs.readFileSync(tempFilePath, 'utf8');
        expect(modifiedContent).toBe('\nprefix_line2\n\nprefix_line4');
    });

    test('should handle files with no newlines correctly', () => {
        fs.writeFileSync(tempFilePath, 'line1', 'utf8');
        prependToEachLine(tempFilePath, 'prefix_');

        const modifiedContent = fs.readFileSync(tempFilePath, 'utf8');
        expect(modifiedContent).toBe('prefix_line1');
    });
});
```

In this example:
- We're using Jest's `describe` and `test` functions to organize our tests.
- `beforeEach` and `afterEach` hooks are used to set up and clean up the temporary test file before and after each test.
- We're testing three scenarios:
  1. Prepending a prefix to each line.
  2. Handling empty lines correctly.
  3. Handling files with no newlines correctly.

Make sure to adjust the import path to where your `prependToEachLine` function is located.