First, we'll create the TypeScript function equivalent to the Python function `prepend_to_each_line`. Then, I'll provide the Jest test suite to verify its correctness.

### TypeScript Function

```typescript
import fs from 'fs';
import path from 'path';

function prependToEachLine(filePath: string, prefix: string): void {
  const tempFilePath = `${filePath}.tmp`;

  // Read the original file
  fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) throw err;

    // Split the content by lines
    const lines = data.split('\n');

    // Prepend the prefix to each line
    const updatedLines = lines.map(line => prefix + line);

    // Join the lines back into a single string
    const updatedData = updatedLines.join('\n');

    // Write the updated content to a temporary file
    fs.writeFile(tempFilePath, updatedData, 'utf8', (writeErr) => {
      if (writeErr) throw writeErr;

      // Replace the original file with the temporary file
      fs.rename(tempFilePath, filePath, (renameErr) => {
        if (renameErr) throw renameErr;
      });
    });
  });
}
```

### Jest Test Suite

Next, let's create a Jest test suite to verify the correctness of the `prependToEachLine` function.

```typescript
import fs from 'fs/promises';
import path from 'path';
import { prependToEachLine } from './prependToEachLine';

describe('prependToEachLine', () => {
  const testFilePath = path.join(__dirname, 'test.txt');
  const tempFilePath = path.join(__dirname, 'test.tmp.txt');
  const prefix = '>>> ';

  beforeAll(async () => {
    await fs.writeFile(testFilePath, 'line1\nline2\nline3', 'utf8');
  });

  afterAll(async () => {
    await fs.unlink(testFilePath);
    await fs.unlink(tempFilePath);
  });

  it('should prepend the prefix to each line', async () => {
    await prependToEachLine(testFilePath, prefix);

    const updatedContent = await fs.readFile(testFilePath, 'utf8');
    const expectedContent = `>>> line1
>>> line2
>>> line3`;

    expect(updatedContent).toEqual(expectedContent);
  });
});
```

### Explanation:

1. **Function Definition**: The `prependToEachLine` function reads the file, prepends the prefix to each line, and writes the updated content back to the original file.

2. **Jest Test Suite**:
   - **beforeAll**: Sets up a test file with some initial content.
   - **afterAll**: Cleans up the test files after all tests are run.
   - **it**: Tests the `prependToEachLine` function by verifying that the prefix has been correctly prepended to each line.

This setup ensures that the TypeScript function and Jest tests are equivalent to the original Python unittest example.