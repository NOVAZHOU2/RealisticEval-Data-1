Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
import fs from 'fs';
import path from 'path';

/**
 * Appends the specified string to the beginning of each line of the file.
 * 
 * @param file_path - Path to the file whose lines will be modified.
 * @param prefix - String to append to the beginning of each line.
 */
function prependToEachLine(file_path: string, prefix: string): void {
    const tempFilePath = file_path + ".tmp";

    // Read the original file and write to a temporary file
    fs.readFile(file_path, 'utf8', (err, data) => {
        if (err) {
            console.error('Error reading the file:', err);
            return;
        }

        const lines = data.split('\n');
        let newData = '';

        for (const line of lines) {
            newData += prefix + line + '\n';
        }

        // Write the new data to the temporary file
        fs.writeFile(tempFilePath, newData, 'utf8', (writeErr) => {
            if (writeErr) {
                console.error('Error writing to the temporary file:', writeErr);
                return;
            }

            // Replace the original file with the modified file
            fs.rename(tempFilePath, file_path, (renameErr) => {
                if (renameErr) {
                    console.error('Error replacing the original file:', renameErr);
                    return;
                }
            });
        });
    });
}

// Example usage
prependToEachLine('/path/to/file.txt', '>>> ');
```

### Explanation:
1. **Imports**: The `fs` module is imported for file system operations.
2. **Function Definition**: The `prependToEachLine` function is defined with TypeScript type annotations.
3. **Documentation Comments**: The JSDoc-style comments provide detailed documentation for the function and its parameters.
4. **Temporary File Path**: A temporary file path is created by appending `.tmp` to the original file path.
5. **Reading the File**: The `fs.readFile` method reads the content of the file synchronously.
6. **Processing Lines**: Each line is processed by adding the prefix and then concatenated back together.
7. **Writing to Temporary File**: The new content is written to the temporary file using `fs.writeFile`.
8. **Replacing Original File**: The temporary file is renamed to replace the original file using `fs.rename`.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and providing clear documentation.