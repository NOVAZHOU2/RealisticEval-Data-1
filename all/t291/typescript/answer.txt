Certainly! Below is the equivalent TypeScript code for the provided Python function. This TypeScript code will prepend a specified string to the beginning of each line in a file:

```typescript
import fs from 'fs';
import path from 'path';

function prependToEachLine(filePath: string, prefix: string): void {
    const tempFilePath = filePath + ".tmp";

    // Read the original file and write to a temporary file
    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) {
            console.error('Error reading the file:', err);
            return;
        }

        const lines = data.split('\n');
        let newData = '';

        for (const line of lines) {
            newData += prefix + line + '\n';
        }

        // Write the new data to the temporary file
        fs.writeFile(tempFilePath, newData, 'utf8', (writeErr) => {
            if (writeErr) {
                console.error('Error writing to the temporary file:', writeErr);
                return;
            }

            // Replace the original file with the modified file
            fs.rename(tempFilePath, filePath, (renameErr) => {
                if (renameErr) {
                    console.error('Error replacing the original file:', renameErr);
                    return;
                }
            });
        });
    });
}

// Example usage
prependToEachLine('/path/to/file.txt', '>>> ');
```

### Explanation:
1. **Imports**: The `fs` module is used for file system operations, and `path` is used for handling file paths.
2. **Function Definition**: The `prependToEachLine` function takes two parameters: `filePath` and `prefix`.
3. **Temporary File Path**: A temporary file path is created by appending `.tmp` to the original file path.
4. **Reading the File**: The `fs.readFile` method reads the content of the file synchronously.
5. **Processing Lines**: Each line is processed by adding the prefix and then concatenated back together.
6. **Writing to Temporary File**: The new content is written to the temporary file using `fs.writeFile`.
7. **Replacing Original File**: The temporary file is renamed to replace the original file using `fs.rename`.

This TypeScript code maintains the same functionality as the Python code but uses asynchronous file operations provided by Node.js.