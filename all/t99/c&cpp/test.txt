Certainly! Here’s how you can convert the Jest test cases to C++ using the Catch2 testing framework. First, make sure you have Catch2 installed and included in your project.

### Step 1: Include Catch2
Make sure you have Catch2 installed. You can include it via a package manager or download it directly.

### Step 2: Write the Test Cases

Here’s the complete C++ code with the Catch2 test cases:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>

// Function to calculate the sum of an array of integers
int sum(const std::vector<int>& arr) {
    int total = 0;
    for (int num : arr) {
        total += num;
    }
    return total;
}

// Function to calculate the sum of an array of floating-point numbers
double sum(const std::vector<double>& arr) {
    double total = 0.0;
    for (double num : arr) {
        total += num;
    }
    return total;
}

TEST_CASE("Sum Function Tests", "[sum]") {
    SECTION("should return the sum of a normal array of positive numbers") {
        REQUIRE(sum(std::vector<int>{1, 2, 3, 4, 5}) == 15);
    }

    SECTION("should return the sum of an array containing negative numbers") {
        REQUIRE(sum(std::vector<int>{-1, -2, -3, -4, -5}) == -15);
    }

    SECTION("should return 0 for an empty array") {
        REQUIRE(sum(std::vector<int>{}) == 0);
    }

    SECTION("should return the sum of an array containing both positive and negative numbers") {
        REQUIRE(sum(std::vector<int>{10, -10, 5, -5, 15}) == 15);
    }

    SECTION("should return the sum of an array with floating point numbers") {
        REQUIRE(sum(std::vector<double>{1.5, 2.5, 3.5}) == Approx(7.5));
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Include Catch2**:
   - Include the Catch2 header file.

2. **Sum Functions**:
   - Define two overloaded `sum` functions: one for `int` arrays and one for `double` arrays.

3. **Test Case Definitions**:
   - Use `TEST_CASE` and `SECTION` macros to define test cases.
   - Use `REQUIRE` to assert the expected results.

4. **Main Function**:
   - Run the Catch2 test session.

### Running the Tests
To run the tests, you need to compile the code with the Catch2 library. Here’s an example command using g++:

```sh
g++ -o sum_tests sum_tests.cpp -lcatch2
./sum_tests
```

This will compile and run the tests, and you should see the output indicating whether each test case passed or failed.

### Additional Notes:
- Make sure you have the Catch2 library properly set up in your environment.
- Adjust the include paths and compilation flags as necessary based on your setup.