Hereâ€™s how you can convert the provided JavaScript Jest test cases to C++ using Catch2:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>

int sum(const std::vector<double>& arr); // Assuming sum function is declared here

TEST_CASE("Sum Function Tests") {
    SECTION("should return the sum of a normal array of positive numbers") {
        REQUIRE(sum({1, 2, 3, 4, 5}) == 15);
    }

    SECTION("should return the sum of an array containing negative numbers") {
        REQUIRE(sum({-1, -2, -3, -4, -5}) == -15);
    }

    SECTION("should return 0 for an empty array") {
        REQUIRE(sum({}) == 0);
    }

    SECTION("should return the sum of an array containing both positive and negative numbers") {
        REQUIRE(sum({10, -10, 5, -5, 15}) == 15);
    }

    SECTION("should return the sum of an array with floating point numbers") {
        REQUIRE(sum({1.5, 2.5, 3.5}) == Approx(7.5)); // Using Approx for floating-point comparison
    }
}
```

### Explanation:
- **Catch2 Framework**: The `#define CATCH_CONFIG_MAIN` directive sets up the main function for the Catch2 test runner.
- **TEST_CASE and SECTION**: These macros define the test suite and individual test cases, respectively.
- **REQUIRE**: This macro is used to assert expected outcomes. For floating-point comparisons, `Approx` is used to handle precision issues.
- **Function Declaration**: The `sum` function is assumed to be declared before the test cases. Adjust accordingly based on your implementation.