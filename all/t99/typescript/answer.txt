Here's the provided JavaScript code converted to TypeScript:

```typescript
/**
 * Do not modify this file!
 * This file is read & written by GPT-3.
 * 
 * Every Doclet with an @autogenerated tag is from GPT-3.
 */

/**
 * @autogenerated
 * @summary Greets someone with a personalized message.
 * 
 * @description Logs a personalized greeting message to the console, using the provided name as input.
 * 
 * @param {string} name - The name to include in the personalized message.
 */
function greet(name: string): void {
    if (typeof name !== 'string' || name.trim() === '') {
        console.log('Hello, Guest!');
    } else {
        console.log(`Hello, ${name.trim()}!`);
    }
}

/** 
 * @autogenerated
 * @summary Calculates the sum of all elements in an array.
 * 
 * @description Takes an array of numbers as input and returns the sum of all the elements. If the array is empty, it returns 0.
 * 
 * @param {number[]} arr - The array of numbers to sum.
 * @returns {number} The sum of all elements of the array.
 */
function sum(arr: number[]): number {
    if (!Array.isArray(arr)) {
        throw new TypeError('Expected an array of numbers');
    }
    
    return arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
}
```

### Key Changes:
1. Added type annotations for parameters and return types.
2. The `greet` function now specifies that `name` is a `string` and has a return type of `void`.
3. The `sum` function specifies that `arr` is an array of `number` and has a return type of `number`. 

This ensures better type safety and helps with code clarity in TypeScript.