Certainly! Hereâ€™s the JavaScript Jest test case converted to TypeScript, using Jest and keeping the comments intact:

```typescript
import { sum } from './path-to-sum-function'; // Replace with the actual path to your sum function

describe('Sum Function Tests', () => {
    test('should return the sum of a normal array of positive numbers', () => {
        expect(sum([1, 2, 3, 4, 5])).toBe(15);
    });

    test('should return the sum of an array containing negative numbers', () => {
        expect(sum([-1, -2, -3, -4, -5])).toBe(-15);
    });

    test('should return 0 for an empty array', () => {
        expect(sum([])).toBe(0);
    });

    test('should return the sum of an array containing both positive and negative numbers', () => {
        expect(sum([10, -10, 5, -5, 15])).toBe(15);
    });

    test('should return the sum of an array with floating point numbers', () => {
        expect(sum([1.5, 2.5, 3.5])).toBe(7.5);
    });
});
```

### Explanation:
1. **Import Statement**: Added an import statement at the top to import the `sum` function from its module. Replace `'./path-to-sum-function'` with the actual path to your `sum` function.
2. **Type Annotations**: Since the test cases themselves do not require additional type annotations, the existing code remains unchanged.

This ensures that the test cases remain valid and the TypeScript compiler can properly handle the imported function.