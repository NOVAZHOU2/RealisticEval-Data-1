Hereâ€™s the provided JavaScript Jest test case converted to TypeScript:

```typescript
describe('Sum Function Tests', () => {
    test('should return the sum of a normal array of positive numbers', () => {
        expect(sum([1, 2, 3, 4, 5])).toBe(15);
    });

    test('should return the sum of an array containing negative numbers', () => {
        expect(sum([-1, -2, -3, -4, -5])).toBe(-15);
    });

    test('should return 0 for an empty array', () => {
        expect(sum([])).toBe(0);
    });

    test('should return the sum of an array containing both positive and negative numbers', () => {
        expect(sum([10, -10, 5, -5, 15])).toBe(15);
    });

    test('should return the sum of an array with floating point numbers', () => {
        expect(sum([1.5, 2.5, 3.5])).toBe(7.5);
    });
});
```

### Key Points:
1. The test cases remain unchanged in structure; TypeScript infers types from the existing definitions, so no additional type annotations are needed within the test cases themselves.
2. Ensure that your TypeScript configuration allows Jest testing, typically by having the appropriate types installed, like `@types/jest`.

This TypeScript version retains the original functionality and comments of the JavaScript test case.