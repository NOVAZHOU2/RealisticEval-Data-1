Certainly! Hereâ€™s how you can convert the Jest test cases to JUnit 4 test cases in Java. The package will be `org.real.temp`, and the class will be `Tester`.

### Java Test Case Using JUnit 4

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

/**
 * Test cases for the sum function.
 */
public class Tester {

    /**
     * Sum Function Tests
     */
    @Test
    public void shouldReturnTheSumOfANormalArrayOfPositiveNumbers() {
        assertEquals(15, sum(new int[]{1, 2, 3, 4, 5}));
    }

    @Test
    public void shouldReturnTheSumOfAnArrayContainingNegativeNumbers() {
        assertEquals(-15, sum(new int[]{-1, -2, -3, -4, -5}));
    }

    @Test
    public void shouldReturnZeroForAnEmptyArray() {
        assertEquals(0, sum(new int[]{}));
    }

    @Test
    public void shouldReturnTheSumOfAnArrayContainingBothPositiveAndNegativeNumbers() {
        assertEquals(15, sum(new int[]{10, -10, 5, -5, 15}));
    }

    @Test
    public void shouldReturnTheSumOfAnArrayWithFloatingPointNumbers() {
        assertEquals(7.5, sum(new double[]{1.5, 2.5, 3.5}), 0.001);
    }

    // Method to be tested
    private int sum(int[] arr) {
        if (arr == null) {
            throw new IllegalArgumentException("Expected a non-null array of numbers");
        }

        int sum = 0;
        for (int num : arr) {
            sum += num;
        }
        return sum;
    }

    // Method to be tested for floating point numbers
    private double sum(double[] arr) {
        if (arr == null) {
            throw new IllegalArgumentException("Expected a non-null array of numbers");
        }

        double sum = 0.0;
        for (double num : arr) {
            sum += num;
        }
        return sum;
    }
}
```

### Explanation:
1. **Package Declaration**: The package is declared as `org.real.temp`.
2. **Import Statements**:
   - `import org.junit.Test;`: Import the JUnit `Test` annotation.
   - `import static org.junit.Assert.assertEquals;`: Import the `assertEquals` method for assertions.
3. **Class Definition**: The class `Tester` contains the test methods.
4. **Test Methods**:
   - Each test method is annotated with `@Test`.
   - The method names are descriptive and match the Jest test descriptions.
   - `assertEquals` is used to assert the expected results.
5. **Implementation of `sum` Methods**:
   - Two separate `sum` methods are defined: one for `int[]` and one for `double[]`.
   - The `sum` method for `int[]` handles integer arrays.
   - The `sum` method for `double[]` handles floating-point arrays.

This setup ensures that the test cases cover various scenarios and validate the correctness of the `sum` method.