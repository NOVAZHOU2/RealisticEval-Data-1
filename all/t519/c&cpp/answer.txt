Certainly! Below is the equivalent C++ code for the provided Python function. This code will transpose a given matrix (2D array) and ensure that the functionality, logic, and structure remain consistent:

```cpp
#include <vector>
#include <iostream>

// Function to transpose a given matrix (2D vector).
std::vector<std::vector<int>> transpose_matrix(const std::vector<std::vector<int>>& matrix) {
    // Check if the matrix is empty
    if (matrix.empty() || matrix[0].empty()) {
        return {};
    }

    size_t num_rows = matrix.size();
    size_t num_cols = matrix[0].size();

    // Initialize the transposed matrix with the correct dimensions
    std::vector<std::vector<int>> transposed(num_cols, std::vector<int>(num_rows, 0));

    for (size_t i = 0; i < num_rows; ++i) {
        for (size_t j = 0; j < num_cols; ++j) {
            transposed[j][i] = matrix[i][j];
        }
    }

    return transposed;
}

int main() {
    // Example usage
    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}};
    std::vector<std::vector<int>> transposed = transpose_matrix(matrix);

    // Print the transposed matrix
    for (const auto& row : transposed) {
        for (int val : row) {
            std::cout << val << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Definition**: The `transpose_matrix` function takes a 2D vector (`std::vector<std::vector<int>>`) as input and returns a transposed 2D vector.
2. **Empty Matrix Check**: The function checks if the input matrix is empty using `matrix.empty()` and `matrix[0].empty()`.
3. **Matrix Dimensions**: It calculates the number of rows and columns using `matrix.size()` and `matrix[0].size()`.
4. **Transposed Matrix Initialization**: A new 2D vector `transposed` is initialized with the correct dimensions.
5. **Transpose Logic**: The nested loops iterate over the original matrix and populate the transposed matrix.
6. **Example Usage**: In the `main` function, an example matrix is defined, and the transposed matrix is printed to demonstrate the functionality.

This code should provide the same functionality as the Python version but adapted to C++ syntax and features.