Sure, here is the equivalent C++ code for your Python function:

```c++
#include <vector>

std::vector<std::vector<int>> transpose_matrix(const std::vector<std::vector<int>>& matrix) {
    int rows = matrix.size();
    int cols = matrix[0].size();

    std::vector<std::vector<int>> transposed(cols, std::vector<int>(rows));

    for(int i=0; i<rows; ++i){
        for(int j=0; j<cols; ++j){
            transposed[j][i] = matrix[i][j];
        }
    }

    return transposed;
}
```

And here's how you could write it in C:

```c
int** transpose_matrix(int** matrix, int rows, int cols) {
    int** transposed = malloc(cols * sizeof(int*));
    for(int i = 0; i < cols; i++) {
        transposed[i] = malloc(rows * sizeof(int));
    }

    for(int i = 0; i < rows; i++){
        for(int j = 0; j < cols; j++){
            transposed[j][i] = matrix[i][j];
        }
    }

    return transposed;
}
```

Please note that in C++, vectors handle memory management automatically and provide more safety features compared to raw arrays in C. In C, you need to manually allocate and free memory which can lead to bugs if not handled correctly.