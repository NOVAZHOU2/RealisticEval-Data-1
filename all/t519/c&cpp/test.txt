Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the necessary headers and using the `CATCH_TEST_CASE` macro for each test case.

Hereâ€™s the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>

// Function to transpose a given matrix (2D vector).
/**
 * Transpose a given matrix (2D array).
 *
 * @param matrix The input 2D array to be transposed.
 * @return The transposed 2D array.
 */
std::vector<std::vector<int>> transpose_matrix(const std::vector<std::vector<int>>& matrix) {
    // Check if the matrix is empty
    if (matrix.empty() || matrix[0].empty()) {
        return {};
    }

    size_t num_rows = matrix.size();
    size_t num_cols = matrix[0].size();

    // Initialize the transposed matrix with the correct dimensions
    std::vector<std::vector<int>> transposed(num_cols, std::vector<int>(num_rows, 0));

    for (size_t i = 0; i < num_rows; ++i) {
        for (size_t j = 0; j < num_cols; ++j) {
            transposed[j][i] = matrix[i][j];
        }
    }

    return transposed;
}

TEST_CASE("Test transposing a square matrix", "[transpose_matrix]") {
    std::vector<std::vector<int>> matrix = {{1, 2}, {3, 4}};
    std::vector<std::vector<int>> expected = {{1, 3}, {2, 4}};
    auto result = transpose_matrix(matrix);
    REQUIRE(result == expected);
}

TEST_CASE("Test transposing a rectangular matrix", "[transpose_matrix]") {
    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}};
    std::vector<std::vector<int>> expected = {{1, 4}, {2, 5}, {3, 6}};
    auto result = transpose_matrix(matrix);
    REQUIRE(result == expected);
}

TEST_CASE("Test transposing a matrix with an empty row", "[transpose_matrix]") {
    std::vector<std::vector<int>> matrix = {{}, {}};
    std::vector<std::vector<int>> expected = {};
    auto result = transpose_matrix(matrix);
    REQUIRE(result == expected);
}

TEST_CASE("Test transposing a matrix with a single element", "[transpose_matrix]") {
    std::vector<std::vector<int>> matrix = {{5}};
    std::vector<std::vector<int>> expected = {{5}};
    auto result = transpose_matrix(matrix);
    REQUIRE(result == expected);
}

int main(int argc, char* argv[]) {
    // Run all the Catch2 tests
    int result = Catch::Session().run(argc, argv);
    return result;
}
```

### Explanation:
1. **Header Files**: Include the necessary headers (`<catch2/catch_test_macros.hpp>` and `<vector>`).
2. **Function Definition**: The `transpose_matrix` function is defined with appropriate documentation.
3. **Test Cases**:
   - Each test case is defined using the `TEST_CASE` macro.
   - The test cases are named and tagged appropriately.
   - The `REQUIRE` macro is used to assert the equality of the results.
4. **Main Function**: The `main` function runs all the Catch2 tests.

This code ensures that the functionality and logic of the tests are preserved while adapting to the syntax and conventions of C++ and the Catch2 testing framework.