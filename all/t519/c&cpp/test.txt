Sure! Below is the equivalent C++ unit test case using Catch2 for the provided Python `unittest` test class. I'll assume you have the `transpose_matrix` function implemented in C++. If not, please provide that implementation as well.

First, let's define the `transpose_matrix` function in C++:

```cpp
#include <vector>
#include <algorithm>

std::vector<std::vector<int>> transpose_matrix(const std::vector<std::vector<int>>& matrix) {
    if (matrix.empty()) return {};

    size_t rows = matrix.size();
    size_t cols = matrix[0].size();

    std::vector<std::vector<int>> transposed(cols, std::vector<int>(rows));

    for (size_t i = 0; i < rows; ++i) {
        for (size_t j = 0; j < cols; ++j) {
            transposed[j][i] = matrix[i][j];
        }
    }

    return transposed;
}
```

Now, let's write the Catch2 unit test case for this function:

```cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

// Assuming the transpose_matrix function is defined above
std::vector<std::vector<int>> transpose_matrix(const std::vector<std::vector<int>>& matrix);

TEST_CASE("Transpose Matrix", "[transpose]") {
    SECTION("Empty Matrix") {
        std::vector<std::vector<int>> emptyMatrix = {};
        auto result = transpose_matrix(emptyMatrix);
        REQUIRE(result.empty());
    }

    SECTION("1x1 Matrix") {
        std::vector<std::vector<int>> oneElementMatrix = {{42}};
        auto result = transpose_matrix(oneElementMatrix);
        REQUIRE(result == std::vector<std::vector<int>>{{42}});
    }

    SECTION("2x3 Matrix") {
        std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}};
        auto result = transpose_matrix(matrix);
        REQUIRE(result == std::vector<std::vector<int>>{{1, 4}, {2, 5}, {3, 6}});
    }

    SECTION("3x2 Matrix") {
        std::vector<std::vector<int>> matrix = {{1, 2}, {3, 4}, {5, 6}};
        auto result = transpose_matrix(matrix);
        REQUIRE(result == std::vector<std::vector<int>>{{1, 3, 5}, {2, 4, 6}});
    }
}
```

In this example:
- We include the Catch2 header and define the `CATCH_CONFIG_MAIN` macro to automatically generate the main function.
- We declare the `transpose_matrix` function which we assume is already implemented.
- We create several sections within the `TEST_CASE` to cover different scenarios such as an empty matrix, a 1x1 matrix, a 2x3 matrix, and a 3x2 matrix.

Make sure you have Catch2 installed and properly configured in your project to compile and run these tests.