Sure! Below is the equivalent JavaScript function for the provided Python code:

```javascript
/**
 * Transpose a given matrix (2D array).
 *
 * @param {number[][]} matrix - The input 2D array to be transposed.
 * @returns {number[][]} - The transposed 2D array.
 */
function transposeMatrix(matrix) {
    const numRows = matrix.length;
    if (numRows === 0) return [];

    const numCols = matrix[0].length;
    const transposed = new Array(numCols);

    for (let i = 0; i < numCols; i++) {
        transposed[i] = new Array(numRows);
        for (let j = 0; j < numRows; j++) {
            transposed[i][j] = matrix[j][i];
        }
    }

    return transposed;
}
```

### Explanation:
1. **Function Signature**: The JavaScript function `transposeMatrix` takes a single argument `matrix`, which is expected to be a 2D array of numbers.
2. **Initialization**:
   - `numRows` is determined by the length of the `matrix`.
   - If the `matrix` is empty (`numRows === 0`), an empty array is returned immediately.
   - `numCols` is determined by the length of the first sub-array in `matrix`.
3. **Transposing the Matrix**:
   - A new array `transposed` with dimensions `[numCols][numRows]` is created.
   - Nested loops iterate over each element of the original matrix and assign it to the appropriate position in the `transposed` array.
4. **Return Statement**: The `transposed` array is returned as the result.

This JavaScript function should work similarly to the provided Python function.