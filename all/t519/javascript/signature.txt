Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Transpose a given matrix (2D array).
 *
 * @param {Array<Array<number>>} matrix - The input 2D array to be transposed.
 * @returns {Array<Array<number>>} The transposed 2D array.
 */
function transposeMatrix(matrix) {
    // Check if the matrix is empty
    if (!matrix || !matrix[0]) {
        return [];
    }

    const numRows = matrix.length;
    const numCols = matrix[0].length;

    // Initialize the transposed matrix with the correct dimensions
    const transposed = Array.from({ length: numCols }, () => Array(numRows).fill(0));

    for (let i = 0; i < numRows; i++) {
        for (let j = 0; j < numCols; j++) {
            transposed[j][i] = matrix[i][j];
        }
    }

    return transposed;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block is placed above the function definition.
   - The `@param` tag is used to document the parameter `matrix`, specifying its type and description.
   - The `@returns` tag is used to document the return value, specifying its type and description.

2. **Function Definition**:
   - The function `transposeMatrix` is defined to take a 2D array `matrix` as an argument.

3. **Empty Matrix Check**:
   - The function checks if the input matrix is empty by verifying if `matrix` or `matrix[0]` is falsy.

4. **Dimensions Calculation**:
   - It calculates the number of rows (`numRows`) and columns (`numCols`) in the input matrix.

5. **Initialization of Transposed Matrix**:
   - A new 2D array `transposed` is initialized with the correct dimensions using `Array.from` and `Array.fill`.

6. **Transposition Logic**:
   - Nested loops iterate over the elements of the input matrix and populate the `transposed` matrix accordingly.

7. **Return Transposed Matrix**:
   - Finally, the transposed matrix is returned.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JSDoc documentation standards.