Here's how you can translate your Python function into Java:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Answer {

    /**
     * Transpose a given matrix (2D array).
     *
     * @param matrix The input 2D array to be transposed.
     * @return The transposed 2D array.
     */
    public static List<List<Integer>> transposeMatrix(List<List<Integer>> matrix) {
        if (matrix == null || matrix.isEmpty() || matrix.get(0).isEmpty()) {
            return new ArrayList<>();
        }

        int rows = matrix.size();
        int cols = matrix.get(0).size();

        List<List<Integer>> result = new ArrayList<>();

        for (int i = 0; i < cols; ++i) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < rows; ++j) {
                row.add(matrix.get(j).get(i));
            }
            result.add(row);
        }

        return result;
    }
}
```

This Java code does exactly what your Python function does - it transposes a given 2D list (or matrix). Note that in Java, we need to handle edge cases such as when the input `matrix` is null or empty, and also ensure proper initialization of our result list before adding elements to it.