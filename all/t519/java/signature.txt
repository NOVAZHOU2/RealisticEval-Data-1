Certainly! Here is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and type translations:

```java
import java.util.List;
import java.util.ArrayList;

public class Answer {

    /**
     * Transpose a given matrix (2D array).
     *
     * @param matrix The input 2D array to be transposed.
     * @return The transposed 2D array.
     */
    public static List<List<Integer>> transposeMatrix(List<List<Integer>> matrix) {
        // Check if the matrix is empty
        if (matrix == null || matrix.isEmpty() || matrix.get(0).isEmpty()) {
            return new ArrayList<>();
        }

        int numRows = matrix.size();
        int numCols = matrix.get(0).size();

        // Initialize the transposed matrix with the correct dimensions
        List<List<Integer>> transposed = new ArrayList<>();
        for (int col = 0; col < numCols; col++) {
            List<Integer> newRow = new ArrayList<>(numRows);
            for (int row = 0; row < numRows; row++) {
                newRow.add(0);
            }
            transposed.add(newRow);
        }

        // Populate the transposed matrix
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                transposed.get(j).set(i, matrix.get(i).get(j));
            }
        }

        return transposed;
    }

    public static void main(String[] args) {
        // Example usage
        List<List<Integer>> matrix = new ArrayList<>();
        matrix.add(List.of(1, 2, 3));
        matrix.add(List.of(4, 5, 6));
        matrix.add(List.of(7, 8, 9));

        List<List<Integer>> transposedMatrix = transposeMatrix(matrix);
        System.out.println(transposedMatrix);
    }
}
```

### Explanation:
1. **Package and Class Declaration**:
   - The Java code is organized within the class `Answer`.

2. **Import Statements**:
   - Import necessary classes such as `List` and `ArrayList`.

3. **Javadoc Comments**:
   - The method `transposeMatrix` includes Javadoc comments that describe the method, its parameters, and its return value.

4. **Method Signature**:
   - The method `transposeMatrix` takes a `List<List<Integer>>` as input and returns a `List<List<Integer>>`.

5. **Null and Empty Checks**:
   - The method checks if the input matrix is null or empty before proceeding.

6. **Initialization of Transposed Matrix**:
   - A new `ArrayList` is created to hold the transposed matrix.
   - Each row of the transposed matrix is initialized with zeros.

7. **Transposing the Matrix**:
   - The original matrix is iterated over, and the values are placed in the transposed matrix accordingly.

8. **Example Usage**:
   - An example matrix is created and passed to the `transposeMatrix` method.
   - The result is printed to demonstrate the functionality.

This Java code preserves the original functionality and structure of the provided Python code, adhering to Java's conventions and syntax.