Here is the equivalent TypeScript code for your Python function:

```typescript
function transposeMatrix(matrix: number[][]): number[][] {
    /**
     * Transpose a given matrix (2D array).
     *
     * @param matrix - The input 2D array to be transposed.
     * @returns The transposed 2D array.
     */
    
    const numRows = matrix.length;
    const numCols = matrix[0].length;

    let transposedMatrix: number[][] = [];

    for(let i=0; i<numCols; i++){
        transposedMatrix[i] = [];
        for(let j=0; j<numRows; j++){
            transposedMatrix[i][j] = matrix[j][i];
        }
    }

    return transposedMatrix;
}
```

This TypeScript function works in a similar way to your Python function. It takes a 2D array of numbers and returns its transpose. Note that unlike Python, TypeScript does not have built-in support for list comprehensions, so we use nested loops instead. Also note that arrays in TypeScript can have different lengths, but here we assume that all sub-arrays are of equal length. If this is not the case, you would need to add some error checking to handle it.