Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Transpose a given matrix (2D array).
 * 
 * @param matrix - The input 2D array to be transposed.
 * @returns The transposed 2D array.
 */
function transposeMatrix(matrix: number[][]): number[][] {
    // Check if the matrix is empty
    if (!matrix.length || !matrix[0].length) {
        return [];
    }

    const numRows = matrix.length;
    const numCols = matrix[0].length;

    // Initialize the transposed matrix with the correct dimensions
    const transposed: number[][] = Array.from({ length: numCols }, () => Array(numRows).fill(0));

    for (let i = 0; i < numRows; i++) {
        for (let j = 0; j < numCols; j++) {
            transposed[j][i] = matrix[i][j];
        }
    }

    return transposed;
}
```

### Explanation:
1. **Function Signature**: The function signature `transposeMatrix(matrix: number[][]): number[][]` is defined with proper type annotations.
2. **JSDoc Comments**: The Python docstring is converted to JSDoc-style comments using `/** */`.
3. **Empty Matrix Check**: The check for an empty matrix is done using `!matrix.length || !matrix[0].length`.
4. **Initialization of Transposed Matrix**: We use `Array.from` to create a new array with the specified dimensions and fill it with zeros.
5. **Transposition Logic**: The nested loops iterate over the rows and columns of the original matrix and populate the transposed matrix accordingly.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and best practices.