Sure, here's how you can convert the given Python `unittest` test class into a JavaScript test case using Jest:

```javascript
const removeComments = require('./removeComments'); // Assuming your function is in a file named removeComments.js

describe('removeComments', () => {
    it('should remove single line comments', () => {
        const input = 'Hello, world! # This is a comment';
        const expectedOutput = 'Hello, world!';
        expect(removeComments(input)).toBe(expectedOutput);
    });

    it('should handle multiple lines without comments', () => {
        const input = 'Hello, world!\nThis is another line\nAnd yet another one';
        const expectedOutput = 'Hello, world!\nThis is another line\nAnd yet another one';
        expect(removeComments(input)).toBe(expectedOutput);
    });

    it('should handle multiple lines with comments', () => {
        const input = 'Hello, world!\n# This is a comment\nAnd yet another one\n# Another comment';
        const expectedOutput = 'Hello, world!\n\nAnd yet another one\n';
        expect(removeComments(input)).toBe(expectedOutput);
    });

    it('should handle empty string', () => {
        const input = '';
        const expectedOutput = '';
        expect(removeComments(input)).toBe(expectedOutput);
    });
});
```

In this JavaScript test case:
- We're using Jest's `describe` function to group related tests together.
- Each test case is defined using the `it` function.
- We're importing the `removeComments` function from the `./removeComments` module.
- We're using the `expect` function to assert that the output of `removeComments` matches the expected result.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```bash
npm install --save-dev jest
```

Or

```bash
yarn add --dev jest
```

Then, you can run your tests using the following command:

```bash
npx jest
```

Or

```bash
yarn jest
```