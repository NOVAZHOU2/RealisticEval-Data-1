Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I'll ensure that the functionality and logic of the tests are maintained, and I'll document any necessary changes due to language differences between Python and JavaScript.

### Python Unittest Code

```python
import unittest

def remove_comments(string: str) -> str:
    """
    Removes comments from the provided string. Comments start with a '#' and end at the newline.
    
    Args:
        string (str): The input string containing potential comments.

    Returns:
        str: The string with all comments removed.
    """
    lines = string.split('\n')  # Split the string into lines
    cleaned_lines = [line.split('#')[0].strip() for line in lines]  # Remove the comment part from each line and strip whitespace
    return '\n'.join(cleaned_lines)  # Join the lines back into a single string

class TestRemoveComments(unittest.TestCase):

    def test_single_line_comment(self):
        """ Test string with a comment on a single line """
        input_string = "Hello, world!# This is a comment"
        expected_output = "Hello, world!"
        self.assertEqual(remove_comments(input_string), expected_output)

    def test_no_comments(self):
        """ Test string with no comments """
        input_string = "Hello, world!\nPython is fun!"
        expected_output = "Hello, world!\nPython is fun!"
        self.assertEqual(remove_comments(input_string), expected_output)

    def test_empty_string(self):
        """ Test an empty string """
        input_string = ""
        expected_output = ""
        self.assertEqual(remove_comments(input_string), expected_output)

    def test_comments_only(self):
        """ Test string where all lines are comments """
        input_string = "# comment only line\n#another comment line"
        expected_output = "\n"
        self.assertEqual(remove_comments(input_string), expected_output)

if __name__ == '__main__':
    unittest.main()
```

### Equivalent Jest Test Suite

Here is the equivalent Jest test suite for the given Python unittest class:

```javascript
// Import the function to be tested
const removeComments = require('./removeComments');

describe('TestRemoveComments', () => {
    describe('test_single_line_comment', () => {
        it('should handle a single line comment correctly', () => {
            const inputString = "Hello, world!# This is a comment";
            const expectedOutput = "Hello, world!";
            expect(removeComments(inputString)).toEqual(expectedOutput);
        });
    });

    describe('test_no_comments', () => {
        it('should handle a string with no comments correctly', () => {
            const inputString = "Hello, world!\nPython is fun!";
            const expectedOutput = "Hello, world!\nPython is fun!";
            expect(removeComments(inputString)).toEqual(expectedOutput);
        });
    });

    describe('test_empty_string', () => {
        it('should handle an empty string correctly', () => {
            const inputString = "";
            const expectedOutput = "";
            expect(removeComments(inputString)).toEqual(expectedOutput);
        });
    });

    describe('test_comments_only', () => {
        it('should handle a string where all lines are comments correctly', () => {
            const inputString = "# comment only line\n#another comment line";
            const expectedOutput = "\n";
            expect(removeComments(inputString)).toEqual(expectedOutput);
        });
    });
});

// Implementation of the removeComments function
function removeComments(string) {
    const lines = string.split('\n');  // Split the string into lines
    const cleanedLines = lines.map(line => line.split('#')[0].trim());  // Remove the comment part from each line and trim whitespace
    return cleanedLines.join('\n');  // Join the lines back into a single string
}

module.exports = removeComments;
```

### Explanation:
1. **Importing the Function**:
   - In Jest, we need to import the function `removeComments` from a separate file.

2. **Describe Blocks**:
   - Each test case is wrapped in a `describe` block for better organization and readability.
   - Each `it` block contains a specific test case with a descriptive message.

3. **Assertions**:
   - The `expect` function is used to assert the expected behavior of the `removeComments` function.
   - `toEqual` is used to check if the actual output matches the expected output.

4. **Function Implementation**:
   - The `removeComments` function is implemented similarly to the Python version, with minor adjustments for JavaScript syntax.

This Jest test suite ensures that the functionality and logic of the tests are preserved, and it follows Jest's best practices for organizing and documenting tests.