Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Removes comments from the provided string. Comments start with a '#' and end at the newline.
 * 
 * Example:
 *   Input: "Hello, world! # This is a comment"
 *   Output: "Hello, world!"
 * 
 * @param {string} input - The input string containing potential comments.
 * @returns {string} - The string with all comments removed.
 */
function removeComments(input: string): string {
    // Split the string into lines
    const lines = input.split('\n');
    // Remove the comment part from each line
    const cleanedLines = lines.map(line => line.split('#')[0].trim());
    // Join the lines back into a single string
    return cleanedLines.join('\n');
}

// Example usage
const inputString = `This is a line
# This is a comment
This is another line # Another comment`;
console.log(removeComments(inputString));
```

### Explanation:
1. **Function Definition**:
   - The function `removeComments` takes a single parameter `input` of type `string` and returns a `string`.
   
2. **Documentation Comments**:
   - The JSDoc-style documentation comments provide a clear description of the function, its parameters, and its return value.
   - An example is included to illustrate how the function works.

3. **Splitting Lines**:
   - The input string is split into lines using the newline character `\n`.

4. **Removing Comments**:
   - Each line is processed using the `map` function to remove the comment part (which starts with `#`).
   - The `.trim()` method is added to remove any trailing whitespace after removing the comment.

5. **Joining Lines**:
   - The cleaned lines are joined back into a single string using the newline character `\n`.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and using appropriate documentation comments.