Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

public class Answer {

    /**
     * Removes comments from the provided string. Comments start with a '#' and end at the newline.
     * 
     * Example:
     *     Input: "Hello, world! # This is a comment"
     *     Output: "Hello, world!"
     * 
     * @param input The input string containing potential comments.
     * @return The string with all comments removed.
     */
    public static String removeComments(String input) {
        // Split the string into lines
        String[] lines = input.split("\n");

        // Remove the comment part from each line
        StringBuilder cleanedString = new StringBuilder();
        for (String line : lines) {
            int commentIndex = line.indexOf('#');
            if (commentIndex != -1) {
                line = line.substring(0, commentIndex);
            }
            cleanedString.append(line).append("\n");
        }

        // Remove the last newline character added during the loop
        if (cleanedString.length() > 0) {
            cleanedString.setLength(cleanedString.length() - 1);
        }

        return cleanedString.toString();
    }

    public static void main(String[] args) {
        // Example usage
        String input = "Hello, world! # This is a comment\nAnother line without comment";
        String output = removeComments(input);
        System.out.println(output);
    }
}
```

### Explanation:
1. **Javadoc Comments**: The Python docstring is converted into a Javadoc comment block using `/** */`.
2. **Method Signature**: The Python function `def remove_comments(string: str) -> str:` is translated into a Java method signature `public static String removeComments(String input)`.
3. **Type Annotations**: The Python type annotation `string: str` is translated to the Java parameter type `String input`.
4. **Return Type**: The Python return type `-> str` is translated to the Java return type `String`.
5. **Logic Preservation**: The logic for removing comments is preserved using Java's string manipulation methods.
6. **Main Method**: An example usage is provided in the `main` method to demonstrate how the `removeComments` method can be called.

This Java code maintains the same functionality and structure as the original Python code while adhering to Java conventions and best practices.