Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be translated into a C++ Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <sstream>
#include <vector>

// Function to remove comments from a string
std::string removeComments(const std::string& input);

TEST_CASE("Test removeComments functionality", "[removeComments]") {
    SECTION("Test string with a comment on a single line") {
        std::string input_string = "Hello, world!# This is a comment";
        std::string expected_output = "Hello, world!";
        REQUIRE(removeComments(input_string) == expected_output);
    }

    SECTION("Test string with no comments") {
        std::string input_string = "Hello, world!\nPython is fun!";
        std::string expected_output = "Hello, world!\nPython is fun!";
        REQUIRE(removeComments(input_string) == expected_output);
    }

    SECTION("Test an empty string") {
        std::string input_string = "";
        std::string expected_output = "";
        REQUIRE(removeComments(input_string) == expected_output);
    }

    SECTION("Test string where all lines are comments") {
        std::string input_string = "# comment only line\n#another comment line";
        std::string expected_output = "\n";
        REQUIRE(removeComments(input_string) == expected_output);
    }
}

// Implementation of the removeComments function
std::string removeComments(const std::string& input) {
    std::istringstream iss(input);
    std::vector<std::string> lines;
    std::string line;

    // Split the string into lines
    while (std::getline(iss, line)) {
        lines.push_back(line);
    }

    std::vector<std::string> cleanedLines;

    // Remove the comment part from each line
    for (const auto& l : lines) {
        size_t commentPos = l.find('#');
        if (commentPos != std::string::npos) {
            cleanedLines.push_back(l.substr(0, commentPos));
        } else {
            cleanedLines.push_back(l);
        }
    }

    std::ostringstream oss;

    // Join the lines back into a single string
    for (size_t i = 0; i < cleanedLines.size(); ++i) {
        if (i > 0) {
            oss << '\n';
        }
        oss << cleanedLines[i];
    }

    return oss.str();
}

// Main function to run the tests
int main(int argc, char* argv[]) {
    Catch::Session().run(argc, argv);
    return 0;
}
```

### Explanation:
1. **Catch2 Header Inclusion**:
   - Include the Catch2 header file `#include <catch2/catch_test_macros.hpp>`.

2. **Test Class Definition**:
   - Use `TEST_CASE` to define the test suite.
   - Use `SECTION` to define individual test cases.

3. **Function Implementation**:
   - The `removeComments` function is implemented similarly to the Python version, using `std::istringstream` and `std::getline` to split the input string into lines.
   - Comments are removed from each line, and the cleaned lines are joined back into a single string using `std::ostringstream`.

4. **Assertions**:
   - Use `REQUIRE` to assert the expected outcomes of the tests.

5. **Main Function**:
   - The `main` function runs the Catch2 test suite using `Catch::Session().run(argc, argv)`.

This C++ code preserves the functionality and logic of the Python unittest class while adhering to the Catch2 testing framework conventions.