Certainly! Here is the equivalent C++ code for the given Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <sstream>

/**
 * Removes comments from the provided string. Comments start with a '#' and end at the newline.
 * For example:
 *     input: "Hello, world! # This is a comment"
 *     output: "Hello, world!"
 *
 * @param input The input string containing potential comments.
 * @return The string with all comments removed.
 */
std::string removeComments(const std::string& input) {
    std::istringstream iss(input);
    std::vector<std::string> lines;
    std::string line;

    // Split the string into lines
    while (std::getline(iss, line)) {
        lines.push_back(line);
    }

    std::vector<std::string> cleanedLines;

    // Remove the comment part from each line
    for (const auto& l : lines) {
        size_t commentPos = l.find('#');
        if (commentPos != std::string::npos) {
            cleanedLines.push_back(l.substr(0, commentPos));
        } else {
            cleanedLines.push_back(l);
        }
    }

    std::ostringstream oss;

    // Join the lines back into a single string
    for (size_t i = 0; i < cleanedLines.size(); ++i) {
        if (i > 0) {
            oss << '\n';
        }
        oss << cleanedLines[i];
    }

    return oss.str();
}

int main() {
    std::string input = "This is a line\n# This is a comment\nAnother line without comment";
    std::string result = removeComments(input);
    std::cout << result << std::endl;
    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `def remove_comments(string: str) -> str:` is translated to `std::string removeComments(const std::string& input)` in C++.
   - The parameter `string` is renamed to `input` to match the C++ naming convention.

2. **Documentation**:
   - The Python docstring is converted to a multi-line comment using `/* */` in C++.
   - The example and arguments are documented within the multi-line comment.

3. **Implementation**:
   - The input string is split into lines using `std::istringstream` and `std::getline`.
   - Each line is processed to remove comments starting with `#`.
   - The cleaned lines are then joined back into a single string using `std::ostringstream`.

4. **Main Function**:
   - A sample input string is provided, and the `removeComments` function is called to demonstrate its functionality.
   - The result is printed to the console.

This C++ code preserves the original functionality and structure of the Python code while adhering to C++ conventions and documentation standards.