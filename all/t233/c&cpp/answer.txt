Sure, here's how you can implement the `remove_comments` function in C++:

```cpp
#include <iostream>
#include <string>

std::string removeComments(const std::string &input) {
    std::string result;
    bool inComment = false;

    for (size_t i = 0; i < input.length(); ++i) {
        if (inComment && input[i] == '\n') {
            // End of comment, skip to next line
            inComment = false;
            continue;
        }
        if (!inComment && input[i] == '#') {
            // Start of comment
            inComment = true;
            continue;
        }
        if (!inComment) {
            // Not in a comment, add character to result
            result += input[i];
        }
    }

    return result;
}

int main() {
    std::string input = "Hello, world! # This is a comment";
    std::string output = removeComments(input);
    std::cout << "Output: " << output << std::endl;
    return 0;
}
```

And here's the equivalent implementation in C:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* removeComments(const char *input) {
    int length = strlen(input);
    char *result = (char*)malloc((length + 1) * sizeof(char));
    int j = 0;
    int inComment = 0;

    for (int i = 0; i < length; ++i) {
        if (inComment && input[i] == '\n') {
            // End of comment, skip to next line
            inComment = 0;
            continue;
        }
        if (!inComment && input[i] == '#') {
            // Start of comment
            inComment = 1;
            continue;
        }
        if (!inComment) {
            // Not in a comment, add character to result
            result[j++] = input[i];
        }
    }

    result[j] = '\0'; // Null-terminate the result string
    return result;
}

int main() {
    const char *input = "Hello, world! # This is a comment";
    char *output = removeComments(input);
    printf("Output: %s\n", output);
    free(output); // Don't forget to free the allocated memory
    return 0;
}
```

Both versions of the code will remove comments from the input string where comments start with `#` and end at the newline character.