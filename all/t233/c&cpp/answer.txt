Sure! Here is the equivalent C++ code that performs the same functionality as the provided Python code:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <sstream>

std::string removeComments(const std::string& input) {
    /**
     * Removes comments from the provided string. Comments start with a '#' and end at the newline.
     *
     * Args:
     * input (std::string): The input string containing potential comments.
     *
     * Returns:
     * std::string: The string with all comments removed.
     */
    std::istringstream iss(input);
    std::vector<std::string> lines;
    std::string line;
    
    // Split the string into lines
    while (std::getline(iss, line)) {
        lines.push_back(line);
    }
    
    std::vector<std::string> cleanedLines;
    
    // Remove the comment part from each line
    for (const auto& l : lines) {
        size_t commentPos = l.find('#');
        if (commentPos != std::string::npos) {
            cleanedLines.push_back(l.substr(0, commentPos));
        } else {
            cleanedLines.push_back(l);
        }
    }
    
    std::ostringstream oss;
    
    // Join the lines back into a single string
    for (size_t i = 0; i < cleanedLines.size(); ++i) {
        if (i > 0) {
            oss << '\n';
        }
        oss << cleanedLines[i];
    }
    
    return oss.str();
}

int main() {
    std::string input = "This is a line\n# This is a comment\nAnother line without comment";
    std::string result = removeComments(input);
    std::cout << result << std::endl;
    return 0;
}
```

### Explanation:
1. **Reading Input**: The `std::istringstream` is used to read the input string line by line.
2. **Splitting Lines**: Each line is read and stored in a vector of strings.
3. **Removing Comments**: For each line, the position of the comment start (`#`) is found. If a comment exists, it is removed by taking a substring up to the comment position.
4. **Joining Lines**: The cleaned lines are joined back into a single string using `std::ostringstream`.

This C++ code maintains the same functionality as the Python code but uses C++-specific constructs and libraries.