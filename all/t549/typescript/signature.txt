Certainly! Here is the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation:

```typescript
import { log10 } from "mathjs";

// Define the constant for conversion: Boltzmann constant in keV/K
const k_B_over_keV = 8.617333262145e-5; // eV/K to keV/K

/**
 * Converts temperature from keV to log10(K) for a given input (scalar or tuple).
 * 
 * @param T_keV - The temperature in keV. Can be a scalar or a tuple of temperatures.
 * @returns The temperature(s) in log10(K) corresponding to the input.
 * @throws {Error} If the input is not a scalar (number) or a tuple of temperatures.
 */
function getTInLog10Kelvin(T_keV: number | [number]): number | [number] {
    // Check if the input is a scalar (number)
    if (typeof T_keV === 'number') {
        // Calculate log10(K) for the scalar value
        return log10(T_keV / k_B_over_keV);
    }

    // Check if the input is a tuple
    else if (Array.isArray(T_keV) && T_keV.length > 0 && T_keV.every(t => typeof t === 'number')) {
        // Calculate log10(K) for each element in the tuple
        return T_keV.map(t => log10(t / k_B_over_keV)) as [number];
    }

    // Raise an error for unsupported input types
    else {
        throw new Error("Input must be a scalar (number) or a tuple of temperatures.");
    }
}

// Example usage
console.log(getTInLog10Kelvin(1.0)); // Scalar example
console.log(getTInLog10Kelvin([1.0, 2.0])); // Tuple example
```

### Explanation:
1. **Import Statement**: We import `log10` from the `mathjs` library to perform logarithmic calculations.
2. **Constant Definition**: We define the constant `k_B_over_keV` with a comment explaining its units.
3. **Function Signature**: The function `getTInLog10Kelvin` is defined with the type signature `number | [number]` for the input parameter `T_keV`.
4. **JSDoc Documentation**: We use JSDoc-style comments to document the function, including parameters, return types, and exceptions.
5. **Type Checking**: We use `typeof` to check if the input is a scalar (`number`) and `Array.isArray` along with `.every` to check if it is a tuple of numbers.
6. **Error Handling**: We throw an error if the input is neither a scalar nor a tuple of numbers.
7. **Example Usage**: We provide examples of calling the function with both scalar and tuple inputs.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and documentation standards.