Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import unittest
import numpy as np

k_B_over_keV = 8.617333262145e-5  # eV/K to keV/K

def get_T_in_log10_Kelvin(T_keV):
    if isinstance(T_keV, (int, float)):
        return np.log10(T_keV / k_B_over_keV)
    elif isinstance(T_keV, tuple):
        return tuple(np.log10(t / k_B_over_keV) for t in T_keV)
    else:
        raise ValueError("Input must be a scalar (int or float) or a tuple of temperatures.")

class TestGetTInLog10Kelvin(unittest.TestCase):

    def test_scalar_input_high_temperature(self):
        """Test with a high scalar input."""
        T_keV = 100.0
        expected_result = np.log10(T_keV / k_B_over_keV)
        result = get_T_in_log10_Kelvin(T_keV)
        self.assertAlmostEqual(result, expected_result, places=6)

    def test_scalar_input_low_temperature(self):
        """Test with a low scalar input."""
        T_keV = 0.01
        expected_result = np.log10(T_keV / k_B_over_keV)
        result = get_T_in_log10_Kelvin(T_keV)
        self.assertAlmostEqual(result, expected_result, places=6)

    def test_tuple_input_large_range(self):
        """Test with a tuple of temperatures over a large range."""
        T_keV = (0.1, 1.0, 10.0, 100.0, 1000.0)
        expected_results = tuple(np.log10(t / k_B_over_keV) for t in T_keV)
        result = get_T_in_log10_Kelvin(T_keV)
        self.assertEqual(result, expected_results)

    def test_tuple_input_repeated_values(self):
        """Test with a tuple of repeated temperature values."""
        T_keV = (1.0, 1.0, 1.0)
        expected_results = tuple(np.log10(t / k_B_over_keV) for t in T_keV)
        result = get_T_in_log10_Kelvin(T_keV)
        self.assertEqual(result, expected_results)

    def test_scalar_input_non_integer(self):
        """Test with a non-integer scalar input."""
        T_keV = 2.5
        expected_result = np.log10(T_keV / k_B_over_keV)
        result = get_T_in_log10_Kelvin(T_keV)
        self.assertAlmostEqual(result, expected_result, places=6)

    def test_tuple_input_floating_point(self):
        """Test with a tuple of floating-point temperatures."""
        T_keV = (1.5, 2.5, 3.5)
        expected_results = tuple(np.log10(t / k_B_over_keV) for t in T_keV)
        result = get_T_in_log10_Kelvin(T_keV)
        self.assertEqual(result, expected_results)

    def test_large_tuple_input(self):
        """Test with a large tuple of temperature values."""
        T_keV = tuple(np.arange(1, 1001, 1))  # Temperatures from 1 keV to 1000 keV
        expected_results = tuple(np.log10(t / k_B_over_keV) for t in T_keV)
        result = get_T_in_log10_Kelvin(T_keV)
        self.assertEqual(result, expected_results)
```

### Equivalent Jest Test Suite:
```javascript
const { getTInLog10Kelvin } = require('./getTInLog10Kelvin'); // Import the function to be tested
const k_B_over_keV = 8.617333262145e-5; // eV/K to keV/K

describe('getTInLog10Kelvin', () => {
    describe('Scalar Input Tests', () => {
        it('should handle high scalar input correctly', () => {
            const T_keV = 100.0;
            const expectedResult = Math.log10(T_keV / k_B_over_keV);
            const result = getTInLog10Kelvin(T_keV);
            expect(result).toBeCloseTo(expectedResult, 6);
        });

        it('should handle low scalar input correctly', () => {
            const T_keV = 0.01;
            const expectedResult = Math.log10(T_keV / k_B_over_keV);
            const result = getTInLog10Kelvin(T_keV);
            expect(result).toBeCloseTo(expectedResult, 6);
        });

        it('should handle non-integer scalar input correctly', () => {
            const T_keV = 2.5;
            const expectedResult = Math.log10(T_keV / k_B_over_keV);
            const result = getTInLog10Kelvin(T_keV);
            expect(result).toBeCloseTo(expectedResult, 6);
        });
    });

    describe('Tuple Input Tests', () => {
        it('should handle a tuple of temperatures over a large range correctly', () => {
            const T_keV = [0.1, 1.0, 10.0, 100.0, 1000.0];
            const expectedResults = T_keV.map(t => Math.log10(t / k_B_over_keV));
            const result = getTInLog10Kelvin(T_keV);
            expect(result).toEqual(expectedResults);
        });

        it('should handle a tuple of repeated temperature values correctly', () => {
            const T_keV = [1.0, 1.0, 1.0];
            const expectedResults = T_keV.map(t => Math.log10(t / k_B_over_keV));
            const result = getTInLog10Kelvin(T_keV);
            expect(result).toEqual(expectedResults);
        });

        it('should handle a tuple of floating-point temperatures correctly', () => {
            const T_keV = [1.5, 2.5, 3.5];
            const expectedResults = T_keV.map(t => Math.log10(t / k_B_over_keV));
            const result = getTInLog10Kelvin(T_keV);
            expect(result).toEqual(expectedResults);
        });

        it('should handle a large tuple of temperature values correctly', () => {
            const T_keV = Array.from({ length: 1000 }, (_, i) => i + 1); // Temperatures from 1 keV to 1000 keV
            const expectedResults = T_keV.map(t => Math.log10(t / k_B_over_keV));
            const result = getTInLog10Kelvin(T_keV);
            expect(result).toEqual(expectedResults);
        });
    });
});
```

### Explanation:
1. **Import Function**: The `getTInLog10Kelvin` function is imported at the beginning.
2. **Describe Blocks**: The `describe` blocks are used to group related tests.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Assertions**:
   - `toBeCloseTo`: Used for floating-point comparisons, similar to `assertAlmostEqual` in Python.
   - `toEqual`: Used for comparing arrays or tuples, similar to `assertEqual` in Python.
5. **Data Generation**: Arrays are generated using `Array.from` for the large tuple test case.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adapting to Jest's syntax and conventions.