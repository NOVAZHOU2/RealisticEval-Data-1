Here is an equivalent C++ code:

```c++
#include <cmath>
#include <stdexcept>
#include <tuple>

const double k_B_over_keV = 8.617333262145e-5;

template<typename T>
auto get_T_in_log10_Kelvin(T T_keV) -> decltype(std::log10((double)T_keV / k_B_over_keV)) {
    return std::log10(static_cast<double>(T_keV) / k_B_over_keV);
}

template<>
auto get_T_in_log10_Kelvin(const std::tuple<float>& T_keV) -> decltype(std::make_tuple(get_T_in_log10_Kelvin(std::get<0>(T_keV)))) {
    return std::make_tuple(get_T_in_log10_Kelvin(std::get<0>(T_keV)));
}
```

This C++ code uses templates to handle both single values and tuples of floats. Note that C++ does not have built-in support for tuples with different types, so you would need to define a custom structure if your tuple can contain elements of different types. Also, unlike Python, C++ does not have type hinting, so we use template arguments to indicate the expected types.