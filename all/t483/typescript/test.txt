Certainly! Hereâ€™s the equivalent TypeScript code using Jest for testing the `is_valid_email` function. 

First, let's define the `is_valid_email` function in TypeScript:

```typescript
function isValidEmail(email: string): boolean {
    /**
     * Verifies if the provided string is a valid email address.
     *
     * @param email - The email address to validate.
     * @returns True if the email address is valid, False otherwise.
     */
    // Regular expression pattern for validating an email address
    const emailPattern: RegExp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

    return emailPattern.test(email);
}

// Example usage
console.log(isValidEmail('example@example.com'));  // true
console.log(isValidEmail('invalid-email'));  // false
```

Next, let's write the Jest test suite for this function:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('isValidEmail', () => {
    it('should return true for a valid email', () => {
        const validEmails = [
            'example@example.com',
            'user.name+tag+sorting@example.com',
            'user.name@example.co.uk',
            'user.name@example.com',
            'user.name@subdomain.example.com',
            'user.name@example.com'
        ];

        validEmails.forEach(email => {
            expect(isValidEmail(email)).toBe(true);
        });
    });

    it('should return false for an invalid email', () => {
        const invalidEmails = [
            'invalid-email',
            'no_at_symbol.com',
            'no_at_symbol',
            'no_at_symbol.com',
            'missing_domain@',
            'missing_tld@domain.'
        ];

        invalidEmails.forEach(email => {
            expect(isValidEmail(email)).toBe(false);
        });
    });
});
```

### Explanation:
1. **Import Jest**: We import the necessary functions from Jest using `@jest/globals` to use `describe`, `it`, and `expect`.
2. **Test Suite**: The `describe` block defines the test suite for the `isValidEmail` function.
3. **Test Cases**:
   - `it('should return true for a valid email', ...)` checks that valid email addresses return `true`.
   - `it('should return false for an invalid email', ...)` checks that invalid email addresses return `false`.
4. **Assertion Methods**: We use `expect(isValidEmail(email)).toBe(true)` and `expect(isValidEmail(email)).toBe(false)` to perform the assertions.

This setup ensures that the tests are structured and written in a way that is idiomatic to Jest in TypeScript.