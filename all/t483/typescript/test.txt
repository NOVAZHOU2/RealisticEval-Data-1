Certainly! Below is the equivalent TypeScript test case using Jest for the provided Python `is_valid_email` function:

```typescript
import { describe, it, expect } from '@jest/globals';

function is_valid_email(email: string): boolean {
    /**
     * Verifies if the provided string is a valid email address.
     *
     * @param email - The email address to validate.
     * @returns True if the email address is valid, False otherwise.
     */
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

describe('is_valid_email', () => {
    it('should return true for a valid email', () => {
        expect(is_valid_email('test@example.com')).toBe(true);
    });

    it('should return false for an invalid email', () => {
        expect(is_valid_email('invalid-email')).toBe(false);
        expect(is_valid_email('missing@domain')).toBe(false);
        expect(is_valid_email('noatsign.com')).toBe(false);
        expect(is_valid_email('spaces in email@address.com')).toBe(false);
        expect(is_valid_email('empty@.com')).toBe(false);
        expect(is_valid_email('@no-local-part.com')).toBe(false);
        expect(is_valid_email('local-part@.tld')).toBe(false);
    });
});
```

### Explanation:
1. **Function Definition**: The `is_valid_email` function is defined in TypeScript with the same logic as the original Python function.
2. **Regular Expression**: A regular expression (`emailRegex`) is used to match valid email addresses.
3. **Jest Test Suite**:
   - `describe`: Groups related tests together under the `is_valid_email` function.
   - `it`: Defines individual test cases.
   - `expect`: Asserts that the function returns the expected result.

This TypeScript test case uses Jest's syntax and assertions to verify the functionality of the `is_valid_email` function.