Certainly! Here is the equivalent TypeScript code using Jest for testing the `isValidEmail` function. We will convert the Python unittest test class into a Jest test suite, ensuring that the functionality and logic of the tests are preserved.

First, let's define the `isValidEmail` function in TypeScript:

```typescript
function isValidEmail(email: string): boolean {
    // Regular expression pattern for validating an email address
    const emailPattern: RegExp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

    return emailPattern.test(email);
}
```

Next, we'll write the Jest test suite:

```typescript
import { expect } from '@jest/globals';

describe('Email Validation', () => {
    it('should validate a valid email', () => {
        expect(isValidEmail('test@example.com')).toBe(true);
    });

    it('should validate a valid email with subdomain', () => {
        expect(isValidEmail('user@subdomain.example.com')).toBe(true);
    });

    it('should validate a valid email with plus tag', () => {
        expect(isValidEmail('user.name+tag+sorting@example.com')).toBe(true);
    });

    it('should invalidate an email missing username', () => {
        expect(isValidEmail('@missingusername.com')).toBe(false);
    });

    it('should invalidate an email missing at symbol', () => {
        expect(isValidEmail('missingatsign.com')).toBe(false);
    });

    it('should invalidate an email with too short TLD', () => {
        expect(isValidEmail('user@domain.c')).toBe(false);
    });

    it('should invalidate an email with special characters', () => {
        expect(isValidEmail('user@domain.com!')).toBe(false);
    });
});
```

### Explanation:
1. **Import Jest Assertions**:
   - We import `expect` from `@jest/globals` to use Jest's assertion methods.

2. **Test Suite**:
   - We use `describe` to group the tests under a descriptive name.

3. **Test Cases**:
   - Each test case is defined using `it`, which takes a description and a callback function.
   - We use `expect` with various assertions to verify the expected behavior of the `isValidEmail` function.

4. **Assertions**:
   - `toBe(true)` and `toBe(false)` are used to check the boolean return values of the `isValidEmail` function.

### Running the Tests:
To run the tests, you would typically use the following command in your project directory:

```sh
npx jest
```

This setup ensures that the tests are structured and behave equivalently to the original Python unittest test class, while leveraging Jest's powerful testing capabilities in TypeScript.