Certainly! Below is the equivalent C++ unit test case using Catch2 for the `is_valid_email` function from your Python unittest code.

First, ensure you have Catch2 installed and included in your project. If not, you can download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2).

Here's the C++ test case:

```cpp
#include <catch2/catch.hpp>
#include <string>
#include <regex>

// Function to be tested
bool is_valid_email(const std::string& email) {
    // Regular expression for validating an Email
    const std::regex pattern(R"(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$)");
    return std::regex_match(email, pattern);
}

// Test cases
TEST_CASE("Valid email addresses", "[email]") {
    REQUIRE(is_valid_email("example@example.com") == true);
    REQUIRE(is_valid_email("test.email+alex@leetcode.com") == true);
    REQUIRE(is_valid_email("1234567890@valid.com") == true);
}

TEST_CASE("Invalid email addresses", "[email]") {
    REQUIRE(is_valid_email("") == false);
    REQUIRE(is_valid_email("abc.def@") == false);
    REQUIRE(is_valid_email("@yahoo.com") == false);
    REQUIRE(is_valid_email("invalid-email@") == false);
    REQUIRE(is_valid_email("missing@domain") == false);
}
```

### Explanation:

1. **Include Catch2 Header**: The `#include <catch2/catch.hpp>` line includes the Catch2 header file, which is necessary for writing tests.

2. **Function Definition**: The `is_valid_email` function remains unchanged, as it is already written in C++.

3. **Test Cases**:
   - `TEST_CASE("Valid email addresses", "[email]")`: This macro defines a test case group named "Valid email addresses".
     - `REQUIRE(is_valid_email("example@example.com") == true);`: This checks if the function correctly identifies a valid email address.
     - Additional valid email addresses are checked similarly.
   
   - `TEST_CASE("Invalid email addresses", "[email]")`: This macro defines another test case group named "Invalid email addresses".
     - `REQUIRE(is_valid_email("") == false);`: This checks if the function correctly identifies an empty string as invalid.
     - Additional invalid email addresses are checked similarly.

### Compilation and Execution:

To compile and run these tests, you need to link against the Catch2 library. Assuming you have a Makefile or similar build system, you might add something like this:

```makefile
CXX = g++
CXXFLAGS = -std=c++17 -I/path/to/catch2/single_include

all: test_email

test_email: test_email.cpp
	$(CXX) $(CXXFLAGS) -o $@ $< -lc++

run_test: test_email
	./$<
```

Replace `/path/to/catch2/single_include` with the actual path where the Catch2 headers are located.

Then, you can compile and run the tests by executing:

```sh
make all
make run_test
```

This will compile your test program and run the tests, outputting the results to the console.