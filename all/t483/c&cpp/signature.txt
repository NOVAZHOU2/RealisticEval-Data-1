Certainly! Here is the equivalent C++ code that preserves the original purpose and structure of the Python code, including comments and documentation:

```cpp
#include <iostream>
#include <regex>
#include <string>

// Verifies if the provided string is a valid email address.
//
// Args:
//     email (std::string): The email address to validate.
//
// Returns:
//     bool: True if the email address is valid, False otherwise.
bool is_valid_email(const std::string& email) {
    // Regular expression pattern for validating an email address
    std::regex email_pattern(R"(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$)");

    return std::regex_match(email, email_pattern);
}

int main() {
    // Example usage
    std::string email = "example@example.com";
    std::cout << std::boolalpha << is_valid_email(email) << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**: The C++ code includes `<iostream>`, `<regex>`, and `<string>` headers to support input/output operations, regular expressions, and string handling respectively.

2. **Function Definition**: The `is_valid_email` function takes a `const std::string&` parameter and returns a `bool`. This matches the Python type annotations `email: str` and `-> bool`.

3. **Comments and Documentation**:
   - The function's purpose and arguments are documented using C++ style comments.
   - Multi-line comments use `/* ... */` and single-line comments use `//`.

4. **Regular Expression Pattern**: The pattern is defined using a raw string literal (`R"(pattern)"`) to simplify the regex pattern.

5. **Regex Matching**: The `std::regex_match` function is used to match the email against the pattern, returning `true` if it matches and `false` otherwise.

6. **Main Function**: An example usage is shown in the `main` function, where a test email is checked for validity and the result is printed to the console.

This translation ensures that the functionality, logic, and structure of the original Python code are preserved in C++.