Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest test class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It includes appropriate JUnit annotations and assertion methods to ensure the functionality and logic of the tests are preserved.

### Java Code

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

public class Tester {

    /**
     * Verifies if the provided string is a valid email address.
     *
     * @param email The email address to validate.
     * @return true if the email address is valid, false otherwise.
     */
    public static boolean isValidEmail(String email) {
        // Regular expression pattern for validating an email address
        String emailPattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";

        if (email.matches(emailPattern)) {
            return true;
        } else {
            return false;
        }
    }

    @Test
    public void testIsValidEmail() {
        // Test cases for valid email addresses
        assertTrue("Valid email should return true", isValidEmail("example@example.com"));
        assertTrue("Valid email with numbers should return true", isValidEmail("user123@example.com"));
        assertTrue("Valid email with special characters should return true", isValidEmail("user.name+tag+sorting@example.com"));

        // Test cases for invalid email addresses
        assertFalse("Invalid email should return false", isValidEmail("invalid-email@"));
        assertFalse("Invalid email with no domain should return false", isValidEmail("user@example"));
        assertFalse("Empty string should return false", isValidEmail(""));
        assertFalse("Null should return false", isValidEmail(null));
    }
}
```

### Explanation:

1. **JUnit Annotations**:
   - The `@Test` annotation is used to mark the test method.
   
2. **JUnit Assertions**:
   - `assertTrue` is used to verify that a condition is true.
   - `assertFalse` is used to verify that a condition is false.

3. **Method Definition**:
   - The `isValidEmail` method is defined within the `Tester` class, which performs the email validation logic.

4. **Test Cases**:
   - Several test cases are included to cover both valid and invalid email addresses.
   - Each test case uses assertions to check the expected behavior of the `isValidEmail` method.

5. **Package Declaration**:
   - The package declaration `package org.real.temp;` ensures the test class is placed in the correct package.

This Java test class ensures that the functionality and logic of the Python unittest test class are preserved while adhering to Java's syntax and conventions.