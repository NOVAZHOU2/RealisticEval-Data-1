Sure! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class.

```typescript
// calculator.ts
export class Calculator {
    add(a: number, b: number): number {
        return a + b;
    }

    subtract(a: number, b: number): number {
        return a - b;
    }

    multiply(a: number, b: number): number {
        return a * b;
    }

    divide(a: number, b: number): number {
        if (b === 0) {
            throw new Error("Cannot divide by zero");
        }
        return a / b;
    }
}
```

```typescript
// calculator.test.ts
import { Calculator } from './calculator';

describe('Calculator', () => {
    let calculator: Calculator;

    beforeEach(() => {
        calculator = new Calculator();
    });

    describe('add', () => {
        it('should return the sum of two numbers', () => {
            expect(calculator.add(1, 2)).toBe(3);
        });
    });

    describe('subtract', () => {
        it('should return the difference of two numbers', () => {
            expect(calculator.subtract(5, 3)).toBe(2);
        });
    });

    describe('multiply', () => {
        it('should return the product of two numbers', () => {
            expect(calculator.multiply(4, 3)).toBe(12);
        });
    });

    describe('divide', () => {
        it('should return the quotient of two numbers', () => {
            expect(calculator.divide(10, 2)).toBe(5);
        });

        it('should throw an error if divisor is zero', () => {
            expect(() => calculator.divide(10, 0)).toThrowError('Cannot divide by zero');
        });
    });
});
```

### Explanation:

1. **Class Definition**: The `Calculator` class is defined in `calculator.ts`, with methods for addition, subtraction, multiplication, and division.
   
2. **Test File**: The test file `calculator.test.ts` uses Jest to define tests for each method in the `Calculator` class.
   - `beforeEach`: This hook initializes a new instance of `Calculator` before each test.
   - `describe`: Groups related tests together.
   - `it`: Defines individual test cases.
     - For `add`, `subtract`, and `multiply`, it checks if the returned values match the expected results.
     - For `divide`, it includes a test case that checks if an error is thrown when the divisor is zero.

This setup ensures that your TypeScript code is thoroughly tested using Jest, similar to how you would use Python's `unittest`.