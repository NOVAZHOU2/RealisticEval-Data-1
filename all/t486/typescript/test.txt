Certainly! Here is the equivalent Jest test suite for the provided Python unittest class. We will convert the Python unittest code to TypeScript using Jest for testing.

### Python Code:
```python
import unittest

class Calculator:
    def add(self, a: float, b: float) -> float:
        return a + b

    def subtract(self, a: float, b: float) -> float:
        return a - b

    def multiply(self, a: float, b: float) -> float:
        return a * b

    def divide(self, a: float, b: float) -> float:
        if b == 0:
            raise ValueError("Cannot divide by zero.")
        return a / b

class TestCalculator(unittest.TestCase):

    def setUp(self):
        """Create an instance of Calculator before each test."""
        self.calculator = Calculator()

    def test_add(self):
        """Test the addition method."""
        result = self.calculator.add(10, 5)
        self.assertEqual(result, 15)

    def test_subtract(self):
        """Test the subtraction method."""
        result = self.calculator.subtract(10, 5)
        self.assertEqual(result, 5)

    def test_multiply(self):
        """Test the multiplication method."""
        result = self.calculator.multiply(10, 5)
        self.assertEqual(result, 50)

    def test_divide(self):
        """Test the division method."""
        result = self.calculator.divide(10, 5)
        self.assertEqual(result, 2.0)

    def test_divide_by_zero(self):
        """Test division by zero raises ValueError."""
        self.assertRaises(ValueError, self.calculator.divide, 10, 0)
```

### TypeScript Code with Jest Testing:

1. **Calculator Class**:
   ```typescript
   class Calculator {
       /**
        * Returns the sum of a and b.
        * @param a The first number.
        * @param b The second number.
        * @returns The sum of a and b.
        */
       add(a: number, b: number): number {
           return a + b;
       }

       /**
        * Returns the difference of a and b.
        * @param a The first number.
        * @param b The second number.
        * @returns The difference of a and b.
        */
       subtract(a: number, b: number): number {
           return a - b;
       }

       /**
        * Returns the product of a and b.
        * @param a The first number.
        * @param b The second number.
        * @returns The product of a and b.
        */
       multiply(a: number, b: number): number {
           return a * b;
       }

       /**
        * Returns the quotient of a and b.
        * Throws an error if b is zero.
        * @param a The first number.
        * @param b The second number.
        * @returns The quotient of a and b.
        */
       divide(a: number, b: number): number {
           if (b === 0) {
               throw new Error("Cannot divide by zero.");
           }
           return a / b;
       }
   }
   ```

2. **Jest Test Suite**:
   ```typescript
   import { Calculator } from './Calculator'; // Adjust the import path as needed

   describe('Calculator', () => {
       let calculator: Calculator;

       beforeEach(() => {
           calculator = new Calculator();
       });

       it('should add two numbers correctly', () => {
           const result = calculator.add(10, 5);
           expect(result).toBe(15);
       });

       it('should subtract two numbers correctly', () => {
           const result = calculator.subtract(10, 5);
           expect(result).toBe(5);
       });

       it('should multiply two numbers correctly', () => {
           const result = calculator.multiply(10, 5);
           expect(result).toBe(50);
       });

       it('should divide two numbers correctly', () => {
           const result = calculator.divide(10, 5);
           expect(result).toBe(2.0);
       });

       it('should throw an error when dividing by zero', () => {
           expect(() => calculator.divide(10, 0)).toThrow('Cannot divide by zero.');
       });
   });
   ```

### Explanation:
1. **Calculator Class**: The `Calculator` class is defined with methods for basic arithmetic operations, including proper type annotations and error handling.
2. **Jest Test Suite**:
   - The `describe` block sets up the test suite for the `Calculator` class.
   - The `beforeEach` hook initializes a new instance of `Calculator` before each test.
   - Each `it` block contains a specific test case with appropriate assertions using Jest's `expect` functions.
   - The `toThrow` matcher is used to check that the `divide` method throws the expected error when dividing by zero.

This setup ensures that the functionality and logic of the tests are preserved, and the code is adjusted to fit TypeScript and Jest conventions.