Certainly! Below is the equivalent TypeScript code for the `Calculator` class along with a Jest test suite to verify its functionality. I'll provide both the TypeScript class and the Jest test file.

### TypeScript Class: `Calculator`

```typescript
class Calculator {
    /**
     * Returns the sum of a and b.
     * @param a The first number.
     * @param b The second number.
     * @returns The sum of a and b.
     */
    add(a: number, b: number): number {
        return a + b;
    }

    /**
     * Returns the difference of a and b.
     * @param a The first number.
     * @param b The second number.
     * @returns The difference of a and b.
     */
    subtract(a: number, b: number): number {
        return a - b;
    }

    /**
     * Returns the product of a and b.
     * @param a The first number.
     * @param b The second number.
     * @returns The product of a and b.
     */
    multiply(a: number, b: number): number {
        return a * b;
    }

    /**
     * Returns the quotient of a and b.
     * Throws an error if b is zero.
     * @param a The numerator.
     * @param b The denominator.
     * @returns The quotient of a and b.
     * @throws Error if b is zero.
     */
    divide(a: number, b: number): number {
        if (b === 0) {
            throw new Error("Cannot divide by zero.");
        }
        return a / b;
    }
}
```

### Jest Test Suite: `Calculator.test.ts`

```typescript
import { Calculator } from './Calculator'; // Adjust the import path as needed

describe('Calculator', () => {
    let calculator: Calculator;

    beforeEach(() => {
        calculator = new Calculator();
    });

    describe('add', () => {
        it('should add two numbers correctly', () => {
            expect(calculator.add(2, 3)).toBe(5);
            expect(calculator.add(-1, 4)).toBe(3);
            expect(calculator.add(0, 0)).toBe(0);
        });
    });

    describe('subtract', () => {
        it('should subtract two numbers correctly', () => {
            expect(calculator.subtract(5, 3)).toBe(2);
            expect(calculator.subtract(10, 5)).toBe(5);
            expect(calculator.subtract(-2, -3)).toBe(1);
        });
    });

    describe('multiply', () => {
        it('should multiply two numbers correctly', () => {
            expect(calculator.multiply(2, 3)).toBe(6);
            expect(calculator.multiply(-1, 4)).toBe(-4);
            expect(calculator.multiply(0, 5)).toBe(0);
        });
    });

    describe('divide', () => {
        it('should divide two numbers correctly', () => {
            expect(calculator.divide(6, 3)).toBe(2);
            expect(calculator.divide(10, 2)).toBe(5);
            expect(calculator.divide(-6, 3)).toBe(-2);
        });

        it('should throw an error when dividing by zero', () => {
            expect(() => calculator.divide(5, 0)).toThrow('Cannot divide by zero.');
        });
    });
});
```

### Explanation:

1. **TypeScript Class**:
   - The `Calculator` class includes methods for addition, subtraction, multiplication, and division, with proper type annotations and error handling.

2. **Jest Test Suite**:
   - The `describe` block groups related tests together.
   - The `beforeEach` hook initializes a new instance of the `Calculator` class before each test.
   - Each method is tested with `it` blocks and appropriate assertions using Jest's `expect` functions.
   - For the `divide` method, there is an additional test to ensure that dividing by zero throws an error.

This setup ensures that the functionality and logic of the tests are preserved while adapting to TypeScript and Jest conventions.