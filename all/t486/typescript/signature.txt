Sure! Here is the equivalent TypeScript code for the given Python class, including proper type annotations and JSDoc-style documentation comments:

```typescript
class Calculator {
    /**
     * Returns the sum of a and b.
     * @param a The first number.
     * @param b The second number.
     * @returns The sum of a and b.
     */
    add(a: number, b: number): number {
        // Implementation goes here
        pass;
    }

    /**
     * Returns the difference of a and b.
     * @param a The first number.
     * @param b The second number.
     * @returns The difference of a and b.
     */
    subtract(a: number, b: number): number {
        // Implementation goes here
        pass;
    }

    /**
     * Returns the product of a and b.
     * @param a The first number.
     * @param b The second number.
     * @returns The product of a and b.
     */
    multiply(a: number, b: number): number {
        // Implementation goes here
        pass;
    }

    /**
     * Returns the quotient of a and b.
     * Throws an error if b is zero.
     * @param a The numerator.
     * @param b The denominator.
     * @returns The quotient of a and b.
     * @throws Error if b is zero.
     */
    divide(a: number, b: number): number {
        if (b === 0) {
            throw new Error("Cannot divide by zero.");
        }
        // Implementation goes here
        pass;
    }
}
```

### Explanation:
1. **Type Annotations**: 
   - Python’s `float` is translated to TypeScript’s `number`.
2. **Documentation Comments**:
   - Python’s docstrings are converted to JSDoc-style comments (`/** */`) with appropriate tags for parameters and return values.
3. **Error Handling**:
   - The `ValueError` in Python is translated to a `throw new Error` statement in TypeScript.

This ensures that the functionality and structure are preserved while adhering to TypeScript conventions.