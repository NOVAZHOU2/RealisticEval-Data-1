Here's how you can convert your Python code to TypeScript with type signatures:

```typescript
class Calculator {
    /**
     * Returns the sum of a and b.
     */
    public add(a: number, b: number): number {
        return a + b;
    }

    /**
     * Returns the difference of a and b.
     */
    public subtract(a: number, b: number): number {
        return a - b;
    }

    /**
     * Returns the product of a and b.
     */
    public multiply(a: number, b: number): number {
        return a * b;
    }

    /**
     * Returns the quotient of a and b.
     * Throws an error if b is zero.
     */
    public divide(a: number, b: number): number {
        if (b === 0) {
            throw new Error("Cannot divide by zero.");
        }
        return a / b;
    }
}
```

In this TypeScript version, I've used `number` instead of `float`, as JavaScript/TypeScript doesn't differentiate between these types like Python does. Also, I've changed `pass` statements to actual implementations that perform the respective arithmetic operations. The division method now includes a check for division by zero, throwing an error if it occurs.