To convert the given Python `unittest` test class into a JavaScript test case using Jest, we first need to define the `Calculator` class in JavaScript. Then, we will write Jest tests for each method of the `Calculator` class.

Here's how you can do it:

1. **Define the Calculator Class**:
   Create a file named `calculator.js` and define the `Calculator` class with the required methods.

```javascript
// calculator.js
class Calculator {
    add(a, b) {
        return a + b;
    }

    subtract(a, b) {
        return a - b;
    }

    multiply(a, b) {
        return a * b;
    }

    divide(a, b) {
        if (b === 0) {
            throw new Error('Cannot divide by zero');
        }
        return a / b;
    }
}

module.exports = Calculator;
```

2. **Write Jest Tests**:
   Create a file named `calculator.test.js` and write Jest tests for each method of the `Calculator` class.

```javascript
// calculator.test.js
const Calculator = require('./calculator');

describe('Calculator', () => {
    let calculator;

    beforeEach(() => {
        calculator = new Calculator();
    });

    describe('add', () => {
        it('should return the sum of two numbers', () => {
            expect(calculator.add(2, 3)).toBe(5);
        });
    });

    describe('subtract', () => {
        it('should return the difference of two numbers', () => {
            expect(calculator.subtract(5, 3)).toBe(2);
        });
    });

    describe('multiply', () => {
        it('should return the product of two numbers', () => {
            expect(calculator.multiply(4, 3)).toBe(12);
        });
    });

    describe('divide', () => {
        it('should return the quotient of two numbers', () => {
            expect(calculator.divide(6, 3)).toBe(2);
        });

        it('should throw an error when dividing by zero', () => {
            expect(() => calculator.divide(6, 0)).toThrowError('Cannot divide by zero');
        });
    });
});
```

### Explanation:

- **Class Definition**: The `Calculator` class is defined with four methods: `add`, `subtract`, `multiply`, and `divide`.
- **Jest Test Suite**: A Jest test suite is created using `describe` blocks.
  - Each method has its own `describe` block.
  - Individual tests are written within these blocks using `it` or `test`.
  - For the `divide` method, we include both a successful division test and a test that checks for the error thrown when dividing by zero.

To run the tests, you would typically use a command like `npx jest` from your terminal, assuming you have Jest installed in your project.