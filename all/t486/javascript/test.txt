Certainly! Below is the equivalent Jest test suite for the given Python `unittest` test class. I will assume that you have implemented the methods in the `Calculator` class, and I will write the corresponding Jest tests.

First, let's define the `Calculator` class in JavaScript:

```javascript
class Calculator {
    /**
     * Returns the sum of a and b.
     * @param {number} a - The first number.
     * @param {number} b - The second number.
     * @returns {number} The sum of a and b.
     */
    add(a, b) {
        return a + b;
    }

    /**
     * Returns the difference of a and b.
     * @param {number} a - The first number.
     * @param {number} b - The second number.
     * @returns {number} The difference of a and b.
     */
    subtract(a, b) {
        return a - b;
    }

    /**
     * Returns the product of a and b.
     * @param {number} a - The first number.
     * @param {number} b - The second number.
     * @returns {number} The product of a and b.
     */
    multiply(a, b) {
        return a * b;
    }

    /**
     * Returns the quotient of a and b.
     * Throws an error if b is zero.
     * @param {number} a - The numerator.
     * @param {number} b - The denominator.
     * @returns {number} The quotient of a and b.
     * @throws {Error} If b is zero.
     */
    divide(a, b) {
        if (b === 0) {
            throw new Error("Cannot divide by zero.");
        }
        return a / b;
    }
}

module.exports = Calculator;
```

Now, let's write the Jest test suite for the `Calculator` class:

```javascript
const Calculator = require('./calculator');

describe('Calculator', () => {
    let calculator;

    beforeEach(() => {
        calculator = new Calculator();
    });

    describe('add', () => {
        it('should return the sum of two numbers', () => {
            expect(calculator.add(2, 3)).toBe(5);
            expect(calculator.add(-1, 1)).toBe(0);
            expect(calculator.add(0, 0)).toBe(0);
        });
    });

    describe('subtract', () => {
        it('should return the difference of two numbers', () => {
            expect(calculator.subtract(5, 3)).toBe(2);
            expect(calculator.subtract(10, 10)).toBe(0);
            expect(calculator.subtract(-5, -3)).toBe(-2);
        });
    });

    describe('multiply', () => {
        it('should return the product of two numbers', () => {
            expect(calculator.multiply(2, 3)).toBe(6);
            expect(calculator.multiply(-1, 1)).toBe(-1);
            expect(calculator.multiply(0, 5)).toBe(0);
        });
    });

    describe('divide', () => {
        it('should return the quotient of two numbers', () => {
            expect(calculator.divide(10, 2)).toBe(5);
            expect(calculator.divide(9, 3)).toBe(3);
            expect(calculator.divide(-8, 4)).toBe(-2);
        });

        it('should throw an error when dividing by zero', () => {
            expect(() => calculator.divide(10, 0)).toThrow('Cannot divide by zero.');
        });
    });
});
```

### Explanation:
1. **Importing the `Calculator` Class**: We import the `Calculator` class from the `calculator.js` file.
2. **Setup**: In the `beforeEach` hook, we create a new instance of the `Calculator` class before each test.
3. **Testing Methods**:
   - **Add**: Tests the `add` method with various inputs.
   - **Subtract**: Tests the `subtract` method with various inputs.
   - **Multiply**: Tests the `multiply` method with various inputs.
   - **Divide**: Tests the `divide` method with valid inputs and ensures it throws an error when dividing by zero.

This Jest test suite maintains the functionality and logic of the original Python unittest tests, ensuring that all assertions are appropriately mapped to Jest equivalents.