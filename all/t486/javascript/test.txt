Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will convert the Python unittest code into Jest test cases, ensuring that the functionality and logic of the tests are maintained.

### Python unittest Code

```python
import unittest

class Calculator:
    def add(self, a: float, b: float) -> float:
        return a + b

    def subtract(self, a: float, b: float) -> float:
        return a - b

    def multiply(self, a: float, b: float) -> float:
        return a * b

    def divide(self, a: float, b: float) -> float:
        if b == 0:
            raise ValueError("Cannot divide by zero.")
        return a / b

class TestCalculator(unittest.TestCase):

    def setUp(self):
        """Create an instance of Calculator before each test."""
        self.calculator = Calculator()

    def test_add(self):
        """Test the addition method."""
        result = self.calculator.add(10, 5)
        self.assertEqual(result, 15)

    def test_subtract(self):
        """Test the subtraction method."""
        result = self.calculator.subtract(10, 5)
        self.assertEqual(result, 5)

    def test_multiply(self):
        """Test the multiplication method."""
        result = self.calculator.multiply(10, 5)
        self.assertEqual(result, 50)

    def test_divide(self):
        """Test the division method."""
        result = self.calculator.divide(10, 5)
        self.assertEqual(result, 2.0)

    def test_divide_by_zero(self):
        """Test division by zero raises ValueError."""
        self.assertRaises(ValueError, self.calculator.divide, 10, 0)
```

### Equivalent Jest Test Suite

```javascript
// calculator.js
class Calculator {
    add(a, b) {
        return a + b;
    }

    subtract(a, b) {
        return a - b;
    }

    multiply(a, b) {
        return a * b;
    }

    divide(a, b) {
        if (b === 0) {
            throw new Error("Cannot divide by zero.");
        }
        return a / b;
    }
}

module.exports = Calculator;

// calculator.test.js
const Calculator = require('./calculator');

describe('Calculator', () => {
    let calculator;

    beforeEach(() => {
        calculator = new Calculator();
    });

    describe('add', () => {
        it('should add two numbers correctly', () => {
            const result = calculator.add(10, 5);
            expect(result).toBe(15);
        });
    });

    describe('subtract', () => {
        it('should subtract two numbers correctly', () => {
            const result = calculator.subtract(10, 5);
            expect(result).toBe(5);
        });
    });

    describe('multiply', () => {
        it('should multiply two numbers correctly', () => {
            const result = calculator.multiply(10, 5);
            expect(result).toBe(50);
        });
    });

    describe('divide', () => {
        it('should divide two numbers correctly', () => {
            const result = calculator.divide(10, 5);
            expect(result).toBe(2.0);
        });

        it('should throw an error when dividing by zero', () => {
            expect(() => calculator.divide(10, 0)).toThrow('Cannot divide by zero.');
        });
    });
});
```

### Explanation

1. **Calculator Class**:
   - The `Calculator` class is defined in `calculator.js`.
   - Each method (`add`, `subtract`, `multiply`, `divide`) is implemented as in the Python version.

2. **Jest Test Suite**:
   - The `Calculator` class is imported in `calculator.test.js`.
   - The `beforeEach` hook initializes a new instance of `Calculator` before each test.
   - Each test case uses `it` blocks to describe the behavior and `expect` assertions to verify the results.
   - The `toThrow` matcher is used to check if the `divide` method throws the expected error when dividing by zero.

This conversion ensures that the functionality and logic of the tests are maintained, and the structure is clear and follows Jest conventions.