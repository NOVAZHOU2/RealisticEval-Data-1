Sure! Below is the equivalent C++ code for the provided Python class `Calculator`.

```cpp
#include <iostream>
#include <stdexcept>

class Calculator {
public:
    // Returns the sum of a and b.
    double add(double a, double b) const {
        return a + b;
    }

    // Returns the difference of a and b.
    double subtract(double a, double b) const {
        return a - b;
    }

    // Returns the product of a and b.
    double multiply(double a, double b) const {
        return a * b;
    }

    // Returns the quotient of a and b.
    // Throws std::invalid_argument if b is zero.
    double divide(double a, double b) const {
        if (b == 0) {
            throw std::invalid_argument("Division by zero");
        }
        return a / b;
    }
};

int main() {
    Calculator calc;

    try {
        std::cout << "Addition: " << calc.add(5.0, 3.0) << std::endl;
        std::cout << "Subtraction: " << calc.subtract(5.0, 3.0) << std::endl;
        std::cout << "Multiplication: " << calc.multiply(5.0, 3.0) << std::endl;
        std::cout << "Division: " << calc.divide(5.0, 3.0) << std::endl;
        std::cout << "Division by Zero: " << calc.divide(5.0, 0.0) << std::endl; // This will throw an exception
    } catch (const std::invalid_argument& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:

1. **Class Definition**:
   - The `Calculator` class is defined with four member functions: `add`, `subtract`, `multiply`, and `divide`.
   
2. **Member Functions**:
   - Each function takes two `double` parameters and returns a `double`.
   - The `divide` function includes error handling to check if the divisor (`b`) is zero. If it is, it throws a `std::invalid_argument` exception.

3. **Main Function**:
   - The `main` function demonstrates how to use the `Calculator` class.
   - It calls each method and prints the result.
   - It also shows how to handle the exception thrown by the `divide` function when the divisor is zero.

This C++ code should work similarly to the original Python code in terms of functionality and behavior.