Here's the equivalent C++ code for the given Python code:

```cpp
#include <iostream>
#include <stdexcept>

class Calculator {
public:
    // Returns the sum of a and b.
    float add(float a, float b) {
        return a + b;
    }

    // Returns the difference of a and b.
    float subtract(float a, float b) {
        return a - b;
    }

    // Returns the product of a and b.
    float multiply(float a, float b) {
        return a * b;
    }

    // Returns the quotient of a and b.
    // Throws std::invalid_argument if b is zero.
    float divide(float a, float b) {
        if (b == 0) {
            throw std::invalid_argument("Cannot divide by zero.");
        }
        return a / b;
    }
};

int main() {
    Calculator calc;

    try {
        std::cout << "Addition: " << calc.add(5.0f, 3.0f) << std::endl;
        std::cout << "Subtraction: " << calc.subtract(10.0f, 4.0f) << std::endl;
        std::cout << "Multiplication: " << calc.multiply(2.0f, 6.0f) << std::endl;
        std::cout << "Division: " << calc.divide(8.0f, 2.0f) << std::endl;
        std::cout << "Division by zero: " << calc.divide(8.0f, 0.0f) << std::endl;
    } catch (const std::invalid_argument& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
- The `Calculator` class is defined with member functions for addition, subtraction, multiplication, and division.
- The `add`, `subtract`, and `multiply` functions directly perform the respective arithmetic operations.
- The `divide` function checks if the divisor (`b`) is zero before performing the division. If `b` is zero, it throws a `std::invalid_argument` exception.
- In the `main` function, we create an instance of `Calculator` and demonstrate its usage, including handling the division by zero case with a try-catch block.