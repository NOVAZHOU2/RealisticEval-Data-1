Here's how you can define the same interface in C++:

```cpp
class Calculator {
public:
    /**
     * Returns the sum of a and b.
     */
    virtual double add(double a, double b) = 0;

    /**
     * Returns the difference of a and b.
     */
    virtual double subtract(double a, double b) = 0;

    /**
     * Returns the product of a and b.
     */
    virtual double multiply(double a, double b) = 0;

    /**
     * Returns the quotient of a and b.
     * Throws std::invalid_argument if b is zero.
     */
    virtual double divide(double a, double b) = 0;
};
```

This is an abstract base class (ABC) in C++, similar to Python's `abc` module. The `virtual` keyword means that these methods can be overridden in derived classes, and the `= 0` syntax makes them pure virtual, meaning they must be implemented in any non-abstract subclass.

Note that C++ does not have built-in support for raising exceptions based on type like Python does with `ValueError`. Instead, it uses specific exception types such as `std::invalid_argument`, which you would throw from your `divide()` method if `b` were zero.