Sure, here's how you can convert the given Python unittest test class to a C++ test case using Catch2:

```cpp
#include <catch2/catch.hpp>
#include "Calculator.h" // Assuming Calculator is defined in Calculator.h

class Calculator {
public:
    virtual ~Calculator() = default;

    virtual double add(double a, double b) const = 0;
    virtual double subtract(double a, double b) const = 0;
    virtual double multiply(double a, double b) const = 0;
    virtual double divide(double a, double b) const = 0;
};

class MockCalculator : public Calculator {
public:
    double add(double a, double b) const override { return a + b; }
    double subtract(double a, double b) const override { return a - b; }
    double multiply(double a, double b) const override { return a * b; }
    double divide(double a, double b) const override {
        if (b == 0) throw std::invalid_argument("Division by zero");
        return a / b;
    }
};

TEST_CASE("Calculator Tests", "[calculator]") {
    MockCalculator calc;

    SECTION("Addition") {
        REQUIRE(calc.add(1.5, 2.5) == 4.0);
    }

    SECTION("Subtraction") {
        REQUIRE(calc.subtract(3.0, 1.5) == 1.5);
    }

    SECTION("Multiplication") {
        REQUIRE(calc.multiply(2.0, 3.0) == 6.0);
    }

    SECTION("Division") {
        REQUIRE(calc.divide(6.0, 2.0) == 3.0);

        // Test division by zero
        CHECK_THROWS_AS(calc.divide(5.0, 0.0), std::invalid_argument);
    }
}
```

### Explanation:
1. **MockCalculator Class**: This class implements the `Calculator` interface and provides concrete implementations for each method. The `divide` method includes a check for division by zero and throws an exception if it occurs.

2. **Catch2 TEST_CASE**: This macro defines a test case named "Calculator Tests". Inside the test case, multiple `SECTION`s are used to group related tests together.

3. **REQUIRE and CHECK_THROWS_AS**: These macros are used to assert that certain conditions are met. `REQUIRE` will fail the test if the condition is not true, while `CHECK_THROWS_AS` checks that a specific exception is thrown.

Make sure you have Catch2 installed and properly configured in your project. If you're using CMake, you can include Catch2 by adding the following lines to your `CMakeLists.txt`:

```cmake
find_package(Catch2 REQUIRED)
target_link_libraries(your_target PRIVATE Catch2::Catch2WithMain)
```

Replace `your_target` with the name of your target executable or library.