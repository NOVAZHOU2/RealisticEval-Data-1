Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a set of Catch2 tests to ensure the functionality and logic are preserved.

First, make sure you have the Catch2 library installed. You can include it via CMake or another build system.

Here is the complete C++ code with Catch2 tests:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <stdexcept>

// Define the Calculator class
class Calculator {
public:
    // Returns the sum of a and b.
    float add(float a, float b) {
        return a + b;
    }

    // Returns the difference of a and b.
    float subtract(float a, float b) {
        return a - b;
    }

    // Returns the product of a and b.
    float multiply(float a, float b) {
        return a * b;
    }

    // Returns the quotient of a and b.
    // Throws std::invalid_argument if b is zero.
    float divide(float a, float b) {
        if (b == 0) {
            throw std::invalid_argument("Cannot divide by zero.");
        }
        return a / b;
    }
};

TEST_CASE("Calculator operations", "[Calculator]") {
    Calculator calc;

    SECTION("Addition") {
        REQUIRE(calc.add(5.0f, 3.0f) == Approx(8.0f));
        REQUIRE(calc.add(-5.0f, 3.0f) == Approx(-2.0f));
    }

    SECTION("Subtraction") {
        REQUIRE(calc.subtract(5.0f, 3.0f) == Approx(2.0f));
        REQUIRE(calc.subtract(-5.0f, 3.0f) == Approx(-8.0f));
    }

    SECTION("Multiplication") {
        REQUIRE(calc.multiply(5.0f, 3.0f) == Approx(15.0f));
        REQUIRE(calc.multiply(-5.0f, 3.0f) == Approx(-15.0f));
    }

    SECTION("Division") {
        REQUIRE(calc.divide(5.0f, 3.0f) == Approx(5.0f / 3.0f));
        REQUIRE(calc.divide(-5.0f, 3.0f) == Approx(-5.0f / 3.0f));

        // Test division by zero
        REQUIRE_THROWS_AS(calc.divide(5.0f, 0.0f), std::invalid_argument);
        REQUIRE_THROWS_WITH(calc.divide(5.0f, 0.0f), "Cannot divide by zero.");
    }
}

// Main function to run the tests
int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Catch2 Setup**:
   - Include the Catch2 header file (`#include <catch2/catch_test_macros.hpp>`).
   - Define the `Calculator` class with the required methods.

2. **Test Class Definition**:
   - Use `TEST_CASE` to define a test suite for the `Calculator` class.
   - Use `SECTION` to define individual test cases for each operation.
   - Use `REQUIRE` and `REQUIRE_THROWS_AS` to assert the correctness of the operations and exceptions.

3. **Assertions**:
   - `REQUIRE` is used to check the expected results of the arithmetic operations.
   - `Approx` is used for floating-point comparisons.
   - `REQUIRE_THROWS_AS` is used to check that the `divide` method throws the correct exception when dividing by zero.
   - `REQUIRE_THROWS_WITH` is used to check the exact error message thrown by the exception.

4. **Main Function**:
   - The `main` function runs the Catch2 test session.

This code ensures that the functionality and logic of the tests are preserved while adhering to C++ syntax and the Catch2 testing framework.