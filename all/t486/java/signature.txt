Sure! Hereâ€™s the equivalent Java code for the given Python class, including appropriate Javadoc comments and method signatures:

```java
package org.real.temp;

/**
 * A simple calculator class that provides basic arithmetic operations.
 */
public class Calculator {

    /**
     * Returns the sum of two floating-point numbers.
     *
     * @param a the first number
     * @param b the second number
     * @return the sum of a and b
     */
    public double add(double a, double b) {
        return a + b;
    }

    /**
     * Returns the difference between two floating-point numbers.
     *
     * @param a the first number
     * @param b the second number
     * @return the difference of a and b
     */
    public double subtract(double a, double b) {
        return a - b;
    }

    /**
     * Returns the product of two floating-point numbers.
     *
     * @param a the first number
     * @param b the second number
     * @return the product of a and b
     */
    public double multiply(double a, double b) {
        return a * b;
    }

    /**
     * Returns the quotient of two floating-point numbers.
     * Throws an ArithmeticException if the divisor is zero.
     *
     * @param a the dividend
     * @param b the divisor
     * @return the quotient of a and b
     * @throws ArithmeticException if the divisor is zero
     */
    public double divide(double a, double b) throws ArithmeticException {
        if (b == 0) {
            throw new ArithmeticException("Cannot divide by zero.");
        }
        return a / b;
    }
}
```

### Explanation:
1. **Package Declaration**: The `package org.real.temp;` statement defines the package where this class resides.
2. **Class Definition**: The `Calculator` class is defined with Javadoc comments explaining its purpose.
3. **Method Definitions**:
   - `add()`: Adds two floating-point numbers.
   - `subtract()`: Subtracts one floating-point number from another.
   - `multiply()`: Multiplies two floating-point numbers.
   - `divide()`: Divides one floating-point number by another and throws an `ArithmeticException` if the divisor is zero.
4. **Javadoc Comments**: Each method includes Javadoc comments describing the parameters, return values, and exceptions thrown.

This Java code preserves the functionality and structure of the original Python code while adhering to Java's conventions and syntax.