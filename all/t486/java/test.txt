Certainly! Below is the equivalent Java JUnit test class for the provided Python `unittest` test class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It will use JUnit annotations and assertion methods to ensure the functionality and logic of the tests are preserved.

### Python Code:
```python
import unittest

class Calculator:
    def add(self, a: float, b: float) -> float:
        """
        Returns the sum of a and b.
        """
        return a + b

    def subtract(self, a: float, b: float) -> float:
        """
        Returns the difference of a and b.
        """
        return a - b

    def multiply(self, a: float, b: float) -> float:
        """
        Returns the product of a and b.
        """
        return a * b

    def divide(self, a: float, b: float) -> float:
        """
        Returns the quotient of a and b.
        Raises ValueError if b is zero.
        """
        if b == 0:
            raise ValueError("Cannot divide by zero.")
        return a / b


class TestCalculator(unittest.TestCase):
    def setUp(self):
        self.calculator = Calculator()

    def test_add(self):
        self.assertEqual(self.calculator.add(1.5, 2.5), 4.0)

    def test_subtract(self):
        self.assertEqual(self.calculator.subtract(5.0, 3.0), 2.0)

    def test_multiply(self):
        self.assertEqual(self.calculator.multiply(2.0, 3.0), 6.0)

    def test_divide(self):
        self.assertEqual(self.calculator.divide(10.0, 2.0), 5.0)
        with self.assertRaises(ValueError):
            self.calculator.divide(10.0, 0.0)


if __name__ == '__main__':
    unittest.main()
```

### Java Code:
```java
package org.real.temp;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

/**
 * Test class for the Calculator class.
 */
public class Tester {

    private Calculator calculator;

    @Before
    public void setUp() {
        calculator = new Calculator();
    }

    @Test
    public void testAdd() {
        assertEquals(4.0, calculator.add(1.5, 2.5), 0.001);
    }

    @Test
    public void testSubtract() {
        assertEquals(2.0, calculator.subtract(5.0, 3.0), 0.001);
    }

    @Test
    public void testMultiply() {
        assertEquals(6.0, calculator.multiply(2.0, 3.0), 0.001);
    }

    @Test
    public void testDivide() {
        assertEquals(5.0, calculator.divide(10.0, 2.0), 0.001);
        assertThrows(ArithmeticException.class, () -> calculator.divide(10.0, 0.0));
    }
}

/**
 * A simple calculator class that provides basic arithmetic operations.
 */
public class Calculator {

    /**
     * Returns the sum of two floating-point numbers.
     *
     * @param a the first number
     * @param b the second number
     * @return the sum of a and b
     */
    public double add(double a, double b) {
        return a + b;
    }

    /**
     * Returns the difference between two floating-point numbers.
     *
     * @param a the first number
     * @param b the second number
     * @return the difference of a and b
     */
    public double subtract(double a, double b) {
        return a - b;
    }

    /**
     * Returns the product of two floating-point numbers.
     *
     * @param a the first number
     * @param b the second number
     * @return the product of a and b
     */
    public double multiply(double a, double b) {
        return a * b;
    }

    /**
     * Returns the quotient of two floating-point numbers.
     * Throws an ArithmeticException if the divisor is zero.
     *
     * @param a the dividend
     * @param b the divisor
     * @return the quotient of a and b
     * @throws ArithmeticException if the divisor is zero
     */
    public double divide(double a, double b) throws ArithmeticException {
        if (b == 0) {
            throw new ArithmeticException("Cannot divide by zero.");
        }
        return a / b;
    }
}
```

### Explanation:
1. **Package Declaration**: The `package org.real.temp;` statement defines the package where the classes reside.
2. **JUnit Test Class**:
   - `Tester`: The test class is defined with JUnit annotations.
   - `setUp()`: Initializes the `Calculator` instance before each test.
   - `@Test` annotations: Define individual test methods.
   - `assertEquals`: Used to check equality of results.
   - `assertThrows`: Used to verify that an exception is thrown.
3. **Calculator Class**:
   - Methods `add()`, `subtract()`, `multiply()`, and `divide()` are implemented with appropriate Javadoc comments.
   - `divide()` method throws an `ArithmeticException` when the divisor is zero.

This Java code preserves the functionality and structure of the original Python code while adhering to Java's conventions and JUnit testing framework.