Here's the equivalent Java code for the given Python code, organized within the package `org.real.temp` and the class `Answer`. I've included all the necessary type declarations, method signatures, and exception handling:

```java
package org.real.temp;

public class Answer {
    public static void main(String[] args) {
        // Example usage
        Calculator calculator = new Calculator();
        System.out.println(calculator.add(1.5, 2.5)); // Output: 4.0
        System.out.println(calculator.subtract(5.0, 3.0)); // Output: 2.0
        System.out.println(calculator.multiply(2.0, 3.0)); // Output: 6.0
        try {
            System.out.println(calculator.divide(10.0, 0.0)); // Throws ArithmeticException
        } catch (ArithmeticException e) {
            System.out.println(e.getMessage()); // Output: Cannot divide by zero.
        }
    }

    public static class Calculator {
        public double add(double a, double b) {
            /**
             * Returns the sum of a and b.
             */
            return a + b;
        }

        public double subtract(double a, double b) {
            /**
             * Returns the difference of a and b.
             */
            return a - b;
        }

        public double multiply(double a, double b) {
            /**
             * Returns the product of a and b.
             */
            return a * b;
        }

        public double divide(double a, double b) throws ArithmeticException {
            /**
             * Returns the quotient of a and b.
             * Throws ArithmeticException if b is zero.
             */
            if (b == 0) {
                throw new ArithmeticException("Cannot divide by zero.");
            }
            return a / b;
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The `package org.real.temp;` statement defines the package where this class resides.
2. **Class Definition**: The `Answer` class contains the `Calculator` class as a nested class.
3. **Methods**:
   - `add()`, `subtract()`, `multiply()`: These methods perform basic arithmetic operations.
   - `divide()`: This method performs division and throws an `ArithmeticException` if the divisor is zero.
4. **Exception Handling**: The `divide()` method throws an `ArithmeticException` which can be caught and handled in the `main` method or any other calling method.

This Java code preserves the functionality and structure of the original Python code while adhering to Java's syntax and best practices.