Certainly! Hereâ€™s the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation comments:

```typescript
import fs from 'fs';

/**
 * Writes a line to a text file only if the line with the same content does not already exist.
 * 
 * @param filename - The name of the file to write to.
 * @param lineContent - The content of the line to write.
 */
function writeUniqueLineToFile(filename: string, lineContent: string): void {
    // Check if the lineContent already exists in the file
    fs.readFile(filename, 'utf8', (err, data) => {
        if (err) {
            if (err.code === 'ENOENT') {
                // File does not exist, so we can directly write the line
                appendLineToFile(filename, lineContent);
            } else {
                console.error(`Error reading file: ${err}`);
            }
            return;
        }

        if (data.includes(lineContent)) {
            console.log(`Line '${lineContent}' already exists in '${filename}'. Not writing again.`);
            return;
        }

        // If lineContent is not found, append it to the file
        appendLineToFile(filename, lineContent);
    });
}

/**
 * Appends a line to the specified file.
 * 
 * @param filename - The name of the file to append to.
 * @param lineContent - The content of the line to append.
 */
function appendLineToFile(filename: string, lineContent: string): void {
    fs.appendFile(filename, lineContent + '\n', (err) => {
        if (err) {
            console.error(`Error writing to file: ${err}`);
            return;
        }
        console.log(`Line '${lineContent}' successfully written to '${filename}'.`);
    });
}

// Example usage
writeUniqueLineToFile('example.txt', 'This is a test line.');
```

### Explanation:
1. **Importing `fs` Module**: TypeScript requires importing the `fs` module for file system operations.
2. **JSDoc Documentation Comments**: The Python docstring is converted to JSDoc-style comments using `/** */`.
3. **Asynchronous File Handling**: The file operations are asynchronous, using `fs.readFile` and `fs.appendFile`.
4. **Error Handling**: Proper error handling is included to catch and log any errors during file operations.
5. **Separate Function for Appending**: A separate function `appendLineToFile` is used for appending the line to the file, keeping the code organized.

This TypeScript code preserves the original functionality and structure of the Python code while adapting it to TypeScript conventions and asynchronous file operations.