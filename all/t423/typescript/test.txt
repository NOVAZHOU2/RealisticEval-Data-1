Certainly! Hereâ€™s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included.

### TypeScript Code

```typescript
import { writeUniqueLineToFile } from './path/to/writeUniqueLineToFile'; // Import the function
import fs from 'fs';
import path from 'path';

describe('TestWriteUniqueLineToFile', () => {
    let filename: string;

    beforeAll(() => {
        // Setup: create a temporary file for testing.
        filename = 'test_file.txt';
        fs.writeFileSync(filename, '');
    });

    afterAll(() => {
        // Cleanup: remove the temporary file after all tests.
        fs.unlinkSync(filename);
    });

    it('writes a new line to an empty file', () => {
        const lineContent = "First unique line.";
        writeUniqueLineToFile(filename, lineContent);

        const fileContent = fs.readFileSync(filename, 'utf8');
        expect(fileContent).toContain(lineContent);
    });

    it('does not write a duplicate line', () => {
        const lineContent = "First unique line.";
        writeUniqueLineToFile(filename, lineContent);
        writeUniqueLineToFile(filename, lineContent);

        const fileContent = fs.readFileSync(filename, 'utf8');
        expect(fileContent.split('\n').filter(line => line === lineContent).length).toBe(1);
    });

    it('writes multiple unique lines', () => {
        const lines = ["First unique line.", "Second unique line.", "Third unique line."];
        lines.forEach(line => writeUniqueLineToFile(filename, line));

        const fileContent = fs.readFileSync(filename, 'utf8');
        lines.forEach(line => {
            expect(fileContent).toContain(line);
        });
    });

    it('does not write an empty line', () => {
        const lineContent = "";
        writeUniqueLineToFile(filename, lineContent);

        const fileContent = fs.readFileSync(filename, 'utf8');
        expect(fileContent.trim()).toBe("");
    });
});
```

### Explanation:
1. **Imports**:
   - Import the `writeUniqueLineToFile` function from the appropriate module.
   - Import `fs` and `path` modules for file system operations.

2. **Setup and Cleanup**:
   - `beforeAll`: Create a temporary file for testing.
   - `afterAll`: Remove the temporary file after all tests.

3. **Test Cases**:
   - **`writes a new line to an empty file`**:
     - Write a new line to the file.
     - Verify that the line is present in the file.

   - **`does not write a duplicate line`**:
     - Write a line twice.
     - Verify that the line appears only once in the file.

   - **`writes multiple unique lines`**:
     - Write multiple unique lines.
     - Verify that each line is present in the file.

   - **`does not write an empty line`**:
     - Write an empty line.
     - Verify that the file remains empty.

4. **Assertions**:
   - Use Jest assertions like `toContain`, `toBe`, and array filtering to verify the expected behavior.

This TypeScript code preserves the original functionality and logic of the Python unittest test cases while adapting them to Jest's testing framework.