Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
const fs = require('fs');

/**
 * Writes a line to a text file only if the line with the same content does not already exist.
 * 
 * @param {string} filename - The name of the file to write to.
 * @param {string} lineContent - The content of the line to write.
 */
function writeUniqueLineToFile(filename, lineContent) {
    // Check if the lineContent already exists in the file
    fs.readFile(filename, 'utf8', (err, data) => {
        if (err && err.code === 'ENOENT') {
            // File does not exist, so we can directly write the line
            appendLineToFile(filename, lineContent);
        } else if (err) {
            console.error(`Error reading file: ${err}`);
        } else {
            if (data.includes(lineContent)) {
                console.log(`Line '${lineContent}' already exists in '${filename}'. Not writing again.`);
            } else {
                appendLineToFile(filename, lineContent);
            }
        }
    });
}

/**
 * Appends a line to the specified file.
 * 
 * @param {string} filename - The name of the file to append to.
 * @param {string} lineContent - The content of the line to append.
 */
function appendLineToFile(filename, lineContent) {
    fs.appendFile(filename, lineContent + '\n', (err) => {
        if (err) {
            console.error(`Error writing to file: ${err}`);
        } else {
            console.log(`Line '${lineContent}' successfully written to '${filename}'.`);
        }
    });
}

// Example usage
writeUniqueLineToFile('example.txt', 'This is a test line.');
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comments are added above the function definitions to describe their purpose, parameters, and behavior.
   - The `@param` tags are used to document the parameters.
   - The `@returns` tag is omitted since the function does not return a value explicitly.

2. **Function Definitions**:
   - `writeUniqueLineToFile`: This function checks if the specified line content already exists in the file. If it does, it logs a message; otherwise, it appends the line.
   - `appendLineToFile`: This helper function appends the line content to the specified file.

3. **File System Operations**:
   - `fs.readFile` is used to read the contents of the file.
   - `fs.appendFile` is used to append the line content to the file.
   - Error handling is included to log any errors that occur during file operations.

4. **Example Usage**:
   - An example call to `writeUniqueLineToFile` is provided at the end to demonstrate how to use the function.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JSDoc standards for documentation.