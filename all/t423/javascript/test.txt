Certainly! Below is the equivalent Jest test suite for the given Python unittest test class. The conversion ensures that the functionality and logic of the tests are maintained, and all necessary changes due to language differences are documented.

### Python Code:
```python
import unittest
import os

def write_unique_line_to_file(filename: str, line_content: str):
    """
    Writes a line to a text file only if the line with the same content does not already exist.

    Args:
        filename (str): The name of the file to write to.
        line_content (str): The content of the line to write.

    Returns:
        None
    """
    # Check if the line_content already exists in the file
    with open(filename, 'r') as file:
        if line_content in file.read():
            print(f"Line '{line_content}' already exists in '{filename}'. Not writing again.")
            return

    # If line_content is not found, append it to the file
    with open(filename, 'a') as file:
        file.write(line_content + '\n')
        print(f"Line '{line_content}' successfully written to '{filename}'.")


class TestWriteUniqueLineToFile(unittest.TestCase):
    def setUp(self):
        # Setup: create a temporary file for testing.
        self.filename = 'test_file.txt'
        with open(self.filename, 'w') as file:
            file.write('')

    def test_write_new_line(self):
        # Test case 1: Writing a new line to an empty file.
        line_content = "First unique line."
        write_unique_line_to_file(self.filename, line_content)
        with open(self.filename, 'r') as file:
            self.assertIn(line_content, file.read())

    def test_write_duplicate_line(self):
        # Test case 2: Attempting to write a duplicate line.
        line_content = "First unique line."
        # Write the line once.
        write_unique_line_to_file(self.filename, line_content)
        # Attempt to write it again.
        write_unique_line_to_file(self.filename, line_content)
        # Check if the line was written only once.
        with open(self.filename, 'r') as file:
            self.assertEqual(file.read().strip().count(line_content), 1)

    def test_write_multiple_unique_lines(self):
        # Test case 3: Writing multiple unique lines.
        lines = ["First unique line.", "Second unique line.", "Third unique line."]
        for line in lines:
            write_unique_line_to_file(self.filename, line)
        with open(self.filename, 'r') as file:
            file_content = file.read()
            for line in lines:
                self.assertIn(line, file_content)

    def test_write_empty_line(self):
        # Test case 5: Writing an empty line, should not write.
        line_content = ""
        write_unique_line_to_file(self.filename, line_content)
        with open(self.filename, 'r') as file:
            self.assertEqual(file.read(), "")


if __name__ == '__main__':
    unittest.main()
```

### Equivalent Jest Test Suite:

```javascript
const fs = require('fs');
const path = require('path');

function writeUniqueLineToFile(filename, lineContent) {
    /**
     * Writes a line to a text file only if the line with the same content does not already exist.
     *
     * @param {string} filename - The name of the file to write to.
     * @param {string} lineContent - The content of the line to write.
     */
    // Check if the lineContent already exists in the file
    fs.readFile(filename, 'utf8', (err, data) => {
        if (err && err.code === 'ENOENT') {
            // File does not exist, so we can directly write the line
            appendLineToFile(filename, lineContent);
        } else if (err) {
            console.error(`Error reading file: ${err}`);
        } else {
            if (data.includes(lineContent)) {
                console.log(`Line '${lineContent}' already exists in '${filename}'. Not writing again.`);
            } else {
                appendLineToFile(filename, lineContent);
            }
        }
    });
}

function appendLineToFile(filename, lineContent) {
    fs.appendFile(filename, lineContent + '\n', (err) => {
        if (err) {
            console.error(`Error writing to file: ${err}`);
        } else {
            console.log(`Line '${lineContent}' successfully written to '${filename}'.`);
        }
    });
}

describe('TestWriteUniqueLineToFile', () => {
    const filename = 'test_file.txt';

    beforeAll(() => {
        // Setup: create a temporary file for testing.
        fs.writeFile(filename, '', (err) => {
            if (err) {
                console.error(`Error creating file: ${err}`);
            }
        });
    });

    afterAll(() => {
        // Cleanup: remove the temporary file after all tests.
        fs.unlink(filename, (err) => {
            if (err) {
                console.error(`Error removing file: ${err}`);
            }
        });
    });

    test('Writing a new line to an empty file', () => {
        const lineContent = "First unique line.";
        writeUniqueLineToFile(filename, lineContent);

        return new Promise((resolve) => {
            setTimeout(() => {
                fs.readFile(filename, 'utf8', (err, data) => {
                    if (err) {
                        console.error(`Error reading file: ${err}`);
                        resolve(false);
                    } else {
                        expect(data).toContain(lineContent);
                        resolve(true);
                    }
                });
            }, 100); // Allow time for the asynchronous write to complete
        });
    });

    test('Attempting to write a duplicate line', () => {
        const lineContent = "First unique line.";
        writeUniqueLineToFile(filename, lineContent);
        writeUniqueLineToFile(filename, lineContent);

        return new Promise((resolve) => {
            setTimeout(() => {
                fs.readFile(filename, 'utf8', (err, data) => {
                    if (err) {
                        console.error(`Error reading file: ${err}`);
                        resolve(false);
                    } else {
                        expect(data.trim().split('\n').filter(line => line === lineContent).length).toBe(1);
                        resolve(true);
                    }
                });
            }, 100); // Allow time for the asynchronous write to complete
        });
    });

    test('Writing multiple unique lines', () => {
        const lines = ["First unique line.", "Second unique line.", "Third unique line."];

        lines.forEach(line => {
            writeUniqueLineToFile(filename, line);
        });

        return new Promise((resolve) => {
            setTimeout(() => {
                fs.readFile(filename, 'utf8', (err, data) => {
                    if (err) {
                        console.error(`Error reading file: ${err}`);
                        resolve(false);
                    } else {
                        lines.forEach(line => {
                            expect(data).toContain(line);
                        });
                        resolve(true);
                    }
                });
            }, 100); // Allow time for the asynchronous write to complete
        });
    });

    test('Writing an empty line, should not write', () => {
        const lineContent = "";
        writeUniqueLineToFile(filename, lineContent);

        return new Promise((resolve) => {
            setTimeout(() => {
                fs.readFile(filename, 'utf8', (err, data) => {
                    if (err) {
                        console.error(`Error reading file: ${err}`);
                        resolve(false);
                    } else {
                        expect(data.trim()).toBe("");
                        resolve(true);
                    }
                });
            }, 100); // Allow time for the asynchronous write to complete
        });
    });
});
```

### Explanation:
1. **Setup and Cleanup**:
   - `beforeAll`: Creates the temporary file for testing.
   - `afterAll`: Removes the temporary file after all tests are completed.

2. **Test Cases**:
   - Each test case uses `test` to define a test scenario.
   - Asynchronous operations are handled using Promises and timeouts to ensure that the file operations have completed before assertions are made.

3. **Assertions**:
   - `expect(data).toContain(lineContent)` is used to check if the line content is present in the file.
   - `expect(data.trim().split('\n').filter(line => line === lineContent).length).toBe(1)` is used to check if the line was written only once.
   - `expect(data.trim()).toBe("")` is used to check if the file is empty after attempting to write an empty line.

4. **File Operations**:
   - `fs.writeFile`, `fs.readFile`, and `fs.unlink` are used for file operations.
   - `fs.appendFile` is used to append lines to the file.

This Jest test suite maintains the functionality and logic of the original Python unittest test class while adapting to the asynchronous nature of Node.js file operations.