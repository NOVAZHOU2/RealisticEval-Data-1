Sure, let's convert the provided Python function into a JavaScript function and then create a Jest test suite for it. First, we'll define the JavaScript function equivalent to `write_unique_line_to_file`.

### JavaScript Function Equivalent

```javascript
function writeUniqueLineToFile(filename, lineContent) {
    // Check if the file exists
    const fs = require('fs');
    const path = require('path');

    if (!fs.existsSync(filename)) {
        fs.writeFileSync(filename, lineContent + '\n', 'utf8');
        return;
    }

    // Read the existing lines
    const existingLines = fs.readFileSync(filename, 'utf8').split('\n');

    // Check if the line already exists
    const lineExists = existingLines.includes(lineContent);
    if (!lineExists) {
        // Append the new line
        fs.appendFileSync(filename, lineContent + '\n', 'utf8');
    }
}
```

### Jest Test Suite

Now, let's create the Jest test suite to verify the functionality of `writeUniqueLineToFile`. We will use Jest's `beforeEach` hook to set up the environment and mock the file system for each test case.

```javascript
const { writeUniqueLineToFile } = require('./writeUniqueLineToFile');
const { tmpdir } = require('os');
const { join } = require('path');
const { mkdirSync, writeFileSync, readFileSync, existsSync } = require('fs');

describe('writeUniqueLineToFile', () => {
    const tempDir = tmpdir();
    const testFile = join(tempDir, 'testfile.txt');

    beforeEach(() => {
        // Clean up the test file before each test
        if (existsSync(testFile)) {
            writeFileSync(testFile, '');
        } else {
            mkdirSync(tempDir, { recursive: true });
            writeFileSync(testFile, '');
        }
    });

    it('should write a unique line to the file', () => {
        const line1 = 'Hello, world!';
        const line2 = 'Goodbye, world!';
        const line3 = 'Hello, world!';  // Duplicate line

        writeUniqueLineToFile(testFile, line1);
        writeUniqueLineToFile(testFile, line2);
        writeUniqueLineToFile(testFile, line3);

        const content = readFileSync(testFile, 'utf8');
        const lines = content.split('\n');

        expect(lines).toContain(line1);
        expect(lines).toContain(line2);
        expect(lines).not.toContain(line3);
    });

    it('should not write duplicate lines to the file', () => {
        const line1 = 'Hello, world!';
        const line2 = 'Goodbye, world!';
        const line3 = 'Hello, world!';  // Duplicate line

        writeUniqueLineToFile(testFile, line1);
        writeUniqueLineToFile(testFile, line2);
        writeUniqueLineToFile(testFile, line3);

        const content = readFileSync(testFile, 'utf8');
        const lines = content.split('\n');

        expect(lines).toContain(line1);
        expect(lines).toContain(line2);
        expect(lines).not.toContain(line3);
    });

    it('should create the file if it does not exist', () => {
        const line1 = 'Hello, world!';
        const line2 = 'Goodbye, world!';

        writeUniqueLineToFile(testFile, line1);
        writeUniqueLineToFile(testFile, line2);

        const content = readFileSync(testFile, 'utf8');
        const lines = content.split('\n');

        expect(lines).toContain(line1);
        expect(lines).toContain(line2);
    });
});
```

### Explanation

1. **Setup**: 
   - The `beforeEach` hook ensures that the test file is cleaned up or created before each test case.
   - We use `mkdirSync` and `writeFileSync` to create and initialize the test file.

2. **Test Cases**:
   - **Test 1**: Verifies that a unique line is written to the file and duplicate lines are not written.
   - **Test 2**: Repeats the first test case to ensure consistency.
   - **Test 3**: Checks that the file is created and lines are written when the file initially does not exist.

This setup maintains the functionality and logic of the original Python test cases while adapting them to Jest.