Sure, hereâ€™s the equivalent Java method with appropriate Javadoc comments:

```java
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class FileUtil {

    /**
     * Writes a line to a text file only if the line with the same content does not already exist.
     *
     * @param filename    The name of the file to write to.
     * @param lineContent The content of the line to write.
     */
    public static void writeUniqueLineToFile(String filename, String lineContent) {
        Path filePath = Paths.get(filename);
        
        // Check if the line already exists in the file
        try {
            if (Files.readAllLines(filePath).contains(lineContent)) {
                return; // Line already exists, do nothing
            }
            
            // Write the line to the file
            try (FileWriter writer = new FileWriter(filename, true)) {
                writer.write(lineContent + System.lineSeparator());
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Javadoc Comments**: The method is documented with Javadoc comments, which include a brief description of the method and its parameters.
2. **Java Method Signature**: The method `writeUniqueLineToFile` is declared as `public static` to match the Python function signature.
3. **Import Statements**: Necessary imports (`java.io.FileWriter`, `java.nio.file.Files`, `java.nio.file.Path`, `java.nio.file.Paths`) are added to handle file operations.
4. **File Handling**: The method uses `Path` and `Files` classes from the `java.nio.file` package to read lines from the file and check for the existence of the line.
5. **Exception Handling**: Exception handling is included to catch and print stack traces for any `IOExceptions` that may occur during file operations.