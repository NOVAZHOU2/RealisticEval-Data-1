Here's the equivalent Java code for the provided Python function:

```java
package org.real.temp;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class Answer {

    /**
     * Writes a line to a text file only if the line with the same content does not already exist.
     *
     * @param filename      The name of the file to write to.
     * @param lineContent   The content of the line to write.
     * @throws IOException  If an I/O error occurs.
     */
    public static void writeUniqueLineToFile(String filename, String lineContent) throws IOException {
        boolean shouldWrite = true;
        
        // Check if the line already exists in the file
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                if (currentLine.trim().equals(lineContent.trim())) {
                    shouldWrite = false;
                    break;
                }
            }
        }

        // Write the line to the file if it doesn't exist
        if (shouldWrite) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename, true))) {
                writer.write(lineContent);
                writer.newLine();
            }
        }
    }
}
```

### Explanation:
1. **Package and Class Declaration**: The Java code starts with the package declaration `package org.real.temp;` and the class declaration `public class Answer`.
2. **Method Signature**: The method `writeUniqueLineToFile` is declared as `public static` to make it accessible from other classes and to indicate that it can be called without creating an instance of the class.
3. **Exception Handling**: Since file operations can throw `IOException`, the method declares `throws IOException` to propagate the exception up the call stack.
4. **Reading the File**: A `BufferedReader` is used to read the file line by line. If a line matches the `lineContent`, `shouldWrite` is set to `false` and the loop breaks.
5. **Writing to the File**: If `shouldWrite` is still `true` after checking all lines, a `BufferedWriter` is used to append the `lineContent` to the file.

This Java code ensures that the specified line is written to the file only if it does not already exist.