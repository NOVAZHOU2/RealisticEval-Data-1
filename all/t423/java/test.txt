Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The test cases are converted to use JUnit annotations and assertions, preserving the original functionality and logic.

### Java Code

```java
package org.real.temp;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class Tester {

    private static final String FILENAME = "test_file.txt";

    @Before
    public void setUp() throws IOException {
        // Setup: create a temporary file for testing.
        File file = new File(FILENAME);
        file.createNewFile();
    }

    @After
    public void tearDown() {
        // Cleanup: delete the test file after each test.
        new File(FILENAME).delete();
    }

    @Test
    public void testWriteNewLine() throws IOException {
        // Test case 1: Writing a new line to an empty file.
        String lineContent = "First unique line.";
        writeUniqueLineToFile(FILENAME, lineContent);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILENAME))) {
            StringBuilder content = new StringBuilder();
            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                content.append(currentLine);
            }
            assertTrue(content.toString().contains(lineContent));
        }
    }

    @Test
    public void testWriteDuplicateLine() throws IOException {
        // Test case 2: Attempting to write a duplicate line.
        String lineContent = "First unique line.";
        // Write the line once.
        writeUniqueLineToFile(FILENAME, lineContent);
        // Attempt to write it again.
        writeUniqueLineToFile(FILENAME, lineContent);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILENAME))) {
            StringBuilder content = new StringBuilder();
            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                content.append(currentLine);
            }
            assertEquals(1, content.toString().split(lineContent, -1).length - 1);
        }
    }

    @Test
    public void testWriteMultipleUniqueLines() throws IOException {
        // Test case 3: Writing multiple unique lines.
        String[] lines = {"First unique line.", "Second unique line.", "Third unique line."};
        for (String line : lines) {
            writeUniqueLineToFile(FILENAME, line);
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(FILENAME))) {
            StringBuilder content = new StringBuilder();
            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                content.append(currentLine).append("\n");
            }
            for (String line : lines) {
                assertTrue(content.toString().contains(line));
            }
        }
    }

    @Test
    public void testWriteEmptyLine() throws IOException {
        // Test case 4: Writing an empty line, should not write.
        String lineContent = "";
        writeUniqueLineToFile(FILENAME, lineContent);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILENAME))) {
            StringBuilder content = new StringBuilder();
            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                content.append(currentLine);
            }
            assertEquals("", content.toString());
        }
    }

    // Utility method for writing unique lines to a file
    private void writeUniqueLineToFile(String filename, String lineContent) {
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                if (currentLine.equals(lineContent)) {
                    System.out.println("Line '" + lineContent + "' already exists in '" + filename + "'. Not writing again.");
                    return;
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading the file: " + e.getMessage());
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename, true))) {
            writer.write(lineContent);
            writer.newLine();
            System.out.println("Line '" + lineContent + "' successfully written to '" + filename + "'.");
        } catch (IOException e) {
            System.err.println("Error writing to the file: " + e.getMessage());
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The package `org.real.temp` is declared at the beginning.
2. **Class Definition**: The class `Tester` is defined with the necessary imports.
3. **JUnit Annotations**:
   - `@Before`: Sets up the test environment before each test.
   - `@After`: Cleans up the test environment after each test.
   - `@Test`: Marks methods as test cases.
4. **Setup and Teardown**:
   - `setUp`: Creates a temporary file for testing.
   - `tearDown`: Deletes the test file after each test.
5. **Test Methods**:
   - `testWriteNewLine`: Tests writing a new line to an empty file.
   - `testWriteDuplicateLine`: Tests attempting to write a duplicate line.
   - `testWriteMultipleUniqueLines`: Tests writing multiple unique lines.
   - `testWriteEmptyLine`: Tests writing an empty line.
6. **Assertions**:
   - `assertTrue`: Checks if a condition is true.
   - `assertEquals`: Checks if two values are equal.
7. **Utility Method**:
   - `writeUniqueLineToFile`: Utility method for writing unique lines to a file, similar to the Python function.

This Java code preserves the original functionality and logic of the Python test cases while adhering to JUnit conventions and best practices.