Here is how you could translate your Python function into C and C++:

C Code:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void write_unique_line_to_file(char* filename, char* line_content) {
    FILE *file = fopen(filename, "r");
    char buffer[256];
    int exists = 0;

    // Check if the line already exists in the file
    while(fgets(buffer, sizeof(buffer), file)) {
        if(strcmp(buffer, line_content) == 0) {
            exists = 1;
            break;
        }
    }

    fclose(file);

    // If the line doesn't exist, add it to the file
    if(!exists) {
        file = fopen(filename, "a");
        fprintf(file, "%s", line_content);
        fclose(file);
    }
}
```

C++ Code:

```cpp
#include <fstream>
#include <iostream>
#include <string>

void write_unique_line_to_file(std::string filename, std::string line_content) {
    std::ifstream file(filename);
    std::string buffer;
    bool exists = false;

    // Check if the line already exists in the file
    while(getline(file, buffer)) {
        if(buffer == line_content) {
            exists = true;
            break;
        }
    }

    file.close();

    // If the line doesn't exist, add it to the file
    if(!exists) {
        std::ofstream outFile(filename, std::ios_base::app);
        outFile << line_content << std::endl;
        outFile.close();
    }
}
```
These codes open the specified file for reading and check if the line already exists in the file. If it does not exist, they then open the file again in append mode and write the new line to the end of the file. Note that these examples assume that lines in the file do not contain newline characters other than at the end of the line. Also, be aware that error handling has been omitted for brevity; in a production environment, you should always handle errors properly.