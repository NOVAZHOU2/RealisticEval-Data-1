Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <fstream>
#include <string>
#include <iostream>

// Function to write a unique line to a file
void writeUniqueLineToFile(const std::string& filename, const std::string& lineContent) {
    // Check if the lineContent already exists in the file
    std::ifstream file(filename);
    if (file.is_open()) {
        std::string existingLine;
        while (getline(file, existingLine)) {
            if (existingLine == lineContent) {
                std::cout << "Line '" << lineContent << "' already exists in '" << filename << "'. Not writing again." << std::endl;
                file.close();
                return;
            }
        }
        file.close();
    } else {
        std::cerr << "Unable to open file: " << filename << std::endl;
        return;
    }

    // If lineContent is not found, append it to the file
    std::ofstream outFile(filename, std::ios_base::app); // Open file in append mode
    if (outFile.is_open()) {
        outFile << lineContent << '\n';
        outFile.close();
        std::cout << "Line '" << lineContent << "' successfully written to '" << filename << "'." << std::endl;
    } else {
        std::cerr << "Unable to open file: " << filename << std::endl;
    }
}

TEST_CASE("TestWriteUniqueLineToFile", "[writeUniqueLineToFile]") {
    const std::string filename = "test_file.txt";

    SECTION("Setup: Create a temporary file for testing") {
        std::ofstream file(filename);
        REQUIRE(file.is_open());
        file.close();
    }

    SECTION("Test case 1: Writing a new line to an empty file") {
        const std::string lineContent = "First unique line.";
        writeUniqueLineToFile(filename, lineContent);

        std::ifstream file(filename);
        REQUIRE(file.is_open());

        std::string fileContent((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
        REQUIRE(fileContent.find(lineContent) != std::string::npos);
    }

    SECTION("Test case 2: Attempting to write a duplicate line") {
        const std::string lineContent = "First unique line.";
        writeUniqueLineToFile(filename, lineContent);
        writeUniqueLineToFile(filename, lineContent);

        std::ifstream file(filename);
        REQUIRE(file.is_open());

        std::string fileContent((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
        REQUIRE(std::count(fileContent.begin(), fileContent.end(), '\n') == 1);
        REQUIRE(fileContent.find(lineContent) != std::string::npos);
    }

    SECTION("Test case 3: Writing multiple unique lines") {
        const std::vector<std::string> lines = {"First unique line.", "Second unique line.", "Third unique line."};
        for (const auto& line : lines) {
            writeUniqueLineToFile(filename, line);
        }

        std::ifstream file(filename);
        REQUIRE(file.is_open());

        std::string fileContent((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
        for (const auto& line : lines) {
            REQUIRE(fileContent.find(line) != std::string::npos);
        }
    }

    SECTION("Test case 4: Writing an empty line, should not write") {
        const std::string lineContent = "";
        writeUniqueLineToFile(filename, lineContent);

        std::ifstream file(filename);
        REQUIRE(file.is_open());

        std::string fileContent((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
        REQUIRE(fileContent.empty());
    }
}

int main(int argc, char* argv[]) {
    // Run all tests with Catch2
    int result = Catch::Session().run(argc, argv);
    return result;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<catch2/catch_test_macros.hpp>`, `<fstream>`, `<string>`, `<iostream>`) are included to handle file operations, string manipulations, and assertions.
2. **Function Definition**: The `writeUniqueLineToFile` function is defined to write a unique line to a file.
3. **Test Class**: The `TEST_CASE` macro is used to define the test suite, and `SECTION` macros are used to define individual test cases.
4. **Setup**: A temporary file is created for testing purposes.
5. **Test Cases**:
   - **Writing a new line to an empty file**: Checks if the line is written to the file.
   - **Writing a duplicate line**: Ensures that the line is written only once.
   - **Writing multiple unique lines**: Verifies that all unique lines are written to the file.
   - **Writing an empty line**: Ensures that an empty line is not written to the file.
6. **Assertions**: Catch2 assertions (`REQUIRE`) are used to verify the expected behavior.
7. **Main Function**: The `main` function runs all tests with Catch2.

This conversion ensures that the functionality and logic of the tests are preserved while adhering to C++ syntax and the Catch2 testing framework.