To convert your Python unittest test class to a C++ test case using Catch2, you'll need to follow these steps:

1. Install Catch2: If you haven't already, install Catch2 in your project. You can download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2).

2. Create a new C++ test file and include the necessary headers.
3. Write the equivalent test cases in C++ using Catch2 syntax.

Here's how you can translate your Python unittest test class to a C++ test case using Catch2:

```cpp
#include <catch2/catch.hpp>
#include <fstream>
#include <string>

void write_unique_line_to_file(const std::string& filename, const std::string& line_content) {
    // Implementation remains the same as provided in the question
}

TEST_CASE("write_unique_line_to_file", "[file][unique]") {
    // Test case 1: Writing a unique line
    std::string filename = "test_file.txt";
    std::string line_content = "This is a unique line.";

    // Clear the file before each test
    std::ofstream ofs(filename);
    ofs.close();

    // Call the function under test
    write_unique_line_to_file(filename, line_content);

    // Verify that the line was written
    std::ifstream ifs(filename);
    REQUIRE(ifs.is_open());
    std::string read_line;
    std::getline(ifs, read_line);
    REQUIRE(read_line == line_content);
    ifs.close();

    // Test case 2: Trying to write an existing line
    line_content = "This is a duplicate line.";
    write_unique_line_to_file(filename, line_content); // This should do nothing

    // Verify that the file still contains only one line
    ifs.open(filename);
    REQUIRE(ifs.is_open());
    std::getline(ifs, read_line);
    REQUIRE(read_line == line_content);
    ifs.close();
}
```

### Explanation:

1. **Include Headers**: We include the `catch.hpp` header which provides all the necessary macros for writing tests with Catch2.
2. **Function Definition**: The `write_unique_line_to_file` function is defined similarly to your original Python function.
3. **Test Case**: We define a test case using the `TEST_CASE` macro provided by Catch2. Each test case has a description and a tag (`[file][unique]`).
4. **File Operations**: Inside the test case, we open and close the file multiple times to ensure the file operations work correctly.
5. **Assertions**: We use `REQUIRE` to assert conditions that must be true for the test to pass. If any assertion fails, the test will fail.

Make sure to compile your C++ code with the Catch2 library linked. For example, if you're using g++, you might compile like this:

```sh
g++ -std=c++17 -o test_write_unique_line_to_file test_write_unique_line_to_file.cpp -lcatch2_main
```

Then run the executable:

```sh
./test_write_unique_line_to_file
```

This will execute your test cases using Catch2.