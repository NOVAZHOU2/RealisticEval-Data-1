Certainly! Here is the equivalent C++ code for the provided Python function, including appropriate comments and documentation:

```cpp
#include <iostream>
#include <fstream>
#include <string>

/**
 * Writes a line to a text file only if the line with the same content does not already exist.
 *
 * @param filename The name of the file to write to.
 * @param lineContent The content of the line to write.
 */
void writeUniqueLineToFile(const std::string& filename, const std::string& lineContent) {
    // Check if the lineContent already exists in the file
    std::ifstream file(filename);
    if (file.is_open()) {
        std::string existingLine;
        while (getline(file, existingLine)) {
            if (existingLine == lineContent) {
                std::cout << "Line '" << lineContent << "' already exists in '" << filename << "'. Not writing again." << std::endl;
                file.close();
                return;
            }
        }
        file.close();
    } else {
        std::cerr << "Unable to open file: " << filename << std::endl;
        return;
    }

    // If lineContent is not found, append it to the file
    std::ofstream outFile(filename, std::ios_base::app); // Open file in append mode
    if (outFile.is_open()) {
        outFile << lineContent << '\n';
        outFile.close();
        std::cout << "Line '" << lineContent << "' successfully written to '" << filename << "'." << std::endl;
    } else {
        std::cerr << "Unable to open file: " << filename << std::endl;
    }
}

int main() {
    // Example usage
    writeUniqueLineToFile("example.txt", "This is a test line.");
    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<iostream>`, `<fstream>`, `<string>`) are included to handle file operations and string manipulations.
2. **Function Definition**: The `writeUniqueLineToFile` function takes two parameters: `filename` and `lineContent`.
3. **Documentation**: The Python docstring is converted into a C++ style comment block using `/** */`.
4. **Single-Line Comments**: Single-line comments are used appropriately within the function.
5. **File Reading**: The function first checks if the specified file can be opened for reading. If it can, it reads each line and checks if the `lineContent` already exists in the file.
6. **File Writing**: If the `lineContent` does not exist, the function appends it to the file.
7. **Error Handling**: Proper error handling is included to manage cases where the file cannot be opened or read.
8. **Main Function**: An example usage of the function is provided in the `main` function.

This conversion preserves the original purpose and structure of the Python code while adhering to C++ syntax and documentation standards.