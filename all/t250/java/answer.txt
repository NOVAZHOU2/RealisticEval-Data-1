Here is your Python code translated into Java:

```java
import java.util.*;

public class Answer {
    public static Map<Object, List<Object>> invertDictionary(Map<Object, Object> originalDict) {
        Map<Object, List<Object>> invertedDict = new HashMap<>();

        for (Map.Entry<Object, Object> entry : originalDict.entrySet()) {
            Object key = entry.getKey();
            Object value = entry.getValue();

            if (!invertedDict.containsKey(value)) {
                invertedDict.put(value, new ArrayList<>());
            }

            invertedDict.get(value).add(key);
        }

        return invertedDict;
    }
}
```

This Java code does exactly the same thing as your Python code. It creates a new `HashMap` where it stores the inverted key-value pairs. If a value already exists in the `HashMap`, it adds the corresponding key to its list. 

Please note that Java doesn't support dynamic typing like Python, so you need to specify the type of keys and values when defining the method parameters and return type. In this case, I used `Object` as the generic type for both keys and values, which means you can use any type. But remember, this could lead to runtime errors if you try to perform operations on keys or values that don't match their expected types.