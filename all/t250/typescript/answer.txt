Sure! Hereâ€™s the equivalent TypeScript code, ensuring that the functionality, structure, and logic remain consistent:

```typescript
function invertDictionary(originalDict: Record<string, string | string[]>): Record<string, string | string[]> {
    const newDict: Record<string, string | string[]> = {};
    for (const key in originalDict) {
        if (originalDict.hasOwnProperty(key)) {
            const value = originalDict[key];
            if (!(value in newDict)) {
                newDict[value] = key;
            } else {
                // If the value already exists as a key, we need to append to or create a list
                if (!Array.isArray(newDict[value])) {
                    newDict[value] = [newDict[value]];
                }
                (newDict[value] as string[]).push(key);
            }
        }
    }
    return newDict;
}
```

### Explanation:
1. **Type Definitions**:
   - `Record<string, string | string[]>` is used to define the type of the dictionaries. This ensures that the keys are strings and the values can either be a single string or an array of strings.

2. **Looping Through Dictionary**:
   - The `for...in` loop is used to iterate over the keys of the dictionary. The `hasOwnProperty` method is used to ensure that only own properties (not inherited ones) are processed.

3. **Handling Values**:
   - When a value is encountered for the first time, it is directly assigned to the corresponding key in `newDict`.
   - If the value already exists as a key in `newDict`, the code checks if the existing value is an array. If not, it converts the existing value into an array and appends the new key. If it is already an array, it simply appends the new key.

This TypeScript function maintains the same logic and functionality as the Python function, adapting it to TypeScript's static type system and idiomatic practices.