Certainly! Hereâ€™s the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Inverts the keys and values in a dictionary. If multiple keys have the same value,
 * the new dictionary's values will be a list of these keys.
 * 
 * @param originalDict - The dictionary to invert.
 * @returns A new dictionary with values and keys inverted.
 */
function invertDictionary(originalDict: Record<string, string | string[]>): Record<string, string | string[]> {
    const newDict: Record<string, string | string[]> = {};
    for (const key in originalDict) {
        if (originalDict.hasOwnProperty(key)) {
            const value = originalDict[key];
            if (!(value in newDict)) {
                newDict[value] = key;
            } else {
                // If the value already exists as a key, we need to append to or create a list
                if (!Array.isArray(newDict[value])) {
                    newDict[value] = [newDict[value]];
                }
                (newDict[value] as string[]).push(key);
            }
        }
    }
    return newDict;
}
```

### Explanation:
1. **Type Annotations**:
   - `Record<string, string | string[]>` is used to define the type of the dictionaries. This ensures that the keys are strings and the values can either be a single string or an array of strings.

2. **JSDoc Documentation Comments**:
   - The JSDoc-style comments are added to provide clear documentation for the function, including parameter and return types.

3. **Function Implementation**:
   - The function `invertDictionary` is defined with the appropriate type annotations.
   - The `for...in` loop iterates over the keys of the dictionary, and `hasOwnProperty` is used to ensure that only own properties are processed.
   - The logic for inverting the dictionary is preserved, including handling cases where multiple keys have the same value.

This TypeScript code maintains the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices for documentation.