Sure, here is the equivalent TypeScript code signature with comments:

```typescript
/**
 * Invert the keys and values in an object. If multiple keys have the same value,
 * the new object's values will be an array of these keys.
 * @param originalObject - The object to invert.
 * @returns A new object with values and keys inverted.
 */
function invertDictionary<T extends Record<string, any>>(originalObject: T): { [K in keyof T]: K[] } {
    // Function implementation goes here
}
```

In this TypeScript version:
- `T extends Record<string, any>` ensures that `originalObject` is an object where all keys are strings and all values can be any type.
- `{ [K in keyof T]: K[] }` defines the return type as an object where each key is a value from the original object, and its corresponding value is an array of keys from the original object that had that value.