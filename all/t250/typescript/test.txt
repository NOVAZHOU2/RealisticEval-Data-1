Sure! Below is the equivalent TypeScript test case using Jest for the given Python `unittest` test class:

```typescript
import { describe, it, expect } from '@jest/globals';

function invertDictionary(originalDict: Record<string, any>): Record<any, string[]> {
    const invertedDict: Record<any, string[]> = {};

    for (const [key, value] of Object.entries(originalDict)) {
        if (!invertedDict[value]) {
            invertedDict[value] = [];
        }
        invertedDict[value].push(key);
    }

    return invertedDict;
}

describe('invertDictionary', () => {
    it('should invert a simple dictionary', () => {
        const input = { a: 1, b: 2 };
        const expectedOutput = { 1: ['a'], 2: ['b'] };
        expect(invertDictionary(input)).toEqual(expectedOutput);
    });

    it('should handle multiple keys with the same value', () => {
        const input = { a: 1, b: 1, c: 2 };
        const expectedOutput = { 1: ['a', 'b'], 2: ['c'] };
        expect(invertDictionary(input)).toEqual(expectedOutput);
    });

    it('should handle empty dictionary', () => {
        const input = {};
        const expectedOutput = {};
        expect(invertDictionary(input)).toEqual(expectedOutput);
    });
});
```

### Explanation:
1. **Function Definition**: The `invertDictionary` function is defined to take an object (`Record<string, any>`) and return another object where the keys and values are swapped. If multiple keys have the same value, the corresponding value in the new dictionary is an array of those keys.

2. **Jest Test Suite**:
   - We use `describe` to group related tests.
   - Each `it` block represents a single test case.
   - We use `expect` along with `toEqual` to assert that the output of `invertDictionary` matches the expected result.

This TypeScript code should work similarly to your Python `unittest` test class, ensuring that the `invertDictionary` function behaves as expected under different conditions.