Certainly! Hereâ€™s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included:

```typescript
import { invertDictionary } from './path-to-invert-dictionary'; // Import the invertDictionary function

describe('TestInvertDictionary', () => {
    it('test_normal_dictionary', () => {
        /** Test inversion of a dictionary without duplicate values. */
        const originalDict = { 'a': 1, 'b': 2, 'c': 3 };
        const expected = { 1: 'a', 2: 'b', 3: 'c' };
        const result = invertDictionary(originalDict);
        expect(result).toEqual(expected);
    });

    it('test_dictionary_with_duplicates', () => {
        /** Test inversion of a dictionary with duplicate values. */
        const originalDict = { 'a': 1, 'b': 1, 'c': 2 };
        const expected = { 1: ['a', 'b'], 2: 'c' };
        const result = invertDictionary(originalDict);
        expect(result).toEqual(expected);
    });

    it('test_empty_dictionary', () => {
        /** Test inversion of an empty dictionary. */
        const originalDict = {};
        const expected = {};
        const result = invertDictionary(originalDict);
        expect(result).toEqual(expected);
    });

    it('test_non_string_keys', () => {
        /** Test inversion of a dictionary with non-string keys. */
        const originalDict = { 1: 'apple', 2: 'banana', 3: 'apple' };
        const expected = { 'apple': [1, 3], 'banana': 2 };
        const result = invertDictionary(originalDict);
        expect(result).toEqual(expected);
    });

    it('test_mixed_types', () => {
        /** Test inversion of a dictionary with mixed key and value types. */
        const originalDict = { 'a': 1, 2: 'two', 'three': 3 };
        const expected = { 1: 'a', 'two': 2, 3: 'three' };
        const result = invertDictionary(originalDict);
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `invertDictionary` function is imported from the appropriate module or file.

2. **Jest Testing Framework**:
   - The `describe` block is used to group the tests under a common description.
   - Each test case is defined using the `it` function, which takes a description and a test function.

3. **Test Cases**:
   - Each test case sets up the input (`originalDict`) and the expected output (`expected`).
   - The `invertDictionary` function is called with the input, and the result is compared with the expected output using `expect(result).toEqual(expected)`.

4. **Documentation Comments**:
   - Each test case includes a JSDoc-style comment to describe the purpose of the test.

5. **Type Annotations**:
   - The types of the dictionaries are inferred based on the provided data. For example, `{ 'a': 1, 'b': 2, 'c': 3 }` is inferred as `{ [key: string]: number }`.

This TypeScript code preserves the original functionality and logic of the Python unittests while adapting them to Jest's syntax and conventions.