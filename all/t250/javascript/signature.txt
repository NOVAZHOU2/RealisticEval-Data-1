Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Invert the keys and values in an object. If multiple keys have the same value,
 * the new object's values will be an array of these keys.
 * 
 * @param {Object} originalDict - The object to invert.
 * @returns {Object} A new object with values and keys inverted.
 */
function invertDictionary(originalDict) {
    const newDict = {};
    for (const [key, value] of Object.entries(originalDict)) {
        if (!newDict.hasOwnProperty(value)) {
            newDict[value] = key;
        } else {
            // If the value already exists as a key, we need to append to or create an array
            if (!Array.isArray(newDict[value])) {
                newDict[value] = [newDict[value]];
            }
            newDict[value].push(key);
        }
    }
    return newDict;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block is placed above the function definition.
   - The description of the function is included within the JSDoc comment.
   - The `@param` tag is used to document the parameter `originalDict`.
   - The `@returns` tag is used to document the return value of the function.

2. **Function Definition**:
   - The function `invertDictionary` is defined with the parameter `originalDict`.

3. **Implementation**:
   - The function body remains the same as previously provided, ensuring the logic and structure are preserved.

Here is the complete JSDoc-formatted JavaScript code:

```javascript
/**
 * Invert the keys and values in an object. If multiple keys have the same value,
 * the new object's values will be an array of these keys.
 * 
 * @param {Object} originalDict - The object to invert.
 * @returns {Object} A new object with values and keys inverted.
 */
function invertDictionary(originalDict) {
    const newDict = {};
    for (const [key, value] of Object.entries(originalDict)) {
        if (!newDict.hasOwnProperty(value)) {
            newDict[value] = key;
        } else {
            // If the value already exists as a key, we need to append to or create an array
            if (!Array.isArray(newDict[value])) {
                newDict[value] = [newDict[value]];
            }
            newDict[value].push(key);
        }
    }
    return newDict;
}
```

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JSDoc documentation standards.