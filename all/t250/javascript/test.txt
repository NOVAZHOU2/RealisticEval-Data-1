Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Unittest Code

```python
import unittest

class TestInvertDictionary(unittest.TestCase):

    def test_normal_dictionary(self):
        """Test inversion of a dictionary without duplicate values."""
        original_dict = {'a': 1, 'b': 2, 'c': 3}
        expected = {1: 'a', 2: 'b', 3: 'c'}
        result = invert_dictionary(original_dict)
        self.assertEqual(result, expected)

    def test_dictionary_with_duplicates(self):
        """Test inversion of a dictionary with duplicate values."""
        original_dict = {'a': 1, 'b': 1, 'c': 2}
        expected = {1: ['a', 'b'], 2: 'c'}
        result = invert_dictionary(original_dict)
        self.assertEqual(result, expected)

    def test_empty_dictionary(self):
        """Test inversion of an empty dictionary."""
        original_dict = {}
        expected = {}
        result = invert_dictionary(original_dict)
        self.assertEqual(result, expected)

    def test_non_string_keys(self):
        """Test inversion of a dictionary with non-string keys."""
        original_dict = {1: 'apple', 2: 'banana', 3: 'apple'}
        expected = {'apple': [1, 3], 'banana': 2}
        result = invert_dictionary(original_dict)
        self.assertEqual(result, expected)

    def test_mixed_types(self):
        """Test inversion of a dictionary with mixed key and value types."""
        original_dict = {'a': 1, 2: 'two', 'three': 3}
        expected = {1: 'a', 'two': 2, 3: 'three'}
        result = invert_dictionary(original_dict)
        self.assertEqual(result, expected)
```

### Equivalent Jest Test Suite

```javascript
// Import the invertDictionary function
const invertDictionary = require('./invertDictionary');

describe('TestInvertDictionary', () => {
    describe('test_normal_dictionary', () => {
        it('should correctly invert a dictionary without duplicate values', () => {
            const originalDict = {'a': 1, 'b': 2, 'c': 3};
            const expected = {1: 'a', 2: 'b', 3: 'c'};
            const result = invertDictionary(originalDict);
            expect(result).toEqual(expected);
        });
    });

    describe('test_dictionary_with_duplicates', () => {
        it('should correctly invert a dictionary with duplicate values', () => {
            const originalDict = {'a': 1, 'b': 1, 'c': 2};
            const expected = {1: ['a', 'b'], 2: 'c'};
            const result = invertDictionary(originalDict);
            expect(result).toEqual(expected);
        });
    });

    describe('test_empty_dictionary', () => {
        it('should correctly invert an empty dictionary', () => {
            const originalDict = {};
            const expected = {};
            const result = invertDictionary(originalDict);
            expect(result).toEqual(expected);
        });
    });

    describe('test_non_string_keys', () => {
        it('should correctly invert a dictionary with non-string keys', () => {
            const originalDict = {1: 'apple', 2: 'banana', 3: 'apple'};
            const expected = {'apple': [1, 3], 'banana': 2};
            const result = invertDictionary(originalDict);
            expect(result).toEqual(expected);
        });
    });

    describe('test_mixed_types', () => {
        it('should correctly invert a dictionary with mixed key and value types', () => {
            const originalDict = {'a': 1, 2: 'two', 'three': 3};
            const expected = {1: 'a', 'two': 2, 3: 'three'};
            const result = invertDictionary(originalDict);
            expect(result).toEqual(expected);
        });
    });
});
```

### Explanation:
1. **Import Statement**:
   - The `invertDictionary` function is imported at the beginning of the test file.

2. **Describe Blocks**:
   - Each test case is wrapped in a `describe` block to provide a clear structure and grouping of related tests.

3. **It Blocks**:
   - Each test case is defined using the `it` block, which includes a descriptive message and the actual test logic.

4. **Assertions**:
   - The `expect` function is used with `toEqual` to compare the expected and actual results, similar to `self.assertEqual` in Python.

5. **Data Structures**:
   - The data structures (dictionaries/objects) are represented using JavaScript object notation.

This Jest test suite ensures that the functionality and logic of the original Python unittest class are preserved while adhering to Jest's syntax and conventions.