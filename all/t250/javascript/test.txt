Certainly! Below is an equivalent JavaScript test case using Jest for the provided Python `invert_dictionary` function:

```javascript
const { invertDictionary } = require('./path-to-your-invert-dictionary-function'); // Adjust the path accordingly

describe('invertDictionary', () => {
  it('inverts a simple dictionary', () => {
    const input = { 'a': 1, 'b': 2 };
    const expectedOutput = { '1': ['a'], '2': ['b'] };
    expect(invertDictionary(input)).toEqual(expectedOutput);
  });

  it('handles dictionaries with duplicate values', () => {
    const input = { 'a': 1, 'b': 1, 'c': 2 };
    const expectedOutput = { '1': ['a', 'b'], '2': ['c'] };
    expect(invertDictionary(input)).toEqual(expectedOutput);
  });

  it('returns an empty dictionary for an empty input dictionary', () => {
    const input = {};
    const expectedOutput = {};
    expect(invertDictionary(input)).toEqual(expectedOutput);
  });
});
```

### Explanation:
- **`describe`**: Groups related tests together.
- **`it`**: Defines a single test case.
- **`expect`**: Asserts that the result of the function matches the expected output.
- **`toEqual`**: Compares the two objects deeply.

Make sure to adjust the import statement (`require('./path-to-your-invert-dictionary-function')`) to point to the correct location where your `invertDictionary` function is defined.