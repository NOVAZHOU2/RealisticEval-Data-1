Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a set of Catch2 test cases, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <unordered_map>
#include <vector>
#include <string>

// Function to invert the keys and values in a dictionary.
// If multiple keys have the same value, the new dictionary's values will be a list of these keys.
std::unordered_map<std::string, std::vector<std::string>> invertDictionary(
    const std::unordered_map<std::string, std::string>& originalDict) {

    std::unordered_map<std::string, std::vector<std::string>> newDict;
    for (const auto& pair : originalDict) {
        const std::string& key = pair.first;
        const std::string& value = pair.second;

        // Add the key to the vector associated with the value
        newDict[value].push_back(key);
    }
    return newDict;
}

TEST_CASE("Test inversion of a dictionary without duplicate values") {
    std::unordered_map<std::string, std::string> originalDict = {{"a", "1"}, {"b", "2"}, {"c", "3"}};
    std::unordered_map<std::string, std::string> expected = {{"1", "a"}, {"2", "b"}, {"3", "c"}};
    auto result = invertDictionary(originalDict);

    REQUIRE(result == expected);
}

TEST_CASE("Test inversion of a dictionary with duplicate values") {
    std::unordered_map<std::string, std::string> originalDict = {{"a", "1"}, {"b", "1"}, {"c", "2"}};
    std::unordered_map<std::string, std::vector<std::string>> expected = {{"1", {"a", "b"}}, {"2", {"c"}}};
    auto result = invertDictionary(originalDict);

    REQUIRE(result == expected);
}

TEST_CASE("Test inversion of an empty dictionary") {
    std::unordered_map<std::string, std::string> originalDict = {};
    std::unordered_map<std::string, std::vector<std::string>> expected = {};
    auto result = invertDictionary(originalDict);

    REQUIRE(result == expected);
}

TEST_CASE("Test inversion of a dictionary with non-string keys") {
    // Note: In C++, all keys and values are strings for simplicity.
    std::unordered_map<std::string, std::string> originalDict = {{"1", "apple"}, {"2", "banana"}, {"3", "apple"}};
    std::unordered_map<std::string, std::vector<std::string>> expected = {{"apple", {"1", "3"}}, {"banana", {"2"}}};
    auto result = invertDictionary(originalDict);

    REQUIRE(result == expected);
}

TEST_CASE("Test inversion of a dictionary with mixed key and value types") {
    // Note: In C++, all keys and values are strings for simplicity.
    std::unordered_map<std::string, std::string> originalDict = {{"a", "1"}, {"2", "two"}, {"three", "3"}};
    std::unordered_map<std::string, std::vector<std::string>> expected = {{"1", {"a"}}, {"two", {"2"}}, {"3", {"three"}}};
    auto result = invertDictionary(originalDict);

    REQUIRE(result == expected);
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<catch2/catch_test_macros.hpp>`, `<unordered_map>`, `<vector>`, `<string>`) are included at the beginning.
2. **Function Documentation**: The function `invertDictionary` is documented using comments.
3. **Function Signature**: The function `invertDictionary` is defined with the appropriate C++ types. It takes a `std::unordered_map<std::string, std::string>` as input and returns a `std::unordered_map<std::string, std::vector<std::string>>`.
4. **Catch2 Test Cases**: Each test case is defined using the `TEST_CASE` macro provided by Catch2. The test cases mirror the functionality and logic of the Python unittest cases.
5. **Assertions**: The `REQUIRE` macro is used to assert the equality of the results with the expected outcomes.
6. **Main Function**: The `main` function initializes and runs the Catch2 test suite.

This C++ code preserves the original purpose and structure of the Python unittest class while adapting it to the syntax and conventions of the Catch2 testing framework.