Sure! Below is an example of how you can convert the given Python `unittest` test class to a C++ test case using Catch2:

```cpp
#include <catch2/catch.hpp>
#include <unordered_map>
#include <vector>

// Function to invert the keys and values in a dictionary
std::unordered_map<int, std::vector<int>> invertDictionary(const std::unordered_map<int, int>& originalDict) {
    std::unordered_map<int, std::vector<int>> invertedDict;
    for (const auto& pair : originalDict) {
        invertedDict[pair.second].push_back(pair.first);
    }
    return invertedDict;
}

TEST_CASE("Invert Dictionary", "[invertDictionary]") {
    // Test case 1
    std::unordered_map<int, int> dict1 = {{1, 2}, {3, 4}};
    std::unordered_map<int, std::vector<int>> expected1 = {{2, {1}}, {4, {3}}};
    REQUIRE(invertDictionary(dict1) == expected1);

    // Test case 2
    std::unordered_map<int, int> dict2 = {{5, 6}, {7, 8}, {9, 6}};
    std::unordered_map<int, std::vector<int>> expected2 = {{6, {5, 9}}, {8, {7}}};
    REQUIRE(invertDictionary(dict2) == expected2);

    // Test case 3
    std::unordered_map<int, int> dict3 = {};
    std::unordered_map<int, std::vector<int>> expected3 = {};
    REQUIRE(invertDictionary(dict3) == expected3);
}
```

### Explanation:
1. **Function Definition**: The `invertDictionary` function takes an `unordered_map<int, int>` as input and returns an `unordered_map<int, vector<int>>`.
2. **Catch2 Test Case**:
   - `TEST_CASE` macro defines a test case named "Invert Dictionary".
   - Inside the test case, we define several test cases (`dict1`, `dict2`, `dict3`) with their respective expected results (`expected1`, `expected2`, `expected3`).
   - We use the `REQUIRE` macro to check if the output of `invertDictionary` matches the expected result.

To run this test case, you need to have Catch2 installed and properly set up in your project. You can then compile and execute the test using your preferred build system or IDE.