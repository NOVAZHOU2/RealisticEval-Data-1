Certainly! Below is the equivalent C++ code for the given Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>
#include <string>

// Function to invert the keys and values in a dictionary.
// If multiple keys have the same value, the new dictionary's values will be a list of these keys.
// Args:
//     original_dict: The dictionary to invert.
// Returns:
//     A new dictionary with values and keys inverted.
std::unordered_map<std::string, std::vector<std::string>> invertDictionary(
    const std::unordered_map<std::string, std::string>& originalDict) {

    std::unordered_map<std::string, std::vector<std::string>> newDict;
    for (const auto& pair : originalDict) {
        const std::string& key = pair.first;
        const std::string& value = pair.second;

        // Add the key to the vector associated with the value
        newDict[value].push_back(key);
    }
    return newDict;
}

int main() {
    // Example usage
    std::unordered_map<std::string, std::string> originalDict = {{"a", "1"}, {"b", "2"}, {"c", "1"}, {"d", "3"}};
    auto invertedDict = invertDictionary(originalDict);

    // Print the inverted dictionary
    for (const auto& pair : invertedDict) {
        std::cout << pair.first << ": [";
        for (size_t i = 0; i < pair.second.size(); ++i) {
            std::cout << pair.second[i];
            if (i < pair.second.size() - 1) {
                std::cout << ", ";
            }
        }
        std::cout << "]" << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<iostream>`, `<unordered_map>`, `<vector>`, `<string>`) are included at the beginning.
2. **Function Documentation**: The Python docstring is translated into C++ comments using `//` for single-line comments and `/* */` for multi-line comments.
3. **Function Signature**: The function `invertDictionary` is defined with the appropriate C++ types. It takes a `std::unordered_map<std::string, std::string>` as input and returns a `std::unordered_map<std::string, std::vector<std::string>>`.
4. **Loop Through Original Dictionary**: The loop iterates over each key-value pair in the original dictionary and appends the keys to the vectors associated with the values in the new dictionary.
5. **Example Usage**: The `main` function demonstrates how to use the `invertDictionary` function and prints the resulting inverted dictionary.

This C++ code preserves the original purpose and structure of the Python code while adapting it to C++ syntax and conventions.