Here is the equivalent C++ code for the Python function you provided:

```c++
#include <iostream>
#include <unordered_map>
#include <vector>

std::unordered_map<int, std::vector<int>> invertDictionary(const std::unordered_map<int, int>& originalDict) {
    std::unordered_map<int, std::vector<int>> invertedDict;
    
    for (const auto& pair : originalDict) {
        invertedDict[pair.second].push_back(pair.first);
    }
    
    return invertedDict;
}

int main() {
    std::unordered_map<int, int> dict = {{1, 2}, {3, 4}, {5, 6}};
    auto invertedDict = invertDictionary(dict);

    for (const auto& pair : invertedDict) {
        std::cout << "Key: " << pair.first << ", Values: ";
        for (const auto& val : pair.second) {
            std::cout << val << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
```

Please note that C++ does not support dictionaries like Python, so we use `std::unordered_map` instead. Also, C++ does not support lists directly like Python, so we use `std::vector`. 

The `invertDictionary` function iterates over each key-value pair in the input map and inserts it into the output map. If a value already exists in the output map, it appends the corresponding key to the vector associated with that value.

In the `main` function, we create an example dictionary, call the `invertDictionary` function, and then print out the resulting inverted dictionary.