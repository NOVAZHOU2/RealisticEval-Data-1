Certainly! Below is the equivalent C++ code that performs the same functionality as the provided Python code. This code will invert the keys and values in a dictionary, handling cases where multiple keys map to the same value by storing those keys in a vector associated with that value.

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>
#include <string>

// Function to invert the keys and values in a dictionary
std::unordered_map<std::string, std::vector<std::string>> invertDictionary(const std::unordered_map<std::string, std::string>& originalDict) {
    std::unordered_map<std::string, std::vector<std::string>> newDict;
    for (const auto& pair : originalDict) {
        const std::string& key = pair.first;
        const std::string& value = pair.second;

        // Add the key to the vector associated with the value
        newDict[value].push_back(key);
    }
    return newDict;
}

int main() {
    // Example usage
    std::unordered_map<std::string, std::string> originalDict = {{"a", "1"}, {"b", "2"}, {"c", "1"}, {"d", "3"}};
    auto invertedDict = invertDictionary(originalDict);

    // Print the inverted dictionary
    for (const auto& pair : invertedDict) {
        std::cout << pair.first << ": [";
        for (size_t i = 0; i < pair.second.size(); ++i) {
            std::cout << pair.second[i];
            if (i < pair.second.size() - 1) {
                std::cout << ", ";
            }
        }
        std::cout << "]" << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Definition**: The function `invertDictionary` takes a `std::unordered_map<std::string, std::string>` as input and returns a `std::unordered_map<std::string, std::vector<std::string>>`. This matches the behavior of the Python function which returns a dictionary with lists as values when multiple keys map to the same value.
2. **Loop Through Original Dictionary**: The loop iterates over each key-value pair in the original dictionary.
3. **Appending Keys**: For each key-value pair, the key is appended to the vector associated with the value in the new dictionary.
4. **Example Usage**: The `main` function demonstrates how to use the `invertDictionary` function and prints the resulting inverted dictionary.

This C++ code maintains the same functionality and logic as the Python code but adapts it to the syntax and features of C++.