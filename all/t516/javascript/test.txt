Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The conversion will maintain the functionality and logic of the tests, adapting them to Jest's syntax and conventions.

### Python Code:
```python
import os
import unittest
import yaml

class TestReadYaml(unittest.TestCase):

    def setUp(self):
        """Create a temporary YAML file for testing."""
        self.valid_yaml_file = 'test_valid.yaml'
        self.invalid_yaml_file = 'test_invalid.yaml'
        self.non_existent_file = 'non_existent.yaml'

        # Valid YAML content
        with open(self.valid_yaml_file, 'w') as file:
            file.write("name: Example\nversion: 1.0\ndependencies:\n  - package1\n  - package2\n")

        # Invalid YAML content
        with open(self.invalid_yaml_file, 'w') as file:
            file.write("name: Example\nversion: 1.0\ndependencies:\n  - package1\n  - package2\ninvalid_yaml: \n - ")

    def tearDown(self):
        """Remove the temporary YAML files after testing."""
        if os.path.isfile(self.valid_yaml_file):
            os.remove(self.valid_yaml_file)
        if os.path.isfile(self.invalid_yaml_file):
            os.remove(self.invalid_yaml_file)

    def test_read_valid_yaml(self):
        """Test reading a valid YAML file."""
        expected_data = {
            'name': 'Example',
            'version': 1.0,
            'dependencies': ['package1', 'package2']
        }
        result = read_yaml(self.valid_yaml_file)
        self.assertEqual(result, expected_data)

    def test_file_not_found(self):
        """Test for FileNotFoundError when the file does not exist."""
        with self.assertRaises(FileNotFoundError):
            read_yaml(self.non_existent_file)

    def test_empty_yaml_file(self):
        """Test reading an empty YAML file."""
        empty_yaml_file = 'test_empty.yaml'
        with open(empty_yaml_file, 'w') as file:
            file.write("")  # Create an empty YAML file

        result = read_yaml(empty_yaml_file)
        self.assertIsNone(result)  # Expecting None for empty file

        os.remove(empty_yaml_file)  # Cleanup after the test
```

### Equivalent Jest Test Suite:
```javascript
const yaml = require('js-yaml');
const fs = require('fs');
const readYaml = require('./readYaml'); // Assuming readYaml is exported from another file

describe('TestReadYaml', () => {
    let validYamlFile = 'test_valid.yaml';
    let invalidYamlFile = 'test_invalid.yaml';
    let nonExistentFile = 'non_existent.yaml';

    beforeAll(() => {
        // Valid YAML content
        fs.writeFileSync(validYamlFile, `
            name: Example
            version: 1.0
            dependencies:
              - package1
              - package2
        `);

        // Invalid YAML content
        fs.writeFileSync(invalidYamlFile, `
            name: Example
            version: 1.0
            dependencies:
              - package1
              - package2
            invalid_yaml:
             -
        `);
    });

    afterAll(() => {
        if (fs.existsSync(validYamlFile)) {
            fs.unlinkSync(validYamlFile);
        }
        if (fs.existsSync(invalidYamlFile)) {
            fs.unlinkSync(invalidYamlFile);
        }
    });

    describe('test_read_valid_yaml', () => {
        it('should correctly parse a valid YAML file', () => {
            const expectedData = {
                name: 'Example',
                version: 1.0,
                dependencies: ['package1', 'package2']
            };
            const result = readYaml(validYamlFile);
            expect(result).toEqual(expectedData);
        });
    });

    describe('test_file_not_found', () => {
        it('should throw an error when the file does not exist', () => {
            expect(() => readYaml(nonExistentFile)).toThrow(/The file 'non_existent\.yaml' does not exist/);
        });
    });

    describe('test_empty_yaml_file', () => {
        let emptyYamlFile = 'test_empty.yaml';

        beforeAll(() => {
            fs.writeFileSync(emptyYamlFile, '');
        });

        afterAll(() => {
            if (fs.existsSync(emptyYamlFile)) {
                fs.unlinkSync(emptyYamlFile);
            }
        });

        it('should return null for an empty YAML file', () => {
            const result = readYaml(emptyYamlFile);
            expect(result).toBeNull();
        });
    });
});
```

### Explanation:
1. **Imports**:
   - `js-yaml` is used for parsing YAML files.
   - `fs` (File System) module is used for reading and writing files synchronously.
   - `readYaml` is assumed to be imported from another file where the `readYaml` function is defined.

2. **Setup and Teardown**:
   - `beforeAll` is used to create the temporary YAML files before running the tests.
   - `afterAll` is used to clean up the temporary YAML files after the tests.

3. **Test Cases**:
   - Each test case is wrapped in a `describe` block for better organization.
   - `it` blocks contain the actual test cases.
   - Assertions are made using Jest's `expect` function.

4. **Assertions**:
   - `expect(result).toEqual(expectedData)` checks if the parsed YAML matches the expected data.
   - `expect(() => readYaml(nonExistentFile)).toThrow` checks if the function throws an error when the file does not exist.
   - `expect(result).toBeNull()` checks if the function returns `null` for an empty YAML file.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adapting to Jest's syntax and conventions.