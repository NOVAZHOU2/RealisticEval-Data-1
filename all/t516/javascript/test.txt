Sure! Below is the equivalent JavaScript test case using Jest for your Python `read_yaml` function:

```javascript
const fs = require('fs');
const yaml = require('js-yaml');

describe('read_yaml', () => {
  const filePath = 'path/to/your/file.yaml';

  it('reads a valid YAML file and returns its content as a Python dictionary or list', async () => {
    try {
      const content = await fs.promises.readFile(filePath, 'utf8');
      const result = yaml.load(content);
      expect(result).toBeInstanceOf(Object); // Assuming the YAML content should be an object
      // Add more specific assertions based on your expected output
    } catch (error) {
      if (error instanceof yaml.YAMLException) {
        throw new Error(`YAML parsing error: ${error.message}`);
      } else if (error.code === 'ENOENT') {
        throw new Error(`File not found: ${filePath}`);
      }
    }
  });

  it('throws an error when the specified file does not exist', async () => {
    const nonExistentFilePath = 'path/to/non/existent/file.yaml';
    try {
      await fs.promises.readFile(nonExistentFilePath, 'utf8');
    } catch (error) {
      expect(error.code).toBe('ENOENT');
      expect(error.path).toBe(nonExistentFilePath);
    }
  });

  it('throws an error when there is an error parsing the YAML file', async () => {
    const invalidYamlFilePath = 'path/to/invalid/yaml/file.yaml';
    try {
      await fs.promises.readFile(invalidYamlFilePath, 'utf8');
    } catch (error) {
      expect(error instanceof yaml.YAMLException).toBe(true);
    }
  });
});
```

### Explanation:
1. **Imports**: We import `fs` for file operations and `yaml` from `js-yaml` for parsing YAML files.
2. **Test Suite**: We define a test suite using `describe`.
3. **First Test Case**: This test checks that the `read_yaml` function correctly reads a valid YAML file and returns its content as a Python dictionary or list.
4. **Second Test Case**: This test checks that the function throws an error when the specified file does not exist.
5. **Third Test Case**: This test checks that the function throws an error when there is an error parsing the YAML file.

Make sure you have `js-yaml` installed in your project. You can install it using npm:

```sh
npm install js-yaml
```

This JavaScript test case should cover similar functionality to your Python unittest test class.