Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
const yaml = require('js-yaml');
const fs = require('fs');

/**
 * Reads a YAML file and returns its content as a JavaScript object or array.
 *
 * @param {string} filePath - The path to the YAML file.
 * @returns {Object|Array} - Parsed YAML content as a JavaScript data structure.
 * @throws {Error} - If the specified file does not exist or there is an error parsing the YAML file.
 */
function readYaml(filePath) {
    // Check if the file exists
    if (!fs.existsSync(filePath)) {
        throw new Error(`The file '${filePath}' does not exist.`);
    }

    try {
        // Read the file synchronously
        const fileContent = fs.readFileSync(filePath, 'utf8');
        // Parse the YAML file content
        const data = yaml.safeLoad(fileContent);
        return data;
    } catch (error) {
        throw new Error(`Error parsing YAML file: ${error.message}`);
    }
}

module.exports = readYaml;
```

### Explanation:
1. **Importing Modules**:
   - `js-yaml` is used for parsing YAML files.
   - `fs` (File System) module is used for reading files synchronously.

2. **Function Definition**:
   - `readYaml` function takes a `filePath` argument and reads the YAML file.
   - It checks if the file exists using `fs.existsSync`.
   - It reads the file content synchronously using `fs.readFileSync`.
   - It parses the YAML content using `yaml.safeLoad`.

3. **JSDoc Comments**:
   - The JSDoc comments provide detailed information about the function's parameters, return type, and possible exceptions.
   - The `@param` tag describes the parameter `filePath`.
   - The `@returns` tag describes the return type.
   - The `@throws` tag describes the possible exceptions.

4. **Error Handling**:
   - Throws an `Error` if the file does not exist.
   - Throws an `Error` if there is an error parsing the YAML file.

5. **Exporting Function**:
   - The `readYaml` function is exported so it can be used in other modules.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JSDoc standards for documentation.