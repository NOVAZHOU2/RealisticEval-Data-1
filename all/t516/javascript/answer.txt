Sure! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
const yaml = require('js-yaml');
const fs = require('fs');

function readYaml(filePath) {
    /**
     * Reads a YAML file and returns its content as a JavaScript object or array.
     *
     * @param {string} filePath - The path to the YAML file.
     *
     * @returns {Object|Array} - Parsed YAML content as a JavaScript data structure.
     *
     * @throws {Error} - If the specified file does not exist or there is an error parsing the YAML file.
     */
    // Check if the file exists
    if (!fs.existsSync(filePath)) {
        throw new Error(`The file '${filePath}' does not exist.`);
    }

    try {
        // Read the file synchronously
        const fileContent = fs.readFileSync(filePath, 'utf8');
        // Parse the YAML file content
        const data = yaml.safeLoad(fileContent);
        return data;
    } catch (error) {
        throw new Error(`Error parsing YAML file: ${error.message}`);
    }
}

module.exports = readYaml;
```

### Explanation:
1. **Importing Modules**: 
   - `js-yaml` is used for parsing YAML files.
   - `fs` (File System) module is used for reading files synchronously.

2. **Function Definition**:
   - `readYaml` function takes a `filePath` argument and reads the YAML file.
   - It checks if the file exists using `fs.existsSync`.
   - It reads the file content synchronously using `fs.readFileSync`.
   - It parses the YAML content using `yaml.safeLoad`.

3. **Error Handling**:
   - Throws a `FileNotFoundError` if the file does not exist.
   - Throws a `YAMLError` if there is an error parsing the YAML file.

4. **Exporting Function**:
   - The `readYaml` function is exported so it can be used in other modules.

This JavaScript code should provide the same functionality as the original Python code.