Sure, I can help you convert the given Python unittest test class to a Java JUnit test case. Below is the equivalent Java code using JUnit 5:

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class Tester {

    @Mock
    private File mockFile;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testReadYaml_FileExists() throws Exception {
        // Arrange
        String filePath = "path/to/your/file.yaml";
        when(mockFile.exists()).thenReturn(true);

        // Mock the file reading behavior
        String yamlContent = "{key1: value1, key2: value2}";
        when(Files.readAllLines(Paths.get(filePath))).thenReturn(List.of(yamlContent));

        // Act
        Map<String, Object> result = readYaml(filePath);

        // Assert
        assertNotNull(result);
        assertEquals("value1", result.get("key1"));
        assertEquals("value2", result.get("key2"));
    }

    @Test
    public void testReadYaml_FileDoesNotExist() throws Exception {
        // Arrange
        String filePath = "path/to/nonexistent/file.yaml";
        when(mockFile.exists()).thenReturn(false);

        // Act & Assert
        assertThrows(FileNotFoundException.class, () -> readYaml(filePath));
    }

    @Test
    public void testReadYaml_InvalidYamlContent() throws Exception {
        // Arrange
        String filePath = "path/to/invalid/file.yaml";
        when(mockFile.exists()).thenReturn(true);

        // Mock the file reading behavior with invalid YAML content
        String yamlContent = "invalidyamlcontent";
        when(Files.readAllLines(Paths.get(filePath))).thenReturn(List.of(yamlContent));

        // Act & Assert
        assertThrows(YAMLException.class, () -> readYaml(filePath));
    }

    private Map<String, Object> readYaml(String filePath) throws Exception {
        // Your implementation of readYaml method goes here
        // For example, using SnakeYAML library to parse YAML
        return new HashMap<>();
    }
}
```

### Explanation:
1. **Imports**: Import necessary classes from JUnit 5 and Mockito for mocking.
2. **Annotations**:
   - `@Mock`: Creates a mock object for the `File` class.
   - `@BeforeEach`: Initializes mocks before each test method.
3. **Test Methods**:
   - `testReadYaml_FileExists`: Tests the scenario where the file exists and contains valid YAML content.
   - `testReadYaml_FileDoesNotExist`: Tests the scenario where the file does not exist.
   - `testReadYaml_InvalidYamlContent`: Tests the scenario where the file contains invalid YAML content.
4. **readYaml Method**: This is a placeholder for your actual implementation of the `readYaml` method. You need to integrate a YAML parser like SnakeYAML into this method.

Make sure to add the SnakeYAML dependency to your project if you plan to use it for parsing YAML files. You can add the following dependency to your `pom.xml` if you're using Maven:

```xml
<dependency>
    <groupId>org.yaml</groupId>
    <artifactId>snakeyaml</artifactId>
    <version>1.29</version>
</dependency>
```

This should give you a good starting point for converting your Python unittest test class to a Java JUnit test case.