Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The Java test class will preserve the functionality and logic of the provided Python unittest class, using appropriate JUnit annotations and assertion methods.

### Java Code

```java
package org.real.temp;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import org.yaml.snakeyaml.reader.ReaderException;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * Test class for reading YAML files.
 */
public class Tester {

    private String validYamlFile = "test_valid.yaml";
    private String invalidYamlFile = "test_invalid.yaml";
    private String nonExistentFile = "non_existent.yaml";
    private String emptyYamlFile = "test_empty.yaml";

    @BeforeEach
    public void setUp() throws IOException {
        // Valid YAML content
        try (FileWriter writer = new FileWriter(validYamlFile)) {
            writer.write("name: Example\nversion: 1.0\ndependencies:\n  - package1\n  - package2\n");
        }

        // Invalid YAML content
        try (FileWriter writer = new FileWriter(invalidYamlFile)) {
            writer.write("name: Example\nversion: 1.0\ndependencies:\n  - package1\n  - package2\ninvalid_yaml: \n - ");
        }
    }

    @AfterEach
    public void tearDown() {
        // Remove the temporary YAML files after testing
        new File(validYamlFile).delete();
        new File(invalidYamlFile).delete();
        new File(emptyYamlFile).delete();
    }

    @Test
    public void testReadValidYaml() throws IOException {
        // Test reading a valid YAML file
        Map<String, Object> expectedData = Map.of(
            "name", "Example",
            "version", 1.0,
            "dependencies", new String[]{"package1", "package2"}
        );

        Object result = readYaml(validYamlFile);
        assertEquals(expectedData, result);
    }

    @Test
    public void testFileNotFound() {
        // Test for FileNotFoundError when the file does not exist
        assertThrows(FileNotFoundException.class, () -> readYaml(nonExistentFile));
    }

    @Test
    public void testEmptyYamlFile() throws IOException {
        // Test reading an empty YAML file
        try (FileWriter writer = new FileWriter(emptyYamlFile)) {
            writer.write("");  // Create an empty YAML file
        }

        Object result = readYaml(emptyYamlFile);
        assertEquals(null, result);  // Expecting null for empty file
    }

    /**
     * Reads a YAML file and returns its content as a Java data structure.
     *
     * @param filePath The path to the YAML file.
     * @return The parsed YAML content as a Java data structure.
     * @throws FileNotFoundException If the specified file does not exist.
     * @throws ReaderException If there is an error parsing the YAML file.
     */
    private Object readYaml(String filePath) throws FileNotFoundException, ReaderException {
        File file = new File(filePath);
        if (!file.isFile()) {
            throw new FileNotFoundException("The file '" + filePath + "' does not exist.");
        }

        try (FileInputStream inputStream = new FileInputStream(file)) {
            Yaml yaml = new Yaml(new Constructor(Object.class));
            return yaml.load(inputStream);
        } catch (ReaderException e) {
            throw new ReaderException("Error parsing YAML file: " + e.getMessage());
        }
    }
}
```

### Explanation:
1. **Package Declaration**:
   - `package org.real.temp;`: Declares the package name.

2. **Imports**:
   - `org.junit.jupiter.api.AfterEach`, `org.junit.jupiter.api.BeforeEach`, `org.junit.jupiter.api.Test`: For JUnit annotations.
   - `org.yaml.snakeyaml.Yaml`, `org.yaml.snakeyaml.constructor.Constructor`, `org.yaml.snakeyaml.reader.ReaderException`: For YAML parsing.
   - `java.io.File`, `java.io.FileWriter`, `java.io.IOException`, `java.io.FileInputStream`: For file handling and input stream operations.
   - `java.util.Map`: For creating expected data maps.

3. **Class Definition**:
   - `public class Tester`: Defines the test class `Tester`.

4. **JUnit Annotations**:
   - `@BeforeEach`: Sets up the test environment before each test.
   - `@AfterEach`: Cleans up the test environment after each test.
   - `@Test`: Marks methods as test cases.

5. **Setup and Teardown Methods**:
   - `setUp`: Creates temporary YAML files for testing.
   - `tearDown`: Removes temporary YAML files after testing.

6. **Test Methods**:
   - `testReadValidYaml`: Tests reading a valid YAML file.
   - `testFileNotFound`: Tests for `FileNotFoundException` when the file does not exist.
   - `testEmptyYamlFile`: Tests reading an empty YAML file.

7. **Helper Method**:
   - `readYaml`: Reads a YAML file and returns its content as a Java data structure.

This Java code preserves the original functionality and structure of the Python unittest class, using appropriate JUnit annotations and assertion methods.