Certainly! Here is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java syntax:

```java
package org.real.temp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import org.yaml.snakeyaml.reader.ReaderException;

/**
 * A class to read and parse YAML files.
 */
public class Answer {

    /**
     * Reads a YAML file and returns its content as a Java data structure (Map or List).
     *
     * @param filePath The path to the YAML file.
     * @return The parsed YAML content as a Java data structure.
     * @throws FileNotFoundException If the specified file does not exist.
     * @throws ReaderException If there is an error parsing the YAML file.
     */
    public Object readYaml(String filePath) throws FileNotFoundException, ReaderException {
        // Check if the file exists
        File file = new File(filePath);
        if (!file.isFile()) {
            throw new FileNotFoundException("The file '" + filePath + "' does not exist.");
        }

        try (InputStream inputStream = new FileInputStream(file)) {
            Yaml yaml = new Yaml(new Constructor(Object.class));
            return yaml.load(inputStream);
        } catch (ReaderException e) {
            throw new ReaderException("Error parsing YAML file: " + e.getMessage());
        }
    }

    /**
     * Main method to demonstrate the usage of the readYaml method.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        Answer answer = new Answer();
        try {
            Object data = answer.readYaml("path/to/your/file.yaml");
            System.out.println(data);
        } catch (FileNotFoundException | ReaderException e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Package Declaration**:
   - `package org.real.temp;`: Declares the package name.

2. **Imports**:
   - `java.io.File`, `java.io.FileInputStream`, `java.io.FileNotFoundException`, `java.io.InputStream`: For file handling and input stream operations.
   - `org.yaml.snakeyaml.Yaml`, `org.yaml.snakeyaml.constructor.Constructor`, `org.yaml.snakeyaml.reader.ReaderException`: For YAML parsing.

3. **Class Definition**:
   - `public class Answer`: Defines the class `Answer`.

4. **Javadoc Comments**:
   - The method `readYaml` includes detailed Javadoc comments describing the method, parameters, return type, and exceptions.

5. **Method Definition**:
   - `public Object readYaml(String filePath) throws FileNotFoundException, ReaderException`: This method reads a YAML file and returns its content as a Java data structure (Map or List).

6. **File Existence Check**:
   - Uses `File` class to check if the file exists before attempting to read it.

7. **YAML Parsing**:
   - Uses `Yaml` class from the SnakeYAML library to parse the YAML content. The constructor is set to `Object.class` to allow for dynamic parsing into a generic data structure.

8. **Main Method**:
   - Demonstrates how to call the `readYaml` method and handles any exceptions that might occur during file reading or parsing.

This Java code preserves the original functionality and structure of the Python code, including appropriate type annotations and Javadoc comments.