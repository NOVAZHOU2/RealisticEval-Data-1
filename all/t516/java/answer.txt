Sure, here is the equivalent Java code for the provided Python script, organized within the package `org.real.temp` and the class `Answer`. This Java code will include necessary imports, exception handling, and method definitions to match the functionality of the Python code:

```java
package org.real.temp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import org.yaml.snakeyaml.reader.ReaderException;

public class Answer {

    /**
     * Reads a YAML file and returns its content as a Java Map or List.
     *
     * @param filePath The path to the YAML file.
     * @return The parsed YAML content as a Java data structure.
     * @throws FileNotFoundException If the specified file does not exist.
     * @throws ReaderException If there is an error parsing the YAML file.
     */
    public Object readYaml(String filePath) throws FileNotFoundException, ReaderException {
        // Check if the file exists
        File file = new File(filePath);
        if (!file.isFile()) {
            throw new FileNotFoundException("The file '" + filePath + "' does not exist.");
        }

        try (InputStream inputStream = new FileInputStream(file)) {
            Yaml yaml = new Yaml(new Constructor(Object.class));
            return yaml.load(inputStream);
        } catch (ReaderException e) {
            throw new ReaderException("Error parsing YAML file: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        Answer answer = new Answer();
        try {
            Object data = answer.readYaml("path/to/your/file.yaml");
            System.out.println(data);
        } catch (FileNotFoundException | ReaderException e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Imports**: 
   - `java.io.File`, `java.io.FileInputStream`, `java.io.FileNotFoundException`, `java.io.InputStream`: For file handling and input stream operations.
   - `org.yaml.snakeyaml.Yaml`, `org.yaml.snakeyaml.constructor.Constructor`, `org.yaml.snakeyaml.reader.ReaderException`: For YAML parsing.

2. **Method Definition**:
   - `readYaml(String filePath)`: This method reads a YAML file and returns its content as a Java data structure (Map or List). It throws exceptions for file not found and parsing errors.

3. **File Existence Check**:
   - Uses `File` class to check if the file exists before attempting to read it.

4. **YAML Parsing**:
   - Uses `Yaml` class from the SnakeYAML library to parse the YAML content. The constructor is set to `Object.class` to allow for dynamic parsing into a generic data structure.

5. **Main Method**:
   - Demonstrates how to call the `readYaml` method and handles any exceptions that might occur during file reading or parsing.

This Java code maintains the same functionality and error handling as the original Python script, ensuring consistency in behavior.