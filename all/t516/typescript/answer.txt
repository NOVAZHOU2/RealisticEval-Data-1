Here's how you can convert your Python function to TypeScript:

```typescript
import * as fs from 'fs';
import * as yaml from 'js-yaml';

export async function readYaml(filePath: string): Promise<any> {
    try {
        const fileContent = await fs.promises.readFile(filePath, 'utf8');
        return yaml.load(fileContent);
    } catch (error) {
        if (error.code === 'ENOENT') {
            throw new Error(`File not found: ${filePath}`);
        } else if (error instanceof yaml.YAMLException) {
            throw new Error(`Error parsing YAML file: ${error.message}`);
        } else {
            throw error;
        }
    }
}
```

In this TypeScript version of the function:

1. We're using Node.js's `fs` module for reading files asynchronously.
2. We're using the `js-yaml` library to parse the YAML content. You'll need to install it via npm (`npm install js-yaml`) before running the code.
3. The function now returns a promise that resolves with the parsed YAML content or rejects with an appropriate error message.
4. We've replaced Python's type hints with TypeScript interfaces/types. In this case, we're returning `any` because the exact type depends on the content of the YAML file.
5. We've handled both `FileNotFoundError` (which corresponds to the 'ENOENT' error in Node.js) and `yaml.YAMLError`.