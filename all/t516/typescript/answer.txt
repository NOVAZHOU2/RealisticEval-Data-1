Sure! Here is the equivalent TypeScript code for the provided Python script:

```typescript
import * as yaml from 'js-yaml';
import * as fs from 'fs';

function readYaml(filePath: string): object {
    /**
     * Reads a YAML file and returns its content as a JavaScript object.
     *
     * @param filePath - The path to the YAML file.
     * @returns Parsed YAML content as a JavaScript data structure.
     * @throws {Error} If the specified file does not exist or there is an error parsing the YAML file.
     */
    // Check if the file exists
    if (!fs.existsSync(filePath)) {
        throw new Error(`The file '${filePath}' does not exist.`);
    }

    const fileContent = fs.readFileSync(filePath, 'utf8');
    try {
        // Load the YAML file content
        const data = yaml.safeLoad(fileContent);
        return data;
    } catch (error) {
        throw new Error(`Error parsing YAML file: ${error}`);
    }
}

// Example usage
try {
    const data = readYaml('path/to/file.yaml');
    console.log(data);
} catch (error) {
    console.error(error);
}
```

### Explanation:
1. **Imports**:
   - `js-yaml` is used for parsing YAML files.
   - `fs` (Node.js File System module) is used for reading files synchronously.

2. **Function Definition**:
   - `readYaml` function takes a `filePath` parameter and returns a JavaScript object.
   - It checks if the file exists using `fs.existsSync`.
   - It reads the file synchronously using `fs.readFileSync`.
   - It parses the YAML content using `yaml.safeLoad`.

3. **Error Handling**:
   - Throws an error if the file does not exist.
   - Throws an error if there is an issue parsing the YAML file.

4. **Example Usage**:
   - Demonstrates how to call the `readYaml` function and handle any potential errors.

This TypeScript code maintains the same functionality and logic as the original Python script, while adapting to TypeScript's static type system and Node.js environment.