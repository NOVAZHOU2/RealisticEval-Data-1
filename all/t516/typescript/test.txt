Sure! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class:

```typescript
import fs from 'fs';
import * as yaml from 'js-yaml';

describe('read_yaml', () => {
  it('should read a valid YAML file and return its content as a JavaScript object', async () => {
    const filePath = './path/to/valid.yaml'; // Replace with the actual path to your valid YAML file

    try {
      const result = await readYaml(filePath);
      expect(result).toBeInstanceOf(Object); // Assuming the YAML content is an object
      // Add more specific assertions based on the expected structure of the YAML content
    } catch (error) {
      fail(`Expected no error but got ${error}`);
    }
  });

  it('should throw an error if the specified file does not exist', async () => {
    const nonExistentFilePath = './path/to/nonexistent.yaml'; // Replace with a non-existent file path

    try {
      await readYaml(nonExistentFilePath);
      fail('Expected an error but none was thrown');
    } catch (error) {
      expect(error).toBeInstanceOf(Error);
      expect(error.message).toContain('ENOENT'); // Check for the correct error message indicating file not found
    }
  });

  it('should throw an error if there is an error parsing the YAML file', async () => {
    const invalidYamlFilePath = './path/to/invalid.yaml'; // Replace with a path to an invalid YAML file

    try {
      await readYaml(invalidYamlFilePath);
      fail('Expected an error but none was thrown');
    } catch (error) {
      expect(error).toBeInstanceOf(Error);
      expect(error.message).toContain('Failed to parse YAML'); // Adjust the error message based on how you handle parsing errors
    }
  });
});

async function readYaml(filePath: string): Promise<any> {
  try {
    const fileContent = await fs.promises.readFile(filePath, 'utf8');
    return yaml.load(fileContent);
  } catch (error) {
    if (error.code === 'ENOENT') {
      throw new Error(`File not found: ${filePath}`);
    } else {
      throw new Error(`Failed to parse YAML: ${error.message}`);
    }
  }
}
```

### Explanation:
1. **Imports**: We import necessary modules (`fs` for file system operations and `yaml` from `js-yaml` for parsing YAML).
2. **Describe Block**: We create a describe block for our test suite named `read_yaml`.
3. **Test Cases**:
   - **Valid File Test**: Checks if the function reads a valid YAML file and returns its content as a JavaScript object.
   - **Non-Existent File Test**: Verifies that the function throws an error when the specified file does not exist.
   - **Invalid YAML Test**: Ensures that the function throws an error when there is an issue parsing the YAML file.
4. **Helper Function**: `readYaml` is defined to mimic the behavior of the original Python function, handling file reading and YAML parsing with appropriate error handling.

Make sure to replace placeholder paths (`./path/to/valid.yaml`, etc.) with actual file paths in your project.