Certainly! Here is the equivalent TypeScript code using Jest for testing the `readYaml` function. The provided Python unittest class will be converted into a Jest test suite, ensuring that the functionality and logic of the tests are preserved.

### TypeScript Code with Jest Testing

First, let's define the `readYaml` function in TypeScript:

```typescript
import * as yaml from 'js-yaml';
import * as fs from 'fs';

/**
 * Reads a YAML file and returns its content as a JavaScript object.
 *
 * @param filePath - The path to the YAML file.
 * @returns Parsed YAML content as a JavaScript data structure.
 * @throws {Error} If the specified file does not exist or there is an error parsing the YAML file.
 */
function readYaml(filePath: string): object {
    // Check if the file exists
    if (!fs.existsSync(filePath)) {
        throw new Error(`The file '${filePath}' does not exist.`);
    }

    const fileContent = fs.readFileSync(filePath, 'utf8');
    try {
        // Load the YAML file content
        const data = yaml.safeLoad(fileContent);
        return data;
    } catch (error) {
        throw new Error(`Error parsing YAML file: ${error}`);
    }
}

export default readYaml;
```

### Jest Test Suite

Now, let's create the Jest test suite for the `readYaml` function:

```typescript
import readYaml from './readYaml'; // Import the readYaml function
import * as fs from 'fs';

describe('TestReadYaml', () => {
    let validYamlFile: string;
    let invalidYamlFile: string;
    let nonExistentFile: string;

    beforeAll(() => {
        // Create a temporary YAML file for testing
        validYamlFile = 'test_valid.yaml';
        invalidYamlFile = 'test_invalid.yaml';
        nonExistentFile = 'non_existent.yaml';

        // Valid YAML content
        fs.writeFileSync(validYamlFile, `
            name: Example
            version: 1.0
            dependencies:
              - package1
              - package2
        `);

        // Invalid YAML content
        fs.writeFileSync(invalidYamlFile, `
            name: Example
            version: 1.0
            dependencies:
              - package1
              - package2
            invalid_yaml:
              -
        `);
    });

    afterAll(() => {
        // Remove the temporary YAML files after testing
        if (fs.existsSync(validYamlFile)) {
            fs.unlinkSync(validYamlFile);
        }
        if (fs.existsSync(invalidYamlFile)) {
            fs.unlinkSync(invalidYamlFile);
        }
    });

    it('should read a valid YAML file correctly', () => {
        const expectedData = {
            name: 'Example',
            version: 1.0,
            dependencies: ['package1', 'package2']
        };

        const result = readYaml(validYamlFile);
        expect(result).toEqual(expectedData);
    });

    it('should throw an error when the file does not exist', () => {
        expect(() => readYaml(nonExistentFile)).toThrow(/The file 'non_existent\.yaml' does not exist/);
    });

    it('should handle an empty YAML file', () => {
        const emptyYamlFile = 'test_empty.yaml';
        fs.writeFileSync(emptyYamlFile, ''); // Create an empty YAML file

        const result = readYaml(emptyYamlFile);
        expect(result).toBeNull(); // Expecting null for empty file

        fs.unlinkSync(emptyYamlFile); // Cleanup after the test
    });
});
```

### Explanation:
1. **Imports**:
   - `readYaml` is imported from the TypeScript module.
   - `fs` (Node.js File System module) is used for file operations.

2. **Test Suite Definition**:
   - `describe` block defines the test suite.
   - `beforeAll` sets up the temporary YAML files.
   - `afterAll` cleans up the temporary YAML files.

3. **Test Cases**:
   - `it('should read a valid YAML file correctly', ...)` tests reading a valid YAML file.
   - `it('should throw an error when the file does not exist', ...)` tests handling a non-existent file.
   - `it('should handle an empty YAML file', ...)` tests reading an empty YAML file.

4. **Assertions**:
   - `expect(result).toEqual(expectedData)` checks if the parsed YAML matches the expected data.
   - `expect(() => readYaml(nonExistentFile)).toThrow(/The file 'non_existent\.yaml' does not exist/)` checks if an error is thrown for a non-existent file.
   - `expect(result).toBeNull()` checks if the result is `null` for an empty file.

This TypeScript code with Jest ensures that the functionality and logic of the tests are preserved, while adapting to TypeScript's static type system and Jest's assertion methods.