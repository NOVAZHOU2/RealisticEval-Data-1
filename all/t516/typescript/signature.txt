Certainly! Here is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments:

```typescript
import * as yaml from 'js-yaml';
import * as fs from 'fs';

/**
 * Reads a YAML file and returns its content as a JavaScript object.
 *
 * @param filePath - The path to the YAML file.
 * @returns Parsed YAML content as a JavaScript data structure.
 * @throws {Error} If the specified file does not exist or there is an error parsing the YAML file.
 */
function readYaml(filePath: string): object {
    // Check if the file exists
    if (!fs.existsSync(filePath)) {
        throw new Error(`The file '${filePath}' does not exist.`);
    }

    const fileContent = fs.readFileSync(filePath, 'utf8');
    try {
        // Load the YAML file content
        const data = yaml.safeLoad(fileContent);
        return data;
    } catch (error) {
        throw new Error(`Error parsing YAML file: ${error}`);
    }
}

// Example usage
try {
    const data = readYaml('path/to/file.yaml');
    console.log(data);
} catch (error) {
    console.error(error);
}
```

### Explanation:
1. **Imports**:
   - `js-yaml` is used for parsing YAML files.
   - `fs` (Node.js File System module) is used for reading files synchronously.

2. **Function Definition**:
   - `readYaml` function takes a `filePath` parameter of type `string` and returns a JavaScript object.
   - It checks if the file exists using `fs.existsSync`.
   - It reads the file synchronously using `fs.readFileSync`.
   - It parses the YAML content using `yaml.safeLoad`.

3. **JSDoc Documentation Comments**:
   - The function is documented using JSDoc-style comments.
   - The `@param` tag describes the input parameter.
   - The `@returns` tag describes the return value.
   - The `@throws` tag describes the possible exceptions thrown by the function.

4. **Error Handling**:
   - Throws an error if the file does not exist.
   - Throws an error if there is an issue parsing the YAML file.

5. **Example Usage**:
   - Demonstrates how to call the `readYaml` function and handle any potential errors.

This TypeScript code preserves the original functionality and structure of the Python code, while adapting it to TypeScript's static type system and using appropriate JSDoc-style documentation.