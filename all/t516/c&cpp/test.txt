Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The test class will preserve the functionality and logic of the provided Python unittest class, including setup, teardown, and test cases.

### C++ Code with Catch2

```cpp
#include <catch2/catch_test_macros.hpp>
#include <fstream>
#include <yaml-cpp/yaml.h>
#include <filesystem>

namespace fs = std::filesystem;

// Function to read a YAML file and return its content as a YAML node
YAML::Node read_yaml(const std::string& file_path) {
    // Check if the file exists
    if (!fs::exists(file_path)) {
        throw std::runtime_error("The file '" + file_path + "' does not exist.");
    }

    std::ifstream file(file_path);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open the file '" + file_path + "'.");
    }

    try {
        // Load the YAML file content
        YAML::Node data = YAML::Load(file);
        return data;
    } catch (const YAML::ParserException& e) {
        throw std::runtime_error("Error parsing YAML file: " + std::string(e.what()));
    }
}

TEST_CASE("TestReadYaml", "[YAML]") {
    const std::string valid_yaml_file = "test_valid.yaml";
    const std::string invalid_yaml_file = "test_invalid.yaml";
    const std::string non_existent_file = "non_existent.yaml";
    const std::string empty_yaml_file = "test_empty.yaml";

    SECTION("setUp") {
        // Valid YAML content
        std::ofstream valid_file(valid_yaml_file);
        valid_file << "name: Example\nversion: 1.0\ndependencies:\n  - package1\n  - package2\n";
        valid_file.close();

        // Invalid YAML content
        std::ofstream invalid_file(invalid_yaml_file);
        invalid_file << "name: Example\nversion: 1.0\ndependencies:\n  - package1\n  - package2\ninvalid_yaml: \n - ";
        invalid_file.close();
    }

    SECTION("tearDown") {
        if (fs::exists(valid_yaml_file)) {
            fs::remove(valid_yaml_file);
        }
        if (fs::exists(invalid_yaml_file)) {
            fs::remove(invalid_yaml_file);
        }
        if (fs::exists(empty_yaml_file)) {
            fs::remove(empty_yaml_file);
        }
    }

    SECTION("test_read_valid_yaml") {
        // Test reading a valid YAML file
        YAML::Node expected_data = YAML::Load(
            "name: Example\n"
            "version: 1.0\n"
            "dependencies:\n"
            "  - package1\n"
            "  - package2\n"
        );

        YAML::Node result = read_yaml(valid_yaml_file);
        REQUIRE(result == expected_data);
    }

    SECTION("test_file_not_found") {
        // Test for FileNotFoundError when the file does not exist
        REQUIRE_THROWS_AS(read_yaml(non_existent_file), std::runtime_error);
    }

    SECTION("test_empty_yaml_file") {
        // Test reading an empty YAML file
        std::ofstream empty_file(empty_yaml_file);
        empty_file << "";  // Create an empty YAML file
        empty_file.close();

        YAML::Node result = read_yaml(empty_yaml_file);
        REQUIRE(result.IsNull());  // Expecting an empty node for an empty file
    }
}
```

### Explanation:
1. **Header Files**:
   - `#include <catch2/catch_test_macros.hpp>` for Catch2 testing macros.
   - `#include <fstream>` for file stream operations.
   - `#include <yaml-cpp/yaml.h>` for YAML parsing.
   - `#include <filesystem>` for filesystem operations.

2. **Function Definition**:
   - `read_yaml` function reads a YAML file and returns its content as a `YAML::Node`.
   - It checks if the file exists using `fs::exists`.
   - It opens the file using `std::ifstream`.
   - It loads the YAML content using `YAML::Load`.

3. **Test Class**:
   - `TEST_CASE` macro defines the test case.
   - `SECTION` macros define individual test sections within the test case.
   - `setUp` section creates temporary YAML files for testing.
   - `tearDown` section removes the temporary YAML files after testing.

4. **Assertions**:
   - `REQUIRE` is used for assertions.
   - `REQUIRE_THROWS_AS` is used to check for specific exception types.

5. **Test Cases**:
   - `test_read_valid_yaml`: Tests reading a valid YAML file.
   - `test_file_not_found`: Tests for a file that does not exist.
   - `test_empty_yaml_file`: Tests reading an empty YAML file.

This code preserves the original functionality and logic of the Python unittest class while adapting it to C++ and the Catch2 testing framework.