Certainly! Below is the equivalent C++ code for reading a YAML file using the `yaml-cpp` library. This code will maintain the same functionality and logic as the provided Python code:

```cpp
#include <iostream>
#include <fstream>
#include <yaml-cpp/yaml.h>
#include <filesystem>

namespace fs = std::filesystem;

// Function to read a YAML file and return its content as a YAML node
YAML::Node read_yaml(const std::string& file_path) {
    // Check if the file exists
    if (!fs::exists(file_path)) {
        throw std::runtime_error("The file '" + file_path + "' does not exist.");
    }

    std::ifstream file(file_path);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open the file '" + file_path + "'.");
    }

    try {
        // Load the YAML file content
        YAML::Node data = YAML::Load(file);
        return data;
    } catch (const YAML::ParserException& e) {
        throw std::runtime_error("Error parsing YAML file: " + std::string(e.what()));
    }
}

int main() {
    try {
        std::string file_path = "example.yaml";
        YAML::Node data = read_yaml(file_path);
        std::cout << "Parsed YAML content:\n" << data << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**: 
   - `#include <iostream>` for input/output operations.
   - `#include <fstream>` for file stream operations.
   - `#include <yaml-cpp/yaml.h>` for YAML parsing.
   - `#include <filesystem>` for filesystem operations.

2. **Namespace**: 
   - `namespace fs = std::filesystem;` to simplify filesystem operations.

3. **Function Definition**:
   - `read_yaml` function reads a YAML file and returns its content as a `YAML::Node`.
   - It checks if the file exists using `fs::exists`.
   - It opens the file using `std::ifstream`.
   - It loads the YAML content using `YAML::Load`.

4. **Error Handling**:
   - Throws exceptions for file existence and parsing errors.

5. **Main Function**:
   - Demonstrates how to call the `read_yaml` function and handle exceptions.

This code should provide the same functionality as the Python code but adapted to C++ syntax and libraries.