Hereâ€™s the equivalent test case code converted from C++ Catch2 to JavaScript Jest framework. The logic and functionality are preserved while adapting to the syntax and features of Jest.

```javascript
const Stack = require('./Stack'); // Adjust the path as needed to import your Stack class

describe('Stack Test Cases', () => {
    let stack;

    beforeEach(() => {
        stack = new Stack(10); // Provide capacity when creating the stack
    });

    // Test Case 1: Pushing and popping a single element
    test('pushing and popping a single element', () => {
        stack.push(3.14);
        expect(stack.pop()).toBeCloseTo(3.14);
        expect(stack.isEmpty()).toBe(true); // Change to isEmpty
    });

    // Test Case 2: Pushing multiple elements and checking peek
    test('pushing multiple elements and checking peek', () => {
        stack.push(1.23);
        stack.push(4.56);
        expect(stack.peek()).toBeCloseTo(4.56);
        expect(stack.pop()).toBeCloseTo(4.56);
        expect(stack.pop()).toBeCloseTo(1.23);
        expect(stack.isEmpty()).toBe(true); // Change to isEmpty
    });

    // Test Case 3: Pop from an empty stack (should throw an exception)
    test('pop from an empty stack should throw an error', () => {
        expect(() => stack.pop()).toThrow(Error);
    });

    // Test Case 4: Peek on an empty stack (should throw an exception)
    test('peek on an empty stack should throw an error', () => {
        expect(() => stack.peek()).toThrow(Error);
    });

    // Test Case 5: Push elements until stack is full and attempt to push another element
    test('push elements until stack is full and attempt to push another element', () => {
        const fullStack = new Stack(100); // Provide capacity when creating the stack
        for (let i = 0; i < 100; i++) {
            fullStack.push(i + 0.5);
        }
        expect(() => fullStack.push(100.5)).toThrow(Error);
    });
});
```

### Key Changes:
- **Importing the Stack Class**: Adjust the path to import your `Stack` class appropriately.
- **Describe and Test Blocks**: Used `describe` for grouping tests and `test` for individual test cases, aligning with Jest conventions.
- **Assertions**: 
  - Used `toBeCloseTo` for comparing floating-point numbers.
  - Used `toThrow` to assert that an error is thrown.
- **beforeEach Hook**: Initialized the stack in a `beforeEach` block to ensure a fresh instance for each test case.