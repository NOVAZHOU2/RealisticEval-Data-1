Hereâ€™s the equivalent test case code using Jest in TypeScript, ensuring that the logic and functionality remain consistent:

```typescript
import { simpsonsRule } from './path-to-your-function'; // Adjust the import path accordingly

describe("Simpson's Rule Tests", () => {

    test("Basic Integral of x^2 from 0 to 1", () => {
        // The exact integral of f(x) = x^2 from 0 to 1 is 1/3
        const result = simpsonsRule(0.0, 1.0, 10);
        expect(result).toBeCloseTo(1.0 / 3.0, 2); // 2 decimal places
    });

    test("Basic Integral of x^2 from 0 to 2", () => {
        // The exact integral of f(x) = x^2 from 0 to 2 is 8/3
        const result = simpsonsRule(0.0, 2.0, 10);
        expect(result).toBeCloseTo(8.0 / 3.0, 2); // 2 decimal places
    });

    test("Negative Integral of x^2 from -1 to 0", () => {
        // The exact integral of f(x) = x^2 from -1 to 0 is 1/3
        const result = simpsonsRule(-1.0, 0.0, 10);
        expect(result).toBeCloseTo(1.0 / 3.0, 2); // 2 decimal places
    });

    test("Large Interval", () => {
        // Test with a larger interval from 0 to 10
        const result = simpsonsRule(0.0, 10.0, 20);
        // The exact integral from 0 to 10 of f(x) = x^2 is (10^3)/3 = 1000/3
        expect(result).toBeCloseTo(1000.0 / 3.0, 2); // 2 decimal places
    });
});
```

### Notes:
- The `toBeCloseTo` matcher in Jest is used to handle floating-point comparisons, allowing for a specified number of decimal places.
- Make sure to adjust the import statement to point to the correct path of your `simpsonsRule` function.