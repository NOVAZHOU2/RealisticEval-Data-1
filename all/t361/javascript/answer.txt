Here's the translated C++ code into JavaScript, following JavaScript conventions and best practices:

```javascript
/**
 * Computes the value of the function to be integrated.
 * @param {number} x - The input value.
 * @return {number} The value of the function at x.
 */
function functionToIntegrate(x) {
    return x * x;
}

/**
 * Computes the approximate integral of a function using Simpson's Rule.
 *
 * Simpson's Rule is a method for numerical integration that approximates the integral of a function
 * over an interval by fitting parabolas. This function divides the interval [a, b] into n subintervals
 * and calculates the weighted sum of the function values at specific points.
 *
 * @param {number} a - The lower limit of integration.
 * @param {number} b - The upper limit of integration.
 * @param {number} n - The number of subintervals (must be even).
 * @return {number} The approximate value of the integral.
 * @throws {Error} If n is not positive or if it is not even.
 */
function simpsonsRule(a, b, n) {
    // Check if n is a positive even integer
    if (n <= 0 || n % 2 !== 0) {
        throw new Error("n must be a positive even integer.");
    }

    // Calculate the width of each subinterval
    const h = (b - a) / n;
    let sum = 0.0;

    // Calculate the weighted sum of the function values
    for (let idx = 0; idx <= n; ++idx) {
        const x = a + idx * h; // Calculate the x value at the current index
        const fx = functionToIntegrate(x); // Evaluate the function at x

        // Apply the Simpson's Rule weighting
        if (idx === 0 || idx === n) {
            // First and last terms (f(a) and f(b))
            sum += fx;
        } else if (idx % 2 === 1) {
            // Odd index terms (4 * f(a + b))
            sum += 4.0 * fx;
        } else {
            // Even index terms (2 * f(a + b))
            sum += 2.0 * fx;
        }
    }

    // Final calculation to obtain the integral value
    return (h / 3.0) * sum; // Simpson's Rule formula
}
```

### Key Differences and Adaptations:
1. **Function Naming**: JavaScript typically uses camelCase for function names.
2. **Error Handling**: Instead of throwing `std::invalid_argument`, JavaScript uses `Error`.
3. **Data Types**: JavaScript doesn't require explicit types (like `double` or `int` in C++), so I've omitted those.
4. **Const and Let**: I've used `const` for variables that don't change and `let` for variables that do, aligning with JavaScript's block-scoping practices.