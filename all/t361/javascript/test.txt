Hereâ€™s the equivalent test case code in JavaScript using the Jest framework:

```javascript
describe("Simpson's Rule Tests", () => {
    test("Basic Integral of x^2 from 0 to 1", () => {
        // The exact integral of f(x) = x^2 from 0 to 1 is 1/3
        const result = simpsonsRule(0.0, 1.0, 10);
        expect(result).toBeCloseTo(1.0 / 3.0, 2); // within 0.01
    });

    test("Basic Integral of x^2 from 0 to 2", () => {
        // The exact integral of f(x) = x^2 from 0 to 2 is 8/3
        const result = simpsonsRule(0.0, 2.0, 10);
        expect(result).toBeCloseTo(8.0 / 3.0, 2); // within 0.01
    });

    test("Negative Integral of x^2 from -1 to 0", () => {
        // The exact integral of f(x) = x^2 from -1 to 0 is 1/3
        const result = simpsonsRule(-1.0, 0.0, 10);
        expect(result).toBeCloseTo(1.0 / 3.0, 2); // within 0.01
    });

    test("Large Interval", () => {
        // Test with a larger interval from 0 to 10
        const result = simpsonsRule(0.0, 10.0, 20);
        // The exact integral from 0 to 10 of f(x) = x^2 is (10^3)/3 = 1000/3
        expect(result).toBeCloseTo(1000.0 / 3.0, 2); // within 0.01
    });
});
```

### Key Adjustments:
1. **Test Structure**: Used `describe` and `test` functions for structuring tests in Jest.
2. **Assertions**: Replaced `REQUIRE` with `expect` and `toBeCloseTo` for floating-point comparisons.
3. **Comments**: Retained original comments to describe test cases clearly.
4. **Precision**: Used the second argument of `toBeCloseTo` to specify the precision, similar to the epsilon in Catch2.