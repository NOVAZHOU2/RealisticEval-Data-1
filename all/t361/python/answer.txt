Here is the equivalent Python code for the provided C++ code, including the function to integrate and the implementation of Simpson's Rule for numerical integration. The conversion maintains the logic and functionality of the original code while adhering to Python's syntax and conventions.
Converted Python Code
python
class InvalidArgumentError(Exception):
    """Custom exception for invalid arguments."""
    pass

def function_to_integrate(x: float) -> float:
    """Computes the value of the function to integrate."""
    return x * x

def simpsons_rule(a: float, b: float, n: int) -> float:
    """
    Computes the approximate integral of a function using Simpson's Rule.

    Simpson's Rule is a method for numerical integration that approximates the integral of a function
    over an interval by fitting parabolas. This function divides the interval [a, b] into n subintervals
    and calculates the weighted sum of the function values at specific points.

    :param a: The lower limit of integration.
    :param b: The upper limit of integration.
    :param n: The number of subintervals (must be even).
    :return: The approximate value of the integral.

    :raises InvalidArgumentError: If n is not positive or if it is not even.
    """
    # Check if n is a positive even integer
    if n <= 0 or n % 2 != 0:
        raise InvalidArgumentError("n must be a positive even integer.")
    
    # Calculate the width of each subinterval
    h = (b - a) / n
    sum_value = 0.0
    
    # Calculate the weighted sum of the function values
    for idx in range(n + 1):  # range(n + 1) to include n
        x = a + idx * h  # Calculate the x value at the current index
        fx = function_to_integrate(x)  # Evaluate the function at x
        
        # Apply the Simpson's Rule weighting
        if idx == 0 or idx == n:  # First and last terms (f(a) and f(b))
            sum_value += fx
        elif idx % 2 == 1:  # Odd index terms (4 * f(a + b))
            sum_value += 4.0 * fx
        else:  # Even index terms (2 * f(a + b))
            sum_value += 2.0 * fx

    # Final calculation to obtain the integral value
    return (h / 3.0) * sum_value  # Simpson's Rule formula

# Example usage
if __name__ == "__main__":
    a = 0
    b = 1
    n = 10  # must be even
    integral_value = simpsons_rule(a, b, n)
    print(f"The approximate integral from {a} to {b} is: {integral_value}")
Key Changes and Notes:
Custom Exception:
A custom exception InvalidArgumentError is defined to handle invalid arguments instead of using std::invalid_argument.
Function Signature:
The function signatures now use Python's type hints for parameters and return types.
Docstrings:
The C++ comments have been converted to Python docstrings using triple quotes for better readability and adherence to Python conventions.
Loop Range:
The loop for idx in range(n + 1) is used in Python to iterate through 0 to n, inclusive.
Main Block:
An example usage block is provided to demonstrate how to call the simpsons_rule function, similar to how a main function would be structured in C++.
How to Run the Python Code:
Save the code in a file, for example, simpsons_rule.py.
Run the script using Python:
bash
python simpsons_rule.py
This will calculate the approximate integral of the function 
f(x)=x
2
 from 
a=0 to 
b=1 using 10 subintervals and print the result.