Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

/**
 * Generates the ith row of Pascal's Triangle.
 */
public class Answer {

    /**
     * Generates the ith row of Pascal's Triangle.
     *
     * @param i the row index (0-indexed)
     * @return a List representing the ith row of Pascal's Triangle
     */
    public static List<Long> pascalTriangleRow(int i) {
        List<Long> row = new ArrayList<>();
        for (int k = 0; k <= i; k++) {
            row.add(combination(i, k));
        }
        return row;
    }

    /**
     * Calculates the combination (n choose k).
     *
     * @param n the total number of items
     * @param k the number of items to choose
     * @return the combination value
     */
    private static long combination(int n, int k) {
        long result = 1;
        if (k > n - k) {
            k = n - k;
        }
        for (int i = 0; i < k; ++i) {
            result *= (n - i);
            result /= (i + 1);
        }
        return result;
    }

    /**
     * Main method to test the pascalTriangleRow function.
     *
     * @param args command line arguments (not used)
     */
    public static void main(String[] args) {
        List<Long> row = pascalTriangleRow(5);
        System.out.println(row); // Output: [1, 5, 10, 10, 5, 1]
    }
}
```

### Explanation:
1. **Package and Class Declaration**:
   - The package declaration `package org.real.temp;` is included.
   - The class declaration `public class Answer` is defined.

2. **Imports**:
   - `import java.util.ArrayList;`
   - `import java.util.List;`

3. **Javadoc Comments**:
   - The Javadoc comments for the `pascalTriangleRow` method and the `combination` method are added to provide clear documentation.

4. **Method `pascalTriangleRow`**:
   - This method generates the ith row of Pascal's Triangle using a loop and the `combination` method.
   - The method signature includes the appropriate Java types (`List<Long>`).

5. **Method `combination`**:
   - This helper method calculates the binomial coefficient (n choose k) efficiently.
   - The method signature includes the appropriate Java types (`long`).

6. **Main Method**:
   - An example usage of the `pascalTriangleRow` method is provided in the `main` method to demonstrate its functionality.

This Java code preserves the original functionality and structure of the Python code while adhering to Java's syntax and conventions.