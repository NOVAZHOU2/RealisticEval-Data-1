Sure! Below is the equivalent Java code with the same function signature and comments:

```java
import java.util.ArrayList;
import java.util.List;

public class PascalTriangle {

    /**
     * Generates the ith row of Pascal's Triangle.
     *
     * @param i Row index (0-indexed)
     * @return A list representing the ith row of Pascal's Triangle
     */
    public static List<Integer> pascalTriangleRow(int i) {
        // Create a list to store the elements of the current row
        List<Integer> row = new ArrayList<>();

        // Compute each element in the row using binomial coefficients
        for (int j = 0; j <= i; j++) {
            row.add(binomialCoefficient(i, j));
        }

        return row;
    }

    /**
     * Computes the binomial coefficient C(n, k).
     *
     * @param n Total number of items
     * @param k Number of items to choose
     * @return The binomial coefficient C(n, k)
     */
    private static int binomialCoefficient(int n, int k) {
        if (k > n - k) {
            k = n - k;
        }
        int res = 1;
        for (int i = 0; i < k; ++i) {
            res *= (n - i);
            res /= (i + 1);
        }
        return res;
    }

    public static void main(String[] args) {
        // Example usage
        int rowIndex = 5;
        List<Integer> row = pascalTriangleRow(rowIndex);
        System.out.println("Pascal's Triangle Row " + rowIndex + ": " + row);
    }
}
```

This Java code defines a `PascalTriangle` class with a static method `pascalTriangleRow` that generates the ith row of Pascal's Triangle. It also includes a helper method `binomialCoefficient` to compute the binomial coefficients used in generating the rows. The `main` method demonstrates how to use the `pascalTriangleRow` method.