Certainly! Here’s the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation:

```typescript
import { comb } from 'mathjs';

/**
 * Generates the ith row of Pascal's Triangle.
 * 
 * @param i - Row index (0-indexed)
 * @returns An array representing the ith row of Pascal's Triangle
 */
function pascalTriangleRow(i: number): number[] {
    const row = Array.from({ length: i + 1 }, (_, k) => comb(i, k));
    return row;
}

// Example usage
console.log(pascalTriangleRow(5)); // Output: [1, 5, 10, 10, 5, 1]
```

### Explanation:
1. **Importing `comb`**:
   - The `comb` function is imported from the `mathjs` library, which provides the necessary combination functionality.

2. **Function Definition**:
   - The function `pascalTriangleRow` is defined with a parameter `i` of type `number` and returns an array of numbers (`number[]`).

3. **JSDoc Documentation**:
   - The JSDoc-style documentation is added above the function definition to describe the parameters and return type.

4. **Generating the Row**:
   - The `Array.from` method is used to create an array with a length of `i + 1`.
   - The second argument of `Array.from` is a mapping function that computes each element using the `comb` function.

5. **Example Usage**:
   - An example call to `pascalTriangleRow(5)` demonstrates how to use the function and prints the output.

Here is the complete TypeScript code with proper documentation and type annotations:

```typescript
import { comb } from 'mathjs';

/**
 * Generates the ith row of Pascal's Triangle.
 *
 * @param i - Row index (0-indexed)
 * @returns An array representing the ith row of Pascal's Triangle
 */
function pascalTriangleRow(i: number): number[] {
    const row = Array.from({ length: i + 1 }, (_, k) => comb(i, k));
    return row;
}

// Example usage
console.log(pascalTriangleRow(5)); // Output: [1, 5, 10, 10, 5, 1]
```

This TypeScript code preserves the original functionality and structure of the Python code, while adhering to TypeScript’s static type system and using appropriate JSDoc-style documentation.