Here is the equivalent TypeScript code:

```typescript
function factorial(n: number): number {
    return n ? n * factorial(n - 1) : 1;
}

function binomial_coefficient(n: number, k: number): number {
    return Math.floor(factorial(n) / (factorial(k) * factorial(n - k)));
}

function pascalTriangleRow(i: number): number[] {
    let result: number[] = [];
    for(let j=0; j<=i; j++){
        result.push(binomial_coefficient(i, j));
    }
    return result;
}
```

In the above code, we first define a helper function `factorial` which calculates the factorial of a given number. Then we define another helper function `binomial_coefficient` that uses the `factorial` function to calculate the binomial coefficient, which is used in generating each row of Pascal's Triangle. Finally, we define the main function `pascalTriangleRow`, which generates and returns the specified row of Pascal's Triangle. The `pascalTriangleRow` function works by iterating over all possible indices in the row and pushing the corresponding binomial coefficient into an array, which it then returns.