Certainly! Hereâ€™s the equivalent Jest test suite in TypeScript for the provided Python unittest class. We will ensure that the functionality and logic of the tests are preserved, and we will map the Python `assertEqual` methods to the appropriate Jest assertions.

### TypeScript Code with Jest Testing

First, let's define the `pascalTriangleRow` function in TypeScript:

```typescript
import { comb } from 'mathjs';

/**
 * Generates the ith row of Pascal's Triangle.
 *
 * @param i - Row index (0-indexed)
 * @returns An array representing the ith row of Pascal's Triangle
 */
function pascalTriangleRow(i: number): number[] {
    const row = Array.from({ length: i + 1 }, (_, k) => comb(i, k));
    return row;
}

export { pascalTriangleRow };
```

Next, let's write the Jest test suite:

```typescript
import { pascalTriangleRow } from './path/to/pascalTriangleRow'; // Adjust the import path as needed

describe('Test Pascal Triangle Row', () => {
    it('test row 0', () => {
        expect(pascalTriangleRow(0)).toEqual([1]);
    });

    it('test row 1', () => {
        expect(pascalTriangleRow(1)).toEqual([1, 1]);
    });

    it('test row 2', () => {
        expect(pascalTriangleRow(2)).toEqual([1, 2, 1]);
    });

    it('test row 3', () => {
        expect(pascalTriangleRow(3)).toEqual([1, 3, 3, 1]);
    });

    it('test row 4', () => {
        expect(pascalTriangleRow(4)).toEqual([1, 4, 6, 4, 1]);
    });

    it('test row 5', () => {
        expect(pascalTriangleRow(5)).toEqual([1, 5, 10, 10, 5, 1]);
    });
});
```

### Explanation:
1. **Importing `pascalTriangleRow`**:
   - Import the `pascalTriangleRow` function from the file where it is defined.

2. **Test Suite**:
   - Use the `describe` block to group the tests together under a descriptive name.

3. **Test Cases**:
   - Each test case is defined using the `it` block.
   - The `expect` function is used to assert the expected values using the `toEqual` matcher.

### Running the Tests
To run the Jest tests, you can use the following command in your terminal:

```sh
npm test
```

Make sure you have Jest installed in your project. If not, you can install it by running:

```sh
npm install --save-dev jest ts-jest @types/jest
```

And configure your `jest` setup in `package.json`:

```json
{
  "scripts": {
    "test": "jest"
  },
  "devDependencies": {
    "jest": "^27.0.0",
    "ts-jest": "^27.0.0",
    "@types/jest": "^27.0.0"
  }
}
```

This setup ensures that the tests are run using Jest and that TypeScript is properly integrated with Jest through `ts-jest`.

By following these steps, you can ensure that the Python unittest test cases are accurately converted to Jest tests in TypeScript.