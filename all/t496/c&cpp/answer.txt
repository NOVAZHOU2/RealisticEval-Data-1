Sure! Here is the equivalent C++ code for the given Python function `pascal_triangle_row`:

```cpp
#include <vector>
#include <iostream>

std::vector<int> pascalTriangleRow(int i) {
    std::vector<int> row;
    if (i >= 0) {
        row.push_back(1);
        for (int j = 1; j <= i; ++j) {
            row.push_back(row[j - 1] * (i - j + 1) / j);
        }
    }
    return row;
}

int main() {
    // Example usage
    int rowIndex = 5;
    std::vector<int> row = pascalTriangleRow(rowIndex);

    std::cout << "Pascal's Triangle row " << rowIndex << ": ";
    for (int num : row) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
- **Include Headers**: We include `<vector>` for using the vector container and `<iostream>` for input/output operations.
- **Function Definition**: The function `pascalTriangleRow` takes an integer `i` as input and returns a vector of integers representing the `ith` row of Pascal's Triangle.
- **Initialization**: If `i` is non-negative, we initialize the first element of the row to 1.
- **Loop for Computation**: We use a loop to compute each subsequent element in the row based on the previous element. The formula used is `row[j] = row[j - 1] * (i - j + 1) / j`.
- **Return Statement**: The function returns the computed row.

### Example Usage:
In the `main` function, we demonstrate how to call `pascalTriangleRow` with a specific row index (e.g., 5) and print the resulting row.

This C++ code should work similarly to your original Python code for generating rows of Pascal's Triangle.