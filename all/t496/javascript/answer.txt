Here is your Python code translated into JavaScript:

```javascript
function factorial(n){
    if(n == 0)
        return 1;
    else
        return n * factorial(n-1);
}

function pascalTriangleRow(i){
    let result = [];
    for(let j=0; j<=i; j++){
        result.push(factorial(i)/(factorial(j)*factorial(i-j)));
    }
    return result;
}
```

This JavaScript function `pascalTriangleRow` does exactly the same thing as your Python function `pascal_triangle_row`. It calculates each element in the specified row of Pascal's Triangle using the formula `nCr = n! / (r!(n-r)!)`, where `nCr` is the binomial coefficient, `n` is the total number of items, and `r` is the number of selected items. 

Note that we use a helper function `factorial` to calculate the factorial of a given number. This is because calculating factorials directly would lead to very large numbers quickly, which could cause overflow or precision issues in many programming languages including JavaScript. In fact, JavaScript has a maximum safe integer limit, after which calculations can become inaccurate due to loss of precision. So it's safer to calculate factorials step-by-step rather than all at once.