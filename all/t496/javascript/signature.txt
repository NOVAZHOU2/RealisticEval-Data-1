Certainly! I'll convert the given Python function signature and comments into equivalent JavaScript syntax, including JSDoc comments for documentation.

Here is the converted JavaScript code:

```javascript
/**
 * Generates the ith row of Pascal's Triangle.
 *
 * @param {number} i - Row index (0-indexed)
 * @return {Array<number>} An array representing the ith row of Pascal's Triangle
 */
function pascalTriangleRow(i) {
    const row = [];
    for (let k = 0; k <= i; k++) {
        row.push(comb(i, k));
    }
    return row;
}

// Helper function to calculate factorial
function factorial(n) {
    let result = 1;
    for (let i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}

// Helper function to calculate the binomial coefficient (combination)
function comb(n, k) {
    return factorial(n) / (factorial(k) * factorial(n - k));
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block at the beginning of the `pascalTriangleRow` function provides detailed documentation for the function parameters and return type.
   - The `@param` tag specifies the parameter `i` and its description.
   - The `@return` tag specifies the return type and its description.

2. **Function Definitions**:
   - The `pascalTriangleRow` function generates the \(i\)-th row of Pascal's Triangle.
   - The `factorial` function calculates the factorial of a number.
   - The `comb` function calculates the binomial coefficient (combination).

This conversion preserves the purpose and structure of the original Python code while adhering to JavaScript conventions and JSDoc documentation standards.