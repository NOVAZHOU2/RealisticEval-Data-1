Sure! Below is the equivalent JavaScript test case using Jest for the given Python unittest test class:

```javascript
const pascalTriangleRow = require('./pascalTriangleRow'); // Adjust the path accordingly

describe('Pascal Triangle Row', () => {
  test('Generates the 0th row of Pascal\'s Triangle', () => {
    const result = pascalTriangleRow(0);
    expect(result).toEqual([1]);
  });

  test('Generates the 1st row of Pascal\'s Triangle', () => {
    const result = pascalTriangleRow(1);
    expect(result).toEqual([1, 1]);
  });

  test('Generates the 2nd row of Pascal\'s Triangle', () => {
    const result = pascalTriangleRow(2);
    expect(result).toEqual([1, 2, 1]);
  });

  test('Generates the 3rd row of Pascal\'s Triangle', () => {
    const result = pascalTriangleRow(3);
    expect(result).toEqual([1, 3, 3, 1]);
  });

  test('Generates the 4th row of Pascal\'s Triangle', () => {
    const result = pascalTriangleRow(4);
    expect(result).toEqual([1, 4, 6, 4, 1]);
  });
});
```

Make sure you have Jest installed in your project and properly configured. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest
```

or

```sh
yarn add --dev jest
```

Then, you can run your tests with:

```sh
npx jest
```

or

```sh
yarn test
```

This will execute all the test cases defined in your `*.test.js` files.