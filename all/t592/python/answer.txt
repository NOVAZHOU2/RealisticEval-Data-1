Here's the C++ code converted to Python, including appropriate exception handling and functionality:
python
import math

def apply_op(a, b, op):
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op == '*':
        return a * b
    elif op == '/':
        if b == 0:
            raise ValueError("Division by zero is not allowed.")
        return a / b
    elif op == '^':
        return math.pow(a, b)
    else:
        raise ValueError("Invalid operator.")
Key Changes:
Function Definition:
The function apply_op is defined using the def keyword in Python.
Control Structures:
The switch statement in C++ is replaced with a series of if-elif statements in Python.
Exception Handling:
The std::invalid_argument exception from C++ is replaced with Python's ValueError, which is raised when an invalid operator is encountered or when division by zero is attempted.
Math Operations:
The pow function from <cmath> is replaced with math.pow in Python.
Usage Example:
Hereâ€™s how you might use the apply_op function in Python:
python
try:
    result = apply_op(10, 5, '+')
    print(result)  # Output: 15
    
    result = apply_op(10, 0, '/')
    print(result)  # This will raise a ValueError
except ValueError as e:
    print(e)  # Output: Division by zero is not allowed.
This code replicates the functionality of the original C++ function while adhering to Python's syntax and conventions. Let me know if you need further assistance!