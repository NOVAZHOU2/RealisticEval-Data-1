Hereâ€™s the equivalent TypeScript code for the provided C++ function, maintaining the same logic and functionality:

```typescript
function applyOp(a: number, b: number, op: string): number {
    switch (op) {
        case '+':
            return a + b;
        case '-':
            return a - b;
        case '*':
            return a * b;
        case '/':
            if (b === 0) {
                throw new Error("Division by zero is not allowed.");
            }
            return a / b;
        case '^':
            return Math.pow(a, b);
        default:
            throw new Error("Invalid operator.");
    }
}
```

### Key Changes and TypeScript Conventions:
1. **Function Declaration**: Used `function` keyword with type annotations for parameters and return type.
2. **Error Handling**: Used `Error` instead of `std::invalid_argument` for throwing exceptions.
3. **Math Operations**: Used `Math.pow` for exponentiation instead of `pow`.
4. **Strict Equality**: Used `===` for comparison to avoid type coercion.