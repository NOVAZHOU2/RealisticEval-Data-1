Certainly! Below is the equivalent C++ test case using Catch2, which is a popular C++ testing framework. This will mirror the structure and functionality of the provided Jest test cases.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro.

Hereâ€™s the complete C++ code with the test cases:

### CMakeLists.txt (for building with CMake and Catch2)

```cmake
cmake_minimum_required(VERSION 3.10)

project(IsBreakTimeTest)

# Find Catch2
find_package(Catch2 REQUIRED)

# Add executable
add_executable(IsBreakTimeTest IsBreakTime.cpp IsBreakTimeTest.cpp)

# Link Catch2 library
target_link_libraries(IsBreakTimeTest PUBLIC Catch2::Catch2)
```

### IsBreakTime.cpp

```cpp
#include <iostream>
#include <string>
#include <sstream>

/**
 * Determine whether the current time is within the specified time range (i.e., whether it is a break).
 *
 * @param startTime The start time of the break in HH:MM format.
 * @param endTime The end time of the break in HH:MM format.
 * @param currentTime The current time in HH:MM format.
 * @returns Returns true if the current time is within the break time range, false otherwise.
 */
bool isBreakTime(const std::string& startTime, const std::string& endTime, const std::string& currentTime) {
    int startHour, startMinute, endHour, endMinute, currentHour, currentMinute;

    // Parse the start time
    std::istringstream iss(startTime);
    iss >> startHour >> std::ws; // Read hour and ignore whitespace
    iss.ignore(1); // Ignore colon
    iss >> startMinute; // Read minute

    // Parse the end time
    std::istringstream iss2(endTime);
    iss2 >> endHour >> std::ws; // Read hour and ignore whitespace
    iss2.ignore(1); // Ignore colon
    iss2 >> endMinute; // Read minute

    // Parse the current time
    std::istringstream iss3(currentTime);
    iss3 >> currentHour >> std::ws; // Read hour and ignore whitespace
    iss3.ignore(1); // Ignore colon
    iss3 >> currentMinute; // Read minute

    int startTotalMinutes = startHour * 60 + startMinute;
    int endTotalMinutes = endHour * 60 + endMinute;
    int currentTotalMinutes = currentHour * 60 + currentMinute;

    return currentTotalMinutes >= startTotalMinutes && currentTotalMinutes <= endTotalMinutes;
}
```

### IsBreakTimeTest.cpp

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

TEST_CASE("isBreakTime Function Tests", "[isBreakTime]") {
    SECTION("should return true when current time is exactly at the start time") {
        REQUIRE(isBreakTime("09:00", "10:00", "09:00") == true);
    }

    SECTION("should return true when current time is within the break time range") {
        REQUIRE(isBreakTime("09:00", "10:00", "09:30") == true);
    }

    SECTION("should return false when current time is exactly exceed the end time") {
        REQUIRE(isBreakTime("09:00", "10:00", "20:00") == false);
    }

    SECTION("should return false when current time is before the break time") {
        REQUIRE(isBreakTime("09:00", "10:00", "08:59") == false);
    }

    SECTION("should return false when current time is after the break time") {
        REQUIRE(isBreakTime("09:00", "10:00", "10:01") == false);
    }
}
```

### Explanation:
1. **CMakeLists.txt**: Sets up the project to link with Catch2.
2. **IsBreakTime.cpp**: Contains the implementation of the `isBreakTime` function.
3. **IsBreakTimeTest.cpp**: Contains the test cases using Catch2.

### Building and Running the Test
To build and run the tests, follow these steps:

1. **Create the directories**:
   ```sh
   mkdir build
   cd build
   ```

2. **Configure and build**:
   ```sh
   cmake ..
   make
   ```

3. **Run the tests**:
   ```sh
   ./IsBreakTimeTest
   ```

This setup ensures that the tests are structured similarly to the Jest test cases and provide the same functionality in C++.