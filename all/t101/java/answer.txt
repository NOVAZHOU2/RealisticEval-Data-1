Sure! Hereâ€™s the equivalent Java code for the given JavaScript function:

```java
public class BreakTimeChecker {

    /**
     * Determines if the current time falls within the break time range.
     *
     * @param startTime The start time of the break in HH:MM format.
     * @param endTime The end time of the break in HH:MM format.
     * @param currentTime The current time in HH:MM format.
     * @return Returns true if the current time is within the break time range, false otherwise.
     */
    public static boolean isBreakTime(String startTime, String endTime, String currentTime) {
        int[] startTimes = parseTime(startTime);
        int[] endTimes = parseTime(endTime);
        int[] currentTimes = parseTime(currentTime);

        int startTotalMinutes = startTimes[0] * 60 + startTimes[1];
        int endTotalMinutes = endTimes[0] * 60 + endTimes[1];
        int currentTotalMinutes = currentTimes[0] * 60 + currentTimes[1];

        return currentTotalMinutes >= startTotalMinutes && currentTotalMinutes <= endTotalMinutes;
    }

    private static int[] parseTime(String time) {
        String[] parts = time.split(":");
        return new int[]{Integer.parseInt(parts[0]), Integer.parseInt(parts[1])};
    }

    // Example usage
    public static void main(String[] args) {
        String startTime = "09:30";
        String endTime = "10:30";
        String currentTime = "10:00";

        System.out.println(isBreakTime(startTime, endTime, currentTime)); // Should print true
    }
}
```

### Explanation:
1. **Method `isBreakTime`**: This method takes three strings (`startTime`, `endTime`, and `currentTime`) and returns a boolean indicating whether the current time falls within the break time range.
2. **Method `parseTime`**: This helper method splits the input string into hours and minutes and converts them to integers.
3. **Main Method**: An example usage of the `isBreakTime` method.

This Java code should work similarly to the provided JavaScript code.