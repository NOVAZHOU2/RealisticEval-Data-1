Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

```java
package org.real.temp;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

public class Tester {

    private List<Point> square;
    private List<Point> triangle;
    private List<Point> concave;

    @Before
    public void setUp() {
        // Define some polygons to use in tests
        square = new ArrayList<>();
        square.add(new Point(0, 0));
        square.add(new Point(0, 10));
        square.add(new Point(10, 10));
        square.add(new Point(10, 0));

        triangle = new ArrayList<>();
        triangle.add(new Point(0, 0));
        triangle.add(new Point(5, 10));
        triangle.add(new Point(10, 0));

        concave = new ArrayList<>();
        concave.add(new Point(0, 0));
        concave.add(new Point(5, 5));
        concave.add(new Point(10, 0));
        concave.add(new Point(5, 10));
        concave.add(new Point(0, 10));
    }

    @Test
    public void testPointInsideSquare() {
        // Point inside the square
        assertTrue(isPointInPolygon(new Point(5, 5), square));
    }

    @Test
    public void testPointOutsideSquare() {
        // Point outside the square
        assertFalse(isPointInPolygon(new Point(15, 5), square));
    }

    @Test
    public void testPointOnEdgeOfTriangle() {
        // Point on the edge of the triangle
        assertFalse(isPointInPolygon(new Point(5, 0), triangle));
    }

    @Test
    public void testPointInsideConcavePolygon() {
        // Point inside concave polygon
        assertTrue(isPointInPolygon(new Point(5, 9), concave));
    }

    @Test
    public void testPointOutsideConcavePolygon() {
        // Point outside concave polygon
        assertFalse(isPointInPolygon(new Point(5, 1), concave));
    }

    // Utility method to determine if a point is inside a polygon
    private static boolean isPointInPolygon(Point point, List<Point> polygon) {
        double x = point.x;
        double y = point.y;
        boolean inside = false;
        int n = polygon.size();
        Point p1 = polygon.get(0);

        for (int i = 0; i < n + 1; i++) {
            Point p2 = polygon.get(i % n);
            if (y > Math.min(p1.y, p2.y)) {
                if (y <= Math.max(p1.y, p2.y)) {
                    if (x <= Math.max(p1.x, p2.x)) {
                        if (p1.y != p2.y) {
                            double xinters = (y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y) + p1.x;
                            if (p1.x == p2.x || x <= xinters) {
                                inside = !inside;
                            }
                        } else if (p1.x == p2.x && x == p1.x) {
                            inside = !inside;
                        }
                    }
                }
            }
            p1 = p2;
        }

        return inside;
    }

    // Represents a point with x and y coordinates
    private static class Point {
        double x;
        double y;

        public Point(double x, double y) {
            this.x = x;
            this.y = y;
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The package `org.real.temp` is declared at the beginning.
2. **Class Definition**: The `Tester` class contains the JUnit test methods.
3. **JUnit Annotations**:
   - `@Before`: Used to set up the test environment before each test method.
   - `@Test`: Used to mark methods as test cases.
4. **Setup Method**: The `setUp` method initializes the polygons used in the tests.
5. **Test Methods**:
   - `testPointInsideSquare`: Tests if a point inside the square is correctly identified.
   - `testPointOutsideSquare`: Tests if a point outside the square is correctly identified.
   - `testPointOnEdgeOfTriangle`: Tests if a point on the edge of the triangle is correctly identified.
   - `testPointInsideConcavePolygon`: Tests if a point inside the concave polygon is correctly identified.
   - `testPointOutsideConcavePolygon`: Tests if a point outside the concave polygon is correctly identified.
6. **Utility Method**: The `isPointInPolygon` method is defined to perform the actual logic of determining if a point is inside a polygon.
7. **Point Class**: A nested `Point` class is defined to represent points with `x` and `y` coordinates.
8. **Assertions**: JUnit assertions (`assertTrue` and `assertFalse`) are used to verify the expected outcomes.