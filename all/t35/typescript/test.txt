Sure, here's how you can convert the Python `unittest` test class into a TypeScript test case using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('isPointInPolygon', () => {
  it('should return true for points inside the polygon', () => {
    const pointInside = [1, 1];
    const polygon = [
      [0, 0],
      [2, 0],
      [2, 2],
      [0, 2]
    ];

    expect(isPointInPolygon(pointInside, polygon)).toBe(true);
  });

  it('should return false for points outside the polygon', () => {
    const pointOutside = [3, 3];
    const polygon = [
      [0, 0],
      [2, 0],
      [2, 2],
      [0, 2]
    ];

    expect(isPointInPolygon(pointOutside, polygon)).toBe(false);
  });

  it('should handle polygons with holes correctly', () => {
    const pointInsideHole = [1, 1];
    const polygonWithHole = [
      [0, 0],
      [4, 0],
      [4, 4],
      [0, 4],
      [1, 2], // Hole
      [3, 2]  // Hole
    ];

    expect(isPointInPolygon(pointInsideHole, polygonWithHole)).toBe(false);
  });
});

function isPointInPolygon(point: number[], polygon: number[][]): boolean {
  let x = point[0], y = point[1];
  let inside = false;

  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
    const xi = polygon[i][0], yi = polygon[i][1];
    const xj = polygon[j][0], yj = polygon[j][1];

    const intersect = ((yi > y) !== (yj > y)) &&
                      (x < (xj - xi) * (y - yi) / (yj - yi) + xi);

    if (intersect) inside = !inside;
  }

  return inside;
}
```

### Explanation:
1. **Importing Jest**: We use `@jest/globals` to import the necessary Jest functions (`describe`, `it`, and `expect`).
2. **Test Suite Description**: We describe our test suite using `describe`.
3. **Individual Test Cases**: Each test case is defined using `it`. We assert the expected outcomes using `expect`.
4. **Function Implementation**: The function `isPointInPolygon` remains largely unchanged but uses JavaScript/TypeScript syntax.

This TypeScript code will work in an environment where Jest is installed and configured, such as a Node.js project with a `.test.ts` file extension.