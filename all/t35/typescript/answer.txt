Certainly! Below is the equivalent TypeScript code for the provided Python function. I've ensured that the functionality, structure, and logic remain consistent, while adapting it to TypeScript's static type system:

```typescript
function isPointInPolygon(point: [number, number], polygon: [number, number][]): boolean {
    /**
     * Determine if the point (x, y) is inside the given polygon.
     * The polygon is defined as an array of tuples (x, y) representing the vertices.
     *
     * @param point - A tuple (x, y) representing the point to check.
     * @param polygon - An array of tuples (x, y) representing the vertices of the polygon.
     * @returns True if the point is inside the polygon, False otherwise.
     */

    const [x, y] = point;
    let inside = false;
    const n = polygon.length;
    let [p1x, p1y] = polygon[0];

    for (let i = 0; i < n + 1; i++) {
        const [p2x, p2y] = polygon[i % n];
        if (y > Math.min(p1y, p2y)) {
            if (y <= Math.max(p1y, p2y)) {
                if (x <= Math.max(p1x, p2x)) {
                    if (p1y !== p2y) {
                        const xinters = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x;
                        if (p1x === p2x || x <= xinters) {
                            inside = !inside;
                        }
                    } else {
                        if (p1x === p2x) {
                            inside = !inside;
                        }
                    }
                }
            }
        }
        [p1x, p1y] = [p2x, p2y];
    }

    return inside;
}
```

### Explanation:
1. **Type Definitions**: 
   - `point` is defined as a tuple `[number, number]`.
   - `polygon` is defined as an array of tuples `[number, number][]`.

2. **Function Signature**:
   - The function `isPointInPolygon` takes two parameters: `point` and `polygon`, both with their respective types.

3. **Logic**:
   - The logic remains the same as in the Python version, including the use of loops and conditional statements to determine if the point is inside the polygon.

4. **Math Functions**:
   - `min` and `max` are replaced with `Math.min` and `Math.max` respectively, which are the standard JavaScript/TypeScript equivalents.

5. **Tuple Destructuring**:
   - Tuple destructuring is used to extract `x` and `y` from `point` and `[p1x, p1y]` from `polygon[0]`.

This TypeScript code should provide the same functionality as the original Python code.