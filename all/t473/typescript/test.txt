Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest test cases will be converted to Jest test cases with appropriate assertions.

### TypeScript Code with Jest Testing

First, ensure you have Jest installed in your TypeScript project:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Then, configure Jest in your `tsconfig.json` and `jest.config.js` files:

```json
// tsconfig.json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

```js
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest',
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
};
```

Now, here is the TypeScript test class using Jest:

```typescript
import { flatten } from './flatten'; // Import the flatten function

describe('TestFlattenFunction', () => {
  it('should flatten a simple flat list', () => {
    expect(flatten([1, 2, 3])).toEqual([1, 2, 3]);
  });

  it('should flatten a list with one level of nesting', () => {
    expect(flatten([1, [2, 3], 4])).toEqual([1, 2, 3, 4]);
  });

  it('should flatten multiple nested lists at one level', () => {
    expect(flatten([[1, 2], [3, 4], 5])).toEqual([1, 2, 3, 4, 5]);
  });

  it('should flatten a list with multiple levels of nesting', () => {
    expect(flatten([1, [2, [3, 4], 5], 6])).toEqual([1, 2, 3, 4, 5, 6]);
  });

  it('should flatten a list with empty lists', () => {
    expect(flatten([1, [], [2, [3, []], 4]])).toEqual([1, 2, 3, 4]);
  });
});
```

### Explanation:
1. **Import Statement**: The `flatten` function is imported from the appropriate file.
2. **Describe Block**: The `describe` block groups all the test cases under `TestFlattenFunction`.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Expect Assertions**: The `expect` function is used with `toEqual` to assert the expected outcomes.

This setup ensures that the tests are structured similarly to the Python unittest class and use Jest's assertion methods to validate the behavior of the `flatten` function.