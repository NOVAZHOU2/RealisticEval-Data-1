Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style comments and type annotations:

```typescript
/**
 * Flattens a nested list into a single list.
 * 
 * @param nestedList - A list that may contain nested lists.
 * @returns A flattened version of the input list.
 */
function flatten(nestedList: any[]): any[] {
    let flattened: any[] = [];  // Array to hold the flattened elements

    for (const element of nestedList) {
        if (Array.isArray(element)) {
            // Recursively flatten the nested list and extend the flattened list
            flattened = flattened.concat(flatten(element));
        } else {
            // If the element is not an array, append it directly
            flattened.push(element);
        }
    }

    return flattened;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block is placed above the function definition.
   - The `@param` tag is used to describe the parameter `nestedList`.
   - The `@returns` tag is used to describe the return value.

2. **Type Annotations**:
   - The function signature `function flatten(nestedList: any[]): any[]` specifies that the function takes an `any[]` as an argument and returns an `any[]`.
   - The local variable `flattened` is typed as `any[]`.

3. **Array Methods**:
   - `Array.isArray(element)` checks if an element is an array.
   - `flattened.concat(flatten(element))` concatenates the results of the recursive call to `flatten`.

4. **Loop and Conditional Logic**:
   - The `for...of` loop iterates over the elements of `nestedList`.
   - The conditional statement checks if an element is an array and handles it accordingly.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and best practices.