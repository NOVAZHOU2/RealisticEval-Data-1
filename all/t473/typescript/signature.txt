Certainly! Hereâ€™s the equivalent TypeScript code, including the conversion of the Python docstring to JSDoc-style comments and proper type annotations:

```typescript
/**
 * Flattens a nested list into a single list.
 * 
 * @param nestedList - A list that may contain nested lists.
 * @returns A flattened version of the input list.
 */
function flatten(nestedList: any[]): any[] {
    const flattened: any[] = []; // Array to hold the flattened elements

    for (const element of nestedList) {
        if (Array.isArray(element)) {
            // Recursively flatten the nested list and extend the flattened list
            flattened.push(...flatten(element));
        } else {
            // If the element is not a list, append it directly
            flattened.push(element);
        }
    }

    return flattened;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The Python docstring has been converted to JSDoc-style comments using `/** */`.
   - The `@param` tag describes the parameter `nestedList`.
   - The `@returns` tag describes the return value.

2. **Type Annotations**:
   - The function `flatten` takes an argument `nestedList` of type `any[]`, indicating that it can contain any type of elements, including nested arrays.
   - The return type is also `any[]`.

3. **Array Methods**:
   - The `Array.isArray()` method is used to check if an element is an array.
   - The spread operator (`...`) is used with `push` to add multiple elements from the recursively flattened array to the `flattened` array.

4. **For-of Loop**:
   - The `for-of` loop is used to iterate over the elements of `nestedList`.

This TypeScript code preserves the original functionality and structure of the Python code, while adhering to TypeScript conventions and providing clear documentation through JSDoc comments.