Sure, here is the TypeScript code signature for the given Python function, keeping the comments intact:

```typescript
/**
 * Flattens a nested list into a single list.
 *
 * @param nestedList - A list that may contain nested lists.
 * @returns A flattened version of the input list.
 */
function flatten(nestedList: any[]): any[] {
    // Function implementation goes here
}
```

In TypeScript, `any[]` is used to represent an array where each element can be of any type. If you want to ensure type safety and specify the expected types within the nested list, you can replace `any` with more specific types as needed. For example, if all elements in the nested list should be numbers, you could use `number[]`.