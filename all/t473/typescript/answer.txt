Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function flatten(nestedList: any[]): any[] {
    /**
     * Flattens a nested list into a single list.
     *
     * @param nestedList - A list that may contain nested lists.
     * @returns A flattened version of the input list.
     */
    let flattened: any[] = [];  // Array to hold the flattened elements

    for (const element of nestedList) {
        if (Array.isArray(element)) {
            // Recursively flatten the nested list and extend the flattened list
            flattened = flattened.concat(flatten(element));
        } else {
            // If the element is not an array, append it directly
            flattened.push(element);
        }
    }

    return flattened;
}
```

### Explanation:
1. **Type Annotations**: The function `flatten` takes an `any[]` as its argument and returns an `any[]`. This is because the elements within the list can be of any type, including nested arrays.

2. **Array Methods**:
   - `Array.isArray(element)` is used to check if an element is an array, which is similar to `isinstance(element, list)` in Python.
   - `flattened.concat(flatten(element))` is used instead of `flattened.extend(flatten(element))` since TypeScript/JavaScript does not have an `extend` method on arrays. `concat` achieves the same effect by merging two arrays.

3. **Recursion**: The function calls itself recursively to handle nested lists, just like in the Python version.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate adjustments for TypeScript syntax and conventions.