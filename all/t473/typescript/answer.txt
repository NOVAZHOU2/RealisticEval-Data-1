Sure! Hereâ€™s the equivalent TypeScript code that maintains the same functionality, structure, and logic as the provided Python code:

```typescript
function flatten(nestedList: any[]): any[] {
    /**
     * Flattens a nested list into a single list.
     *
     * @param nestedList - A list that may contain nested lists.
     * @returns A flattened version of the input list.
     */
    const flattened: any[] = []; // Array to hold the flattened elements

    for (const element of nestedList) {
        if (Array.isArray(element)) {
            // Recursively flatten the nested list and extend the flattened list
            flattened.push(...flatten(element));
        } else {
            // If the element is not a list, append it directly
            flattened.push(element);
        }
    }

    return flattened;
}
```

### Explanation:
1. **Type Annotations**:
   - The function `flatten` takes an argument `nestedList` of type `any[]`, which can contain any type of elements including nested arrays.
   - The return type is also `any[]`.

2. **Array Methods**:
   - In TypeScript/JavaScript, we use `Array.isArray()` to check if an element is an array.
   - We use the spread operator (`...`) with `push` to add multiple elements from the recursively flattened array to the `flattened` array.
   - The `push` method is used instead of `extend`, which is specific to Python.

3. **For-of Loop**:
   - The `for-of` loop is used to iterate over the elements of `nestedList`.

This TypeScript code preserves the core functionality of flattening a nested list into a single list, adapting it appropriately for TypeScript syntax and conventions.