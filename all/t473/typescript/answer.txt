Here is your Python function converted to TypeScript:

```typescript
function flatten(nestedList: any[]): any[] {
    // Initialize an empty array for storing flattened elements
    let flatList: any[] = [];

    // Iterate through each element in the given list
    for(let i = 0; i < nestedList.length; i++) {
        // If the current element is an array, recursively call flatten on it and add its elements to flatList
        if(Array.isArray(nestedList[i])) {
            flatList = [...flatList, ...flatten(nestedList[i])];
        } else {
            // If the current element is not an array, simply push it to flatList
            flatList.push(nestedList[i]);
        }
    }

    return flatList;
}
```

This TypeScript function works similarly to the original Python function. It iterates over each item in the provided `nestedList`. If the item is also a list (`Array.isArray` returns true), it calls itself recursively with this sub-list. Otherwise, it adds the item directly to the `flatList`.

The spread operator (`...`) is used to concatenate arrays when combining results from recursive calls. This allows us to add all items from the flattened sub-lists to our final result without having to manually loop through them.

Please note that TypeScript's type system is more strict than Python's, so you need to specify the type of each parameter and return value explicitly. In this case, we use `any[]` for both parameters and return value because the type of elements inside the list can be anything. If you know the specific types of elements in advance, you should replace `any[]` with appropriate types.