Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function flatten(nestedList) {
    /**
     * Flattens a nested array into a single array.
     *
     * @param {Array} nestedList - An array that may contain nested arrays.
     * @returns {Array} A flattened version of the input array.
     */
    const flattened = [];  // Array to hold the flattened elements

    for (let element of nestedList) {
        if (Array.isArray(element)) {
            // Recursively flatten the nested array and concatenate the results
            flattened.push(...flatten(element));
        } else {
            // If the element is not an array, push it directly
            flattened.push(element);
        }
    }

    return flattened;
}
```

### Explanation:
1. **Function Definition**: The function `flatten` is defined with a single parameter `nestedList`.
2. **Flattened Array**: An empty array `flattened` is initialized to store the flattened elements.
3. **Loop Through Elements**: A `for...of` loop iterates through each element in `nestedList`.
4. **Check for Arrays**: The `Array.isArray()` method checks if the current element is an array.
   - If it is an array, the function calls itself recursively to flatten the nested array and then uses the spread operator (`...`) to concatenate the results into `flattened`.
   - If it is not an array, the element is directly pushed into `flattened`.
5. **Return Flattened Array**: The function returns the `flattened` array once all elements have been processed.

This JavaScript code mirrors the Python code's behavior of recursively flattening nested arrays into a single, flat array.