Sure! Here's how you can convert the Python `unittest` test class to a Jest test case using JavaScript:

```javascript
// Assuming the function is defined in a file named 'flatten.js'
const { flatten } = require('./flatten');

describe('Flatten Function', () => {
  it('should flatten a nested list into a single list', () => {
    const nestedList = [1, [2, [3, 4], 5], 6];
    const expectedOutput = [1, 2, 3, 4, 5, 6];

    expect(flatten(nestedList)).toEqual(expectedOutput);
  });

  it('should handle empty lists', () => {
    const nestedList = [];
    const expectedOutput = [];

    expect(flatten(nestedList)).toEqual(expectedOutput);
  });

  it('should handle lists with non-list elements', () => {
    const nestedList = [1, 'a', [2, true], null];
    const expectedOutput = [1, 'a', 2, true, null];

    expect(flatten(nestedList)).toEqual(expectedOutput);
  });
});
```

In this example:
- We import the `flatten` function from the `flatten.js` file.
- We use `describe` to group related tests together.
- Each `it` block represents an individual test case.
- We use `expect` and `toEqual` to assert that the output of the `flatten` function matches the expected result.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```bash
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run your tests using the following command:

```bash
npx jest
# or
yarn jest
```

This will execute all the tests in your project.