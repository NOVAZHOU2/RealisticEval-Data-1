Here's the equivalent C++ code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
#include <vector>

using AnyObject = std::unordered_map<std::string, std::any>;

bool compareObjectsDepth(const AnyObject& obj1, const AnyObject& obj2) {
    // Check if both are objects
    if (obj1.empty() != obj2.empty()) {
        return false;
    }

    // Check if the number of keys is the same
    if (obj1.size() != obj2.size()) {
        return false;
    }

    // Compare each key
    for (const auto& [key, value] : obj1) {
        if (obj2.find(key) == obj2.end()) {
            return false;
        }

        // Recursively check the depth of the properties
        const auto& value2 = obj2.at(key);
        if (value.type() != value2.type() || !compareObjectsDepth(std::any_cast<AnyObject>(value), std::any_cast<AnyObject>(value2))) {
            return false;
        }
    }

    return true;
}
```

Make sure to handle any required libraries or exceptions when using `std::any`.