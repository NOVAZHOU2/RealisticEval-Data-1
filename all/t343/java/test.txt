Hereâ€™s how you can convert the provided Jest test cases into JUnit 4 test cases in Java. The package is `org.real.temp` and the class is `Tester`. 

```java
package org.real.temp;

import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class Tester {

    @Test
    public void testEqualDepthAndStructure() {
        Map<String, Object> objA = new HashMap<>();
        objA.put("a", new HashMap<String, Object>() {{
            put("b", new HashMap<String, Object>() {{
                put("c", 1);
            }});
        }});
        objA.put("d", 2);

        Map<String, Object> objB = new HashMap<>();
        objB.put("a", new HashMap<String, Object>() {{
            put("b", new HashMap<String, Object>() {{
                put("c", 3);
            }});
        }});
        objB.put("d", 4);

        assertFalse(compareObjectsDepth(objA, objB)); // Same structure
    }

    @Test
    public void testDifferentStructureMissingKey() {
        Map<String, Object> objA = new HashMap<>();
        objA.put("a", new HashMap<String, Object>() {{
            put("b", new HashMap<String, Object>() {{
                put("c", 1);
            }});
        }});
        objA.put("d", 2);

        Map<String, Object> objC = new HashMap<>();
        objC.put("a", new HashMap<String, Object>() {{
            put("b", new HashMap<String, Object>() {{
                put("c", 3);
            }});
        }});
        objC.put("e", 4);

        assertFalse(compareObjectsDepth(objA, objC)); // Different structure
    }

    @Test
    public void testDifferentDepth() {
        Map<String, Object> objA = new HashMap<>();
        objA.put("a", new HashMap<String, Object>() {{
            put("b", new HashMap<String, Object>() {{
                put("c", 1);
            }});
        }});
        objA.put("d", 2);

        Map<String, Object> objD = new HashMap<>();
        objD.put("a", new HashMap<String, Object>() {{
            put("b", 1);
        }});
        objD.put("d", 2);

        assertFalse(compareObjectsDepth(objA, objD)); // Different depth
    }

    @Test
    public void testNonObjectInputs() {
        Map<String, Object> objA = new HashMap<>();
        objA.put("a", new HashMap<String, Object>() {{
            put("b", new HashMap<String, Object>() {{
                put("c", 1);
            }});
        }});
        objA.put("d", 2);

        Map<String, Object> objE = null;

        assertFalse(compareObjectsDepth(objA, objE)); // Non-object input
    }

    @Test
    public void testDifferentTypes() {
        Map<String, Object> objA = new HashMap<>();
        objA.put("a", new HashMap<String, Object>() {{
            put("b", 1);
        }});
        objA.put("d", 2);

        Map<String, Object> objF = new HashMap<>();
        objF.put("a", new HashMap<String, Object>() {{
            put("b", new HashMap<String, Object>() {{
                put("c", 3);
            }});
        }});
        objF.put("d", 4);

        assertFalse(compareObjectsDepth(objA, objF)); // Different types
    }

    @Test
    public void testIdenticalEmptyObjects() {
        Map<String, Object> objG = new HashMap<>();
        Map<String, Object> objH = new HashMap<>();

        assertTrue(compareObjectsDepth(objG, objH)); // Both are empty
    }

    // Your compareObjectsDepth method here
}
```

### Explanation:
1. **JUnit Annotations**: The `@Test` annotation is used to denote test methods.
2. **Assertions**: `assertTrue` and `assertFalse` are used to validate the expected outcomes.
3. **Map Initialization**: Java's `HashMap` is used to create objects similar to the JavaScript objects in the Jest tests.
4. **Null Handling**: The test for non-object inputs checks for a `null` value.
5. **Object Comparison**: Ensure you include the `compareObjectsDepth` method within this class or import it as needed. 

This structure closely mimics the original Jest test cases while adhering to Java's syntax and conventions.