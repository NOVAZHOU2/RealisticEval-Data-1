Certainly! Here is the equivalent TypeScript code, including the function signature and JSDoc-style documentation:

```typescript
/**
 * Convert a CamelCase string to snake_case.
 * 
 * @param camelStr - The CamelCase string to convert.
 * @returns The converted snake_case string.
 */
function camelToSnake(camelStr: string): string {
    // Use regular expression to insert underscores before each uppercase letter,
    // and then convert the whole string to lowercase
    const snakeCaseStr = camelStr.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();
    return snakeCaseStr;
}

// Example usage
console.log(camelToSnake('CamelCaseString'));  // Output: camel_case_string

// Test function to verify correctness
function testCamelToSnake() {
    assert.equal(camelToSnake('CamelCaseString'), 'camel_case_string');
    assert.equal(camelToSnake('AnotherExample'), 'another_example');
    assert.equal(camelToSnake('SimpleTest'), 'simple_test');
    console.log('All tests passed!');
}

// Run the test function
testCamelToSnake();
```

### Explanation:
1. **JSDoc Documentation**: The JSDoc-style comments are used to document the function parameters and return type.
2. **Function Signature**: The function `camelToSnake` takes a single parameter `camelStr` of type `string` and returns a `string`.
3. **Regular Expression**: The regular expression `/(?<!^)(?=[A-Z])/g` is used to insert underscores before each uppercase letter, ensuring the string is converted to snake_case.
4. **Testing**: A test function `testCamelToSnake` is included to verify the correctness of the conversion.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and best practices.