Certainly! Here is the equivalent TypeScript code using Jest for testing the `camelToSnake` function. The provided Python unittest class will be converted into a Jest test suite.

First, let's include the necessary imports and define the `camelToSnake` function:

```typescript
import { expect } from '@jest/globals';

/**
 * Convert a CamelCase string to snake_case.
 * 
 * @param camelStr - The CamelCase string to convert.
 * @returns The converted snake_case string.
 */
function camelToSnake(camelStr: string): string {
    // Use regular expression to insert underscores before each uppercase letter,
    // and then convert the whole string to lowercase
    const snakeCaseStr = camelStr.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();
    return snakeCaseStr;
}

describe('TestCamelToSnake', () => {
    it('test basic CamelCase to snake_case conversion', () => {
        expect(camelToSnake("HelloWorld")).toBe("hello_world");
    });

    it('test conversion of a CamelCase string with multiple words', () => {
        expect(camelToSnake("ThisIsATest")).toBe("this_is_a_test");
    });

    it('test conversion with numbers in the string', () => {
        expect(camelToSnake("ConvertThis123String")).toBe("convert_this123_string");
    });

    it('test conversion with leading uppercase letters', () => {
        expect(camelToSnake("PythonFunction")).toBe("python_function");
    });

    it('test conversion of an empty string', () => {
        expect(camelToSnake("")).toBe("");
    });
});
```

### Explanation:
1. **Imports**: We import `expect` from `@jest/globals` to use Jest's assertion functions.
2. **Function Definition**: The `camelToSnake` function is defined with proper type annotations.
3. **Test Suite**: The `describe` block sets up a test suite named `TestCamelToSnake`.
4. **Test Cases**:
   - Each test case is defined using the `it` function.
   - The `expect` function is used to assert the expected behavior of the `camelToSnake` function.

### Running the Tests:
To run these tests, you need to have Jest installed and configured in your project. You can install Jest using npm or yarn:

```sh
npm install --save-dev jest ts-jest @types/jest
```

or

```sh
yarn add --dev jest ts-jest @types/jest
```

Then, configure your `tsconfig.json` and `jest.config.js` files appropriately to support TypeScript with Jest.

Here is a basic configuration example:

#### tsconfig.json
```json
{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true
  },
  "include": ["src/**/*"]
}
```

#### jest.config.js
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest'
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
};
```

With this setup, you can run the tests using:

```sh
npm test
```

or

```sh
yarn test
```

This ensures that the tests are executed correctly and the functionality is preserved.