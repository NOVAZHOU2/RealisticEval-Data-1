Sure! Hereâ€™s the equivalent C++ code for converting a CamelCase string to snake_case:

```cpp
#include <iostream>
#include <regex>
#include <string>

std::string camel_to_snake(const std::string& camel_str) {
    /**
     * Convert a CamelCase string to snake_case.
     *
     * Parameters:
     * camel_str (const std::string&): The CamelCase string to convert.
     *
     * Returns:
     * std::string: The converted snake_case string.
     */
    std::string snake_case_str;
    std::regex reg("(.)([A-Z][a-z]+)");
    std::regex reg2("([a-z0-9])([A-Z])");

    // Insert underscores before each uppercase letter and convert to lowercase
    snake_case_str = std::regex_replace(camel_str, reg, "$1_$2");
    snake_case_str = std::regex_replace(snake_case_str, reg2, "$1_$2");

    // Convert the entire string to lowercase
    std::transform(snake_case_str.begin(), snake_case_str.end(), snake_case_str.begin(), ::tolower);

    return snake_case_str;
}

int main() {
    std::string camel_str = "CamelCaseExample";
    std::string snake_case_str = camel_to_snake(camel_str);
    std::cout << "Converted string: " << snake_case_str << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**: We include `<iostream>`, `<regex>`, and `<string>` to use standard input/output, regular expressions, and strings respectively.
2. **Function `camel_to_snake`**:
   - This function takes a CamelCase string and converts it to snake_case.
   - It uses two regular expressions:
     - `reg`: Matches a character followed by an uppercase letter (`(.)([A-Z][a-z]+)`).
     - `reg2`: Matches a lowercase or digit followed by an uppercase letter (`([a-z0-9])([A-Z])`).
   - The `std::regex_replace` function is used to insert underscores before each uppercase letter.
   - Finally, `std::transform` is used to convert the entire string to lowercase.
3. **Main Function**:
   - Demonstrates the usage of the `camel_to_snake` function with an example string.

This C++ code should provide the same functionality as the original Python code.