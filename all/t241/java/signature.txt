Certainly! Below is the equivalent Java code for the given Python function, including the appropriate Javadoc comments and type conversions:

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/**
 * Finds the minimum distance between two words in a text file, considering each line as a separate sequence.
 */
public class Answer {

    /**
     * Finds the minimum distance between two words in a text file, considering each line as a separate sequence.
     *
     * @param filePath The path to the file to read.
     * @param word1    The first word to search for.
     * @param word2    The second word to search for.
     * @return A tuple containing the line number with the minimum distance and the minimum distance itself.
     *         Returns (null, Integer.MAX_VALUE) if one or both words are not found in any line.
     */
    public static Tuple getMinSeqNumAndDistance(String filePath, String word1, String word2) {
        int minDistance = Integer.MAX_VALUE;
        Integer minSeqNum = null;
        int currentLineNumber = 0;

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] words = line.trim().split("\\s+");
                int[] word1Indices = findIndices(words, word1);
                int[] word2Indices = findIndices(words, word2);

                for (int index1 : word1Indices) {
                    for (int index2 : word2Indices) {
                        int distance = Math.abs(index1 - index2);
                        if (distance < minDistance) {
                            minDistance = distance;
                            minSeqNum = currentLineNumber;
                        }
                    }
                }

                currentLineNumber++;
            }
        } catch (IOException e) {
            System.out.println("Error: The file " + filePath + " does not exist.");
            return new Tuple(null, Integer.MAX_VALUE);
        } catch (Exception e) {
            System.out.println("An error occurred: " + e.getMessage());
            return new Tuple(null, Integer.MAX_VALUE);
        }

        return new Tuple(minSeqNum, minDistance);
    }

    /**
     * Finds the indices of a given word in an array of words.
     *
     * @param words   The array of words.
     * @param target  The target word to find.
     * @return An array of indices where the target word is found.
     */
    private static int[] findIndices(String[] words, String target) {
        int[] indices = new int[words.length];
        int count = 0;

        for (int i = 0; i < words.length; i++) {
            if (words[i].equals(target)) {
                indices[count++] = i;
            }
        }

        return java.util.Arrays.copyOf(indices, count);
    }

    /**
     * A simple Tuple class to hold the line number and distance.
     */
    public static class Tuple {
        private final Integer lineNumber;
        private final int distance;

        public Tuple(Integer lineNumber, int distance) {
            this.lineNumber = lineNumber;
            this.distance = distance;
        }

        public Integer getLineNumber() {
            return lineNumber;
        }

        public int getDistance() {
            return distance;
        }

        @Override
        public String toString() {
            return "(" + lineNumber + ", " + distance + ")";
        }
    }

    public static void main(String[] args) {
        // Example usage
        Tuple result = getMinSeqNumAndDistance("path/to/your/file.txt", "word1", "word2");
        System.out.println(result);
    }
}
```

### Explanation:
1. **Javadoc Comments**: The Javadoc comments provide detailed documentation for the methods and classes.
2. **Method Signature**: The method `getMinSeqNumAndDistance` is defined with the appropriate Java types.
3. **File Handling**: The `BufferedReader` is used to read lines from the file, and it is enclosed in a try-with-resources statement to ensure proper resource management.
4. **Helper Method**: The `findIndices` method is used to find the indices of a given word in a line.
5. **Tuple Class**: A `Tuple` class is defined to encapsulate the line number and distance, similar to the Python tuple.
6. **Exception Handling**: Exceptions are caught and handled similarly to the Python code, returning a default value `(null, Integer.MAX_VALUE)` in case of errors.
7. **Main Method**: An example usage of the `getMinSeqNumAndDistance` method is provided in the `main` method.