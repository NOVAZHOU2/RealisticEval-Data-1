Sure! Below is the equivalent Java method signature for the provided Python function, keeping the same comments:

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/**
 * Finds the minimum distance between two words in a text file, considering each line as a separate sequence.
 *
 * @param filePath The path to the file to read.
 * @param word1    The first word to search for.
 * @param word2    The second word to search for.
 * @return An array where the first element is the line number with the minimum distance and the second element is the minimum distance itself.
 *         If one or both words are not found in any line, returns null.
 */
public static Integer[] getMinSeqNumAndDistance(String filePath, String word1, String word2) {
    // Method implementation will go here
}
```

### Explanation:
- **Method Signature**: `public static Integer[] getMinSeqNumAndDistance(String filePath, String word1, String word2)`
  - `public`: Access modifier indicating that the method can be accessed from anywhere.
  - `static`: Indicates that the method belongs to the class rather than an instance of the class.
  - `Integer[]`: The return type is an array of `Integer` because we need to return two values: the line number and the distance.
  - `getMinSeqNumAndDistance`: The name of the method.
  - Parameters: `String filePath`, `String word1`, `String word2`.

- **Javadoc Comments**: 
  - Javadoc comments are used to document the purpose, parameters, and return value of the method. This helps other developers understand how to use the method.

This Java method signature maintains the same functionality and structure as the original Python function.