Here is the equivalent TypeScript code:

```typescript
import fs from 'fs';
import { promisify } from 'util';

const readFile = promisify(fs.readFile);

async function getMinSeqNumAndDistance(filePath: string, word1: string, word2: string): Promise<[number | null, number]> {
    try {
        const data = await readFile(filePath, 'utf8');
        const lines = data.split('\n');

        let minLine: number | null = null;
        let minDist: number = Infinity;

        for (let i = 0; i < lines.length; i++) {
            const words = lines[i].split(/\s+/);
            const idx1 = words.indexOf(word1);
            const idx2 = words.indexOf(word2);

            if (idx1 !== -1 && idx2 !== -1) {
                const dist = Math.abs(idx1 - idx2);
                if (dist < minDist) {
                    minDist = dist;
                    minLine = i + 1;
                }
            }
        }

        return [minLine, minDist];
    } catch (error) {
        console.error(`Error reading file ${filePath}:`, error);
        return [null, Infinity];
    }
}
```

This TypeScript function reads a file asynchronously using Node.js's `fs` module, splits it into lines, and then iterates over each line to find the minimum distance between the two specified words. It returns a promise that resolves to a tuple containing the line number with the minimum distance and the minimum distance itself. If an error occurs while reading the file or if one or both of the specified words are not found in any line, it returns `[null, Infinity]`.