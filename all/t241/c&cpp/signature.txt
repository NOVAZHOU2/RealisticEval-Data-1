Certainly! Here is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <limits>
#include <utility> // For std::pair

// Finds the minimum distance between two words in a text file, considering each line as a separate sequence.
// Args:
//     file_path (std::string): The path to the file to read.
//     word1 (std::string): The first word to search for.
//     word2 (std::string): The second word to search for.
// Returns:
//     std::pair<int, int>: A pair containing the line number with the minimum distance and the minimum distance itself.
//     Returns (-1, std::numeric_limits<int>::max()) if one or both words are not found in any line.

std::pair<int, int> get_min_seq_num_and_distance(const std::string& file_path, const std::string& word1, const std::string& word2) {
    int min_distance = std::numeric_limits<int>::max();
    int min_seq_num = -1;
    int current_line_number = 0;

    try {
        std::ifstream file(file_path);
        if (!file.is_open()) {
            std::cerr << "Error: The file " << file_path << " does not exist." << std::endl;
            return std::make_pair(-1, min_distance);
        }

        std::string line;
        while (std::getline(file, line)) {
            std::istringstream iss(line);
            std::vector<std::string> words;
            std::string word;
            while (iss >> word) {
                words.push_back(word);
            }

            std::vector<int> word1_indices;
            std::vector<int> word2_indices;
            for (int i = 0; i < words.size(); ++i) {
                if (words[i] == word1) {
                    word1_indices.push_back(i);
                }
                if (words[i] == word2) {
                    word2_indices.push_back(i);
                }
            }

            for (int index1 : word1_indices) {
                for (int index2 : word2_indices) {
                    int distance = std::abs(index1 - index2);
                    if (distance < min_distance) {
                        min_distance = distance;
                        min_seq_num = current_line_number;
                    }
                }
            }

            ++current_line_number;
        }

        file.close();
    } catch (const std::exception& e) {
        std::cerr << "An error occurred: " << e.what() << std::endl;
        return std::make_pair(-1, min_distance);
    }

    return std::make_pair(min_seq_num, min_distance);
}

int main() {
    std::string file_path = "example.txt";
    std::string word1 = "word1";
    std::string word2 = "word2";

    auto result = get_min_seq_num_and_distance(file_path, word1, word2);
    if (result.first != -1) {
        std::cout << "Line number with minimum distance: " << result.first << std::endl;
        std::cout << "Minimum distance: " << result.second << std::endl;
    } else {
        std::cout << "One or both words were not found in any line." << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Headers**: The necessary headers (`<iostream>`, `<fstream>`, `<sstream>`, `<vector>`, `<string>`, `<limits>`, `<utility>`) are included to handle file operations, string manipulation, and exception handling.
2. **Function Documentation**: The function `get_min_seq_num_and_distance` is documented using C++ style comments.
3. **Function Signature**: The function signature is translated to C++ with appropriate types.
4. **File Handling**: The file is opened using `std::ifstream`. If the file does not exist, an error message is printed, and the function returns a pair indicating failure.
5. **Reading Lines**: Each line is read using `std::getline` and split into words using `std::istringstream`.
6. **Index Tracking**: Indices of occurrences of `word1` and `word2` are stored in vectors.
7. **Distance Calculation**: The minimum distance between the indices is calculated and updated if a new minimum is found.
8. **Exception Handling**: Any exceptions during file operations are caught and handled.
9. **Main Function**: A simple example usage of the function is provided in the `main` function.

This ensures that the functionality, logic, and structure of the original Python code are preserved in the C++ version.