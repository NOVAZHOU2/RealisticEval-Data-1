To convert the provided Java code to Python, we will take into account the following key points:
File Handling: In Python, we can use the built-in open() function to read from and write to files.
String Replacement: The str.replace() method in Python can be used to replace substrings.
Error Handling: Python uses try-except blocks for exception handling similar to Java's try-catch.
Below is the converted Python code that mirrors the functionality of the provided Java class:
python
import os

def find_and_replace_in_file(file_path, search_string, replace_string):
    """Finds and replaces text in a specified file.

    Args:
        file_path (str): The path to the file.
        search_string (str): The string to search for.
        replace_string (str): The string to replace with.

    Raises:
        IOError: If an I/O error occurs reading from the file or writing to the file.
    """
    try:
        # Read the content of the file
        with open(file_path, 'r', encoding='utf-8') as file:
            file_content = file.read()

        # Replace the search string with the replacement string
        replaced_content = file_content.replace(search_string, replace_string)

        # Write the replaced content back to the file
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(replaced_content)

    except IOError as e:
        print(f"Error occurred: {e}")

# Example usage
if __name__ == "__main__":
    file_path = "example.txt"  # Specify the file path here
    search_string = "oldText"   # Text to search for
    replace_string = "newText"   # Text to replace with

    find_and_replace_in_file(file_path, search_string, replace_string)
    print("Replacement done successfully.")
Explanation of the Python Code
Function Definition: The function find_and_replace_in_file takes three parameters: file_path, search_string, and replace_string.
File Reading: The file is opened in read mode ('r'), and its content is read into the variable file_content.
String Replacement: The str.replace() method replaces all occurrences of search_string with replace_string.
File Writing: The file is then opened in write mode ('w'), and the modified content is written back to the file.
Error Handling: The try-except block captures IOError, which can occur during file operations, and prints an error message if it occurs.
Main Block: The example usage is provided in a standard if __name__ == "__main__": block to ensure that the code runs only when executed as a script, similar to the main method in Java.
This code will behave similarly to the Java code provided, handling file reading, string replacement, and writing efficiently in Python.