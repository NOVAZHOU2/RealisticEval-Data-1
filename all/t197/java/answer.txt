To convert the provided C++ code into Java, I will ensure to maintain the same functionality and structure. Hereâ€™s the equivalent Java code organized as you requested:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Answer {

    public static List<Integer> findOrder(int n) {
        PrimeGame game = new PrimeGame(n);
        return game.findOrder();
    }

    private static class PrimeGame {
        private int numPlayers;
        private Node head;

        public PrimeGame(int numPlayers) {
            if (numPlayers < 2) {
                throw new IllegalArgumentException("Number of players must be at least 2.");
            }
            this.numPlayers = numPlayers;
            this.head = createCircularLinkedList(numPlayers);
        }

        public List<Integer> findOrder() {
            List<Integer> primes = generatePrimes(numPlayers);
            List<Integer> order = new ArrayList<>();
            Node current = head;
            int remainingPlayers = numPlayers;

            while (remainingPlayers > 1 && !primes.isEmpty()) {
                int step = primes.remove(0) - 1;

                for (int i = 0; i < step; ++i) {
                    current = current.next;
                }

                Node toRemove = current.next;
                order.add(toRemove.data);
                current.next = toRemove.next;
                remainingPlayers--;
            }

            order.add(current.data); // The last remaining player
            return order;
        }

        private Node createCircularLinkedList(int n) {
            Node head = new Node(1);
            Node current = head;

            for (int i = 2; i <= n; ++i) {
                current.next = new Node(i);
                current = current.next;
            }

            current.next = head; // Make the linked list circular
            return head;
        }

        private List<Integer> generatePrimes(int limit) {
            if (limit < 2) {
                return new ArrayList<>(); // No primes less than 2
            }

            boolean[] isPrime = new boolean[limit + 1];
            for (int i = 2; i <= limit; i++) {
                isPrime[i] = true;
            }
            List<Integer> primes = new ArrayList<>();

            for (int i = 2; i * i <= limit; ++i) {
                if (isPrime[i]) {
                    for (int j = i * i; j <= limit; j += i) {
                        isPrime[j] = false;
                    }
                }
            }

            for (int i = 2; i <= limit; ++i) {
                if (isPrime[i]) {
                    primes.add(i);
                }
            }

            return primes;
        }

        private static class Node {
            int data;
            Node next;

            Node(int data) {
                this.data = data;
                this.next = null;
            }
        }
    }
}
```

This Java code maintains the overall structure and logic of the original C++ implementation, using appropriate Java constructs and conventions. If you have any specific requests or need further adjustments, let me know!