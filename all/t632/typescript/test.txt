Hereâ€™s the equivalent Jest test class in TypeScript for the provided Python `unittest` test class:

```typescript
import { parseExpression } from './yourModule'; // Adjust the import to your actual module path

describe('parseExpression', () => {
    test('simple addition', () => {
        const expression = "2 + 2";
        const result = parseExpression(expression);
        expect(result).toEqual(["2", "+", "2"]);
    });

    test('complex expression', () => {
        const expression = "3 + 5 * (2 - 8)";
        const result = parseExpression(expression);
        expect(result).toEqual(["3", "+", "5", "*", "(", "2", "-", "8", ")"]);
    });

    test('negative numbers', () => {
        const expression = "-1 + 4 - 5";
        const result = parseExpression(expression);
        expect(result).toEqual(["-", "1", "+", "4", "-", "5"]);
    });

    test('decimals', () => {
        const expression = "3.5 + 2.1";
        const result = parseExpression(expression);
        expect(result).toEqual(["3.5", "+", "2.1"]);
    });

    test('operators only', () => {
        const expression = "+ - * /";
        const result = parseExpression(expression);
        expect(result).toEqual(["+", "-", "*", "/"]);
    });

    test('empty expression', () => {
        const expression = "";
        const result = parseExpression(expression);
        expect(result.length).toBe(0);
    });

    test('single number', () => {
        const expression = "42";
        const result = parseExpression(expression);
        expect(result).toEqual(["42"]);
    });
});
```

### Key Changes and Explanations:
1. **Test Structure**: The `unittest.TestCase` is replaced with `describe` and `test` blocks from Jest.
2. **Assertions**: The `self.assertEqual` and `self.assertTrue` methods are replaced with Jest's `expect(...).toEqual(...)` and `expect(...).toBe(...)` assertions.
3. **Import Statement**: The function `parseExpression` is imported at the top. You should adjust the path according to your project structure.
4. **TypeScript Syntax**: The TypeScript syntax is used, but since there are no specific types for the test cases, it remains straightforward.

This Jest test suite preserves the functionality and logic of the original Python tests while adapting to TypeScript's syntax and conventions.