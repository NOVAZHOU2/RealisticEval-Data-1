Hereâ€™s the equivalent TypeScript code for the provided Python function signature and docstring:

```typescript
/**
 * Parses a mathematical expression string into a list of tokens.
 * This function identifies both operands (numbers) and operators (+, -, *, /, etc.)
 * in the provided expression and returns them in a list format.
 *
 * @param expression - The mathematical expression to be parsed.
 * @returns An array containing the tokens identified in the expression.
 *          The array will include both operands and operators in the order they appear.
 */
function parseExpression(expression: string): string[] {
    // Implementation will go here
}
```

### Key Changes and Explanations:
1. **Documentation Comments**: The Python docstring is converted to JSDoc format using `/** ... */`, which is the standard for TypeScript documentation.
2. **Type Annotations**: The input parameter and return type are annotated in a way that aligns with TypeScript's syntax, where `expression` is typed as `string` and the return type as `string[]`.
3. **Formatting**: The `@param` and `@returns` tags are used to describe the parameter and return value clearly.

The structure and functionality remain consistent with the original Python signature while adhering to TypeScript conventions.