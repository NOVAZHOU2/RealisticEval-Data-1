Hereâ€™s the equivalent TypeScript code for the provided Python function:

```typescript
function parseExpression(expression: string): string[] {
    const tokens: string[] = [];
    // Regular expression to match numbers (including decimals) and operators
    const regex = /\d+\.?\d*|[+*/()\-]/g;
    // Use regex to find matches in the expression
    const matches = expression.match(regex);
    if (matches) {
        // Add each found token to the list
        tokens.push(...matches);
    }
    return tokens;
}
```

### Key Changes and Explanations:
1. **Type Annotations**: The input parameter `expression` is typed as `string`, and the return type is defined as `string[]` to represent an array of strings.
2. **Regular Expression**: The regex is slightly modified to include the global flag `g`, which allows `match` to return all matches.
3. **Matching**: Instead of using `finditer`, the TypeScript version uses `match`, which directly returns an array of all matches.
4. **Spread Operator**: The `tokens.push(...matches)` syntax is used to spread the array of matches into the `tokens` array. 

This TypeScript function maintains the same functionality and logic as the original Python function.