To convert the provided Python code into C++, we'll maintain the functionality while adapting it to C++ syntax and features. Here's the equivalent C++ code:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <regex>

std::vector<std::string> parse_expression(const std::string& expression) {
    std::vector<std::string> tokens;
    // Regular expression to match numbers (including decimals) and operators
    std::regex regex(R"(\d+\.?\d*|[+*/()\-])");
    auto matches_begin = std::sregex_iterator(expression.begin(), expression.end(), regex);
    auto matches_end = std::sregex_iterator();

    for (std::sregex_iterator i = matches_begin; i != matches_end; ++i) {
        tokens.push_back(i->str());
    }
    return tokens;
}
```

This C++ code uses the `<regex>` library to match patterns, similar to Python's `re` module, and utilizes `std::vector` for dynamic array functionality.