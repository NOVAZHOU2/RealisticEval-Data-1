Here's how you can convert the provided TypeScript Jest test cases into Python's unittest framework. The structure and logic of the tests will be preserved while translating the syntax to Python.
TypeScript Jest Test Cases
typescript
describe('base64ToUrlSafe', () => {
    test('should correctly convert a standard Base64 string to URL-safe format', () => {
        const base64 = "YW55IGNhcm5hbCBwbGVhc3VyZS4+/w==";
        const result = base64ToUrlSafe(base64);
        expect(result).toBe("YW55IGNhcm5hbCBwbGVhc3VyZS4-_w");
    });

    test('should return an empty string when the input is an empty string', () => {
        const base64 = "";
        const result = base64ToUrlSafe(base64);
        expect(result).toBe("");
    });

    test('should remove only the trailing "=" characters', () => {
        const base64 = "dGVzdA==";
        const result = base64ToUrlSafe(base64);
        expect(result).toBe("dGVzdA");
    });

    test('should handle strings without any characters that need replacement', () => {
        const base64 = "dGVzdA";
        const result = base64ToUrlSafe(base64);
        expect(result).toBe("dGVzdA");
    });

    test('should handle a base64 string with multiple "+" and "/" characters', () => {
        const base64 = "aGVsbG8rL3dvcmxkLw==";
        const result = base64ToUrlSafe(base64);
        expect(result).toBe("aGVsbG8rL3dvcmxkLw");
    });

    test('should throw an error when input is not a string', () => {
        expect(() => base64ToUrlSafe((null as unknown) as string)).toThrow(TypeError);
    });
});
Python unittest Test Cases
Hereâ€™s the equivalent Python test code using the unittest framework:
python
import unittest

def base64_to_url_safe(base64: str) -> str:
    """
    Converts a standard Base64 encoded string into a URL-safe Base64 encoded string.
    """
    url_safe_base64 = (
        base64.replace("+", "-")  # Replace all occurrences of "+" with "-"
        .replace("/", "_")        # Replace all occurrences of "/" with "_"
        .rstrip("=")              # Remove any trailing "=" characters
    )
    return url_safe_base64

class TestBase64ToUrlSafe(unittest.TestCase):

    def test_correct_conversion_to_url_safe_format(self):
        base64 = "YW55IGNhcm5hbCBwbGVhc3VyZS4+/w=="
        result = base64_to_url_safe(base64)
        self.assertEqual(result, "YW55IGNhcm5hbCBwbGVhc3VyZS4-_w")

    def test_empty_string_input(self):
        base64 = ""
        result = base64_to_url_safe(base64)
        self.assertEqual(result, "")

    def test_remove_trailing_equals(self):
        base64 = "dGVzdA=="
        result = base64_to_url_safe(base64)
        self.assertEqual(result, "dGVzdA")

    def test_no_replacement_needed(self):
        base64 = "dGVzdA"
        result = base64_to_url_safe(base64)
        self.assertEqual(result, "dGVzdA")

    def test_multiple_plus_and_slash(self):
        base64 = "aGVsbG8rL3dvcmxkLw=="
        result = base64_to_url_safe(base64)
        self.assertEqual(result, "aGVsbG8rL3dvcmxkLw")

    def test_non_string_input(self):
        with self.assertRaises(TypeError):
            base64_to_url_safe(None)  # Testing with None as input

if __name__ == '__main__':
    unittest.main()
Explanation of Changes:
Importing the Unittest Library:
The unittest module is imported to provide the testing framework.
Test Class:
A class TestBase64ToUrlSafe is created to group the test cases, similar to the describe function in Jest.
Test Methods:
Each test case is defined as a method within the class. The method names are adapted to use snake_case, following Python conventions.
Instead of expect(...).toBe(...), Python uses self.assertEqual(...) for assertions.
For the test that checks for exceptions, with self.assertRaises(TypeError): is used to handle expected exceptions.
Main Block:
if __name__ == '__main__': allows the test suite to be run directly.
This structure keeps the logic and flow of the original tests intact while following Python conventions. Let me know if you need any further modifications or explanations!