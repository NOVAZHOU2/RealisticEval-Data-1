Here’s how to translate the provided TypeScript function into Python. The Python version will maintain the same functionality: converting a standard Base64 encoded string into a URL-safe Base64 encoded string.
TypeScript Code
typescript
/**
 * Converts a standard Base64 encoded string into a URL-safe Base64 encoded string.
 *
 * @param {string} base64 - The standard Base64 encoded string to be converted.
 * @returns {string} The URL-safe Base64 encoded string.
 */
export function base64ToUrlSafe(base64: string): string {
    // Replace "+" with "-", "/" with "_", and remove trailing "=" characters
    const urlSafeBase64 = base64
        .replace(/\+/g, "-")  // Replace all occurrences of "+" with "-"
        .replace(/\//g, "_")  // Replace all occurrences of "/" with "_"
        .replace(/=+$/, "");  // Remove any trailing "=" characters
    return urlSafeBase64;
}
Python Code
Here’s the equivalent Python function:
python
def base64_to_url_safe(base64: str) -> str:
    """
    Converts a standard Base64 encoded string into a URL-safe Base64 encoded string.

    :param base64: The standard Base64 encoded string to be converted.
    :return: The URL-safe Base64 encoded string.
    """
    # Replace "+" with "-", "/" with "_", and remove trailing "=" characters
    url_safe_base64 = (
        base64.replace("+", "-")  # Replace all occurrences of "+" with "-"
        .replace("/", "_")        # Replace all occurrences of "/" with "_"
        .rstrip("=")              # Remove any trailing "=" characters
    )
    return url_safe_base64
Explanation of Changes:
Function Definition:
The function name has been changed from base64ToUrlSafe to base64_to_url_safe, following Python's naming conventions (PEP 8).
Docstring:
The TypeScript JSDoc comments have been converted to a Python docstring, which provides the same information about the function's parameters and return value.
String Replacement:
The string replacement logic has been adapted using Python’s string methods. The .replace() method is used similarly to replace + with - and / with _.
The trailing = characters are removed using .rstrip("=") instead of a regex, which is sufficient for this purpose in Python.
Return Statement:
The function returns the modified string just like in TypeScript.
You can use this Python function in the same way as the original TypeScript function, and it will provide the same functionality. Let me know if you have any other questions or need further modifications!