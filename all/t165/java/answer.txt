Here's the equivalent Java code for the provided TypeScript function that converts a standard Base64 encoded string into a URL-safe Base64 encoded string:

```java
import java.util.Base64;

public class Base64Converter {

    /**
     * Converts a standard Base64 encoded string into a URL-safe Base64 encoded string.
     *
     * @param base64 The standard Base64 encoded string to be converted.
     * @return The URL-safe Base64 encoded string.
     */
    public static String base64ToUrlSafe(String base64) {
        // Replace "+" with "-", "/" with "_", and remove trailing "=" characters
        String urlSafeBase64 = base64
                .replace("+", "-")  // Replace all occurrences of "+" with "-"
                .replace("/", "_")  // Replace all occurrences of "/" with "_"
                .replaceAll("=+$", "");  // Remove any trailing "=" characters

        return urlSafeBase64;
    }
    
    public static void main(String[] args) {
        String standardBase64 = "SGVsbG8gV29ybGQ="; // Example Base64 string
        String urlSafe = base64ToUrlSafe(standardBase64);
        System.out.println("URL-safe Base64: " + urlSafe);
    }
}
```

### Explanation:
1. **Imports**: The code uses `java.util.Base64`, but in this case, it's not strictly necessary since we are just manipulating strings.
2. **Method**: The `base64ToUrlSafe` method takes a Base64 string as input and performs replacements similar to the TypeScript code.
3. **String Manipulation**: It uses `replace` for the character replacements and `replaceAll` with a regex to remove trailing `=` characters.
4. **Main Method**: An example usage of the function is provided in the `main` method.