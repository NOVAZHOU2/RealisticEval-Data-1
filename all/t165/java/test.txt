Hereâ€™s the equivalent JUnit 4 test code for the provided Jest test cases in TypeScript, packaged under `org.real.temp` in the `Tester` class:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

public class Tester {

    @Test
    public void testBase64ToUrlSafe_ConvertsStandardBase64() {
        String base64 = "YW55IGNhcm5hbCBwbGVhc3VyZS4+/w==";
        String result = Base64Converter.base64ToUrlSafe(base64);
        assertEquals("YW55IGNhcm5hbCBwbGVhc3VyZS4-_w", result);
    }

    @Test
    public void testBase64ToUrlSafe_EmptyString() {
        String base64 = "";
        String result = Base64Converter.base64ToUrlSafe(base64);
        assertEquals("", result);
    }

    @Test
    public void testBase64ToUrlSafe_RemovesTrailingEquals() {
        String base64 = "dGVzdA==";
        String result = Base64Converter.base64ToUrlSafe(base64);
        assertEquals("dGVzdA", result);
    }

    @Test
    public void testBase64ToUrlSafe_NoReplacementNeeded() {
        String base64 = "dGVzdA";
        String result = Base64Converter.base64ToUrlSafe(base64);
        assertEquals("dGVzdA", result);
    }

    @Test
    public void testBase64ToUrlSafe_MultipleCharacters() {
        String base64 = "aGVsbG8rL3dvcmxkLw==";
        String result = Base64Converter.base64ToUrlSafe(base64);
        assertEquals("aGVsbG8rL3dvcmxkLw", result);
    }

    @Test(expected = TypeError.class)
    public void testBase64ToUrlSafe_NonStringInput() {
        Base64Converter.base64ToUrlSafe(null); // Adjust this to your error handling
    }
}
```

### Explanation:
1. **Imports**: The necessary JUnit classes are imported for testing.
2. **Class Declaration**: The test class is named `Tester` and resides in the specified package.
3. **Test Methods**: Each method corresponds to a test case from the Jest example, using `@Test` annotations.
4. **Assertions**: `assertEquals` is used to check expected values.
5. **Exception Handling**: The last test expects a `TypeError`. You may need to create a custom exception or handle this differently in your Java implementation, as Java does not throw `TypeError` like JavaScript.