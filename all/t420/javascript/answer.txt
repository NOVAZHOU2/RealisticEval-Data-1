Sure! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function readFileAsSequences(filePath) {
    // Read the file and convert each line into an array of words.
    const fs = require('fs');
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const lines = fileContent.split('\n');
    return lines.map(line => line.trim().split(/\s+/));
}

function findClosestWordIndices(sequence, word1, word2) {
    // Find the indices of two words in a sequence and calculate their closest distances.
    let word1Indices = [];
    let word2Indices = [];
    let minDistance = Infinity;

    // Gather indices for both words
    sequence.forEach((word, index) => {
        if (word === word1) {
            word1Indices.push(index);
        } else if (word === word2) {
            word2Indices.push(index);
        }
    });

    // Calculate the minimum distance between all pairs of indices
    word1Indices.forEach(index1 => {
        word2Indices.forEach(index2 => {
            let distance = Math.abs(index1 - index2);
            if (distance < minDistance) {
                minDistance = distance;
            }
        });
    });

    return minDistance;
}

function getMinDistance(filePath, word1, word2) {
    // Determine the minimum distance between two words in any line of a file.
    const sequences = readFileAsSequences(filePath);
    let minDistance = Infinity;
    let minSeqNum = null;

    sequences.forEach((seq, i) => {
        let distance = findClosestWordIndices(seq, word1, word2);
        if (distance < minDistance) {
            minDistance = distance;
            minSeqNum = i;
        }
    });

    return minDistance !== Infinity ? [minSeqNum, minDistance] : [null, null];
}
```

### Explanation:
1. **readFileAsSequences**: This function reads the file content and splits it into lines, then converts each line into an array of words.
   - `fs.readFileSync` is used to read the file synchronously.
   - The `split` method is used to split the file content into lines.
   - The `map` method is used to process each line by trimming and splitting it into an array of words.

2. **findClosestWordIndices**: This function finds the indices of two words in a sequence and calculates their closest distances.
   - It uses `forEach` to iterate over the sequence and collect indices for both words.
   - It then iterates over the collected indices to calculate the minimum distance.

3. **getMinDistance**: This function determines the minimum distance between two words in any line of a file.
   - It calls `readFileAsSequences` to get the sequences from the file.
   - It iterates over each sequence using `forEach` and calls `findClosestWordIndices` to find the minimum distance.
   - It returns the line number (`minSeqNum`) and the minimum distance, or `[null, null]` if no such distance is found.

Make sure you have Node.js installed to run this code, as it uses the `fs` module for file operations.