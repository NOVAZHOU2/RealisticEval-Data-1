To convert the provided Python function into a C++ test class using Catch2, we need to first define the function `get_min_distance` and then write the corresponding tests. Below is the C++ code with the necessary setup for the function and tests using Catch2.

### C++ Code with Catch2

```cpp
#include <catch2/catch_test_macros.hpp>
#include <fstream>
#include <sstream>
#include <string>
#include <unordered_map>
#include <vector>

// Define the function to find the minimum distance between two words in a file
std::pair<int, int> get_min_distance(const std::string& file_path, const std::string& word1, const std::string& word2) {
    std::ifstream file(file_path);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open file");
    }

    std::unordered_map<std::string, std::vector<int>> word_positions;
    std::string line;
    int line_number = 0;

    while (std::getline(file, line)) {
        ++line_number;
        std::istringstream iss(line);
        std::string word;
        while (iss >> word) {
            word_positions[word].push_back(line_number);
        }
    }

    file.close();

    // Find the minimum distance between word1 and word2
    int min_distance = INT_MAX;
    int line_of_min_distance = -1;

    for (const auto& pos1 : word_positions[word1]) {
        for (const auto& pos2 : word_positions[word2]) {
            int distance = std::abs(pos1 - pos2);
            if (distance < min_distance) {
                min_distance = distance;
                line_of_min_distance = pos1; // Assuming pos1 is the reference position
            }
        }
    }

    return {min_distance, line_of_min_distance};
}

TEST_CASE("Test get_min_distance") {
    // Test data setup (create a temporary file for testing)
    const std::string temp_file_path = "temp.txt";
    std::ofstream temp_file(temp_file_path);
    temp_file << "word1 word2 word3\n" << "word4 word5 word6\n" << "word1 word2\n";
    temp_file.close();

    SECTION("Test with valid input") {
        auto [min_distance, line] = get_min_distance(temp_file_path, "word1", "word2");
        REQUIRE(min_distance == 1);
        REQUIRE(line == 3);
    }

    SECTION("Test with no common lines") {
        auto [min_distance, line] = get_min_distance(temp_file_path, "word1", "word4");
        REQUIRE(min_distance == INT_MAX);
        REQUIRE(line == -1);
    }

    // Clean up the temporary file
    std::remove(temp_file_path.c_str());
}
```

### Explanation:
1. **Function Definition**: The `get_min_distance` function reads a file and finds the minimum distance between two specified words (`word1` and `word2`). It returns the minimum distance and the line number where this distance occurred.
2. **Catch2 Test Class**: The `TEST_CASE` macro defines the test suite, and each `SECTION` within it defines individual test cases.
3. **Temporary File Setup**: A temporary file is created for testing purposes, and it is cleaned up after the tests are run.

This approach ensures that the functionality and logic of the original Python test class are preserved in the C++ version using Catch2.