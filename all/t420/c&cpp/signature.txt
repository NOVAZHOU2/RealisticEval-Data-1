Certainly! Below is the C++ version of the given Python function, including comments and type conversions:

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <climits>

/**
 * Find the minimum distance between two specified words (word1 and word2) from the file 
 * and return in which line the distance occurred.
 *
 * @param file_path Path to the file.
 * @param word1 The first word.
 * @param word2 The second word.
 * @return The line number where the minimum distance occurred.
 */
int get_min_distance(const std::string& file_path, const std::string& word1, const std::string& word2) {
    // Implementation goes here
    // ...
    // Placeholder return statement
    return 0;
}
```

In this translation:
- The Python `def` keyword is replaced with the C++ function definition syntax.
- The Python docstring is converted into a C++ style comment block using `/** */`.
- The function parameters and their descriptions are preserved in the C++ documentation.
- The Python type hints `(str)` are implicitly understood in C++ through the use of `std::string`.
- The function signature specifies `const std::string&` for string parameters to indicate they are passed by reference, which is more efficient for strings.
- The return type `int` is used as a placeholder for the line number, assuming that the actual implementation will determine the correct value.

This should give you a clear idea of how to translate the Python function into C++, maintaining its purpose and structure.