Sure, I can help you convert the Python function `get_min_distance` into C++ code. Below is the equivalent C++ code for your Python function:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <climits>

int getMinDistance(const std::string& filePath, const std::string& word1, const std::string& word2) {
    std::ifstream file(filePath);
    if (!file.is_open()) {
        std::cerr << "Error opening file: " << filePath << std::endl;
        return -1; // Return an error code indicating failure
    }

    std::string line;
    int minDistance = INT_MAX;
    int posWord1 = -1;
    int posWord2 = -1;

    int lineNumber = 0;
    while (std::getline(file, line)) {
        lineNumber++;
        std::istringstream iss(line);
        std::string word;

        while (iss >> word) {
            if (word == word1) {
                posWord1 = lineNumber;
            } else if (word == word2) {
                posWord2 = lineNumber;
            }
        }

        if (posWord1 != -1 && posWord2 != -1) {
            int distance = abs(posWord1 - posWord2);
            if (distance < minDistance) {
                minDistance = distance;
            }
        }
    }

    file.close();
    if (minDistance == INT_MAX) {
        return -2; // Return an error code indicating no occurrence of both words
    }
    return minDistance;
}

int main() {
    std::string filePath = "path_to_your_file.txt";
    std::string word1 = "your_word1";
    std::string word2 = "your_word2";

    int result = getMinDistance(filePath, word1, word2);

    if (result == -1) {
        std::cout << "File could not be opened." << std::endl;
    } else if (result == -2) {
        std::cout << "Both words do not appear in the file." << std::endl;
    } else {
        std::cout << "Minimum distance between '" << word1 << "' and '" << word2 << "' is " << result << " lines apart." << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **File Handling**: The C++ code uses `std::ifstream` to open and read the file.
2. **String Processing**: It reads each line and splits it into words using `std::istringstream`.
3. **Tracking Positions**: It keeps track of the positions (line numbers) where `word1` and `word2` appear.
4. **Calculating Distance**: When both words have been found in the same line, it calculates the absolute difference between their positions and updates the minimum distance if necessary.
5. **Error Handling**: If the file cannot be opened or if neither word appears in the file, appropriate error codes are returned.

Make sure to replace `"path_to_your_file.txt"`, `"your_word1"`, and `"your_word2"` with the actual file path and words you want to search for.