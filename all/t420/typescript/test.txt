Sure, let's convert the given Python function and its test cases into TypeScript using Jest.

First, we'll define the `getMinDistance` function in TypeScript:

```typescript
import * as fs from 'fs';

interface LineWords {
  line: number;
  words: string[];
}

function getLines(filePath: string): LineWords[] {
  const lines = fs.readFileSync(filePath, 'utf-8').split('\n');
  return lines.map((line, index) => ({
    line: index + 1,
    words: line.split(/\s+/),
  }));
}

/**
 * Find the minimum distance between two specified words (word1 and word2) from the file and return in which line the distance occurred.
 *
 * @param {string} filePath - Path to the file.
 * @param {string} word1 - First word.
 * @param {string} word2 - Second word.
 * @returns {{line: number, distance: number}} - Object containing the line number and the minimum distance.
 */
function getMinDistance(filePath: string, word1: string, word2: string): { line: number; distance: number } {
  const lines = getLines(filePath);
  let minDistance = Infinity;
  let minDistanceLine = 0;

  lines.forEach(({ line, words }) => {
    const indices = words.reduce<{ [key: string]: number }>((acc, curr, index) => {
      if (curr === word1 || curr === word2) {
        acc[curr] = index;
      }
      return acc;
    }, {});

    if (indices[word1] !== undefined && indices[word2] !== undefined) {
      const distance = Math.abs(indices[word1] - indices[word2]);
      if (distance < minDistance) {
        minDistance = distance;
        minDistanceLine = line;
      }
    }
  });

  return { line: minDistanceLine, distance: minDistance };
}
```

Now, let's write the Jest test suite for this function:

```typescript
import { getMinDistance } from './path/to/getMinDistance'; // Adjust the path as needed

describe('getMinDistance', () => {
  const testFilePath = './testFile.txt'; // Adjust the path to your test file

  beforeEach(() => {
    fs.writeFileSync(testFilePath, 'word1 word2 otherWord word1\nword1 word2 word3 word2\nword2 word1 word4\n');
  });

  afterEach(() => {
    fs.unlinkSync(testFilePath);
  });

  it('should find the minimum distance correctly', () => {
    const result = getMinDistance(testFilePath, 'word1', 'word2');
    expect(result).toEqual({ line: 1, distance: 1 });
  });

  it('should handle cases where words are not in the same line', () => {
    const result = getMinDistance(testFilePath, 'word1', 'word4');
    expect(result).toEqual({ line: 3, distance: 1 });
  });

  it('should handle cases where one of the words does not exist in the file', () => {
    const result = getMinDistance(testFilePath, 'word1', 'nonexistentWord');
    expect(result).toEqual({ line: 0, distance: Infinity });
  });
});
```

### Explanation:
1. **Function Definition**: 
   - We define a helper function `getLines` to read the file and split it into lines and words.
   - `getMinDistance` iterates over each line, finds the indices of `word1` and `word2`, calculates the distance, and keeps track of the minimum distance found.

2. **Test Suite**:
   - `beforeEach` sets up a temporary test file with predefined content.
   - `afterEach` cleans up the test file after each test case.
   - Each test case verifies specific scenarios using Jest's `expect` assertions.

This setup ensures that the functionality of the original Python unittest is preserved and adapted to Jest in TypeScript.