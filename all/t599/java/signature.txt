Hereâ€™s the equivalent Java code for the provided C++ class `MaxHeap`, including appropriate comments and structure:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

/**
 * MaxHeap class implements a max heap data structure.
 */
public class MaxHeap {
    private List<Integer> heap; // List to store heap elements

    /**
     * Constructor to initialize the heap.
     */
    public MaxHeap() {
        heap = new ArrayList<>();
    }

    /**
     * Helper function to maintain the max heap property.
     *
     * @param index The index of the element to heapify up.
     */
    private void heapifyUp(int index) {
        if (index == 0) return; // If the index is 0, it's already the root
        int parentIndex = (index - 1) / 2; // Calculate the parent index

        // If the current node is greater than its parent, swap them
        if (heap.get(index) > heap.get(parentIndex)) {
            swap(index, parentIndex);
            heapifyUp(parentIndex); // Recursively heapify up
        }
    }

    /**
     * Helper function to maintain the max heap property after deletion.
     *
     * @param index The index of the element to heapify down.
     */
    private void heapifyDown(int index) {
        int leftChild = 2 * index + 1; // Left child index
        int rightChild = 2 * index + 2; // Right child index
        int largest = index;

        // Check if left child exists and is greater than current largest
        if (leftChild < heap.size() && heap.get(leftChild) > heap.get(largest)) {
            largest = leftChild;
        }

        // Check if right child exists and is greater than current largest
        if (rightChild < heap.size() && heap.get(rightChild) > heap.get(largest)) {
            largest = rightChild;
        }

        // If largest is not the current index, swap and heapify down
        if (largest != index) {
            swap(index, largest);
            heapifyDown(largest); // Recursively heapify down
        }
    }

    /**
     * Inserts a new element into the heap.
     *
     * @param value The value to be inserted.
     */
    public void insert(int value) {
        heap.add(value); // Add value to the end of the list
        heapifyUp(heap.size() - 1); // Restore the heap property
    }

    /**
     * Removes and returns the maximum element from the heap.
     *
     * @return The maximum element in the heap.
     * @throws IllegalStateException if the heap is empty.
     */
    public int extractMax() {
        if (heap.isEmpty()) {
            throw new IllegalStateException("Heap is empty");
        }

        int maxElement = heap.get(0); // Store the max element
        heap.set(0, heap.get(heap.size() - 1)); // Move the last element to the root
        heap.remove(heap.size() - 1); // Remove the last element
        heapifyDown(0); // Restore the heap property
        return maxElement; // Return the max element
    }

    /**
     * Gets the maximum element without removing it.
     *
     * @return The maximum element in the heap.
     * @throws IllegalStateException if the heap is empty.
     */
    public int getMax() {
        if (heap.isEmpty()) {
            throw new IllegalStateException("Heap is empty");
        }
        return heap.get(0); // Return the root element
    }

    /**
     * Checks if the heap is empty.
     *
     * @return true if the heap is empty, false otherwise.
     */
    public boolean isEmpty() {
        return heap.isEmpty();
    }

    /**
     * Gets the size of the heap.
     *
     * @return The number of elements in the heap.
     */
    public int size() {
        return heap.size();
    }

    /**
     * Swaps two elements in the heap.
     *
     * @param index1 The index of the first element.
     * @param index2 The index of the second element.
     */
    private void swap(int index1, int index2) {
        int temp = heap.get(index1);
        heap.set(index1, heap.get(index2));
        heap.set(index2, temp);
    }
}
```

### Key Changes:
1. **Package Declaration**: The Java code starts with a package declaration.
2. **Data Structure**: Uses `List<Integer>` instead of `std::vector<int>`.
3. **Exception Handling**: Uses `IllegalStateException` for error handling.
4. **Method and Class Comments**: Translated C++ comments into Javadoc style comments.
5. **Swap Method**: Introduced a private `swap` method to encapsulate the swapping logic. 

This Java implementation retains the original functionality and structure of the C++ code while adhering to Java conventions.