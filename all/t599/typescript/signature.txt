Hereâ€™s the conversion of the provided C++ class signatures and comments into their TypeScript equivalents:

```typescript
class MaxHeap {
    private heap: number[]; // Array to store heap elements

    // Helper function to maintain the max heap property
    private heapifyUp(index: number): void {}

    // Helper function to maintain the max heap property after deletion
    private heapifyDown(index: number): void {}

    // Insert a new element into the heap
    public insert(value: number): void {}

    // Remove and return the maximum element from the heap
    public extractMax(): number {}

    // Get the maximum element without removing it
    public getMax(): number {}

    // Check if the heap is empty
    public isEmpty(): boolean {}

    // Get the size of the heap
    public size(): number {}
}
```

### Key Changes Made:
1. **Array Declaration**: Changed `std::vector<int>` to `number[]` for the heap.
2. **Access Modifiers**: Added `public` and `private` keywords for method visibility.
3. **Type Annotations**: Converted C++ types to their TypeScript equivalents (`int` to `number`, `size_t` to `number`).
4. **Comments**: C++ comments were adapted to TypeScript-style comments (single-line comments with `//` and multi-line comments with `/* */` remain unchanged). 

This structure maintains the original functionality while adapting it to TypeScript syntax.