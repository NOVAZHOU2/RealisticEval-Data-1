Here's the equivalent Catch2 test case for the provided JavaScript Jest test case:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>

// Assuming the validURL function is defined somewhere
bool validURL(const std::string& str);

TEST_CASE("validURL", "[url]") {
    SECTION("validates a standard HTTP URL") {
        std::string url = "http://www.example.com";
        REQUIRE(validURL(url) == true);
    }

    SECTION("validates a secure HTTPS URL") {
        std::string url = "https://www.example.com";
        REQUIRE(validURL(url) == true);
    }

    SECTION("rejects a malformed URL") {
        std::string url = "htp:/www.example.com";
        REQUIRE(validURL(url) == false);
    }
}
```

### Explanation:
1. **Catch2 Configuration**: `#define CATCH_CONFIG_MAIN` includes the main function for Catch2.
2. **Function Declaration**: The `validURL` function is assumed to be defined elsewhere.
3. **TEST_CASE**: A Catch2 test case is created using `TEST_CASE`, similar to the `describe` block in Jest.
4. **SECTION**: Each test is encapsulated in a `SECTION`, allowing multiple tests to be run within the same test case.
5. **REQUIRE**: Assertions are made using `REQUIRE`, analogous to Jest's `expect().toBe()`. 

You can compile this code with a Catch2 setup to run your tests.