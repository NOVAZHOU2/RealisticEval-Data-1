Here's the equivalent Python code for the provided TypeScript function. The code retains the same logic to compute the time difference between a specified date and the current time, returning it in a human-readable format.
python
from datetime import datetime, timedelta

def get_timestamp(created_at: datetime) -> str:
    now = datetime.now()
    diff_in_seconds = int((now - created_at).total_seconds())
    
    # Define time intervals in seconds
    intervals = {
        'year': 31536000,
        'month': 2592000,
        'week': 604800,
        'day': 86400,
        'hour': 3600,
        'minute': 60,
    }
    
    # Determine the most appropriate time interval and its unit
    interval_count = 0
    interval_unit = ''
    
    if diff_in_seconds >= intervals['year']:
        interval_count = diff_in_seconds // intervals['year']
        interval_unit = 'year' if interval_count == 1 else 'years'
    elif diff_in_seconds >= intervals['month']:
        interval_count = diff_in_seconds // intervals['month']
        interval_unit = 'month' if interval_count == 1 else 'months'
    elif diff_in_seconds >= intervals['week']:
        interval_count = diff_in_seconds // intervals['week']
        interval_unit = 'week' if interval_count == 1 else 'weeks'
    elif diff_in_seconds >= intervals['day']:
        interval_count = diff_in_seconds // intervals['day']
        interval_unit = 'day' if interval_count == 1 else 'days'
    elif diff_in_seconds >= intervals['hour']:
        interval_count = diff_in_seconds // intervals['hour']
        interval_unit = 'hour' if interval_count == 1 else 'hours'
    elif diff_in_seconds >= intervals['minute']:
        interval_count = diff_in_seconds // intervals['minute']
        interval_unit = 'minute' if interval_count == 1 else 'minutes'
    else:
        interval_count = diff_in_seconds
        interval_unit = 'second' if interval_count == 1 else 'seconds'
    
    return f"{interval_count} {interval_unit} ago"
Explanation:
Import Statements:
The datetime module from Python's standard library is imported to work with date and time objects.
Function Definition:
The function get_timestamp takes a single argument created_at, which is expected to be a datetime object.
Current Time Calculation:
The current time is obtained using datetime.now().
Time Difference Calculation:
The difference in seconds is calculated using the total_seconds() method, which returns the total number of seconds in a timedelta object.
Time Intervals:
A dictionary intervals is defined to store various time intervals in seconds.
Interval Calculation:
Conditional statements check which interval is the most appropriate based on the diff_in_seconds, updating interval_count and interval_unit accordingly.
Return Value:
The function returns a formatted string indicating the time elapsed since created_at.
Usage Example:
To use this function, you can create a datetime object and pass it to get_timestamp.
python
# Example usage
created_at = datetime(2023, 10, 1, 12, 0, 0)  # October 1, 2023, at 12:00 PM
print(get_timestamp(created_at))  # Output will vary depending on the current date and time
This Python implementation provides similar functionality to the original TypeScript code.