Certainly! Below is the equivalent TypeScript code using Jest for testing the `isPointOnLine` function. The provided Python unittest class will be converted into a Jest test suite with the appropriate assertions.

### TypeScript Code

First, let's define the `isPointOnLine` function in TypeScript:

```typescript
function isPointOnLine(A: [number, number], B: [number, number], C: [number, number]): boolean {
    const [x_a, y_a] = A;
    const [x_b, y_b] = B;
    const [x_c, y_c] = C;

    // Handle the vertical line case where the x-coordinates of points A and B are the same
    if (x_a === x_b) {
        return x_c === x_a;  // C must also have the same x-coordinate
    }

    // Calculate slopes using the formula (y2 - y1) / (x2 - x1)
    // Check if slopes of AC and BC are equal
    return (y_c - y_a) * (x_b - x_a) === (y_b - y_a) * (x_c - x_a);
}
```

### Jest Test Suite

Now, let's write the Jest test suite:

```typescript
import { isPointOnLine } from './path-to-your-function'; // Replace with the actual path

describe('isPointOnLine', () => {
    it('should return true when point C is on the line formed by points A and B', () => {
        const A: [number, number] = [0, 0];
        const B: [number, number] = [10, 10];
        const C: [number, number] = [5, 5];
        expect(isPointOnLine(A, B, C)).toBe(true);
    });

    it('should return false when point C is not on the line formed by points A and B', () => {
        const A: [number, number] = [0, 0];
        const B: [number, number] = [10, 10];
        const C: [number, number] = [5, 6];
        expect(isPointOnLine(A, B, C)).toBe(false);
    });

    it('should return true for a vertical line', () => {
        const A: [number, number] = [5, 0];
        const B: [number, number] = [5, 10];
        const C: [number, number] = [5, 5];
        expect(isPointOnLine(A, B, C)).toBe(true);
    });

    it('should return true for a horizontal line', () => {
        const A: [number, number] = [0, 5];
        const B: [number, number] = [10, 5];
        const C: [number, number] = [5, 5];
        expect(isPointOnLine(A, B, C)).toBe(true);
    });

    it('should return false for a point not on a vertical line', () => {
        const A: [number, number] = [5, 0];
        const B: [number, number] = [5, 10];
        const C: [number, number] = [6, 5];
        expect(isPointOnLine(A, B, C)).toBe(false);
    });
});
```

### Explanation:
1. **Function Definition**: The `isPointOnLine` function is defined with proper type annotations.
2. **Import Statement**: Import the `isPointOnLine` function from the appropriate module.
3. **Test Suite**: The `describe` block sets up the test suite for `isPointOnLine`.
4. **Test Cases**:
   - Each `it` block represents a specific test case.
   - `expect` is used to assert the expected behavior of the function.
   - The test cases cover various scenarios, including points on the line, points not on the line, vertical lines, and horizontal lines.

This TypeScript code preserves the functionality and logic of the original Python unittest class, using Jest for testing.