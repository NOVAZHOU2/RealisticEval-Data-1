Sure, I can help you convert the Python unittest test class to a TypeScript test case using Jest. Here's how you can do it:

First, let's define the `is_point_on_line` function in TypeScript:

```typescript
function isPointOnLine(A: number[], B: number[], C: number[]): boolean {
    // Calculate the area of the triangle formed by points A, B, and C
    const area = 0.5 * Math.abs(
        A[0] * (B[1] - C[1]) +
        B[0] * (C[1] - A[1]) +
        C[0] * (A[1] - B[1])
    );

    // If the area is zero, then points A, B, and C are collinear
    return area === 0;
}
```

Next, we'll create a Jest test case for this function:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('isPointOnLine', () => {
    it('should return true if point C is on the line formed by points A and B', () => {
        const A: number[] = [1, 2];
        const B: number[] = [3, 4];
        const C: number[] = [2, 3];

        expect(isPointOnLine(A, B, C)).toBe(true);
    });

    it('should return false if point C is not on the line formed by points A and B', () => {
        const A: number[] = [1, 2];
        const B: number[] = [3, 4];
        const C: number[] = [5, 6];

        expect(isPointOnLine(A, B, C)).toBe(false);
    });
});
```

In this TypeScript test case, we're using Jest's `describe`, `it`, and `expect` functions to write our tests. The `describe` block groups related tests together, and the `it` blocks contain individual test cases. We're using the `expect` function to assert that the output of `isPointOnLine` matches our expectations.

Make sure you have Jest installed in your project. You can install it using npm or yarn:

```sh
npm install --save-dev jest
```

or

```sh
yarn add --dev jest
```

Then, you can run your tests using the following command:

```sh
npx jest
```

or

```sh
yarn test
```