Hereâ€™s the equivalent code in C++ that checks whether point C is on the line formed by points A and B:

```cpp
#include <iostream>
#include <vector>

bool is_point_on_line(const std::vector<int>& A, const std::vector<int>& B, const std::vector<int>& C) {
    // Check if A, B, and C are collinear using the area of the triangle method
    return (B[1] - A[1]) * (C[0] - A[0]) == (C[1] - A[1]) * (B[0] - A[0]);
}

int main() {
    std::vector<int> A = {1, 2}; // Example point A
    std::vector<int> B = {3, 4}; // Example point B
    std::vector<int> C = {2, 3}; // Example point C

    if (is_point_on_line(A, B, C)) {
        std::cout << "Point C is on the line formed by points A and B." << std::endl;
    } else {
        std::cout << "Point C is not on the line formed by points A and B." << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Signature**: The function `is_point_on_line` takes three vectors representing points A, B, and C.
2. **Collinearity Check**: It uses the cross product method to check if the area of the triangle formed by the points A, B, and C is zero, indicating collinearity.
3. **Main Function**: It provides an example usage of the function, printing whether point C is on the line formed by points A and B. 

Feel free to modify the points in the `main` function to test with different coordinates!