Certainly! Below is the equivalent C++ code for the given Python function. The code will maintain the same functionality and logic but will be adapted to use C++ syntax and features.

```cpp
#include <iostream>
#include <vector>

// Function to check whether point C is on the line formed by points A and B
bool is_point_on_line(const std::vector<int>& A, const std::vector<int>& B, const std::vector<int>& C) {
    int x_a = A[0], y_a = A[1];
    int x_b = B[0], y_b = B[1];
    int x_c = C[0], y_c = C[1];

    // Handle the vertical line case where the x-coordinates of points A and B are the same
    if (x_a == x_b) {
        return x_c == x_a;  // C must also have the same x-coordinate
    }

    // Calculate slopes using the formula (y2 - y1) / (x2 - x1)
    // Check if slopes of AC and BC are equal
    return (y_c - y_a) * (x_b - x_a) == (y_b - y_a) * (x_c - x_a);
}

int main() {
    // Example usage
    std::vector<int> A = {1, 2};
    std::vector<int> B = {3, 4};
    std::vector<int> C = {2, 3};

    bool result = is_point_on_line(A, B, C);
    std::cout << "Is point C on the line formed by points A and B? " << (result ? "Yes" : "No") << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Definition**: The `is_point_on_line` function takes three `std::vector<int>` parameters representing the coordinates of points A, B, and C.
2. **Variable Extraction**: The coordinates of each point are extracted from the vectors.
3. **Vertical Line Case**: If the x-coordinates of points A and B are the same, it checks if point C has the same x-coordinate.
4. **Slope Calculation**: It calculates the slopes of lines AC and BC using the formula `(y2 - y1) / (x2 - x1)` and checks if they are equal.
5. **Main Function**: An example usage is provided in the `main` function to demonstrate how to call the `is_point_on_line` function and print the result.