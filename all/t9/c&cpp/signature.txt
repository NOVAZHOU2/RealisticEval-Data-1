Here's how you can convert the Python function signature to a C++ function signature while keeping the comments:

```cpp
#include <vector>

/**
 * Check whether a point is on a line formed by two other points.
 *
 * @param A The coordinates of point A [x, y].
 * @param B The coordinates of point B [x, y].
 * @param C The coordinates of point C [x, y].
 * @return True if point C is on the line formed by points A and B, False otherwise.
 */
bool isPointOnLine(const std::vector<int>& A, const std::vector<int>& B, const std::vector<int>& C);
```

### Explanation:
- `#include <vector>`: This includes the standard vector library which is used for storing the points.
- `const std::vector<int>&`: This indicates that the function takes constant references to vectors of integers, which represent the coordinates of the points. Using references avoids copying the data, making the function more efficient.
- `bool isPointOnLine(...)`: This defines the function name and return type.

This C++ function signature should be placed in your header file (.h or .hpp) so that it can be included and used in your C++ source files.