To convert the given Python unittest test class to a C++ test case using Catch2, we need to implement the `is_point_on_line` function in C++ and then write the corresponding test cases. Hereâ€™s how you can do it:

### C++ Implementation with Catch2

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>

bool is_point_on_line(const std::vector<int>& A, const std::vector<int>& B, const std::vector<int>& C) {
    // Using the determinant approach to check if points are collinear
    return (B[0] - A[0]) * (C[1] - A[1]) == (B[1] - A[1]) * (C[0] - A[0]);
}

TEST_CASE("is_point_on_line tests") {
    SECTION("Point C is on line AB") {
        std::vector<int> A = {0, 0};
        std::vector<int> B = {2, 2};
        std::vector<int> C = {1, 1};
        REQUIRE(is_point_on_line(A, B, C) == true);
    }

    SECTION("Point C is not on line AB") {
        std::vector<int> A = {0, 0};
        std::vector<int> B = {2, 2};
        std::vector<int> C = {1, 2};
        REQUIRE(is_point_on_line(A, B, C) == false);
    }

    SECTION("C coincides with A") {
        std::vector<int> A = {1, 1};
        std::vector<int> B = {2, 2};
        std::vector<int> C = {1, 1};
        REQUIRE(is_point_on_line(A, B, C) == true);
    }

    SECTION("C coincides with B") {
        std::vector<int> A = {0, 0};
        std::vector<int> B = {2, 2};
        std::vector<int> C = {2, 2};
        REQUIRE(is_point_on_line(A, B, C) == true);
    }
}
```

### Explanation

- **Function Definition**: The `is_point_on_line` function checks if point C lies on the line defined by points A and B using the cross product method.
- **Test Cases**: Each test case checks different scenarios, ensuring that point C is on or off the line formed by points A and B.
- **Catch2**: The tests are written using Catch2's `REQUIRE` macro to assert conditions.

You can run this code in an environment that supports C++ and Catch2 to validate that the functionality works as intended.