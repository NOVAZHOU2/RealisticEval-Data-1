Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

Here is the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>

// Function to check whether point C is on the line formed by points A and B
bool is_point_on_line(const std::vector<int>& A, const std::vector<int>& B, const std::vector<int>& C) {
    int x_a = A[0], y_a = A[1];
    int x_b = B[0], y_b = B[1];
    int x_c = C[0], y_c = C[1];

    // Handle the vertical line case where the x-coordinates of points A and B are the same
    if (x_a == x_b) {
        return x_c == x_a;  // C must also have the same x-coordinate
    }

    // Calculate slopes using the formula (y2 - y1) / (x2 - x1)
    // Check if slopes of AC and BC are equal
    return (y_c - y_a) * (x_b - x_a) == (y_b - y_a) * (x_c - x_a);
}

TEST_CASE("Test Point On Line", "[point_on_line]") {
    SECTION("Point on line") {
        std::vector<int> A = {0, 0};
        std::vector<int> B = {10, 10};
        std::vector<int> C = {5, 5};
        REQUIRE(is_point_on_line(A, B, C));
    }

    SECTION("Point not on line") {
        std::vector<int> A = {0, 0};
        std::vector<int> B = {10, 10};
        std::vector<int> C = {5, 6};
        REQUIRE_FALSE(is_point_on_line(A, B, C));
    }

    SECTION("Vertical line") {
        std::vector<int> A = {5, 0};
        std::vector<int> B = {5, 10};
        std::vector<int> C = {5, 5};
        REQUIRE(is_point_on_line(A, B, C));
    }

    SECTION("Horizontal line") {
        std::vector<int> A = {0, 5};
        std::vector<int> B = {10, 5};
        std::vector<int> C = {5, 5};
        REQUIRE(is_point_on_line(A, B, C));
    }

    SECTION("Point not on vertical line") {
        std::vector<int> A = {5, 0};
        std::vector<int> B = {5, 10};
        std::vector<int> C = {6, 5};
        REQUIRE_FALSE(is_point_on_line(A, B, C));
    }
}

int main(int argc, char* argv[]) {
    // Run Catch2 tests
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Header Inclusion**: The Catch2 header is included at the beginning of the file.
2. **Function Definition**: The `is_point_on_line` function is defined with the appropriate C++ type signatures (`const std::vector<int>&` for the input points).
3. **Test Suite**: The `TEST_CASE` macro defines a test suite named "Test Point On Line".
4. **Sections**: Each `SECTION` within the test suite corresponds to a specific test case.
5. **Assertions**:
   - `REQUIRE` is used to assert that a condition is true.
   - `REQUIRE_FALSE` is used to assert that a condition is false.
6. **Main Function**: The `main` function runs the Catch2 tests.

This ensures that the functionality and logic of the original Python unittest class are preserved in the C++ version using Catch2.