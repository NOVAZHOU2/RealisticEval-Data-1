Here's how you can convert your Python unittest test class to a JavaScript test case using Jest:

```javascript
const { readTsvFromStdin } = require('./yourModule'); // Replace 'yourModule' with the actual module name

describe('readTsvFromStdin', () => {
  it('should return an array of rows when TSV data is provided', () => {
    const mockStdin = 'col1\tcol2\ncol3\tcol4';
    process.stdin.read = jest.fn(() => mockStdin);
    
    const result = readTsvFromStdin();
    
    expect(result).toEqual([['col1', 'col2'], ['col3', 'col4']]);
  });

  it('should pad shorter rows with empty strings', () => {
    const mockStdin = 'col1\tcol2\tcol3\ncol4';
    process.stdin.read = jest.fn(() => mockStdin);
    
    const result = readTsvFromStdin();
    
    expect(result).toEqual([['col1', 'col2', 'col3'], ['col4', '', '']]);
  });
});
```

In this example, we're using Jest's `describe` function to create a test suite for the `readTsvFromStdin` function. We're also using `it` to define individual tests. 

We're mocking the `process.stdin.read` method using Jest's `jest.fn()` function to simulate providing TSV data to the function. Then we're calling the `readTsvFromStdin` function and checking if the returned result matches our expectations using Jest's `expect` function.