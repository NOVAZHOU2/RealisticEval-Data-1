Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Answer {

    /**
     * Reads tab-separated values (TSV) from standard input and returns a list of rows.
     * 
     * Each row is represented as a list of strings. If rows have unequal lengths,
     * they are padded with empty strings to ensure all rows have the same length.
     * 
     * @return A list of lists, where each inner list represents a row of data.
     */
    public static List<List<String>> readTSVFromStdin() {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        List<List<String>> data = new ArrayList<>();
        String line;

        try {
            while ((line = reader.readLine()) != null) {
                String[] row = line.split("\t");
                data.add(List.of(row));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        int maxColumns = data.isEmpty() ? 0 : data.stream()
                .mapToInt(row -> row.size())
                .max()
                .orElse(0);

        List<List<String>> paddedData = new ArrayList<>();
        for (List<String> row : data) {
            List<String> paddedRow = new ArrayList<>(row);
            paddedRow.addAll(List.of(new String[maxColumns - row.size()]));
            paddedData.add(paddedRow);
        }

        return paddedData;
    }

    public static void main(String[] args) {
        List<List<String>> paddedData = readTSVFromStdin();
        // Example output (for demonstration purposes)
        for (List<String> row : paddedData) {
            System.out.println(row);
        }
    }
}
```

### Explanation:
1. **Package and Class Definition**: The Java code is defined within the package `org.real.temp` and the class `Answer`.
2. **Javadoc Comments**: The Javadoc comments provide a detailed description of the method, its purpose, and its return type.
3. **BufferedReader**: Used to read lines from standard input (`System.in`).
4. **Splitting Lines**: Each line is split using the tab character (`\t`) as the delimiter.
5. **Padding Rows**: The maximum number of columns is determined, and each row is padded with empty strings to ensure all rows have the same length.
6. **Exception Handling**: An `IOException` is caught and printed to standard error if reading from standard input fails.
7. **Main Method**: The `main` method demonstrates how the `readTSVFromStdin` method can be called and used.

This Java code preserves the original functionality and structure of the Python code while adhering to Java's syntax and conventions.