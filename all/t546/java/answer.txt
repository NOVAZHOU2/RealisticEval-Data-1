Sure, here's how you can translate your Python function `read_tsv_from_stdin` into Java:

```java
package org.real.temp;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Answer {

    public static List<List<String>> readTsvFromStdin() {
        /**
         * Reads tab-separated values (TSV) from standard input and returns a list of rows.
         *
         * Each row is represented as a list of strings. If rows have unequal lengths,
         * they are padded with empty strings to ensure all rows have the same length.
         *
         * @return List of lists, where each inner list represents a row of data.
         */
        
        List<List<String>> rows = new ArrayList<>();
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String line;

        try {
            while ((line = reader.readLine()) != null) {
                String[] columns = line.split("\t");
                List<String> row = new ArrayList<>();

                for (String column : columns) {
                    row.add(column);
                }

                // Pad row if necessary
                while (row.size() < columns.length) {
                    row.add("");
                }

                rows.add(row);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                reader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        return rows;
    }

    public static void main(String[] args) {
        List<List<String>> tsvData = readTsvFromStdin();
        for (List<String> row : tsvData) {
            System.out.println(row);
        }
    }
}
```

### Explanation:
- **BufferedReader**: Used to read lines from the standard input (`System.in`).
- **split("\t")**: Splits each line by tabs to get individual columns.
- **ArrayList**: Used to store the rows and columns.
- **finally**: Ensures that the `BufferedReader` is closed properly even if an exception occurs.

This Java code should behave similarly to your original Python function.