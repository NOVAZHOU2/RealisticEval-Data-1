Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest test class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It will use appropriate JUnit annotations and assertion methods to preserve the functionality and logic of the tests.

### Java Code

```java
package org.real.temp;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class Tester {

    @Mock
    private InputStream mockStdin;

    @BeforeEach
    void setUp() {
        // Set up the mock standard input stream
        System.setIn(mockStdin);
    }

    @Test
    void testBasicTsvInput() {
        String input = "col1\tcol2\tcol3\nval1\tval2\tval3\n";
        when(mockStdin.readAllBytes()).thenReturn(input.getBytes());

        List<List<String>> expectedOutput = List.of(
            List.of("col1", "col2", "col3"),
            List.of("val1", "val2", "val3")
        );

        List<List<String>> actualOutput = readTsvFromStdin();

        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    void testSingleColumn() {
        String input = "col1\nval1\nval2\n";
        when(mockStdin.readAllBytes()).thenReturn(input.getBytes());

        List<List<String>> expectedOutput = List.of(
            List.of("col1"),
            List.of("val1"),
            List.of("val2")
        );

        List<List<String>> actualOutput = readTsvFromStdin();

        assertEquals(expectedOutput, actualOutput);
    }

    // Utility method to simulate reading TSV from stdin
    private List<List<String>> readTsvFromStdin() {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        List<List<String>> data = new ArrayList<>();
        String line;

        try {
            while ((line = reader.readLine()) != null) {
                String[] row = line.split("\t");
                data.add(List.of(row));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        int maxColumns = data.isEmpty() ? 0 : data.stream()
                .mapToInt(row -> row.size())
                .max()
                .orElse(0);

        List<List<String>> paddedData = new ArrayList<>();
        for (List<String> row : data) {
            List<String> paddedRow = new ArrayList<>(row);
            paddedRow.addAll(List.of(new String[maxColumns - row.size()]));
            paddedData.add(paddedRow);
        }

        return paddedData;
    }
}
```

### Explanation:
1. **Package and Class Definition**: The Java test class is defined within the package `org.real.temp` and named `Tester`.
2. **JUnit Annotations**:
   - `@ExtendWith(MockitoExtension.class)`: Extends the test class with Mockito support.
   - `@BeforeEach`: Sets up the mock standard input stream before each test.
   - `@Test`: Marks methods as test cases.
3. **Mockito Setup**:
   - `@Mock`: Mocks the `InputStream` for standard input.
   - `when(mockStdin.readAllBytes()).thenReturn(input.getBytes())`: Sets up the mock input stream to return the desired input.
4. **Test Methods**:
   - `testBasicTsvInput`: Tests basic TSV input with multiple columns.
   - `testSingleColumn`: Tests single-column TSV input.
5. **Assertion**:
   - `assertEquals(expectedOutput, actualOutput)`: Compares the expected output with the actual output.
6. **Utility Method**:
   - `readTsvFromStdin`: Simulates reading TSV from standard input and pads the rows as needed.

This Java code preserves the functionality and logic of the Python unittest test class while adhering to Java's syntax and JUnit conventions.