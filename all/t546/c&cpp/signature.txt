Sure! Here's how you can translate the Python function `read_tsv_from_stdin` into C++ while keeping the comments:

```cpp
#include <iostream>
#include <vector>
#include <string>

/**
 * @brief Reads tab-separated values (TSV) from standard input and returns a vector of vectors.
 *
 * Each inner vector represents a row of data. Rows with unequal lengths are padded with empty strings
 * to ensure all rows have the same length.
 *
 * @return std::vector<std::vector<std::string>> A vector of vectors, where each inner vector represents a row of data.
 */
std::vector<std::vector<std::string>> read_tsv_from_stdin() {
    std::vector<std::vector<std::string>> rows;
    std::string line;

    // Read lines from standard input until EOF
    while (std::getline(std::cin, line)) {
        std::vector<std::string> row;
        size_t start = 0;
        size_t end = line.find('\t');

        // Split the line by tabs
        while (end != std::string::npos) {
            row.push_back(line.substr(start, end - start));
            start = end + 1;
            end = line.find('\t', start);
        }

        // Add the last element if there's any trailing text after the last tab
        if (start < line.length()) {
            row.push_back(line.substr(start));
        }

        // Pad the row with empty strings if it has fewer elements than the longest row so far
        if (!rows.empty() && row.size() < rows.front().size()) {
            row.resize(rows.front().size());
        }

        rows.push_back(row);

        // Pad the current row with empty strings if it has more elements than the longest row so far
        if (!rows.empty() && row.size() > rows.front().size()) {
            for (size_t i = 0; i < rows.size(); ++i) {
                rows[i].resize(row.size(), "");
            }
        }
    }

    return rows;
}
```

### Explanation:
- **Include Headers**: The necessary headers (`<iostream>`, `<vector>`, `<string>`) are included at the top.
- **Function Signature**: The function `read_tsv_from_stdin` is defined with a return type of `std::vector<std::vector<std::string>>`.
- **Reading Input**: The function reads lines from standard input using `std::getline(std::cin, line)`.
- **Splitting Lines**: The function splits each line by tabs (`'\t'`) and stores the resulting substrings in a vector.
- **Padding Rows**: If a row has fewer elements than the longest row encountered so far, it is padded with empty strings.
- **Handling Trailing Text**: If there is any text after the last tab, it is added as an additional element in the row.
- **Returning Results**: The function returns the vector of vectors representing the TSV data.

This C++ version should perform similarly to the original Python function.