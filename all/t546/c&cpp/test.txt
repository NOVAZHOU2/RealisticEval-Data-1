Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted to a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>

// Function to read TSV from standard input and pad rows
std::vector<std::vector<std::string>> read_tsv_from_stdin() {
    std::vector<std::vector<std::string>> data;
    std::string line;

    // Read lines from standard input
    while (std::getline(std::cin, line)) {
        std::istringstream iss(line);
        std::vector<std::string> row;
        std::string value;

        // Split the line by tabs
        while (std::getline(iss, value, '\t')) {
            row.push_back(value);
        }

        data.push_back(row);
    }

    // Find the maximum number of columns in the input data
    size_t max_columns = 0;
    if (!data.empty()) {
        for (const auto& row : data) {
            max_columns = std::max(max_columns, row.size());
        }
    }

    // Pad all rows to ensure they have the same length
    std::vector<std::vector<std::string>> padded_data;
    for (auto& row : data) {
        row.resize(max_columns, "");
        padded_data.push_back(row);
    }

    return padded_data;
}

TEST_CASE("Test basic TSV input") {
    // Redirect standard input to a stringstream
    std::istringstream input_stream("col1\tcol2\tcol3\nval1\tval2\tval3\n");
    std::streambuf* prev_cin = std::cin.rdbuf(input_stream.rdbuf());

    // Expected output
    const std::vector<std::vector<std::string>> expected_output = {
        {"col1", "col2", "col3"},
        {"val1", "val2", "val3"}
    };

    // Call the function
    const auto result = read_tsv_from_stdin();

    // Restore the original standard input
    std::cin.rdbuf(prev_cin);

    // Check the result
    REQUIRE(result == expected_output);
}

TEST_CASE("Test single column") {
    // Redirect standard input to a stringstream
    std::istringstream input_stream("col1\nval1\nval2\n");
    std::streambuf* prev_cin = std::cin.rdbuf(input_stream.rdbuf());

    // Expected output
    const std::vector<std::vector<std::string>> expected_output = {
        {"col1"},
        {"val1"},
        {"val2"}
    };

    // Call the function
    const auto result = read_tsv_from_stdin();

    // Restore the original standard input
    std::cin.rdbuf(prev_cin);

    // Check the result
    REQUIRE(result == expected_output);
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<catch2/catch_test_macros.hpp>`, `<iostream>`, `<vector>`, `<string>`, `<sstream>`) are included at the beginning.
2. **Function Definition**: The `read_tsv_from_stdin` function is defined to read TSV data from standard input and pad the rows.
3. **Test Cases**:
   - **Basic TSV Input**: Tests the function with a basic TSV input.
   - **Single Column**: Tests the function with a single-column TSV input.
4. **Redirecting Standard Input**: In each test case, standard input is redirected to a `std::istringstream` to simulate the input.
5. **Restoring Standard Input**: After the test, the original standard input is restored.
6. **Assertions**: The `REQUIRE` macro from Catch2 is used to check the equality of the results.

This conversion ensures that the functionality and logic of the tests are preserved while adhering to C++ syntax and the Catch2 testing framework.