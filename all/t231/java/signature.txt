Sure, here is the Java version of the Python function with the same functionality and comments:

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Reads a log file containing JSON entries and extracts training loss and test accuracy.
 * Json entries such as {"test_acc1": 88.5, "train_loss": 0.75}
 *
 * @param logFilePath The path to the log file to be read.
 * @return A tuple containing two lists:
 *         - trainLossList: A list of training loss values extracted from the log.
 *         - testAcc1List: A list of test accuracy values extracted from the log.
 */
public class LogReader {
    public static List<Double> trainLossList = new ArrayList<>();
    public static List<Double> testAcc1List = new ArrayList<>();

    public static void readLog(String logFilePath) throws IOException {
        try (BufferedReader br = new BufferedReader(new FileReader(logFilePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                // Assuming each line contains a valid JSON object
                // Here you would parse the JSON string and extract the values for "train_loss" and "test_acc1"
                // For simplicity, let's assume we have a method `parseJsonLine` that does this parsing
                parseJsonLine(line);
            }
        }
    }

    private static void parseJsonLine(String jsonLine) {
        // This method should contain the logic to parse the JSON string and populate trainLossList and testAcc1List
        // Example pseudo-code:
        // JSONObject jsonObject = new JSONObject(jsonLine);
        // double trainLoss = jsonObject.getDouble("train_loss");
        // double testAcc1 = jsonObject.getDouble("test_acc1");
        // trainLossList.add(trainLoss);
        // testAcc1List.add(testAcc1);
    }

    public static void main(String[] args) {
        try {
            readLog("path/to/your/logfile.log");
            System.out.println("Train Loss List: " + trainLossList);
            System.out.println("Test Accuracy List: " + testAcc1List);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Imports**: Import necessary classes for file reading, list handling, and JSON parsing.
2. **Class Definition**: Define a class `LogReader` to encapsulate the functionality.
3. **Static Lists**: Declare static lists to store the extracted training loss and test accuracy values.
4. **readLog Method**: This method reads the log file line by line, assuming each line contains a valid JSON object. It calls `parseJsonLine` to handle the JSON parsing.
5. **parseJsonLine Method**: This method should contain the logic to parse the JSON string and populate the static lists. Note that actual JSON parsing is not shown here; you would need to use a library like Jackson or Gson for this purpose.
6. **main Method**: Demonstrates how to call `readLog` and print the results.

Make sure to replace `"path/to/your/logfile.log"` with the actual path to your log file. Also, implement the `parseJsonLine` method according to your specific JSON structure and requirements.