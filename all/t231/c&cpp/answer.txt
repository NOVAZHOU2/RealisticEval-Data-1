Sure! Hereâ€™s the equivalent C++ code for the provided Python script. This code will handle reading from a log file, parsing JSON lines, and extracting specific fields (`train_loss` and `test_acc1`) while handling potential errors:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

// Function to read log file and process JSON entries
std::pair<std::vector<double>, std::vector<double>> read_log(const std::string& log_file_path) {
    std::vector<double> train_loss_list;
    std::vector<double> test_acc1_list;

    // Attempt to open the file
    std::ifstream file(log_file_path);
    if (!file.is_open()) {
        std::cout << "Error: The file " << log_file_path << " does not exist." << std::endl;
        return {train_loss_list, test_acc1_list};
    }

    std::string line;
    while (std::getline(file, line)) {
        try {
            json entry = json::parse(line);

            if (entry.contains("train_loss")) {
                train_loss_list.push_back(entry["train_loss"]);
            }
            if (entry.contains("test_acc1")) {
                test_acc1_list.push_back(entry["test_acc1"]);
            }
        } catch (const std::exception& e) {
            std::cout << "Error: The file " << log_file_path << " contains invalid JSON." << std::endl;
            return {train_loss_list, test_acc1_list};
        }
    }

    return {train_loss_list, test_acc1_list};
}

int main() {
    std::string log_file_path = "path/to/your/logfile.log";
    auto [train_loss_list, test_acc1_list] = read_log(log_file_path);

    // Example usage: Print the extracted lists
    std::cout << "Train Loss List:" << std::endl;
    for (double loss : train_loss_list) {
        std::cout << loss << std::endl;
    }

    std::cout << "Test Acc1 List:" << std::endl;
    for (double acc : test_acc1_list) {
        std::cout << acc << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**: 
   - `#include <iostream>` for input/output operations.
   - `#include <fstream>` for file I/O operations.
   - `#include <vector>` for using vectors.
   - `#include <nlohmann/json.hpp>` for JSON parsing.

2. **Using JSON Namespace**: 
   - `using json = nlohmann::json;` to simplify JSON object creation and manipulation.

3. **Function Definition**:
   - `read_log` function reads the log file, parses each line as JSON, and extracts `train_loss` and `test_acc1` values.

4. **Error Handling**:
   - Checks if the file exists and handles JSON parsing errors.

5. **Main Function**:
   - Demonstrates how to call the `read_log` function and print the results.

Make sure you have the `nlohmann/json.hpp` library installed in your project to use JSON parsing functionalities. You can include it via package managers like vcpkg or Conan, or simply download the single header file and include it in your project.