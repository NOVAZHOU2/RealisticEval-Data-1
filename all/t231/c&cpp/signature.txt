Certainly! Hereâ€™s the equivalent C++ code for the provided Python function, including the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

/**
 * Reads a log file containing JSON entries and extracts training loss and test accuracy.
 * JSON entries such as {"test_acc1": 88.5, "train_loss": 0.75}.
 *
 * @param log_file_path The path to the log file to be read.
 * @return A pair containing two vectors:
 *         - train_loss_list: A vector of training loss values extracted from the log.
 *         - test_acc1_list: A vector of test accuracy values extracted from the log.
 */
std::pair<std::vector<double>, std::vector<double>> read_log(const std::string& log_file_path) {
    std::vector<double> train_loss_list;
    std::vector<double> test_acc1_list;

    // Attempt to open the file
    std::ifstream file(log_file_path);
    if (!file.is_open()) {
        std::cout << "Error: The file " << log_file_path << " does not exist." << std::endl;
        return {train_loss_list, test_acc1_list};
    }

    std::string line;
    while (std::getline(file, line)) {
        try {
            json entry = json::parse(line);

            if (entry.contains("train_loss")) {
                train_loss_list.push_back(entry["train_loss"]);
            }
            if (entry.contains("test_acc1")) {
                test_acc1_list.push_back(entry["test1_acc"]);
            }
        } catch (const std::exception& e) {
            std::cout << "Error: The file " << log_file_path << " contains invalid JSON." << std::endl;
            return {train_loss_list, test_acc1_list};
        }
    }

    return {train_loss_list, test_acc1_list};
}

int main() {
    std::string log_file_path = "path/to/your/logfile.log";
    auto [train_loss_list, test_acc1_list] = read_log(log_file_path);

    // Example usage: Print the extracted lists
    std::cout << "Train Loss List:" << std::endl;
    for (double loss : train_loss_list) {
        std::cout << loss << std::endl;
    }

    std::cout << "Test Acc1 List:" << std::endl;
    for (double acc : test_acc1_list) {
        std::cout << acc << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `#include <iostream>` for input/output operations.
   - `#include <fstream>` for file I/O operations.
   - `#include <vector>` for using vectors.
   - `#include <nlohmann/json.hpp>` for JSON parsing.

2. **Using JSON Namespace**:
   - `using json = nlohmann::json;` to simplify JSON object creation and manipulation.

3. **Function Documentation**:
   - Multi-line comments (`/* ... */`) are used for the function documentation, following C++ documentation standards.

4. **Function Signature**:
   - The function `read_log` takes a `std::string` parameter `log_file_path` and returns a `std::pair<std::vector<double>, std::vector<double>>`.

5. **Error Handling**:
   - Checks if the file exists and handles JSON parsing errors.

6. **Main Function**:
   - Demonstrates how to call the `read_log` function and print the results.

This code preserves the original purpose and structure of the Python function while translating it into idiomatic C++ code.