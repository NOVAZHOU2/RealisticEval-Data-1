Certainly! Here is the equivalent TypeScript code using Jest for the provided Python unittest test class. The tests will be converted to use Jest's mocking and assertion functions.

### TypeScript Code

First, ensure you have the necessary imports and setup for Jest:

```typescript
import fs from 'fs';
import { parse } from 'json5';

/**
 * Reads a log file containing JSON entries and extracts training loss and test accuracy.
 * JSON entries such as {"test_acc1": 88.5, "train_loss": 0.75}.
 * 
 * @param logFilePath - The path to the log file to be read.
 * @returns A tuple containing two lists:
 *   - trainLossList: A list of training loss values extracted from the log.
 *   - testAcc1List: A list of test accuracy values extracted from the log.
 */
function readLog(logFilePath: string): [number[], number[]] {
    try {
        const fileContent = fs.readFileSync(logFilePath, 'utf8');
        const lines = fileContent.split('\n');

        let dataEntries: any[] = [];
        for (const line of lines) {
            try {
                dataEntries.push(JSON.parse(line));
            } catch (error) {
                console.error(`Error: The file ${logFilePath} contains invalid JSON.`);
                return [[], []];
            }
        }

        // Using optional chaining to handle missing keys
        const trainLossList = dataEntries.filter(entry => 'train_loss' in entry).map(entry => entry.train_loss);
        const testAcc1List = dataEntries.filter(entry => 'test_acc1' in entry).map(entry => entry.test_acc1);

        return [trainLossList, testAcc1List];
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error(`Error: The file ${logFilePath} does not exist.`);
        } else {
            console.error(`An unexpected error occurred: ${error.message}`);
        }
        return [[], []];
    }
}

// Example usage
const logFilePath = '/path/to/log/file.log';
const [trainLossList, testAcc1List] = readLog(logFilePath);
console.log('Train Loss List:', trainLossList);
console.log('Test Acc1 List:', testAcc1List);

// Jest Test Suite
describe('TestReadLog', () => {
    beforeEach(() => {
        jest.resetModules();
    });

    it('test_read_correct_data', () => {
        const mockFileContent = '{"test_acc1": 88.5, "train_loss": 0.75}\n{"test_acc1": 89.0, "train_loss": 0.70}';
        jest.spyOn(fs, 'readFileSync').mockImplementation(() => mockFileContent);

        const [trainLoss, testAcc1] = readLog('dummy_path.json');
        expect(trainLoss).toEqual([0.75, 0.70]);
        expect(testAcc1).toEqual([88.5, 89.0]);
    });

    it('test_read_correct_data_single', () => {
        const mockFileContent = '{"test_acc1": 88.5, "train_loss": 0.75}';
        jest.spyOn(fs, 'readFileSync').mockImplementation(() => mockFileContent);

        const [trainLoss, testAcc1] = readLog('dummy_path.json');
        expect(trainLoss).toEqual([0.75]);
        expect(testAcc1).toEqual([88.5]);
    });

    it('test_empty_file', () => {
        const mockFileContent = '';
        jest.spyOn(fs, 'readFileSync').mockImplementation(() => mockFileContent);

        const [trainLoss, testAcc1] = readLog('empty_file.json');
        expect(trainLoss).toEqual([]);
        expect(testAcc1).toEqual([]);
    });

    it('test_partial_data_entries', () => {
        const mockFileContent = '{"test_acc1": 88.5, "train_loss": 0.75}\n{"test_acc1": 90.0,"train_loss": 0.75,"f1":0.91}';
        jest.spyOn(fs, 'readFileSync').mockImplementation(() => mockFileContent);

        const [trainLoss, testAcc1] = readLog('partial_data_file.json');
        expect(trainLoss).toEqual([0.75, 0.75]);
        expect(testAcc1).toEqual([88.5, 90.0]);
    });
});
```

### Explanation:
1. **Imports**:
   - Import `fs` and `parse` from `json5` for file operations and JSON parsing.
   - Import Jest for testing.

2. **Function Definition**:
   - The `readLog` function is defined with proper type annotations and logic.

3. **Jest Test Suite**:
   - The `describe` block sets up the test suite named `TestReadLog`.
   - Each `it` block defines a specific test case.
   - `beforeEach` resets Jest modules before each test to avoid side effects.

4. **Mocking `fs.readFileSync`**:
   - Use `jest.spyOn` to mock `fs.readFileSync` and provide custom implementation for each test case.

5. **Assertions**:
   - Use `expect` to assert the expected results.

### Running the Tests
To run the tests, you can use the following command in your project directory:

```sh
npm test
```

This setup ensures that the tests are equivalent to the Python unittest tests, with proper Jest assertions and mocking.