Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Reads a log file containing JSON entries and extracts training loss and test accuracy.
 * JSON entries such as {"test_acc1": 88.5, "train_loss": 0.75}.
 * 
 * @param logFilePath - The path to the log file to be read.
 * @returns A tuple containing two lists:
 *   - trainLossList: A list of training loss values extracted from the log.
 *   - testAcc1List: A list of test accuracy values extracted from the log.
 */
function readLog(logFilePath: string): [number[], number[]] {
    try {
        const fileContent = fs.readFileSync(logFilePath, 'utf8');
        const lines = fileContent.split('\n');

        let dataEntries: any[] = [];
        for (const line of lines) {
            try {
                dataEntries.push(JSON.parse(line));
            } catch (error) {
                console.error(`Error: The file ${logFilePath} contains invalid JSON.`);
                return [[], []];
            }
        }

        // Using optional chaining to handle missing keys
        const trainLossList = dataEntries.filter(entry => 'train_loss' in entry).map(entry => entry.train_loss);
        const testAcc1List = dataEntries.filter(entry => 'test_acc1' in entry).map(entry => entry.test_acc1);

        return [trainLossList, testAcc1List];
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error(`Error: The file ${logFilePath} does not exist.`);
        } else {
            console.error(`An unexpected error occurred: ${error.message}`);
        }
        return [[], []];
    }
}

// Example usage
const logFilePath = '/path/to/log/file.log';
const [trainLossList, testAcc1List] = readLog(logFilePath);
console.log('Train Loss List:', trainLossList);
console.log('Test Acc1 List:', testAcc1List);
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc-style documentation comment is added above the function definition.
   - It includes a brief description of the function, parameters, and return values.

2. **Function Definition**:
   - The function `readLog` is defined with a single parameter `logFilePath` of type `string`.
   - The return type is a tuple `[number[], number[]]`.

3. **File Reading**:
   - `fs.readFileSync` is used to read the file synchronously.
   - The file content is split into lines.

4. **JSON Parsing**:
   - Each line is parsed using `JSON.parse`. If parsing fails, an error message is printed, and empty arrays are returned.

5. **Data Extraction**:
   - `filter` and `map` are used to extract `train_loss` and `test_acc1` values from the entries that contain these keys.

6. **Error Handling**:
   - A `try-catch` block is used to handle file reading errors and JSON parsing errors.
   - If the file does not exist (`ENOENT`), an appropriate error message is printed.

7. **Example Usage**:
   - An example usage of the function is provided at the end.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate type annotations and JSDoc documentation.