Sure! Here is the equivalent TypeScript code for the provided Python script:

```typescript
import fs from 'fs';
import path from 'path';
import { parse } from 'json5';

function readLog(logFilePath: string): [number[], number[]] {
    try {
        const fileContent = fs.readFileSync(logFilePath, 'utf8');
        const lines = fileContent.split('\n');

        let dataEntries: any[] = [];
        for (const line of lines) {
            try {
                dataEntries.push(JSON.parse(line));
            } catch (error) {
                console.error(`Error: The file ${logFilePath} contains invalid JSON.`);
                return [[], []];
            }
        }

        // Using optional chaining to handle missing keys
        const trainLossList = dataEntries.filter(entry => 'train_loss' in entry).map(entry => entry.train_loss);
        const testAcc1List = dataEntries.filter(entry => 'test_acc1' in entry).map(entry => entry.test_acc1);

        return [trainLossList, testAcc1List];
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error(`Error: The file ${logFilePath} does not exist.`);
        } else {
            console.error(`An unexpected error occurred: ${error.message}`);
        }
        return [[], []];
    }
}

// Example usage
const logFilePath = '/path/to/log/file.log';
const [trainLossList, testAcc1List] = readLog(logFilePath);
console.log('Train Loss List:', trainLossList);
console.log('Test Acc1 List:', testAcc1List);
```

### Explanation:
1. **Imports**: 
   - `fs` and `path` modules are imported from Node.js to handle file operations.
   - `parse` from `json5` is used for parsing JSON strings. However, since we are using `JSON.parse`, there's no need to import `parse`.

2. **Function Definition**:
   - The function `readLog` is defined with a single parameter `logFilePath` of type `string`.
   - The return type is a tuple `[number[], number[]]`.

3. **File Reading**:
   - `fs.readFileSync` is used to read the file synchronously.
   - The file content is split into lines.

4. **JSON Parsing**:
   - Each line is parsed using `JSON.parse`. If parsing fails, an error message is printed, and empty arrays are returned.

5. **Data Extraction**:
   - `filter` and `map` are used to extract `train_loss` and `test_acc1` values from the entries that contain these keys.

6. **Error Handling**:
   - A `try-catch` block is used to handle file reading errors and JSON parsing errors.
   - If the file does not exist (`ENOENT`), an appropriate error message is printed.

7. **Example Usage**:
   - An example usage of the function is provided at the end.

This TypeScript code maintains the same functionality and logic as the original Python code, with necessary adjustments for TypeScript's static type system and Node.js environment.