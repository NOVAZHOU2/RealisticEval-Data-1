Sure! Below is the equivalent Java code for the provided Python script, organized within the package `org.real.temp` and the class `Answer`. The Java code will follow the same logic and functionality:

```java
package org.real.temp;

import java.io.File;
import java.io.IOException;
import java.util.List;
import org.docx4j.Docx4J;
import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.wml.P;
import org.docx4j.wml.Text;

public class Answer {

    /**
     * Extracts text content from a given Word file (.docx).
     *
     * @param docxFilePath The path to the Word file.
     * @return The extracted text content or null if an error occurs.
     */
    public static String extractTextFromWord(String docxFilePath) {
        try {
            // Open the Word document
            WordprocessingMLPackage wordMLPackage = Docx4J.load(new File(docxFilePath));

            // Extract text from each paragraph in the document
            List<Object> paragraphs = wordMLPackage.getMainDocumentPart().getContent();
            StringBuilder textContent = new StringBuilder();

            for (Object paragraph : paragraphs) {
                if (paragraph instanceof P) {
                    P p = (P) paragraph;
                    List<Text> texts = p.getContent();
                    for (Text text : texts) {
                        textContent.append(text.getValue());
                    }
                }
            }

            return textContent.toString();

        } catch (Docx4JException | IOException e) {
            System.out.println("An error occurred: " + e.getMessage());
            return null;
        }
    }

    public static void main(String[] args) {
        // Example usage
        String docxFilePath = "path/to/your/document.docx";
        String textContent = extractTextFromWord(docxFilePath);
        if (textContent != null) {
            System.out.println(textContent);
        }
    }
}
```

### Notes:
1. **Dependencies**: This Java code uses the `docx4j` library to handle `.docx` files. You need to include the `docx4j` library in your project's classpath.
2. **Error Handling**: The Java code handles exceptions similarly to the Python code by printing an error message and returning `null`.
3. **Structure**: The Java code follows a similar structure, extracting text from each paragraph and joining them together.
4. **Main Method**: A `main` method is included for demonstration purposes, which you can use to test the functionality.