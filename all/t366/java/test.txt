Sure! Below is the equivalent Java JUnit test case for your Python `unittest` test class. The package is `org.real.temp`, and the class name is `Tester`.

First, let's assume you have a method `extractTextFromWord` in your Java code that does something similar to what your Python function `extract_text_from_word` does. For the sake of this example, I'll create a mock implementation of this method.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    @Test
    public void testExtractTextFromWord() {
        // Mock implementation of extractTextFromWord
        String docxFilePath = "path/to/your/document.docx";
        String expectedText = "This is the expected text content.";

        String actualText = extractTextFromWord(docxFilePath);

        assertEquals(expectedText, actualText, "The extracted text should match the expected text.");
    }

    private String extractTextFromWord(String docxFilePath) {
        // Mock implementation of extracting text from a Word document
        // In a real scenario, you would implement logic to read and extract text from the .docx file
        return "This is the expected text content.";
    }
}
```

### Explanation:

1. **Package Declaration**: The package declaration is at the top of the file, specifying `org.real.temp`.
2. **Class Declaration**: The class `Tester` is declared with the `@Test` annotation, indicating it contains test methods.
3. **Test Method**: The `testExtractTextFromWord` method is annotated with `@Test`, marking it as a test method.
4. **Assertions**: The `assertEquals` method is used to verify that the actual extracted text matches the expected text.
5. **Mock Implementation**: The `extractTextFromWord` method is a mock implementation that returns a predefined string. In a real-world scenario, you would replace this with actual logic to read and extract text from a `.docx` file using appropriate libraries like Apache POI.

Make sure you have the necessary dependencies for handling `.docx` files in your project. If you're using Maven, you can add the following dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>5.2.3</version>
</dependency>
```

This will allow you to work with `.docx` files using Apache POI in your Java application.