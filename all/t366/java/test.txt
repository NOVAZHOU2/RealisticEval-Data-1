Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class is placed in the package `org.real.temp` and named `Tester`. It includes appropriate JUnit annotations and assertion methods to preserve the functionality and logic of the tests.

### Java Code:

```java
package org.real.temp;

import org.docx4j.Docx4J;
import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.wml.P;
import org.docx4j.wml.Text;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.io.File;
import java.io.IOException;
import java.util.List;

public class Tester {

    private String testDocxPath;
    private String emptyDocxPath;
    private String specialCharactersDocxPath;
    private String multiParaDocxPath;

    @Before
    public void setUp() throws Docx4JException, IOException {
        // Set up the testing environment
        testDocxPath = "test_document.docx";
        createSampleDocx(testDocxPath);

        emptyDocxPath = "empty_document.docx";
        Docx4J.createWordprocessingMLPackage().save(new File(emptyDocxPath));

        specialCharactersDocxPath = "special_characters.docx";
        createSampleDocxWithSpecialCharacters(specialCharactersDocxPath);

        multiParaDocxPath = "multi_paragraphs.docx";
        createSampleDocxWithMultipleParagraphs(multiParaDocxPath);
    }

    @After
    public void tearDown() {
        // Clean up the test environment
        cleanUpFile(testDocxPath);
        cleanUpFile(emptyDocxPath);
        cleanUpFile(specialCharactersDocxPath);
        cleanUpFile(multiParaDocxPath);
    }

    private void createSampleDocx(String filePath) throws Docx4JException, IOException {
        // Helper method to create a sample Word document for testing
        WordprocessingMLPackage wordMLPackage = Docx4J.createWordprocessingMLPackage();
        wordMLPackage.getMainDocumentPart().addParagraphOfText("Hello World!");
        wordMLPackage.getMainDocumentPart().addParagraphOfText("This is a test document.");
        wordMLPackage.save(new File(filePath));
    }

    private void createSampleDocxWithSpecialCharacters(String filePath) throws Docx4JException, IOException {
        // Helper method to create a sample Word document with special characters
        WordprocessingMLPackage wordMLPackage = Docx4J.createWordprocessingMLPackage();
        wordMLPackage.getMainDocumentPart().addParagraphOfText("Hello, 世界! @#$%^&*()");
        wordMLPackage.save(new File(filePath));
    }

    private void createSampleDocxWithMultipleParagraphs(String filePath) throws Docx4JException, IOException {
        // Helper method to create a sample Word document with multiple paragraphs
        WordprocessingMLPackage wordMLPackage = Docx4J.createWordprocessingMLPackage();
        wordMLPackage.getMainDocumentPart().addParagraphOfText("First paragraph.");
        wordMLPackage.getMainDocumentPart().addParagraphOfText("Second paragraph.");
        wordMLPackage.getMainDocumentPart().addParagraphOfText("Third paragraph.");
        wordMLPackage.save(new File(filePath));
    }

    private void cleanUpFile(String filePath) {
        // Helper method to remove created files after tests
        File file = new File(filePath);
        if (file.exists()) {
            file.delete();
        }
    }

    @Test
    public void testExtractTextSuccess() throws Docx4JException, IOException {
        // Test extracting text from a normal Word document
        String expectedText = "Hello World!\nThis is a test document.";
        String extractedText = extractTextFromWord(testDocxPath);
        assertEquals(expectedText, extractedText.strip());
    }

    @Test
    public void testExtractEmptyDocument() throws Docx4JException, IOException {
        // Test extracting text from an empty Word document
        String extractedText = extractTextFromWord(emptyDocxPath);
        assertEquals("", extractedText);
    }

    @Test
    public void testExtractTextWithSpecialCharacters() throws Docx4JException, IOException {
        // Test extracting text from a document containing special characters
        String expectedText = "Hello, 世界! @#$%^&*()";
        String extractedText = extractTextFromWord(specialCharactersDocxPath);
        assertEquals(expectedText, extractedText.strip());
    }

    @Test
    public void testExtractTextWithMultipleParagraphs() throws Docx4JException, IOException {
        // Test extracting text from a document with multiple paragraphs
        String expectedText = "First paragraph.\nSecond paragraph.\nThird paragraph.";
        String extractedText = extractTextFromWord(multiParaDocxPath);
        assertEquals(expectedText, extractedText.strip());
    }

    // Method to extract text from a Word document
    private String extractTextFromWord(String docxFilePath) throws Docx4JException, IOException {
        try {
            // Open the Word document
            WordprocessingMLPackage wordMLPackage = Docx4J.load(new File(docxFilePath));

            // Extract text from each paragraph in the document
            StringBuilder textContent = new StringBuilder();
            List<Object> paragraphs = wordMLPackage.getMainDocumentPart().getContent();

            for (Object paragraph : paragraphs) {
                if (paragraph instanceof P) {
                    P p = (P) paragraph;
                    List<Text> texts = p.getContent();
                    for (Text text : texts) {
                        textContent.append(text.getValue());
                    }
                }
            }

            return textContent.toString();

        } catch (Docx4JException | IOException e) {
            System.out.println("An error occurred: " + e.getMessage());
            return null;
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.

2. **Imports**: The necessary imports are included at the beginning of the file:
   - `org.docx4j.Docx4J`
   - `org.docx4j.openpackaging.exceptions.Docx4JException`
   - `org.docx4j.openpackaging.packages.WordprocessingMLPackage`
   - `org.docx4j.wml.P`
   - `org.docx4j.wml.Text`
   - `org.junit.After`
   - `org.junit.Before`
   - `org.junit.Test`
   - `static org.junit.Assert.assertEquals`
   - `java.io.File`
   - `java.io.IOException`
   - `java.util.List`

3. **Class Definition**: The class `Tester` is defined with the necessary setup and teardown methods (`setUp` and `tearDown`) and test methods.

4. **JUnit Annotations**:
   - `@Before`: Used to set up the testing environment before each test.
   - `@After`: Used to clean up the testing environment after each test.
   - `@Test`: Used to define individual test methods.

5. **Helper Methods**:
   - `createSampleDocx`: Creates a sample Word document with specified content.
   - `createSampleDocxWithSpecialCharacters`: Creates a sample Word document with special characters.
   - `createSampleDocxWithMultipleParagraphs`: Creates a sample Word document with multiple paragraphs.
   - `cleanUpFile`: Removes the created files after tests.

6. **Test Methods**:
   - `testExtractTextSuccess`: Tests extracting text from a normal Word document.
   - `testExtractEmptyDocument`: Tests extracting text from an empty Word document.
   - `testExtractTextWithSpecialCharacters`: Tests extracting text from a document containing special characters.
   - `testExtractTextWithMultipleParagraphs`: Tests extracting text from a document with multiple paragraphs.

7. **Assertion Methods**: Uses `assertEquals` to verify the expected results.

8. **Extract Text Method**: The `extractTextFromWord` method is defined to extract text from a Word document, similar to the Python function.

This Java code preserves the original functionality and structure of the Python unittest class while adhering to JUnit conventions and best practices.