Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

import java.io.File;
import java.io.IOException;
import org.docx4j.Docx4J;
import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.wml.P;
import org.docx4j.wml.Text;

/**
 * Class for extracting text content from a Word document (.docx).
 */
public class Answer {

    /**
     * Extracts text content from a given Word file (.docx).
     *
     * @param docxFilePath The path to the Word file.
     * @return The extracted text content, or null if an error occurs.
     */
    public static String extractTextFromWord(String docxFilePath) {
        try {
            // Open the Word document
            WordprocessingMLPackage wordMLPackage = Docx4J.load(new File(docxFilePath));

            // Extract text from each paragraph in the document
            StringBuilder textContent = new StringBuilder();
            List<Object> paragraphs = wordMLPackage.getMainDocumentPart().getContent();

            for (Object paragraph : paragraphs) {
                if (paragraph instanceof P) {
                    P p = (P) paragraph;
                    List<Text> texts = p.getContent();
                    for (Text text : texts) {
                        textContent.append(text.getValue());
                    }
                }
            }

            return textContent.toString();

        } catch (Docx4JException | IOException e) {
            System.out.println("An error occurred: " + e.getMessage());
            return null;
        }
    }

    /**
     * Main method for testing the functionality.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        // Example usage
        String docxFilePath = "path/to/your/document.docx";
        String textContent = extractTextFromWord(docxFilePath);
        if (textContent != null) {
            System.out.println(textContent);
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.

2. **Imports**: The necessary imports are included at the beginning of the file:
   - `java.io.File`
   - `java.io.IOException`
   - `org.docx4j.Docx4J`
   - `org.docx4j.openpackaging.exceptions.Docx4JException`
   - `org.docx4j.openpackaging.packages.WordprocessingMLPackage`
   - `org.docx4j.wml.P`
   - `org.docx4j.wml.Text`

3. **Class Definition**: The class `Answer` is defined with the method `extractTextFromWord`.

4. **Javadoc Comments**:
   - The class-level Javadoc comment explains the purpose of the class.
   - The method-level Javadoc comment describes the method parameters and return value.

5. **Method Implementation**:
   - The method `extractTextFromWord` opens the Word document, extracts text from each paragraph, and returns the concatenated text.
   - Error handling is implemented using a try-catch block, with appropriate logging and error handling.

6. **Main Method**: A `main` method is included for testing the functionality. It demonstrates how to call the `extractTextFromWord` method and prints the extracted text content.

This Java code preserves the original functionality and structure of the Python code while adhering to Java conventions and best practices.