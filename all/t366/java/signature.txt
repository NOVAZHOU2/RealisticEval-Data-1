Hereâ€™s the equivalent Java method for the provided Python function:

```java
import org.docx4j.Docx4J;
import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import java.io.File;
import java.io.IOException;

public class WordDocumentExtractor {

    /**
     * Extracts text content from a given Word file (.docx).
     *
     * @param docxFilePath The path to the Word file.
     * @return The extracted text content.
     * @throws IOException if there is an issue reading the file.
     * @throws Docx4JException if there is an issue processing the .docx file.
     */
    public static String extractTextFromWord(String docxFilePath) throws IOException, Docx4JException {
        File wordFile = new File(docxFilePath);
        WordprocessingMLPackage wordMLPackage = WordprocessingMLPackage.load(wordFile);
        return Docx4J.toString(wordMLPackage);
    }
}
```

### Explanation:
1. **Import Statements**: Added necessary imports for working with `.docx` files using `org.docx4j`.
2. **Class Definition**: Wrapped the method inside a class named `WordDocumentExtractor`.
3. **Method Signature**:
   - Translated the Python function signature to a Java method signature.
   - Included exception handling (`IOException` and `Docx4JException`) to handle potential errors during file operations and document processing.
4. **JavaDoc Comments**: Converted the Python docstring to a JavaDoc comment block, providing details about the method parameters and return type.
5. **Implementation**: Used `org.docx4j` to load the Word document and extract its text content.

This Java method provides the same functionality as the original Python function, including proper error handling and documentation.