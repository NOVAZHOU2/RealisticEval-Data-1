Sure! Here is the equivalent JavaScript code using the `docx` library for Node.js to achieve the same functionality:

First, you need to install the `docx` package if you haven't already:

```sh
npm install docx
```

Now, here's the JavaScript code:

```javascript
const { Document } = require('docx');

/**
 * Extracts text content from a given Word file (.docx).
 *
 * @param {string} docxFilePath The path to the Word file.
 * @returns {Promise<string>} A promise that resolves to the extracted text content.
 */
async function extractTextFromWord(docxFilePath) {
    try {
        // Open the Word document
        const doc = await Document.load(docxFilePath);
        
        // Extract text from each paragraph in the document
        const textContent = [];
        for (const para of doc.paragraphs) {
            textContent.push(para.text);
        }

        // Join the paragraphs with newlines
        return textContent.join('\n');
    } catch (error) {
        console.error(`An error occurred: ${error.message}`);
        return null;
    }
}

// Example usage
(async () => {
    const filePath = 'path/to/your/document.docx';
    const content = await extractTextFromWord(filePath);
    if (content !== null) {
        console.log(content);
    }
})();
```

### Explanation:
1. **Importing the Library**: 
   - We use `require('docx')` to import the `docx` library.
   
2. **Function Definition**:
   - The `extractTextFromWord` function is defined as an asynchronous function because loading the document is an asynchronous operation.
   
3. **Loading the Document**:
   - `Document.load(docxFilePath)` is used to load the Word document asynchronously.
   
4. **Extracting Text**:
   - We iterate over the paragraphs (`doc.paragraphs`) and extract the text from each paragraph.
   
5. **Joining Text**:
   - We join the extracted text with newline characters (`'\n'`).
   
6. **Error Handling**:
   - Any errors during the process are caught and logged, and the function returns `null`.

7. **Example Usage**:
   - An example usage is provided at the end to demonstrate how to call the `extractTextFromWord` function and handle the result.

This JavaScript code should perform the same functionality as the provided Python code, extracting text content from a Word document and handling any potential errors.