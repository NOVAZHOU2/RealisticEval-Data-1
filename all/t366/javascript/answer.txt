Sure! Here is the equivalent JavaScript code using the `docx` library in Node.js to achieve the same functionality:

First, you need to install the `docx` package if you haven't already:

```sh
npm install docx
```

Then, you can write the JavaScript code as follows:

```javascript
const { Document } = require('docx');

/**
 * Extracts text content from a given Word file (.docx).
 *
 * @param {string} docxFilePath The path to the Word file.
 * @returns {Promise<string | null>} A promise that resolves to the extracted text content or null if an error occurs.
 */
async function extractTextFromWord(docxFilePath) {
    try {
        // Open the Word document
        const doc = await Document.load(docxFilePath);
        // Extract text from each paragraph in the document
        const textContent = [];
        for (const para of doc.paragraphs) {
            textContent.push(para.text);
        }

        // Join the paragraphs with newlines
        return textContent.join('\n');
    } catch (error) {
        console.error(`An error occurred: ${error}`);
        return null;
    }
}

// Example usage
(async () => {
    const filePath = 'path/to/your/document.docx';
    const result = await extractTextFromWord(filePath);
    console.log(result);
})();
```

### Explanation:
1. **Importing the `docx` Library**: The `docx` library is imported using `require('docx')`.
2. **Function Definition**: The `extractTextFromWord` function is defined as an asynchronous function because loading a Word document is an I/O operation that may take some time.
3. **Loading the Document**: The `Document.load` method is used to load the Word document asynchronously.
4. **Extracting Text**: The text content is extracted from each paragraph and stored in an array.
5. **Joining Text**: The paragraphs are joined with newline characters.
6. **Error Handling**: Any exceptions are caught and logged, and the function returns `null`.

This code should provide the same functionality as the Python version but adapted to JavaScript and Node.js.