Certainly! Here is the equivalent JavaScript code with the function signature and JSDoc comments:

### Python Code:
```python
from docx import Document

def extract_text_from_word(docx_file_path):
    """
    Extracts text content from a given Word file (.docx).

    Args:
        docx_file_path (str): The path to the Word file.

    Returns:
        str: The extracted text content.
    """
    try:
        # Open the Word document
        doc = Document(docx_file_path)
        # Extract text from each paragraph in the document
        text_content = []
        for para in doc.paragraphs:
            text_content.append(para.text)

        # Join the paragraphs with newlines
        return '\n'.join(text_content)

    except Exception as e:
        print(f"An error occurred: {e}")
        return None
```

### Equivalent JavaScript Code with JSDoc Comments:
```javascript
const { Document } = require('docx');

/**
 * Extracts text content from a given Word file (.docx).
 *
 * @param {string} docxFilePath - The path to the Word file.
 * @returns {Promise<string | null>} A promise that resolves to the extracted text content or null if an error occurs.
 */
async function extractTextFromWord(docxFilePath) {
    try {
        // Open the Word document
        const doc = await Document.load(docxFilePath);
        // Extract text from each paragraph in the document
        const textContent = [];
        for (const para of doc.paragraphs) {
            textContent.push(para.text);
        }

        // Join the paragraphs with newlines
        return textContent.join('\n');
    } catch (error) {
        console.error(`An error occurred: ${error}`);
        return null;
    }
}

// Example usage
(async () => {
    const filePath = 'path/to/your/document.docx';
    const result = await extractTextFromWord(filePath);
    console.log(result);
})();
```

### Explanation:
1. **Importing the `docx` Library**: The `docx` library is imported using `require('docx')`.
2. **Function Definition**: The `extractTextFromWord` function is defined as an asynchronous function to handle the asynchronous loading of the Word document.
3. **JSDoc Comments**:
   - `@param {string} docxFilePath`: Describes the parameter type and purpose.
   - `@returns {Promise<string | null>}`: Specifies that the function returns a promise that resolves to a string or null.
4. **Loading the Document**: The `Document.load` method is used to load the Word document asynchronously.
5. **Extracting Text**: The text content is extracted from each paragraph and stored in an array.
6. **Joining Text**: The paragraphs are joined with newline characters.
7. **Error Handling**: Any exceptions are caught and logged, and the function returns `null`.

This code preserves the functionality and structure of the original Python code while adhering to JavaScript conventions and JSDoc documentation standards.