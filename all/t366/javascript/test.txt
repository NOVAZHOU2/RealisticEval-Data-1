Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The conversion includes setting up the testing environment, creating sample documents, and performing assertions using Jest's `beforeEach`, `afterEach`, and `it` blocks.

### Python Code:
```python
import unittest
import os
from docx import Document

class TestExtractTextFromWord(unittest.TestCase):

    def setUp(self):
        """Set up the testing environment."""
        # Create a temporary Word file for testing
        self.test_docx_path = "test_document.docx"
        self.create_sample_docx()

    def tearDown(self):
        """Clean up the test environment."""
        # Remove created files after tests
        if os.path.exists(self.test_docx_path):
            os.remove(self.test_docx_path)

    def create_sample_docx(self):
        """Helper method to create a sample Word document for testing."""
        doc = Document()
        doc.add_paragraph("Hello World!")
        doc.add_paragraph("This is a test document.")
        doc.save(self.test_docx_path)

    def test_extract_text_success(self):
        """Test extracting text from a normal Word document."""
        expected_text = "Hello World!\nThis is a test document."
        extracted_text = extract_text_from_word(self.test_docx_path)
        self.assertEqual(extracted_text.strip(), expected_text)

    def test_extract_empty_document(self):
        """Test extracting text from an empty Word document."""
        empty_docx_path = "empty_document.docx"
        Document().save(empty_docx_path)

        extracted_text = extract_text_from_word(empty_docx_path)
        self.assertEqual(extracted_text, "")  # Expecting an empty string

        os.remove(empty_docx_path)  # Clean up

    def test_extract_text_with_special_characters(self):
        """Test extracting text from a document containing special characters."""
        special_docx_path = "special_characters.docx"
        doc = Document()
        doc.add_paragraph("Hello, 世界! @#$%^&*()")
        doc.save(special_docx_path)

        extracted_text = extract_text_from_word(special_docx_path)
        expected_text = "Hello, 世界! @#$%^&*()"
        self.assertEqual(extracted_text.strip(), expected_text)

        os.remove(special_docx_path)  # Clean up

    def test_extract_text_with_multiple_paragraphs(self):
        """Test extracting text from a document with multiple paragraphs."""
        multi_para_docx_path = "multi_paragraphs.docx"
        doc = Document()
        doc.add_paragraph("First paragraph.")
        doc.add_paragraph("Second paragraph.")
        doc.add_paragraph("Third paragraph.")
        doc.save(multi_para_docx_path)

        extracted_text = extract_text_from_word(multi_para_docx_path)
        expected_text = "First paragraph.\nSecond paragraph.\nThird paragraph."
        self.assertEqual(extracted_text.strip(), expected_text)

        os.remove(multi_para_docx_path)  # Clean up
```

### Equivalent Jest Test Suite:
```javascript
const { Document } = require('docx');
const fs = require('fs');
const extractTextFromWord = require('./extractTextFromWord'); // Import your function

describe('TestExtractTextFromWord', () => {
    let testDocxPath;

    beforeEach(() => {
        testDocxPath = "test_document.docx";
        createSampleDocx(testDocxPath);
    });

    afterEach(() => {
        if (fs.existsSync(testDocxPath)) {
            fs.unlinkSync(testDocxPath);
        }
    });

    function createSampleDocx(path) {
        const doc = new Document();
        doc.addParagraph("Hello World!");
        doc.addParagraph("This is a test document.");
        doc.save(path);
    }

    it('should extract text from a normal Word document', async () => {
        const expectedText = "Hello World!\nThis is a test document.";
        const extractedText = await extractTextFromWord(testDocxPath);
        expect(extractedText.trim()).toEqual(expectedText);
    });

    it('should extract text from an empty Word document', async () => {
        const emptyDocxPath = "empty_document.docx";
        new Document().save(emptyDocxPath);

        const extractedText = await extractTextFromWord(emptyDocxPath);
        expect(extractedText).toEqual("");  // Expecting an empty string

        fs.unlinkSync(emptyDocxPath);  // Clean up
    });

    it('should extract text from a document containing special characters', async () => {
        const specialDocxPath = "special_characters.docx";
        const doc = new Document();
        doc.addParagraph("Hello, 世界! @#$%^&*()");
        doc.save(specialDocxPath);

        const extractedText = await extractTextFromWord(specialDocxPath);
        const expectedText = "Hello, 世界! @#$%^&*()";
        expect(extractedText.trim()).toEqual(expectedText);

        fs.unlinkSync(specialDocxPath);  // Clean up
    });

    it('should extract text from a document with multiple paragraphs', async () => {
        const multiParaDocxPath = "multi_paragraphs.docx";
        const doc = new Document();
        doc.addParagraph("First paragraph.");
        doc.addParagraph("Second paragraph.");
        doc.addParagraph("Third paragraph.");
        doc.save(multiParaDocxPath);

        const extractedText = await extractTextFromWord(multiParaDocxPath);
        const expectedText = "First paragraph.\nSecond paragraph.\nThird paragraph.";
        expect(extractedText.trim()).toEqual(expectedText);

        fs.unlinkSync(multiParaDocxPath);  // Clean up
    });
});

// Helper function to check if a file exists
function fsExistsSync(path) {
    try {
        fs.accessSync(path);
        return true;
    } catch (error) {
        return false;
    }
}
```

### Explanation:
1. **Imports**: 
   - `docx` library is imported to work with Word documents.
   - `fs` module is imported to handle file system operations.
   - `extractTextFromWord` function is imported from the relevant module.

2. **Setup and Teardown**:
   - `beforeEach` sets up the test environment by creating a sample document.
   - `afterEach` cleans up the test environment by removing the created files.

3. **Helper Functions**:
   - `createSampleDocx` creates a sample Word document.
   - `fsExistsSync` checks if a file exists (used in `afterEach`).

4. **Test Cases**:
   - Each `it` block represents a test case.
   - Assertions are made using Jest's `expect` function.
   - The `trim` method is used to ensure that the extracted text matches the expected text, accounting for any leading or trailing whitespace.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.