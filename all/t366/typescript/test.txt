Sure! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class. Note that I'll assume you have a function `extractTextFromWord` in your TypeScript code that performs the same functionality as the Python `extract_text_from_word` function.

```typescript
import { extractTextFromWord } from './path-to-your-function'; // Adjust the import path accordingly
import * as fs from 'fs';
import * as path from 'path';

describe('extractTextFromWord', () => {
  it('should extract text from a valid .docx file', async () => {
    const filePath = path.join(__dirname, 'test.docx'); // Path to your test .docx file
    const expectedText = 'Expected text content'; // Replace with the actual expected text content

    try {
      const result = await extractTextFromWord(filePath);
      expect(result).toBe(expectedText);
    } catch (error) {
      fail(`Failed to extract text from ${filePath}: ${error}`);
    }
  });

  it('should handle non-existent file', async () => {
    const nonExistentFilePath = path.join(__dirname, 'non-existent-file.docx');

    try {
      await extractTextFromWord(nonExistentFilePath);
      fail('Should throw an error when the file does not exist');
    } catch (error) {
      expect(error.message).toContain('File does not exist');
    }
  });
});
```

### Explanation:

1. **Importing Functions and Modules**:
   - `extractTextFromWord` is imported from the appropriate module.
   - `fs` and `path` modules are imported for handling file paths.

2. **Test Suite (`describe`)**:
   - The tests are grouped under a suite named `extractTextFromWord`.

3. **First Test Case (`it`)**:
   - This test checks if the function correctly extracts text from a valid `.docx` file.
   - It uses `expect` to assert that the result matches the expected text content.

4. **Second Test Case (`it`)**:
   - This test checks how the function handles a non-existent file.
   - It expects the function to throw an error and verifies that the error message contains the expected string.

Make sure to adjust the import path and expected text content according to your specific implementation.