Firstly, we need to install the necessary package to handle .docx files in Node.js environment. You can use a library like `docx` or `wordjs`, but for the purposes of this task, I'll demonstrate using `docx` as an example. However, note that the `docx` library is mainly used for creating and modifying .docx files, not reading them. For reading .docx files, you might want to consider other libraries like `parser` from `pdf-to-text` or similar. But for the sake of this exercise, let's assume there's a suitable library named `docxReader`.

Here's how you would write the equivalent test class in TypeScript using Jest:

1. Install the required packages:

```bash
npm install --save docxReader
npm install --save-dev jest @types/jest
```

2. Create the function and test file:

```typescript
import { readDocxFile } from 'docxReader'; // Hypothetical package for reading .docx files

/**
 * Extracts text content from a given Word file (.docx).
 *
 * @param {string} docxFilePath - The path to the Word file.
 * @returns {Promise<string>} A promise that resolves to the extracted text content.
 */
async function extractTextFromWord(docxFilePath: string): Promise<string> {
  return readDocxFile(docxFilePath).then((document) => document.getText());
}

// Test file
describe('extractTextFromWord', () => {
  it('should correctly extract text from a Word document', async () => {
    const docxFilePath = './test.docx'; // Path to your test .docx file
    const expectedText = 'This is the expected text from the Word document';

    const extractedText = await extractTextFromWord(docxFilePath);
    expect(extractedText).toBe(expectedText);
  });

  it('should handle non-existent file gracefully', async () => {
    const docxFilePath = './nonexistent.docx'; // Path to a non-existent file
    try {
      await extractTextFromWord(docxFilePath);
    } catch (error) {
      expect(error).toBeTruthy();
    }
  });
});
```

In this conversion:
- We define the `extractTextFromWord` function to use a hypothetical `readDocxFile` function from a package called `docxReader`.
- We use `async/await` syntax to handle asynchronous operations, as reading a file is typically asynchronous in JavaScript/TypeScript.
- Jest's `expect` is used with `.toBe` matcher to verify the correctness of the extracted text.
- We also include a test case to ensure the function handles errors gracefully when attempting to read a non-existent file.