Certainly! Here’s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. We’ll include the necessary imports, setup, teardown, and assertions.

### TypeScript Code with Jest Testing

First, ensure you have the necessary dependencies installed:
```sh
npm install --save-dev jest ts-jest @types/jest
npm install docx
```

Next, configure Jest in your `tsconfig.json` and `jest.config.js` files:

#### `tsconfig.json`
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "skipLibCheck": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

#### `jest.config.js`
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest',
  },
  testRegex: '.*\\.spec\\.ts$',
  moduleFileExtensions: ['ts', 'js', 'json', 'node'],
};
```

### TypeScript Test Class

Here’s the TypeScript test class using Jest:

```typescript
import { Document } from 'docx';
import { extractTextFromWord } from './path/to/your/extractTextFromWord'; // Import your function

describe('TestExtractTextFromWord', () => {
  let testDocxPath: string;

  beforeEach(() => {
    // Set up the testing environment
    testDocxPath = 'test_document.docx';
    createSampleDocx();
  });

  afterEach(() => {
    // Clean up the test environment
    if (require('fs').existsSync(testDocxPath)) {
      require('fs').unlinkSync(testDocxPath);
    }
  });

  function createSampleDocx() {
    // Helper method to create a sample Word document for testing
    const doc = new Document();
    doc.addParagraph('Hello World!');
    doc.addParagraph('This is a test document.');
    doc.save(testDocxPath);
  }

  it('should extract text from a normal Word document', () => {
    const expectedText = 'Hello World!\nThis is a test document.';
    const extractedText = extractTextFromWord(testDocxPath);
    expect(extractedText.trim()).toEqual(expectedText);
  });

  it('should extract text from an empty Word document', () => {
    const emptyDocxPath = 'empty_document.docx';
    new Document().save(emptyDocxPath);

    const extractedText = extractTextFromWord(emptyDocxPath);
    expect(extractedText).toEqual('');

    require('fs').unlinkSync(emptyDocxPath); // Clean up
  });

  it('should extract text from a document containing special characters', () => {
    const specialDocxPath = 'special_characters.docx';
    const doc = new Document();
    doc.addParagraph('Hello, 世界! @#$%^&*()');
    doc.save(specialDocxPath);

    const extractedText = extractTextFromWord(specialDocxPath);
    const expectedText = 'Hello, 世界! @#$%^&*()';
    expect(extractedText.trim()).toEqual(expectedText);

    require('fs').unlinkSync(specialDocxPath); // Clean up
  });

  it('should extract text from a document with multiple paragraphs', () => {
    const multiParaDocxPath = 'multi_paragraphs.docx';
    const doc = new Document();
    doc.addParagraph('First paragraph.');
    doc.addParagraph('Second paragraph.');
    doc.addParagraph('Third paragraph.');
    doc.save(multiParaDocxPath);

    const extractedText = extractTextFromWord(multiParaDocxPath);
    const expectedText = 'First paragraph.\nSecond paragraph.\nThird paragraph.';
    expect(extractedText.trim()).toEqual(expectedText);

    require('fs').unlinkSync(multiParaDocxPath); // Clean up
  });
});
```

### Explanation:
1. **Imports**:
   - Import the `Document` class from the `docx` package.
   - Import the `extractTextFromWord` function from your implementation.

2. **Setup and Teardown**:
   - Use `beforeEach` and `afterEach` hooks to set up and clean up the test environment.
   - Use `createSampleDocx` to create a sample document before each test.

3. **Test Cases**:
   - Each test case uses `it` blocks to describe the test scenario.
   - Use Jest assertions (`expect`) to verify the expected outcomes.

4. **File Operations**:
   - Use Node.js `fs` module to handle file operations such as checking existence and removing files.

This TypeScript code preserves the original functionality and structure of the Python unittest tests while adapting to Jest and TypeScript conventions.