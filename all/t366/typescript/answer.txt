Sure! Below is the equivalent TypeScript code for your Python function using the `mammoth` library, which can convert `.docx` files to HTML and then you can extract the text from it:

First, make sure to install the `mammoth` library using npm or yarn:

```bash
npm install mammoth
```

or

```bash
yarn add mammoth
```

Now, here's the TypeScript version of your Python function:

```typescript
import * as mammoth from 'mammoth';

async function extractTextFromWord(docxFilePath: string): Promise<string> {
    /**
     * Extracts text content from a given Word file (.docx).
     *
     * @param {string} docxFilePath - The path to the Word file.
     * @returns {Promise<string>} - The extracted text content.
     */
    
    try {
        const result = await mammoth.convertToHtml({ path: docxFilePath });
        const html = result.value; // The generated HTML
        const text = extractTextFromHtml(html); // Convert HTML to plain text
        return text;
    } catch (error) {
        throw new Error(`Failed to extract text from ${docxFilePath}: ${error.message}`);
    }
}

function extractTextFromHtml(html: string): string {
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    return tempDiv.textContent || tempDiv.innerText || '';
}

// Example usage:
(async () => {
    try {
        const text = await extractTextFromWord('path/to/your/file.docx');
        console.log(text);
    } catch (error) {
        console.error(error);
    }
})();
```

### Explanation:
1. **Importing `mammoth`**: We import the `mammoth` library to handle the conversion of `.docx` to HTML.
2. **Async Function**: The `extractTextFromWord` function is marked as `async` to allow for asynchronous operations.
3. **Error Handling**: We use a `try-catch` block to handle any errors that might occur during the file reading or conversion process.
4. **HTML Conversion**: The `mammoth.convertToHtml` method converts the `.docx` file to HTML.
5. **Extract Text from HTML**: The `extractTextFromHtml` helper function extracts text from the HTML by creating a temporary `div` element and accessing its `textContent`.

This TypeScript code should work similarly to your original Python function but in a TypeScript environment.