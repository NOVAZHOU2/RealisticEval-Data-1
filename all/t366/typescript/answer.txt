Sure! Hereâ€™s the equivalent TypeScript code for extracting text content from a Word document (.docx). Since TypeScript does not have a direct equivalent for the `python-docx` library, we will use the `docx` package in Node.js, which provides similar functionality. Make sure you have the `docx` package installed in your project:

```typescript
import { Document } from 'docx';

/**
 * Extracts text content from a given Word file (.docx).
 * 
 * @param docxFilePath - The path to the Word file.
 * @returns The extracted text content or null if an error occurs.
 */
function extractTextFromWord(docxFilePath: string): string | null {
    try {
        // Open the Word document
        const doc = Document.load(docxFilePath);
        // Extract text from each paragraph in the document
        const textContent: string[] = [];
        for (const para of doc.paragraphs) {
            textContent.push(para.text);
        }

        // Join the paragraphs with newlines
        return textContent.join('\n');
    } catch (error) {
        console.error(`An error occurred: ${error}`);
        return null;
    }
}

// Example usage
const filePath = './example.docx';
const extractedText = extractTextFromWord(filePath);
console.log(extractedText);
```

### Notes:
1. **Package Installation**: Ensure you have the `docx` package installed by running `npm install docx`.
2. **Error Handling**: The function returns `null` if an error occurs during the extraction process.
3. **Type Annotations**: Proper type annotations are used to ensure the function signature is clear and statically typed.

This TypeScript code follows the same logic and structure as the Python code but uses the appropriate TypeScript syntax and libraries.