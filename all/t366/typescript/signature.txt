Certainly! Hereâ€™s the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments:

```typescript
import { Document } from 'docx';

/**
 * Extracts text content from a given Word file (.docx).
 * 
 * @param docxFilePath - The path to the Word file.
 * @returns The extracted text content or null if an error occurs.
 */
function extractTextFromWord(docxFilePath: string): string | null {
    try {
        // Open the Word document
        const doc = Document.load(docxFilePath);
        // Extract text from each paragraph in the document
        const textContent: string[] = [];
        for (const para of doc.paragraphs) {
            textContent.push(para.text);
        }

        // Join the paragraphs with newlines
        return textContent.join('\n');
    } catch (error) {
        console.error(`An error occurred: ${error}`);
        return null;
    }
}

// Example usage
const filePath = './example.docx';
const extractedText = extractTextFromWord(filePath);
console.log(extractedText);
```

### Explanation:
1. **Import Statement**: The `Document` class is imported from the `docx` package.
2. **Function Signature**:
   - The function `extractTextFromWord` takes a single parameter `docxFilePath` of type `string`.
   - It returns either a `string` (the extracted text content) or `null` if an error occurs.
3. **JSDoc Comments**:
   - The function is documented using JSDoc-style comments, providing details about the parameters and return type.
4. **Error Handling**:
   - The function uses a try-catch block to handle errors and logs them to the console.
5. **Example Usage**:
   - An example usage is provided at the end to demonstrate how to call the function.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and best practices.