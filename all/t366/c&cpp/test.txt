To convert the provided Python unittest test class into an equivalent test class using Catch2 in C++, we need to first understand the requirements and then implement the necessary functionalities. Since the provided Python code snippet only includes a function definition without the actual test cases, I will provide a complete example including a mock implementation of `extract_text_from_word` and a Catch2 test case.

Hereâ€™s how you can write the equivalent test class using Catch2 in C++:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <fstream>

// Mock implementation of extract_text_from_word function
std::string extract_text_from_word(const std::string& docx_file_path) {
    // This is a mock implementation for demonstration purposes.
    // In a real scenario, you would parse the .docx file and extract text.
    if (docx_file_path == "valid_docx_file.docx") {
        return "This is a valid Word document.";
    } else if (docx_file_path == "empty_docx_file.docx") {
        return "";
    } else {
        throw std::runtime_error("File not found or invalid path.");
    }
}

TEST_CASE("Test extracting text from Word files", "[Word]") {
    SECTION("Valid Word document") {
        std::string docx_file_path = "valid_docx_file.docx";
        std::string expected_text = "This is a valid Word document.";
        REQUIRE(extract_text_from_word(docx_file_path) == expected_text);
    }

    SECTION("Empty Word document") {
        std::string docx_file_path = "empty_docx_file.docx";
        std::string expected_text = "";
        REQUIRE(extract_text_from_word(docx_file_path) == expected_text);
    }

    SECTION("Non-existent or invalid file path") {
        std::string docx_file_path = "nonexistent_file.docx";
        REQUIRE_THROWS_AS(extract_text_from_word(docx_file_path), std::runtime_error);
    }
}
```

### Explanation:
1. **Header Files**: We include the necessary header files, such as `<catch2/catch_test_macros.hpp>` for Catch2 and `<string>` for string operations.
2. **Function Definition**: We define the `extract_text_from_word` function with a mock implementation that simulates different scenarios based on the input file path.
3. **Test Cases**:
   - **Valid Word document**: Tests extracting text from a valid Word document and checks if the extracted text matches the expected text.
   - **Empty Word document**: Tests extracting text from an empty Word document and checks if the extracted text is an empty string.
   - **Non-existent or invalid file path**: Tests handling of non-existent or invalid file paths by checking if it throws a `std::runtime_error`.

This setup ensures that the functionality and logic of the tests are preserved while adapting to the syntax and conventions of C++ and Catch2.