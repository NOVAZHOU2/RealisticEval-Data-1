Certainly! Hereâ€™s the equivalent C++ code for the provided Python function, including appropriate comments and documentation standards:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <docx/Document.h>

/**
 * Extracts text content from a given Word file (.docx).
 *
 * @param docx_file_path The path to the Word file.
 * @return The extracted text content.
 */
std::string extract_text_from_word(const std::string& docx_file_path) {
    try {
        // Open the Word document
        docx::Document doc(docx_file_path);

        // Extract text from each paragraph in the document
        std::vector<std::string> text_content;
        for (const auto& para : doc.paragraphs()) {
            text_content.push_back(para.text());
        }

        // Join the paragraphs with newlines
        std::ostringstream joined_text;
        for (size_t i = 0; i < text_content.size(); ++i) {
            if (i > 0) {
                joined_text << '\n';
            }
            joined_text << text_content[i];
        }

        return joined_text.str();

    } catch (const std::exception& e) {
        std::cerr << "An error occurred: " << e.what() << std::endl;
        return "";
    }
}

int main() {
    std::string docx_file_path = "path/to/your/document.docx";
    std::string text_content = extract_text_from_word(docx_file_path);

    if (!text_content.empty()) {
        std::cout << text_content << std::endl;
    } else {
        std::cerr << "Failed to extract text." << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Headers**: Include necessary headers (`iostream`, `fstream`, `sstream`, `vector`, `string`, `docx/Document.h`) for file I/O, string manipulation, and document handling.
2. **Function Documentation**: Use multi-line comments (`/* ... */`) for the function documentation.
3. **Function Definition**: Define the `extract_text_from_word` function to extract text from a Word document.
4. **Exception Handling**: Use a try-catch block to handle exceptions and print error messages.
5. **Document Parsing**: Use the `docx::Document` class to open and parse the document.
6. **Text Extraction**: Iterate over paragraphs and extract text.
7. **Joining Text**: Use `std::ostringstream` to join the paragraphs with newline characters.
8. **Main Function**: Call the `extract_text_from_word` function and print the result.

### Detailed Comments:
- **Function Documentation**: The multi-line comment block provides detailed information about the function, its parameters, and return value.
- **Single-Line Comments**: Single-line comments (`//`) are used for inline comments within the function body.

This ensures that the C++ code is well-documented and follows standard C++ practices.