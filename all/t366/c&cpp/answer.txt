Certainly! Below is the equivalent C++ code for extracting text content from a Word document (.docx). To achieve this, we will use the `docx` library for C++, which can be installed via vcpkg or another package manager. We'll also include error handling and string manipulation similar to the Python version.

First, make sure you have the necessary dependencies installed. For this example, we will assume you have the `docx` library available.

Here's the C++ code:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <docx/Document.h> // Include the docx library

std::string extract_text_from_word(const std::string& docx_file_path) {
    /**
     * Extracts text content from a given Word file (.docx).
     *
     * Args:
     *     docx_file_path (const std::string&): The path to the Word file.
     *
     * Returns:
     *     std::string: The extracted text content.
     */
    try {
        // Open the Word document
        docx::Document doc(docx_file_path);
        
        // Extract text from each paragraph in the document
        std::vector<std::string> text_content;
        for (const auto& para : doc.paragraphs()) {
            text_content.push_back(para.text());
        }

        // Join the paragraphs with newlines
        std::ostringstream oss;
        for (size_t i = 0; i < text_content.size(); ++i) {
            if (i > 0) {
                oss << '\n';
            }
            oss << text_content[i];
        }

        return oss.str();

    } catch (const std::exception& e) {
        std::cerr << "An error occurred: " << e.what() << std::endl;
        return "";
    }
}

int main() {
    std::string docx_file_path = "example.docx"; // Replace with your file path
    std::string text = extract_text_from_word(docx_file_path);
    if (!text.empty()) {
        std::cout << text << std::endl;
    }
    return 0;
}
```

### Explanation:
1. **Includes**: The required headers are included, including `<docx/Document.h>` for working with Word documents.
2. **Function Definition**: The function `extract_text_from_word` takes a `std::string` parameter representing the file path.
3. **Error Handling**: A `try-catch` block is used to handle exceptions.
4. **Reading the Document**: The `docx::Document` class is used to open and read the Word document.
5. **Extracting Text**: Each paragraph's text is extracted and stored in a `std::vector<std::string>`.
6. **Joining Text**: An `std::ostringstream` is used to concatenate the paragraphs with newline characters.
7. **Main Function**: Demonstrates calling the function and printing the result.

Make sure you have the `docx` library installed and properly linked in your project to compile and run this code successfully.