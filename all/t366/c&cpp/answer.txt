Sure! Hereâ€™s the equivalent C++ code for extracting text content from a Word document (.docx). Note that C++ does not have a direct library equivalent to Python's `docx`, so we will use a third-party library called `docx` for C++, which can be installed via vcpkg or another package manager. Additionally, error handling in C++ typically involves more explicit exception handling.

First, you need to install the `librevenge` and `docx` libraries. You can install them using vcpkg or another package manager:

```sh
vcpkg install librevenge docx
```

Here is the C++ code:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <docx/Document.h>

std::string extract_text_from_word(const std::string& docx_file_path) {
    /**
     * Extracts text content from a given Word file (.docx).
     *
     * Args:
     *     docx_file_path (std::string): The path to the Word file.
     *
     * Returns:
     *     std::string: The extracted text content.
     */
    try {
        // Open the Word document
        docx::Document doc(docx_file_path);
        
        // Extract text from each paragraph in the document
        std::vector<std::string> text_content;
        for (const auto& para : doc.paragraphs()) {
            text_content.push_back(para.text());
        }

        // Join the paragraphs with newlines
        std::ostringstream joined_text;
        for (size_t i = 0; i < text_content.size(); ++i) {
            if (i > 0) {
                joined_text << '\n';
            }
            joined_text << text_content[i];
        }

        return joined_text.str();

    } catch (const std::exception& e) {
        std::cerr << "An error occurred: " << e.what() << std::endl;
        return "";
    }
}

int main() {
    std::string docx_file_path = "path/to/your/document.docx";
    std::string text_content = extract_text_from_word(docx_file_path);
    
    if (!text_content.empty()) {
        std::cout << text_content << std::endl;
    } else {
        std::cerr << "Failed to extract text." << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Headers**: Include necessary headers (`iostream`, `fstream`, `sstream`, `vector`, `string`, `docx/Document.h`) for file I/O, string manipulation, and document handling.
2. **Function Definition**: Define the `extract_text_from_word` function to extract text from a Word document.
3. **Exception Handling**: Use a try-catch block to handle exceptions and print error messages.
4. **Document Parsing**: Use the `docx::Document` class to open and parse the document.
5. **Text Extraction**: Iterate over paragraphs and extract text.
6. **Joining Text**: Use `std::ostringstream` to join the paragraphs with newline characters.
7. **Main Function**: Call the `extract_text_from_word` function and print the result.

Make sure you have the necessary libraries installed and properly linked in your build system.