Here's the equivalent JavaScript version of the provided C++ code, adapted for JavaScript conventions and preserving functionality:

```javascript
/**
 * Class that contains RGB representations of colors such as RED, GREEN, BLUE, YELLOW, 
 * MAGENTA, CYAN, WHITE, BLACK, ORANGE, PURPLE, PINK, BROWN, which can be obtained directly 
 * by the function.
 */
class Color {
    // Enum-like object to represent the color names
    static ColorName = {
        RED: 'RED',
        GREEN: 'GREEN',
        BLUE: 'BLUE',
        YELLOW: 'YELLOW',
        MAGENTA: 'MAGENTA',
        CYAN: 'CYAN',
        WHITE: 'WHITE',
        BLACK: 'BLACK',
        ORANGE: 'ORANGE',
        PURPLE: 'PURPLE',
        PINK: 'PINK',
        BROWN: 'BROWN'
    };

    constructor() {
        this.colors = {};
        this.initializeColors();
    }

    // Function to get the RGB value of a color by its name
    getColor(colorName) {
        return this.colors[colorName] || [0, 0, 0]; // Return black if not found
    }

    // Function to get the color name as a string
    getColorName(colorName) {
        switch (colorName) {
            case Color.ColorName.RED: return "Red";
            case Color.ColorName.GREEN: return "Green";
            case Color.ColorName.BLUE: return "Blue";
            case Color.ColorName.YELLOW: return "Yellow";
            case Color.ColorName.MAGENTA: return "Magenta";
            case Color.ColorName.CYAN: return "Cyan";
            case Color.ColorName.WHITE: return "White";
            case Color.ColorName.BLACK: return "Black";
            case Color.ColorName.ORANGE: return "Orange";
            case Color.ColorName.PURPLE: return "Purple";
            case Color.ColorName.PINK: return "Pink";
            case Color.ColorName.BROWN: return "Brown";
            default: return "Unknown Color";
        }
    }

    // Function to initialize the colors
    initializeColors() {
        this.colors[Color.ColorName.RED] = [255, 0, 0];
        this.colors[Color.ColorName.GREEN] = [0, 255, 0];
        this.colors[Color.ColorName.BLUE] = [0, 0, 255];
        this.colors[Color.ColorName.YELLOW] = [255, 255, 0];
        this.colors[Color.ColorName.MAGENTA] = [255, 0, 255];
        this.colors[Color.ColorName.CYAN] = [0, 255, 255];
        this.colors[Color.ColorName.WHITE] = [255, 255, 255];
        this.colors[Color.ColorName.BLACK] = [0, 0, 0];
        this.colors[Color.ColorName.ORANGE] = [255, 165, 0];
        this.colors[Color.ColorName.PURPLE] = [128, 0, 128];
        this.colors[Color.ColorName.PINK] = [255, 192, 203];
        this.colors[Color.ColorName.BROWN] = [165, 42, 42];
    }
}
```

### Key Changes:
- **Enum Handling:** Used a static object to simulate enum behavior.
- **RGB Values:** Used arrays instead of tuples for RGB values.
- **Default Values:** Returned black `[0, 0, 0]` if the color is not found in `getColor`.
- **Comments:** Converted C++ style comments to JavaScript comments.