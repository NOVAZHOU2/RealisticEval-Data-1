Here's the C++ code translated into TypeScript, maintaining the structure and functionality:

```typescript
/**
 * A class that contains RGB representations of various colors.
 */
class Color {
    // Enum to represent the color names
    enum ColorName {
        RED,
        GREEN,
        BLUE,
        YELLOW,
        MAGENTA,
        CYAN,
        WHITE,
        BLACK,
        ORANGE,
        PURPLE,
        PINK,
        BROWN
    }

    private colors: Map<ColorName, [number, number, number]> = new Map();

    // Constructor
    constructor() {
        this.initializeColors();
    }

    // Function to get the RGB value of a color by its name
    getColor(colorName: ColorName): [number, number, number] {
        return this.colors.get(colorName) || [0, 0, 0]; // Default to black if color not found
    }

    // Function to get the color name as a string
    getColorName(colorName: ColorName): string {
        switch (colorName) {
            case ColorName.RED: return "Red";
            case ColorName.GREEN: return "Green";
            case ColorName.BLUE: return "Blue";
            case ColorName.YELLOW: return "Yellow";
            case ColorName.MAGENTA: return "Magenta";
            case ColorName.CYAN: return "Cyan";
            case ColorName.WHITE: return "White";
            case ColorName.BLACK: return "Black";
            case ColorName.ORANGE: return "Orange";
            case ColorName.PURPLE: return "Purple";
            case ColorName.PINK: return "Pink";
            case ColorName.BROWN: return "Brown";
            default: return "Unknown Color";
        }
    }

    // Function to initialize the colors
    private initializeColors(): void {
        this.colors.set(ColorName.RED, [255, 0, 0]);
        this.colors.set(ColorName.GREEN, [0, 255, 0]);
        this.colors.set(ColorName.BLUE, [0, 0, 255]);
        this.colors.set(ColorName.YELLOW, [255, 255, 0]);
        this.colors.set(ColorName.MAGENTA, [255, 0, 255]);
        this.colors.set(ColorName.CYAN, [0, 255, 255]);
        this.colors.set(ColorName.WHITE, [255, 255, 255]);
        this.colors.set(ColorName.BLACK, [0, 0, 0]);
        this.colors.set(ColorName.ORANGE, [255, 165, 0]);
        this.colors.set(ColorName.PURPLE, [128, 0, 128]);
        this.colors.set(ColorName.PINK, [255, 192, 203]);
        this.colors.set(ColorName.BROWN, [165, 42, 42]);
    }
}
```

### Key Changes and Adaptations:
1. **Enums**: The enum declaration remains similar in TypeScript, with the syntax adjusted.
2. **Map for Colors**: Used `Map<ColorName, [number, number, number]>` to replace `unordered_map` and `tuple`.
3. **Function Return Types**: Specified return types directly in the function signatures.
4. **Default Return**: Added a default return for `getColor` if the color is not found, returning black.
5. **Constructor and Method Syntax**: Adjusted constructor and method definitions to TypeScript syntax.