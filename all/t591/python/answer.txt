Sure! Below is the Python code that replicates the functionality of the provided C++ code.
Python Code
python
class Color:
    # Enum-like class to represent the color names
    class ColorName:
        RED = 0
        GREEN = 1
        BLUE = 2
        YELLOW = 3
        MAGENTA = 4
        CYAN = 5
        WHITE = 6
        BLACK = 7
        ORANGE = 8
        PURPLE = 9
        PINK = 10
        BROWN = 11

    def __init__(self):
        # Initialize colors when an instance of Color is created
        self.colors = {}
        self.initialize_colors()

    def get_color(self, color_name):
        # Get the RGB value of a color by its name
        return self.colors.get(color_name, (0, 0, 0))

    def get_color_name(self, color_name):
        # Get the color name as a string
        color_names = {
            self.ColorName.RED: "Red",
            self.ColorName.GREEN: "Green",
            self.ColorName.BLUE: "Blue",
            self.ColorName.YELLOW: "Yellow",
            self.ColorName.MAGENTA: "Magenta",
            self.ColorName.CYAN: "Cyan",
            self.ColorName.WHITE: "White",
            self.ColorName.BLACK: "Black",
            self.ColorName.ORANGE: "Orange",
            self.ColorName.PURPLE: "Purple",
            self.ColorName.PINK: "Pink",
            self.ColorName.BROWN: "Brown"
        }
        return color_names.get(color_name, "Unknown Color")

    def initialize_colors(self):
        # Initialize the RGB values of the colors
        self.colors[self.ColorName.RED] = (255, 0, 0)
        self.colors[self.ColorName.GREEN] = (0, 255, 0)
        self.colors[self.ColorName.BLUE] = (0, 0, 255)
        self.colors[self.ColorName.YELLOW] = (255, 255, 0)
        self.colors[self.ColorName.MAGENTA] = (255, 0, 255)
        self.colors[self.ColorName.CYAN] = (0, 255, 255)
        self.colors[self.ColorName.WHITE] = (255, 255, 255)
        self.colors[self.ColorName.BLACK] = (0, 0, 0)
        self.colors[self.ColorName.ORANGE] = (255, 165, 0)
        self.colors[self.ColorName.PURPLE] = (128, 0, 128)
        self.colors[self.ColorName.PINK] = (255, 192, 203)
        self.colors[self.ColorName.BROWN] = (165, 42, 42)

# Example of how to use the Color class
if __name__ == "__main__":
    color = Color()
    color_name = color.get_color_name(Color.ColorName.RED)
    rgb_value = color.get_color(Color.ColorName.RED)

    print(f"The RGB value of {color_name} is {rgb_value}.")
Explanation of the Python Code
Color Class: The main class, Color, contains an inner class ColorName that acts like an enumeration for the colors.
Initialization: The __init__ method initializes the colors dictionary and calls initialize_colors() to populate it.
get_color() Method: This method retrieves the RGB value of a color based on its ColorName. If the color name is not found, it returns (0, 0, 0) as a default value.
get_color_name() Method: This method returns the string representation of the color name based on the ColorName. If the name is not recognized, it returns "Unknown Color".
initialize_colors() Method: This method initializes the RGB values for each color.
Example Usage: The example at the bottom demonstrates how to create an instance of Color and retrieve both the RGB value and name for the color red.
You can run the provided Python code in a local Python environment to see how it works.