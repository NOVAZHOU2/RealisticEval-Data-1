Certainly! Below is the equivalent Python unit test case using the `unittest` framework for the JavaScript function `removeElementInArray`.

```python
import unittest

def remove_element_in_array(array, element):
    try:
        index = array.index(element)
        return array[:index] + array[index+1:]
    except ValueError:
        return array

class TestRemoveElementInArray(unittest.TestCase):

    def test_remove_existing_element(self):
        self.assertEqual(remove_element_in_array([1, 2, 3, 4], 3), [1, 2, 4])

    def test_remove_non_existent_element(self):
        self.assertEqual(remove_element_in_array([1, 2, 3, 4], 5), [1, 2, 3, 4])

    def test_empty_array(self):
        self.assertEqual(remove_element_in_array([], 1), [])

    def test_single_element_array(self):
        self.assertEqual(remove_element_in_array([1], 1), [])

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
- **Function Definition**: The `remove_element_in_array` function in Python works similarly to the JavaScript version. It attempts to find the index of the element and removes it. If the element is not found, it returns the original array.
  
- **Unit Tests**:
  - `test_remove_existing_element`: Tests removing an existing element from the array.
  - `test_remove_non_existent_element`: Tests what happens when trying to remove an element that does not exist in the array.
  - `test_empty_array`: Tests the behavior with an empty array.
  - `test_single_element_array`: Tests the behavior with an array containing only one element.

This Python script uses the `unittest` framework to run these tests and verify that the `remove_element_in_array` function behaves as expected.