Hereâ€™s how you can convert the provided Jest test cases into JUnit 4 test cases in Java:

```java
package org.real.temp;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class Tester {

    @Test
    public void testReturnsOriginalArrayWhenElementNotFound() {
        List<Integer> result = ArrayUtils.removeElementInArray(List.of(1, 2, 3, 4), 5);
        assertEquals(List.of(1, 2, 3, 4), result);
    }

    @Test
    public void testHandlesEmptyArrayCorrectly() {
        List<Integer> result = ArrayUtils.removeElementInArray(new ArrayList<>(), 1);
        assertEquals(new ArrayList<>(), result);
    }

    @Test
    public void testRemovesElementFromArrayOfObjects() {
        Object obj1 = new MyObject(1);
        Object obj2 = new MyObject(2);
        Object obj3 = new MyObject(3);
        List<Object> result = ArrayUtils.removeElementInArray(List.of(obj1, obj2, obj3), obj2);
        assertEquals(List.of(obj1, obj3), result);
    }

    @Test
    public void testDoesNotModifyOriginalArray() {
        List<Integer> originalArray = new ArrayList<>(List.of(1, 2, 3));
        List<Integer> result = ArrayUtils.removeElementInArray(originalArray, 2);
        assertEquals(List.of(1, 2, 3), originalArray);
        assertEquals(List.of(1, 3), result);
    }

    private static class MyObject {
        private int id;

        public MyObject(int id) {
            this.id = id;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null || getClass() != obj.getClass()) return false;
            MyObject myObject = (MyObject) obj;
            return id == myObject.id;
        }

        @Override
        public int hashCode() {
            return Integer.hashCode(id);
        }
    }
}
```

### Explanation:
1. **JUnit Annotations**: The `@Test` annotation is used to mark methods as test cases.
2. **Assertions**: `assertEquals` is used to compare expected and actual values.
3. **List.of()**: This creates immutable lists, similar to JavaScript arrays.
4. **MyObject Class**: A simple class is created to simulate objects in the array, including `equals` and `hashCode` methods to ensure correct comparison.

Make sure to include the necessary imports for the classes used in your tests.