Sure! Here's the TypeScript version of your JavaScript function:

```typescript
/**
 * Removes the first occurrence of a specified element from an array.
 *
 * @param {Array<T>} array - The array from which to remove the element.
 * @param {T} element - The element to remove from the array.
 * @returns {Array<T>} A new array with the element removed, or the original array if the element is not found.
 */
function removeElementInArray<T>(array: T[], element: T): T[] {
    const index = array.indexOf(element);
    if (index !== -1) {
        return [...array.slice(0, index), ...array.slice(index + 1)];
    }
    return array;
}
```

### Explanation:
- **Type Parameters**: `<T>` allows the function to work with any type of elements in the array.
- **Function Signature**: `function removeElementInArray<T>(array: T[], element: T): T[]` specifies that the function takes an array and an element of type `T`, and returns an array of type `T`.
- **indexOf**: This method finds the first index at which a given element can be found in the array, or `-1` if it is not present.
- **Spread Operator (`...`)**: Used to create a new array without modifying the original one.

This TypeScript version maintains the functionality of your original JavaScript function while providing type safety.