Certainly! Below is the TypeScript version of your JavaScript function, including the type annotations and comments:

```typescript
/**
 * Removes the first occurrence of a specified element from an array.
 *
 * @param {T[]} array - The array from which to remove the element.
 * @param {T} element - The element to remove from the array.
 * @returns {T[]} A new array with the element removed, or the original array if the element is not found.
 */
function removeElementInArray<T>(array: T[], element: T): T[] {
    // Create a new array excluding the first occurrence of the specified element
    const index = array.indexOf(element);
    if (index !== -1) {
        return [...array.slice(0, index), ...array.slice(index + 1)];
    }
    // Return the original array if the element is not found
    return array;
}
```

### Explanation:
- **Type Annotations**: 
  - `T[]` indicates that `array` is an array of any type `T`.
  - `T` indicates that `element` is of type `T`.

- **Function Signature**:
  - The function now specifies its return type as `T[]`, which means it returns an array of the same type as the input elements.

- **Logic**:
  - The function uses the `indexOf` method to find the first occurrence of the `element` in the `array`.
  - If the `element` is found (`index !== -1`), it creates a new array without the `element` using array slicing (`slice`) and concatenation (`...`).
  - If the `element` is not found, it simply returns the original `array`.

This ensures type safety while maintaining the functionality of the original JavaScript function.