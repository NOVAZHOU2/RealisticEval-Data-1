Hereâ€™s how you can convert the provided JavaScript Jest test cases to C++ using the Catch2 testing framework:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>

std::vector<int> removeElementInArray(const std::vector<int>& array, int element) {
    std::vector<int> newArray;
    for (const auto& item : array) {
        if (item != element) {
            newArray.push_back(item);
        }
    }
    return newArray;
}

TEST_CASE("removeElementInArray", "[removeElementInArray]") {
    SECTION("returns the original array when the element is not found") {
        std::vector<int> result = removeElementInArray({1, 2, 3, 4}, 5);
        REQUIRE(result == std::vector<int>({1, 2, 3, 4}));
    }

    SECTION("handles an empty array correctly") {
        std::vector<int> result = removeElementInArray({}, 1);
        REQUIRE(result == std::vector<int>({}));
    }

    SECTION("removes an element from a vector of objects") {
        struct Obj {
            int id;
            bool operator==(const Obj& other) const {
                return id == other.id;
            }
        };
        
        Obj obj1{1}, obj2{2}, obj3{3};
        std::vector<Obj> result = removeElementInArray({obj1, obj2, obj3}, obj2);
        REQUIRE(result == std::vector<Obj>({obj1, obj3}));
    }

    SECTION("does not modify the original array") {
        std::vector<int> originalArray = {1, 2, 3};
        std::vector<int> result = removeElementInArray(originalArray, 2);
        REQUIRE(originalArray == std::vector<int>({1, 2, 3}));
        REQUIRE(result == std::vector<int>({1, 3}));
    }
}
```

### Key Changes:
- Used `Catch2` for the test cases.
- Created a simple struct `Obj` to represent objects for the vector test.
- Used `REQUIRE` instead of `expect` for assertions.
- Used `SECTION` to separate different test cases.

Make sure to link against Catch2 in your build system for these tests to run.