Sure! Here's how you can translate the JavaScript function signature into a C++ function signature while keeping the comments:

```cpp
/**
 * Removes the first occurrence of a specified element from an array.
 *
 * @param array - The array from which to remove the element.
 * @param element - The element to remove from the array.
 * @return A new vector with the element removed, or the original vector if the element is not found.
 */
std::vector<int> removeElementInArray(const std::vector<int>& array, int element);
```

Please note that in C++, we typically use `std::vector` instead of arrays for dynamic-sized collections. Also, since C++ does not have a built-in type for variable-length arrays like JavaScript, I assumed `int` as the type for both the array and the element. If your actual types are different, please adjust accordingly.

Here is an example implementation of the function:

```cpp
#include <vector>
#include <algorithm>

/**
 * Removes the first occurrence of a specified element from an array.
 *
 * @param array - The array from which to remove the element.
 * @param element - The element to remove from the array.
 * @return A new vector with the element removed, or the original vector if the element is not found.
 */
std::vector<int> removeElementInArray(const std::vector<int>& array, int element) {
    std::vector<int> result = array;
    auto it = std::find(result.begin(), result.end(), element);
    if (it != result.end()) {
        result.erase(it);
    }
    return result;
}
```

This implementation uses the `std::find` algorithm to locate the first occurrence of the element and then removes it using `std::vector::erase`.