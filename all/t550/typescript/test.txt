Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included to map the Python unittest assertions to their Jest equivalents.

### TypeScript Code

```typescript
import { convertLog10KToKeV } from './path-to-your-conversion-function'; // Import your conversion function

describe('convertLog10KToKeV', () => {
    const k_B_over_keV = 8.617333262145e-5; // eV/K to keV/K

    describe('test scalar input', () => {
        it('should correctly convert a single scalar log10(K) value', () => {
            const T_log10_K = 3.0;
            const expected_result = Math.pow(10, T_log10_K) * k_B_over_keV;
            const result = convertLog10KToKeV(T_log10_K);
            expect(result).toBeCloseTo(expected_result, 6);
        });
    });

    describe('test tuple input', () => {
        it('should correctly convert a tuple of log10(K) values', () => {
            const T_log10_K = [2.0, 3.0, 4.0];
            const expected_results = T_log10_K.map(t => Math.pow(10, t) * k_B_over_keV);
            const result = convertLog10KToKeV(T_log10_K);
            expect(result).toEqual(expected_results);
        });
    });

    describe('test zero input', () => {
        it('should correctly convert log10(K) = 0', () => {
            const T_log10_K = 0.0;
            const expected_result = Math.pow(10, T_log10_K) * k_B_over_keV;
            const result = convertLog10KToKeV(T_log10_K);
            expect(result).toBeCloseTo(expected_result, 6);
        });
    });

    describe('test negative input', () => {
        it('should correctly convert a negative log10(K) value', () => {
            const T_log10_K = -1.0;
            const expected_result = Math.pow(10, T_log10_K) * k_B_over_keV;
            const result = convertLog10KToKeV(T_log10_K);
            expect(result).toBeCloseTo(expected_result, 6);
        });
    });

    describe('test large tuple input', () => {
        it('should correctly convert a large tuple of log10(K) values', () => {
            const T_log10_K = [1.0, 2.0, 3.0, 4.0, 5.0];
            const expected_results = T_log10_K.map(t => Math.pow(10, t) * k_B_over_keV);
            const result = convertLog10KToKeV(T_log10_K);
            expect(result).toEqual(expected_results);
        });
    });

    describe('test single large value', () => {
        it('should correctly convert a large log10(K) value', () => {
            const T_log10_K = 10.0;
            const expected_result = Math.pow(10, T_log10_K) * k_B_over_keV;
            const result = convertLog10KToKeV(T_log10_K);
            expect(result).toBeCloseTo(expected_result, 6);
        });
    });

    describe('test invalid input', () => {
        it('should throw an error when input is invalid (string)', () => {
            const T_log10_K = "invalid";
            expect(() => convertLog10KToKeV(T_log10_K)).toThrow('Input must be a number or an array of temperatures.');
        });
    });
});
```

### Explanation:
1. **Import Statements**: The `convertLog10KToKeV` function is imported from the appropriate module.
2. **Describe Blocks**: Each test case is wrapped in a `describe` block for better organization and readability.
3. **Jest Assertions**:
   - `toBeCloseTo` is used for floating-point comparisons, similar to `assertAlmostEqual` in Python.
   - `toEqual` is used for comparing arrays, similar to `assertEqual` in Python.
   - `toThrow` is used to check if a function throws an error, similar to `assertRaises` in Python.
4. **Type Annotations**: The input and output types are inferred from the function definition.
5. **Math Functions**: `Math.pow` is used to calculate powers, equivalent to `10 ** T_log10_K` in Python.
6. **Example Usage**: Each test case is structured to clearly demonstrate the expected behavior of the function.

This TypeScript code preserves the original functionality and logic of the Python unittests while adapting them to Jest's syntax and conventions.