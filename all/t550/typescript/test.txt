Here's how you can convert your Python unittest test class to a TypeScript test case using Jest:

```typescript
// Import necessary modules and functions
import { expect } from '@jest/globals';
import { convertLog10KToKeV } from './path-to-your-module'; // Adjust the path accordingly

describe('convertLog10KToKeV', () => {
    it('should convert a single log10(K) value to keV correctly', () => {
        const T_log10_K = 3;
        const expectedKeV = Math.pow(10, T_log10_K) * 8.617333262145e-5;

        expect(convertLog10KToKeV(T_log10_K)).toBeCloseTo(expectedKeV);
    });

    it('should handle multiple log10(K) values in a tuple correctly', () => {
        const T_log10_Ks = [3, 4, 5];
        const expectedKeVs = T_log10_Ks.map(T_log10_K => Math.pow(10, T_log10_K) * 8.617333262145e-5);

        expect(convertLog10KToKeV(T_log10_Ks)).toEqual(expect.arrayContaining(expectedKeVs));
    });

    it('should throw an error if input is not a scalar or a tuple', () => {
        expect(() => convertLog10KToKeV("not a number")).toThrowError('Input must be a scalar (number) or a tuple.');
        expect(() => convertLog10KToKeV({})).toThrowError('Input must be a scalar (number) or a tuple.');
    });
});
```

This TypeScript test case uses Jest to verify that the `convertLog10KToKeV` function behaves as expected under different conditions. It checks the conversion for a single value, multiple values in a tuple, and ensures that errors are thrown when invalid inputs are provided. Make sure to replace `'./path-to-your-module'` with the actual path where your `convertLog10KToKeV` function is defined.