Certainly! Below is the equivalent TypeScript code for the provided Python code, including proper type annotations and JSDoc-style documentation comments:

```typescript
// Import necessary packages
import { pow } from "mathjs";

// Define the constant for conversion: Boltzmann constant in keV/K
const k_B_over_keV = 8.617333262145e-5; // eV/K to keV/K

/**
 * Converts temperature from log10(K) to keV for a given input (number or array).
 *
 * @param T_log10_K - The temperature in log10(K). Can be a number or an array of temperatures.
 * @returns The temperature(s) in keV corresponding to the input.
 * @throws {Error} If the input is not a number or an array.
 */
function convertLog10KToKeV(T_log10_K: number | number[]): number | number[] {
    // Check if the input is a number
    if (typeof T_log10_K === 'number') {
        const T_kelvin = pow(10, T_log10_K); // Convert log10(K) to K
        return T_kelvin * k_B_over_keV; // Convert K to keV
    }

    // Check if the input is an array
    else if (Array.isArray(T_log10_K)) {
        return T_log10_K.map(t => pow(10, t) * k_B_over_keV); // Convert each value
    }

    // Raise an error for unsupported input types
    else {
        throw new Error('Input must be a number or an array of temperatures.');
    }
}

// Example usage
console.log(convertLog10KToKeV(5.0)); // Scalar example
console.log(convertLog10KToKeV([5.0, 6.0])); // Array example
```

### Explanation:
1. **Import Statement**: The `pow` function from `mathjs` is imported to handle the power operation, which is equivalent to `numpy.power` or `Math.pow` in JavaScript/TypeScript.
2. **Constant Definition**: The Boltzmann constant `k_B_over_keV` is defined as a constant in TypeScript.
3. **Function Definition**: The function `convertLog10KToKeV` is defined with a type signature indicating it can accept either a number or an array of numbers.
4. **JSDoc Documentation**: The function is documented using JSDoc comments, providing clear descriptions of parameters, return values, and possible exceptions.
5. **Type Checking**:
   - For a single number input, the function converts the logarithmic temperature to Kelvin and then to keV.
   - For an array of numbers, it maps over the array and performs the same conversion for each element.
6. **Error Handling**: If the input is neither a number nor an array, an error is thrown.
7. **Example Usage**: Two examples are provided to demonstrate how the function works with both scalar and array inputs.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices.