Certainly! Below is an equivalent C++ test case using Catch2 for the `countNumbers` function. Note that I'll assume you have a basic implementation of the `countNumbers` function in C++. If not, please provide one.

First, let's define the `countNumbers` function:

```cpp
#include <iostream>
#include <cctype>

int countNumbers(const std::string& str) {
    int count = 0;
    for (char ch : str) {
        if (std::isdigit(ch)) {
            ++count;
        }
    }
    return count;
}
```

Now, let's write the Catch2 test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

TEST_CASE("Count numbers in a string", "[countNumbers]") {
    REQUIRE(countNumbers("") == 0);
    REQUIRE(countNumbers("abc") == 0);
    REQUIRE(countNumbers("123") == 3);
    REQUIRE(countNumbers("a1b2c3") == 3);
    REQUIRE(countNumbers("hello world!") == 0);
    REQUIRE(countNumbers("1234567890") == 10);
    REQUIRE(countNumbers("1a2b3c4d5e") == 5);
    REQUIRE(countNumbers("no numbers here!") == 0);
    REQUIRE(countNumbers("0n3 r0ck$!") == 3);
}
```

### Explanation:
- `#define CATCH_CONFIG_MAIN`: This macro tells Catch2 to automatically generate the main function.
- `#include "catch.hpp"`: This includes the Catch2 header file.
- `TEST_CASE("Description", "[tag]")`: Defines a test case with a description and tags.
- `REQUIRE(condition)`: Checks if the condition is true; if false, the test fails.

This setup will help you verify that your `countNumbers` function works correctly for various input scenarios. Make sure you have Catch2 installed and properly configured in your project to run these tests.