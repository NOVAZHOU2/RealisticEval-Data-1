Sure! Below is the equivalent Java JUnit test case for the provided JavaScript Jest test code.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    /**
     * Counts the number of numbers in a string.
     *
     * @param str The string from which to count numeric digits.
     * @return The total count of numeric digits found in the string.
     */
    public int countNumbers(String str) {
        if (str == null || str.isEmpty()) {
            return 0;
        }
        
        int count = 0;
        for (char c : str.toCharArray()) {
            if (Character.isDigit(c)) {
                count++;
            }
        }
        return count;
    }

    @Test
    public void testCountNumbers() {
        Tester tester = new Tester();
        
        // Test cases
        assertEquals(0, tester.countNumbers("abc"));
        assertEquals(1, tester.countNumbers("a1b2c3"));
        assertEquals(3, tester.countNumbers("1234567890"));
        assertEquals(0, tester.countNumbers(""));
        assertEquals(0, tester.countNumbers(null));
    }
}
```

### Explanation:
1. **Package and Class**: The package name is `org.real.temp` and the class name is `Tester`.
2. **Method `countNumbers`**: This method counts the number of numeric digits in a given string.
3. **JUnit Test Case**:
   - The `@Test` annotation marks the `testCountNumbers` method as a test case.
   - We create an instance of the `Tester` class within the test method.
   - We use `assertEquals` to verify that the output of `countNumbers` matches the expected results for various input strings.

This Java JUnit test case should work similarly to the provided JavaScript Jest test case.