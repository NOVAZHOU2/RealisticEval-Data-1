Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The Python `unittest` assertions are mapped to the appropriate Jest assertions.

### TypeScript Code

First, ensure you have Jest installed in your project:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Then, configure Jest in your `tsconfig.json` and `jest.config.js` files:

```json
// tsconfig.json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

```js
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest',
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
};
```

Now, here is the TypeScript test class using Jest:

```typescript
import { alignLinesLeft } from './path/to/alignLinesLeft'; // Import the alignLinesLeft function

describe('alignLinesLeft', () => {
  it('should align equal length strings correctly', () => {
    const str1 = "Hello";
    const str2 = "World";
    const expectedStr1 = "Hello";
    const expectedStr2 = "World";
    const [alignedStr1, alignedStr2] = alignLinesLeft(str1, str2);
    expect(alignedStr1).toBe(expectedStr1);
    expect(alignedStr2).toBe(expectedStr2);
  });

  it('should align when the first string is longer', () => {
    const str1 = "Hello, World!";
    const str2 = "Hi";
    const expectedStr1 = "Hello, World!";
    const expectedStr2 = "Hi           "; // 14 spaces after "Hi"
    const [alignedStr1, alignedStr2] = alignLinesLeft(str1, str2);
    expect(alignedStr1).toBe(expectedStr1);
    expect(alignedStr2).toBe(expectedStr2);
  });

  it('should align when the second string is longer', () => {
    const str1 = "Hey";
    const str2 = "Goodbye, friend!";
    const expectedStr1 = "Hey             "; // 15 spaces after "Hey"
    const expectedStr2 = "Goodbye, friend!";
    const [alignedStr1, alignedStr2] = alignLinesLeft(str1, str2);
    expect(alignedStr1).toBe(expectedStr1);
    expect(alignedStr2).toBe(expectedStr2);
  });

  it('should align when the first string is empty', () => {
    const str1 = "";
    const str2 = "World";
    const expectedStr1 = "     "; // 5 spaces
    const expectedStr2 = "World";
    const [alignedStr1, alignedStr2] = alignLinesLeft(str1, str2);
    expect(alignedStr1).toBe(expectedStr1);
    expect(alignedStr2).toBe(expectedStr2);
  });

  it('should align when the second string is empty', () => {
    const str1 = "Hello";
    const str2 = "";
    const expectedStr1 = "Hello";
    const expectedStr2 = "     "; // 5 spaces
    const [alignedStr1, alignedStr2] = alignLinesLeft(str1, str2);
    expect(alignedStr1).toBe(expectedStr1);
    expect(alignedStr2).toBe(expectedStr2);
  });

  it('should align when both strings are empty', () => {
    const str1 = "";
    const str2 = "";
    const expectedStr1 = "";
    const expectedStr2 = "";
    const [alignedStr1, alignedStr2] = alignLinesLeft(str1, str2);
    expect(alignedStr1).toBe(expectedStr1);
    expect(alignedStr2).toBe(expectedStr2);
  });

  it('should align strings with spaces correctly', () => {
    const str1 = "Hello ";
    const str2 = "World  ";
    const expectedStr1 = "Hello  ";
    const expectedStr2 = "World  ";
    const [alignedStr1, alignedStr2] = alignLinesLeft(str1, str2);
    expect(alignedStr1).toBe(expectedStr1);
    expect(alignedStr2).toBe(expectedStr2);
  });
});
```

### Explanation:
1. **Import Function**: Import the `alignLinesLeft` function from its respective file.
2. **Describe Block**: Use `describe` to group the tests under the `alignLinesLeft` function.
3. **Test Cases**: Each `it` block represents a test case.
4. **Assertions**: Use `expect` with `toBe` to check the equality of the aligned strings.
5. **Data Setup**: Define the input strings and expected results for each test case.
6. **Function Call**: Call the `alignLinesLeft` function with the input strings and compare the results with the expected values.

This setup ensures that the tests are structured and executed similarly to the Python `unittest` framework, but using Jest's syntax and assertions.