Certainly! Here is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <utility> // For std::pair

/**
 * Align two lines of string to the left, supplementing with spaces if the length is not enough.
 *
 * @param str1 The first string.
 * @param str2 The second string.
 * @return A pair of aligned strings (aligned_str1, aligned_str2).
 */
std::pair<std::string, std::string> align_lines_left(const std::string& str1, const std::string& str2) {
    // Determine the maximum length of the two strings
    size_t max_length = std::max(str1.length(), str2.length());

    // Align both strings to the left by padding with spaces
    std::string aligned_str1 = str1;
    std::string aligned_str2 = str2;

    aligned_str1.append(max_length - str1.length(), ' ');
    aligned_str2.append(max_length - str2.length(), ' ');

    return {aligned_str1, aligned_str2};
}

int main() {
    // Example usage
    std::string str1 = "Hello";
    std::string str2 = "World!";
    auto [aligned_str1, aligned_str2] = align_lines_left(str1, str2);

    std::cout << "Aligned str1: " << aligned_str1 << std::endl;
    std::cout << "Aligned str2: " << aligned_str2 << std::endl;

    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `#include <iostream>`: For input/output operations.
   - `#include <string>`: For using `std::string`.
   - `#include <utility>`: For using `std::pair`.

2. **Function Documentation**:
   - The function `align_lines_left` is documented using C++ style comments (`/* ... */`) and includes parameter descriptions and return value description.

3. **Function Definition**:
   - The function `align_lines_left` takes two `const std::string&` parameters and returns a `std::pair<std::string, std::string>`.

4. **Determine Maximum Length**:
   - `size_t max_length = std::max(str1.length(), str2.length());`: Finds the maximum length between the two strings.

5. **Padding Strings**:
   - `aligned_str1.append(max_length - str1.length(), ' ');`: Appends spaces to `aligned_str1` to match the maximum length.
   - `aligned_str2.append(max_length - str2.length(), ' ');`: Appends spaces to `aligned_str2` to match the maximum length.

6. **Return Value**:
   - Returns a pair of the aligned strings.

7. **Example Usage in Main**:
   - Demonstrates how to call the function and print the results.

This C++ code preserves the original purpose and structure of the Python code, ensuring that the strings are aligned to the left by padding with spaces. The comments and documentation have been adapted to C++ standards.