Sure! Below is the equivalent C++ code for the provided Python function `align_lines_left`. This function takes two strings and returns them aligned to the left, padding with spaces if necessary.

```cpp
#include <iostream>
#include <string>
#include <algorithm>

std::pair<std::string, std::string> alignLinesLeft(const std::string& str1, const std::string& str2) {
    size_t maxLength = std::max(str1.length(), str2.length());
    
    // Create new strings with padding
    std::string paddedStr1 = str1;
    std::string paddedStr2 = str2;

    paddedStr1.resize(maxLength);
    paddedStr2.resize(maxLength);

    return {paddedStr1, paddedStr2};
}

int main() {
    std::string str1 = "Hello";
    std::string str2 = "World";

    auto [alignedStr1, alignedStr2] = alignLinesLeft(str1, str2);

    std::cout << "Aligned Str1: " << alignedStr1 << std::endl;
    std::cout << "Aligned Str2: " << alignedStr2 << std::endl;

    return 0;
}
```

### Explanation:

1. **Function Definition**:
   - The function `alignLinesLeft` takes two `const std::string&` parameters (`str1` and `str2`) and returns a `std::pair<std::string, std::string>`.

2. **Calculate Maximum Length**:
   - We use `std::max` to find the maximum length between `str1` and `str2`.

3. **Padding Strings**:
   - We create new strings `paddedStr1` and `paddedStr2` and resize them to the maximum length using the `resize` method. If the original string is shorter than the maximum length, it will be padded with spaces.

4. **Return Pair**:
   - The function returns a pair containing the padded strings.

5. **Main Function**:
   - In the `main` function, we demonstrate how to call `alignLinesLeft` and print the results.

This C++ code should work similarly to your Python function, aligning two input strings to the left and padding them with spaces if necessary.