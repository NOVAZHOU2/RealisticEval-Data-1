Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a C++ test class with equivalent functionality and logic, using appropriate assertions in Catch2.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 using the following headers:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <utility>

// Function to align two lines of string to the left, supplementing with spaces if the length is not enough
std::pair<std::string, std::string> align_lines_left(const std::string& str1, const std::string& str2) {
    // Determine the maximum length of the two strings
    size_t max_length = std::max(str1.length(), str2.length());

    // Align both strings to the left by padding with spaces
    std::string aligned_str1 = str1;
    std::string aligned_str2 = str2;

    aligned_str1.append(max_length - str1.length(), ' ');
    aligned_str2.append(max_length - str2.length(), ' ');

    return {aligned_str1, aligned_str2};
}

TEST_CASE("Test align_lines_left function", "[align_lines_left]") {
    SECTION("Equal length strings") {
        std::string str1 = "Hello";
        std::string str2 = "World";
        std::string expected_str1 = "Hello";
        std::string expected_str2 = "World";
        auto [aligned_str1, aligned_str2] = align_lines_left(str1, str2);
        REQUIRE(aligned_str1 == expected_str1);
        REQUIRE(aligned_str2 == expected_str2);
    }

    SECTION("First string longer") {
        std::string str1 = "Hello, World!";
        std::string str2 = "Hi";
        std::string expected_str1 = "Hello, World!";
        std::string expected_str2 = "Hi           ";  // 14 spaces after "Hi"
        auto [aligned_str1, aligned_str2] = align_lines_left(str1, str2);
        REQUIRE(aligned_str1 == expected_str1);
        REQUIRE(aligned_str2 == expected_str2);
    }

    SECTION("Second string longer") {
        std::string str1 = "Hey";
        std::string str2 = "Goodbye, friend!";
        std::string expected_str1 = "Hey             ";  // 15 spaces after "Hey"
        std::string expected_str2 = "Goodbye, friend!";
        auto [aligned_str1, aligned_str2] = align_lines_left(str1, str2);
        REQUIRE(aligned_str1 == expected_str1);
        REQUIRE(aligned_str2 == expected_str2);
    }

    SECTION("Empty first string") {
        std::string str1 = "";
        std::string str2 = "World";
        std::string expected_str1 = "     ";  // 5 spaces
        std::string expected_str2 = "World";
        auto [aligned_str1, aligned_str2] = align_lines_left(str1, str2);
        REQUIRE(aligned_str1 == expected_str1);
        REQUIRE(aligned_str2 == expected_str2);
    }

    SECTION("Empty second string") {
        std::string str1 = "Hello";
        std::string str2 = "";
        std::string expected_str1 = "Hello";
        std::string expected_str2 = "     ";  // 5 spaces
        auto [aligned_str1, aligned_str2] = align_lines_left(str1, str2);
        REQUIRE(aligned_str1 == expected_str1);
        REQUIRE(aligned_str2 == expected_str2);
    }

    SECTION("Both strings empty") {
        std::string str1 = "";
        std::string str2 = "";
        std::string expected_str1 = "";
        std::string expected_str2 = "";
        auto [aligned_str1, aligned_str2] = align_lines_left(str1, str2);
        REQUIRE(aligned_str1 == expected_str1);
        REQUIRE(aligned_str2 == expected_str2);
    }

    SECTION("Strings with spaces") {
        std::string str1 = "Hello ";
        std::string str2 = "World  ";
        std::string expected_str1 = "Hello  ";
        std::string expected_str2 = "World  ";
        auto [aligned_str1, aligned_str2] = align_lines_left(str1, str2);
        REQUIRE(aligned_str1 == expected_str1);
        REQUIRE(aligned_str2 == expected_str2);
    }
}
```

### Explanation:
1. **Header Files**:
   - `#include <catch2/catch_test_macros.hpp>`: For Catch2 testing macros.
   - `#include <string>`: For using `std::string`.
   - `#include <utility>`: For using `std::pair`.

2. **Function Definition**:
   - The `align_lines_left` function is defined to align two strings to the left by padding with spaces.

3. **Test Class**:
   - The `TEST_CASE` macro defines a test case named "Test align_lines_left function" with the tag `[align_lines_left]`.
   - Each `SECTION` within the test case represents a specific test scenario.

4. **Assertions**:
   - `REQUIRE` is used to assert that the aligned strings match the expected values.

5. **Test Scenarios**:
   - Each section tests different scenarios, such as equal length strings, one string being longer than the other, empty strings, and strings with spaces.

This C++ code preserves the original purpose and structure of the Python unittest class, ensuring that the functionality and logic of the tests are maintained. The assertions in Catch2 are used to verify the correctness of the `align_lines_left` function.