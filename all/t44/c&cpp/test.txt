Sure! Below is an equivalent C++ unit test case using Catch2 for the provided Python `unittest` test class. The function `align_lines_left` is assumed to be implemented in C++. For simplicity, I'll provide a mock implementation of the function.

First, let's define the function in C++:

```cpp
#include <string>
#include <tuple>

std::tuple<std::string, std::string> align_lines_left(const std::string& str1, const std::string& str2) {
    size_t max_length = std::max(str1.length(), str2.length());
    std::string padded_str1 = str1 + std::string(max_length - str1.length(), ' ');
    std::string padded_str2 = str2 + std::string(max_length - str2.length(), ' ');
    return {padded_str1, padded_str2};
}
```

Next, let's write the unit test case using Catch2:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"

// Mock implementation of align_lines_left for testing purposes
std::tuple<std::string, std::string> align_lines_left(const std::string& str1, const std::string& str2) {
    size_t max_length = std::max(str1.length(), str2.length());
    std::string padded_str1 = str1 + std::string(max_length - str1.length(), ' ');
    std::string padded_str2 = str2 + std::string(max_length - str2.length(), ' ');
    return {padded_str1, padded_str2};
}

TEST_CASE("Align lines left", "[align_lines_left]") {
    SECTION("Both strings have the same length") {
        auto result = align_lines_left("hello", "world");
        REQUIRE(std::get<0>(result) == "hello");
        REQUIRE(std::get<1>(result) == "world");
    }

    SECTION("First string is longer") {
        auto result = align_lines_left("hello", "hi");
        REQUIRE(std::get<0>(result) == "hello");
        REQUIRE(std::get<1>(result) == "hi   ");
    }

    SECTION("Second string is longer") {
        auto result = align_lines_left("hi", "hello");
        REQUIRE(std::get<0>(result) == " hi  ");
        REQUIRE(std::get<1>(result) == "hello");
    }
}
```

In this example, we've defined a mock implementation of `align_lines_left` for testing purposes. We then use Catch2 to write three test cases that cover different scenarios: when both strings have the same length, when the first string is longer, and when the second string is longer.

To compile and run these tests, you need to have Catch2 installed and properly configured in your build system. If you're using CMake, you can add the following to your `CMakeLists.txt`:

```cmake
find_package(Catch2 REQUIRED)
add_executable(test_align_lines_left test_align_lines_left.cpp)
target_link_libraries(test_align_lines_left Catch2::Catch2WithMain)
```

Then, you can build and run the tests using CMake:

```sh
mkdir build
cd build
cmake ..
make
./test_align_lines_left
```

This will execute the unit tests and provide output indicating whether each test passed or failed.