Certainly! I will convert the given Python `unittest` test class into an equivalent Jest test suite, ensuring that the functionality and logic of the tests are maintained. Hereâ€™s the conversion:

### Python Code:
```python
import unittest

class TestAlignLinesLeft(unittest.TestCase):

    def test_equal_length_strings(self):
        str1 = "Hello"
        str2 = "World"
        expected_str1 = "Hello"
        expected_str2 = "World"
        aligned_str1, aligned_str2 = align_lines_left(str1, str2)
        self.assertEqual(aligned_str1, expected_str1)
        self.assertEqual(aligned_str2, expected_str2)

    def test_first_string_longer(self):
        str1 = "Hello, World!"
        str2 = "Hi"
        expected_str1 = "Hello, World!"
        expected_str2 = "Hi           "  # 14 spaces after "Hi"
        aligned_str1, aligned_str2 = align_lines_left(str1, str2)
        self.assertEqual(aligned_str1, expected_str1)
        self.assertEqual(aligned_str2, expected_str2)

    def test_second_string_longer(self):
        str1 = "Hey"
        str2 = "Goodbye, friend!"
        expected_str1 = "Hey             "  # 15 spaces after "Hey"
        expected_str2 = "Goodbye, friend!"
        aligned_str1, aligned_str2 = align_lines_left(str1, str2)
        self.assertEqual(aligned_str1, expected_str1)
        self.assertEqual(aligned_str2, expected_str2)

    def test_empty_first_string(self):
        str1 = ""
        str2 = "World"
        expected_str1 = "     "  # 5 spaces
        expected_str2 = "World"
        aligned_str1, aligned_str2 = align_lines_left(str1, str2)
        self.assertEqual(aligned_str1, expected_str1)
        self.assertEqual(aligned_str2, expected_str2)

    def test_empty_second_string(self):
        str1 = "Hello"
        str2 = ""
        expected_str1 = "Hello"
        expected_str2 = "     "  # 5 spaces
        aligned_str1, aligned_str2 = align_lines_left(str1, str2)
        self.assertEqual(aligned_str1, expected_str1)
        self.assertEqual(aligned_str2, expected_str2)

    def test_both_strings_empty(self):
        str1 = ""
        str2 = ""
        expected_str1 = ""
        expected_str2 = ""
        aligned_str1, aligned_str2 = align_lines_left(str1, str2)
        self.assertEqual(aligned_str1, expected_str1)
        self.assertEqual(aligned_str2, expected_str2)

    def test_strings_with_spaces(self):
        str1 = "Hello "
        str2 = "World  "
        expected_str1 = "Hello  "
        expected_str2 = "World  "
        aligned_str1, aligned_str2 = align_lines_left(str1, str2)
        self.assertEqual(aligned_str1, expected_str1)
        self.assertEqual(aligned_str2, expected_str2)
```

### Equivalent Jest Test Suite:
```javascript
const alignLinesLeft = require('./alignLinesLeft'); // Assuming alignLinesLeft is exported from another file

describe('alignLinesLeft', () => {
    it('aligns equal length strings correctly', () => {
        const str1 = "Hello";
        const str2 = "World";
        const expected_str1 = "Hello";
        const expected_str2 = "World";
        const [aligned_str1, aligned_str2] = alignLinesLeft(str1, str2);
        expect(aligned_str1).toBe(expected_str1);
        expect(aligned_str2).toBe(expected_str2);
    });

    it('aligns first string longer than second', () => {
        const str1 = "Hello, World!";
        const str2 = "Hi";
        const expected_str1 = "Hello, World!";
        const expected_str2 = "Hi           ";  // 14 spaces after "Hi"
        const [aligned_str1, aligned_str2] = alignLinesLeft(str1, str2);
        expect(aligned_str1).toBe(expected_str1);
        expect(aligned_str2).toBe(expected_str2);
    });

    it('aligns second string longer than first', () => {
        const str1 = "Hey";
        const str2 = "Goodbye, friend!";
        const expected_str1 = "Hey             ";  // 15 spaces after "Hey"
        const expected_str2 = "Goodbye, friend!";
        const [aligned_str1, aligned_str2] = alignLinesLeft(str1, str2);
        expect(aligned_str1).toBe(expected_str1);
        expect(aligned_str2).toBe(expected_str2);
    });

    it('aligns empty first string', () => {
        const str1 = "";
        const str2 = "World";
        const expected_str1 = "     ";  // 5 spaces
        const expected_str2 = "World";
        const [aligned_str1, aligned_str2] = alignLinesLeft(str1, str2);
        expect(aligned_str1).toBe(expected_str1);
        expect(aligned_str2).toBe(expected_str2);
    });

    it('aligns empty second string', () => {
        const str1 = "Hello";
        const str2 = "";
        const expected_str1 = "Hello";
        const expected_str2 = "     ";  // 5 spaces
        const [aligned_str1, aligned_str2] = alignLinesLeft(str1, str2);
        expect(aligned_str1).toBe(expected_str1);
        expect(aligned_str2).toBe(expected_str2);
    });

    it('aligns both empty strings', () => {
        const str1 = "";
        const str2 = "";
        const expected_str1 = "";
        const expected_str2 = "";
        const [aligned_str1, aligned_str2] = alignLinesLeft(str1, str2);
        expect(aligned_str1).toBe(expected_str1);
        expect(aligned_str2).toBe(expected_str2);
    });

    it('aligns strings with spaces', () => {
        const str1 = "Hello ";
        const str2 = "World  ";
        const expected_str1 = "Hello  ";
        const expected_str2 = "World  ";
        const [aligned_str1, aligned_str2] = alignLinesLeft(str1, str2);
        expect(aligned_str1).toBe(expected_str1);
        expect(aligned_str2).toBe(expected_str2);
    });
});
```

### Explanation:
1. **Test Suite Structure**:
   - The `describe` block groups all the tests under the `alignLinesLeft` function.
   - Each test case is defined using the `it` function, which describes the behavior being tested.

2. **Assertions**:
   - The `expect` function is used to make assertions.
   - `toBe` is used to check equality, similar to `assertEqual` in Python.

3. **Function Call**:
   - The `alignLinesLeft` function is called and its results are compared against expected values.

4. **Import Statement**:
   - The `alignLinesLeft` function is assumed to be imported from another file, which should be defined elsewhere in your project.

This conversion ensures that the functionality and logic of the tests are preserved in Jest, providing clear and structured test cases.