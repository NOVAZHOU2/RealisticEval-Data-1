Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
import { List } from "typescript";

/**
 * Convert an array of hole positions to the ring format (array of 1s and 0s).
 *
 * @param holes - An array of numbers representing the positions of the holes (0-indexed).
 * @returns An array of length 32, where positions with holes are 0 and others are 1.
 */
function convertToRingFormat(holes: number[]): number[] {
    // Initialize the ring with all positions set to 1
    const ring: number[] = new Array(32).fill(1);

    // Mark the positions of holes as 0
    for (const hole of holes) {
        if (0 <= hole && hole < 32) {  // Ensure hole positions are within valid range
            ring[hole] = 0;
        }
    }

    return ring;
}
```

### Explanation:
1. **JSDoc Comments**: The Python docstring has been converted to JSDoc-style comments, which are commonly used in TypeScript for documentation.
2. **Type Annotations**:
   - The parameter `holes` is annotated as `number[]` to indicate it is an array of numbers.
   - The return type is also annotated as `number[]` to indicate it returns an array of numbers.
3. **Function Implementation**: The logic remains the same, initializing an array of length 32 filled with `1`s and setting the positions specified by `holes` to `0`.

This TypeScript code preserves the original functionality and structure while adhering to TypeScript's static type system and documentation conventions.