Sure! Below is the equivalent TypeScript test case using Jest for the provided Python unittest test class:

```typescript
import { describe, it, expect } from '@jest/globals';

function convertToRingFormat(holes: number[]): number[] {
    const result = new Array(32).fill(1);
    holes.forEach(hole => {
        if (hole >= 0 && hole < 32) {
            result[hole] = 0;
        }
    });
    return result;
}

describe('convertToRingFormat', () => {
    it('should convert an empty array to an array of 32 ones', () => {
        expect(convertToRingFormat([])).toEqual(new Array(32).fill(1));
    });

    it('should convert an array with one hole at position 5 to an array with 0 at position 5 and 1s elsewhere', () => {
        expect(convertToRingFormat([5])).toEqual([
            1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1
        ]);
    });

    it('should convert an array with multiple holes at different positions to an array with 0s at those positions and 1s elsewhere', () => {
        expect(convertToRingFormat([0, 10, 20])).toEqual([
            0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1
        ]);
    });

    it('should handle holes outside the valid range by ignoring them', () => {
        expect(convertToRingFormat([-1, 32, 64])).toEqual(new Array(32).fill(1));
    });
});
```

This TypeScript code defines the `convertToRingFormat` function and includes a series of tests using Jest's `describe`, `it`, and `expect` functions to verify its correctness. The tests cover various scenarios, including an empty input array, arrays with single and multiple holes, and holes outside the valid range.