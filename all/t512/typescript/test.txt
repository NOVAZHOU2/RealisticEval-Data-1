Certainly! Here is the equivalent Jest test suite in TypeScript for the provided Python unittest class. The test cases will use Jest's assertion methods and include appropriate type annotations.

### TypeScript Code

First, ensure you have the necessary imports and setup for Jest in your TypeScript project:

```typescript
import { convertToRingFormat } from './path/to/convertToRingFormat'; // Import the function to test

describe('TestConvertToRingFormat', () => {
    it('test_no_holes', () => {
        // Test with no holes provided.
        const holes: number[] = [];
        const expected: number[] = [1].fill(1, 0, 32);  // All positions should be 1
        const result = convertToRingFormat(holes);
        expect(result).toEqual(expected);
    });

    it('test_single_hole', () => {
        // Test with a single hole position.
        const holes: number[] = [5];
        const expected: number[] = [1].fill(1, 0, 32);
        expected[5] = 0;  // Only position 5 should be 0
        const result = convertToRingFormat(holes);
        expect(result).toEqual(expected);
    });

    it('test_multiple_holes', () => {
        // Test with multiple hole positions.
        const holes: number[] = [0, 2, 4, 8, 16];
        const expected: number[] = [1].fill(1, 0, 32);
        holes.forEach(hole => {
            expected[hole] = 0;  // Set specified positions to 0
        });
        const result = convertToRingFormat(holes);
        expect(result).toEqual(expected);
    });

    it('test_hole_out_of_bounds', () => {
        // Test with some hole positions out of bounds.
        const holes: number[] = [-1, 32, 5, 10];  // -1 and 32 are out of bounds
        const expected: number[] = [1].fill(1, 0, 32);
        expected[5] = 0;  // Only position 5 and 10 should be 0
        expected[10] = 0;
        const result = convertToRingFormat(holes);
        expect(result).toEqual(expected);
    });

    it('test_all_holes', () => {
        // Test with all positions as holes.
        const holes: number[] = Array.from({ length: 32 }, (_, i) => i);  // All positions from 0 to 31
        const expected: number[] = [0].fill(0, 0, 32);  // All positions should be 0
        const result = convertToRingFormat(holes);
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Imports**: Import the `convertToRingFormat` function from the appropriate module.
2. **Jest Describe Block**: Use `describe` to group the test cases under a common description.
3. **Test Cases**: Each test case uses `it` to define a specific test scenario.
4. **Assertions**: Use `expect` with `toEqual` to compare the expected results with the actual results.
5. **Type Annotations**: Ensure that the arrays and variables are properly typed (`number[]`).

This TypeScript code preserves the original functionality and logic of the Python unittest class while adapting it to Jest's testing framework.