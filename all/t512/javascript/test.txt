To convert the given Python unittest test class to a JavaScript test case using Jest, you need to follow these steps:

1. Define the function `convert_to_ring_format` in JavaScript.
2. Write the corresponding Jest test cases for the function.

Here's how you can do it:

### Step 1: Define the Function

First, define the `convert_to_ring_format` function in JavaScript:

```javascript
function convertToRingFormat(holes) {
    const result = new Array(32).fill(1); // Initialize an array of length 32 with all elements set to 1
    holes.forEach(hole => {
        if (hole >= 0 && hole < 32) {
            result[hole] = 0; // Set the position of the hole to 0
        }
    });
    return result;
}
```

### Step 2: Write Jest Test Cases

Next, write the Jest test cases for the `convertToRingFormat` function:

```javascript
const { convertToRingFormat } = require('./path-to-your-function'); // Adjust the path accordingly

describe('convertToRingFormat', () => {
    test('should convert an empty array to [1, 1, ..., 1]', () => {
        expect(convertToRingFormat([])).toEqual(new Array(32).fill(1));
    });

    test('should convert [0] to [0, 1, ..., 1]', () => {
        expect(convertToRingFormat([0])).toEqual([0].concat(new Array(31).fill(1)));
    });

    test('should convert [31] to [1, ..., 1, 0]', () => {
        expect(convertToRingFormat([31])).toEqual(new Array(31).fill(1).concat([0]));
    });

    test('should convert [5, 10, 15] to [1, ..., 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]', () => {
        const expected = new Array(32).fill(1);
        expected[5] = 0;
        expected[10] = 0;
        expected[15] = 0;
        expect(convertToRingFormat([5, 10, 15])).toEqual(expected);
    });

    test('should handle out-of-bounds indices gracefully', () => {
        expect(convertToRingFormat([-1, 32])).toEqual(new Array(32).fill(1));
    });

    test('should handle duplicate indices correctly', () => {
        expect(convertToRingFormat([5, 5, 10])).toEqual([1, ..., 1, 0, 1, 0, 1, 0, 1]);
    });
});
```

### Explanation

- **Test Case 1**: Checks that converting an empty array results in an array filled with 1s.
- **Test Case 2**: Checks that converting `[0]` results in an array with a single 0 at index 0 and 1s elsewhere.
- **Test Case 3**: Checks that converting `[31]` results in an array with a single 0 at index 31 and 1s elsewhere.
- **Test Case 4**: Checks that converting `[5, 10, 15]` results in an array with 0s at indices 5, 10, and 15 and 1s elsewhere.
- **Test Case 5**: Checks that the function handles out-of-bounds indices gracefully (indices less than 0 or greater than or equal to 32).
- **Test Case 6**: Checks that the function handles duplicate indices correctly by ensuring only one 0 is placed at each unique index.

Make sure to adjust the path in `require('./path-to-your-function')` to the actual location of your JavaScript file containing the `convertToRingFormat` function.