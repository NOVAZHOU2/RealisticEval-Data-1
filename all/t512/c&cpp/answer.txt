Here is an equivalent C++ code for your Python function:

```c++
#include <vector>

std::vector<int> convertToRingFormat(const std::vector<int>& holes)
{
    std::vector<int> result(32, 1); // Initialize all elements to 1

    for(int hole : holes)
    {
        if(hole >= 0 && hole < 32) // Check if the hole position is within range
        {
            result[hole] = 0; // Set the corresponding element to 0
        }
    }

    return result;
}
```

And here is an equivalent C code:

```c
int* convertToRingFormat(int* holes, int holesSize)
{
    static int result[32];
    for(int i=0; i<32; i++)
    {
        result[i] = 1; // Initialize all elements to 1
    }

    for(int i=0; i<holesSize; i++)
    {
        if(holes[i] >= 0 && holes[i] < 32) // Check if the hole position is within range
        {
            result[holes[i]] = 0; // Set the corresponding element to 0
        }
    }

    return result;
}
```
Note that in C++, we need to declare the size of the array `result` at compile time because arrays in C++ have fixed sizes. In C, you can use dynamic memory allocation with functions like malloc or calloc. Also, unlike Python lists, arrays in C/C++ are zero-indexed, so there's no need to subtract one from the input values.