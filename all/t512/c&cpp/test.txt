Sure, here is how you can convert your Python unittest test class to a C++ test case using Catch2:

```cpp
#include <catch2/catch.hpp>
#include <vector>

std::vector<int> convertToRingFormat(const std::vector<int>& holes) {
    std::vector<int> result(32, 1);
    for(int hole : holes) {
        if(hole >= 0 && hole < 32) {
            result[hole] = 0;
        }
    }
    return result;
}

TEST_CASE("Convert to Ring Format", "[convertToRingFormat]") {
    SECTION("No Holes") {
        std::vector<int> input = {};
        std::vector<int> expected = {1, 1, 1, ..., 1}; // Fill in the rest of the vector with 1s
        REQUIRE(convertToRingFormat(input) == expected);
    }

    SECTION("One Hole at Position 0") {
        std::vector<int> input = {0};
        std::vector<int> expected = {0, 1, 1, ..., 1}; // Fill in the rest of the vector with 1s
        REQUIRE(convertToRingFormat(input) == expected);
    }

    SECTION("One Hole at Position 31") {
        std::vector<int> input = {31};
        std::vector<int> expected = {1, 1, 1, ..., 0}; // Fill in the rest of the vector with 1s
        REQUIRE(convertToRingFormat(input) == expected);
    }

    SECTION("Multiple Holes") {
        std::vector<int> input = {5, 10, 20};
        std::vector<int> expected = {1, 1, 1, ..., 0, 1, 0, 1, ..., 0, 1, 0, 1, ...}; // Fill in the rest of the vector with 1s except at positions 5, 10, and 20
        REQUIRE(convertToRingFormat(input) == expected);
    }
}
```

In this example, I've provided some basic sections to check different scenarios like no holes, one hole at position 0, one hole at position 31, and multiple holes. You'll need to fill in the rest of the `expected` vectors with the appropriate values.

Make sure to include the Catch2 library in your project and link it correctly when compiling your C++ code.