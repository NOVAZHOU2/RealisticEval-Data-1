Certainly! Here’s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest class will be converted to a Jest test suite in TypeScript.

### TypeScript Code

First, ensure you have the necessary dependencies installed:
```sh
npm install --save-dev jest ts-jest @types/jest
```

Add the necessary Jest configuration to your `tsconfig.json` or `jest.config.js`.

### Jest Test Class

Here’s the TypeScript code for the Jest test class:

```typescript
import * as fs from 'fs';
import * as path from 'path';
import * as csvParser from 'csv-parser';

/**
 * Converts the contents of a CSV file into an SQL insert statement with a table name with the suffix removed.
 * 
 * @param csvFilePath - The path to the CSV file.
 * @returns A string containing the SQL insert statements.
 */
function csvToSqlInsert(csvFilePath: string): string {
    // Extract the table name from the CSV file name, removing the suffix
    const tableName = path.basename(csvFilePath, path.extname(csvFilePath));

    // Initialize an array to store the SQL insert statements
    let insertStatements: string[] = [];

    // Read the CSV file
    fs.createReadStream(csvFilePath)
        .pipe(csvParser())
        .on('data', (row: any) => {
            // Skip the header row
            if (!insertStatements.length) {
                return;
            }

            // Prepare the values for the SQL insert statement
            const values = Object.values(row).map(value => {
                if (!isNaN(Number(value))) {
                    return value; // If value is a number, no quotes needed
                } else {
                    // Escape single quotes and wrap in double quotes
                    return `'${value.replace(/'/g, "''")}'`;
                }
            });

            // Form the SQL insert statement
            const headers = Object.keys(row);
            const insertStatement = `INSERT INTO ${tableName} (${headers.join(', ')}) VALUES (${values.join(', ')});`;
            insertStatements.push(insertStatement);
        })
        .on('end', () => {
            // Combine all insert statements into a single output
            return insertStatements.join('\n');
        });
}

describe('TestCsvToSqlInsert', () => {
    const testFiles = {
        'test1.csv': 'id,name,age\n1,Alice,30\n2,Bob,25',
        'test2.csv': 'product_id,product_name,price\n101,Widget,9.99\n102,Gadget,12.49',
        'test3.csv': 'user_id,email\n3,test@example.com\n4,user@domain.com',
        'test4.csv': 'order_id,order_date,total\n1001,2024-09-01,59.99',
        'test5.csv': 'quote_id,quote\n1,"It\'s a beautiful day."\n2,"She said, ""Hello!"""'
    };

    beforeAll(() => {
        // Create the sample CSV files for testing
        for (const [filename, content] of Object.entries(testFiles)) {
            fs.writeFileSync(filename, content);
        }
    });

    afterAll(() => {
        // Remove the test files after tests
        for (const filename of Object.keys(testFiles)) {
            fs.unlinkSync(filename);
        }
    });

    it('should handle simple CSV correctly', () => {
        const expectedSql = (
            "INSERT INTO test1 (id, name, age) VALUES ('1', 'Alice', '30');\n" +
            "INSERT INTO test1 (id, name, age) VALUES ('2', 'Bob', '25');"
        );
        const result = csvToSqlInsert('test1.csv');
        expect(result).toEqual(expectedSql);
    });

    it('should handle product CSV correctly', () => {
        const expectedSql = (
            "INSERT INTO test2 (product_id, product_name, price) VALUES ('101', 'Widget', '9.99');\n" +
            "INSERT INTO test2 (product_id, product_name, price) VALUES ('102', 'Gadget', '12.49');"
        );
        const result = csvToSqlInsert('test2.csv');
        expect(result).toEqual(expectedSql);
    });

    it('should handle email CSV correctly', () => {
        const expectedSql = (
            "INSERT INTO test3 (user_id, email) VALUES ('3', 'test@example.com');\n" +
            "INSERT INTO test3 (user_id, email) VALUES ('4', 'user@domain.com');"
        );
        const result = csvToSqlInsert('test3.csv');
        expect(result).toEqual(expectedSql);
    });

    it('should handle date and decimal CSV correctly', () => {
        const expectedSql = (
            "INSERT INTO test4 (order_id, order_date, total) VALUES ('1001', '2024-09-01', '59.99');"
        );
        const result = csvToSqlInsert('test4.csv');
        expect(result).toEqual(expectedSql);
    });
});
```

### Explanation:
1. **Imports**:
   - `fs` for file system operations.
   - `path` for path manipulation.
   - `csv-parser` for parsing CSV files.

2. **Function Definition**:
   - `csvToSqlInsert` takes a `csvFilePath` as input and returns a string containing the SQL insert statements.

3. **Jest Test Suite**:
   - `describe` block defines the test suite.
   - `beforeAll` hook creates the sample CSV files for testing.
   - `afterAll` hook removes the test files after tests.

4. **Test Cases**:
   - Each `it` block represents a test case.
   - `expect` is used to assert the expected results.

5. **File Operations**:
   - `fs.writeFileSync` is used to write the sample CSV files.
   - `fs.unlinkSync` is used to remove the test files after tests.

This TypeScript code preserves the original functionality and structure of the Python unittest class, with appropriate Jest assertions and setup/teardown hooks.