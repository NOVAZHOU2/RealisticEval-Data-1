Hereâ€™s the equivalent Jest test class in TypeScript, converted from the provided Python `unittest` test class. The functionality and logic of the tests are preserved, and appropriate type annotations are included:

```typescript
import { findPrimes } from './path/to/your/module'; // Adjust the import path as necessary

describe('findPrimes', () => {
    test('should find primes in range 1 to 12', () => {
        const expected = [2, 3, 5, 7, 11];
        expect(findPrimes(1, 12)).toEqual(expected);
    });

    test('should find a single prime number', () => {
        const expected = [29];
        expect(findPrimes(29, 29)).toEqual(expected);
    });

    test('should find primes in a big range 1 to 100', () => {
        const expected = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];
        expect(findPrimes(1, 100)).toEqual(expected);
    });

    test('should return an empty array for range with no primes', () => {
        const expected: number[] = [];
        expect(findPrimes(0, 1)).toEqual(expected);
    });
});
```

### Key Adjustments:
1. **Test Framework**: Used `describe` and `test` from Jest to structure the tests.
2. **Assertions**: Replaced `self.assertEqual` with `expect(...).toEqual(...)` for assertions.
3. **Type Annotations**: Added type annotations where necessary, such as specifying `expected` as `number[]` for clarity.
4. **Import Statement**: Included an import statement to bring in the `findPrimes` function, which you'll need to adjust based on your file structure.

This TypeScript code should function similarly to the original Python unit tests.