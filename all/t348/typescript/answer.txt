Hereâ€™s the equivalent TypeScript code for the provided Python functions. The structure and logic are preserved, while TypeScript's static typing is utilized:

```typescript
function findPrimes(lowerBound: number, upperBound: number): number[] {
    const primeNumbers: number[] = [];
    for (let number = lowerBound; number <= upperBound; number++) {
        if (isPrime(number)) {
            primeNumbers.push(number);
        }
    }
    return primeNumbers;
}

function computeSumOfPrimes(primes: number[]): number {
    const total: number = primes.reduce((acc, curr) => acc + curr, 0);
    return total;
}

function isPrime(num: number): boolean {
    if (num <= 1) {
        return false;
    }
    if (num === 2 || num === 3) {
        return true;
    }
    if (num % 2 === 0 || num % 3 === 0) {
        return false;
    }
    let i = 5;
    while (i * i <= num) {
        if (num % i === 0 || num % (i + 2) === 0) {
            return false;
        }
        i += 6;
    }
    return true;
}
```

### Key Differences:
1. **Type Annotations**: Added type annotations for function parameters and return types.
2. **Array Method**: Used `reduce` to sum the elements of the array in `computeSumOfPrimes`.
3. **Variable Declaration**: Used `let` and `const` for variable declarations to adhere to TypeScript's scoping rules. 

This TypeScript code should function equivalently to the original Python code.