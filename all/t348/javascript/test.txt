Hereâ€™s the equivalent Jest test class converted from the provided Python unittest code, ensuring the functionality and logic of the tests are preserved:

```javascript
const { findPrimes } = require('./path/to/your/module'); // Adjust the path as necessary

describe('findPrimes', () => {
    test('find primes in range', () => {
        const expected = [2, 3, 5, 7, 11];
        expect(findPrimes(1, 12)).toEqual(expected);
    });

    test('find single prime', () => {
        const expected = [29];
        expect(findPrimes(29, 29)).toEqual(expected);
    });

    test('find primes in big range', () => {
        const expected = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];
        expect(findPrimes(1, 100)).toEqual(expected);
    });

    test('find no primes', () => {
        const expected = [];
        expect(findPrimes(0, 1)).toEqual(expected);
    });
});
```

### Documentation of Changes:
1. **Test Structure**: Used `describe` and `test` from Jest to organize tests, replacing Python's class-based structure.
2. **Assertions**: Replaced `self.assertEqual` with Jest's `expect(...).toEqual(...)` for assertions.
3. **Imports**: The `findPrimes` function is imported using CommonJS syntax, which is standard in Node.js environments. Adjust the import path as needed.
4. **Test Messages**: Removed the third argument in the assertions since Jest does not use custom messages in the same way as unittest; it provides output for failed tests automatically.

This structure maintains clarity and function, ensuring that the tests can be run effectively in a JavaScript environment.