Sure! Hereâ€™s the equivalent C++ code for the provided Python functions:

```cpp
#include <iostream>
#include <vector>

bool is_prime(int num) {
    if (num <= 1) return false;
    if (num == 2 || num == 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

std::vector<int> find_primes(int lower_bound, int upper_bound) {
    std::vector<int> prime_numbers;
    for (int number = lower_bound; number <= upper_bound; ++number) {
        if (is_prime(number)) {
            prime_numbers.push_back(number);
        }
    }
    return prime_numbers;
}

int compute_sum_of_primes(const std::vector<int>& primes) {
    int total = 0;
    for (int prime : primes) {
        total += prime;
    }
    return total;
}

int main() {
    int lower_bound = 10;  // Example value
    int upper_bound = 50;  // Example value
    std::vector<int> primes = find_primes(lower_bound, upper_bound);
    int sum = compute_sum_of_primes(primes);
    
    std::cout << "Sum of primes: " << sum << std::endl;
    return 0;
}
```

This code maintains the same functionality and logic as the original Python version while adapting it to C++ syntax.