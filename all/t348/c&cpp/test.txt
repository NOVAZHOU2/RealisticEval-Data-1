Hereâ€™s the equivalent test class using Catch2 in C++:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>

// Assume the find_primes function is declared elsewhere
std::vector<int> find_primes(int lower_bound, int upper_bound);

TEST_CASE("TestFindPrimesInRange") {
    SECTION("Find primes in range") {
        std::vector<int> expected = {2, 3, 5, 7, 11};
        REQUIRE(find_primes(1, 12) == expected);
    }

    SECTION("Find primes for a single prime") {
        std::vector<int> expected = {29};
        REQUIRE(find_primes(29, 29) == expected);
    }

    SECTION("Find primes in a large range") {
        std::vector<int> expected = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};
        REQUIRE(find_primes(1, 100) == expected);
    }

    SECTION("Find primes in a range with no primes") {
        std::vector<int> expected = {};
        REQUIRE(find_primes(0, 1) == expected);
    }
}
```

### Changes Made:
1. **Catch2 Setup**: Included the necessary Catch2 header and defined `CATCH_CONFIG_MAIN` for the main entry point.
2. **Test Structure**: Used `TEST_CASE` and `SECTION` to organize tests, replacing Python's `unittest.TestCase`.
3. **Assertions**: Used `REQUIRE` instead of `assertEqual` for checking equality.
4. **Comments**: Removed, as Catch2 typically doesn't include extensive comments for tests. 

This preserves the logic and functionality of the original Python tests while adapting to C++ conventions and the Catch2 framework.