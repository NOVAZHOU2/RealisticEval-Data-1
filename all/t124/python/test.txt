To convert the provided JavaScript Jest test cases into Python test cases using the unittest framework, we'll follow these steps:
Define a test class that inherits from unittest.TestCase.
Write individual test methods for each test case.
Use assertions from the unittest module to verify the expected behavior.
Hereâ€™s how the JavaScript Jest test cases translate to Python using unittest:
JavaScript Jest Test Cases
javascript
describe('shuffle function tests', () => {
    test('shuffles an array of numbers', () => {
        const array = [1, 2, 3, 4, 5];
        const shuffledArray = shuffle([...array]);
        expect(shuffledArray.length).toEqual(array.length);
        expect(shuffledArray.every(item => array.includes(item))).toBeTruthy();
        expect(new Set(shuffledArray).size).toEqual(new Set(array).size); // Ensure no duplicates
    });

    test('shuffles an array of strings', () => {
        const array = ["apple", "banana", "cherry", "date", "elderberry"];
        const shuffledArray = shuffle([...array]);
        expect(shuffledArray.length).toEqual(array.length);
        expect(shuffledArray.every(item => array.includes(item))).toBeTruthy();
    });

    test('shuffles an array with duplicate elements', () => {
        const array = [1, 1, 2, 2, 3, 3];
        const shuffledArray = shuffle([...array]);
        expect(shuffledArray.length).toEqual(array.length);
        expect(shuffledArray.every(item => array.includes(item))).toBeTruthy();
    });

    test('shuffles an array with a single element', () => {
        const array = [42];
        const shuffledArray = shuffle([...array]);
        expect(shuffledArray).toEqual(array);
    });

    test('shuffles an empty array', () => {
        const array = [];
        const shuffledArray = shuffle([...array]);
        expect(shuffledArray.length).toEqual(0);
    });
});
Python unittest Test Cases
python
import unittest
import random

def shuffle(array):
    """Randomly shuffles the elements of the input list in place."""
    current_index = len(array)
    while current_index > 0:
        random_index = random.randint(0, current_index - 1)
        current_index -= 1
        array[current_index], array[random_index] = array[random_index], array[current_index]
    return array

class TestShuffleFunction(unittest.TestCase):

    def test_shuffles_array_of_numbers(self):
        array = [1, 2, 3, 4, 5]
        shuffled_array = shuffle(array.copy())
        self.assertEqual(len(shuffled_array), len(array))
        self.assertTrue(all(item in array for item in shuffled_array))
        self.assertEqual(len(set(shuffled_array)), len(set(array)))  # Ensure no duplicates

    def test_shuffles_array_of_strings(self):
        array = ["apple", "banana", "cherry", "date", "elderberry"]
        shuffled_array = shuffle(array.copy())
        self.assertEqual(len(shuffled_array), len(array))
        self.assertTrue(all(item in array for item in shuffled_array))

    def test_shuffles_array_with_duplicate_elements(self):
        array = [1, 1, 2, 2, 3, 3]
        shuffled_array = shuffle(array.copy())
        self.assertEqual(len(shuffled_array), len(array))
        self.assertTrue(all(item in array for item in shuffled_array))

    def test_shuffles_array_with_single_element(self):
        array = [42]
        shuffled_array = shuffle(array.copy())
        self.assertEqual(shuffled_array, array)

    def test_shuffles_empty_array(self):
        array = []
        shuffled_array = shuffle(array.copy())
        self.assertEqual(len(shuffled_array), 0)

if __name__ == '__main__':
    unittest.main()
Explanation of the Python Code:
Importing Required Modules: We import unittest for the testing framework and random for the shuffle function.
Shuffle Function: The shuffle function is defined as it was before, which randomly shuffles the input list in place.
Test Class: TestShuffleFunction inherits from unittest.TestCase, which is the base class for all test cases.
Test Methods:
Each test case from the JavaScript code is translated into a method in the test class.
self.assertEqual() is used to compare values, similar to expect(...).toEqual(...) in Jest.
self.assertTrue() checks if a condition is true, analogous to toBeTruthy().
The length of sets is checked to ensure there are no duplicates in the shuffled array.
Running Tests: unittest.main() is called to run the tests when the script is executed directly.
This structure maintains the logical flow of the original JavaScript tests while adhering to Python's syntax and unittest conventions.