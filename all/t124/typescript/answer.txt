Here's your JavaScript `shuffle` function converted to TypeScript:

```typescript
function shuffle<T>(array: T[]): T[] {
    let currentIndex = array.length;

    while (currentIndex > 0) {
        const randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;

        // Swap the elements at currentIndex and randomIndex
        const temp = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temp;
    }

    return array;
}
```

### Changes Made:
1. **Generic Type**: Added a generic type `<T>` to allow the function to accept an array of any type.
2. **Type Annotations**: Specified the type of the `array` parameter as `T[]` and the return type as `T[]`. 

You can now use this function with arrays of different types while maintaining type safety!