Sure! Here is your JavaScript function converted to TypeScript:

```typescript
/**
 * Reorders image question based on scores in ascending order.
 *
 * @param {number[]} imageScores - An array of numerical scores for the images.
 * @param {string[]} imageNames - An array of image names corresponding to the scores.
 * @param {string[] | number[]} imageIDs - An array of image IDs corresponding to the scores.
 * @returns {{resultScores: number[], resultNames: string[], resultIDs: (string[] | number[])}} - An object containing the sorted scores, names, and IDs.
 */
function reorderData(
  imageScores: number[],
  imageNames: string[],
  imageIDs: string[] | number[]
): { resultScores: number[], resultNames: string[], resultIDs: string[] | number[] } {
  // Your implementation here...
  const combinedArray = imageScores.map((score, index) => ({ score, name: imageNames[index], id: imageIDs[index] }));
  
  combinedArray.sort((a, b) => a.score - b.score);
  
  return {
    resultScores: combinedArray.map(item => item.score),
    resultNames: combinedArray.map(item => item.name),
    resultIDs: combinedArray.map(item => item.id)
  };
}
```

### Explanation:
1. **Type Annotations**: I added type annotations for each parameter and the return value.
2. **Mapped Array**: Created an array of objects where each object contains `score`, `name`, and `id`.
3. **Sorting**: Used the `sort` method to sort the array based on the `score`.
4. **Return Values**: Extracted the sorted `scores`, `names`, and `ids` from the sorted array.

Make sure you have the necessary imports or definitions for any additional types used in your actual implementation.