Sure! Below is the TypeScript version of your Jest test case using `describe`:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Reorders image question based on scores in ascending order.
 *
 * @param {number[]} imageScores - An array of numerical scores for the images.
 * @param {string[]} imageNames - An array of image names corresponding to the scores.
 * @param {string[]|number[]} imageIDs - An array of image IDs corresponding to the scores.
 * @returns {{resultScores: number[], resultNames: string[], resultIDs: (string[]|number[])}} - An object containing the sorted scores, names, and IDs.
 */
function reorderData(imageScores: number[], imageNames: string[], imageIDs: string[] | number[]): { resultScores: number[], resultNames: string[], resultIDs: string[] | number[] } {
    const combined = imageScores.map((score, index) => ({ score, name: imageNames[index], id: imageIDs[index] }));
    combined.sort((a, b) => a.score - b.score);
    return {
        resultScores: combined.map(item => item.score),
        resultNames: combined.map(item => item.name),
        resultIDs: combined.map(item => item.id)
    };
}

describe('reorderData', () => {
    it('should sort the data in ascending order based on scores', () => {
        const imageScores = [50, 30, 90, 70];
        const imageNames = ['Image1', 'Image2', 'Image3', 'Image4'];
        const imageIDs = ['id1', 'id2', 'id3', 'id4'];

        const expected = {
            resultScores: [30, 50, 70, 90],
            resultNames: ['Image2', 'Image1', 'Image4', 'Image3'],
            resultIDs: ['id2', 'id1', 'id4', 'id3']
        };

        const result = reorderData(imageScores, imageNames, imageIDs);

        expect(result).toEqual(expected);
    });

    it('should handle empty arrays', () => {
        const imageScores: number[] = [];
        const imageNames: string[] = [];
        const imageIDs: string[] | number[] = [];

        const expected = {
            resultScores: [],
            resultNames: [],
            resultIDs: []
        };

        const result = reorderData(imageScores, imageNames, imageIDs);

        expect(result).toEqual(expected);
    });
});
```

In this TypeScript version, I've added type annotations to the function parameters and return value. The `describe` block groups related tests together, and each `it` block contains an individual test case. The `expect` function is used to assert that the output of the `reorderData` function matches the expected result.