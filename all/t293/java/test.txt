Here's how you can convert your JavaScript Jest test cases into JUnit 4 test cases in Java. This will be structured under the `org.real.temp` package and will include assertions for expected outcomes.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

public class Tester {

    @Test
    public void testSortsQuestionCorrectlyForBasicInputs() {
        double[] scores = {3, 1, 2};
        String[] names = {"Image3", "Image1", "Image2"};
        String[] ids = {"103", "101", "102"};

        ImageReorder.Result expected = new ImageReorder.Result(
            new double[]{1, 2, 3},
            new String[]{"Image1", "Image2", "Image3"},
            new String[]{"101", "102", "103"}
        );

        assertArrayEquals(expected.resultScores, ImageReorder.reorderData(scores, names, ids).resultScores, 0.001);
        assertArrayEquals(expected.resultNames, ImageReorder.reorderData(scores, names, ids).resultNames);
        assertArrayEquals(expected.resultIDs, ImageReorder.reorderData(scores, names, ids).resultIDs);
    }

    @Test
    public void testSortsQuestionCorrectlyWithMixedScores() {
        double[] scores = {5, 1, 3, 5, 2};
        String[] names = {"Image5", "Image1", "Image3", "Image6", "Image2"};
        String[] ids = {"105", "101", "103", "106", "102"};

        ImageReorder.Result expected = new ImageReorder.Result(
            new double[]{1, 2, 3, 5, 5},
            new String[]{"Image1", "Image2", "Image3", "Image5", "Image6"},
            new String[]{"101", "102", "103", "105", "106"}
        );

        assertArrayEquals(expected.resultScores, ImageReorder.reorderData(scores, names, ids).resultScores, 0.001);
        assertArrayEquals(expected.resultNames, ImageReorder.reorderData(scores, names, ids).resultNames);
        assertArrayEquals(expected.resultIDs, ImageReorder.reorderData(scores, names, ids).resultIDs);
    }

    @Test
    public void testHandlesDuplicateScores() {
        double[] scores = {2, 2, 1};
        String[] names = {"Image2", "Image3", "Image1"};
        String[] ids = {"102", "103", "101"};

        ImageReorder.Result expected = new ImageReorder.Result(
            new double[]{1, 2, 2},
            new String[]{"Image1", "Image2", "Image3"},
            new String[]{"101", "102", "103"}
        );

        assertArrayEquals(expected.resultScores, ImageReorder.reorderData(scores, names, ids).resultScores, 0.001);
        assertArrayEquals(expected.resultNames, ImageReorder.reorderData(scores, names, ids).resultNames);
        assertArrayEquals(expected.resultIDs, ImageReorder.reorderData(scores, names, ids).resultIDs);
    }

    @Test
    public void testHandlesEmptyArrays() {
        double[] scores = {};
        String[] names = {};
        String[] ids = {};

        ImageReorder.Result expected = new ImageReorder.Result(
            new double[]{},
            new String[]{},
            new String[]{}
        );

        assertArrayEquals(expected.resultScores, ImageReorder.reorderData(scores, names, ids).resultScores, 0.001);
        assertArrayEquals(expected.resultNames, ImageReorder.reorderData(scores, names, ids).resultNames);
        assertArrayEquals(expected.resultIDs, ImageReorder.reorderData(scores, names, ids).resultIDs);
    }
}
```

### Explanation:
1. **Imports**: The necessary JUnit classes are imported.
2. **Test Methods**: Each JavaScript test case is translated into a JUnit test method using the `@Test` annotation.
3. **Assertions**: The expected results are compared with the actual results using `assertArrayEquals`, which checks if the arrays are equal. For the scores, a delta of `0.001` is provided for floating-point comparisons.
4. **Result Initialization**: The `ImageReorder.Result` class is used to create expected results, similar to how you structured them in the JavaScript tests.

Make sure to replace `ImageReorder` with the actual class name where the `reorderData` method is implemented if it differs.