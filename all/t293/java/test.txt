To convert the given JavaScript Jest test case into a Java JUnit test case, we need to follow these steps:

1. Define the Java class `Tester` in the package `org.real.temp`.
2. Create a method `reorderData` that matches the signature of the JavaScript function.
3. Write a JUnit test case to verify the functionality of `reorderData`.

Here's how you can do it:

### Step 1: Define the Java Class

```java
package org.real.temp;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Tester {
    public static Result reorderData(List<Integer> imageScores, List<String> imageNames, List<Object> imageIDs) {
        int n = imageScores.size();
        
        // Combine scores, names, and IDs into a list of tuples
        List<Tuple> combined = IntStream.range(0, n)
                .mapToObj(i -> new Tuple(imageScores.get(i), imageNames.get(i), imageIDs.get(i)))
                .collect(Collectors.toList());
        
        // Sort the combined list based on scores
        combined.sort((a, b) -> a.score.compareTo(b.score));
        
        // Extract sorted scores, names, and IDs
        List<Integer> resultScores = combined.stream().map(Tuple::getScore).collect(Collectors.toList());
        List<String> resultNames = combined.stream().map(Tuple::getName).collect(Collectors.toList());
        List<Object> resultIDs = combined.stream().map(Tuple::getID).collect(Collectors.toList());
        
        return new Result(resultScores, resultNames, resultIDs);
    }
    
    private static class Tuple {
        Integer score;
        String name;
        Object id;
        
        public Tuple(Integer score, String name, Object id) {
            this.score = score;
            this.name = name;
            this.id = id;
        }
        
        public Integer getScore() {
            return score;
        }
        
        public String getName() {
            return name;
        }
        
        public Object getID() {
            return id;
        }
    }
    
    public static class Result {
        List<Integer> resultScores;
        List<String> resultNames;
        List<Object> resultIDs;
        
        public Result(List<Integer> resultScores, List<String> resultNames, List<Object> resultIDs) {
            this.resultScores = resultScores;
            this.resultNames = resultNames;
            this.resultIDs = resultIDs;
        }
        
        public List<Integer> getResultScores() {
            return resultScores;
        }
        
        public List<String> getResultNames() {
            return resultNames;
        }
        
        public List<Object> getResultIDs() {
            return resultIDs;
        }
    }
}
```

### Step 2: Write the JUnit Test Case

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.List;

public class TesterTest {

    @Test
    public void testReorderData() {
        List<Integer> imageScores = Arrays.asList(50, 80, 60, 90, 70);
        List<String> imageNames = Arrays.asList("ImageA", "ImageB", "ImageC", "ImageD", "ImageE");
        List<Object> imageIDs = Arrays.asList(1, 2, 3, 4, 5);

        Result result = Tester.reorderData(imageScores, imageNames, imageIDs);

        assertEquals(Arrays.asList(50, 60, 70, 80, 90), result.getResultScores());
        assertEquals(Arrays.asList("ImageA", "ImageC", "ImageE", "ImageB", "ImageD"), result.getResultNames());
        assertEquals(Arrays.asList(1, 3, 5, 2, 4), result.getResultIDs());
    }
}
```

### Explanation

- **Java Class (`Tester.java`)**:
  - The `reorderData` method takes three lists: `imageScores`, `imageNames`, and `imageIDs`.
  - It combines these lists into a list of `Tuple` objects.
  - It sorts the combined list based on the scores.
  - It extracts the sorted scores, names, and IDs into separate lists.
  - It returns a `Result` object containing the sorted lists.

- **JUnit Test Case (`TesterTest.java`)**:
  - The `testReorderData` method tests the `reorderData` method with sample data.
  - It asserts that the returned `Result` object contains the correct sorted values.

This setup ensures that the Java code behaves similarly to the original JavaScript code and is verified using JUnit.