Certainly! Below is the equivalent Java code for the JavaScript function you provided:

```java
import java.util.Arrays;
import java.util.Comparator;

/**
 * Reorders image question based on scores in ascending order.
 *
 * @param imageScores An array of numerical scores for the images.
 * @param imageNames An array of image names corresponding to the scores.
 * @param imageIDs An array of image IDs corresponding to the scores.
 * @return A Result object containing the sorted scores, names, and IDs.
 */
public class ImageReorder {
    public static Result reorderData(int[] imageScores, String[] imageNames, Object[] imageIDs) {
        int n = imageScores.length;
        
        // Create an array of indices
        Integer[] indices = new Integer[n];
        for (int i = 0; i < n; i++) {
            indices[i] = i;
        }
        
        // Sort the indices based on the corresponding scores
        Arrays.sort(indices, Comparator.comparingInt(i -> imageScores[i]));
        
        // Create arrays to store the sorted results
        int[] resultScores = new int[n];
        String[] resultNames = new String[n];
        Object[] resultIDs = new Object[n];
        
        // Populate the sorted arrays
        for (int i = 0; i < n; i++) {
            int index = indices[i];
            resultScores[i] = imageScores[index];
            resultNames[i] = imageNames[index];
            resultIDs[i] = imageIDs[index];
        }
        
        return new Result(resultScores, resultNames, resultIDs);
    }

    public static void main(String[] args) {
        int[] scores = {3, 1, 2};
        String[] names = {"ImageA", "ImageB", "ImageC"};
        Object[] ids = {101, 102, 103};

        Result result = reorderData(scores, names, ids);

        System.out.println("Sorted Scores: " + Arrays.toString(result.getResultScores()));
        System.out.println("Sorted Names: " + Arrays.toString(result.getResultNames()));
        System.out.println("Sorted IDs: " + Arrays.toString(result.getResultIDs()));
    }
}

class Result {
    private int[] resultScores;
    private String[] resultNames;
    private Object[] resultIDs;

    public Result(int[] resultScores, String[] resultNames, Object[] resultIDs) {
        this.resultScores = resultScores;
        this.resultNames = resultNames;
        this.resultIDs = resultIDs;
    }

    public int[] getResultScores() {
        return resultScores;
    }

    public String[] getResultNames() {
        return resultNames;
    }

    public Object[] getResultIDs() {
        return resultIDs;
    }
}
```

### Explanation:
1. **Class Definition**: The `ImageReorder` class contains the `reorderData` method.
2. **Indices Array**: We create an array of indices to keep track of the original positions of the elements.
3. **Sorting Indices**: We sort the indices based on the corresponding scores using `Arrays.sort` with a custom comparator.
4. **Result Arrays**: We populate the sorted arrays using the sorted indices.
5. **Return Type**: The `reorderData` method returns a `Result` object containing the sorted scores, names, and IDs.

This Java code should provide similar functionality to your JavaScript function.