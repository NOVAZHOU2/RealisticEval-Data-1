Sure, here is how you can convert the JavaScript Jest test case into a C++ Catch2 test case:

```cpp
#include <catch2/catch.hpp>
#include <vector>
#include <string>

/**
 * Reorders image question based on scores in ascending order.
 *
 * @param {std::vector<int>} imageScores - A vector of numerical scores for the images.
 * @param {std::vector<std::string>} imageNames - A vector of image names corresponding to the scores.
 * @param {std::vector<std::string>|std::vector<int>} imageIDs - A vector of image IDs corresponding to the scores.
 * @returns {std::tuple<std::vector<int>, std::vector<std::string>, std::vector<std::string>|std::vector<int>>} - A tuple containing the sorted scores, names, and IDs.
 */
std::tuple<std::vector<int>, std::vector<std::string>, std::vector<std::string> /* or std::vector<int> */ > reorderData(const std::vector<int>& imageScores, const std::vector<std::string>& imageNames, const std::variant<std::vector<std::string>, std::vector<int>>& imageIDs);

TEST_CASE("reorderData", "[reorderData]") {
    SECTION("should return correct order when input is empty") {
        auto [resultScores, resultNames, resultIDs] = reorderData({}, {}, {});
        REQUIRE(resultScores.empty());
        REQUIRE(resultNames.empty());
        REQUIRE(std::holds_alternative<std::vector<std::string>>(resultIDs));
        REQUIRE(std::get<std::vector<std::string>>(resultIDs).empty());
    }

    SECTION("should return correct order when input is not empty") {
        std::vector<int> imageScores = {3, 1, 4};
        std::vector<std::string> imageNames = {"image3", "image1", "image4"};
        std::vector<std::string> imageIDs = {"id3", "id1", "id4"};

        auto [resultScores, resultNames, resultIDs] = reorderData(imageScores, imageNames, imageIDs);
        
        // Assuming the function should sort the scores in ascending order
        REQUIRE(resultScores == std::vector<int>({1, 3, 4}));
        REQUIRE(resultNames == std::vector<std::string>({"image1", "image3", "image4"}));
        REQUIRE(std::holds_alternative<std::vector<std::string>>(resultIDs));
        REQUIRE(std::get<std::vector<std::string>>(resultIDs) == std::vector<std::string>({"id1", "id3", "id4"}));
    }
}
```

In this example, we have used `Catch2` library for writing tests. The `reorderData` function is assumed to take three parameters: `imageScores`, `imageNames`, and `imageIDs`. The function returns a tuple containing the sorted scores, names, and IDs.

Please note that the implementation of `reorderData` function is not provided here. You need to provide your own implementation of this function to make these tests pass.