Hereâ€™s a C++ Catch2 test case equivalent to your JavaScript Jest test case:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>
#include <string>
#include <tuple>

// Assume reorderData function is declared here

TEST_CASE("reorderData") {
    SECTION("sorts question correctly for basic inputs") {
        std::vector<int> scores = {3, 1, 2};
        std::vector<std::string> names = {"Image3", "Image1", "Image2"};
        std::vector<std::string> ids = {"103", "101", "102"};
        auto [resultScores, resultNames, resultIDs] = reorderData(scores, names, ids);

        REQUIRE(resultScores == std::vector<int>{1, 2, 3});
        REQUIRE(resultNames == std::vector<std::string>{"Image1", "Image2", "Image3"});
        REQUIRE(resultIDs == std::vector<std::string>{"101", "102", "103"});
    }

    SECTION("sorts question correctly with mixed scores") {
        std::vector<int> scores = {5, 1, 3, 5, 2};
        std::vector<std::string> names = {"Image5", "Image1", "Image3", "Image6", "Image2"};
        std::vector<std::string> ids = {"105", "101", "103", "106", "102"};
        auto [resultScores, resultNames, resultIDs] = reorderData(scores, names, ids);

        REQUIRE(resultScores == std::vector<int>{1, 2, 3, 5, 5});
        REQUIRE(resultNames == std::vector<std::string>{"Image1", "Image2", "Image3", "Image5", "Image6"});
        REQUIRE(resultIDs == std::vector<std::string>{"101", "102", "103", "105", "106"});
    }

    SECTION("handles duplicate scores") {
        std::vector<int> scores = {2, 2, 1};
        std::vector<std::string> names = {"Image2", "Image3", "Image1"};
        std::vector<std::string> ids = {"102", "103", "101"};
        auto [resultScores, resultNames, resultIDs] = reorderData(scores, names, ids);

        REQUIRE(resultScores == std::vector<int>{1, 2, 2});
        REQUIRE(resultNames == std::vector<std::string>{"Image1", "Image2", "Image3"});
        REQUIRE(resultIDs == std::vector<std::string>{"101", "102", "103"});
    }

    SECTION("handles empty arrays") {
        std::vector<int> scores = {};
        std::vector<std::string> names = {};
        std::vector<std::string> ids = {};
        auto [resultScores, resultNames, resultIDs] = reorderData(scores, names, ids);

        REQUIRE(resultScores == std::vector<int>{});
        REQUIRE(resultNames == std::vector<std::string>{});
        REQUIRE(resultIDs == std::vector<std::string>{});
    }
}
```

This C++ code uses Catch2 to structure the test cases similarly to your Jest tests. Each section tests different scenarios for the `reorderData` function.