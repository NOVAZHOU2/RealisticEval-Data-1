Certainly! Below is the equivalent C++ code for the provided JavaScript function `reorderData`. This function will sort the arrays of scores, names, and IDs based on the scores in ascending order.

```cpp
#include <vector>
#include <algorithm>
#include <iostream>

struct ImageData {
    int score;
    std::string name;
    std::string id;
};

std::vector<ImageData> reorderData(const std::vector<int>& imageScores, const std::vector<std::string>& imageNames, const std::vector<std::string>& imageIDs) {
    if (imageScores.size() != imageNames.size() || imageScores.size() != imageIDs.size()) {
        throw std::invalid_argument("All input vectors must have the same size.");
    }

    std::vector<ImageData> imageData;

    // Populate the vector with ImageData structs
    for (size_t i = 0; i < imageScores.size(); ++i) {
        imageData.push_back({imageScores[i], imageNames[i], imageIDs[i]});
    }

    // Sort the vector based on the score
    std::sort(imageData.begin(), imageData.end(), [](const ImageData& a, const ImageData& b) {
        return a.score < b.score;
    });

    // Extract the sorted results into separate vectors
    std::vector<int> resultScores;
    std::vector<std::string> resultNames;
    std::vector<std::string> resultIDs;

    for (const auto& data : imageData) {
        resultScores.push_back(data.score);
        resultNames.push_back(data.name);
        resultIDs.push_back(data.id);
    }

    return {resultScores, resultNames, resultIDs};
}

int main() {
    std::vector<int> imageScores = {3, 1, 2};
    std::vector<std::string> imageNames = {"Image1", "Image2", "Image3"};
    std::vector<std::string> imageIDs = {"ID1", "ID2", "ID3"};

    try {
        auto [sortedScores, sortedNames, sortedIDs] = reorderData(imageScores, imageNames, imageIDs);

        std::cout << "Sorted Scores: ";
        for (int score : sortedScores) {
            std::cout << score << " ";
        }
        std::cout << "\n";

        std::cout << "Sorted Names: ";
        for (const std::string& name : sortedNames) {
            std::cout << name << " ";
        }
        std::cout << "\n";

        std::cout << "Sorted IDs: ";
        for (const std::string& id : sortedIDs) {
            std::cout << id << " ";
        }
        std::cout << "\n";
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << '\n';
    }

    return 0;
}
```

### Explanation:
1. **Struct Definition**: We define a struct `ImageData` to hold the score, name, and ID of an image.
2. **Function Implementation**:
   - The function `reorderData` takes three vectors (`imageScores`, `imageNames`, and `imageIDs`) as input.
   - It checks if all vectors have the same size.
   - It populates a vector of `ImageData` structs.
   - It sorts the vector based on the score using `std::sort`.
   - It extracts the sorted scores, names, and IDs into separate vectors.
3. **Main Function**:
   - Demonstrates how to use the `reorderData` function.
   - Prints the sorted scores, names, and IDs.

This C++ code should provide the same functionality as the original JavaScript function.