Sure! Below is the equivalent Python unit test case using the `unittest` framework:

```python
import unittest

def reorder_data(image_scores, image_names, image_ids):
    # Implement your function logic here
    return {
        'resultScores': sorted(image_scores),
        'resultNames': [image_names[i] for i in sorted(range(len(image_scores)), key=image_scores.__getitem__)],
        'resultIDs': [image_ids[i] for i in sorted(range(len(image_scores)), key=image_scores.__getitem__)]
    }

class TestReorderData(unittest.TestCase):

    def test_reorder_data(self):
        image_scores = [3, 1, 2]
        image_names = ['image1', 'image2', 'image3']
        image_ids = [100, 200, 300]

        expected_result = {
            'resultScores': [1, 2, 3],
            'resultNames': ['image2', 'image3', 'image1'],
            'resultIDs': [200, 300, 100]
        }

        result = reorder_data(image_scores, image_names, image_ids)
        self.assertEqual(result, expected_result)

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
- **Function Definition**: The `reorder_data` function takes three lists (`image_scores`, `image_names`, `image_ids`) and returns a dictionary with the sorted scores, names, and IDs.
  
- **Test Class**: The `TestReorderData` class inherits from `unittest.TestCase`.
  
- **Test Method**: The `test_reorder_data` method contains the test case. It defines input values and the expected output, calls the `reorder_data` function, and asserts that the result matches the expected output.

To run the tests, save the script to a file (e.g., `test_reorder_data.py`) and execute it using the command:

```sh
python -m unittest test_reorder_data.py
```

This will run the test case and verify if the function behaves as expected.