Hereâ€™s the equivalent Python code for the provided JavaScript function reorderData. The Python version uses lists and dictionaries to achieve the same functionality:
python
def reorder_data(image_scores, image_names, image_ids):
    # Combine scores, names, and IDs into a list of dictionaries
    image_data = [
        {'score': score, 'name': image_names[index], 'id': image_ids[index]}
        for index, score in enumerate(image_scores)
    ]
    
    # Sort image_data by scores in ascending order
    image_data.sort(key=lambda x: x['score'])
    
    # Separate the sorted image_data back into separate lists
    result_scores = []
    result_names = []
    result_ids = []
    
    for data in image_data:
        result_scores.append(data['score'])
        result_names.append(data['name'])
        result_ids.append(data['id'])
    
    return {
        'resultScores': result_scores,
        'resultNames': result_names,
        'resultIDs': result_ids
    }

# Example usage
image_scores = [85, 90, 78]
image_names = ["Image A", "Image B", "Image C"]
image_ids = [1, 2, 3]

result = reorder_data(image_scores, image_names, image_ids)
print(result)
Explanation of the Code:
Function Definition:
The function is named reorder_data, following Python's naming convention of using snake_case.
Combining Data:
A list comprehension is used to create a list of dictionaries (image_data). Each dictionary contains the score, name, and id associated with that score.
Sorting:
The sort method is used to sort the list of dictionaries by the score key using a lambda function as the sorting key.
Separating Sorted Data:
Three separate lists (result_scores, result_names, and result_ids) are created to hold the sorted scores, names, and IDs, respectively. A simple for loop is used to iterate over the sorted image_data and append the values to these lists.
Return Statement:
The function returns a dictionary containing the three result lists with keys 'resultScores', 'resultNames', and 'resultIDs'.
Example Usage:
The provided example at the end shows how to use the reorder_data function, demonstrating it with sample input data for scores, names, and IDs. The output will be printed as a dictionary containing the reordered results.