Certainly! Hereâ€™s the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

/**
 * A class to calculate midpoints from a given array of edges.
 */
public class Answer {

    /**
     * Calculates the midpoints from a given array of edges.
     * 
     * Example:
     *     Input: [0, 1, 2]
     *     Output: [0.5, 1.5]
     * 
     * @param edges An array of edge values.
     * @return An array of midpoints calculated from the edges.
     */
    public static double[] getMidsFromEdges(double[] edges) {
        // Ensure edges is not null and has at least two elements
        if (edges == null || edges.length < 2) {
            throw new IllegalArgumentException("Edges array must have at least two elements.");
        }

        // Calculate midpoints
        double[] mids = new double[edges.length - 1];
        for (int i = 0; i < edges.length - 1; i++) {
            mids[i] = (edges[i] + edges[i + 1]) / 2;
        }

        return mids;
    }

    /**
     * Main method to demonstrate the usage of the getMidsFromEdges method.
     * 
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        double[] edges = {0.0, 1.0, 2.0};
        double[] mids = getMidsFromEdges(edges);
        System.out.println(Arrays.toString(mids));
    }
}
```

### Explanation:
1. **Package and Class Declaration**:
   - The package declaration `package org.real.temp;` ensures the code is organized under the specified package.
   - The class declaration `public class Answer` defines the class name.

2. **Javadoc Comments**:
   - The Javadoc comments provide detailed documentation for the method and its parameters.
   - The example is included in the Javadoc comments to illustrate the expected behavior.

3. **Method Signature**:
   - The method `getMidsFromEdges` is defined as a static method that takes an array of doubles (`double[] edges`) and returns an array of doubles (`double[]`).

4. **Input Validation**:
   - The method checks if the input array is null or has fewer than two elements, throwing an `IllegalArgumentException` if so.

5. **Midpoint Calculation**:
   - A new array `mids` is created to store the midpoints.
   - A loop iterates through the `edges` array, calculating the midpoint between each pair of adjacent elements.

6. **Main Method**:
   - The `main` method demonstrates the usage of the `getMidsFromEdges` method by passing an example array and printing the resulting midpoints.

This Java code preserves the functionality and structure of the original Python code while adhering to Java's syntax and conventions.