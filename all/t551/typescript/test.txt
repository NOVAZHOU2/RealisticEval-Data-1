Certainly! Hereâ€™s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. We will map the Python `unittest` assertions to Jest assertions and include the necessary type annotations.

### TypeScript Code

First, let's define the `getMidsFromEdges` function in TypeScript:

```typescript
function getMidsFromEdges(edges: number[]): number[] {
    // Ensure edges is an array for consistency
    const edgeArray = edges;

    // Calculate midpoints using array operations
    const mids = edgeArray.slice(0, -1).map((edge, index) => {
        return (edge + edgeArray[index + 1]) / 2;
    });

    return mids;
}
```

Next, let's define the Jest test class:

```typescript
import { expect } from '@jest/globals';

describe('TestGetMidsFromEdges', () => {
    it('test_basic_case', () => {
        // Test with a standard range of edges
        const edges = [1, 2, 3, 4];
        const expectedMids = [1.5, 2.5, 3.5];
        expect(getMidsFromEdges(edges)).toEqual(expectedMids);
    });

    it('test_single_interval', () => {
        // Test with two edges (single interval)
        const edges = [5, 10];
        const expectedMids = [7.5];
        expect(getMidsFromEdges(edges)).toEqual(expectedMids);
    });

    it('test_multiple_intervals', () => {
        // Test with multiple intervals
        const edges = [0, 1, 2, 3, 4, 5];
        const expectedMids = [0.5, 1.5, 2.5, 3.5, 4.5];
        expect(getMidsFromEdges(edges)).toEqual(expectedMids);
    });

    it('test_negative_edges', () => {
        // Test with negative edges
        const edges = [-5, -3, -1, 1];
        const expectedMids = [-4.0, -2.0, 0.0];
        expect(getMidsFromEdges(edges)).toEqual(expectedMids);
    });

    it('test_zero_edges', () => {
        // Test with edges including zero
        const edges = [0, 1, 2];
        const expectedMids = [0.5, 1.5];
        expect(getMidsFromEdges(edges)).toEqual(expectedMids);
    });

    it('test_float_edges', () => {
        // Test with floating-point edges
        const edges = [0.0, 1.5, 3.0];
        const expectedMids = [0.75, 2.25];
        expect(getMidsFromEdges(edges)).toEqual(expectedMids);
    });

    it('test_empty_array', () => {
        // Test with an empty array
        const edges = [];
        const expectedMids = [];
        expect(getMidsFromEdges(edges)).toEqual(expectedMids);
    });
});
```

### Explanation:
1. **Function Definition**: The `getMidsFromEdges` function is defined with proper type annotations.
2. **Jest Testing Framework**: We use Jest's `describe` and `it` blocks to define test cases.
3. **Assertions**: We use `expect` with `toEqual` to compare the actual and expected results.
4. **Test Cases**: Each test case is defined with a descriptive name and the corresponding inputs and expected outputs.

This approach ensures that the functionality and logic of the original Python unittests are preserved while adapting them to Jest's syntax and idiomatic practices in TypeScript.