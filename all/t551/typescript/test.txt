Sure, I can help you convert the Python unittest test class to a TypeScript test case using Jest. Below is an example of how you might write the equivalent Jest test cases for your function `get_mids_from_edges`.

First, ensure you have Jest installed in your project. If not, you can install it using npm:

```bash
npm install --save-dev jest
```

Then, create a TypeScript file for your tests, e.g., `testGetMidsFromEdges.ts`. Here's how you can write the Jest test cases:

```typescript
import { describe, expect, test } from '@jest/globals';
import * as np from 'numpy';

// Assuming you have a function implementation or mock for get_mids_from_edges
function get_mids_from_edges(edges: np.ndarray): np.ndarray {
    // Your function implementation here
}

describe('get_mids_from_edges', () => {
    test('should calculate midpoints correctly', () => {
        const edges = np.array([0, 1, 2]);
        const expectedMidpoints = np.array([0.5, 1.5]);

        const result = get_mids_from_edges(edges);

        expect(result).toEqual(expectedMidpoints);
    });

    test('should handle empty array', () => {
        const edges = np.array([]);
        const expectedMidpoints = np.array([]);

        const result = get_mids_from_edges(edges);

        expect(result).toEqual(expectedMidpoints);
    });

    test('should handle single element array', () => {
        const edges = np.array([4]);
        const expectedMidpoints = np.array([]);

        const result = get_mids_from_edges(edges);

        expect(result).toEqual(expectedMidpoints);
    });
});
```

### Explanation:
1. **Importing Dependencies**: We import `describe`, `expect`, and `test` from `@jest/globals` and `np` from `numpy`.
2. **Function Implementation**: We assume that the function `get_mids_from_edges` is implemented somewhere in your project. If not, you need to provide the implementation.
3. **Describe Block**: We group our tests under a `describe` block with the name `'get_mids_from_edges'`.
4. **Test Cases**:
   - The first test case checks if the function correctly calculates midpoints for a given array.
   - The second test case checks if the function handles an empty array correctly.
   - The third test case checks if the function handles an array with a single element correctly.

Make sure to adjust the path to the `numpy` module if it's different in your project. Also, ensure that the `numpy` package is installed in your TypeScript environment.