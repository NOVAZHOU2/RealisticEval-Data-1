Certainly! Hereâ€™s the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Calculate the midpoints from a given array of edges.
 * For example:
 *   input: [0, 1, 2]
 *   output: [0.5, 1.5]
 *
 * @param edges - An array of edge values.
 * @returns An array of midpoints calculated from the edges.
 */
function getMidsFromEdges(edges: number[]): number[] {
    // Ensure edges is an array for consistency
    const edgeArray = edges;

    // Calculate midpoints using array operations
    const mids = edgeArray.slice(0, -1).map((edge, index) => {
        return (edge + edgeArray[index + 1]) / 2;
    });

    return mids;
}

// Example usage
const edges = [0, 1, 2];
console.log(getMidsFromEdges(edges)); // Output: [0.5, 1.5]
```

### Explanation:
1. **Function Definition**: The function `getMidsFromEdges` takes an array of numbers (`number[]`) as input and returns an array of numbers (`number[]`).
2. **JSDoc Documentation**: The JSDoc-style comments provide detailed documentation for the function, including examples and parameter/return descriptions.
3. **Array Slicing and Mapping**: We use `slice(0, -1)` to create a new array without the last element, and then map over this array to calculate the midpoints.
4. **Midpoint Calculation**: For each pair of adjacent elements, we calculate the midpoint by adding them together and dividing by 2.

This approach ensures that the functionality and structure of the original Python code are preserved while adapting it to TypeScript's static type system and idiomatic practices.