Sure! Here is the equivalent TypeScript code, including the necessary type definitions and logic:

First, we need to install and import the `numpy` equivalent in TypeScript, which is typically `@types/node` for math operations, but since there's no direct equivalent, we can use plain JavaScript arrays and standard math operations. We will use regular JavaScript arrays for simplicity.

```typescript
function getMidsFromEdges(edges: number[]): number[] {
    /**
     * Calculate the midpoints from a given array of edges.
     *
     * @param edges - An array of edge values.
     * @returns An array of midpoints calculated from the edges.
     */
    // Ensure edges is an array for consistency
    const edgeArray = edges;

    // Calculate midpoints using array operations
    const mids = edgeArray.slice(0, -1).map((edge, index) => {
        return (edge + edgeArray[index + 1]) / 2;
    });

    return mids;
}

// Example usage
const edges = [1, 3, 5, 7];
console.log(getMidsFromEdges(edges)); // Output: [2, 4, 6]
```

### Explanation:
1. **Function Definition**: The function `getMidsFromEdges` takes an array of numbers (`number[]`) as input and returns an array of numbers.
2. **Array Slicing and Mapping**: We use `slice(0, -1)` to create a new array without the last element, and then map over this array to calculate the midpoints.
3. **Midpoint Calculation**: For each pair of adjacent elements, we calculate the midpoint by adding them together and dividing by 2.

This approach ensures that the functionality remains consistent with the original Python code, while adapting it to TypeScript's static type system and idiomatic practices.