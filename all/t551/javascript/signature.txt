Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JavaScript documentation standards using JSDoc format:

```javascript
/**
 * Calculate the midpoints from a given array of edges.
 * For example:
 *   input: [0, 1, 2]
 *   output: [0.5, 1.5]
 *
 * @param {Array<number>} edges - An array of edge values.
 * @returns {Array<number>} An array of midpoints calculated from the edges.
 */
function getMidsFromEdges(edges) {
    // Ensure edges is an array for consistency
    edges = Array.from(edges);

    // Calculate midpoints using array operations
    const mids = edges.slice(0, -1).map((edge, index) => {
        return (edge + edges[index + 1]) / 2;
    });

    return mids;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block is placed above the function definition.
   - It includes a brief description of the function's purpose.
   - An example is provided to illustrate the expected input and output.
   - The `@param` tag specifies the parameter type and description.
   - The `@returns` tag specifies the return type and description.

2. **Function Definition**:
   - The function `getMidsFromEdges` is defined with a single parameter `edges`.
   - The parameter `edges` is documented to be an array of numbers (`Array<number>`).

3. **Implementation**:
   - `Array.from(edges)` ensures that `edges` is an array.
   - `edges.slice(0, -1)` creates a new array excluding the last element.
   - `map` is used to iterate over this array and calculate the midpoint between each pair of adjacent elements.
   - The function returns the array of midpoints.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JavaScript documentation standards using JSDoc.