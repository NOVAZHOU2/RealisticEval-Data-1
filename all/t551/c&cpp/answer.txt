Here is an equivalent C++ version of your Python function using Eigen library for handling arrays:

```cpp
#include <Eigen/Dense>
#include <vector>

std::vector<double> getMidsFromEdges(const std::vector<int>& edges) {
    std::vector<double> mids;
    for(size_t i = 0; i < edges.size() - 1; ++i){
        double midpoint = (edges[i] + edges[i+1]) / 2.0;
        mids.push_back(midpoint);
    }
    return mids;
}
```

And here is an equivalent C version of your Python function:

```c
#include <stdio.h>
#include <stdlib.h>

double* getMidsFromEdges(int* edges, int size, int* mids_size) {
    *mids_size = size - 1;
    double* mids = malloc(*mids_size * sizeof(double));
    if(mids == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(1);
    }

    for(int i = 0; i < *mids_size; ++i){
        mids[i] = (edges[i] + edges[i+1]) / 2.0;
    }
    
    return mids;
}

int main() {
    int edges[] = {0, 1, 2};
    int mids_size;
    double* mids = getMidsFromEdges(edges, sizeof(edges)/sizeof(edges[0]), &mids_size);

    printf("Midpoints: ");
    for(int i = 0; i < mids_size; ++i){
        printf("%f ", mids[i]);
    }
    printf("\n");

    free(mids);
    return 0;
}
```
In these codes, we iterate through each pair of adjacent elements in the input array and calculate their average to get the midpoint. We store all the midpoints in a new array which is returned by the function. In the C version, you have to allocate memory for the `mids` array manually and remember to free it when you're done with it.