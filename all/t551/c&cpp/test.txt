Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class is converted to C++ while preserving the functionality and logic of the tests. Appropriate assertions are used in Catch2 to ensure the correctness of the tests.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>

// Function to calculate midpoints from a given vector of edges
std::vector<double> getMidsFromEdges(const std::vector<double>& edges) {
    std::vector<double> mids;
    for (size_t i = 0; i < edges.size() - 1; ++i) {
        double midpoint = (edges[i] + edges[i + 1]) / 2.0;
        mids.push_back(midpoint);
    }
    return mids;
}

TEST_CASE("Test Get Mids From Edges") {
    SECTION("Basic Case") {
        std::vector<double> edges = {1, 2, 3, 4};
        std::vector<double> expected_mids = {1.5, 2.5, 3.5};
        REQUIRE(getMidsFromEdges(edges) == expected_mids);
    }

    SECTION("Single Interval") {
        std::vector<double> edges = {5, 10};
        std::vector<double> expected_mids = {7.5};
        REQUIRE(getMidsFromEdges(edges) == expected_mids);
    }

    SECTION("Multiple Intervals") {
        std::vector<double> edges = {0, 1, 2, 3, 4, 5};
        std::vector<double> expected_mids = {0.5, 1.5, 2.5, 3.5, 4.5};
        REQUIRE(getMidsFromEdges(edges) == expected_mids);
    }

    SECTION("Negative Edges") {
        std::vector<double> edges = {-5, -3, -1, 1};
        std::vector<double> expected_mids = {-4.0, -2.0, 0.0};
        REQUIRE(getMidsFromEdges(edges) == expected_mids);
    }

    SECTION("Zero Edges") {
        std::vector<double> edges = {0, 1, 2};
        std::vector<double> expected_mids = {0.5, 1.5};
        REQUIRE(getMidsFromEdges(edges) == expected_mids);
    }

    SECTION("Float Edges") {
        std::vector<double> edges = {0.0, 1.5, 3.0};
        std::vector<double> expected_mids = {0.75, 2.25};
        REQUIRE(getMidsFromEdges(edges) == expected_mids);
    }

    SECTION("Empty Array") {
        std::vector<double> edges = {};
        std::vector<double> expected_mids = {};
        REQUIRE(getMidsFromEdges(edges) == expected_mids);
    }
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<catch2/catch_test_macros.hpp>` and `<vector>`) are included at the beginning.
2. **Function Definition**: The `getMidsFromEdges` function is defined to calculate the midpoints from a given vector of edges.
3. **Test Class**: The `TEST_CASE` macro is used to define the test case, and each test method is defined within a `SECTION`.
4. **Assertions**: The `REQUIRE` macro is used to assert the equality of the computed midpoints with the expected midpoints. This is similar to `assert_array_equal` in Python's `unittest` framework.
5. **Test Cases**:
   - **Basic Case**: Tests a standard range of edges.
   - **Single Interval**: Tests with two edges (single interval).
   - **Multiple Intervals**: Tests with multiple intervals.
   - **Negative Edges**: Tests with negative edges.
   - **Zero Edges**: Tests with edges including zero.
   - **Float Edges**: Tests with floating-point edges.
   - **Empty Array**: Tests with an empty array.

This C++ code preserves the original purpose and structure of the Python unittest class, translating it appropriately to the Catch2 testing framework.