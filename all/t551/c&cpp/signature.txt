Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of function signatures, type annotations, and comments:

```cpp
#include <iostream>
#include <vector>

// Function to calculate midpoints from a given vector of edges
/**
 * Calculate the midpoints from a given array of edges.
 * For example:
 *     input: [0, 1, 2]
 *     output: [0.5, 1.5]
 *
 * @param edges A vector of edge values.
 * @return A vector of midpoints calculated from the edges.
 */
std::vector<double> getMidsFromEdges(const std::vector<double>& edges) {
    // Calculate midpoints using vectorized operations
    std::vector<double> mids;
    for (size_t i = 0; i < edges.size() - 1; ++i) {
        double midpoint = (edges[i] + edges[i + 1]) / 2.0;
        mids.push_back(midpoint);
    }

    return mids;
}

int main() {
    // Example usage
    std::vector<double> edges = {0.0, 1.0, 2.0};
    std::vector<double> mids = getMidsFromEdges(edges);

    // Print the midpoints
    for (const auto& mid : mids) {
        std::cout << mid << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<iostream>` and `<vector>`) are included at the beginning.
2. **Function Documentation**: The Python docstring is translated into a multi-line comment using `/* ... */` in C++.
3. **Function Signature**: The function `getMidsFromEdges` is defined to take a `std::vector<double>` as input and return a `std::vector<double>` as output.
4. **Loop Calculation**: A loop iterates through the input vector, calculating the midpoint between each pair of adjacent elements and storing the result in a new vector.
5. **Example Usage**: In the `main` function, an example vector of edges is created, and the `getMidsFromEdges` function is called to compute the midpoints. The results are then printed to the console.

This C++ code preserves the original purpose and structure of the Python code, translating it appropriately to C++ syntax and conventions.