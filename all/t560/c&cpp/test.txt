Hereâ€™s how you can convert the provided JavaScript Jest test cases into Catch2 test cases in C++:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>

int getLineNumber(const std::string& content, size_t index); // Function signature

TEST_CASE("getLineNumber") {
    SECTION("returns 1 for the first character") {
        REQUIRE(getLineNumber("Line 1\nLine 2\nLine 3", 0) == 1);
    }

    SECTION("returns 1 for the last character of the first line") {
        REQUIRE(getLineNumber("Line 1\nLine 2\nLine 3", 5) == 1);
    }

    SECTION("returns 3 for the last character of the third line") {
        REQUIRE(getLineNumber("Line 1\nLine 2\nLine 3", 18) == 3);
    }

    SECTION("returns 1 for a single line string") {
        REQUIRE(getLineNumber("Single line string", 0) == 1);
    }

    SECTION("returns 3 for an index within a multiline string with trailing newlines") {
        REQUIRE(getLineNumber("Line 1\nLine 2\nLine 3\n\n", 15) == 3);
    }
}
```

### Explanation:
- `#define CATCH_CONFIG_MAIN` sets up Catch2.
- The `TEST_CASE` macro defines a test case group for `getLineNumber`.
- `SECTION` macros are used to group individual test scenarios.
- `REQUIRE` is used to assert that the expected result matches the actual result. 

You can add this code to your C++ project to test the `getLineNumber` function!