Sure! Below is an equivalent C++ test case using Catch2 for the provided JavaScript Jest function `getLineNumber`.

```cpp
#include <catch2/catch.hpp>
#include <string>

/**
 * Gets the line number in the content at the specified index.
 *
 * @param {std::string} content - The string content to check.
 * @param {size_t} index - The character index to find the line number for.
 * @returns {size_t} - The line number corresponding to the given index.
 */
size_t getLineNumber(const std::string& content, size_t index) {
    if (index >= content.size()) {
        return 0; // Return 0 or throw an exception if index is out of bounds
    }

    size_t lineNumber = 1;
    for (size_t i = 0; i <= index; ++i) {
        if (content[i] == '\n') {
            ++lineNumber;
        }
    }

    return lineNumber;
}

TEST_CASE("getLineNumber tests", "[getLineNumber]") {
    REQUIRE(getLineNumber("", 0) == 0);
    REQUIRE(getLineNumber("Hello", 4) == 1);
    REQUIRE(getLineNumber("Hello\nWorld", 4) == 1);
    REQUIRE(getLineNumber("Hello\nWorld", 5) == 2);
    REQUIRE(getLineNumber("Hello\nWorld\nC++", 7) == 2);
    REQUIRE(getLineNumber("Hello\nWorld\nC++", 8) == 3);
}
```

In this C++ code:
- We include the Catch2 header file.
- We define the `getLineNumber` function similar to the original JavaScript function.
- We write several test cases using the `TEST_CASE` macro from Catch2 to verify the functionality of `getLineNumber`.

To run these tests, you need to have Catch2 installed and properly set up in your project. If you're using a build system like CMake, you can add the following lines to your `CMakeLists.txt`:

```cmake
find_package(Catch2 REQUIRED)
add_executable(your_test_executable your_test_file.cpp)
target_link_libraries(your_test_executable PRIVATE Catch2::Catch2)
```

Then, you can run the tests using a command like `./your_test_executable`.