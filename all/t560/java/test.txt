Certainly! Below is the equivalent Java JUnit test case for your JavaScript Jest test code. The package and class names match your requirements.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    /**
     * Tests the getLineNumber function with various inputs.
     */
    @Test
    public void testGetLineNumber() {
        // Test case 1: Empty string
        assertEquals(0, getLineNumber("", 0));

        // Test case 2: Single line
        assertEquals(1, getLineNumber("Hello", 4));

        // Test case 3: Multiple lines
        String content = "Line one\nLine two\nLine three";
        assertEquals(1, getLineNumber(content, 5)); // After 'n' in "Line one"
        assertEquals(2, getLineNumber(content, 9)); // After 'o' in "Line two"
        assertEquals(3, getLineNumber(content, 16)); // After 'e' in "Line three"

        // Test case 4: Line ending with newline
        content = "Line four\n";
        assertEquals(1, getLineNumber(content, 8)); // After 'r' in "Line four"

        // Test case 5: Line starting with newline
        content = "\nLine five";
        assertEquals(2, getLineNumber(content, 1)); // After '\n'

        // Test case 6: Index out of bounds
        content = "Line six";
        assertEquals(-1, getLineNumber(content, 10));
    }

    /**
     * Mock implementation of the getLineNumber function.
     *
     * @param content - The string content to check.
     * @param index - The character index to find the line number for.
     * @return - The line number corresponding to the given index.
     */
    private int getLineNumber(String content, int index) {
        if (index < 0 || index >= content.length()) {
            return -1; // Invalid index
        }
        
        int lineNumber = 1;
        for (int i = 0; i <= index; i++) {
            if (content.charAt(i) == '\n') {
                lineNumber++;
            }
        }
        return lineNumber;
    }
}
```

### Explanation:
- **Package and Class**: The package `org.real.temp` and class `Tester` match your requirements.
- **JUnit Annotations**: The `@Test` annotation marks the method as a test case.
- **Assertions**: The `assertEquals` method from JUnit is used to verify that the actual result matches the expected result.
- **Mock Implementation**: A mock implementation of the `getLineNumber` function is provided within the test class to demonstrate how you might implement and test it.

This setup should help you transition from a JavaScript Jest test case to a Java JUnit test case effectively.