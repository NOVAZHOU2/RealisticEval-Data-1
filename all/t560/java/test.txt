Hereâ€™s how you can convert the provided JavaScript Jest test cases into JUnit 4 test cases for the Java `Tester` class:

```java
package org.real.temp;

import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class Tester {

    @Test
    public void testGetLineNumber_FirstCharacter() {
        assertEquals(1, getLineNumber("Line 1\nLine 2\nLine 3", 0));
    }

    @Test
    public void testGetLineNumber_LastCharacterOfFirstLine() {
        assertEquals(1, getLineNumber("Line 1\nLine 2\nLine 3", 5));
    }

    @Test
    public void testGetLineNumber_LastCharacterOfThirdLine() {
        assertEquals(3, getLineNumber("Line 1\nLine 2\nLine 3", 18));
    }

    @Test
    public void testGetLineNumber_SingleLineString() {
        assertEquals(1, getLineNumber("Single line string", 0));
    }

    @Test
    public void testGetLineNumber_MultilineStringWithTrailingNewlines() {
        assertEquals(3, getLineNumber("Line 1\nLine 2\nLine 3\n\n", 15));
    }

    // Include the method being tested here
    public static int getLineNumber(String content, int index) {
        if (content == null || index < 0 || index > content.length()) {
            throw new IllegalArgumentException("Invalid content or index");
        }
        return content.substring(0, index).split("\n", -1).length;
    }
}
```

### Explanation:
- Each `test` function from Jest is translated to a method annotated with `@Test` in JUnit.
- The `expect(...).toBe(...)` assertion in Jest is replaced with `assertEquals(...)` in JUnit.
- The method `getLineNumber` is included for completeness, but in a real scenario, it would typically be part of another class.