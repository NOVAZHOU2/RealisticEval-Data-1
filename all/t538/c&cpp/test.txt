Sure! Below is the equivalent C++ Catch2 test case for the JavaScript Jest test function `sortByField`. Note that C++ does not have built-in support for sorting arrays of objects based on a specific field like JavaScript does. Therefore, we will need to implement the sorting logic manually.

First, let's define a simple structure to represent the objects:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

struct Object {
    std::string name;
    int value;

    bool operator<(const Object& other) const {
        return name < other.name;
    }
};
```

Next, we'll implement the `sortByField` function:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

struct Object {
    std::string name;
    int value;

    bool operator<(const Object& other) const {
        return name < other.name;
    }
};

std::vector<Object> sortByField(const std::vector<Object>& array, const std::string& field, bool ascending = true) {
    std::vector<Object> sortedArray = array;
    if (field == "name") {
        if (ascending) {
            std::sort(sortedArray.begin(), sortedArray.end());
        } else {
            std::sort(sortedArray.rbegin(), sortedArray.rend());
        }
    } else if (field == "value") {
        // Implement sorting by value here if needed
        // For simplicity, we'll only sort by name in this example
    }
    return sortedArray;
}
```

Now, let's write the Catch2 test cases:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"

TEST_CASE("Sort by name in ascending order", "[sorting]") {
    std::vector<Object> input = {{"banana", 3}, {"apple", 1}, {"cherry", 2}};
    std::vector<Object> expected = {{"apple", 1}, {"banana", 3}, {"cherry", 2}};
    auto result = sortByField(input, "name");

    REQUIRE(result.size() == expected.size());
    for (size_t i = 0; i < result.size(); ++i) {
        REQUIRE(result[i].name == expected[i].name);
        REQUIRE(result[i].value == expected[i].value);
    }
}

TEST_CASE("Sort by name in descending order", "[sorting]") {
    std::vector<Object> input = {{"banana", 3}, {"apple", 1}, {"cherry", 2}};
    std::vector<Object> expected = {"cherry", 2}, {"banana", 3}, {"apple", 1}};
    auto result = sortByField(input, "name", false);

    REQUIRE(result.size() == expected.size());
    for (size_t i = 0; i < result.size(); ++i) {
        REQUIRE(result[i].name == expected[i].name);
        REQUIRE(result[i].value == expected[i].value);
    }
}
```

This code defines a simple `Object` struct and a `sortByField` function that sorts objects based on the `name` field. It then provides two Catch2 test cases to verify that the function works correctly when sorting in both ascending and descending order.