Hereâ€™s how you can translate your JavaScript Jest test cases into C++ using the Catch2 testing framework:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>
#include <string>
#include <algorithm>
#include <stdexcept>

struct Object {
    std::string name;
    int age;
};

// Assume sortByField function is defined here

TEST_CASE("sortByField", "[sorting]") {
    std::vector<Object> data = {
        {"John", 25},
        {"Alice", 30},
        {"Bob", 22},
        {"Charlie", 28}
    };

    SECTION("should sort by name in ascending order") {
        auto sorted = sortByField(data, "name", true);
        REQUIRE(sorted == std::vector<Object>{
            {"Alice", 30},
            {"Bob", 22},
            {"Charlie", 28},
            {"John", 25}
        });
    }

    SECTION("should sort by name in descending order") {
        auto sorted = sortByField(data, "name", false);
        REQUIRE(sorted == std::vector<Object>{
            {"John", 25},
            {"Charlie", 28},
            {"Bob", 22},
            {"Alice", 30}
        });
    }

    SECTION("should sort by age in ascending order") {
        auto sorted = sortByField(data, "age", true);
        REQUIRE(sorted == std::vector<Object>{
            {"Bob", 22},
            {"John", 25},
            {"Charlie", 28},
            {"Alice", 30}
        });
    }

    SECTION("should sort by age in descending order") {
        auto sorted = sortByField(data, "age", false);
        REQUIRE(sorted == std::vector<Object>{
            {"Alice", 30},
            {"Charlie", 28},
            {"John", 25},
            {"Bob", 22}
        });
    }
}
```

### Notes:
- Ensure you have Catch2 set up in your project to compile and run these tests.
- Adjust the `sortByField` function to be available within the scope of your test cases.