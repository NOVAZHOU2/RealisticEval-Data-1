Sure, here's how you could write that JavaScript function in C++:

```cpp
#include <algorithm>
#include <vector>
#include <string>

struct Object {
    std::string field;
};

bool compareByField(const Object& a, const Object& b, bool ascending) {
    if (ascending)
        return a.field < b.field;
    else
        return a.field > b.field;
}

std::vector<Object> sortByField(std::vector<Object>& array, const std::string& field, bool ascending = true) {
    std::sort(array.begin(), array.end(), [field, ascending](const Object& a, const Object& b) {
        return compareByField(a, b, ascending);
    });
    return array;
}
```

Please note that this is a simplified version and does not handle edge cases like null or undefined values for the `field` property. Also, this assumes that all objects have a `field` property which is a string. In a real-world application, you would likely want to add error checking and validation for these assumptions.