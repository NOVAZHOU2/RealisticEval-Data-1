Sure! Here is the equivalent C++ code for the provided JavaScript function:

```cpp
#include <vector>
#include <algorithm>
#include <string>

// Define a struct or class to represent the object
struct Object {
    std::string field;
    // Add other fields as needed
};

// Function to sort an array of objects alphabetically based on a specified field
std::vector<Object> sortByField(std::vector<Object>& array, const std::string& field, bool ascending = true) {
    auto compare = [field](const Object& a, const Object& b) {
        return (ascending ? a.field < b.field : a.field > b.field);
    };

    std::sort(array.begin(), array.end(), compare);

    return array;
}
```

### Explanation:
1. **Struct Definition**: We define a `struct` named `Object` that represents the objects in the array. This structure includes a `field` member which is used for sorting.

2. **Function Definition**: The `sortByField` function takes a reference to a vector of `Object`, a string representing the field to sort by, and an optional boolean indicating whether to sort in ascending order.

3. **Lambda Function**: Inside the `sortByField` function, we define a lambda function `compare` that compares two `Object` instances based on the specified field and the sorting direction (`ascending`).

4. **Sorting**: We use the standard library's `std::sort` function with the custom comparator to sort the array.

5. **Return Value**: Finally, the sorted array is returned.

This C++ code should work similarly to the original JavaScript function, sorting an array of objects based on a specified field in either ascending or descending order.