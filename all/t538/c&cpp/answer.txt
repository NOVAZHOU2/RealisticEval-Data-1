To translate your JavaScript function to C++, you can use the `std::vector` for the array and `std::sort` with a custom comparator. Here's how you might write it:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <string>
#include <cctype>

struct Object {
    std::string field; // Change to your specific field type
    // Add other fields as necessary
};

std::vector<Object> sortByField(std::vector<Object>& array, const std::string& field, bool ascending = true) {
    if (array.empty()) {
        throw std::invalid_argument("Array is empty.");
    }

    // Sorting function
    std::sort(array.begin(), array.end(), [&](const Object& a, const Object& b) {
        std::string valueA = a.field; // Access the specific field
        std::string valueB = b.field;

        std::transform(valueA.begin(), valueA.end(), valueA.begin(), ::tolower);
        std::transform(valueB.begin(), valueB.end(), valueB.begin(), ::tolower);

        if (valueA < valueB) {
            return ascending;
        }
        if (valueA > valueB) {
            return !ascending;
        }
        return false;
    });

    return array; // Sorted array
}
```

Adjust the `Object` structure to include the fields relevant to your use case.