Hereâ€™s the equivalent JUnit 4 test case for your JavaScript Jest tests:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

public class Tester {
    @Test
    public void testSortByNameAscending() {
        Object[] data = new Object[]{
            new Person("John", 25),
            new Person("Alice", 30),
            new Person("Bob", 22),
            new Person("Charlie", 28)
        };

        Object[] sorted = SortUtil.sortByField(data, "name", true);
        Object[] expected = new Object[]{
            new Person("Alice", 30),
            new Person("Bob", 22),
            new Person("Charlie", 28),
            new Person("John", 25)
        };

        assertArrayEquals(expected, sorted);
    }

    @Test
    public void testSortByNameDescending() {
        Object[] data = new Object[]{
            new Person("John", 25),
            new Person("Alice", 30),
            new Person("Bob", 22),
            new Person("Charlie", 28)
        };

        Object[] sorted = SortUtil.sortByField(data, "name", false);
        Object[] expected = new Object[]{
            new Person("John", 25),
            new Person("Charlie", 28),
            new Person("Bob", 22),
            new Person("Alice", 30)
        };

        assertArrayEquals(expected, sorted);
    }

    @Test
    public void testSortByAgeAscending() {
        Object[] data = new Object[]{
            new Person("John", 25),
            new Person("Alice", 30),
            new Person("Bob", 22),
            new Person("Charlie", 28)
        };

        Object[] sorted = SortUtil.sortByField(data, "age", true);
        Object[] expected = new Object[]{
            new Person("Bob", 22),
            new Person("John", 25),
            new Person("Charlie", 28),
            new Person("Alice", 30)
        };

        assertArrayEquals(expected, sorted);
    }

    @Test
    public void testSortByAgeDescending() {
        Object[] data = new Object[]{
            new Person("John", 25),
            new Person("Alice", 30),
            new Person("Bob", 22),
            new Person("Charlie", 28)
        };

        Object[] sorted = SortUtil.sortByField(data, "age", false);
        Object[] expected = new Object[]{
            new Person("Alice", 30),
            new Person("Charlie", 28),
            new Person("John", 25),
            new Person("Bob", 22)
        };

        assertArrayEquals(expected, sorted);
    }

    // Define the Person class
    public static class Person {
        String name;
        int age;

        Person(String name, int age) {
            this.name = name;
            this.age = age;
        }

        // Override equals and hashCode for assertArrayEquals to work correctly
        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null || getClass() != obj.getClass()) return false;
            Person person = (Person) obj;
            return age == person.age && name.equals(person.name);
        }

        @Override
        public int hashCode() {
            return java.util.Objects.hash(name, age);
        }
    }
}
```

This Java test class uses JUnit 4 and includes a `Person` class to represent the objects being sorted. The test cases mirror the logic of your original JavaScript tests.