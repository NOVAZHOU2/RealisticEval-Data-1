Sure! Below is the equivalent Java JUnit test case for the provided JavaScript Jest test function `sortByField`. This assumes that you have a Java method `sortByField` in your class `Tester`.

First, let's define the Java method `sortByField`:

```java
import java.util.Arrays;
import java.util.Comparator;

public class Tester {

    public static <T> T[] sortByField(T[] array, String field, boolean ascending) {
        Arrays.sort(array, new Comparator<T>() {
            @Override
            public int compare(T o1, T o2) {
                try {
                    Comparable<?> val1 = (Comparable<?>) getFieldValue(o1, field);
                    Comparable<?> val2 = (Comparable<?>) getFieldValue(o2, field);
                    return ascending ? val1.compareTo(val2) : val2.compareTo(val1);
                } catch (Exception e) {
                    throw new RuntimeException("Error comparing fields", e);
                }
            }

            private Object getFieldValue(Object obj, String fieldName) throws Exception {
                Class<?> clazz = obj.getClass();
                while (clazz != null) {
                    try {
                        return clazz.getDeclaredField(fieldName).get(obj);
                    } catch (NoSuchFieldException e) {
                        clazz = clazz.getSuperclass();
                    }
                }
                throw new NoSuchFieldException("Field not found: " + fieldName);
            }
        });
        return array;
    }
}
```

Next, we'll write the JUnit test case:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TesterTest {

    @Test
    public void testSortByField() {
        // Create sample data
        Person person1 = new Person("Alice", 30);
        Person person2 = new Person("Bob", 25);
        Person person3 = new Person("Charlie", 35);

        Person[] people = {person1, person2, person3};

        // Sort by name in ascending order
        Person[] sortedPeopleAsc = Tester.sortByField(people, "name", true);
        assertEquals("Alice", sortedPeopleAsc[0].getName());
        assertEquals("Bob", sortedPeopleAsc[1].getName());
        assertEquals("Charlie", sortedPeopleAsc[2].getName());

        // Sort by age in descending order
        Person[] sortedPeopleDesc = Tester.sortByField(people, "age", false);
        assertEquals("Charlie", sortedPeopleDesc[0].getName());
        assertEquals("Alice", sortedPeopleDesc[1].getName());
        assertEquals("Bob", sortedPeopleDesc[2].getName());
    }
}

class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}
```

### Explanation:
1. **Java Method**: The `sortByField` method sorts an array of objects based on a specified field and order using Java's `Arrays.sort` with a custom comparator.
2. **JUnit Test Case**:
   - We create a simple `Person` class with `name` and `age` fields.
   - We then test sorting by both `name` and `age` fields in both ascending and descending orders.
   - The assertions check if the sorted arrays match the expected results.

This should give you a good starting point for testing your Java code similar to how you would do it in JavaScript with Jest.