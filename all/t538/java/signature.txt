Here is the equivalent Java code with the same functionality and comments:

```java
import java.util.*;

/**
 * Sorts an array of objects alphabetically based on a specified field.
 *
 * @param <T>     The type of the objects in the array.
 * @param array   The array of objects to sort.
 * @param field   The field of the objects to sort by.
 * @param ascending If true, sort in ascending order; if false, sort in descending order.
 * @return The sorted array of objects.
 */
public static <T> List<T> sortByField(List<T> array, String field, boolean ascending) {
    // Create a comparator that compares objects based on the specified field
    Comparator<T> comparator = (o1, o2) -> {
        try {
            // Get the value of the specified field from each object
            Object val1 = FieldUtils.readField(o1.getClass().getDeclaredField(field), o1, true);
            Object val2 = FieldUtils.readField(o2.getClass().getDeclaredField(field), o2, true);

            // Compare the values
            int result = ((Comparable<Object>)val1).compareTo(val2);

            // Return the result, reversing it if sorting in descending order
            return ascending ? result : -result;
        } catch (NoSuchFieldException | IllegalAccessException e) {
            throw new RuntimeException("Error while sorting", e);
        }
    };

    // Sort the array using the comparator
    array.sort(comparator);

    // Return the sorted array
    return array;
}
```

This Java method uses Apache Commons Lang's `FieldUtils` class to read the value of the specified field from each object in the list. It then creates a custom comparator that sorts the objects based on these values. The comparator can be used to sort any list of objects that have a field of the specified name.