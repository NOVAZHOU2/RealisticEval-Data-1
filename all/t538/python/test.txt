Sure! Below is the equivalent Python unit test case using the `unittest` framework for the provided JavaScript Jest test case.

```python
import unittest

def sortByField(array, field, ascending=True):
    return sorted(array, key=lambda x: x[field], reverse=not ascending)

class TestSortByField(unittest.TestCase):

    def test_sort_by_field_ascending(self):
        data = [
            {'name': 'Alice', 'age': 25},
            {'name': 'Bob', 'age': 30},
            {'name': 'Charlie', 'age': 35}
        ]
        expected = [
            {'name': 'Alice', 'age': 25},
            {'name': 'Bob', 'age': 30},
            {'name': 'Charlie', 'age': 35}
        ]
        result = sortByField(data, 'name')
        self.assertEqual(result, expected)

    def test_sort_by_field_descending(self):
        data = [
            {'name': 'Alice', 'age': 25},
            {'name': 'Bob', 'age': 30},
            {'name': 'Charlie', 'age': 35}
        ]
        expected = [
            {'name': 'Charlie', 'age': 35},
            {'name': 'Bob', 'age': 30},
            {'name': 'Alice', 'age': 25}
        ]
        result = sortByField(data, 'name', ascending=False)
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
1. **Function Definition**: The `sortByField` function is defined to sort an array of dictionaries (objects) based on a specified field and direction.
2. **Test Class**: A test class `TestSortByField` is created that inherits from `unittest.TestCase`.
3. **Test Methods**:
   - `test_sort_by_field_ascending`: Tests sorting in ascending order.
   - `test_sort_by_field_descending`: Tests sorting in descending order.
4. **Assertions**: The `assertEqual` method is used to verify that the sorted result matches the expected output.

This Python script can be run using the `unittest` framework, and it will validate the functionality of the `sortByField` function.