Here's how to convert the provided JavaScript Jest test cases into Python unit tests using the unittest framework. The structure will maintain the original functionality, testing the sort_by_field function for sorting a list of dictionaries by different keys in both ascending and descending orders.
Converted Python Unit Tests
python
import unittest

# Assuming the sort_by_field function is defined as provided earlier.
def sort_by_field(array, field: str, ascending: bool = True) -> list:
    if not array or field not in array[0]:
        raise ValueError('Field does not exist in the objects.')
    return sorted(array, key=lambda x: x[field].lower(), reverse=not ascending)

class TestSortByField(unittest.TestCase):
    
    def setUp(self):
        self.data = [
            {'name': 'John', 'age': 25},
            {'name': 'Alice', 'age': 30},
            {'name': 'Bob', 'age': 22},
            {'name': 'Charlie', 'age': 28},
        ]

    def test_sort_by_name_ascending(self):
        sorted_data = sort_by_field(self.data, 'name', True)
        expected = [
            {'name': 'Alice', 'age': 30},
            {'name': 'Bob', 'age': 22},
            {'name': 'Charlie', 'age': 28},
            {'name': 'John', 'age': 25},
        ]
        self.assertEqual(sorted_data, expected)

    def test_sort_by_name_descending(self):
        sorted_data = sort_by_field(self.data, 'name', False)
        expected = [
            {'name': 'John', 'age': 25},
            {'name': 'Charlie', 'age': 28},
            {'name': 'Bob', 'age': 22},
            {'name': 'Alice', 'age': 30},
        ]
        self.assertEqual(sorted_data, expected)

    def test_sort_by_age_ascending(self):
        sorted_data = sort_by_field(self.data, 'age', True)
        expected = [
            {'name': 'Bob', 'age': 22},
            {'name': 'John', 'age': 25},
            {'name': 'Charlie', 'age': 28},
            {'name': 'Alice', 'age': 30},
        ]
        self.assertEqual(sorted_data, expected)

    def test_sort_by_age_descending(self):
        sorted_data = sort_by_field(self.data, 'age', False)
        expected = [
            {'name': 'Alice', 'age': 30},
            {'name': 'Charlie', 'age': 28},
            {'name': 'John', 'age': 25},
            {'name': 'Bob', 'age': 22},
        ]
        self.assertEqual(sorted_data, expected)

if __name__ == '__main__':
    unittest.main()
Explanation of the Python Code:
Importing Modules:
The unittest module is imported for creating unit tests.
Function Definition:
The sort_by_field function is included, similar to what you would have defined earlier.
Test Class:
A class TestSortByField is created, inheriting from unittest.TestCase.
Setup Method:
The setUp method initializes common data to be used across multiple tests.
Test Methods:
Each test case method checks the sorting functionality:
test_sort_by_name_ascending: Tests sorting by name in ascending order.
test_sort_by_name_descending: Tests sorting by name in descending order.
test_sort_by_age_ascending: Tests sorting by age in ascending order.
test_sort_by_age_descending: Tests sorting by age in descending order.
Assertions:
Each test method uses self.assertEqual to compare the sorted output with the expected result.
Running the Tests:
The standard Python test runner is called when the script is executed directly, running all the test methods.
How to Run the Tests
Save the code to a file, for example, test_sort.py.
Run the file using Python:
bash
python test_sort.py
This will execute all the defined tests, showing the results in the terminal. If all tests pass, it confirms that the sort_by_field function works as expected for the given cases.