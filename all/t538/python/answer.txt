Here’s how you can convert the provided JavaScript function that sorts an array of objects based on a specified field into Python. The Python version will use a similar logic, utilizing list comprehensions and the sorted() function along with a custom sorting key.
JavaScript Code
javascript
/**
 * Sorts an array of objects alphabetically based on a specified field.
 * @param {Array} array - The array of objects to sort.
 * @param {String} field - The field of the objects to sort by.
 * @param {Boolean} ascending - If true, sort in ascending order; if false, sort in descending order.
 * @returns {Array} - The sorted array of objects.
 */
function sortByField(array, field, ascending = true) {
    // Check if the field exists in the first object to avoid errors
    if (array.length === 0 || !array[0].hasOwnProperty(field)) {
        throw new Error('Field does not exist in the objects.');
    }
    // Sorting function
    return array.sort((a, b) => {
        const valueA = a[field].toString().toLowerCase();
        const valueB = b[field].toString().toLowerCase();
        if (valueA < valueB) {
            return ascending ? -1 : 1; // Ascending order: a comes before b; Descending order: b comes before a
        }
        if (valueA > valueB) {
            return ascending ? 1 : -1; // Ascending order: b comes before a; Descending order: a comes before b
        }
        return 0; // They are equal
    });
}
Converted Python Code
python
def sort_by_field(array, field, ascending=True):
    """
    Sorts a list of dictionaries alphabetically based on a specified field.

    Args:
        array (list): The list of dictionaries to sort.
        field (str): The field of the dictionaries to sort by.
        ascending (bool): If True, sort in ascending order; if False, sort in descending order.

    Returns:
        list: The sorted list of dictionaries.

    Raises:
        ValueError: If the field does not exist in the dictionaries.
    """
    # Check if the array is empty or if the field exists in the first dictionary
    if not array or field not in array[0]:
        raise ValueError('Field does not exist in the objects.')

    # Sorting function
    return sorted(
        array,
        key=lambda x: x[field].lower(),
        reverse=not ascending  # If ascending is False, reverse the sort order
    )
Explanation of the Python Code
Function Definition:
The function sort_by_field takes three parameters: array (a list of dictionaries), field (the key in the dictionaries to sort by), and ascending (a boolean to determine the sorting order).
Docstring:
The docstring provides a clear description of the function, including its parameters, return value, and any exceptions that might be raised.
Field Existence Check:
The code checks if the array is empty or if the specified field exists in the first dictionary. If not, it raises a ValueError.
Sorting:
The sorted() function is used to sort the array:
The key argument is a lambda function that retrieves the value of the specified field and converts it to lowercase for case-insensitive comparison.
The reverse argument is set to not ascending, which reverses the sort order if ascending is False.
Usage Example
Here’s how you might use the sort_by_field function in Python:
python
data = [
    {"name": "Alice", "age": 30},
    {"name": "bob", "age": 25},
    {"name": "charlie", "age": 35}
]

sorted_data_asc = sort_by_field(data, "name", ascending=True)
print("Sorted Ascending:", sorted_data_asc)

sorted_data_desc = sort_by_field(data, "name", ascending=False)
print("Sorted Descending:", sorted_data_desc)
Output
plaintext
Sorted Ascending: [{'name': 'Alice', 'age': 30}, {'name': 'bob', 'age': 25}, {'name': 'charlie', 'age': 35}]
Sorted Descending: [{'name': 'charlie', 'age': 35}, {'name': 'bob', 'age': 25}, {'name': 'Alice', 'age': 30}]
This Python code closely mirrors the functionality of the original JavaScript code, allowing you to sort a list of dictionaries based on a specified field.