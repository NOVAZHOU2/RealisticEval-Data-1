Here is your JavaScript function converted into TypeScript:

```typescript
/**
 * Sorts an array of objects alphabetically based on a specified field.
 *
 * @param {Array<T>} array - The array of objects to sort.
 * @param {keyof T} field - The field of the objects to sort by.
 * @param {boolean} [ascending=true] - If true, sort in ascending order; if false, sort in descending order.
 * @returns {Array<T>} - The sorted array of objects.
 */
function sortByField<T>(array: Array<T>, field: keyof T, ascending: boolean = true): Array<T> {
    return array.sort((a, b) => {
        const valueA = a[field];
        const valueB = b[field];

        if (typeof valueA === 'string' && typeof valueB === 'string') {
            if (ascending) {
                return valueA.localeCompare(valueB);
            } else {
                return valueB.localeCompare(valueA);
            }
        }

        if (ascending) {
            return valueA < valueB ? -1 : 1;
        } else {
            return valueA > valueB ? -1 : 1;
        }
    });
}
```

In this version, I've added type annotations for each parameter and the return type. This makes it clear what types are expected and what type will be returned from the function.

The `keyof T` syntax means that `field` can be any property name of the object type `T`. And `<T>` before the function signature allows you to specify the type of the objects in the array when calling the function. 

Also note that I've used the `localeCompare()` method for string comparison which works better with non-English characters.