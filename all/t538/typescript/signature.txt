Sure, here is the TypeScript version of your JavaScript function with the same comments:

```typescript
/**
 * Sorts an array of objects alphabetically based on a specified field.
 *
 * @param {Array<T>} array - The array of objects to sort.
 * @param {keyof T} field - The field of the objects to sort by.
 * @param {boolean} [ascending=true] - If true, sort in ascending order; if false, sort in descending order.
 * @returns {Array<T>} - The sorted array of objects.
 */
function sortByField<T>(array: T[], field: keyof T, ascending: boolean = true): T[] {
    // Implementation of the sorting logic goes here
}
```

### Explanation:
- **Type Parameters**: 
  - `T` is a type parameter that represents the type of objects in the array. This allows the function to work with any type of object.

- **Generic Array Type**:
  - `array: T[]` specifies that `array` is an array of objects of type `T`.

- **Keyof Operator**:
  - `field: keyof T` ensures that `field` is a valid property name of the objects in the array.

- **Optional Parameter**:
  - `[ascending: boolean = true]` makes `ascending` optional and defaults to `true`.

This TypeScript version maintains the functionality and intent of your original JavaScript function while providing type safety.