Sure! Below is the TypeScript version of your JavaScript function with the same comments:

```typescript
/**
 * Sorts an array of objects alphabetically based on a specified field.
 *
 * @param {Array<T>} array - The array of objects to sort.
 * @param {keyof T} field - The field of the objects to sort by.
 * @param {boolean} [ascending=true] - If true, sort in ascending order; if false, sort in descending order.
 * @returns {Array<T>} - The sorted array of objects.
 */
function sortByField<T>(array: Array<T>, field: keyof T, ascending: boolean = true): Array<T> {
    return array.sort((a, b) => {
        const valueA = a[field];
        const valueB = b[field];

        if (valueA < valueB) {
            return ascending ? -1 : 1;
        } else if (valueA > valueB) {
            return ascending ? 1 : -1;
        } else {
            return 0;
        }
    });
}
```

### Explanation:
- **Generics (`<T>`)**: The `sortByField` function now uses a generic type parameter `T` to represent the type of objects in the array. This allows for more flexibility and type safety.
- **Type Annotations**: 
  - `array: Array<T>` specifies that the `array` parameter should be an array of objects of type `T`.
  - `field: keyof T` ensures that the `field` parameter must be one of the keys of the objects in the array.
  - `ascending: boolean = true` makes the `ascending` parameter optional and defaults to `true`.

This TypeScript version maintains the functionality and readability of the original JavaScript code while providing better type checking and autocompletion support.