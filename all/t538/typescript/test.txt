Sure! Here's how you can convert your JavaScript Jest test case to TypeScript and use `describe` blocks:

```typescript
import { sortByField } from './yourModule'; // Adjust the import path accordingly

describe('sortByField function', () => {
  it('should sort an array of objects alphabetically in ascending order', () => {
    const array = [
      { name: 'John' },
      { name: 'Alice' },
      { name: 'Bob' }
    ];
    const field = 'name';
    const expected = [
      { name: 'Alice' },
      { name: 'Bob' },
      { name: 'John' }
    ];

    expect(sortByField(array, field)).toEqual(expected);
  });

  it('should sort an array of objects alphabetically in descending order', () => {
    const array = [
      { name: 'John' },
      { name: 'Alice' },
      { name: 'Bob' }
    ];
    const field = 'name';
    const expected = [
      { name: 'John' },
      { name: 'Bob' },
      { name: 'Alice' }
    ];

    expect(sortByField(array, field, false)).toEqual(expected);
  });
});
```

### Explanation:
1. **Import Statement**: Ensure that you import the `sortByField` function from the appropriate module.
2. **Describe Block**: Use `describe` to group related tests together. In this case, all tests for the `sortByField` function are grouped under one `describe` block.
3. **It Blocks**: Each `it` block represents a single test case. The first test checks if the function sorts the array in ascending order, and the second test checks if it sorts the array in descending order.
4. **Expectations**: Use `expect` along with `.toEqual` to check if the output of `sortByField` matches the expected result.

Make sure that your `sortByField` function is correctly implemented in your TypeScript file. Here's a simple implementation:

```typescript
/**
 * Sorts an array of objects alphabetically based on a specified field.
 *
 * @param {Array} array - The array of objects to sort.
 * @param {string} field - The field of the objects to sort by.
 * @param {boolean} [ascending=true] - If true, sort in ascending order; if false, sort in descending order.
 * @returns {Array} - The sorted array of objects.
 */
export function sortByField<T>(array: T[], field: keyof T, ascending: boolean = true): T[] {
  return array.sort((a, b) => {
    const aValue = (a[field] as unknown as string).toLowerCase();
    const bValue = (b[field] as unknown as string).toLowerCase();

    if (aValue < bValue) {
      return ascending ? -1 : 1;
    }

    if (aValue > bValue) {
      return ascending ? 1 : -1;
    }

    return 0;
  });
}
```

This implementation assumes that the values being compared are strings and performs a case-insensitive sort. Adjust the type annotations and logic as needed for your specific use case.