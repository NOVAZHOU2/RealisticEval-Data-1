Sure! Below is the TypeScript version of your JavaScript Jest test case using `describe`:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Sorts an array of objects alphabetically based on a specified field.
 *
 * @param {Array} array - The array of objects to sort.
 * @param {string} field - The field of the objects to sort by.
 * @param {boolean} [ascending=true] - If true, sort in ascending order; if false, sort in descending order.
 * @returns {Array} - The sorted array of objects.
 */
function sortByField(array: any[], field: string, ascending: boolean = true): any[] {
    return array.sort((a, b) => {
        const aValue = a[field];
        const bValue = b[field];

        if (typeof aValue === 'string' && typeof bValue === 'string') {
            if (ascending) {
                return aValue.localeCompare(bValue);
            } else {
                return bValue.localeCompare(aValue);
            }
        }

        if (ascending) {
            return aValue - bValue;
        } else {
            return bValue - aValue;
        }
    });
}

describe('sortByField function', () => {
    it('should sort an array of objects alphabetically in ascending order', () => {
        const data = [
            { name: 'John', age: 30 },
            { name: 'Alice', age: 25 },
            { name: 'Bob', age: 35 }
        ];

        const sortedData = sortByField(data, 'name');

        expect(sortedData).toEqual([
            { name: 'Alice', age: 25 },
            { name: 'Bob', age: 35 },
            { name: 'John', age: 30 }
        ]);
    });

    it('should sort an array of objects alphabetically in descending order', () => {
        const data = [
            { name: 'John', age: 30 },
            { name: 'Alice', age: 25 },
            { name: 'Bob', age: 35 }
        ];

        const sortedData = sortByField(data, 'name', false);

        expect(sortedData).toEqual([
            { name: 'John', age: 30 },
            { name: 'Bob', age: 35 },
            { name: 'Alice', age: 25 }
        ]);
    });

    it('should sort an array of objects numerically in ascending order', () => {
        const data = [
            { name: 'John', age: 30 },
            { name: 'Alice', age: 25 },
            { name: 'Bob', age: 35 }
        ];

        const sortedData = sortByField(data, 'age');

        expect(sortedData).toEqual([
            { name: 'Alice', age: 25 },
            { name: 'John', age: 30 },
            { name: 'Bob', age: 35 }
        ]);
    });

    it('should sort an array of objects numerically in descending order', () => {
        const data = [
            { name: 'John', age: 30 },
            { name: 'Alice', age: 25 },
            { name: 'Bob', age: 35 }
        ];

        const sortedData = sortByField(data, 'age', false);

        expect(sortedData).toEqual([
            { name: 'Bob', age: 35 },
            { name: 'John', age: 30 },
            { name: 'Alice', age: 25 }
        ]);
    });
});
```

In this TypeScript version:
- I've added type annotations for the parameters and return value of the `sortByField` function.
- I've used the `@jest/globals` import to access the `describe`, `it`, and `expect` functions from Jest.
- I've included test cases that cover sorting strings and numbers both in ascending and descending order.

Make sure you have the necessary TypeScript and Jest setup in your project to run these tests.