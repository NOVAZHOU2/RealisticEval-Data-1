Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class is converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have the Catch2 library included in your project. You can download it from [here](https://github.com/catchorg/Catch2).

Hereâ€™s the equivalent C++ test class using Catch2:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <pugixml.hpp>
#include <map>
#include <string>
#include <sstream>

// Function to parse XAML data and extract key-value pairs
std::map<std::string, std::string> parse_xaml_to_dict(const std::string& xaml_data) {
    try {
        pugi::xml_document doc;
        pugi::xml_parse_result result = doc.load_string(xaml_data.c_str());
        if (!result) {
            std::cerr << "Error parsing the XAML data: " << result.description() << std::endl;
            return {};
        }

        std::map<std::string, std::string> result_dict;

        // Iterate through all 'String' elements in the XAML data
        for (pugi::xml_node string_element : doc.select_nodes("//String")) {
            const char* key = string_element.attribute("Key").value();
            if (key != nullptr && *key != '\0') {
                const char* text = string_element.child_value();
                if (text == nullptr || *text == '\0') {
                    result_dict[key] = "";
                } else {
                    result_dict[key] = text;
                }
            }
        }

        return result_dict;

    } catch (const pugi::xml_parse_error& e) {
        std::cerr << "Error parsing the XAML data: " << e.description() << std::endl;
        return {};
    }
}

TEST_CASE("Test parse_xaml_to_dict", "[parse_xaml_to_dict]") {
    SECTION("test_valid_strings") {
        std::string xaml_data = R"(<root>
                                     <String Key="Username">Alice</String>
                                     <String Key="Password">secret</String>
                                   </root>)";
        std::map<std::string, std::string> expected = {{"Username", "Alice"}, {"Password", "secret"}};
        std::map<std::string, std::string> result = parse_xaml_to_dict(xaml_data);
        REQUIRE(result == expected);
    }

    SECTION("test_missing_key_attribute") {
        std::string xaml_data = R"(<root>
                                     <String>Alice</String>
                                   </root>)";
        std::map<std::string, std::string> expected = {};
        std::map<std::string, std::string> result = parse_xaml_to_dict(xaml_data);
        REQUIRE(result == expected);
    }

    SECTION("test_no_string_tags") {
        std::string xaml_data = R"(<root>
                                     <Data>Some question</Data>
                                   </root>)";
        std::map<std::string, std::string> expected = {};
        std::map<std::string, std::string> result = parse_xaml_to_dict(xaml_data);
        REQUIRE(result == expected);
    }

    SECTION("test_nested_string_tags") {
        std::string xaml_data = R"(<root>
                                     <Container>
                                       <String Key="Username">Bob</String>
                                     </Container>
                                     <String Key="Location">Earth</String>
                                   </root>)";
        std::map<std::string, std::string> expected = {{"Username", "Bob"}, {"Location", "Earth"}};
        std::map<std::string, std::string> result = parse_xaml_to_dict(xaml_data);
        REQUIRE(result == expected);
    }
}
```

### Explanation:
1. **Header Files**: Includes necessary headers (`catch2/catch_test_macros.hpp`, `pugixml.hpp`, `map`, `string`, `sstream`).
2. **Function Definition**: Defines the function `parse_xaml_to_dict` which takes a string `xaml_data` and returns a `std::map<std::string, std::string>` containing the key-value pairs.
3. **Catch2 Test Suite**: Uses the `TEST_CASE` macro to define a test suite named "Test parse_xaml_to_dict".
4. **Sections**: Each section corresponds to a specific test case.
5. **Assertions**: Uses `REQUIRE` to check that the results match the expected values.
6. **Raw String Literals**: Uses raw string literals (`R"(...)"`) to define XML strings, making them easier to read and write.

This code ensures that the functionality and logic of the original Python unittest class are preserved while adhering to C++ syntax and conventions.