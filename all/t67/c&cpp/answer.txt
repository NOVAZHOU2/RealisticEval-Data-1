Certainly! Below is the equivalent C++ code that replicates the functionality of the provided Python script. This code uses the C++ Standard Library and the XML parsing library `pugixml` to achieve similar functionality. You will need to include the `pugixml` library in your project to use this code.

```cpp
#include <iostream>
#include <string>
#include <map>
#include <pugixml.hpp>

std::map<std::string, std::string> parse_xaml_to_dict(const std::string& xaml_file) {
    /**
     * Parse a XAML file and extract key-value pairs from 'String' elements.
     *
     * Args:
     * xaml_file (std::string): Path to the XAML file.
     *
     * Returns:
     * std::map<std::string, std::string>: A map containing the key-value pairs extracted from 'String' elements.
     */
    try {
        pugi::xml_document doc;
        if (!doc.load_file(xaml_file.c_str())) {
            std::cerr << "Error: The file " << xaml_file << " does not exist." << std::endl;
            return {};
        }

        // Dictionary to hold the key-value pairs
        std::map<std::string, std::string> result_dict;

        // Iterate through all 'String' elements in the XAML file
        for (pugi::xml_node string_element : doc.select_nodes("//String")) {
            const char* key = string_element.attribute("Key").value();
            if (key != nullptr && *key != '\0') {
                const char* text = string_element.child_value();
                if (text == nullptr || *text == '\0') {
                    result_dict[key] = "";
                } else {
                    result_dict[key] = text;
                }
            }
        }

        return result_dict;

    } catch (const pugi::xml_parse_error& e) {
        std::cerr << "Error parsing the XAML file: " << e.description() << std::endl;
        return {};
    }
}

int main() {
    std::string xaml_file = "path/to/your/xaml/file.xaml";
    auto result = parse_xaml_to_dict(xaml_file);

    for (const auto& pair : result) {
        std::cout << "Key: " << pair.first << ", Value: " << pair.second << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**: Includes necessary headers (`iostream`, `string`, `map`, `pugixml`).
2. **Function Definition**: Defines the function `parse_xaml_to_dict` which takes a string path to the XAML file and returns a `std::map<std::string, std::string>` containing the key-value pairs.
3. **XML Parsing**: Uses `pugixml` to load and parse the XML file.
4. **Error Handling**: Handles parsing errors and file existence checks.
5. **Iteration and Extraction**: Iterates through all `String` elements using XPath-like queries and extracts key-value pairs.
6. **Main Function**: Demonstrates how to call the `parse_xaml_to_dict` function and prints the resulting key-value pairs.

Make sure you have the `pugixml` library installed and included in your project to compile and run this code.