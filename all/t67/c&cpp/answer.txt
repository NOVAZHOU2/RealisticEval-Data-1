Converting Python code to C++ involves several considerations, including handling file I/O, string parsing, and data structures. Below is an example of how you might implement the `parse_xaml_to_dict` function in C++. This example assumes that the XAML file contains XML-like structure with `<String>` elements and that each `<String>` element has a `key` attribute and a text content representing its value.

### C++ Code

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <map>
#include <string>

std::map<std::string, std::string> parseXamlToDict(const std::string& xamlFile) {
    std::map<std::string, std::string> result;
    std::ifstream file(xamlFile);

    if (!file.is_open()) {
        std::cerr << "Failed to open file: " << xamlFile << std::endl;
        return result;
    }

    std::string line;
    while (getline(file, line)) {
        size_t start = line.find("<String key=\"");
        if (start != std::string::npos) {
            // Find the end of the key attribute
            size_t endKey = line.find("\"", start + 10);
            if (endKey != std::string::npos) {
                std::string key = line.substr(start + 10, endKey - start - 10);

                // Find the end of the String element
                size_t endElement = line.find("</String>");
                if (endElement != std::string::npos) {
                    std::string value = line.substr(endKey + 2, endElement - endKey - 2);
                    result[key] = value;
                }
            }
        }
    }

    file.close();
    return result;
}

int main() {
    std::string xamlFilePath = "path/to/your/xaml/file.xaml";
    auto dict = parseXamlToDict(xamlFilePath);

    for (const auto& pair : dict) {
        std::cout << pair.first << ": " << pair.second << std::endl;
    }

    return 0;
}
```

### Explanation

1. **File Handling**: The `std::ifstream` class is used to read the file line by line.
2. **String Parsing**: The `find` method is used to locate the start and end positions of the `key` attribute and the content of the `<String>` element.
3. **Data Structure**: The results are stored in a `std::map`, which is similar to Python's dictionary.

### Notes

- This example assumes that the XAML file is well-formed and does not handle all possible edge cases or errors.
- For more complex XML parsing, consider using libraries like `pugixml` or `tinyxml`.
- Error handling can be improved by adding checks for invalid input and providing meaningful error messages.

This should give you a good starting point for converting your Python code to C++.