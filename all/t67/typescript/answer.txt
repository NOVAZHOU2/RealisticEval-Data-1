Sure! Below is the equivalent TypeScript code for your Python function:

```typescript
import * as fs from 'fs';
import * as path from 'path';

interface Dictionary {
  [key: string]: string;
}

function parseXamlToDict(xamlFilePath: string): Dictionary {
  /**
   * Parses the XAML file, extracts the key-value pairs within the String element, and returns the model_answer_result in a dictionary
   * @param {string} xamlFilePath - Path to the XAML file.
   * @returns {Dictionary} - A dictionary containing the key-value pairs extracted from 'String' elements.
   */
  
  // Read the content of the XAML file
  const xamlContent = fs.readFileSync(xamlFilePath, 'utf8');

  // Regular expression to match <String> tags with key-value pairs
  const regex = /<String\s+Key="([^"]+)"\s*Value="([^"]+)"/g;

  let match;
  const result: Dictionary = {};

  // Extract key-value pairs using the regular expression
  while ((match = regex.exec(xamlContent)) !== null) {
    const key = match[1];
    const value = match[2];
    result[key] = value;
  }

  return result;
}
```

### Explanation:
1. **Importing Modules**: We use `fs` for file system operations and `path` for handling file paths.
2. **Interface Definition**: We define an interface `Dictionary` to represent the structure of the returned object.
3. **Function Definition**: The function `parseXamlToDict` takes a file path as input and returns a dictionary.
4. **Reading File Content**: We read the content of the XAML file using `fs.readFileSync`.
5. **Regular Expression**: We use a regular expression to match `<String>` tags and extract the `Key` and `Value` attributes.
6. **Extracting Key-Value Pairs**: We loop through all matches found by the regular expression and store them in the result dictionary.

This TypeScript code should perform the same functionality as your original Python function.