Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will convert each test case and ensure that the functionality and logic are preserved.

### Python Code:
```python
import unittest
import xml.etree.ElementTree as ET
from io import StringIO

class TestParseXamlToDict(unittest.TestCase):
    def test_valid_strings(self):
        xaml_data = """<root>
                         <String Key="Username">Alice</String>
                         <String Key="Password">secret</String>
                       </root>"""
        xaml_input = StringIO(xaml_data)
        expected = {'Username': 'Alice', 'Password': 'secret'}
        result = parse_xaml_to_dict(xaml_input)
        self.assertEqual(result, expected)

    def test_missing_key_attribute(self):
        xaml_data = """<root>
                         <String>Alice</String>
                       </root>"""
        xaml_input = StringIO(xaml_data)
        expected = {}
        result = parse_xaml_to_dict(xaml_input)
        self.assertEqual(result, expected)

    def test_no_string_tags(self):
        xaml_data = """<root>
                         <Data>Some question</Data>
                       </root>"""
        xaml_input = StringIO(xaml_data)
        expected = {}
        result = parse_xaml_to_dict(xaml_input)
        self.assertEqual(result, expected)

    def test_nested_string_tags(self):
        xaml_data = """<root>
                         <Container>
                           <String Key="Username">Bob</String>
                         </Container>
                         <String Key="Location">Earth</String>
                       </root>"""
        xaml_input = StringIO(xaml_data)
        expected = {'Username': 'Bob', 'Location': 'Earth'}
        result = parse_xaml_to_dict(xaml_input)
        self.assertEqual(result, expected)
```

### JavaScript Code with Jest Testing Framework:

First, ensure you have Jest installed in your project:

```bash
npm install --save-dev jest
```

Next, create a test file (e.g., `parseXamlToDict.test.js`) and include the necessary imports and setup:

```javascript
const { parseXamlToDict } = require('./parseXamlToDict'); // Import the function to test
const { parse } = require('xml2js');

describe('TestParseXamlToDict', () => {
    it('should correctly parse valid strings', () => {
        const xamlData = `
            <root>
                <String Key="Username">Alice</String>
                <String Key="Password">secret</String>
            </root>
        `;
        const expected = { Username: 'Alice', Password: 'secret' };
        const result = parseXamlToDict(xamlData);
        expect(result).toEqual(expected);
    });

    it('should handle missing key attribute', () => {
        const xamlData = `
            <root>
                <String>Alice</String>
            </root>
        `;
        const expected = {};
        const result = parseXamlToDict(xamlData);
        expect(result).toEqual(expected);
    });

    it('should handle no string tags', () => {
        const xamlData = `
            <root>
                <Data>Some question</Data>
            </root>
        `;
        const expected = {};
        const result = parseXamlToDict(xamlData);
        expect(result).toEqual(expected);
    });

    it('should correctly parse nested string tags', () => {
        const xamlData = `
            <root>
                <Container>
                    <String Key="Username">Bob</String>
                </Container>
                <String Key="Location">Earth</String>
            </root>
        `;
        const expected = { Username: 'Bob', Location: 'Earth' };
        const result = parseXamlToDict(xamlData);
        expect(result).toEqual(expected);
    });
});

// parseXamlToDict.js (The implementation file)
const fs = require('fs');
const xml2js = require('xml2js');

function parseXamlToDict(xamlData) {
    try {
        const parser = new xml2js.Parser();
        parser.parseString(xamlData, (err, result) => {
            if (err) {
                console.error(`Error parsing the XAML file: ${err}`);
                return {};
            }

            const resultDict = {};

            if (result && result.root && Array.isArray(result.root.String)) {
                result.root.String.forEach((stringElement) => {
                    const key = stringElement.$.Key;
                    if (key) {
                        if (!stringElement._ || stringElement._ === '') {
                            resultDict[key] = '';
                        } else {
                            resultDict[key] = stringElement._;
                        }
                    }
                });
            }

            return resultDict;
        });
    } catch (error) {
        console.error(`Error parsing the XAML file: ${error.message}`);
        return {};
    }
}

module.exports = { parseXamlToDict };
```

### Explanation:
1. **Imports**: 
   - `parseXamlToDict` is imported from the implementation file.
   - `xml2js` is used for parsing XML content.

2. **Test Suite**:
   - Each test case is defined using `it` blocks.
   - Assertions are made using `expect` and `toEqual`.

3. **Implementation**:
   - The `parseXamlToDict` function reads the XML data and parses it using `xml2js`.
   - It extracts the key-value pairs from the `'String'` elements and returns them in a dictionary.

4. **Error Handling**:
   - Errors during parsing are caught and logged, returning an empty object `{}`.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.