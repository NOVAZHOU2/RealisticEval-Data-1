Certainly! Below is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

### Java Code

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import java.io.ByteArrayInputStream;
import java.io.IOException;

public class Tester {

    /**
     * Parses a XAML file and extracts key-value pairs from 'String' elements.
     *
     * @param xamlFile Path to the XAML file.
     * @return A map containing the key-value pairs extracted from 'String' elements.
     */
    private static Map<String, String> parseXamlToDict(String xamlFile) {
        try {
            // Parse the XAML file
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(new ByteArrayInputStream(xamlFile.getBytes()));
            doc.getDocumentElement().normalize();

            // Map to hold the key-value pairs
            Map<String, String> resultMap = new HashMap<>();

            // Iterate through all 'String' elements in the XAML file
            NodeList stringElements = doc.getElementsByTagName("String");
            for (int i = 0; i < stringElements.getLength(); i++) {
                Element element = (Element) stringElements.item(i);
                String key = element.getAttribute("Key");
                if (!key.isEmpty()) {
                    String value = element.getTextContent();
                    resultMap.put(key, value == null ? "" : value.trim());
                }
            }

            return resultMap;

        } catch (ParserConfigurationException | SAXException | IOException e) {
            System.out.println("Error parsing the XAML file: " + e.getMessage());
            return new HashMap<>();
        }
    }

    @Test
    public void testValidStrings() {
        String xamlData = "<root>\n" +
                          "  <String Key=\"Username\">Alice</String>\n" +
                          "  <String Key=\"Password\">secret</String>\n" +
                          "</root>";
        Map<String, String> expected = new HashMap<>();
        expected.put("Username", "Alice");
        expected.put("Password", "secret");

        Map<String, String> result = parseXamlToDict(xamlData);
        assertEquals(expected, result);
    }

    @Test
    public void testMissingKeyAttribute() {
        String xamlData = "<root>\n" +
                          "  <String>Alice</String>\n" +
                          "</root>";
        Map<String, String> expected = new HashMap<>();

        Map<String, String> result = parseXamlToDict(xamlData);
        assertEquals(expected, result);
    }

    @Test
    public void testNoStringTags() {
        String xamlData = "<root>\n" +
                          "  <Data>Some question</Data>\n" +
                          "</root>";
        Map<String, String> expected = new HashMap<>();

        Map<String, String> result = parseXamlToDict(xamlData);
        assertEquals(expected, result);
    }

    @Test
    public void testNestedStringTags() {
        String xamlData = "<root>\n" +
                          "  <Container>\n" +
                          "    <String Key=\"Username\">Bob</String>\n" +
                          "  </Container>\n" +
                          "  <String Key=\"Location\">Earth</String>\n" +
                          "</root>";
        Map<String, String> expected = new HashMap<>();
        expected.put("Username", "Bob");
        expected.put("Location", "Earth");

        Map<String, String> result = parseXamlToDict(xamlData);
        assertEquals(expected, result);
    }
}
```

### Explanation:
1. **Package and Class Declaration**: The Java test class is placed in the `org.real.temp` package and named `Tester`.
2. **JUnit Annotations**: The `@Test` annotation is used to mark each test method.
3. **JUnit Assertions**: The `assertEquals` method from JUnit is used to assert the expected results.
4. **XML Parsing**: The `parseXamlToDict` method is defined to parse the XAML data and extract key-value pairs.
5. **Test Methods**:
   - `testValidStrings`: Tests valid strings with keys and values.
   - `testMissingKeyAttribute`: Tests missing key attributes.
   - `testNoStringTags`: Tests no `String` tags present.
   - `testNestedStringTags`: Tests nested `String` tags.

This Java code preserves the functionality and logic of the original Python test class while adhering to Java's syntax and best practices.