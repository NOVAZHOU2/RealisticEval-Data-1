Certainly! Below is the equivalent TypeScript code for the provided Python function. We will use TypeScript along with the `numpy` library (which can be replaced with an equivalent library like `mathjs` or `ndarray` if `numpy` is not available in the TypeScript environment).

First, ensure you have the necessary dependencies installed:
```sh
npm install mathjs
```

Here is the TypeScript code:

```typescript
import { Matrix } from 'mathjs';

/**
 * Scale the point cloud by a given factor.
 *
 * @param pointCloud - A N x 3 matrix representing the 3D point cloud.
 * @param scaleFactor - A number representing the scaling factor.
 * @returns A N x 3 matrix of the scaled point cloud.
 */
function scalePointCloud(pointCloud: Matrix, scaleFactor: number): Matrix {
    // Ensure pointCloud is a matrix
    pointCloud = Matrix(pointCloud);

    // Validate input shape
    const shape = pointCloud.size();
    if (shape.length !== 2 || shape[1] !== 3) {
        throw new Error('pointCloud must be a 2D array with shape (N, 3)');
    }

    // Scale the point cloud by the given factor
    const scaledPointCloud = pointCloud.multiply(scaleFactor);

    return scaledPointCloud;
}

// Example usage
const examplePointCloud = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];

const scaleFactor = 2;

try {
    const scaledPointCloud = scalePointCloud(examplePointCloud, scaleFactor);
    console.log(scaledPointCloud.toString());
} catch (error) {
    console.error(error);
}
```

### Explanation:
1. **Importing Libraries**: We import the `Matrix` class from the `mathjs` library to handle the matrix operations.
2. **Function Definition**: The `scalePointCloud` function takes a `Matrix` object and a `number` as parameters and returns a `Matrix` object.
3. **Validation**: We validate the shape of the input matrix to ensure it is a 2D array with shape `(N, 3)`.
4. **Scaling**: We multiply the point cloud matrix by the scaling factor using the `multiply` method provided by `mathjs`.

This TypeScript code maintains the same functionality and logic as the original Python code, adapting it to TypeScript's static type system and using `mathjs` for matrix operations.