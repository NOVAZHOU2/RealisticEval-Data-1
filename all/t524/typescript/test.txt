Certainly! Below is the equivalent TypeScript test class using Jest. The provided Python unittest class will be converted to a Jest test suite, ensuring that the functionality and logic of the tests are preserved. Type annotations and Jest assertions will be used appropriately.

### TypeScript Code with Jest Tests

#### Step 1: Install Jest and Required Dependencies
First, ensure you have Jest and the necessary dependencies installed:
```sh
npm install --save-dev jest @types/jest
npm install mathjs
```

#### Step 2: TypeScript and Jest Test Class

Here is the TypeScript code with Jest tests:

```typescript
import { Matrix } from 'mathjs';

/**
 * Scale the point cloud by a given factor.
 *
 * @param pointCloud - A N x 3 matrix representing the 3D point cloud.
 * @param scaleFactor - A number representing the scaling factor.
 * @returns A N x 3 matrix of the scaled point cloud.
 */
function scalePointCloud(pointCloud: Matrix, scaleFactor: number): Matrix {
    // Ensure pointCloud is a matrix
    pointCloud = Matrix(pointCloud);

    // Validate input shape
    const shape = pointCloud.size();
    if (shape.length !== 2 || shape[1] !== 3) {
        throw new Error('pointCloud must be a 2D array with shape (N, 3)');
    }

    // Scale the point cloud by the given factor
    const scaledPointCloud = pointCloud.multiply(scaleFactor);

    return scaledPointCloud;
}

describe('TestScalePointCloud', () => {
    it('test simple scaling', () => {
        const pointCloud = Matrix([[1.0, 2.0, 3.0]]);
        const scaleFactor = 2.0;
        const expectedOutput = Matrix([[2.0, 4.0, 6.0]]);
        expect(scalePointCloud(pointCloud, scaleFactor)).toEqual(expectedOutput);
    });

    it('test multiple points scaling', () => {
        const pointCloud = Matrix([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]);
        const scaleFactor = 0.5;
        const expectedOutput = Matrix([[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]);
        expect(scalePointCloud(pointCloud, scaleFactor)).toEqual(expectedOutput);
    });

    it('test zero scaling', () => {
        const pointCloud = Matrix([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]);
        const scaleFactor = 0.0;
        const expectedOutput = Matrix([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]);
        expect(scalePointCloud(pointCloud, scaleFactor)).toEqual(expectedOutput);
    });

    it('test negative scaling', () => {
        const pointCloud = Matrix([[1.0, 2.0, 3.0]]);
        const scaleFactor = -2.0;
        const expectedOutput = Matrix([[-2.0, -4.0, -6.0]]);
        expect(scalePointCloud(pointCloud, scaleFactor)).toEqual(expectedOutput);
    });
});

// Example usage
const examplePointCloud = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];

const scaleFactor = 2;

try {
    const scaledPointCloud = scalePointCloud(examplePointCloud, scaleFactor);
    console.log(scaledPointCloud.toString());
} catch (error) {
    console.error(error);
}
```

### Explanation:

1. **Importing Libraries**:
   - We import the `Matrix` class from the `mathjs` library to handle matrix operations.

2. **Function Definition**:
   - The `scalePointCloud` function takes a `Matrix` object and a `number` as parameters and returns a `Matrix` object.
   - The function signature includes JSDoc-style documentation comments that describe the parameters and return type.

3. **Validation**:
   - We validate the shape of the input matrix to ensure it is a 2D array with shape `(N, 3)`.

4. **Scaling**:
   - We multiply the point cloud matrix by the scaling factor using the `multiply` method provided by `mathjs`.

5. **Jest Test Suite**:
   - The `describe` block defines a test suite named `TestScalePointCloud`.
   - Each `it` block represents a test case with a descriptive name.
   - Jest assertions (`expect`) are used to verify the correctness of the function.

### Jest Assertions:
- The `expect` function is used with `toEqual` to compare the actual output with the expected output.

### Running the Tests:
To run the Jest tests, execute the following command:
```sh
npx jest
```

This TypeScript code preserves the original functionality and structure of the Python unittest class while adapting it to Jest's testing framework.