To convert the provided Python unittest test class into a C++ Catch2 test case, we need to follow these steps:

1. Include the necessary headers for Catch2 and Eigen (for handling arrays).
2. Define the `scale_point_cloud` function in C++.
3. Write the Catch2 test cases to verify the functionality of the `scale_point_cloud` function.

Here's how you can do it:

### Step 1: Include Necessary Headers
```cpp
#include <catch2/catch.hpp>
#include <Eigen/Dense>
```

### Step 2: Define the `scale_point_cloud` Function
```cpp
Eigen::MatrixXd scale_point_cloud(const Eigen::MatrixXd& point_cloud, double scale_factor) {
    // Create a new matrix to store the scaled point cloud
    Eigen::MatrixXd scaled_point_cloud = point_cloud * scale_factor;
    return scaled_point_cloud;
}
```

### Step 3: Write Catch2 Test Cases
```cpp
TEST_CASE("Scale Point Cloud", "[scaling]") {
    // Test case with a single point
    Eigen::MatrixXd point_cloud_1(1, 3);
    point_cloud_1 << 1.0, 2.0, 3.0;
    double scale_factor_1 = 2.0;
    Eigen::MatrixXd expected_result_1(1, 3);
    expected_result_1 << 2.0, 4.0, 6.0;

    REQUIRE(scale_point_cloud(point_cloud_1, scale_factor_1).isApprox(expected_result_1));

    // Test case with multiple points
    Eigen::MatrixXd point_cloud_2(2, 3);
    point_cloud_2 << 1.0, 2.0, 3.0,
                      4.0, 5.0, 6.0;
    double scale_factor_2 = 0.5;
    Eigen::MatrixXd expected_result_2(2, 3);
    expected_result_2 << 0.5, 1.0, 1.5,
                         2.0, 2.5, 3.0;

    REQUIRE(scale_point_cloud(point_cloud_2, scale_factor_2).isApprox(expected_result_2));
}
```

### Full Code
Here is the complete code combining all parts:

```cpp
#include <catch2/catch.hpp>
#include <Eigen/Dense>

// Function to scale a point cloud
Eigen::MatrixXd scale_point_cloud(const Eigen::MatrixXd& point_cloud, double scale_factor) {
    // Create a new matrix to store the scaled point cloud
    Eigen::MatrixXd scaled_point_cloud = point_cloud * scale_factor;
    return scaled_point_cloud;
}

TEST_CASE("Scale Point Cloud", "[scaling]") {
    // Test case with a single point
    Eigen::MatrixXd point_cloud_1(1, 3);
    point_cloud_1 << 1.0, 2.0, 3.0;
    double scale_factor_1 = 2.0;
    Eigen::MatrixXd expected_result_1(1, 3);
    expected_result_1 << 2.0, 4.0, 6.0;

    REQUIRE(scale_point_cloud(point_cloud_1, scale_factor_1).isApprox(expected_result_1));

    // Test case with multiple points
    Eigen::MatrixXd point_cloud_2(2, 3);
    point_cloud_2 << 1.0, 2.0, 3.0,
                      4.0, 5.0, 6.0;
    double scale_factor_2 = 0.5;
    Eigen::MatrixXd expected_result_2(2, 3);
    expected_result_2 << 0.5, 1.0, 1.5,
                         2.0, 2.5, 3.0;

    REQUIRE(scale_point_cloud(point_cloud_2, scale_factor_2).isApprox(expected_result_2));
}
```

This C++ code uses Catch2 for testing and Eigen for matrix operations. The `scale_point_cloud` function scales a given point cloud by a specified factor, and the test cases check if the function works correctly for both single and multiple points.