Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation into C++ standards.

### C++ Code

```cpp
#include <iostream>
#include <Eigen/Dense>
#include <stdexcept>

// Function to scale a point cloud by a given factor
/**
 * Scale the point cloud by a given factor.
 *
 * @param pointCloud A N x 3 Eigen matrix representing the 3D point cloud.
 * @param scaleFactor A double representing the scaling factor.
 * @return An N x 3 Eigen matrix of the scaled point cloud.
 */
Eigen::MatrixXd scalePointCloud(const Eigen::MatrixXd& pointCloud, double scaleFactor) {
    // Validate input shape
    if (pointCloud.cols() != 3) {
        throw std::invalid_argument("pointCloud must be a 2D array with shape (N, 3)");
    }

    // Scale the point cloud by the given factor
    Eigen::MatrixXd scaledPointCloud = pointCloud * scaleFactor;

    return scaledPointCloud;
}

int main() {
    try {
        // Example usage
        Eigen::MatrixXd pointCloud(4, 3);
        pointCloud << 1, 2, 3,
                      4, 5, 6,
                      7, 8, 9,
                      10, 11, 12;

        double scaleFactor = 2.0;

        Eigen::MatrixXd scaledPointCloud = scalePointCloud(pointCloud, scaleFactor);

        std::cout << "Scaled Point Cloud:\n" << scaledPointCloud << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `<iostream>`: For basic input/output operations.
   - `<Eigen/Dense>`: For using Eigen's dense matrix operations.
   - `<stdexcept>`: For throwing exceptions.

2. **Function Documentation**:
   - The Python docstring is converted into a multi-line comment block using `/* */` in C++.
   - The arguments and return types are documented using `@param` and `@return`.

3. **Function Definition**:
   - `scalePointCloud`: This function takes a `Eigen::MatrixXd` (representing the point cloud) and a `double` (scaling factor) as inputs.
   - It checks if the point cloud has the correct shape (i.e., 2D array with 3 columns).
   - If the shape is incorrect, it throws a `std::invalid_argument`.
   - Otherwise, it scales the point cloud by the given factor and returns the result.

4. **Main Function**:
   - An example usage of the `scalePointCloud` function is provided.
   - The point cloud is initialized with some values.
   - The scaling factor is set to `2.0`.
   - The scaled point cloud is printed to the console.

This code preserves the original functionality and structure of the Python code while adhering to C++ standards and practices.