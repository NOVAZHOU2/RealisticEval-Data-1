Sure! Below is the equivalent C++ code for the provided Python function `scale_point_cloud`. This code uses the Eigen library for handling matrices and vectors, which is a popular choice for numerical computations in C++.

First, make sure you have the Eigen library installed. You can install it via your package manager or build it from source if needed.

Here's the C++ code:

```cpp
#include <Eigen/Dense>
#include <vector>

Eigen::MatrixXd scalePointCloud(const Eigen::MatrixXd& pointCloud, double scaleFactor) {
    // Ensure the input matrix has at least 3 columns (x, y, z coordinates)
    if (pointCloud.cols() != 3) {
        throw std::invalid_argument("Input point cloud must be an Nx3 matrix.");
    }

    // Create a diagonal scaling matrix
    Eigen::DiagonalMatrix<double, Eigen::Dynamic> scaleMat(3);
    scaleMat.diagonal() << scaleFactor, scaleFactor, scaleFactor;

    // Scale the point cloud
    Eigen::MatrixXd scaledPointCloud = scaleMat * pointCloud;

    return scaledPointCloud;
}
```

### Explanation:
1. **Include Eigen Library**: The Eigen library provides classes for handling matrices and vectors efficiently.
2. **Function Definition**: The function `scalePointCloud` takes an `Eigen::MatrixXd` (which represents a dynamic-size matrix with double precision elements) and a `double` as inputs and returns an `Eigen::MatrixXd`.
3. **Validation**: The function checks if the input matrix has exactly 3 columns (representing x, y, and z coordinates). If not, it throws an `std::invalid_argument`.
4. **Scaling Matrix**: An `Eigen::DiagonalMatrix` is used to create a diagonal scaling matrix where all diagonal elements are set to the `scaleFactor`.
5. **Scaling Operation**: The point cloud is multiplied by the scaling matrix to get the scaled point cloud.

### Usage Example:
Here's how you might use this function in a complete program:

```cpp
#include <iostream>

int main() {
    // Create a sample point cloud
    Eigen::MatrixXd pointCloud(4, 3); // 4 points, each with 3 coordinates
    pointCloud.row(0) << 1.0, 2.0, 3.0;
    pointCloud.row(1) << 4.0, 5.0, 6.0;
    pointCloud.row(2) << 7.0, 8.0, 9.0;
    pointCloud.row(3) << 10.0, 11.0, 12.0;

    // Scaling factor
    double scaleFactor = 2.0;

    // Scale the point cloud
    Eigen::MatrixXd scaledPointCloud = scalePointCloud(pointCloud, scaleFactor);

    // Print the scaled point cloud
    std::cout << "Scaled Point Cloud:\n" << scaledPointCloud << std::endl;

    return 0;
}
```

This example creates a simple 4x3 point cloud and scales it by a factor of 2.0, then prints the scaled point cloud. Make sure to link against the Eigen library when compiling your C++ program.