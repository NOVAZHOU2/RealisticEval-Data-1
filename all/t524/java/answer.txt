Sure, here's how you can convert the provided Python code into Java:

```java
package org.real.temp;

import java.util.Arrays;

public class Answer {

    /**
     * Scale the point cloud by a given factor.
     *
     * @param pointCloud A N x 3 array representing the 3D point cloud.
     * @param scaleFactor A double representing the scaling factor.
     * @return A N x 3 array of the scaled point cloud.
     */
    public static double[][] scalePointCloud(double[][] pointCloud, double scaleFactor) {
        int n = pointCloud.length;
        double[][] scaledPointCloud = new double[n][3];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                scaledPointCloud[i][j] = pointCloud[i][j] * scaleFactor;
            }
        }

        return scaledPointCloud;
    }

    // Example usage
    public static void main(String[] args) {
        double[][] pointCloud = {
            {1.0, 2.0, 3.0},
            {4.0, 5.0, 6.0}
        };

        double scaleFactor = 2.0;
        double[][] scaledPointCloud = scalePointCloud(pointCloud, scaleFactor);

        System.out.println(Arrays.deepToString(scaledPointCloud));
    }
}
```

### Explanation:
- **Package and Class**: The `Answer` class is placed in the `org.real.temp` package.
- **Method Signature**: The method `scalePointCloud` takes a 2D array (`double[][]`) representing the point cloud and a `double` for the scaling factor. It returns a 2D array of the same type.
- **Looping Through the Array**: We use nested loops to iterate through each element of the point cloud and apply the scaling factor.
- **Example Usage**: A simple example is provided in the `main` method to demonstrate how to call the `scalePointCloud` method and print the result.

This Java code should perform the same functionality as your original Python function.