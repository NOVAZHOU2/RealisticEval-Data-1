Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and assertion methods.

### Python Code:
```python
import unittest
import numpy as np

class TestScalePointCloud(unittest.TestCase):

    def test_simple_scaling(self):
        """Test scaling of a single point."""
        point_cloud = np.array([[1.0, 2.0, 3.0]])
        scale_factor = 2.0
        expected_output = np.array([[2.0, 4.0, 6.0]])
        np.testing.assert_array_almost_equal(scale_point_cloud(point_cloud, scale_factor), expected_output)

    def test_multiple_points_scaling(self):
        """Test scaling of multiple points."""
        point_cloud = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])
        scale_factor = 0.5
        expected_output = np.array([[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]])
        np.testing.assert_array_almost_equal(scale_point_cloud(point_cloud, scale_factor), expected_output)

    def test_zero_scaling(self):
        """Test scaling by a factor of zero (should return a point cloud of zeros)."""
        point_cloud = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])
        scale_factor = 0.0
        expected_output = np.array([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]])
        np.testing.assert_array_almost_equal(scale_point_cloud(point_cloud, scale_factor), expected_output)

    def test_negative_scaling(self):
        """Test scaling with a negative factor."""
        point_cloud = np.array([[1.0, 2.0, 3.0]])
        scale_factor = -2.0
        expected_output = np.array([[-2.0, -4.0, -6.0]])
        np.testing.assert_array_almost_equal(scale_point_cloud(point_cloud, scale_factor), expected_output)
```

### Equivalent Jest Test Suite:
```javascript
const expect = require('expect'); // Import expect from Jest

describe('TestScalePointCloud', () => {
    const scalePointCloud = require('./scalePointCloud'); // Import the scalePointCloud function

    describe('test_simple_scaling', () => {
        it('should scale a single point correctly', () => {
            const pointCloud = [[1.0, 2.0, 3.0]];
            const scaleFactor = 2.0;
            const expectedOutput = [[2.0, 4.0, 6.0]];
            expect(scalePointCloud(pointCloud, scaleFactor)).toEqual(expectedOutput);
        });
    });

    describe('test_multiple_points_scaling', () => {
        it('should scale multiple points correctly', () => {
            const pointCloud = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]];
            const scaleFactor = 0.5;
            const expectedOutput = [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]];
            expect(scalePointCloud(pointCloud, scaleFactor)).toEqual(expectedOutput);
        });
    });

    describe('test_zero_scaling', () => {
        it('should scale by a factor of zero', () => {
            const pointCloud = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]];
            const scaleFactor = 0.0;
            const expectedOutput = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]];
            expect(scalePointCloud(pointCloud, scaleFactor)).toEqual(expectedOutput);
        });
    });

    describe('test_negative_scaling', () => {
        it('should scale with a negative factor', () => {
            const pointCloud = [[1.0, 2.0, 3.0]];
            const scaleFactor = -2.0;
            const expectedOutput = [[-2.0, -4.0, -6.0]];
            expect(scalePointCloud(pointCloud, scaleFactor)).toEqual(expectedOutput);
        });
    });
});
```

### Explanation:
1. **Import Statements**:
   - Import `expect` from Jest to use its assertion methods.

2. **Test Suite Structure**:
   - Use `describe` blocks to group related tests.
   - Use `it` blocks to define individual test cases.

3. **Assertions**:
   - Use `expect` and `toEqual` to assert that the output of `scalePointCloud` matches the expected output.
   - `toEqual` is used to compare arrays deeply, which is similar to `assert_array_almost_equal` in NumPy.

4. **Function Import**:
   - Import the `scalePointCloud` function from the relevant file (e.g., `./scalePointCloud.js`).

This Jest test suite maintains the same functionality and logic as the original Python unittest class, ensuring that all assertions are properly mapped to Jest equivalents.