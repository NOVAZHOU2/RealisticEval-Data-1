To convert the Python unittest test class into a JavaScript test case using Jest, you would need to first implement the `scale_point_cloud` function in JavaScript and then write a corresponding test case. Below is an example of how you can achieve this:

1. **Implement the `scale_point_cloud` function in JavaScript**:

```javascript
function scalePointCloud(pointCloud, scaleFactor) {
    // Ensure the input is a valid 2D array with at least one row and three columns
    if (!Array.isArray(pointCloud) || !pointCloud.length || pointCloud[0].length !== 3) {
        throw new Error('Invalid point cloud format');
    }

    // Scale each point in the point cloud
    const scaledPointCloud = pointCloud.map(point => [
        point[0] * scaleFactor,
        point[1] * scaleFactor,
        point[2] * scaleFactor
    ]);

    return scaledPointCloud;
}
```

2. **Write a Jest test case for the `scalePointCloud` function**:

```javascript
const { scalePointCloud } = require('./path-to-your-scale-point-cloud-function');

describe('scalePointCloud', () => {
    it('should scale the point cloud correctly', () => {
        const pointCloud = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ];
        const scaleFactor = 2;

        const expectedScaledPointCloud = [
            [2, 4, 6],
            [8, 10, 12],
            [14, 16, 18]
        ];

        const result = scalePointCloud(pointCloud, scaleFactor);

        expect(result).toEqual(expectedScaledPointCloud);
    });

    it('should handle empty point cloud gracefully', () => {
        const pointCloud = [];
        const scaleFactor = 2;

        const result = scalePointCloud(pointCloud, scaleFactor);

        expect(result).toEqual([]);
    });

    it('should throw error for invalid point cloud format', () => {
        const invalidPointCloud = [
            [1, 2], // Missing third element
            [4, 5, 6]
        ];
        const scaleFactor = 2;

        expect(() => scalePointCloud(invalidPointCloud, scaleFactor)).toThrowError('Invalid point cloud format');
    });
});
```

### Explanation:

- **Test Case Structure**: The Jest test cases are grouped under a `describe` block, which helps organize related tests.
- **Testing Valid Input**: The first test checks that the function scales the points correctly when provided with a valid point cloud and scale factor.
- **Handling Empty Input**: The second test ensures that the function handles an empty point cloud without throwing errors.
- **Error Handling**: The third test verifies that the function throws an error when provided with an invalid point cloud format.

Make sure to replace `'./path-to-your-scale-point-cloud-function'` with the actual path to your JavaScript file where the `scalePointCloud` function is defined. This setup should help you effectively test your JavaScript function using Jest.