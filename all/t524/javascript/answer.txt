Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function scalePointCloud(pointCloud, scaleFactor) {
    /**
     * Scale the point cloud by a given factor.
     *
     * Parameters:
     * - pointCloud: A 2D array representing the 3D point cloud with shape [N, 3].
     * - scaleFactor: A number representing the scaling factor.
     *
     * Returns:
     * - A 2D array of the scaled point cloud with shape [N, 3].
     */

    // Ensure pointCloud is an array
    if (!Array.isArray(pointCloud)) {
        throw new TypeError('pointCloud must be an array');
    }

    // Validate input shape
    if (!Array.isArray(pointCloud[0]) || pointCloud[0].length !== 3) {
        throw new Error('pointCloud must be a 2D array with shape [N, 3]');
    }

    // Scale the point cloud by the given factor
    const scaledPointCloud = pointCloud.map(row => {
        return row.map(value => value * scaleFactor);
    });

    return scaledPointCloud;
}
```

### Explanation:
1. **Function Definition**: The function `scalePointCloud` takes two parameters: `pointCloud` (a 2D array representing the 3D point cloud) and `scaleFactor` (a number representing the scaling factor).

2. **Input Validation**:
   - Checks if `pointCloud` is an array using `Array.isArray`.
   - Validates the shape of `pointCloud` by checking if each inner array has exactly 3 elements.

3. **Scaling the Point Cloud**:
   - Uses the `map` method to iterate over each row of `pointCloud`.
   - For each row, another `map` method is used to multiply each element by `scaleFactor`.

4. **Return Value**: Returns the scaled point cloud as a 2D array.

This JavaScript code closely mirrors the functionality and logic of the original Python code.