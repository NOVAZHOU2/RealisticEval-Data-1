Here is your Python code translated into JavaScript:

```javascript
function scalePointCloud(pointCloud, scaleFactor) {
    /**
     * Scale the point cloud by a given factor.
     *
     * @param {Array<Array<number>>} pointCloud - A N x 3 array representing the 3D point cloud.
     * @param {number} scaleFactor - A number representing the scaling factor.
     *
     * @returns {Array<Array<number>>} - A N x 3 array of the scaled point cloud.
     */

    return pointCloud.map(point => point.map(coord => coord * scaleFactor));
}
```

This JavaScript function `scalePointCloud` does exactly what your Python function `scale_point_cloud` does. It takes a 2D array of points and a scaling factor, then returns a new 2D array where each coordinate in each point has been multiplied by the scaling factor. 

Please note that JavaScript arrays are zero-indexed, just like Python lists, but they also support negative indexing and slicing, which aren't available in Python. Also, unlike Python's NumPy arrays, JavaScript arrays don't have built-in methods for mathematical operations on all elements at once, so we need to use the `map()` method twice to apply the scaling factor to each coordinate individually.