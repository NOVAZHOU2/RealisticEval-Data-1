Certainly! Below is the equivalent Jest test class for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import unittest
from unittest.mock import patch, MagicMock
import subprocess

def get_local_ip(interface: str = 'wlan0') -> str:
    """
    Retrieve the local IP address from the specified network interface.

    Args:
    interface (str): The network interface to query. Default is 'wlan0'.

    Returns:
    str: The local IP address, or a message indicating no IP was found.

    Raises:
    RuntimeError: If the subprocess encounters an error or if no suitable IP is found.
    """
    try:
        # Execute the command to get the IP addresses from the specified interface
        result = subprocess.run(['ip', 'addr', 'show', interface],
                                capture_output=True, text=True, check=True)
    except subprocess.CalledProcessError as e:
        # Handle errors from the subprocess command
        raise RuntimeError(f"Failed to retrieve IP address: {str(e)}")

    # Regular expression to match IPv4 addresses, excluding the loopback address
    ip_pattern = re.compile(r'inet (\d+\.\d+\.\d+\.\d+)/\d+')

    # Search for IP addresses in the command output
    ips = ip_pattern.findall(result.stdout)

    # Return the first valid IP found, or raise an error if no IP is found
    if ips:
        return ips[0]
    else:
        raise RuntimeError("No local IP found")


class TestGetLocalIp(unittest.TestCase):
    def setUp(self):
        # Sample IP command output for a wlan0 interface
        self.sample_output = "3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n" \
                             "    inet 192.168.1.100/24 brd 192.168.1.255 scope global dynamic wlan0\n" \
                             "       valid_lft 86394sec preferred_lft 86394sec\n"

    @patch('subprocess.run')
    def test_successful_ip_retrieval(self, mock_run):
        # Configure the mock to return a successful output
        mock_run.return_value = MagicMock(stdout=self.sample_output, check=True)
        # Test function with wlan0 interface
        ip = get_local_ip('wlan0')
        self.assertEqual(ip, '192.168.1.0')

    @patch('subprocess.run')
    def test_command_failure(self, mock_run):
        # Simulate a subprocess failure
        mock_run.side_effect = subprocess.CalledProcessError(1, ['ip', 'addr', 'show', 'wlan0'])
        self.assertRaises(Exception)

    @patch('subprocess.run')
    def test_different_interface(self, mock_run):
        # Configure the mock for a different interface
        mock_run.return_value = MagicMock(
            stdout="3: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500\n    inet 10.0.0.1/24", check=True)
        ip = get_local_ip('eth0')
        self.assertEqual(ip, '10.0.0.1')
```

### Equivalent Jest Test Class:

```javascript
const { exec } = require('child_process');
const { expect } = require('@jest/globals');

// Mock the `exec` function to simulate subprocess behavior
jest.mock('child_process', () => ({
  exec: jest.fn(),
}));

// Function to get the local IP address
function getLocalIP(interface = 'wlan0') {
  return new Promise((resolve, reject) => {
    const command = `ip addr show ${interface}`;
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject(new Error(`Failed to retrieve IP address: ${error.message}`));
        return;
      }

      const ipPattern = /inet (\d+\.\d+\.\d+\.\d+)\/\d+/;
      const match = stdout.match(ipPattern);

      if (match) {
        resolve(match[1]);
      } else {
        reject(new Error("No local IP found"));
      }
    });
  });
}

describe('TestGetLocalIp', () => {
  beforeEach(() => {
    // Sample IP command output for a wlan0 interface
    const sampleOutput = `3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
    inet 192.168.1.100/24 brd 192.168.1.255 scope global dynamic wlan0
       valid_lft 86394sec preferred_lft 86394sec`;

    // Mock the exec function to return a successful output
    exec.mockImplementationOnce((command, callback) => {
      callback(null, sampleOutput, '');
    });

    // Mock the exec function for a different interface
    exec.mockImplementationOnce((command, callback) => {
      callback(null, `3: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500
      inet 10.0.0.1/24`, '');
    });

    // Mock the exec function to simulate a subprocess failure
    exec.mockImplementationOnce((command, callback) => {
      callback(new Error('Failed to execute command'), '', '');
    });
  });

  it('should successfully retrieve the IP address', async () => {
    const ip = await getLocalIP('wlan0');
    expect(ip).toBe('192.168.1.100');
  });

  it('should handle command failure', async () => {
    try {
      await getLocalIP('wlan0');
    } catch (error) {
      expect(error.message).toContain('Failed to retrieve IP address');
    }
  });

  it('should retrieve the IP address for a different interface', async () => {
    const ip = await getLocalIP('eth0');
    expect(ip).toBe('10.0.0.1');
  });
});

// Example usage:
(async () => {
  try {
    const ip = await getLocalIP();
    console.log(ip);
  } catch (error) {
    console.error(error.message);
  }
})();
```

### Explanation:
1. **Importing `exec` and Jest Assertions**:
   - The `exec` function from the `child_process` module is mocked using Jest.
   - Jest's `expect` function is imported for assertions.

2. **Function Definition**:
   - The `getLocalIP` function is defined to retrieve the local IP address from the specified network interface.
   - It returns a promise to handle asynchronous operations.

3. **Mocking `exec`**:
   - The `exec` function is mocked using Jest to simulate different scenarios (successful output, different interface output, and command failure).

4. **Test Cases**:
   - Each test case uses `it` blocks to define the test scenarios.
   - Assertions are made using Jest's `expect` function.

5. **Example Usage**:
   - An example of how to use the `getLocalIP` function is provided at the end.

This ensures that the functionality, logic, and structure of the original Python unittest class are preserved in the Jest test class, with proper assertions and mocking.