Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
const { exec } = require('child_process');

/**
 * Gets the IPv4 address of the local computer on a specific network interface, such as wlan0, which is usually a wireless network interface.
 * @param {string} [interface='wlan0'] - The network interface to query. Default is 'wlan0'.
 * @returns {Promise<string>} A promise that resolves to the local IP address, or a message indicating no IP was found.
 */
function getLocalIP(interface = 'wlan0') {
    return new Promise((resolve, reject) => {
        // Execute the command to get the IP addresses from the specified interface
        const command = `ip addr show ${interface}`;
        exec(command, (error, stdout, stderr) => {
            if (error) {
                // Handle errors from the subprocess command
                reject(new Error(`Failed to retrieve IP address: ${error.message}`));
                return;
            }

            // Regular expression to match IPv4 addresses, excluding the loopback address
            const ipPattern = /inet (\d+\.\d+\.\d+\.\d+)\/\d+/;

            // Search for IP addresses in the command output
            const match = stdout.match(ipPattern);

            // Return the first valid IP found, or throw an error if no IP is found
            if (match) {
                resolve(match[1]);
            } else {
                reject(new Error("No local IP found"));
            }
        });
    });
}

// Example usage:
getLocalIP().then(ip => {
    console.log(ip);
}).catch(error => {
    console.error(error.message);
});
```

### Explanation:
1. **Importing `exec`**: The `exec` function from the `child_process` module is used to run shell commands.
2. **Function Definition**: The `getLocalIP` function is defined to retrieve the local IP address from the specified network interface.
3. **JSDoc Comments**: The function is documented using JSDoc format, providing clear descriptions of parameters and return values.
4. **Promise**: The function returns a promise to handle asynchronous operations.
5. **Command Execution**: The `ip addr show` command is executed using `exec`.
6. **Error Handling**: Errors from the subprocess command are caught and thrown as a new `Error`.
7. **Regular Expression**: A regular expression is used to match IPv4 addresses, excluding the loopback address.
8. **Matching IP Addresses**: The command output is searched for IP addresses using the regular expression.
9. **Returning IP Address**: The first valid IP address found is resolved, or an error is thrown if no IP is found.
10. **Example Usage**: An example of how to use the function is provided at the end.

This ensures that the functionality, logic, and structure of the original Python code are preserved in the JavaScript version, along with proper documentation using JSDoc.