Sure, here is the TypeScript version of your Python function with comments preserved:

```typescript
/**
 * Gets the IPv4 address of the local computer on a specific network interface, such as wlan0,
 * which is usually a wireless network interface.
 * @param {string} [interface='wlan0'] - The network interface to query. Default is 'wlan0'.
 * @returns {Promise<string>} A promise that resolves to the local IP address, or a message indicating no IP was found.
 */
async function getLocalIp(interface: string = 'wlan0'): Promise<string> {
    // Your implementation goes here
}
```

In TypeScript, we use `async/await` for asynchronous operations, so you'll need to implement the actual logic inside the `getLocalIp` function. Here's an example using Node.js's `child_process` module:

```typescript
import { exec } from 'child_process';

/**
 * Gets the IPv4 address of the local computer on a specific network interface, such as wlan0,
 * which is usually a wireless network interface.
 * @param {string} [interface='wlan0'] - The network interface to query. Default is 'wlan0'.
 * @returns {Promise<string>} A promise that resolves to the local IP address, or a message indicating no IP was found.
 */
async function getLocalIp(interface: string = 'wlan0'): Promise<string> {
    return new Promise((resolve, reject) => {
        exec(`ip addr show ${interface}`, (error, stdout, stderr) => {
            if (error) {
                reject(error);
                return;
            }
            const regex = /inet\s+(\d+\.\d+\.\d+\.\d+)/;
            const match = stdout.match(regex);
            if (match && match[1]) {
                resolve(match[1]);
            } else {
                resolve('No IP found');
            }
        });
    });
}
```

This code uses the `exec` function from Node.js's `child_process` module to run the `ip addr show` command and parse the output to find the local IP address.