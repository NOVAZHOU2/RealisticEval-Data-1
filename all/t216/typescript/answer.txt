Here is the equivalent TypeScript code:

```typescript
import * as child_process from 'child_process';
import * as re from 'xregexp';

function getLocalIP(interface: string = 'wlan0'): Promise<string> {
    return new Promise((resolve, reject) => {
        const command = ['ip', 'addr', 'show', interface].join(' ');
        
        child_process.exec(command, (error, stdout, stderr) => {
            if (error) {
                reject(new Error(`Failed to retrieve IP address: ${error.message}`));
                return;
            }

            // Regular expression to match IPv4 addresses, excluding the loopback address
            const ipPattern = re('inet (\\d+\\.\\d+\\.\\d+\\.\\d+)/\\d+', 'g');

            // Search for IP addresses in the command output
            const matches = stdout.match(ipPattern);

            if (matches && matches.length > 0) {
                resolve(matches[0].match(/(\d+\.\d+\.\d+\.\d+)/)![1]);
            } else {
                reject(new Error('No local IP found'));
            }
        });
    });
}

// Example usage
getLocalIP().then(ip => {
    console.log(ip);
}).catch(error => {
    console.error(error);
});
```

### Explanation:
1. **Imports**: 
   - `child_process` is used for executing shell commands.
   - `xregexp` is used for regular expressions (since TypeScript does not have a built-in package like Python's `re`).

2. **Function Definition**:
   - The function `getLocalIP` returns a `Promise<string>` to handle asynchronous operations.
   - The default value for the `interface` parameter is set to `'wlan0'`.

3. **Executing Command**:
   - The `child_process.exec` method is used to run the shell command.
   - It takes a callback function with parameters `(error, stdout, stderr)`.

4. **Handling Errors**:
   - If there is an error during the execution of the command, it is caught and a new `Error` is thrown with a descriptive message.

5. **Regular Expression**:
   - A regular expression `ipPattern` is defined to match IPv4 addresses, excluding the loopback address.
   - The `stdout` is searched for matches using the `match` method.

6. **Returning IP Address**:
   - If a match is found, the first valid IP address is extracted and resolved.
   - If no IP address is found, an error is thrown.

7. **Example Usage**:
   - The function is called and the result is logged to the console. Any errors are caught and logged as well.

This TypeScript code maintains the same functionality and logic as the original Python code, adapting it to TypeScript's syntax and asynchronous capabilities.