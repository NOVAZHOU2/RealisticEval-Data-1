Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The test class will include the necessary setup and mocking using JUnit and Mockito.

### Java Code

```java
package org.real.temp;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.doThrow;

public class Tester {

    @Mock
    private Process processMock;

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        System.setOut(new PrintStream(outContent));
    }

    @Test
    public void testSuccessfulIpRetrieval() {
        // Sample IP command output for a wlan0 interface
        String sampleOutput = "3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n" +
                              "    inet 192.168.1.100/24 brd 192.168.1.255 scope global dynamic wlan0\n" +
                              "       valid_lft 86394sec preferred_lft 86394sec\n";

        when(processMock.getInputStream()).thenReturn(new ByteArrayInputStream(sampleOutput.getBytes()));
        when(processMock.exitValue()).thenReturn(0);

        String ip = getLocalIp("wlan0");
        assertEquals("192.168.1.100", ip);
    }

    @Test
    public void testCommandFailure() {
        when(processMock.exitValue()).thenReturn(1);

        assertThrows(RuntimeException.class, () -> getLocalIp("wlan0"));
    }

    @Test
    public void testDifferentInterface() {
        // Sample IP command output for a different interface
        String sampleOutput = "3: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500\n" +
                              "    inet 10.0.0.1/24";

        when(processMock.getInputStream()).thenReturn(new ByteArrayInputStream(sampleOutput.getBytes()));
        when(processMock.exitValue()).thenReturn(0);

        String ip = getLocalIp("eth0");
        assertEquals("10.0.0.1", ip);
    }

    // Helper method to simulate the process execution
    private String getLocalIp(String interfaceName) {
        try {
            ProcessBuilder pb = new ProcessBuilder("ip", "addr", "show", interfaceName);
            Process process = pb.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();

            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }

            int exitCode = process.waitFor();
            if (exitCode != 0) {
                throw new RuntimeException("Failed to retrieve IP address: Exit code " + exitCode);
            }

            // Regular expression to match IPv4 addresses, excluding the loopback address
            Pattern ipPattern = Pattern.compile("inet (\\d+\\.\\d+\\.\\d+\\.\\d+)/\\d+");
            Matcher matcher = ipPattern.matcher(output.toString());

            // Find the first valid IP address
            while (matcher.find()) {
                return matcher.group(1); // Return the first valid IP found
            }
        } catch (IOException | InterruptedException e) {
            throw new RuntimeException("Failed to retrieve IP address: " + e.getMessage());
        }

        throw new RuntimeException("No local IP found");
    }
}
```

### Explanation:
1. **Package and Class Declaration**:
   - The Java test class is placed in the package `org.real.temp` and named `Tester`.

2. **JUnit Annotations**:
   - `@BeforeEach`: Used to set up mocks and system streams before each test.
   - `@Test`: Used to mark test methods.

3. **Mockito Setup**:
   - `@Mock`: Used to create mock objects.
   - `MockitoAnnotations.openMocks(this)`: Initializes mocks.

4. **Test Methods**:
   - `testSuccessfulIpRetrieval`: Configures the mock to return a successful output and verifies the IP address.
   - `testCommandFailure`: Configures the mock to simulate a command failure and asserts that an exception is thrown.
   - `testDifferentInterface`: Configures the mock for a different interface and verifies the IP address.

5. **Helper Method**:
   - `getLocalIp`: This method simulates the process execution and extracts the IP address. It is used by the test methods.

6. **Assertions**:
   - `assertEquals`: Used to verify the expected IP address.
   - `assertThrows`: Used to verify that an exception is thrown.

This Java code preserves the original functionality and structure of the Python unittests while adhering to Java conventions and best practices.