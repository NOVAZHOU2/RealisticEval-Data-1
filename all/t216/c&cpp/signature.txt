Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <regex>
#include <cstdio>
#include <stdexcept>

/**
 * Gets the IPv4 address of the local computer on a specific network interface,
 * such as wlan0, which is usually a wireless network interface.
 *
 * @param interface The network interface to query. Default is 'wlan0'.
 * @return The local IP address, or a message indicating no IP was found.
 */
std::string get_local_ip(const std::string& interface = "wlan0") {
    std::string command = "ip addr show " + interface;
    FILE* pipe = popen(command.c_str(), "r");
    if (!pipe) {
        throw std::runtime_error("Failed to execute command");
    }

    std::string result;
    char buffer[128];
    while (!feof(pipe)) {
        if (fgets(buffer, 128, pipe) != nullptr) {
            result += buffer;
        }
    }
    pclose(pipe);

    // Regular expression to match IPv4 addresses, excluding the loopback address
    std::regex ip_pattern("inet ([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)/[0-9]+");

    // Search for IP addresses in the command output
    std::smatch match;
    if (std::regex_search(result, match, ip_pattern)) {
        return match[1];
    } else {
        throw std::runtime_error("No local IP found");
    }
}

int main() {
    try {
        std::string local_ip = get_local_ip();
        std::cout << "Local IP: " << local_ip << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }
    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `<iostream>`: For input/output operations.
   - `<fstream>`: For file stream operations.
   - `<string>`: For string manipulation.
   - `<regex>`: For regular expressions.
   - `<cstdio>`: For `popen` and `pclose` functions.
   - `<stdexcept>`: For throwing exceptions.

2. **Function `get_local_ip`**:
   - The function signature includes a default parameter value for `interface`.
   - The function is documented using a multi-line comment block (`/* ... */`) with parameters and return values clearly defined.
   - The function constructs the command to be executed using the provided interface name.
   - It uses `popen` to open a pipe and execute the command.
   - It reads the output of the command and stores it in a string.
   - It uses a regular expression to find the first valid IPv4 address.
   - It throws a `std::runtime_error` if no IP is found or if there is an error executing the command.

3. **Main Function**:
   - Calls `get_local_ip` and prints the result.
   - Handles exceptions and prints error messages.

This code preserves the original purpose and structure of the Python function while adapting it to C++ syntax and conventions.