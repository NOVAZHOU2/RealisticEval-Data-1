Sure! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class. Note that I'll assume you have a similar implementation in TypeScript for the `wordFilterCounter` function.

```typescript
import { describe, it, expect } from '@jest/globals';

// Assuming you have the following TypeScript function
function wordFilterCounter(text: string, filterWords: string[]): Record<string, number> {
    const regex = new RegExp(`\\b(${filterWords.join('|')})\\b`, 'gi');
    const matches = text.match(regex);
    const counter: Record<string, number> = {};

    if (matches) {
        matches.forEach(match => {
            counter[match.toLowerCase()] = (counter[match.toLowerCase()] || 0) + 1;
        });
    }

    return filterWords.reduce((acc, word) => {
        acc[word] = counter[word.toLowerCase()] || 0;
        return acc;
    }, {} as Record<string, number>);
}

describe('wordFilterCounter', () => {
    it('should count occurrences of specified words in the given text', () => {
        const text = "Hello world, hello TypeScript!";
        const filterWords = ['hello', 'world'];
        const result = wordFilterCounter(text, filterWords);

        expect(result).toEqual({ hello: 2, world: 1 });
    });

    it('should handle empty text', () => {
        const text = "";
        const filterWords = ['hello', 'world'];
        const result = wordFilterCounter(text, filterWords);

        expect(result).toEqual({ hello: 0, world: 0 });
    });

    it('should handle text without any filter words', () => {
        const text = "Goodbye world!";
        const filterWords = ['hello', 'world'];
        const result = wordFilterCounter(text, filterWords);

        expect(result).toEqual({ hello: 0, world: 1 });
    });

    it('should be case-insensitive', () => {
        const text = "Hello world, hello TypeScript!";
        const filterWords = ['HELLO', 'WORLD'];
        const result = wordFilterCounter(text, filterWords);

        expect(result).toEqual({ HELLO: 2, WORLD: 1 });
    });
});
```

### Explanation:

1. **Function Definition**: The `wordFilterCounter` function is defined in TypeScript to match the Python version's functionality.
2. **Regex Creation**: A regular expression is used to find whole words (`\b`) that match any of the words in the `filterWords` array.
3. **Matching and Counting**: Matches are counted using a simple loop and stored in a counter object.
4. **Order Maintenance**: The result is constructed by reducing the `filterWords` array and ensuring the order is maintained while counting only the matched words.

5. **Jest Test Cases**:
   - **Basic Case**: Checks if the function correctly counts occurrences of specified words.
   - **Empty Text**: Ensures the function handles an empty text gracefully.
   - **No Filter Words**: Verifies the function behaves correctly when no filter words are present in the text.
   - **Case Insensitivity**: Tests that the function is not case-sensitive.

Make sure you have Jest installed in your project and run the tests using `npm test` or `yarn test`.