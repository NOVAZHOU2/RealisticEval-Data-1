Certainly! Here is the equivalent Jest test class in TypeScript, ensuring that the functionality and logic of the tests are preserved. The Python unittest assertions are mapped to the appropriate Jest assertions, and the necessary type annotations are included.

### TypeScript Code

```typescript
import { wordFilterCounter } from './wordFilterCounter'; // Import the wordFilterCounter function

describe('TestWordFilterCounter', () => {
  it('should correctly count words in case 1', () => {
    const text = "go to the school. go to the park.";
    const filterWords = ["go", "to", "the", "school", "park", "play"];
    const expectedOutput: Record<string, number> = {
      "go": 2,
      "to": 2,
      "the": 2,
      "school": 1,
      "park": 1,
      "play": 0
    };
    expect(wordFilterCounter(text, filterWords)).toEqual(expectedOutput);
  });

  it('should correctly count words in case 2', () => {
    const text = "This is a completely different sentence.";
    const filterWords = ["I'll", "go", "to", "the", "school", "park", "play"];
    const expectedOutput: Record<string, number> = {
      "I'll": 0,
      "go": 0,
      "to": 0,
      "the": 0,
      "school": 0,
      "park": 0,
      "play": 0
    };
    expect(wordFilterCounter(text, filterWords)).toEqual(expectedOutput);
  });

  it('should correctly count words in case 3', () => {
    const text = "I will not go to the school's park.";
    const filterWords = ["I", "will", "not", "go", "to", "the", "school's", "park"];
    const expectedOutput: Record<string, number> = {
      "I": 1,
      "will": 1,
      "not": 1,
      "go": 1,
      "to": 1,
      "the": 1,
      "school's": 1,
      "park": 1,
    };
    expect(wordFilterCounter(text, filterWords)).toEqual(expectedOutput);
  });
});
```

### Explanation:
1. **Imports**:
   - Import the `wordFilterCounter` function from the appropriate module.

2. **Describe Block**:
   - Use the `describe` block to group the test cases under a descriptive name (`TestWordFilterCounter`).

3. **Test Cases**:
   - Each test case is defined using the `it` block.
   - The `expect` function is used to assert the expected output using `toEqual`, which checks for deep equality.

4. **Type Annotations**:
   - The `expectedOutput` variable is annotated with `Record<string, number>` to ensure it matches the expected dictionary type.

5. **Text and Filter Words**:
   - The test cases use the same text and filter words as in the Python code.

6. **Assertions**:
   - The `toEqual` assertion is used to check that the output of `wordFilterCounter` matches the expected output.

This TypeScript code preserves the original functionality and logic of the Python unittest test cases while adapting them to Jest's syntax and conventions.