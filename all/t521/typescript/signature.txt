Certainly! Here is the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation comments:

```typescript
import * as re from 'xregexp';
import { Counter } from 'collections';

/**
 * Counts the occurrences of specified words in the given text.
 *
 * This function filters the words from the text based on the provided list,
 * counts their occurrences, and returns a dictionary with the words in the
 * order they were provided.
 *
 * @param text - The input text from which to count words.
 * @param filterWords - A list of words to filter and count.
 * @returns A dictionary with the count of each filter word in the text,
 *          maintaining the order from filterWords.
 */
function wordFilterCounter(text: string, filterWords: string[]): Record<string, number> {
    // Convert filter words to lowercase for case-insensitive comparison
    const filterWordsSet = new Set(filterWords.map(word => word.toLowerCase()));

    // Find all words in the text using a regex pattern
    const words = re.match(text.toLowerCase(), /\b\w+(?:'\w+)?\b/g);

    // Count occurrences of filtered words
    const wordCounts = new Counter(words.filter(word => filterWordsSet.has(word.toLowerCase())));

    // Create an ordered output based on the original order of filterWords
    const orderedOutput: Record<string, number> = {};
    for (const word of filterWords) {
        orderedOutput[word] = wordCounts.get(word.toLowerCase()) || 0;
    }

    return orderedOutput;
}
```

### Explanation:
1. **Imports**:
   - `xregexp` is used for regular expressions.
   - `Counter` is imported from a library similar to Python's `collections.Counter`.

2. **Type Annotations**:
   - The function signature `wordFilterCounter(text: string, filterWords: string[]): Record<string, number>` ensures that the parameters and return type are properly typed.

3. **JSDoc Comments**:
   - The JSDoc-style comments provide detailed documentation for the function, including parameter descriptions and return type information.

4. **Case Insensitivity**:
   - Both the filter words and the words found in the text are converted to lowercase for case-insensitive comparison.

5. **Regular Expression**:
   - The regular expression `\b\w+(?:'\w+)?\b` is used to match words, including contractions.

6. **Counter**:
   - The `Counter` class is used to count occurrences of words.

7. **Ordered Output**:
   - The final dictionary maintains the order of the filter words by iterating over `filterWords` and populating the output dictionary accordingly.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices.