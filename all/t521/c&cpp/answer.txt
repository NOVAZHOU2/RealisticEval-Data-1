Sure! Below is the equivalent C++ code for the Python function `word_filter_counter`. This code uses standard libraries such as `<string>`, `<vector>`, `<unordered_map>`, and `<sstream>`.

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <sstream>

std::unordered_map<std::string, int> wordFilterCounter(const std::string& text, const std::vector<std::string>& filterWords) {
    std::unordered_map<std::string, int> wordCount;
    std::istringstream iss(text);
    std::string word;

    // Initialize the word count map with zero for each filter word
    for (const auto& filterWord : filterWords) {
        wordCount[filterWord] = 0;
    }

    // Count occurrences of each word in the text
    while (iss >> word) {
        // Remove punctuation from the end of the word
        word.erase(std::remove_if(word.begin(), word.end(),
                                   [](char ch) { return ispunct(ch); }),
                    word.end());

        // Convert word to lowercase
        std::transform(word.begin(), word.end(), word.begin(),
                       [](unsigned char c){ return std::tolower(c); });

        // Increment the count if the word is in the filter list
        if (wordCount.find(word) != wordCount.end()) {
            wordCount[word]++;
        }
    }

    return wordCount;
}

int main() {
    std::string text = "Hello world! Hello everyone. Welcome to the world of programming.";
    std::vector<std::string> filterWords = {"hello", "world", "programming"};

    auto result = wordFilterCounter(text, filterWords);

    for (const auto& pair : result) {
        std::cout << pair.first << ": " << pair.second << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Initialization**: We initialize an unordered map `wordCount` to store the count of each filter word. We also use `std::istringstream` to split the text into individual words.
2. **Punctuation Removal**: For each word, we remove any trailing punctuation using `ispunct`.
3. **Case Insensitivity**: We convert each word to lowercase using `std::transform` and `std::tolower`.
4. **Counting**: We increment the count for each filter word found in the text.
5. **Output**: Finally, we print the count of each filter word.

This C++ code should produce the same output as the original Python function.