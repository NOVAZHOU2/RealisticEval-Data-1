Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the following headers and ensuring you link against the Catch2 library if necessary.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <regex>
#include <algorithm>

// Function to count the occurrences of specified words in the given text
std::unordered_map<std::string, int> word_filter_counter(const std::string& text, const std::vector<std::string>& filter_words) {
    // Convert filter words to lowercase for case-insensitive comparison
    std::unordered_set<std::string> filter_words_set;
    for (const auto& word : filter_words) {
        std::string lower_word = word;
        std::transform(lower_word.begin(), lower_word.end(), lower_word.begin(), ::tolower);
        filter_words_set.insert(lower_word);
    }

    // Find all words in the text using a regex pattern
    std::regex word_pattern(R"(\b\w+(?:'\w+)?\b)");
    std::sregex_iterator words_begin = std::sregex_iterator(text.begin(), text.end(), word_pattern);
    std::sregex_iterator words_end = std::sregex_iterator();

    // Count occurrences of filtered words
    std::unordered_map<std::string, int> word_counts;
    for (std::sregex_iterator i = words_begin; i != words_end; ++i) {
        std::string word = (*i).str();
        std::transform(word.begin(), word.end(), word.begin(), ::tolower);
        if (filter_words_set.find(word) != filter_words_set.end()) {
            word_counts[word]++;
        }
    }

    // Create an ordered output based on the original order of filter_words
    std::unordered_map<std::string, int> ordered_output;
    for (const auto& word : filter_words) {
        std::string lower_word = word;
        std::transform(lower_word.begin(), lower_word.end(), lower_word.begin(), ::tolower);
        ordered_output[word] = word_counts[lower_word];
    }

    return ordered_output;
}

TEST_CASE("Test Word Filter Counter") {
    SECTION("Test Case 1") {
        std::string text = "go to the school.go to the park.";
        std::vector<std::string> filter_words = {"go", "to", "the", "school", "park", "play"};
        std::unordered_map<std::string, int> expected_output = {
            {"go", 2},
            {"to", 2},
            {"the", 2},
            {"school", 1},
            {"park", 1},
            {"play", 0}
        };

        REQUIRE(word_filter_counter(text, filter_words) == expected_output);
    }

    SECTION("Test Case 2") {
        std::string text = "This is a completely different sentence.";
        std::vector<std::string> filter_words = {"I'll", "go", "to", "the", "school", "park", "play"};
        std::unordered_map<std::string, int> expected_output = {
            {"I'll", 0},
            {"go", 0},
            {"to", 0},
            {"the", 0},
            {"school", 0},
            {"park", 0},
            {"play", 0}
        };

        REQUIRE(word_filter_counter(text, filter_words) == expected_output);
    }

    SECTION("Test Case 3") {
        std::string text = "I will not go to the school's park.";
        std::vector<std::string> filter_words = {"I", "will", "not", "go", "to", "the", "school's", "park"};
        std::unordered_map<std::string, int> expected_output = {
            {"I", 1},
            {"will", 1},
            {"not", 1},
            {"go", 1},
            {"to", 1},
            {"the", 1},
            {"school's", 1},
            {"park", 1}
        };

        REQUIRE(word_filter_counter(text, filter_words) == expected_output);
    }
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<catch2/catch_test_macros.hpp>`, `<string>`, `<vector>`, `<unordered_map>`, `<unordered_set>`, `<regex>`, `<algorithm>`) are included to support the required functionalities.
2. **Function Definition**: The `word_filter_counter` function is defined as before.
3. **Catch2 Test Suite**: The `TEST_CASE` macro is used to define a test suite named "Test Word Filter Counter".
4. **Sections**: Each test case is defined within a `SECTION` block, which allows for clear separation and naming of individual test cases.
5. **Assertions**: The `REQUIRE` macro is used to assert that the output of `word_filter_counter` matches the expected output.

This C++ code preserves the original functionality and logic of the Python unittest class, ensuring that the tests are performed correctly using the Catch2 testing framework.