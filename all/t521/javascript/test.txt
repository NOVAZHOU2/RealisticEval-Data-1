Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Unittest Code:
```python
import unittest

class TestWordFilterCounter(unittest.TestCase):

    def test_case1(self):
        text = "go to the school.go to the park."
        filter_words = ["go", "to", "the", "school", "park", "play"]
        expected_output = {
            "go": 2,
            "to": 2,
            "the": 2,
            "school": 1,
            "park": 1,
            "play": 0
        }
        self.assertEqual(word_filter_counter(text, filter_words), expected_output)

    def test_case2(self):
        text = "This is a completely different sentence."
        filter_words = ["I'll", "go", "to", "the", "school", "park", "play"]
        expected_output = {
            "I'll": 0,
            "go": 0,
            "to": 0,
            "the": 0,
            "school": 0,
            "park": 0,
            "play": 0
        }
        self.assertEqual(word_filter_counter(text, filter_words), expected_output)

    def test_case3(self):
        text = "I will not go to the school's park."
        filter_words = ["I", "will", "not", "go", "to", "the", "school's", "park"]
        expected_output = {
            "I": 1,
            "will": 1,
            "not": 1,
            "go": 1,
            "to": 1,
            "the": 1,
            "school's": 1,
            "park": 1,
        }
        self.assertEqual(word_filter_counter(text, filter_words), expected_output)
```

### Equivalent Jest Test Suite:
```javascript
const assert = require('assert');

describe('TestWordFilterCounter', () => {
    it('test_case1', () => {
        const text = "go to the school.go to the park.";
        const filterWords = ["go", "to", "the", "school", "park", "play"];
        const expectedOutput = {
            go: 2,
            to: 2,
            the: 2,
            school: 1,
            park: 1,
            play: 0
        };
        expect(wordFilterCounter(text, filterWords)).toEqual(expectedOutput);
    });

    it('test_case2', () => {
        const text = "This is a completely different sentence.";
        const filterWords = ["I'll", "go", "to", "the", "school", "park", "play"];
        const expectedOutput = {
            "I'll": 0,
            go: 0,
            to: 0,
            the: 0,
            school: 0,
            park: 0,
            play: 0
        };
        expect(wordFilterCounter(text, filterWords)).toEqual(expectedOutput);
    });

    it('test_case3', () => {
        const text = "I will not go to the school's park.";
        const filterWords = ["I", "will", "not", "go", "to", "the", "school's", "park"];
        const expectedOutput = {
            I: 1,
            will: 1,
            not: 1,
            go: 1,
            to: 1,
            the: 1,
            "school's": 1,
            park: 1
        };
        expect(wordFilterCounter(text, filterWords)).toEqual(expectedOutput);
    });
});

// Example usage and test
const text = "The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.";
const filterWords = ["the", "quick", "fox", "dog"];

const expectedResult = {
    the: 2,
    quick: 2,
    fox: 2,
    dog: 2
};

const result = wordFilterCounter(text, filterWords);
console.log(result); // Should log: { the: 2, quick: 2, fox: 2, dog: 2 }

// Test the function
assert.deepStrictEqual(result, expectedResult, 'The function did not return the expected result');
```

### Explanation:
1. **Test Suite Structure**: The `unittest.TestCase` class is replaced with a `describe` block in Jest.
2. **Test Cases**: Each `test_caseX` method is replaced with an `it` block in Jest.
3. **Assertions**: The `self.assertEqual` method is replaced with `expect(...).toEqual(...)`.
4. **Data Structures**: The Python dictionaries are converted to JavaScript objects.
5. **String Keys**: In JavaScript, string keys need to be quoted when they contain special characters or spaces.

This Jest test suite ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.