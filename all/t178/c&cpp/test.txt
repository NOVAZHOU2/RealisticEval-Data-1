Hereâ€™s the equivalent test class using the Catch2 framework in C++:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>

std::vector<int> findLongestNonDecreasingSubsequence(const std::vector<int>& nums);

TEST_CASE("Test longest non-decreasing subsequence") {
    SECTION("Non-decreasing sequence") {
        std::vector<int> nums = {5, 7, 4, 8, 6, 10, 2, 11};
        std::vector<int> expected = {5, 7, 8, 10, 11};
        REQUIRE(expected == findLongestNonDecreasingSubsequence(nums));
    }

    SECTION("All increasing") {
        std::vector<int> nums = {1, 2, 3, 4, 5};
        std::vector<int> expected = {1, 2, 3, 4, 5};
        REQUIRE(expected == findLongestNonDecreasingSubsequence(nums));
    }

    SECTION("All decreasing") {
        std::vector<int> nums = {5, 4, 3, 2, 1};
        std::vector<int> expected = {5};
        REQUIRE(expected == findLongestNonDecreasingSubsequence(nums));
    }

    SECTION("Single element") {
        std::vector<int> nums = {10};
        std::vector<int> expected = {10};
        REQUIRE(expected == findLongestNonDecreasingSubsequence(nums));
    }

    SECTION("Empty array") {
        std::vector<int> nums = {};
        std::vector<int> expected = {};
        REQUIRE(expected == findLongestNonDecreasingSubsequence(nums));
    }
}
```

### Explanation of Changes:
1. **Header Files**: Included `catch2/catch.hpp` for Catch2 functionality.
2. **Test Macro**: Used `TEST_CASE` and `SECTION` macros to define test cases and sub-tests, respectively.
3. **Assertions**: Replaced `self.assertEqual` with `REQUIRE` for assertions.
4. **Type Adjustments**: Adapted the input and expected outputs to use `std::vector<int>`. 

This C++ code maintains the original functionality and logic of the Python tests while adapting to C++ syntax and conventions.