To convert the provided Python code into C++, hereâ€™s the equivalent code while maintaining the same functionality and structure:

```cpp
#include <vector>
#include <iostream>

std::vector<int> findLongestNonDecreasingSubsequence(const std::vector<int>& nums) {
    if (nums.empty()) {
        return {};
    }

    int n = nums.size();
    std::vector<int> dp(n, 1); // Initialize dp array with 1s
    std::vector<int> previous(n, -1); // Initialize previous array with -1s

    int max_length = 1;
    int last_index = 0;

    // Calculate the length of the longest non-decreasing subsequence
    for (int i = 1; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
            if (nums[i] >= nums[j] && dp[i] < dp[j] + 1) {
                dp[i] = dp[j] + 1;
                previous[i] = j;
            }
        }

        // Update max_length and last_index
        if (dp[i] > max_length) {
            max_length = dp[i];
            last_index = i;
        }
    }

    // Reconstruct the longest non-decreasing subsequence
    std::vector<int> subsequence;
    while (last_index != -1) {
        subsequence.insert(subsequence.begin(), nums[last_index]); // Add to the beginning
        last_index = previous[last_index];
    }

    return subsequence;
}

int main() {
    std::vector<int> nums = {1, 3, 2, 3, 4, 5, 4, 5, 6};
    std::vector<int> result = findLongestNonDecreasingSubsequence(nums);
    
    for (int num : result) {
        std::cout << num << " ";
    }
    return 0;
}
```

This C++ code captures the logic and structure of the Python code while adapting to C++ syntax and features.