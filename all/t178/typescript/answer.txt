To convert the provided Python code into TypeScript, we need to define appropriate types and adjust for language differences. Hereâ€™s the equivalent TypeScript code:

```typescript
function findLongestNonDecreasingSubsequence(nums: number[] | null): number[] {
    if (nums === null || nums.length === 0) {
        return [];
    }

    const n: number = nums.length;
    const dp: number[] = Array(n).fill(1); // Initialize dp array with 1s
    const previous: number[] = Array(n).fill(-1); // Initialize previous array with -1s

    let maxLength: number = 1;
    let lastIndex: number = 0;

    // Calculate the length of the longest non-decreasing subsequence
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[i] >= nums[j] && dp[i] < dp[j] + 1) {
                dp[i] = dp[j] + 1;
                previous[i] = j;
            }
        }

        // Update maxLength and lastIndex
        if (dp[i] > maxLength) {
            maxLength = dp[i];
            lastIndex = i;
        }
    }

    // Reconstruct the longest non-decreasing subsequence
    const subsequence: number[] = [];
    while (lastIndex !== -1) {
        subsequence.unshift(nums[lastIndex]); // Add to the beginning
        lastIndex = previous[lastIndex];
    }

    return subsequence;
}
```

This TypeScript code maintains the same logic as the Python version while incorporating static typing and TypeScript conventions.