Certainly! Below is the TypeScript version of your JavaScript Jest test case using `describe` blocks:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Calculate the remaining payment for a loan based on the given debt, monthly interest rate, and total payments.
 *
 * @param {number} principal - The initial amount of the debt.
 * @param {number} interestRate - The monthly interest rate as a decimal.
 * @param {number} numberOfPayments - The total number of payments.
 * @returns {number} - The calculated remaining payment.
 */
function calculateRemainingPayment(principal: number, interestRate: number, numberOfPayments: number): number {
    let remainingPrincipal = principal;
    for (let i = 0; i < numberOfPayments; i++) {
        remainingPrincipal += remainingPrincipal * interestRate;
        remainingPrincipal -= 100; // Assuming each payment is $100
    }
    return Math.round(remainingPrincipal);
}

describe('calculateRemainingPayment', () => {
    it('should correctly calculate the remaining payment after one month', () => {
        const principal = 1000;
        const interestRate = 0.05;
        const numberOfPayments = 1;
        const expected = 1050;

        const result = calculateRemainingPayment(principal, interestRate, numberOfPayments);

        expect(result).toBe(expected);
    });

    it('should correctly calculate the remaining payment over multiple months', () => {
        const principal = 1000;
        const interestRate = 0.05;
        const numberOfPayments = 3;
        const expected = 1162;

        const result = calculateRemainingPayment(principal, interestRate, numberOfPayments);

        expect(result).toBe(expected);
    });
});
```

In this TypeScript version:
- I added type annotations to the function parameters and return value.
- I used `@jest/globals` to import `describe`, `it`, and `expect`.
- I included two test cases within the `describe` block to ensure the function works correctly with different inputs.

Make sure you have the necessary dependencies installed in your project. You can install them using npm or yarn if they're not already present:

```sh
npm install --save-dev @types/jest jest
```

or

```sh
yarn add --dev @types/jest jest
```