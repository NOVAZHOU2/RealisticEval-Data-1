Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import unittest
from unittest.mock import patch, MagicMock

class TestConvertPngToIco(unittest.TestCase):
    @patch('PIL.Image.open')
    def test_single_icon_size(self, mock_open):
        mock_image = mock_open.return_value.__enter__.return_value
        convert_png_to_ico('source.png', 'output.ico', [(64, 64)])
        mock_image.save.assert_called_with('output.ico', format='ICO', sizes=[(64, 64)])

    @patch('PIL.Image.open')
    def test_multiple_icon_sizes(self, mock_open):
        mock_image = mock_open.return_value.__enter__.return_value
        convert_png_to_ico('source.png', 'output.ico', [(16, 16), (32, 32), (64, 64)])
        mock_image.save.assert_called_with('output.ico', format='ICO', sizes=[(16, 16), (32, 32), (64, 64)])

    @patch('PIL.Image.open')
    def test_default_icon_size(self, mock_open):
        mock_image = mock_open.return_value.__enter__.return_value
        convert_png_to_ico('source.png', 'output.ico')
        mock_image.save.assert_called_with('output.ico', format='ICO', sizes=[(32, 32)])

    @patch('PIL.Image.open')
    def test_file_handling(self, mock_open):
        mock_image = MagicMock()
        mock_open.return_value.__enter__.return_value = mock_image
        convert_png_to_ico('source.png', 'output.ico')
        # Check if save was called correctly
        mock_image.save.assert_called_once_with('output.ico', format='ICO', sizes=[(32, 32)])

    @patch('PIL.Image.open')
    def test_invalid_image_path(self, mock_open):
        mock_open.side_effect = FileNotFoundError
        with self.assertRaises(FileNotFoundError):
            convert_png_to_ico('invalid.png', 'output.ico')
```

### Equivalent Jest Test Suite:
```javascript
const { convertPngToIco } = require('./path/to/convertPngToIco'); // Import your function
const fs = require('fs').promises; // Import fs.promises for mocking errors

describe('TestConvertPngToIco', () => {
    beforeEach(() => {
        jest.resetModules();
        jest.clearAllMocks();
    });

    describe('testSingleIconSize', () => {
        it('should save the image with a single icon size', () => {
            const mockImage = {
                save: jest.fn()
            };

            const mockOpen = jest.fn().mockReturnValue({
                __enter__: jest.fn().mockReturnValue(mockImage),
                __exit__: jest.fn()
            });

            jest.doMock('sharp', () => ({
                open: mockOpen
            }));

            convertPngToIco('source.png', 'output.ico', [[64, 64]]);
            expect(mockImage.save).toHaveBeenCalledWith('output.ico', { format: 'ICO', sizes: [[64, 64]] });
        });
    });

    describe('testMultipleIconSizes', () => {
        it('should save the image with multiple icon sizes', () => {
            const mockImage = {
                save: jest.fn()
            };

            const mockOpen = jest.fn().mockReturnValue({
                __enter__: jest.fn().mockReturnValue(mockImage),
                __exit__: jest.fn()
            });

            jest.doMock('sharp', () => ({
                open: mockOpen
            }));

            convertPngToIco('source.png', 'output.ico', [[16, 16], [32, 32], [64, 64]]);
            expect(mockImage.save).toHaveBeenCalledWith('output.ico', { format: 'ICO', sizes: [[16, 16], [32, 32], [64, 64]] });
        });
    });

    describe('testDefaultIconSize', () => {
        it('should save the image with the default icon size', () => {
            const mockImage = {
                save: jest.fn()
            };

            const mockOpen = jest.fn().mockReturnValue({
                __enter__: jest.fn().mockReturnValue(mockImage),
                __exit__: jest.fn()
            });

            jest.doMock('sharp', () => ({
                open: mockOpen
            }));

            convertPngToIco('source.png', 'output.ico');
            expect(mockImage.save).toHaveBeenCalledWith('output.ico', { format: 'ICO', sizes: [[32, 32]] });
        });
    });

    describe('testFileHandling', () => {
        it('should save the image with the correct parameters', () => {
            const mockImage = {
                save: jest.fn()
            };

            const mockOpen = jest.fn().mockReturnValue({
                __enter__: jest.fn().mockReturnValue(mockImage),
                __exit__: jest.fn()
            });

            jest.doMock('sharp', () => ({
                open: mockOpen
            }));

            convertPngToIco('source.png', 'output.ico');
            expect(mockImage.save).toHaveBeenCalledTimes(1);
            expect(mockImage.save).toHaveBeenCalledWith('output.ico', { format: 'ICO', sizes: [[32, 32]] });
        });
    });

    describe('testInvalidImagePath', () => {
        it('should throw an error when the image path is invalid', async () => {
            const mockOpen = jest.fn().mockRejectedValue(new Error('File not found'));

            jest.doMock('sharp', () => ({
                open: mockOpen
            }));

            await expect(convertPngToIco('invalid.png', 'output.ico')).rejects.toThrow('File not found');
        });
    });
});
```

### Explanation:
1. **Imports**:
   - Import the `convertPngToIco` function from the relevant module.
   - Import `fs.promises` to mock file system errors.

2. **Before Each**:
   - Reset modules and clear all mocks before each test to ensure isolation.

3. **Test Cases**:
   - Each test case is wrapped in a `describe` block for better organization.
   - Use `it` blocks to define individual test cases.
   - Mock the `sharp` library to simulate the behavior of `PIL.Image.open`.

4. **Assertions**:
   - Use `expect` to assert the behavior of the mocked functions.
   - Use `toHaveBeenCalledWith` to check function calls with specific arguments.
   - Use `toHaveBeenCalledTimes` to check the number of times a function is called.
   - Use `rejects.toThrow` to check for thrown errors.

5. **Error Handling**:
   - Use `mockRejectedValue` to simulate file system errors.

This setup ensures that the tests are equivalent in functionality and logic to the original Python unittest class, while adhering to Jest's syntax and conventions.