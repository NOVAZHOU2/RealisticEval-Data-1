Sure! Below is the equivalent C++ code for converting a PNG image file to an ICO format file. To achieve this, we will use the `CImg` library, which is a powerful and flexible image processing library for C++. Note that you need to install the `CImg` library and link it properly in your project.

First, make sure you have the `CImg` library installed. You can download it from [here](http://cimg.eu/).

Hereâ€™s the C++ code:

```cpp
#include <CImg/CImg.h>
#include <iostream>
#include <vector>

using namespace cimg_library;

void convertPngToIco(const std::string& pngFilePath, const std::string& icoFilePath, const std::vector<std::pair<int, int>>& iconSizes = {{32, 32}}) {
    /**
     * Convert a PNG image file to an ICO format file.
     *
     * Args:
     * pngFilePath (std::string): Path to the source PNG image file.
     * icoFilePath (std::string): Path to save the ICO file.
     * iconSizes (std::vector<std::pair<int, int>>): List of pairs specifying the sizes to include in the ICO file.
     */
    
    // Load the PNG image
    CImg<unsigned char> img(pngFilePath.c_str());
    
    // Create an ICO file
    CImgList<unsigned char> ico;
    
    // Add each size to the ICO file
    for (const auto& size : iconSizes) {
        CImg<unsigned char> resizedImg(size.first, size.second, 1, 3);
        img.resize(resizedImg, size.first, size.second, 0, 0, 3); // Resize the image
        ico.insert(resizedImg); // Insert the resized image into the ICO list
    }
    
    // Save the ICO file
    ico.save(icoFilePath.c_str(), "ICO");
}

int main() {
    // Example usage
    std::string pngFilePath = "path/to/source.png";
    std::string icoFilePath = "path/to/output.ico";
    std::vector<std::pair<int, int>> iconSizes = {{32, 32}};
    
    convertPngToIco(pngFilePath, icoFilePath, iconSizes);
    
    std::cout << "Conversion complete." << std::endl;
    
    return 0;
}
```

### Explanation:
1. **Header Files**: We include the necessary header files (`CImg/CImg.h`, `iostream`, `vector`) and use the `cimg_library` namespace.
2. **Function Definition**: The `convertPngToIco` function takes the paths to the PNG and ICO files and a vector of sizes.
3. **Loading the Image**: We load the PNG image using `CImg`.
4. **Creating the ICO File**: We create a `CImgList` object to store multiple images of different sizes.
5. **Resizing and Adding Images**: For each specified size, we resize the original image and add it to the `CImgList`.
6. **Saving the ICO File**: Finally, we save the `CImgList` as an ICO file.
7. **Main Function**: An example usage of the `convertPngToIco` function is provided in the `main` function.

Make sure to compile your program with the appropriate flags and libraries required by `CImg`.