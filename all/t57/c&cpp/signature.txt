Certainly! Below is the equivalent C++ code for the given Python function, including the translation of the function signature, comments, and documentation into C++ standards.

### Python Code:
```python
def convert_png_to_ico(png_file_path, ico_file_path, icon_sizes=[(32, 32)]):
    """
    Convert PNG images to ICO files.
    
    Args:
        png_file_path (str): Path to the source PNG image file.
        ico_file_path (str): Path to save the ICO file.
        icon_sizes (list): List of tuples specifying the sizes to include in the ICO file.
        
    Returns:
        None
    """
```

### Equivalent C++ Code:
```cpp
#include <CImg/CImg.h>
#include <iostream>
#include <vector>
#include <string>

using namespace cimg_library;

/**
 * Convert PNG images to ICO files.
 *
 * @param png_file_path Path to the source PNG image file.
 * @param ico_file_path Path to save the ICO file.
 * @param icon_sizes List of pairs specifying the sizes to include in the ICO file.
 */
void convertPngToIco(const std::string& png_file_path, const std::string& ico_file_path, const std::vector<std::pair<int, int>>& icon_sizes = {{32, 32}}) {
    // Load the PNG image
    CImg<unsigned char> img(png_file_path.c_str());

    // Create an ICO file
    CImgList<unsigned char> ico;

    // Add each size to the ICO file
    for (const auto& size : icon_sizes) {
        CImg<unsigned char> resizedImg(size.first, size.second, 1, 3);
        img.resize(resizedImg, size.first, size.second, 0, 0, 3); // Resize the image
        ico.insert(resizedImg); // Insert the resized image into the ICO list
    }

    // Save the ICO file
    ico.save(ico_file_path.c_str(), "ICO");
}

int main() {
    // Example usage
    std::string pngFilePath = "path/to/source.png";
    std::string icoFilePath = "path/to/output.ico";
    std::vector<std::pair<int, int>> iconSizes = {{32, 32}};

    convertPngToIco(pngFilePath, icoFilePath, iconSizes);

    std::cout << "Conversion complete." << std::endl;

    return 0;
}
```

### Explanation:
1. **Header Files**: We include the necessary header files (`CImg/CImg.h`, `iostream`, `vector`, `string`).
2. **Function Definition**: The `convertPngToIco` function is defined with the same parameters and default values.
3. **Documentation**: The Python docstring is translated into a C++ comment block using `/** */`.
4. **Loading the Image**: We load the PNG image using `CImg`.
5. **Creating the ICO File**: We create a `CImgList` object to store multiple images of different sizes.
6. **Resizing and Adding Images**: For each specified size, we resize the original image and add it to the `CImgList`.
7. **Saving the ICO File**: Finally, we save the `CImgList` as an ICO file.
8. **Main Function**: An example usage of the `convertPngToIco` function is provided in the `main` function.

This ensures that the functionality, logic, and structure of the Python code are preserved in the C++ version, along with appropriate comments and documentation.