Certainly! Below is the equivalent TypeScript test class using Jest. The provided Python unittest class will be converted to a Jest test suite, ensuring that the functionality and logic of the tests are preserved. Type annotations and Jest assertions are included to match the behavior of the Python tests.

### TypeScript Code with Jest Testing

```typescript
import { convertPngToIco } from './path-to-convert-png-to-ico'; // Import the convertPngToIco function
import { mock } from 'jest-mock-extended';

describe('TestConvertPngToIco', () => {
    let mockImage: any;

    beforeEach(() => {
        mockImage = mock();
    });

    describe('convertPngToIco', () => {
        it('should save ICO with a single icon size', () => {
            const mockOpen = jest.fn().mockReturnValue({
                __enter__: jest.fn().mockReturnValue(mockImage),
                __exit__: jest.fn(),
            });

            jest.spyOn(global, 'Image').mockImplementation(() => ({
                open: mockOpen,
            }));

            convertPngToIco('source.png', 'output.ico', [[64, 64]]);
            expect(mockImage.save).toHaveBeenCalledWith('output.ico', { format: 'ICO', sizes: [[64, 64]] });
        });

        it('should save ICO with multiple icon sizes', () => {
            const mockOpen = jest.fn().mockReturnValue({
                __enter__: jest.fn().mockReturnValue(mockImage),
                __exit__: jest.fn(),
            });

            jest.spyOn(global, 'Image').mockImplementation(() => ({
                open: mockOpen,
            }));

            convertPngToIco('source.png', 'output.ico', [[16, 16], [32, 32], [64, 64]]);
            expect(mockImage.save).toHaveBeenCalledWith('output.ico', { format: 'ICO', sizes: [[16, 16], [32, 32], [64, 64]] });
        });

        it('should save ICO with the default icon size', () => {
            const mockOpen = jest.fn().mockReturnValue({
                __enter__: jest.fn().mockReturnValue(mockImage),
                __exit__: jest.fn(),
            });

            jest.spyOn(global, 'Image').mockImplementation(() => ({
                open: mockOpen,
            }));

            convertPngToIco('source.png', 'output.ico');
            expect(mockImage.save).toHaveBeenCalledWith('output.ico', { format: 'ICO', sizes: [[32, 32]] });
        });

        it('should handle file opening correctly', () => {
            const mockOpen = jest.fn().mockReturnValue({
                __enter__: jest.fn().mockReturnValue(mockImage),
                __exit__: jest.fn(),
            });

            jest.spyOn(global, 'Image').mockImplementation(() => ({
                open: mockOpen,
            }));

            convertPngToIco('source.png', 'output.ico');
            expect(mockImage.save).toHaveBeenCalledTimes(1);
            expect(mockImage.save).toHaveBeenCalledWith('output.ico', { format: 'ICO', sizes: [[32, 32]] });
        });

        it('should throw an error when the image path is invalid', () => {
            const mockOpen = jest.fn().mockImplementation(() => {
                throw new Error('File not found');
            });

            jest.spyOn(global, 'Image').mockImplementation(() => ({
                open: mockOpen,
            }));

            expect(() => convertPngToIco('invalid.png', 'output.ico')).toThrow('File not found');
        });
    });
});
```

### Explanation:
1. **Imports**:
   - Import the `convertPngToIco` function from the relevant module.
   - Import `mock` from `jest-mock-extended` to create mock objects.

2. **Setup**:
   - Use `beforeEach` to reset the mock image before each test.

3. **Test Cases**:
   - Each test case uses `jest.fn()` to create a mock `open` function.
   - The `Image` object is mocked using `jest.spyOn` to simulate the behavior of `PIL.Image.open`.
   - Assertions are made using `expect` to check the calls to `mockImage.save`.

4. **Mocking**:
   - Mock the `open` method to return a mock image object.
   - Use `__enter__` and `__exit__` to simulate the context manager behavior.

5. **Error Handling**:
   - The last test case checks for throwing an error when the image path is invalid.

This TypeScript code ensures that the functionality and logic of the Python unittests are preserved while adapting to Jest's syntax and conventions.