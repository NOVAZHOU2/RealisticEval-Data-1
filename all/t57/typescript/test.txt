Sure, I can help you convert the given Python unittest test class to TypeScript using Jest. Below is an example of how you might write a Jest test case for the `convert_png_to_ico` function.

First, let's assume that the `convert_png_to_ico` function is part of a module named `image_converter`. We'll also assume that the function is already implemented and available for testing.

Here's how you can write the Jest test case:

1. Create a new file named `image_converter.test.ts`.
2. Write the Jest test cases in this file.

```typescript
import { convert_png_to_ico } from './image_converter'; // Adjust the import path accordingly

describe('convert_png_to_ico', () => {
  it('should convert a PNG file to an ICO file with specified sizes', async () => {
    const pngFilePath = 'path/to/source.png';
    const icoFilePath = 'path/to/output.ico';
    const iconSizes = [(32, 32)];

    await convert_png_to_ico(pngFilePath, icoFilePath, iconSizes);

    // Assuming there is some way to verify if the ICO file was created successfully
    // For example, checking if the file exists at the specified path
    expect(icoFilePath).toBeExist(); // This is a hypothetical method to check file existence
  });

  it('should handle different icon sizes', async () => {
    const pngFilePath = 'path/to/source.png';
    const icoFilePath = 'path/to/output.ico';
    const iconSizes = [(32, 32), (64, 64), (128, 128)];

    await convert_png_to_ico(pngFilePath, icoFilePath, iconSizes);

    // Similarly, verify if the ICO file contains all the specified sizes
    // For example, checking if the file size matches the expected size
    expect(icoFilePath).toBeSizeOf(3 * /* expected size */); // Hypothetical method to check file size
  });
});
```

### Notes:
1. **Importing the Function**: Ensure that the `convert_png_to_ico` function is correctly imported from the appropriate module.
2. **File Existence Check**: The `expect(icoFilePath).toBeExist()` and `expect(icoFilePath).toBeSizeOf(expectedSize)` methods are hypothetical. You will need to implement these methods or use existing Jest matchers like `fs.existsSync` and `fs.statSync` to check file existence and size.
3. **Asynchronous Testing**: Since the `convert_png_to_ico` function appears to be asynchronous (as indicated by the `async` keyword in the Python version), make sure your Jest tests are also asynchronous. You can use `await` within the `it` blocks.

This should give you a good starting point for writing Jest test cases for your TypeScript functions.