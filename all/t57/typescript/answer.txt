To convert the given Python code into TypeScript, we need to ensure that the functionality remains consistent. Since TypeScript does not have a direct equivalent for the `PIL` library, we will assume that there is a similar library available in Node.js or a browser environment that can handle image conversions. For this example, let's use a hypothetical library called `sharp` which is commonly used for image processing in Node.js. We'll also define the types and interfaces necessary for the TypeScript code.

Here's the equivalent TypeScript code:

```typescript
import sharp from 'sharp'; // Assuming sharp is installed and can handle image conversions

interface IconSizes {
    width: number;
    height: number;
}

/**
 * Convert a PNG image file to an ICO format file.
 *
 * @param pngFilePath - Path to the source PNG image file.
 * @param icoFilePath - Path to save the ICO file.
 * @param iconSizes - List of tuples specifying the sizes to include in the ICO file.
 */
function convertPngToIco(pngFilePath: string, icoFilePath: string, iconSizes: IconSizes[] = [{ width: 32, height: 32 }]): void {
    // Open the image file using sharp
    sharp(pngFilePath)
        .resize(iconSizes[0].width, iconSizes[0].height)
        .toFile(icoFilePath, (err, info) => {
            if (err) {
                console.error('Error converting PNG to ICO:', err);
            } else {
                console.log('ICO file saved successfully:', icoFilePath);
            }
        });
}

// Example usage
convertPngToIco('path/to/source.png', 'path/to/output.ico');
```

### Explanation:
1. **Imports**: We import `sharp`, assuming it can handle image conversions.
2. **Interface Definition**: We define an `IconSizes` interface to represent the sizes.
3. **Function Definition**: The `convertPngToIco` function takes three parameters: `pngFilePath`, `icoFilePath`, and `iconSizes`. The default value for `iconSizes` is set to `[ { width: 32, height: 32 } ]`.
4. **Image Processing**: We use `sharp` to open the PNG file, resize it to the specified size, and then save it as an ICO file.
5. **Error Handling**: We handle errors during the conversion process and log success messages.

This TypeScript code maintains the same functionality as the Python code but uses `sharp` for image processing instead of `PIL`.