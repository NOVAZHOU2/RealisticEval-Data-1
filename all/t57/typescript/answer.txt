Sure! Below is the TypeScript equivalent for your Python function `convert_png_to_ico`. Note that TypeScript does not have built-in support for image processing like Python's PIL or Pillow libraries. Therefore, you would need to use an external library such as `sharp` to handle image conversion.

First, make sure you have the `sharp` package installed:

```sh
npm install sharp
```

Then, here is the TypeScript code:

```typescript
import * as sharp from 'sharp';

interface IconSize {
    width: number;
    height: number;
}

async function convertPngToIco(pngFilePath: string, icoFilePath: string, iconSizes: IconSize[] = [{ width: 32, height: 32 }]): Promise<void> {
    /**
     * Convert PNG images to ICO files
     * @param pngFilePath - Path to the source PNG image file.
     * @param icoFilePath - Path to save the ICO file.
     * @param iconSizes - List of objects specifying the sizes to include in the ICO file.
     */

    try {
        const promises = iconSizes.map(async (size) => {
            await sharp(pngFilePath)
                .resize(size.width, size.height)
                .toFile(`${icoFilePath}_${size.width}x${size.height}.ico`);
        });

        await Promise.all(promises);
        console.log('ICO files generated successfully.');
    } catch (error) {
        console.error('Error converting PNG to ICO:', error);
    }
}

// Example usage:
const pngFilePath = 'path/to/source.png';
const icoFilePath = 'path/to/save/ico';
const iconSizes: IconSize[] = [
    { width: 16, height: 16 },
    { width: 32, height: 32 },
    { width: 48, height: 48 },
    { width: 64, height: 64 },
];

convertPngToIco(pngFilePath, icoFilePath, iconSizes);
```

### Explanation:
1. **Importing Libraries**: We import the `sharp` library which is used for image processing.
2. **Interface Definition**: We define an interface `IconSize` to specify the dimensions of each icon size.
3. **Function Definition**: The `convertPngToIco` function takes three parameters: `pngFilePath`, `icoFilePath`, and `iconSizes`.
4. **Promise Handling**: We map over the `iconSizes` array and create a promise for each icon size. Each promise resizes the image using `sharp`, converts it to an ICO format, and saves it to the specified path.
5. **Await All Promises**: We use `Promise.all` to wait for all the resizing and saving operations to complete before logging a success message.
6. **Error Handling**: We catch any errors that occur during the process and log them.

This TypeScript code should work similarly to your original Python function, but with the necessary changes to accommodate TypeScript syntax and the use of an external library for image processing.