To convert the provided Python unittest test class to a Java JUnit test case, you need to follow these steps:

1. Define the package.
2. Create a test class that extends `junit.framework.TestCase`.
3. Convert the test methods to JUnit assertions.

Here's how you can do it:

```java
package org.real.temp;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.HashMap;
import java.util.Map;

public class Tester {

    @Test
    public void testHandleNestedData() {
        // Arrange
        Map<String, Object> input = new HashMap<>();
        input.put("key1", "value1".getBytes());
        input.put("key2", 42);
        input.put("key3", 3.14);

        Map<String, Object> expectedOutput = new HashMap<>();
        expectedOutput.put("key1", "value1");
        expectedOutput.put("key2", 42);
        expectedOutput.put("key3", 3.14);

        // Act
        Map<String, Object> actualOutput = handleNestedData(input);

        // Assert
        assertEquals(expectedOutput, actualOutput);
    }

    private Map<String, Object> handleNestedData(Map<String, Object> data) {
        Map<String, Object> result = new HashMap<>();

        for (Map.Entry<String, Object> entry : data.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof byte[]) {
                value = new String((byte[]) value);
            } else if (value instanceof Number) {
                Number number = (Number) value;
                value = number.doubleValue(); // Assuming we want to keep it as double for simplicity
            }

            result.put(key, value);
        }

        return result;
    }
}
```

### Explanation:

1. **Package Declaration**: The `@Test` annotation is used to mark the method as a test method in JUnit.
2. **Test Class**: The `Tester` class extends `junit.framework.TestCase`, which is part of the JUnit framework.
3. **Test Method**: The `testHandleNestedData` method contains the test logic. It sets up an input map, calls the `handleNestedData` method, and then asserts that the output matches the expected result.
4. **Private Method**: The `handleNestedData` method is defined within the same class to simulate the behavior of the original Python function.

Make sure you have the JUnit library included in your project dependencies. If you're using Maven, you can add the following dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.13.2</version>
    <scope>test</scope>
</dependency>
```

If you're using Gradle, add the following to your `build.gradle`:

```groovy
dependencies {
    testImplementation 'junit:junit:4.13.2'
}
```