Certainly! Here is the equivalent Java code for the given Python function, including appropriate Javadoc comments and type translations:

```java
import java.util.Map;

public class Answer {

    /**
     * Handles nested data structures (e.g., maps, lists, and enumerations), decodes bytes to UTF-8 strings,
     * and converts numbers to integers or floating-point numbers.
     *
     * @param data The input data object, which can be a map, list, byte array, number, or string.
     * @return The processed data after conversion.
     */
    public static Object handleNestedData(Object data) {
        if (data instanceof Map) {
            // If it's a Map, apply the function recursively to each value
            Map<?, ?> map = (Map<?, ?>) data;
            Map<Object, Object> newMap = new HashMap<>();
            for (Map.Entry<?, ?> entry : map.entrySet()) {
                newMap.put(entry.getKey(), handleNestedData(entry.getValue()));
            }
            return newMap;
        } else if (data instanceof List) {
            // If it's a List, apply the function recursively to each item
            List<?> list = (List<?>) data;
            List<Object> newList = new ArrayList<>();
            for (Object item : list) {
                newList.add(handleNestedData(item));
            }
            return newList;
        } else if (data instanceof byte[]) {
            // If it's bytes, decode to a UTF-8 string
            byte[] bytes = (byte[]) data;
            return new String(bytes, java.nio.charset.StandardCharsets.UTF_8);
        } else if (data instanceof Integer || data instanceof Float || data instanceof Double) {
            // If it's already a number, return as is
            return data;
        } else if (data instanceof String) {
            // Try to convert strings that represent integers or floats to their numeric forms
            String str = (String) data;
            try {
                return Integer.parseInt(str);
            } catch (NumberFormatException e) {
                try {
                    return Double.parseDouble(str);
                } catch (NumberFormatException ex) {
                    return str;  // Return the original string if it's not a number
                }
            }
        }
        return data;  // Return the input as is for any other type
    }

    public static void main(String[] args) {
        // Example usage
        Map<String, Object> data = new HashMap<>();
        data.put("a", 1);
        data.put("b", "2");
        data.put("c", new byte[]{99, 111, 100, 101});
        data.put("d", List.of(3, "4", "5.0"));
        data.put("e", Map.of("f", "6", "g", 7));

        System.out.println(handleNestedData(data));
    }
}
```

### Explanation:
1. **Javadoc Comments**: The Python docstring has been converted into a Javadoc comment block.
2. **Method Signature**: The Python function signature `def handle_nested_data(data: Dict) -> Dict:` is translated to `public static Object handleNestedData(Object data)`.
3. **Type Annotations**: The Python type annotation `Dict` is translated to `Map` in Java.
4. **Recursive Processing**: The recursive processing of nested structures (maps and lists) is preserved.
5. **Byte Array Handling**: The decoding of byte arrays to UTF-8 strings is handled using `new String(bytes, StandardCharsets.UTF_8)`.
6. **Number Conversion**: The conversion of strings to numbers is handled using `Integer.parseInt` and `Double.parseDouble`, with appropriate exception handling.
7. **Main Method**: An example usage is provided to demonstrate how the method can be called.

This Java code preserves the functionality and structure of the original Python code while adhering to Java's conventions and syntax.