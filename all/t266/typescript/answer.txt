Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function handleNestedData(data: any): any {
    if (typeof data === 'object' && data !== null) {
        if (Array.isArray(data)) {
            // If it's an array, apply the function recursively to each item
            return data.map(item => handleNestedData(item));
        } else {
            // If it's an object (dictionary), apply the function recursively to each value
            const result: {[key: string]: any} = {};
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    result[key] = handleNestedData(data[key]);
                }
            }
            return result;
        }
    } else if (typeof data === 'string') {
        // Try to convert strings that represent integers or floats to their numeric forms
        const intVal = parseInt(data);
        if (!isNaN(intVal)) {
            return intVal;
        }
        const floatVal = parseFloat(data);
        if (!isNaN(floatVal)) {
            return floatVal;
        }
        return data;  // Return the original string if it's not a number
    } else if (typeof data === 'number') {
        // If it's already a number, return as is
        return data;
    } else if (typeof data === 'bigint' || typeof data === 'boolean' || data === null) {
        // Return the value as is for other primitive types
        return data;
    } else if (Buffer.isBuffer(data)) {
        // If it's a Buffer (equivalent to bytes in Python), decode to a UTF-8 string
        return data.toString('utf8');
    }
    return data;  // Return the input as is for any other type
}
```

### Explanation:
1. **Type Checking**:
   - In TypeScript, we use `typeof` to check the type of variables.
   - We use `Array.isArray` to check if the data is an array.

2. **Dictionary Handling**:
   - For objects, we iterate over the keys using a `for...in` loop and apply the function recursively to each value.

3. **List Handling**:
   - For arrays, we use the `.map` method to apply the function recursively to each item.

4. **String Conversion**:
   - We attempt to parse the string as an integer or float using `parseInt` and `parseFloat`, respectively. If parsing fails, we return the original string.

5. **Number Handling**:
   - If the data is already a number, we return it as is.

6. **Buffer Handling**:
   - We use `Buffer.isBuffer` to check if the data is a buffer (equivalent to bytes in Python) and then decode it to a UTF-8 string.

7. **Other Types**:
   - For other primitive types (`bigint`, `boolean`, `null`), we return the value as is.

This TypeScript function maintains the same functionality and logic as the Python function, with appropriate adjustments for TypeScript's static type system and idiomatic practices.