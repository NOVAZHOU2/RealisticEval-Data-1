Certainly! Here is the equivalent Jest test class in TypeScript, including the necessary type annotations and Jest assertions:

```typescript
import { handleNestedData } from './path-to-handle-nested-data'; // Import the handleNestedData function

describe('TestHandleNestedData', () => {
    it('test simple dictionary', () => {
        const data = { name: b"Alice", age: "30" };
        const expected = { name: "Alice", age: 30 };
        expect(handleNestedData(data)).toEqual(expected);
    });

    it('test nested dictionary', () => {
        const data = { user: { name: b"Bob", details: { age: "25", height: "175.5" } } };
        const expected = { user: { name: "Bob", details: { age: 25, height: 175.5 } } };
        expect(handleNestedData(data)).toEqual(expected);
    });

    it('test list of mixed data types', () => {
        const data = ["100", b"200", 300.0, "400.5"];
        const expected = [100, "200", 300.0, 400.5];
        expect(handleNestedData(data)).toEqual(expected);
    });

    it('test incorrect byte decoding', () => {
        const data = { invalid_bytes: b"\xff\xfe\xfd\xfc" };
        expect(() => handleNestedData(data)).toThrow(/UnicodeDecodeError/);
    });

    it('test complex nested structure', () => {
        const data = {
            team: [
                { name: b"Charlie", scores: ["1000", "2000.2"] },
                { name: b"Daisy", skills: [b"Coding", "Design"], age: "22" }
            ]
        };
        const expected = {
            team: [
                { name: "Charlie", scores: [1000, 2000.2] },
                { name: "Daisy", skills: ["Coding", "Design"], age: 22 }
            ]
        };
        expect(handleNestedData(data)).toEqual(expected);
    });
});
```

### Explanation:
1. **Import Statements**:
   - Import the `handleNestedData` function from the appropriate module.

2. **Describe Block**:
   - Use the `describe` block to group the test cases under a single test suite named `TestHandleNestedData`.

3. **Test Cases**:
   - Each test case is defined using the `it` block, which takes a description and a test function.

4. **Assertions**:
   - Use `expect` and `toEqual` to compare the actual result with the expected result.
   - Use `toThrow` to check for exceptions.

5. **Byte Buffer Handling**:
   - Since TypeScript does not have a built-in `Buffer` type like Pythonâ€™s `bytes`, you need to import `Buffer` from the `buffer` module and use it appropriately.

### Example with Buffer Import:
If you need to use `Buffer` for byte handling, you can include the following import statement at the beginning of your file:

```typescript
import { Buffer } from 'buffer';
```

And adjust the test data accordingly:

```typescript
import { Buffer } from 'buffer';
import { handleNestedData } from './path-to-handle-nested-data'; // Import the handleNestedData function

describe('TestHandleNestedData', () => {
    it('test simple dictionary', () => {
        const data = { name: Buffer.from("Alice"), age: "30" };
        const expected = { name: "Alice", age: 30 };
        expect(handleNestedData(data)).toEqual(expected);
    });

    it('test nested dictionary', () => {
        const data = { user: { name: Buffer.from("Bob"), details: { age: "25", height: "175.5" } } };
        const expected = { user: { name: "Bob", details: { age: 25, height: 175.5 } } };
        expect(handleNestedData(data)).toEqual(expected);
    });

    it('test list of mixed data types', () => {
        const data = [Buffer.from("100"), Buffer.from("200"), 300.0, "400.5"];
        const expected = [100, "200", 300.0, 400.5];
        expect(handleNestedData(data)).toEqual(expected);
    });

    it('test incorrect byte decoding', () => {
        const data = { invalid_bytes: Buffer.from("\xff\xfe\xfd\xfc") };
        expect(() => handleNestedData(data)).toThrow(/UnicodeDecodeError/);
    });

    it('test complex nested structure', () => {
        const data = {
            team: [
                { name: Buffer.from("Charlie"), scores: ["1000", "2000.2"] },
                { name: Buffer.from("Daisy"), skills: [Buffer.from("Coding"), Buffer.from("Design")], age: "22" }
            ]
        };
        const expected = {
            team: [
                { name: "Charlie", scores: [1000, 2000.2] },
                { name: "Daisy", skills: ["Coding", "Design"], age: 22 }
            ]
        };
        expect(handleNestedData(data)).toEqual(expected);
    });
});
```

This TypeScript code preserves the original functionality and logic of the Python unittest test class, with appropriate adjustments for Jest and TypeScript's static type system.