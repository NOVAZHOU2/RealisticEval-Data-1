Sure, I can help you convert the given Python unittest test class to TypeScript using Jest. Below is an example of how you might structure your TypeScript test case for the `handle_nested_data` function.

First, ensure you have Jest installed in your project. If not, you can install it using npm:

```sh
npm install --save-dev jest
```

Next, create a TypeScript file for your tests, e.g., `handleNestedData.test.ts`. Here's how you can write the test cases:

```typescript
import { describe, expect, test } from '@jest/globals';
import { handle_nested_data } from './path-to-your-module'; // Adjust the path accordingly

describe('handle_nested_data', () => {
  test('should handle nested dictionaries correctly', () => {
    const input = {
      key1: 'value1',
      key2: {
        subKey1: 'subValue1',
        subKey2: 123,
      },
    };

    const expectedOutput = {
      key1: 'value1',
      key2: {
        subKey1: 'subValue1',
        subKey2: 123,
      },
    };

    expect(handle_nested_data(input)).toEqual(expectedOutput);
  });

  test('should handle nested lists correctly', () => {
    const input = {
      key1: 'value1',
      key2: [
        {
          subKey1: 'subValue1',
          subKey2: 123,
        },
        {
          subKey1: 'subValue2',
          subKey2: 456,
        },
      ],
    };

    const expectedOutput = {
      key1: 'value1',
      key2: [
        {
          subKey1: 'subValue1',
          subKey2: 123,
        },
        {
          subKey1: 'subValue2',
          subKey2: 456,
        },
      ],
    };

    expect(handle_nested_data(input)).toEqual(expectedOutput);
  });

  test('should handle nested enumerations correctly', () => {
    const input = {
      key1: 'value1',
      key2: ['item1', 'item2'],
    };

    const expectedOutput = {
      key1: 'value1',
      key2: ['item1', 'item2'],
    };

    expect(handle_nested_data(input)).toEqual(expectedOutput);
  });

  test('should decode bytes to UTF-8 strings', () => {
    const input = {
      key1: Buffer.from('value1').toString('utf-8'),
      key2: {
        subKey1: Buffer.from('subValue1').toString('utf-8'),
        subKey2: 123,
      },
    };

    const expectedOutput = {
      key1: 'value1',
      key2: {
        subKey1: 'subValue1',
        subKey2: 123,
      },
    };

    expect(handle_nested_data(input)).toEqual(expectedOutput);
  });

  test('should convert numbers to integers or floating point numbers', () => {
    const input = {
      key1: 'value1',
      key2: {
        subKey1: '123',
        subKey2: '456.78',
      },
    };

    const expectedOutput = {
      key1: 'value1',
      key2: {
        subKey1: 123,
        subKey2: 456.78,
      },
    };

    expect(handle_nested_data(input)).toEqual(expectedOutput);
  });
});
```

In this example, we're using Jest's `describe`, `test`, and `expect` functions to write our test cases. The `handle_nested_data` function is imported from the specified module, and we're testing various scenarios to ensure it behaves as expected.

Make sure to adjust the path to your actual module where the `handle_nested_data` function is defined. This should give you a good starting point for writing your TypeScript test cases using Jest.