Sure, hereâ€™s the equivalent C++ function signature along with the comments and documentation:

```cpp
#include <map>
#include <string>
#include <vector>

// This function handles nested data structures such as dictionaries, lists, and enumerations.
// It decodes bytes to UTF-8 strings and converts numbers to integers or floating-point numbers.
// Args:
//     data: A map representing the question object.
// Returns:
//     The converted question object.
std::map<std::string, std::string> handle_nested_data(const std::map<std::string, std::string>& data) {
    // Implementation goes here
    // ...

    return data; // Placeholder return, actual implementation should be provided
}
```

In this translation:
1. `from typing import Dict` is translated to including `<map>` and `<string>` headers in C++.
2. The function `handle_nested_data` is defined to take a `std::map<std::string, std::string>` as its argument and returns a `std::map<std::string, std::string>`.
3. The docstring is converted into C++ style comments.

Please note that the Python `Dict` type can hold various types of values, whereas in C++, we need to specify the exact types. In this example, I've assumed the dictionary keys and values are strings. If you have different types, you would need to adjust the function signature accordingly.