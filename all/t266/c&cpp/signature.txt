Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <variant>
#include <typeinfo>
#include <stdexcept>

// Define a variant type to handle different data types
using VarType = std::variant<std::map<std::string, VarType>, std::vector<VarType>, std::string, int, double>;

/**
 * Handle nested data structures (e.g., dictionaries, lists, and enumerations),
 * decode bytes to UTF-8 strings, and convert numbers to integers or floating-point numbers.
 *
 * @param data The input data object.
 * @return The processed data object after conversion.
 */
VarType handle_nested_data(const VarType& data) {
    if (std::holds_alternative<std::map<std::string, VarType>>(data)) {
        auto mapData = std::get<std::map<std::string, VarType>>(data);
        std::map<std::string, VarType> result;
        for (const auto& pair : mapData) {
            result[pair.first] = handle_nested_data(pair.second);
        }
        return result;
    } else if (std::holds_alternative<std::vector<VarType>>(data)) {
        auto vecData = std::get<std::vector<VarType>>(data);
        std::vector<VarType> result;
        for (const auto& item : vecData) {
            result.push_back(handle_nested_data(item));
        }
        return result;
    } else if (std::holds_alternative<std::string>(data)) {
        auto strData = std::get<std::string>(data);
        try {
            return std::stoi(strData);
        } catch (const std::invalid_argument&) {
            try {
                return std::stod(strData);
            } catch (const std::invalid_argument&) {
                return strData; // Return the original string if it's not a number
            }
        }
    } else if (std::holds_alternative<int>(data)) {
        return std::get<int>(data);
    } else if (std::holds_alternative<double>(data)) {
        return std::get<double>(data);
    }

    throw std::runtime_error("Unsupported data type");
}

int main() {
    // Example usage
    std::map<std::string, VarType> nestedData = {
        {"a", 1},
        {"b", "2"},
        {"c", std::vector<VarType>{
            3,
            "4",
            std::map<std::string, VarType>{
                {"d", "5"},
                {"e", 6}
            }
        }}
    };

    auto result = handle_nested_data(nestedData);

    // Print the result (for demonstration purposes)
    std::visit([](auto&& arg) {
        std::cout << arg << std::endl;
    }, result);

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The function `handle_nested_data` takes a `VarType` (a variant type) and returns a `VarType`.
   - The `VarType` is defined as a `std::variant` containing different possible types (dictionary, vector, string, integer, and double).

2. **Documentation**:
   - The function is documented with a multi-line comment block (`/* ... */`) that explains the purpose, arguments, and return values.

3. **Type Checking**:
   - `std::holds_alternative` and `std::get` are used to check and extract the type from the variant.

4. **Recursive Function**:
   - The function is called recursively on nested structures.

5. **String Conversion**:
   - `std::stoi` and `std::stod` are used to attempt conversion of strings to numbers.

6. **Error Handling**:
   - An exception is thrown if the data type is unsupported.

7. **Example Usage**:
   - The `main` function demonstrates how to use the `handle_nested_data` function with example data.

This code preserves the original functionality and structure of the Python code while adapting it to C++ syntax and conventions.