Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class is translated into C++ with appropriate assertions and structure.

### C++ Code Using Catch2

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro for defining test cases.

Here is the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <map>
#include <vector>
#include <string>
#include <variant>
#include <typeinfo>
#include <stdexcept>
#include <sstream>

// Define a variant type to handle different data types
using VarType = std::variant<std::map<std::string, VarType>, std::vector<VarType>, std::string, int, double>;

/**
 * Handle nested data structures (e.g., dictionaries, lists, and enumerations),
 * decode bytes to UTF-8 strings, and convert numbers to integers or floating-point numbers.
 *
 * @param data The input data object.
 * @return The processed data object after conversion.
 */
VarType handle_nested_data(const VarType& data) {
    if (std::holds_alternative<std::map<std::string, VarType>>(data)) {
        auto mapData = std::get<std::map<std::string, VarType>>(data);
        std::map<std::string, VarType> result;
        for (const auto& pair : mapData) {
            result[pair.first] = handle_nested_data(pair.second);
        }
        return result;
    } else if (std::holds_alternative<std::vector<VarType>>(data)) {
        auto vecData = std::get<std::vector<VarType>>(data);
        std::vector<VarType> result;
        for (const auto& item : vecData) {
            result.push_back(handle_nested_data(item));
        }
        return result;
    } else if (std::holds_alternative<std::string>(data)) {
        auto strData = std::get<std::string>(data);
        try {
            return std::stoi(strData);
        } catch (const std::invalid_argument&) {
            try {
                return std::stod(strData);
            } catch (const std::invalid_argument&) {
                return strData; // Return the original string if it's not a number
            }
        }
    } else if (std::holds_alternative<int>(data)) {
        return std::get<int>(data);
    } else if (std::holds_alternative<double>(data)) {
        return std::get<double>(data);
    }

    throw std::runtime_error("Unsupported data type");
}

TEST_CASE("Test handle_nested_data function") {
    SECTION("Simple dictionary") {
        std::map<std::string, VarType> data = {{"name", std::string("Alice", 5)}, {"age", "30"}};
        std::map<std::string, VarType> expected = {{"name", "Alice"}, {"age", 30}};
        REQUIRE(handle_nested_data(data) == expected);
    }

    SECTION("Nested dictionary") {
        std::map<std::string, VarType> nestedData = {
            {"user", std::map<std::string, VarType>{{"name", std::string("Bob", 3)}, {"details", std::map<std::string, VarType>{{"age", "25"}, {"height", "175.5"}}}}}
        };
        std::map<std::string, VarType> expected = {
            {"user", std::map<std::string, VarType>{{"name", "Bob"}, {"details", std::map<std::string, VarType>{{"age", 25}, {"height", 175.5}}}}}
        };
        REQUIRE(handle_nested_data(nestedData) == expected);
    }

    SECTION("List of mixed data types") {
        std::vector<VarType> data = {"100", std::string("200", 3), 300.0, "400.5"};
        std::vector<VarType> expected = {100, std::string("200", 3), 300.0, 400.5};
        REQUIRE(handle_nested_data(data) == expected);
    }

    SECTION("Incorrect byte decoding") {
        std::map<std::string, VarType> data = {{"invalid_bytes", std::string("\xff\xfe\xfd\xfc", 4)}};
        REQUIRE_THROWS_AS(handle_nested_data(data), std::invalid_argument);
    }

    SECTION("Complex nested structure") {
        std::map<std::string, VarType> data = {
            {"team", std::vector<VarType>{
                std::map<std::string, VarType>{{"name", std::string("Charlie", 7)}, {"scores", std::vector<VarType>{"1000", "2000.2"}}},
                std::map<std::string, VarType>{{"name", std::string("Daisy", 5)}, {"skills", std::vector<VarType>{std::string("Coding", 6), "Design"}}, {"age", "22"}}
            }}
        };
        std::map<std::string, VarType> expected = {
            {"team", std::vector<VarType>{
                std::map<std::string, VarType>{{"name", "Charlie"}, {"scores", std::vector<VarType>{1000, 2000.2}}},
                std::map<std::string, VarType>{{"name", "Daisy"}, {"skills", std::vector<VarType>{"Coding", "Design"}}, {"age", 22}}
            }}
        };
        REQUIRE(handle_nested_data(data) == expected);
    }
}
```

### Explanation:
1. **Header Inclusion**:
   - Include the necessary headers for Catch2 and standard libraries.

2. **Variant Type Definition**:
   - Define a `VarType` using `std::variant` to handle different data types.

3. **Function Definition**:
   - Define the `handle_nested_data` function to process nested data structures.

4. **Test Class**:
   - Use `TEST_CASE` and `SECTION` macros from Catch2 to define test cases.

5. **Test Cases**:
   - Each section corresponds to a specific test case from the Python unittest class.
   - Use `REQUIRE` for assertions to ensure the expected behavior.

6. **Assertions**:
   - `REQUIRE` is used for equality checks.
   - `REQUIRE_THROWS_AS` is used to check for exceptions.

### Example Data:
- The test cases are structured to match the Python test cases, ensuring that the functionality is preserved.

This code ensures that the tests are equivalent to the Python unittest class and uses appropriate assertions in Catch2.