To convert the provided Python unittest test class into an equivalent test class using Catch2 in C++, we need to create a similar structure for the tests and use Catch2â€™s assertion mechanisms. Below is the equivalent C++ code using Catch2:

```cpp
#include <catch2/catch.hpp>
#include <map>
#include <string>
#include <memory>

// Assuming the function handle_nested_data is defined elsewhere
// For the purpose of this example, let's define a mock version of it
std::map<std::string, std::shared_ptr<std::map<std::string, int>>> handle_nested_data(
    const std::map<std::string, std::shared_ptr<std::map<std::string, std::string>>>& data)
{
    // Mock implementation
    std::map<std::string, std::shared_ptr<std::map<std::string, int>>> result;
    for (const auto& item : data) {
        auto newItem = std::make_shared<std::map<std::string, int>>();
        for (const auto& innerItem : *item.second) {
            try {
                int intValue = std::stoi(innerItem.second);
                newItem->insert({innerItem.first, intValue});
            } catch (...) {
                // Handle non-convertible values if needed
            }
        }
        result.insert({item.first, newItem});
    }
    return result;
}

TEST_CASE("Test handle_nested_data function", "[handle_nested_data]") {
    // Test case 1: Basic conversion
    SECTION("Convert simple dictionary") {
        std::map<std::string, std::shared_ptr<std::map<std::string, std::string>>> input = {
            {"question1", std::make_shared<std::map<std::string, std::string>>({{"answer", "42"}})}
        };
        auto output = handle_nested_data(input);
        REQUIRE(output.size() == 1);
        REQUIRE(output["question1"]->size() == 1);
        REQUIRE((*output["question1"])["answer"] == 42);
    }

    // Test case 2: Nested conversion
    SECTION("Convert nested dictionary") {
        std::map<std::string, std::shared_ptr<std::map<std::string, std::string>>> input = {
            {"question2", std::make_shared<std::map<std::string, std::string>>({{"answer", "3.14"}, {"another_answer", "50"}})}
        };
        auto output = handle_nested_data(input);
        REQUIRE(output.size() == 1);
        REQUIRE(output["question2"]->size() == 2);
        REQUIRE((*output["question2"])["answer"] == 3.14);
        REQUIRE((*output["question2"])["another_answer"] == 50);
    }

    // Test case 3: Empty input
    SECTION("Empty input") {
        std::map<std::string, std::shared_ptr<std::map<std::string, std::string>>> input = {};
        auto output = handle_nested_data(input);
        REQUIRE(output.empty());
    }
}
```

### Explanation:
1. **Imports**: We include the necessary headers for Catch2 (`catch2/catch.hpp`) and the standard library components we need.
2. **Function Definition**: We define `handle_nested_data` with a mock implementation that converts strings to integers where possible.
3. **Test Cases**:
   - **Basic Conversion**: Tests the conversion of a simple dictionary.
   - **Nested Conversion**: Tests the conversion of a nested dictionary.
   - **Empty Input**: Tests the behavior with an empty input.

This setup ensures that the functionality and logic of the tests are preserved while adapting to the syntax and conventions of C++ and Catch2.