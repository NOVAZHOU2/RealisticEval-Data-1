Certainly! Below is the equivalent C++ code for the provided Python function. This code will handle nested data structures similar to the Python version:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <typeinfo>
#include <stdexcept>

// Function to handle nested data
std::variant<std::map<std::string, std::variant<int, double, std::string>>, std::vector<std::variant<int, double, std::string>>, std::string, int, double> handle_nested_data(const std::variant<std::map<std::string, std::variant<int, double, std::string>>, std::vector<std::variant<int, double, std::string>>, std::string, int, double>& data) {
    using VarType = std::variant<std::map<std::string, std::variant<int, double, std::string>>, std::vector<std::variant<int, double, std::string>>, std::string, int, double>;

    if (std::holds_alternative<std::map<std::string, VarType>>(data)) {
        auto mapData = std::get<std::map<std::string, VarType>>(data);
        std::map<std::string, VarType> result;
        for (const auto& pair : mapData) {
            result[pair.first] = handle_nested_data(pair.second);
        }
        return result;
    } else if (std::holds_alternative<std::vector<VarType>>(data)) {
        auto vecData = std::get<std::vector<VarType>>(data);
        std::vector<VarType> result;
        for (const auto& item : vecData) {
            result.push_back(handle_nested_data(item));
        }
        return result;
    } else if (std::holds_alternative<std::string>(data)) {
        auto strData = std::get<std::string>(data);
        try {
            return std::stoi(strData);
        } catch (const std::invalid_argument&) {
            try {
                return std::stod(strData);
            } catch (const std::invalid_argument&) {
                return strData; // Return the original string if it's not a number
            }
        }
    } else if (std::holds_alternative<int>(data)) {
        return std::get<int>(data);
    } else if (std::holds_alternative<double>(data)) {
        return std::get<double>(data);
    }

    throw std::runtime_error("Unsupported data type");
}

int main() {
    // Example usage
    std::map<std::string, std::variant<int, double, std::string>> nestedData = {
        {"a", 1},
        {"b", "2"},
        {"c", std::vector<std::variant<int, double, std::string>>{
            3,
            "4",
            std::map<std::string, std::variant<int, double, std::string>>{
                {"d", "5"},
                {"e", 6}
            }
        }}
    };

    auto result = handle_nested_data(nestedData);

    // Print the result (for demonstration purposes)
    std::visit([](auto&& arg) {
        std::cout << arg << std::endl;
    }, result);

    return 0;
}
```

### Explanation:
1. **Variant Type**: The `std::variant` type is used to represent multiple types in a single variable, similar to Python's `Union`.
2. **Type Checking**: `std::holds_alternative` and `std::get` are used to check and extract the type from the variant.
3. **Recursive Function**: The function is called recursively on nested structures.
4. **String Conversion**: `std::stoi` and `std::stod` are used to attempt conversion of strings to numbers.

This code should provide the same functionality as the Python version but adapted to C++ syntax and features.