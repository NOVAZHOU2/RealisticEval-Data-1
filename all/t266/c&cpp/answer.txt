Sure! Below is the equivalent C++ code for your Python function `handle_nested_data`. This code assumes that the input dictionary is represented using a custom data structure, such as a tree where each node can be either a string, an integer, a float, or another tree.

```cpp
#include <iostream>
#include <map>
#include <string>
#include <variant>

// Define a variant type to represent different types of values in the dictionary
using Value = std::variant<std::string, int, double, std::map<std::string, Value>>;

class NestedDataHandler {
public:
    // Function to handle nested data
    static Value handleNestedData(const Value& data) {
        return std::visit(handleVisitor{}, data);
    }

private:
    // Visitor class to handle different variants
    struct HandleVisitor {
        Value operator()(const std::string& str) const {
            // Decode bytes to UTF-8 strings (assuming already decoded)
            return str;
        }

        Value operator()(int num) const {
            // Convert numbers to integers
            return num;
        }

        Value operator()(double num) const {
            // Convert numbers to floating point numbers
            return num;
        }

        Value operator()(const std::map<std::string, Value>& dict) const {
            // Recursively handle nested dictionaries
            std::map<std::string, Value> result;
            for (const auto& [key, value] : dict) {
                result[key] = handleNestedData(value);
            }
            return result;
        }
    };

    static HandleVisitor handleVisitor;
};

// Initialize the visitor
NestedDataHandler::HandleVisitor NestedDataHandler::handleVisitor;

int main() {
    // Example usage
    std::map<std::string, Value> exampleData = {
        {"name", "John"},
        {"age", 30},
        {"scores", {{"math", 95}, {"science", 92}}}
    };

    Value handledData = NestedDataHandler::handleNestedData(exampleData);

    // Print the handled data (for demonstration purposes)
    std::cout << "Handled Data: " << handledData.index() << std::endl;

    return 0;
}
```

### Explanation:
1. **Value Type**: The `Value` type is defined using `std::variant`, which can hold one of several possible types: `std::string`, `int`, `double`, or another `std::map<std::string, Value>` representing a nested dictionary.
2. **NestedDataHandler Class**: This class contains a static method `handleNestedData` that uses `std::visit` with a visitor pattern to handle different types of values in the dictionary.
3. **HandleVisitor Struct**: This struct defines how each type should be handled:
   - Strings are returned as-is (assuming they are already decoded).
   - Integers and doubles are returned as-is.
   - Nested dictionaries are recursively processed.
4. **main Function**: An example usage of the `handleNestedData` function is provided to demonstrate its functionality.

This C++ code should provide a similar functionality to your Python function, handling nested data structures, decoding bytes to UTF-8 strings, and converting numbers to appropriate types.