Certainly! Here is the equivalent JavaScript code with the function signature and JSDoc comments:

```javascript
/**
 * Handles nested data structures (e.g., objects, arrays) by decoding bytes to UTF-8 strings and converting numbers to integers or floating-point numbers.
 * @param {Object} data - The data object to be processed.
 * @returns {Object} - The processed data.
 */
function handleNestedData(data) {
    if (typeof data === 'object' && data !== null) {
        if (Array.isArray(data)) {
            // If it's an array, apply the function recursively to each item
            return data.map(item => handleNestedData(item));
        } else if (data.constructor === Object) {
            // If it's an object, apply the function recursively to each value
            const result = {};
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    result[key] = handleNestedData(data[key]);
                }
            }
            return result;
        }
    } else if (typeof data === 'string') {
        // Try to parse the string as a number
        const num = Number(data);
        if (!isNaN(num)) {
            return num;
        }
        // Decode bytes if the string is in base64 format
        try {
            const buffer = Buffer.from(data, 'base64');
            return buffer.toString('utf8');
        } catch (error) {
            // Return the original string if it's not a valid base64 encoded string
            return data;
        }
    } else if (typeof data === 'number') {
        // If it's already a number, return as is
        return data;
    }
    // Return the input as is for any other type
    return data;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block provides a description of the function, its parameters, and its return type.
   - The `@param` tag describes the parameter `data` and its type.
   - The `@returns` tag describes the return value and its type.

2. **Function Signature**:
   - The function `handleNestedData` takes one argument `data` of type `Object`.

3. **Implementation**:
   - The function checks if `data` is an object or an array and applies the function recursively.
   - It handles strings by attempting to parse them as numbers and decoding base64-encoded strings.
   - It returns numbers directly if they are already numbers.
   - For any other type, it returns the input as is.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JavaScript documentation standards using JSDoc.