Sure! Here is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function handleNestedData(data) {
    if (typeof data === 'object' && data !== null) {
        if (Array.isArray(data)) {
            // If it's an array, apply the function recursively to each item
            return data.map(item => handleNestedData(item));
        } else if (data.constructor === Object) {
            // If it's an object, apply the function recursively to each value
            const result = {};
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    result[key] = handleNestedData(data[key]);
                }
            }
            return result;
        }
    } else if (typeof data === 'string') {
        // Try to parse the string as a number
        const num = Number(data);
        if (!isNaN(num)) {
            return num;
        }
        // Decode bytes if the string is in base64 format
        try {
            const buffer = Buffer.from(data, 'base64');
            return buffer.toString('utf8');
        } catch (error) {
            // Return the original string if it's not a valid base64 encoded string
            return data;
        }
    } else if (typeof data === 'number') {
        // If it's already a number, return as is
        return data;
    }
    // Return the input as is for any other type
    return data;
}
```

### Explanation:
1. **Object and Array Handling**:
   - The `typeof` operator checks if `data` is an object.
   - `Array.isArray(data)` checks if `data` is an array.
   - For objects, we iterate over the keys using a `for...in` loop and apply the function recursively.

2. **String Handling**:
   - We attempt to parse the string as a number using `Number(data)`.
   - If the parsed number is not `NaN`, we return it.
   - If the string is in base64 format, we decode it using `Buffer.from(data, 'base64').toString('utf8')`.

3. **Number Handling**:
   - If `data` is already a number, we return it directly.

4. **Default Case**:
   - For any other type, we return the input as is.

This JavaScript function should behave similarly to the provided Python function.