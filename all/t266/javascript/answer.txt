Certainly! Below is the equivalent JavaScript code that matches the functionality, logic, and structure of the provided Python code:

```javascript
function handleNestedData(data) {
    if (typeof data === 'object' && data !== null) {
        if (Array.isArray(data)) {
            // If it's an array, apply the function recursively to each item
            return data.map(item => handleNestedData(item));
        } else if (data.constructor === Object) {
            // If it's an object, apply the function recursively to each value
            const result = {};
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    result[key] = handleNestedData(data[key]);
                }
            }
            return result;
        }
    } else if (typeof data === 'string') {
        // Try to parse the string to a number
        const num = Number(data);
        if (!isNaN(num)) {
            return num;
        }
        // Decode if it's a base64 encoded string
        try {
            const decoded = atob(data);
            return decoded;
        } catch (e) {
            // Return the original string if it's not a valid base64 string
            return data;
        }
    } else if (typeof data === 'number') {
        // If it's a number, return as is
        return data;
    }
    // Return the input as is for any other type
    return data;
}
```

### Explanation:
1. **Dictionary**: The JavaScript code uses `typeof` and `constructor` checks to determine if the data is an object. It then iterates over the keys using a `for...in` loop.
2. **List**: The JavaScript code checks if the data is an array using `Array.isArray` and applies the function recursively to each item using `.map()`.
3. **Bytes**: Since JavaScript does not have a direct equivalent of Python's `bytes`, we assume the string is base64 encoded and attempt to decode it using `atob()`. If decoding fails, the original string is returned.
4. **Numbers and Strings**: JavaScript uses `Number()` to attempt conversion from a string to a number. If the conversion results in `NaN`, the original string is returned.

This JavaScript function should behave similarly to the provided Python function.