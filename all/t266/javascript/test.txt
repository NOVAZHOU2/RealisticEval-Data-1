Sure! Below is the equivalent JavaScript test case using Jest for your Python unittest test class. Note that I'll assume you have some basic structure for your `handleNestedData` function in JavaScript.

```javascript
const { handleNestedData } = require('./path_to_your_module'); // Adjust the path accordingly

describe('handleNestedData', () => {
  it('should convert nested data types correctly', () => {
    const input = {
      name: 'John',
      age: 30,
      address: {
        street: '123 Main St',
        city: 'Anytown',
        zip: Buffer.from([49, 50, 51]) // Example byte array
      },
      scores: [85, 90, 95],
      isActive: true
    };

    const expectedOutput = {
      name: 'John',
      age: 30,
      address: {
        street: '123 Main St',
        city: 'Anytown',
        zip: '123' // Converted from byte array to string
      },
      scores: [85, 90, 95],
      isActive: true
    };

    const result = handleNestedData(input);
    expect(result).toEqual(expectedOutput);
  });

  it('should handle edge cases correctly', () => {
    const input = {
      name: Buffer.from([74, 111, 110]), // Example byte array
      age: null,
      address: null,
      scores: [],
      isActive: undefined
    };

    const expectedOutput = {
      name: 'Jon', // Converted from byte array to string
      age: null,
      address: null,
      scores: [],
      isActive: undefined
    };

    const result = handleNestedData(input);
    expect(result).toEqual(expectedOutput);
  });
});
```

### Explanation:
1. **Importing the Function**: The `handleNestedData` function is imported from your module.
2. **Describing the Test Suite**: The `describe` block groups related tests together.
3. **Individual Tests**: Each `it` block contains a specific test case.
   - **First Test Case**: Checks if nested data types like strings, numbers, objects, arrays, and booleans are handled correctly.
   - **Second Test Case**: Handles edge cases where inputs might be `null`, `undefined`, or empty values.
4. **Expectations**: The `expect` function is used to assert that the output of `handleNestedData` matches the expected result.

Make sure to adjust the path to your module (`./path_to_your_module`) and implement the `handleNestedData` function in JavaScript according to your requirements.