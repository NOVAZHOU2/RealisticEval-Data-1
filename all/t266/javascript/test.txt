Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will ensure that the functionality and logic of the tests are maintained, and I will document any necessary changes due to language differences between Python and JavaScript.

### Python Code:
```python
import unittest
from enum import Enum
from numbers import Number

class TestHandleNestedData(unittest.TestCase):
    def test_simple_dictionary(self):
        data = {"name": b"Alice", "age": "30"}
        expected = {"name": "Alice", "age": 30}
        self.assertEqual(handle_nested_data(data), expected)

    def test_nested_dictionary(self):
        data = {"user": {"name": b"Bob", "details": {"age": "25", "height": "175.5"}}}
        expected = {"user": {"name": "Bob", "details": {"age": 25, "height": 175.5}}}
        self.assertEqual(handle_nested_data(data), expected)

    def test_list_of_mixed_data_types(self):
        data = ["100", b"200", 300.0, "400.5"]
        expected = [100, "200", 300.0, 400.5]
        self.assertEqual(handle_nested_data(data), expected)

    def test_incorrect_byte_decoding(self):
        data = {"invalid_bytes": b"\xff\xfe\xfd\xfc"}
        with self.assertRaises(UnicodeDecodeError):
            handle_nested_data(data)

    def test_complex_nested_structure(self):
        data = {
            "team": [
                {"name": b"Charlie", "scores": ["1000", "2000.2"]},
                {"name": b"Daisy", "skills": [b"Coding", "Design"], "age": "22"}
            ]
        }
        expected = {
            "team": [
                {"name": "Charlie", "scores": [1000, 2000.2]},
                {"name": "Daisy", "skills": ["Coding", "Design"], "age": 22}
            ]
        }
        self.assertEqual(handle_nested_data(data), expected)
```

### Equivalent Jest Test Suite:

```javascript
const { handleNestedData } = require('./path/to/handleNestedData');

describe('TestHandleNestedData', () => {
    describe('test_simple_dictionary', () => {
        it('should correctly handle a simple dictionary', () => {
            const data = { name: Buffer.from('Alice'), age: '30' };
            const expected = { name: 'Alice', age: 30 };
            expect(handleNestedData(data)).toEqual(expected);
        });
    });

    describe('test_nested_dictionary', () => {
        it('should correctly handle a nested dictionary', () => {
            const data = { user: { name: Buffer.from('Bob'), details: { age: '25', height: '175.5' } } };
            const expected = { user: { name: 'Bob', details: { age: 25, height: 175.5 } } };
            expect(handleNestedData(data)).toEqual(expected);
        });
    });

    describe('test_list_of_mixed_data_types', () => {
        it('should correctly handle a list of mixed data types', () => {
            const data = ['100', Buffer.from('200'), 300.0, '400.5'];
            const expected = [100, '200', 300.0, 400.5];
            expect(handleNestedData(data)).toEqual(expected);
        });
    });

    describe('test_incorrect_byte_decoding', () => {
        it('should throw an error when decoding invalid bytes', () => {
            const data = { invalid_bytes: Buffer.from('\xff\xfe\xfd\xfc') };
            expect(() => handleNestedData(data)).toThrow(/UnicodeDecodeError/);
        });
    });

    describe('test_complex_nested_structure', () => {
        it('should correctly handle a complex nested structure', () => {
            const data = {
                team: [
                    { name: Buffer.from('Charlie'), scores: ['1000', '2000.2'] },
                    { name: Buffer.from('Daisy'), skills: [Buffer.from('Coding'), 'Design'], age: '22' }
                ]
            };
            const expected = {
                team: [
                    { name: 'Charlie', scores: [1000, 2000.2] },
                    { name: 'Daisy', skills: ['Coding', 'Design'], age: 22 }
                ]
            };
            expect(handleNestedData(data)).toEqual(expected);
        });
    });
});
```

### Explanation:
1. **Imports and Function Definitions**:
   - The `handleNestedData` function is imported from the appropriate module.
   - Jest does not require importing `Enum` or `Number` since these are built-in JavaScript constructs.

2. **Test Structure**:
   - Each test case is defined within a `describe` block, which groups related tests together.
   - Each test case uses `it` to define the test scenario and `expect` for assertions.

3. **Assertions**:
   - `expect` is used with `toEqual` to compare the actual and expected values.
   - `toThrow` is used to check if a function throws an error.

4. **Byte Handling**:
   - In JavaScript, byte strings are typically handled using `Buffer` objects from Node.js.
   - `Buffer.from` is used to create byte buffers from strings.

5. **Error Handling**:
   - The `toThrow` matcher is used to check if the function throws an error when handling invalid byte data.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adapting to JavaScript conventions and Jest's testing framework.