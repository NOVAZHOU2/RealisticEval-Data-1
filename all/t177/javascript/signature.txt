Here's the equivalent JavaScript code, with the function signatures and comments converted to JSDoc format:

```javascript
const crypto = require('crypto');

/**
 * Generates a 16-byte random salt value, hashes the provided password with that salt
 * using the SHA-256 hash algorithm, and returns the combined salt and hashed password.
 *
 * @param {string} password - The password to be hashed.
 * @returns {Buffer} A byte array containing the salt followed by the hashed password.
 */
function hashPasswordWithSalt(password) {
    // Generate a 16-byte random salt
    const salt = generateRandomSalt(16);
    // Hash the password with the salt using SHA-256
    const hashedPassword = hashWithSHA256(password, salt);
    // Combine the salt and the hashed password
    const saltAndHashedPassword = Buffer.concat([salt, hashedPassword]);
    return saltAndHashedPassword;
}

/**
 * Generates a random salt of the specified length.
 *
 * @param {number} length - The length of the salt in bytes.
 * @returns {Buffer} A byte array containing the generated salt.
 */
function generateRandomSalt(length) {
    return crypto.randomBytes(length);
}

/**
 * Hashes the provided password with the given salt using the SHA-256 hash algorithm.
 *
 * @param {string} password - The password to be hashed.
 * @param {Buffer} salt - The salt to be used in the hashing process.
 * @returns {Buffer} A byte array containing the hashed password.
 */
function hashWithSHA256(password, salt) {
    // Create a new sha256 hash object
    const hasher = crypto.createHash('sha256');
    // Update the hash object with the salt
    hasher.update(salt);
    // Hash the password
    hasher.update(password);
    // Return the hashed password
    return hasher.digest();
}
```

### Key Changes:
1. **Function Names**: Converted from snake_case to camelCase.
2. **JSDoc Comments**: Updated Python docstrings to JSDoc format.
3. **Buffer Concatenation**: Used `Buffer.concat()` for combining buffers.
4. **Crypto Library**: Used Node.js `crypto` module for hashing and random byte generation.