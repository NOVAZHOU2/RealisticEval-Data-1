Hereâ€™s the TypeScript version of the provided Python function, including comments and type annotations:

```typescript
import * as crypto from 'crypto';

/**
 * Generates a 16-byte random salt value, hashes the provided password with that salt
 * using the SHA-256 hash algorithm, and returns the combined salt and hashed password.
 * 
 * @param password - The password to be hashed.
 * @returns A Buffer containing the salt followed by the hashed password.
 */
function hashPasswordWithSalt(password: string): Buffer {
    // Generate a 16-byte random salt
    const salt = generateRandomSalt(16);
    // Hash the password with the salt using SHA-256
    const hashedPassword = hashWithSHA256(password, salt);
    // Combine the salt and the hashed password
    const saltAndHashedPassword = Buffer.concat([salt, hashedPassword]);
    return saltAndHashedPassword;
}

/**
 * Generates a random salt of the specified length.
 * 
 * @param length - The length of the salt in bytes.
 * @returns A Buffer containing the generated salt.
 */
function generateRandomSalt(length: number): Buffer {
    return crypto.randomBytes(length);
}

/**
 * Hashes the provided password with the given salt using the SHA-256 hash algorithm.
 * 
 * @param password - The password to be hashed.
 * @param salt - The salt to be used in the hashing process.
 * @returns A Buffer containing the hashed password.
 */
function hashWithSHA256(password: string, salt: Buffer): Buffer {
    const hasher = crypto.createHash('sha256');
    // Update the hash with the salt
    hasher.update(salt);
    // Hash the password
    hasher.update(password, 'utf-8');
    // Return the hashed password
    return hasher.digest();
}
```

### Key Adjustments:
- Python's `bytes` type is replaced with TypeScript's `Buffer` for binary data.
- Python's `os.urandom` is replaced with `crypto.randomBytes` from Node.js's built-in `crypto` module.
- Docstrings have been converted to JSDoc style comments.
- Function names and parameter names are adjusted to follow TypeScript conventions (camelCase).