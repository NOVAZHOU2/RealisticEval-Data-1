Here’s the conversion of the provided TypeScript code into Python. The Python version maintains the same functionality while adhering to Python syntax and conventions.
python
from typing import List, Dict

# Define the Coordinates type to represent a point in 2D space
Coordinates = Dict[str, float]

def get_bezier_point(t: float, points: List[Coordinates]) -> Coordinates:
    """ 
    Recursively calculates a point on a Bézier curve using De Casteljau's algorithm.

    Args:
        t: A value between 0 and 1 representing the interpolation parameter.
        points: A list of control points defining the Bézier curve.

    Returns:
        The calculated Coordinates at the given parameter t.
    """
    # If there's only one point, return it as the result
    if len(points) == 1:
        return points[0]
    
    # Create a list to hold the points for the next iteration
    next_points: List[Coordinates] = []

    # Calculate the intermediate points for the next iteration
    for i in range(len(points) - 1):
        x = (1 - t) * points[i]['x'] + t * points[i + 1]['x']
        y = (1 - t) * points[i]['y'] + t * points[i + 1]['y']
        next_points.append({'x': x, 'y': y})
    
    # Recursively call get_bezier_point with the new points
    return get_bezier_point(t, next_points)

# Example usage
if __name__ == "__main__":
    control_points = [{'x': 0, 'y': 0}, {'x': 1, 'y': 2}, {'x': 2, 'y': 0}]
    t = 0.5
    point = get_bezier_point(t, control_points)
    print(point)  # Output: {'x': 1.0, 'y': 1.0}
Explanation:
Imports:
The List and Dict types from the typing module are imported to facilitate type hinting.
Type Definition:
The Coordinates type is defined as a dictionary with string keys and float values.
Function Definition:
The function get_bezier_point is defined, taking a float t and a list of Coordinates.
The function docstring provides a brief explanation of the function’s purpose, parameters, and return type.
Base Case:
If there’s only one point in the list, it is returned as the result.
Intermediate Point Calculation:
A list called next_points is created to hold the calculated intermediate points.
The loop iterates through the points to compute the x and y coordinates of the new points using the De Casteljau algorithm.
Recursive Call:
The function calls itself recursively with the newly calculated points.
Example Usage:
An example usage section is included for testing, demonstrating how to call the get_bezier_point function with a set of control points and a value for t.
This Python implementation replicates the functionality of the original TypeScript code while adhering to Python's syntax and conventions.