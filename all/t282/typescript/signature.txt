Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
import { isArray } from "util";

/**
 * Converts a multi-dimensional array into a one-dimensional array.
 * 
 * @param multiDimArray - A multi-dimensional array (nested array).
 * @returns A one-dimensional array containing all elements of the input.
 */
function flattenArray(multiDimArray: any[]): number[] | any[] {
    let flatList: number[] | any[] = [];

    function flatten(subArray: any[]): void {
        for (const item of subArray) {
            if (isArray(item)) {
                flatten(item);  // Recursively flatten if the current item is an array
            } else {
                flatList.push(item);  // Append the non-array item to the flatList
            }
        }
    }

    flatten(multiDimArray);
    return flatList;
}

// Example usage
const multiDimArray = [1, [2, [3, 4], 5], 6];
console.log(flattenArray(multiDimArray));  // Output: [1, 2, 3, 4, 5, 6]
```

### Explanation:
1. **Function Definition**:
   - The `flattenArray` function takes a multi-dimensional array (`multiDimArray`) as an argument and returns a one-dimensional array.

2. **Type Annotations**:
   - `multiDimArray: any[]`: Represents a multi-dimensional array with potentially mixed types.
   - `flatList: number[] | any[]`: Represents the resulting flattened array. Since the input can contain any type, the output could be either a `number[]` or `any[]`.

3. **JSDoc Documentation**:
   - The JSDoc comment block provides detailed documentation for the function, including parameter descriptions and return type.

4. **Helper Function**:
   - The `flatten` function is defined within `flattenArray` and recursively flattens the array.
   - `isArray(item)` is used to check if the current item is an array.

5. **Appending Elements**:
   - Non-array items are appended to `flatList`.

### Importing `isArray`
- To use `isArray`, you can import it from the `util` module. However, if you prefer a more modern approach, you can use `Array.isArray` directly.

Here is the updated version without the import statement:

```typescript
/**
 * Converts a multi-dimensional array into a one-dimensional array.
 * 
 * @param multiDimArray - A multi-dimensional array (nested array).
 * @returns A one-dimensional array containing all elements of the input.
 */
function flattenArray(multiDimArray: any[]): number[] | any[] {
    let flatList: number[] | any[] = [];

    function flatten(subArray: any[]): void {
        for (const item of subArray) {
            if (Array.isArray(item)) {
                flatten(item);  // Recursively flatten if the current item is an array
            } else {
                flatList.push(item);  // Append the non-array item to the flatList
            }
        }
    }

    flatten(multiDimArray);
    return flatList;
}

// Example usage
const multiDimArray = [1, [2, [3, 4], 5], 6];
console.log(flattenArray(multiDimArray));  // Output: [1, 2, 3, 4, 5, 6]
```

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate JSDoc documentation and type annotations.