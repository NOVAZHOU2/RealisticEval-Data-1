Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function flattenArray(multiDimArray: any[]): number[] | any[] {
    let flatList: number[] | any[] = [];

    function flatten(subArray: any[]): void {
        for (const item of subArray) {
            if (Array.isArray(item)) {
                flatten(item);  // Recursively flatten if the current item is an array
            } else {
                flatList.push(item);  // Append the non-array item to the flatList
            }
        }
    }

    flatten(multiDimArray);
    return flatList;
}

// Example usage
const multiDimArray = [1, [2, [3, 4], 5], 6];
console.log(flattenArray(multiDimArray));  // Output: [1, 2, 3, 4, 5, 6]
```

### Explanation:
1. **Function Definition**: The `flattenArray` function takes a multi-dimensional array (`multiDimArray`) as an argument and returns a one-dimensional array.
2. **Type Annotations**:
   - `multiDimArray: any[]`: This represents a multi-dimensional array with potentially mixed types.
   - `flatList: number[] | any[]`: This represents the resulting flattened array. Since the input can contain any type, the output could be either a `number[]` or `any[]`.
3. **Helper Function**: The `flatten` function is defined within `flattenArray` and recursively flattens the array.
4. **Type Checking**: `Array.isArray(item)` is used to check if the current item is an array.
5. **Appending Elements**: Non-array items are appended to `flatList`.

This TypeScript code maintains the same functionality and logic as the Python code, adapting it to TypeScript's static type system and idiomatic practices.