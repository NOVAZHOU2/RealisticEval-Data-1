Here is your Python function converted to TypeScript:

```typescript
function flattenArray(multiDimArray: any[]): any[] {
    return [].concat(...multiDimArray.map(item => Array.isArray(item) ? flattenArray(item) : item));
}
```

This TypeScript function does exactly the same thing as your Python function - it flattens a multi-dimensional array into a one-dimensional array. It uses JavaScript's `Array.prototype.concat()` and `Array.prototype.map()` methods for this purpose. The spread operator (`...`) is used to expand the result of `map()`. If an item in the array is itself an array, we recursively call `flattenArray()` on it.

Please note that you need to define the type of `item` as `any`, because it can be either a single value or another nested array. If you have more specific knowledge about what kind of data might be inside your arrays, you should replace `any` with more appropriate type(s).