Sure! Hereâ€™s the equivalent TypeScript code that maintains the same functionality and structure as the provided Python code:

```typescript
function flattenArray(multiDimArray: any[]): number[] {
    let flatList: number[] = [];

    function flatten(subArray: any[]): void {
        for (const item of subArray) {
            if (Array.isArray(item)) {
                flatten(item);  // Recursively flatten if the current item is an array
            } else {
                flatList.push(item);  // Append the non-array item to the flatList
            }
        }
    }

    flatten(multiDimArray);
    return flatList;
}

// Example usage
const multiDimArray = [1, [2, [3, 4], 5], 6];
console.log(flattenArray(multiDimArray));  // Output: [1, 2, 3, 4, 5, 6]
```

### Explanation:
1. **Function Definition**:
   - The `flattenArray` function takes a multi-dimensional array (`any[]`) and returns a one-dimensional array (`number[]`).
   
2. **Type Annotations**:
   - `multiDimArray` is typed as `any[]`, which can hold arrays or numbers.
   - `flatList` is typed as `number[]`, assuming the nested lists only contain numbers.

3. **Recursive Function**:
   - The inner `flatten` function is defined with a parameter `subArray` typed as `any[]`.
   - It uses `Array.isArray(item)` to check if an item is an array, which is equivalent to `isinstance(item, list)` in Python.

4. **Appending Elements**:
   - If the item is not an array, it is appended to `flatList`.

5. **Example Usage**:
   - The example demonstrates how to call `flattenArray` with a multi-dimensional array and prints the flattened result.

This TypeScript code follows the same logic and structure as the original Python code but adapts it to TypeScript's static typing and array handling conventions.