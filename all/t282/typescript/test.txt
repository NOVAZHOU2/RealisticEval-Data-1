Sure! Below is the equivalent TypeScript code using Jest for testing the `flatten_array` function. First, we'll define the `flatten_array` function in TypeScript and then write the Jest test cases.

### TypeScript Code

First, let's define the `flatten_array` function:

```typescript
import { flattenDeep } from 'lodash';

/**
 * Convert a multi-dimensional array into a one-dimensional array.
 * @param multiDimArray - A multi-dimensional list (nested list).
 * @returns A one-dimensional list containing all elements of the input.
 */
function flattenArray(multiDimArray: any[]): any[] {
  return flattenDeep(multiDimArray);
}

export { flattenArray };
```

Now, let's create the Jest test file:

```typescript
import { flattenArray } from './path-to-flatten-array'; // Adjust the path as needed

describe('flattenArray', () => {
  it('flattens a simple nested array', () => {
    const input = [1, 2, [3, 4], [5, [6]]];
    const expectedOutput = [1, 2, 3, 4, 5, 6];
    expect(flattenArray(input)).toEqual(expectedOutput);
  });

  it('handles an empty array', () => {
    const input: any[] = [];
    const expectedOutput: any[] = [];
    expect(flattenArray(input)).toEqual(expectedOutput);
  });

  it('handles a flat array', () => {
    const input = [1, 2, 3, 4, 5, 6];
    const expectedOutput = [1, 2, 3, 4, 5, 6];
    expect(flattenArray(input)).toEqual(expectedOutput);
  });

  it('handles deeply nested arrays', () => {
    const input = [1, [2, [3, [4, [5]]]]];
    const expectedOutput = [1, 2, 3, 4, 5];
    expect(flattenArray(input)).toEqual(expectedOutput);
  });

  it('handles arrays with mixed types', () => {
    const input = [1, [2, 3], ['a', ['b', [true, null]]]];
    const expectedOutput = [1, 2, 3, 'a', 'b', true, null];
    expect(flattenArray(input)).toEqual(expectedOutput);
  });
});
```

### Explanation:

1. **Function Definition**: 
   - We use the `flattenDeep` function from lodash to handle the flattening of the multi-dimensional array.
   - This function is imported at the beginning of the file.

2. **Test Cases**:
   - Each test case uses Jest's `expect` and `toEqual` assertions to check if the output matches the expected result.
   - Test cases include:
     - Flattening a simple nested array.
     - Handling an empty array.
     - Handling a flat array.
     - Handling deeply nested arrays.
     - Handling arrays with mixed types.

This setup ensures that the functionality and logic of the tests are preserved while accounting for the differences between Python and TypeScript.