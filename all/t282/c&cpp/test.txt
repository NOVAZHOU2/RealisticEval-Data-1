Sure, here is an equivalent C++ test case using Catch2 for the provided Python unittest test class:

```cpp
#include <vector>
#include <catch2/catch_test_macros.hpp>

// Function to flatten a multi-dimensional array into a one-dimensional array
std::vector<int> flattenArray(const std::vector<std::vector<int>>& multiDimArray) {
    std::vector<int> result;
    for (const auto& row : multiDimArray) {
        for (int element : row) {
            result.push_back(element);
        }
    }
    return result;
}

TEST_CASE("Flatten Array", "[flattenArray]") {
    // Test Case 1
    std::vector<std::vector<int>> multiDimArray1 = {{1, 2, 3}, {4, 5}, {6}};
    std::vector<int> expected1 = {1, 2, 3, 4, 5, 6};
    REQUIRE(flattenArray(multiDimArray1) == expected1);

    // Test Case 2
    std::vector<std::vector<int>> multiDimArray2 = {};
    std::vector<int> expected2 = {};
    REQUIRE(flattenArray(multiDimArray2) == expected2);

    // Test Case 3
    std::vector<std::vector<int>> multiDimArray3 = {{7}, {}, {8, 9}};
    std::vector<int> expected3 = {7, 8, 9};
    REQUIRE(flattenArray(multiDimArray3) == expected3);

    // Test Case 4
    std::vector<std::vector<int>> multiDimArray4 = {{10, 11}, {12, 13, 14}, {15}};
    std::vector<int> expected4 = {10, 11, 12, 13, 14, 15};
    REQUIRE(flattenArray(multiDimArray4) == expected4);
}
```

In this C++ code:
- We define a function `flattenArray` that takes a two-dimensional vector of integers and returns a one-dimensional vector of integers.
- We then write several test cases using Catch2's `TEST_CASE` macro to verify the correctness of the `flattenArray` function.

To run these tests, you need to have Catch2 installed in your project. If you're using a CMake project, you can add Catch2 as a subdirectory or install it via your package manager.