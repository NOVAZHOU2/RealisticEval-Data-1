Here is the equivalent C++ code:

```c++
#include <vector>
using namespace std;

vector<int> flattenArray(const vector<vector<int>>& multiDimArray) {
    vector<int> flatArray;
    for (const auto& row : multiDimArray) {
        for (int num : row) {
            flatArray.push_back(num);
        }
    }
    return flatArray;
}
```

And here is the equivalent C code:

```c
#include <stdlib.h>

int* flattenArray(int** multiDimArray, int rows, int* cols, int* resultSize) {
    *resultSize = 0;
    for (int i=0; i<rows; ++i)
        *resultSize += cols[i];
    
    int* flatArray = malloc(sizeof(int)*(*resultSize));
    if (!flatArray) {
        // Handle error
        return NULL;
    }

    int index = 0;
    for (int i=0; i<rows; ++i) {
        for (int j=0; j<cols[i]; ++j) {
            flatArray[index++] = multiDimArray[i][j];
        }
    }

    return flatArray;
}
```
Please note that in C++, `std::vector` is used for dynamic arrays and it automatically manages memory. In C, you need to manually allocate and free memory using `malloc()` and `free()`. Also, in C++, the size of each sub-array is passed as an argument, because unlike Python lists, C arrays do not store their size information. In C, you would typically pass the sizes of the sub-arrays as an additional parameter to the function.

In both codes, I've assumed that the multi-dimensional array consists of integers. If your actual use case requires different types, you will need to adjust the data types accordingly.