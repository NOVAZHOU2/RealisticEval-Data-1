Certainly! Below is the equivalent C++ code that maintains the same functionality, logic, and structure as the provided Python code:

```cpp
#include <iostream>
#include <vector>

// Function to flatten a multi-dimensional vector into a one-dimensional vector
std::vector<int> flatten_array(const std::vector<std::vector<int>>& multi_dim_array) {
    std::vector<int> flat_list;

    // Helper function to recursively flatten the multi-dimensional vector
    void flatten(const std::vector<std::vector<int>>& sub_array) {
        for (const auto& item : sub_array) {
            flatten(item);  // Recursively flatten if the current item is a vector
        }
    }

    // Main loop to process each element in the multi-dimensional array
    void flatten(const std::vector<int>& sub_array) {
        for (int item : sub_array) {
            flat_list.push_back(item);  // Append the non-vector item to the flat_list
        }
    }

    // Start the flattening process
    flatten(multi_dim_array);

    return flat_list;
}

int main() {
    // Example usage
    std::vector<std::vector<int>> multi_dim_array = {{1, 2}, {3, 4, {5, 6}}, {7}};
    std::vector<int> result = flatten_array(multi_dim_array);

    // Output the flattened array
    for (int num : result) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Declaration**: The `flatten_array` function takes a multi-dimensional vector (`std::vector<std::vector<int>>`) and returns a one-dimensional vector (`std::vector<int>`).
2. **Helper Function**: The `flatten` function is defined within `flatten_array` to handle the recursion. It has two overloads:
   - One for handling nested vectors (`std::vector<std::vector<int>>`).
   - Another for handling the base case (a simple vector of integers).
3. **Recursive Call**: The helper function `flatten` is called recursively to handle nested vectors.
4. **Appending Elements**: Elements are appended to `flat_list` using `push_back`.
5. **Example Usage**: In the `main` function, an example multi-dimensional array is created, flattened, and the result is printed.

This code closely mirrors the functionality and structure of the original Python code while adhering to C++ syntax and conventions.