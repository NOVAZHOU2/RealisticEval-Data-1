Certainly! Below is the equivalent C++ code for the given Python function `flatten_array`. This C++ code will flatten a multi-dimensional array into a one-dimensional array, maintaining the same functionality and logic as the Python version:

```cpp
#include <iostream>
#include <vector>

// Function to flatten a multi-dimensional vector into a one-dimensional vector
std::vector<int> flatten_array(const std::vector<std::vector<int>>& multi_dim_array) {
    std::vector<int> flat_list;

    // Helper function to recursively flatten the array
    void flatten(const std::vector<std::vector<int>>& sub_array) {
        for (const auto& item : sub_array) {
            flatten(item);  // Recursively flatten if the current item is a vector
        }
    }

    // Wrapper function to handle the initial call with the main array
    flatten(multi_dim_array);

    // After recursion, append all elements from the nested vectors
    for (const auto& sub_vector : multi_dim_array) {
        for (int element : sub_vector) {
            flat_list.push_back(element);  // Append the non-vector item to the flat_list
        }
    }

    return flat_list;
}

int main() {
    // Example usage
    std::vector<std::vector<int>> multi_dim_array = {{1, 2, {3, 4}}, {5, 6}, {7, {8, 9}}};
    std::vector<int> result = flatten_array(multi_dim_array);
    
    // Output the flattened array
    for (int num : result) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Definition**: The `flatten_array` function takes a multi-dimensional vector (`std::vector<std::vector<int>>`) as input and returns a one-dimensional vector (`std::vector<int>`).
2. **Helper Function**: The `flatten` helper function is defined within `flatten_array` to recursively flatten the array. It uses a loop to iterate through each sub-array and calls itself recursively if the current item is another vector.
3. **Appending Elements**: After the recursive flattening, the main function iterates through the multi-dimensional array and appends all elements to the `flat_list`.
4. **Example Usage**: In the `main` function, an example multi-dimensional array is provided, and the flattened result is printed to demonstrate the functionality.

This approach ensures that the logic and structure of the original Python code are preserved while adapting to C++ syntax and features.