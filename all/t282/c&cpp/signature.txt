Sure! Here is the equivalent C++ code signature with comments:

```cpp
#include <vector>
#include <iostream>

/**
 * Convert a multi-dimensional array into a one-dimensional array.
 *
 * @param multiDimArray The multi-dimensional vector (nested vector).
 * @return A one-dimensional vector containing all elements of the input.
 */
std::vector<int> flattenArray(const std::vector<std::vector<int>>& multiDimArray);
```

In this C++ version, I've used `std::vector` instead of Python's `List`. The function `flattenArray` takes a constant reference to a nested `std::vector<int>` and returns a `std::vector<int>`. This is because we typically pass large data structures like vectors by const reference in C++ to avoid unnecessary copying.

If your multi-dimensional array can contain different types of elements, you might want to use `std::any` or create a custom type for the elements. Hereâ€™s an example using `std::any`:

```cpp
#include <vector>
#include <any>
#include <iostream>

/**
 * Convert a multi-dimensional array into a one-dimensional array.
 *
 * @param multiDimArray The multi-dimensional vector (nested vector) containing any type of elements.
 * @return A one-dimensional vector containing all elements of the input.
 */
std::vector<std::any> flattenArray(const std::vector<std::vector<std::any>>& multiDimArray);
```

This version allows the multi-dimensional array to contain elements of any type.