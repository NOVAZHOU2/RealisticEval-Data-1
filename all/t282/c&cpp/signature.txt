Here is the converted C++ code:

```cpp
#include <vector>
#include <iostream>

/**
 * Convert a multi-dimensional vector into a one-dimensional vector.
 * 
 * @param multi_dim_array A multi-dimensional vector (nested vectors).
 * 
 * @return A one-dimensional vector containing all elements of the input.
 */
std::vector<int> flatten_array(const std::vector<std::vector<int>>& multi_dim_array) {
    std::vector<int> flattened;

    for (const auto& sub_array : multi_dim_array) {
        for (int elem : sub_array) {
            flattened.push_back(elem);
        }
    }

    return flattened;
}
```

Note that in this C++ version, I've assumed that the elements of the nested lists are integers (`int`). If you need to handle different types, you might consider using templates or another approach depending on your specific requirements.