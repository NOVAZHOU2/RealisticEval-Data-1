Sure! Below is the equivalent JavaScript test case using Jest for the provided Python `unittest` test class.

```javascript
const flattenArray = require('./flattenArray'); // Assuming the function is in a file named flattenArray.js

describe('Flatten Array', () => {
  it('should flatten a two-level nested array', () => {
    const input = [[1, 2], [3, 4]];
    const expectedOutput = [1, 2, 3, 4];
    expect(flattenArray(input)).toEqual(expectedOutput);
  });

  it('should handle an empty array', () => {
    const input = [];
    const expectedOutput = [];
    expect(flattenArray(input)).toEqual(expectedOutput);
  });

  it('should flatten a three-level nested array', () => {
    const input = [[1, 2], [3, [4, 5]]];
    const expectedOutput = [1, 2, 3, 4, 5];
    expect(flattenArray(input)).toEqual(expectedOutput);
  });

  it('should handle an array with non-array elements', () => {
    const input = [1, 'a', [2, null], { key: 'value' }];
    const expectedOutput = [1, 'a', 2, null, { key: 'value' }];
    expect(flattenArray(input)).toEqual(expectedOutput);
  });
});
```

### Explanation:
- **`describe`**: Groups related tests together.
- **`it`**: Defines a single test case.
- **`expect`**: Asserts that the result of the function matches the expected output.
- **`toEqual`**: Checks if the two values are equal.

Make sure you have Jest installed and configured in your project. If not, you can install it using npm:

```sh
npm install --save-dev jest
```

And then run your tests with:

```sh
npx jest
```