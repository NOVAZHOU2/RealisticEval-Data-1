Sure, let's start by converting the provided Python function `flatten_array` to JavaScript and then write the corresponding Jest test cases.

### Step 1: Convert Python Function to JavaScript

Here's the JavaScript version of the `flatten_array` function:

```javascript
function flattenArray(multiDimArray) {
    return multiDimArray.reduce((acc, val) => 
        Array.isArray(val) ? acc.concat(flattenArray(val)) : acc.concat(val), []);
}
```

### Step 2: Write Jest Test Cases

Now, we will write the Jest test cases for the `flattenArray` function. 

```javascript
// Import the function to be tested
const { flattenArray } = require('./path/to/flattenArray');

describe('flattenArray', () => {
    it('should flatten a simple nested array', () => {
        const multiDimArray = [1, 2, [3, 4], 5];
        expect(flattenArray(multiDimArray)).toEqual([1, 2, 3, 4, 5]);
    });

    it('should handle deeply nested arrays', () => {
        const multiDimArray = [1, [2, [3, [4]]]];
        expect(flattenArray(multiDimArray)).toEqual([1, 2, 3, 4]);
    });

    it('should handle empty arrays', () => {
        const multiDimArray = [];
        expect(flattenArray(multiDimArray)).toEqual([]);
    });

    it('should handle arrays with mixed types', () => {
        const multiDimArray = [1, [2, 'three', [4, null]], true];
        expect(flattenArray(multiDimArray)).toEqual([1, 2, 'three', 4, null, true]);
    });

    it('should handle arrays with arrays as elements', () => {
        const multiDimArray = [[1, 2], [3, 4]];
        expect(flattenArray(multiDimArray)).toEqual([1, 2, 3, 4]);
    });
});
```

### Explanation of Conversion:

1. **Function Conversion**:
   - The `flatten_array` function in Python uses recursion to flatten the array. In JavaScript, we use the `reduce` method along with recursion to achieve the same effect.
   - The `Array.isArray` function checks if the current element is an array and recursively flattens it.

2. **Test Case Conversion**:
   - Each `it` block represents a test case.
   - We use `expect` and `toEqual` to assert that the output of `flattenArray` matches the expected result.
   - Different scenarios are covered, including simple nested arrays, deeply nested arrays, empty arrays, and arrays with mixed types.

3. **Imports**:
   - In JavaScript, you need to import the function to be tested. Adjust the path in `require` based on your project structure.

This setup ensures that the functionality and logic of the tests are preserved while adapting to the Jest testing framework.