Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function flattenArray(multiDimArray) {
    /**
     * Flattens a multi-dimensional array into a one-dimensional array.
     *
     * @param {Array} multiDimArray - A multi-dimensional array (nested array).
     * @returns {Array} A one-dimensional array containing all elements of the input.
     */
    let flatList = [];

    function flatten(subArray) {
        for (let item of subArray) {
            if (Array.isArray(item)) {
                flatten(item);  // Recursively flatten if the current item is an array
            } else {
                flatList.push(item);  // Append the non-array item to the flatList
            }
        }
    }

    flatten(multiDimArray);
    return flatList;
}
```

### Explanation:
1. **Function Declaration**: The `flattenArray` function is declared with a docstring that explains its purpose, arguments, and return value.
2. **Initialization**: `flatList` is initialized as an empty array to store the flattened result.
3. **Recursive Function**: The inner `flatten` function is defined to handle the recursion. It checks each element of the `subArray`. If an element is an array (`Array.isArray(item)`), it calls itself recursively; otherwise, it appends the element to `flatList`.
4. **Invocation**: The `flatten` function is called initially with the `multiDimArray` to start the flattening process.
5. **Return Value**: Finally, the `flatList` is returned as the one-dimensional array containing all elements from the input multi-dimensional array.

This JavaScript code faithfully replicates the behavior of the original Python code.