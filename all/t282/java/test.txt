Sure, let's create a JUnit test class equivalent to the given Python unittest class. First, we need to define the `flatten_array` method in Java. Then, we will write the corresponding JUnit test cases.

### Step 1: Define the `flatten_array` Method in Java

Create a Java class named `ArrayFlattener` that contains the `flattenArray` method:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ArrayFlattener {

    /**
     * Converts a multi-dimensional array into a one-dimensional array.
     *
     * @param multiDimArray A multi-dimensional list (nested list).
     * @return A one-dimensional list containing all elements of the input.
     */
    public static List<Integer> flattenArray(List<List<Integer>> multiDimArray) {
        List<Integer> flattened = new ArrayList<>();
        for (List<Integer> sublist : multiDimArray) {
            flattened.addAll(sublist);
        }
        return flattened;
    }
}
```

### Step 2: Write the JUnit Test Class

Now, create a JUnit test class named `Tester` in the package `org.real.temp`:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.Arrays;
import java.util.List;

public class Tester {

    private static final ArrayFlattener FLATTENER = new ArrayFlattener();

    @Test
    public void testFlattenArray() {
        // Test case 1: Empty list
        List<List<Integer>> emptyList = Arrays.asList();
        List<Integer> expectedEmptyResult = Arrays.asList();
        assertEquals(expectedEmptyResult, FLATTENER.flattenArray(emptyList));

        // Test case 2: Single element
        List<List<Integer>> singleElement = Arrays.asList(Arrays.asList(1));
        List<Integer> expectedSingleElementResult = Arrays.asList(1);
        assertEquals(expectedSingleElementResult, FLATTENER.flattenArray(singleElement));

        // Test case 3: Nested lists with multiple elements
        List<List<Integer>> nestedLists = Arrays.asList(
            Arrays.asList(1, 2),
            Arrays.asList(3, 4)
        );
        List<Integer> expectedNestedListsResult = Arrays.asList(1, 2, 3, 4);
        assertEquals(expectedNestedListsResult, FLATTENER.flattenArray(nestedLists));

        // Test case 4: Deeply nested lists
        List<List<Integer>> deeplyNestedLists = Arrays.asList(
            Arrays.asList(1, 2),
            Arrays.asList(3, 4, 5),
            Arrays.asList(6, 7, 8, 9)
        );
        List<Integer> expectedDeeplyNestedListsResult = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
        assertEquals(expectedDeeplyNestedListsResult, FLATTENER.flattenArray(deeplyNestedLists));
    }
}
```

### Explanation:
- **Class Definition**: The `ArrayFlattener` class contains the `flattenArray` method which takes a list of lists (`List<List<Integer>>`) and returns a flattened list (`List<Integer>`).
- **JUnit Test Class**: The `Tester` class uses JUnit's `@Test` annotation to define test methods. It includes assertions to check if the `flattenArray` method works as expected for various test cases.
- **Assertions**: The `assertEquals` method is used to verify that the actual result matches the expected result.

This setup ensures that the functionality and logic of the tests are preserved while adapting to Java's syntax and structure.