Sure, here's the equivalent Java code for the given Python function:

```java
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

public class ArrayFlattener {

    /**
     * Convert a multi-dimensional list into a one-dimensional list.
     * 
     * @param multiDimArray A multi-dimensional list (nested list).
     * @return A one-dimensional list containing all elements of the input.
     */
    public static List<Object> flattenArray(List<List<Object>> multiDimArray) {
        List<Object> flattened = new ArrayList<>();
        for (List<Object> subList : multiDimArray) {
            flattened.addAll(subList);
        }
        return flattened;
    }

    // Example usage
    public static void main(String[] args) {
        List<List<Object>> multiDimArray = Arrays.asList(
            Arrays.asList(1, 2, 3),
            Arrays.asList(4, 5, 6),
            Arrays.asList(7, 8, 9)
        );

        List<Object> flattenedArray = flattenArray(multiDimArray);
        System.out.println(flattenedArray);
    }
}
```

### Explanation:
1. **Import Statements**: The necessary imports (`List`, `ArrayList`, and `Arrays`) are added at the top.

2. **Class Definition**: The `ArrayFlattener` class is defined with a static method `flattenArray`.

3. **Javadoc Comments**: The Javadoc comment is placed above the method definition to describe its purpose, arguments, and return value.

4. **Method Signature**: The method `flattenArray` takes a `List<List<Object>>` as an argument and returns a `List<Object>`.

5. **Implementation**: Inside the method, a new `ArrayList` is created to hold the flattened elements. A loop iterates through each sublist and adds all elements to the `flattened` list.

6. **Example Usage**: An example usage is provided in the `main` method to demonstrate how to call the `flattenArray` method and print the result.