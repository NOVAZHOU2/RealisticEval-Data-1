Here is the equivalent Java code with the same functionality and comments:

```java
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Main {

    /**
     * Convert a multi-dimensional array into a one-dimensional array
     *
     * @param multiDimArray A multi-dimensional list (nested list).
     * @return A one-dimensional list containing all elements of the input.
     */
    public static List<Object> flattenArray(List<?> multiDimArray) {
        List<Object> flatList = new ArrayList<>();
        for (Object element : multiDimArray) {
            if (element instanceof List) {
                flatList.addAll(flattenArray((List<?>) element));
            } else {
                flatList.add(element);
            }
        }
        return flatList;
    }

    public static void main(String[] args) {
        List<List<Integer>> nestedList = Arrays.asList(
                Arrays.asList(1, 2, 3),
                Arrays.asList(4, 5),
                Arrays.asList(6, 7, 8)
        );
        
        System.out.println(flattenArray(nestedList)); // Output: [1, 2, 3, 4, 5, 6, 7, 8]
    }
}
```

This Java function `flattenArray` takes in a `List` of any type (`List<?>`) and returns a flattened version of it as a `List<Object>`. The `main` method demonstrates how to use this function with a nested list of integers. Note that this implementation assumes that all elements in the nested lists are also lists or non-list objects. If you have more complex data types within your nested lists, you may need to adjust the implementation accordingly.