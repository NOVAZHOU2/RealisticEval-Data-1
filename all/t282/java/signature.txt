Certainly! Here is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and type translations:

```java
import java.util.ArrayList;
import java.util.List;

public class Answer {

    /**
     * Converts a multi-dimensional array into a one-dimensional array.
     *
     * @param multiDimArray A multi-dimensional list (nested list).
     * @return A one-dimensional list containing all elements of the input.
     */
    public static List<Object> flattenArray(List<?> multiDimArray) {
        List<Object> flatList = new ArrayList<>();

        flatten(multiDimArray, flatList);
        return flatList;
    }

    /**
     * Helper method to recursively flatten the multi-dimensional array.
     *
     * @param subArray The current sublist being processed.
     * @param flatList The resulting one-dimensional list.
     */
    private static void flatten(List<?> subArray, List<Object> flatList) {
        for (Object item : subArray) {
            if (item instanceof List) {
                // Recursively flatten if the current item is a list
                flatten((List<?>) item, flatList);
            } else {
                // Append the non-list item to the flatList
                flatList.add(item);
            }
        }
    }

    public static void main(String[] args) {
        // Example usage
        List<Object> multiDimArray = new ArrayList<>();
        multiDimArray.add(new ArrayList<>(List.of(1, 2, new ArrayList<>(List.of(3)))));
        multiDimArray.add(new ArrayList<>(List.of(4, 5)));
        multiDimArray.add(6);

        List<Object> flatList = flattenArray(multiDimArray);
        System.out.println(flatList);  // Output: [1, 2, 3, 4, 5, 6]
    }
}
```

### Explanation:
1. **Import Statements**: The necessary import statements are included at the beginning of the file.
   - `import java.util.ArrayList;`
   - `import java.util.List;`

2. **Class Definition**: The class `Answer` is defined with the necessary methods.

3. **Javadoc Comments**:
   - The `flattenArray` method has a Javadoc comment that describes its purpose, arguments, and return value.
   - The `flatten` helper method also has a Javadoc comment describing its purpose and parameters.

4. **Method `flattenArray`**:
   - This method takes a multi-dimensional list (`List<?>`) and returns a flattened one-dimensional list (`List<Object>`).
   - It initializes an empty `ArrayList` named `flatList`.

5. **Helper Method `flatten`**:
   - This method is a private helper that performs the recursive flattening.
   - It takes two parameters: the current sublist (`subArray`) and the resulting flat list (`flatList`).

6. **Type Handling**:
   - The method signature uses `List<?>` to indicate that the input list can contain any type of elements.
   - The return type is `List<Object>` to accommodate any type of elements.

7. **Main Method**:
   - An example usage is provided in the `main` method to demonstrate how the `flattenArray` method can be called and used.

This Java code preserves the functionality and structure of the original Python code while adhering to Java's syntax and conventions.