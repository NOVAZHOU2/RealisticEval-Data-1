Here's how you can convert your Python code to Java:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Answer {

    public static List<Object> flattenArray(List<?> multiDimArray) {
        List<Object> flatList = new ArrayList<>();
        
        for(Object obj : multiDimArray) {
            if(obj instanceof List<?>) {
                flatList.addAll(flattenArray((List<?>)obj));
            } else {
                flatList.add(obj);
            }
        }

        return flatList;
    }
}
```

Please note that Java doesn't have native support for variable-length argument lists like Python does. Therefore, we need to use `Object` type in our method signature and check at runtime whether each item is itself a `List`. Also, unlike Python, Java does not support list comprehension which makes it slightly more verbose.

This Java function will take a multi-dimensional list (or any other collection), flatten it, and return a single-dimensional list. The `flattenArray()` method uses recursion to handle nested lists. If an element is found to be a list, it calls itself with this list until no more nesting is detected. Then it adds the items to the `flatList`.