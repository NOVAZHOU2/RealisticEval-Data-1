Here's the JavaScript version of the provided C++ code for Base64 encoding:

```javascript
function base64Encode(data) {
    const base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    let encodedString = '';
    let val = 0;
    let valb = -6;

    for (const c of data) {
        val = (val << 8) + c;
        valb += 8;
        while (valb >= 0) {
            encodedString += base64Chars[(val >> valb) & 0x3F];
            valb -= 6;
        }
    }

    if (valb > -6) {
        encodedString += base64Chars[((val << 8) >> (valb + 8)) & 0x3F];
    }

    while (encodedString.length % 4) {
        encodedString += '=';
    }

    return encodedString;
}

// Example usage:
const data = [104, 101, 108, 108, 111]; // ASCII values for "hello"
console.log(base64Encode(data)); // Outputs: aGVsbG8=
```

### Key Changes and Considerations:
1. **Function Declaration**: Used the `function` keyword for defining the function.
2. **String Concatenation**: Used `+=` for string concatenation in JavaScript.
3. **Array Iteration**: Used `for...of` for iterating through the input array.
4. **Array Length**: Used `length` property instead of `size()` method to get the length of the string.
5. **Data Type**: JavaScript uses `number` type for all numbers, including those representing characters in this case, so we can work directly with them. 

This code retains the same logic and functionality as the original C++ implementation while adhering to JavaScript best practices.