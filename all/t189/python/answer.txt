Here's the equivalent Python code for the provided C++ function that performs Base64 encoding. The logic is preserved while adapting it to Python syntax and conventions.
Converted Python Code:
python
def base64_encode(data):
    """Encode a bytes-like object to Base64."""
    base64_chars = (
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz"
        "0123456789+/"
    )
    
    encoded_string = []
    val = 0
    valb = -6

    for c in data:
        val = (val << 8) + c
        valb += 8
        while valb >= 0:
            encoded_string.append(base64_chars[(val >> valb) & 0x3F])
            valb -= 6
    
    if valb > -6:
        encoded_string.append(base64_chars[((val << 8) >> (valb + 8)) & 0x3F])
    
    # Add padding with '=' to make the length a multiple of 4
    while len(encoded_string) % 4:
        encoded_string.append('=')

    return ''.join(encoded_string)

# Example usage:
if __name__ == "__main__":
    data = bytearray([72, 101, 108, 108, 111])  # "Hello"
    encoded = base64_encode(data)
    print(encoded)  # Output: SGVsbG8=
Explanation of Changes:
Function Definition:
The C++ function base64_encode is directly translated to a Python function with the same name.
Input Parameter:
The input parameter const std::vector<unsigned char>& data is translated to a Python parameter data. In Python, we typically use a bytes or bytearray to represent byte data.
String Construction:
Instead of using std::string in C++, we use a list in Python to accumulate the Base64 characters. This is efficient as appending to a list is generally faster than concatenating strings repeatedly.
Character Mapping:
The base64_chars array from C++ is a string in Python, which is easier to manage and use.
Loop Logic:
The loops and logic from C++ are translated directly into Python, retaining the bit manipulation and encoding process.
Padding:
Padding with = is handled by checking the length of encoded_string and appending = as necessary to ensure the final length is a multiple of 4.
Output:
The resulting list of characters is joined into a single string using ''.join(encoded_string) before being returned.
This code will perform the same Base64 encoding as the original C++ implementation. You can test it using the example provided in the if __name__ == "__main__": block, which encodes the string "Hello".