To convert the provided Java JUnit test cases into Python unittest test cases, we'll follow Python's unittest framework conventions. Below is the converted code:
Python Unit Test Code
python
import unittest

class TestBinarySearch(unittest.TestCase):

    def test_binary_search_target_present(self):
        sorted_array = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        target = 5
        expected_index = 4  # Index of target 5
        result_index = Answer.binary_search(sorted_array, target)
        self.assertEqual(expected_index, result_index)

    def test_binary_search_target_not_present(self):
        sorted_array = [1, 3, 5, 7, 9]
        target = 4
        expected_index = -1  # Target not found
        result_index = Answer.binary_search(sorted_array, target)
        self.assertEqual(expected_index, result_index)

    def test_binary_search_target_at_beginning(self):
        sorted_array = [1, 2, 3, 4, 5]
        target = 1
        expected_index = 0  # Index of target 1
        result_index = Answer.binary_search(sorted_array, target)
        self.assertEqual(expected_index, result_index)

    def test_binary_search_target_at_end(self):
        sorted_array = [2, 4, 6, 8, 10]
        target = 10
        expected_index = 4  # Index of target 10
        result_index = Answer.binary_search(sorted_array, target)
        self.assertEqual(expected_index, result_index)

    def test_binary_search_empty_array(self):
        sorted_array = []
        target = 1
        expected_index = -1  # Target not found in empty array
        result_index = Answer.binary_search(sorted_array, target)
        self.assertEqual(expected_index, result_index)

    def test_binary_search_negative_numbers(self):
        sorted_array = [-10, -5, 0, 5, 10]
        target = -5
        expected_index = 1  # Index of target -5
        result_index = Answer.binary_search(sorted_array, target)
        self.assertEqual(expected_index, result_index)

if __name__ == '__main__':
    unittest.main()
Explanation of the Conversion
Imports:
The necessary module unittest is imported at the beginning of the code.
Class Definition:
The Tester class in Java is renamed to TestBinarySearch, which follows Python's naming conventions for test classes.
Test Method Naming:
Each test method name is converted from Java's camel case (e.g., testBinarySearch_TargetPresent) to a more Pythonic format (e.g., test_binary_search_target_present) using underscores.
Assertions:
The assertEquals method in Java is replaced with self.assertEqual in Python.
Running the Tests:
The if __name__ == '__main__': unittest.main() block is added to allow the script to be run directly. This will execute all test cases defined in the TestBinarySearch class.
Overall Structure:
The overall structure is maintained, with each test case corresponding to the functionality of the original Java tests.
Usage
You can save this code in a file (e.g., test_answer.py) and run it in a Python environment to execute the unit tests. The tests will check the correctness of the binary_search function from the Answer class, assuming that the class is defined elsewhere in your project.