To convert the provided Java function into Python code, we will follow Python's syntax and conventions while preserving the functionality of the original Java method. Below is the translated code:
Python Code
python
class Answer:
    @staticmethod
    def binary_search(array: list[int], target: int) -> int:
        """
        Performs binary search on a sorted array to find the index of a target value.

        :param array: The sorted array to search
        :param target: The value to search for
        :return: The index of the target value if found, otherwise -1
        """
        left = 0                    # Starting index of the search range
        right = len(array) - 1      # Ending index of the search range
        
        while left <= right:
            mid = left + (right - left) // 2  # Calculate the mid index
            
            # Check if the target is at mid
            if array[mid] == target:
                return mid  # Target found, return index
            
            # If target is greater, ignore left half
            elif array[mid] < target:
                left = mid + 1  # Narrow search to the right half
            
            # If target is smaller, ignore right half
            else:
                right = mid - 1  # Narrow search to the left half
        
        return -1  # Target not found, return -1
Explanation of the Conversion:
Class Definition:
The Java class Answer remains the same in Python, defining a class named Answer.
Static Method:
In Python, we use the @staticmethod decorator to define a static method, similar to Java's public static.
Function Signature:
The method binarySearch is converted to binary_search to adhere to Python's naming conventions.
The parameters are annotated with types: array: list[int] for a list of integers and target: int for the target integer.
Docstring:
A docstring is provided in Python to describe the method's purpose, parameters, and return value, similar to Java comments.
Array Length:
Instead of array.length in Java, we use len(array) in Python to get the length of the list.
Integer Division:
The mid index calculation uses // for integer division in Python, which is necessary to ensure the result is an integer.
Return Value:
The return statements in Python function the same way as in Java.
Usage Example
You can use the Answer.binary_search method as follows:
python
if __name__ == '__main__':
    sorted_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    target_value = 7
    result_index = Answer.binary_search(sorted_array, target_value)
    
    if result_index != -1:
        print(f"Target found at index: {result_index}")
    else:
        print("Target not found.")
This snippet initializes a sorted array and searches for a target value, printing the index if found. Let me know if you need further assistance!