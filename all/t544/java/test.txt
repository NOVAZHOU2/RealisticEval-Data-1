Sure! Below is the equivalent Java JUnit test case for the provided JavaScript Jest test case. The Java class is named `Tester` and it's located in the package `org.real.temp`.

First, let's define the `filterOutEvenNumbers` method in Java:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Tester {

    /**
     * Filters out all even numbers from an array.
     *
     * @param array - The array of numbers to filter.
     * @return A new list containing only the odd numbers.
     */
    public static List<Integer> filterOutEvenNumbers(List<Integer> array) {
        List<Integer> result = new ArrayList<>();
        for (Integer num : array) {
            if (num % 2 != 0) {
                result.add(num);
            }
        }
        return result;
    }
}
```

Now, let's write the JUnit test case for this method:

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.List;

public class TesterTest {

    @Test
    public void testFilterOutEvenNumbers() {
        // Test data
        List<Integer> input = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        List<Integer> expectedOutput = Arrays.asList(1, 3, 5, 7, 9);

        // Call the method under test
        List<Integer> actualOutput = Tester.filterOutEvenNumbers(input);

        // Verify the output
        assertEquals(expectedOutput, actualOutput);
    }
}
```

In this JUnit test case:
- We import necessary classes.
- We create a test method `testFilterOutEvenNumbers`.
- We provide test data using `Arrays.asList`.
- We call the `filterOutEvenNumbers` method with the test data.
- We verify the output using `assertEquals` to ensure that the method returns the expected result.

This should give you a good starting point for testing your Java code using JUnit.