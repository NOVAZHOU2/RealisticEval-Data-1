Certainly! Below is the equivalent Python unit test case using the `unittest` framework for the JavaScript function `filterOutEvenNumbers`.

```python
import unittest

def filter_out_even_numbers(array):
    return [num for num in array if num % 2 != 0]

class TestFilterOutEvenNumbers(unittest.TestCase):
    def test_filter_out_even_numbers(self):
        self.assertEqual(filter_out_even_numbers([1, 2, 3, 4, 5]), [1, 3, 5])
        self.assertEqual(filter_out_even_numbers([2, 4, 6, 8]), [])
        self.assertEqual(filter_out_even_numbers([1, 3, 5, 7]), [1, 3, 5, 7])
        self.assertEqual(filter_out_even_numbers([]), [])

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
- **Function Definition**: The `filter_out_even_numbers` function filters out all even numbers from an input list and returns a new list containing only the odd numbers.
  
- **Test Class**: We define a class `TestFilterOutEvenNumbers` that inherits from `unittest.TestCase`. This class contains methods that start with `test_`, which are the actual test cases.

- **Assertions**: 
  - `self.assertEqual`: This method checks if two values are equal. If they are not, it raises an assertion error.
  - The test cases check various scenarios including lists with both even and odd numbers, a list with only even numbers, a list with only odd numbers, and an empty list.

- **Running Tests**: To run the tests, you can execute the script directly. The `unittest.main()` function will discover and run all the test methods defined in the class.

This Python code should work similarly to your original JavaScript Jest test case.