Certainly! Below is the equivalent C++ test case using Catch2 for the given JavaScript Jest function:

```cpp
#include <catch2/catch.hpp>
#include <vector>

/**
 * Filters out all even numbers from an array.
 *
 * @param {std::vector<int>} array - The array of numbers to filter.
 * @returns {std::vector<int>} - A new vector containing only the odd numbers.
 */
std::vector<int> filterOutEvenNumbers(const std::vector<int>& array) {
    std::vector<int> result;
    for (int num : array) {
        if (num % 2 != 0) {
            result.push_back(num);
        }
    }
    return result;
}

TEST_CASE("Filter out even numbers", "[filter]") {
    // Test with empty vector
    REQUIRE(filterOutEvenNumbers({}) == std::vector<int>{});

    // Test with vector containing only even numbers
    REQUIRE(filterOutEvenNumbers({2, 4, 6, 8}) == std::vector<int>{});

    // Test with vector containing only odd numbers
    REQUIRE(filterOutEvenNumbers({1, 3, 5, 7}) == std::vector<int>({1, 3, 5, 7}));

    // Test with mixed numbers
    REQUIRE(filterOutEvenNumbers({1, 2, 3, 4, 5, 6}) == std::vector<int>({1, 3, 5}));
}
```

### Explanation:
1. **Include Catch2**: We include the Catch2 header file which provides the testing framework.
2. **Function Definition**: The `filterOutEvenNumbers` function remains the same, but it now takes and returns `std::vector<int>` instead of `number[]`.
3. **Test Case**:
   - `REQUIRE`: This macro is used to assert that the condition must be true. If not, the test will fail.
   - We test various scenarios including an empty vector, a vector with only even numbers, a vector with only odd numbers, and a mixed vector.

This should give you a good starting point for writing your C++ tests using Catch2.