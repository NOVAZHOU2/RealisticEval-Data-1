Here's the equivalent JUnit 4 test case for the provided Jest test code in Java:

```java
package org.real.temp;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class Tester {

    @Test
    public void testCalculatesDistanceBetweenTwoPointsInSameCity() {
        // Coordinates for two points in Los Angeles
        double distance = DistanceCalculator.calculateDistance(34.052235, -118.243683, 34.052236, -118.243684);
        assertEquals(0.00013, distance, 0.0001);  // The distance should be very small
    }

    @Test
    public void testCalculatesDistanceBetweenTwoMajorCities() {
        // Coordinates for Los Angeles and New York
        double distance = DistanceCalculator.calculateDistance(34.052235, -118.243683, 40.712776, -74.005974);
        double expectedDistance = 3940;  // Known distance is approximately 3940 kilometers
        double tolerance = 30;  // Tolerance of 30 kilometers
        assertTrue(distance > expectedDistance - tolerance);
        assertTrue(distance < expectedDistance + tolerance);
    }

    @Test
    public void testCalculatesDistanceBetweenTwoPointsInDifferentContinents() {
        // Coordinates for New York and London
        double distance = DistanceCalculator.calculateDistance(40.712776, -74.005974, 51.507351, -0.127758);
        double expectedDistance = 5567;  // Known distance is approximately 5567 kilometers
        double tolerance = 30;  // Tolerance of 30 kilometers
        assertTrue(distance > expectedDistance - tolerance);
        assertTrue(distance < expectedDistance + tolerance);
    }

    @Test
    public void testHandlesZeroDistanceWhenSameCoordinatesGiven() {
        // Same coordinates for a location in Paris
        double distance = DistanceCalculator.calculateDistance(48.8566, 2.3522, 48.8566, 2.3522);
        assertEquals(0, distance, 0.0001);  // Distance should be zero
    }

    @Test
    public void testCalculatesCorrectDistanceWithNegativeAndPositiveLongitudeAndLatitude() {
        // Coordinates for Sydney and Auckland
        double distance = DistanceCalculator.calculateDistance(-33.8688, 151.2093, -36.8485, 174.7633);
        double expectedDistance = 2159;  // Known distance is approximately 2159 kilometers
        double tolerance = 30;  // Tolerance of 30 kilometers
        assertTrue(distance > expectedDistance - tolerance);
        assertTrue(distance < expectedDistance + tolerance);
    }
}
```

### Key Points:
1. Each test is annotated with `@Test`.
2. Assertions are made using `assertEquals` and `assertTrue` to check expected outcomes.
3. The tolerance is used with `assertTrue` to compare the calculated distance against expected values.
4. Replace `DistanceCalculator` with the actual class name containing the `calculateDistance` method.