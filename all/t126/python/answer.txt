Here’s the equivalent Python code for the provided JavaScript function that calculates the great-circle distance between two points on the Earth using the Haversine formula:
Python Code
python
import math

def calculate_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """
    Calculates the great-circle distance between two points on the Earth
    using their latitude and longitude based on the Haversine formula.

    Args:
        lat1 (float): Latitude of the first point in degrees.
        lon1 (float): Longitude of the first point in degrees.
        lat2 (float): Latitude of the second point in degrees.
        lon2 (float): Longitude of the second point in degrees.

    Returns:
        float: The distance between the two points in kilometers.
    """
    earth_radius_km = 6371  # Radius of the Earth in kilometers

    # Helper function to convert degrees to radians
    def to_radians(degrees: float) -> float:
        return (math.pi * degrees) / 180

    # Convert all degrees to radians
    lat1_rad = to_radians(lat1)
    lon1_rad = to_radians(lon1)
    lat2_rad = to_radians(lat2)
    lon2_rad = to_radians(lon2)

    # Differences in coordinates
    delta_lat = lat2_rad - lat1_rad
    delta_lon = lon2_rad - lon1_rad

    # Haversine formula
    a = (math.sin(delta_lat / 2) ** 2 +
         math.cos(lat1_rad) * math.cos(lat2_rad) * 
         (math.sin(delta_lon / 2) ** 2))
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    # Distance in kilometers
    return earth_radius_km * c
Explanation of the Python Code:
Imports: We import the math module to use mathematical functions like sin, cos, atan2, and sqrt.
Function Definition:
The function calculate_distance takes four parameters: lat1, lon1, lat2, and lon2, all defined as float.
It returns a float representing the distance in kilometers.
Constants:
The radius of the Earth is defined as earth_radius_km = 6371, which is the same as in the JavaScript code.
Helper Function:
The nested function to_radians converts degrees to radians using the formula (π * degrees) / 180.
Coordinate Conversion:
Latitude and longitude for both points are converted from degrees to radians using the to_radians function.
Calculating Differences:
The differences in latitude and longitude are calculated.
Haversine Formula:
The formula is implemented to calculate the great-circle distance, which involves:
Calculating a using the sine and cosine functions.
Computing c using the atan2 function.
Return Value:
Finally, the distance in kilometers is returned by multiplying earth_radius_km by c.
This Python code accurately replicates the functionality of the original JavaScript code while adhering to Python syntax and conventions.