Below is the equivalent Python unit test code using the unittest framework to test the calculate_distance function, based on the provided JavaScript Jest test cases.
Python Code
python
import unittest

def calculate_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    # Placeholder for the actual distance calculation implementation
    pass  # Replace with the actual implementation of the function


class TestCalculateDistance(unittest.TestCase):

    def test_calculate_distance_same_city(self):
        # Coordinates for two points in Los Angeles
        distance = calculate_distance(34.052235, -118.243683, 34.052236, -118.243684)
        self.assertAlmostEqual(distance, 0.00013, places=4)  # The distance should be very small

    def test_calculate_distance_major_cities(self):
        # Coordinates for Los Angeles and New York
        distance = calculate_distance(34.052235, -118.243683, 40.712776, -74.005974)
        expected_distance = 3940  # Known distance is approximately 3940 kilometers
        tolerance = 30  # Tolerance of 30 kilometers
        self.assertGreater(distance, expected_distance - tolerance)
        self.assertLess(distance, expected_distance + tolerance)

    def test_calculate_distance_different_continents(self):
        # Coordinates for New York in the USA and London in the UK
        distance = calculate_distance(40.712776, -74.005974, 51.507351, -0.127758)
        expected_distance = 5567  # Known distance is approximately 5567 kilometers
        tolerance = 30  # Tolerance of 30 kilometers
        self.assertGreater(distance, expected_distance - tolerance)
        self.assertLess(distance, expected_distance + tolerance)

    def test_calculate_distance_zero_distance(self):
        # Same coordinates for a location in Paris
        distance = calculate_distance(48.8566, 2.3522, 48.8566, 2.3522)
        self.assertEqual(distance, 0)  # Distance should be zero

    def test_calculate_distance_negative_positive_coordinates(self):
        # Coordinates for Sydney and Auckland
        distance = calculate_distance(-33.8688, 151.2093, -36.8485, 174.7633)
        expected_distance = 2159  # Known distance is approximately 2159 kilometers
        tolerance = 30  # Tolerance of 30 kilometers
        self.assertGreater(distance, expected_distance - tolerance)
        self.assertLess(distance, expected_distance + tolerance)


if __name__ == '__main__':
    unittest.main()
Explanation of the Python Code:
Function Placeholder: The calculate_distance function is defined as a placeholder. You should replace the pass statement with the actual implementation of the distance calculation logic.
Unit Test Class:
TestCalculateDistance is a class that inherits from unittest.TestCase. Each test case is a method within this class.
Test Methods: Each test from the original JavaScript code has been converted to a method:
test_calculate_distance_same_city: Tests the distance between two points in Los Angeles.
test_calculate_distance_major_cities: Tests the distance between Los Angeles and New York, ensuring it falls within a specified tolerance.
test_calculate_distance_different_continents: Tests the distance between New York and London, with a similar tolerance check.
test_calculate_distance_zero_distance: Tests that the distance between the same coordinates is zero.
test_calculate_distance_negative_positive_coordinates: Tests the distance between Sydney and Auckland.
Assertions:
self.assertAlmostEqual: Used for comparing floating-point numbers with a specified number of decimal places.
self.assertGreater and self.assertLess: Used to check if the calculated distance is within a specified range of the expected distance.
self.assertEqual: Used to check if the calculated distance is exactly zero.
Execution: The if __name__ == '__main__': block ensures that the unit tests run when the script is executed directly.
This code provides a comprehensive set of tests for the calculate_distance function in Python, paralleling the original JavaScript tests.