To convert the JavaScript code signature to a Python code signature, we will adapt the parameter descriptions and the return value format to follow Python conventions. Below is the equivalent Python function signature along with a docstring that captures the same information:
python
def calculate_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """
    Calculates the great-circle distance between two points on the Earth
    using their latitude and longitude based on the Haversine formula.

    Args:
        lat1 (float): Latitude of the first point in degrees.
        lon1 (float): Longitude of the first point in degrees.
        lat2 (float): Latitude of the second point in degrees.
        lon2 (float): Longitude of the second point in degrees.

    Returns:
        float: The distance between the two points in kilometers.
    """
    pass  # Implementation of the function goes here
Explanation of Changes:
Function Name: Converted to snake_case which is the Python convention.
Parameter Types: Added type hints for each parameter and the return type using Python's typing conventions.
Docstring: Adapted the JSDoc format to Python's docstring format, using Args and Returns sections for clarity. The type of each parameter is explicitly stated.
Function Body: Included a placeholder (pass) for the function body to indicate where the implementation would go.
This structure is in line with Python's standards for readability and maintainability.