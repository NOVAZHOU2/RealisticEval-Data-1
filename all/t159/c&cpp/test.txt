Hereâ€™s the equivalent C++ Catch2 test case for your TypeScript Jest test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>

std::string removeFileExtension(const std::string& file_name); // Declaration

TEST_CASE("removeFileExtension") {
    SECTION("should remove the file extension from a standard file") {
        REQUIRE(removeFileExtension("document.txt") == "document");
    }

    SECTION("should return the original filename for files without an extension") {
        REQUIRE(removeFileExtension("document") == "document");
    }

    SECTION("should handle files with multiple dots correctly") {
        REQUIRE(removeFileExtension("my.file.with.many.extensions.pdf") == "my.file.with.many.extensions");
    }

    SECTION("should return the original filename if it ends with a dot") {
        REQUIRE(removeFileExtension("document.") == "document");
    }

    SECTION("should correctly handle filenames with dots in directory names") {
        REQUIRE(removeFileExtension("path.to/my.file.txt") == "path.to/my.file");
    }
}
```

### Explanation:
- The `#define CATCH_CONFIG_MAIN` directive allows Catch2 to generate a main function.
- Each test case is encapsulated in a `SECTION` for clarity, similar to the Jest `test` blocks.
- `REQUIRE` is used to assert the expected outcomes, akin to Jest's `expect().toBe()`.