Certainly! Here’s the equivalent TypeScript test class using Jest, with proper type annotations and Jest assertions. The provided Python unittest class will be converted to a Jest test suite in TypeScript.

### TypeScript Code

First, ensure you have the necessary dependencies installed:
```sh
npm install --save-dev jest @types/jest ts-jest
```

Add the Jest configuration to your `tsconfig.json`:
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "skipLibCheck": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"],
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node"
  }
}
```

Now, here’s the TypeScript test class using Jest:

```typescript
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import * as glob from 'glob';
import { tmpdir } from 'os';

/**
 * Renames PNG files in a specified directory by appending a sequence number to each file.
 * The files are sorted alphabetically, and each base name is assigned sequential numbers.
 * For example:
 *     If the directory has three PNG files such as "image1.png", "image2.png", "image3.png",
 *     after renaming, the PNG files will be "image1001.png", "image2001.png", "image3001.png".
 *
 * @param directory - The path to the directory containing PNG files to be renamed.
 */
function renameFiles(directory: string): void {
    const dirPath = path.resolve(directory);

    if (!fs.existsSync(dirPath) || !fs.lstatSync(dirPath).isDirectory()) {
        throw new Error(`The directory '${directory}' does not exist or is not a directory.`);
    }

    // Get list of PNG files in the directory
    const pngFilesPattern = path.join(dirPath, '*.png');
    const pngFiles = glob.sync(pngFilesPattern);

    // Sort files alphabetically by their names
    pngFiles.sort();

    // Print the sorted list of files (for debugging)
    console.log("Sorted files:");
    pngFiles.forEach(file => {
        console.log(path.basename(file));
    });

    // Rename files with sequence numbers
    let prevBaseName: string | null = null;
    let count = 1;

    pngFiles.forEach(file => {
        // Extract base name without postfix and number
        const baseName = file.replace(/(\d{3})(-\d)?(?=\.png$)/, '');

        if (baseName !== prevBaseName) {
            count = 1;
        }

        const newFileName = `${baseName}${count.toString().padStart(3, '0')}.png`;
        const newFilePath = path.join(dirPath, newFileName);
        fs.renameSync(file, newFilePath);
        console.log(`Renaming ${path.basename(file)} to ${newFileName}`);

        prevBaseName = baseName;
        count++;
    });
}

describe('TestRenameFiles', () => {
    let testDir: string;

    beforeEach(() => {
        // Create a temporary directory for each test
        testDir = fs.mkdtempSync(path.join(os.tmpdir(), 'test-rename-files-'));
    });

    afterEach(() => {
        // Remove the temporary directory after each test
        fs.rmSync(testDir, { recursive: true, force: true });
    });

    function createPngFiles(filenames: string[]): void {
        filenames.forEach(filename => {
            const filePath = path.join(testDir, filename);
            fs.writeFileSync(filePath, '');
        });
    }

    it('should rename files in a basic scenario with simple filenames', () => {
        const filenames = ['image1.png', 'image2.png', 'image3.png'];
        createPngFiles(filenames);

        renameFiles(testDir);

        const expectedFiles = ['image1001.png', 'image2001.png', 'image3001.png'];
        const resultFiles = fs.readdirSync(testDir).sort();
        expect(resultFiles).toEqual(expectedFiles);
    });

    it('should reset the counter for different base names', () => {
        const filenames = ['image1.png', 'picture1.png', 'image2.png', 'picture2.png'];
        createPngFiles(filenames);

        renameFiles(testDir);

        const expectedFiles = ['image1001.png', 'image2001.png', 'picture1001.png', 'picture2001.png'];
        const resultFiles = fs.readdirSync(testDir).sort();
        expect(resultFiles).toEqual(expectedFiles);
    });

    it('should handle directories with no PNG files', () => {
        const filenames = ['file1.txt', 'file2.jpg'];
        createPngFiles(filenames);

        renameFiles(testDir);

        const expectedFiles = filenames;
        const resultFiles = fs.readdirSync(testDir).sort();
        expect(resultFiles).toEqual(expectedFiles);
    });

    it('should handle an empty directory', () => {
        renameFiles(testDir);

        const expectedFiles = [];
        const resultFiles = fs.readdirSync(testDir);
        expect(resultFiles).toEqual(expectedFiles);
    });

    it('should rename files that already have numbers in their names', () => {
        const filenames = ['file001.png', 'file002.png', 'file003.png'];
        createPngFiles(filenames);

        renameFiles(testDir);

        const expectedFiles = ['file001001.png', 'file002001.png', 'file003001.png'];
        const resultFiles = fs.readdirSync(testDir).sort();
        expect(resultFiles).toEqual(expectedFiles);
    });
});
```

### Explanation:
1. **Imports**:
   - `fs` for file system operations.
   - `path` for path manipulation.
   - `os` for operating system utilities.
   - `glob` for pattern matching to find all PNG files in the directory.

2. **Function Definition**:
   - `renameFiles` takes a `directory` parameter of type `string` and returns `void`.

3. **Jest Test Suite**:
   - `describe` block defines the test suite.
   - `beforeEach` sets up a temporary directory for each test.
   - `afterEach` cleans up the temporary directory after each test.
   - `createPngFiles` creates empty PNG files in the temporary directory.

4. **Test Cases**:
   - Each `it` block represents a test case.
   - Jest assertions (`expect`) are used to verify the expected outcomes.

5. **File Operations**:
   - `fs.mkdtempSync` creates a temporary directory.
   - `fs.readdirSync` reads the directory contents.
   - `fs.writeFileSync` creates empty files.
   - `fs.rmSync` removes the directory recursively.

This TypeScript code preserves the original functionality and structure of the Python unittest class, with proper type annotations and Jest assertions.