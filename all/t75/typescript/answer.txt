Hereâ€™s the equivalent TypeScript code, including necessary imports and type definitions:

```typescript
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import * as glob from 'glob';

function renameFiles(directory: string): void {
    const dirPath = path.resolve(directory);

    if (!fs.existsSync(dirPath) || !fs.lstatSync(dirPath).isDirectory()) {
        throw new Error(`The directory '${directory}' does not exist or is not a directory.`);
    }

    // Get list of PNG files in the directory
    const pngFilesPattern = path.join(dirPath, '*.png');
    const pngFiles = glob.sync(pngFilesPattern);

    // Sort files alphabetically by their names
    pngFiles.sort();

    // Print the sorted list of files (for debugging)
    console.log("Sorted files:");
    pngFiles.forEach(file => {
        console.log(path.basename(file));
    });

    // Rename files with sequence numbers
    let prevBaseName: string | null = null;
    let count = 1;

    pngFiles.forEach(file => {
        // Extract base name without postfix and number
        const baseName = file.replace(/(\d{3})(-\d)?(?=\.png$)/, '');

        if (baseName !== prevBaseName) {
            count = 1;
        }

        const newFileName = `${baseName}${count.toString().padStart(3, '0')}.png`;
        const newFilePath = path.join(dirPath, newFileName);
        fs.renameSync(file, newFilePath);
        console.log(`Renaming ${path.basename(file)} to ${newFileName}`);

        prevBaseName = baseName;
        count++;
    });
}

// Example usage
renameFiles('/path/to/directory');
```

### Explanation:
1. **Imports**:
   - `fs` for file system operations.
   - `path` for path manipulation.
   - `os` for operating system utilities (not used here but included for completeness).
   - `glob` for pattern matching to find all PNG files in the directory.

2. **Function Definition**:
   - `renameFiles` takes a `directory` parameter and returns `void`.

3. **Directory Validation**:
   - Check if the directory exists and is a valid directory using `fs.existsSync` and `fs.lstatSync`.

4. **File List and Sorting**:
   - Use `glob.sync` to get a list of PNG files in the directory.
   - Sort the files alphabetically.

5. **Renaming Files**:
   - Iterate over the sorted list of files.
   - Use regular expressions to extract the base name and append a sequence number.
   - Rename the files using `fs.renameSync`.

6. **Debugging Output**:
   - Print the sorted list of files and the renaming process for debugging purposes.

This TypeScript code maintains the same functionality and logic as the original Python code, adapting it to TypeScript's static type system and idiomatic practices.