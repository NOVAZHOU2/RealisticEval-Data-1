Here's how you can translate the Python function into TypeScript:

```typescript
import fs from 'fs';
import path from 'path';

function renameFiles(directory: string): void {
    /**
     * Renames PNG files in a specified directory by appending a sequence number to each file.
     * The files are sorted alphabetically, and each base name is assigned sequential numbers.
     * For example:
     *      director have three PNG files such as "image1.png", "image2.png", "image3.png"
     *      after renaming PNG files are "image1001.png", "image2001.png", "image3001.png"
     *
     * @param {string} directory - The path to the directory containing PNG files to be renamed.
     * @returns {void}
     */
    
    // Read all files in the directory
    let files = fs.readdirSync(directory);

    // Filter out non-PNG files
    files = files.filter(file => path.extname(file).toLowerCase() === '.png');

    // Sort the files alphabetically
    files.sort();

    // Initialize the sequence number
    let seqNumber = 1;

    // Loop through the files and rename them
    for(let i = 0; i < files.length; i++) {
        let oldPath = path.join(directory, files[i]);
        let newPath = path.join(directory, `image${seqNumber.toString().padStart(4, '0')}.png`);
        
        fs.renameSync(oldPath, newPath);
        
        seqNumber++;
    }
}

export default renameFiles;
```

This TypeScript code uses Node.js built-in modules `fs` and `path`. It reads all files in the provided directory, filters out non-PNG files, sorts the remaining files alphabetically, and then renames each PNG file by appending a four-digit sequence number to its base name.