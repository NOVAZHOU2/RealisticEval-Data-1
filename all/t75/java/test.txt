Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class is placed in the package `org.real.temp` and named `Tester`. It includes appropriate JUnit annotations and assertion methods to ensure the functionality and logic of the tests are preserved.

### Java Test Class

```java
package org.real.temp;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class Tester {

    private Path testDir;

    @BeforeEach
    public void setUp(@TempDir Path tempDir) {
        this.testDir = tempDir;
    }

    @AfterEach
    public void tearDown() {
        // The @TempDir annotation automatically cleans up the directory after each test
    }

    private void createPngFiles(List<String> filenames) throws IOException {
        for (String filename : filenames) {
            Path filePath = testDir.resolve(filename);
            Files.createFile(filePath);  // Create an empty file
        }
    }

    @Test
    public void testBasicRenaming() throws IOException {
        // Test renaming in a basic scenario with simple filenames
        List<String> filenames = Arrays.asList("image1.png", "image2.png", "image3.png");
        createPngFiles(filenames);

        renameFiles(testDir.toString());

        List<String> expectedFiles = Arrays.asList("image1001.png", "image2001.png", "image3001.png");
        List<String> resultFiles = Files.list(testDir)
                                        .map(Path::getFileName)
                                        .map(Path::toString)
                                        .sorted()
                                        .collect(Collectors.toList());
        assertEquals(expectedFiles, resultFiles);
    }

    @Test
    public void testResetCounterForDifferentBaseNames() throws IOException {
        // Test that the counter resets for different base names
        List<String> filenames = Arrays.asList("image1.png", "picture1.png", "image2.png", "picture2.png");
        createPngFiles(filenames);

        renameFiles(testDir.toString());

        List<String> expectedFiles = Arrays.asList("image1001.png", "image2001.png", "picture1001.png", "picture2001.png");
        List<String> resultFiles = Files.list(testDir)
                                        .map(Path::getFileName)
                                        .map(Path::toString)
                                        .sorted()
                                        .collect(Collectors.toList());
        assertEquals(expectedFiles, resultFiles);
    }

    @Test
    public void testNoPngFiles() throws IOException {
        // Test handling of directories with no PNG files
        List<String> filenames = Arrays.asList("file1.txt", "file2.jpg");
        createPngFiles(filenames);

        renameFiles(testDir.toString());

        List<String> expectedFiles = filenames;  // No changes expected
        List<String> resultFiles = Files.list(testDir)
                                        .map(Path::getFileName)
                                        .map(Path::toString)
                                        .sorted()
                                        .collect(Collectors.toList());
        assertEquals(expectedFiles, resultFiles);
    }

    @Test
    public void testEmptyDirectory() throws IOException {
        // Test handling of an empty directory
        renameFiles(testDir.toString());

        List<String> expectedFiles = Arrays.asList();  // No files to rename
        List<String> resultFiles = Files.list(testDir)
                                        .map(Path::getFileName)
                                        .map(Path::toString)
                                        .collect(Collectors.toList());
        assertEquals(expectedFiles, resultFiles);
    }

    @Test
    public void testFilesWithExistingNumbers() throws IOException {
        // Test renaming files that already have numbers in their names
        List<String> filenames = Arrays.asList("file001.png", "file002.png", "file003.png");
        createPngFiles(filenames);

        renameFiles(testDir.toString());

        List<String> expectedFiles = Arrays.asList("file001001.png", "file002001.png", "file003001.png");
        List<String> resultFiles = Files.list(testDir)
                                        .map(Path::getFileName)
                                        .map(Path::toString)
                                        .sorted()
                                        .collect(Collectors.toList());
        assertEquals(expectedFiles, resultFiles);
    }

    // The renameFiles method from the Answer class
    public static void renameFiles(String directory) {
        Path dirPath = Paths.get(directory);

        if (!Files.isDirectory(dirPath)) {
            throw new IllegalArgumentException("The directory '" + directory + "' does not exist or is not a directory.");
        }

        File[] pngFiles = dirPath.toFile().listFiles((dir, name) -> name.toLowerCase().endsWith(".png"));

        if (pngFiles == null || pngFiles.length == 0) {
            throw new IllegalArgumentException("No PNG files found in the directory '" + directory + "'.");
        }

        Arrays.sort(pngFiles, Comparator.comparing(File::getName));

        System.out.println("Sorted files:");
        for (File file : pngFiles) {
            System.out.println(file.getName());
        }

        String prevBaseName = null;
        int count = 1;

        Pattern pattern = Pattern.compile("(\\d{3})(-\\d)?(?=\\.png$)");

        for (File file : pngFiles) {
            String fileName = file.getName();
            String baseName = fileName.substring(0, fileName.lastIndexOf('.'));
            Matcher matcher = pattern.matcher(baseName);
            if (matcher.find()) {
                baseName = matcher.replaceAll("");
            }

            if (!baseName.equals(prevBaseName)) {
                count = 1;
            }

            String newFileName = baseName + String.format("%03d", count) + ".png";
            Path newFilePath = dirPath.resolve(newFileName);

            try {
                Files.move(file.toPath(), newFilePath);
                System.out.println("Renaming " + fileName + " to " + newFileName);
            } catch (IOException e) {
                System.err.println("Failed to rename " + fileName + " to " + newFileName);
                e.printStackTrace();
            }

            prevBaseName = baseName;
            count++;
        }
    }
}
```

### Explanation:
1. **JUnit Annotations**:
   - `@BeforeEach`: Sets up the temporary directory before each test.
   - `@AfterEach`: Cleans up the temporary directory after each test (automatically handled by `@TempDir`).
   - `@Test`: Marks methods as test cases.

2. **Temporary Directory**:
   - `@TempDir Path tempDir`: Creates a temporary directory for each test.
   - `setUp` method initializes the `testDir` with the temporary directory.

3. **File Creation**:
   - `createPngFiles` method creates empty PNG files in the temporary directory.

4. **Test Methods**:
   - Each test method performs specific checks and assertions.
   - `renameFiles` method is called with the temporary directory path.

5. **Assertions**:
   - `assertEquals` is used to compare the expected and actual lists of filenames.

6. **File Handling**:
   - `Files.list` and `Files.createFile` are used to work with files and directories.

This setup ensures that the tests are structured and executed correctly, maintaining the functionality and logic of the original Python unittest class.