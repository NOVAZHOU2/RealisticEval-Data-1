Sure, here's the equivalent Java code for your Python function:

```java
package org.real.temp;

import java.io.File;
import java.util.Arrays;
import java.util.Comparator;

public class Answer {
    public static void renameFiles(String directory) {
        File dir = new File(directory);
        File[] pngFiles = dir.listFiles((dir1, name) -> name.endsWith(".png"));

        if (pngFiles != null && pngFiles.length > 0) {
            Arrays.sort(pngFiles, Comparator.comparingInt(Answer::getNumericPart));

            int count = 1001; // Starting from 1001 as per the requirement

            for (File file : pngFiles) {
                String fileName = file.getName();
                String baseName = fileName.substring(0, fileName.lastIndexOf('.'));
                String extension = ".png";

                String newFileName = baseName + count + extension;
                File newFile = new File(dir, newFileName);

                if (!file.renameTo(newFile)) {
                    System.err.println("Failed to rename file: " + fileName);
                }

                count++;
            }
        } else {
            System.out.println("No PNG files found in the directory.");
        }
    }

    private static int getNumericPart(File file) {
        String fileName = file.getName();
        String baseName = fileName.substring(0, fileName.lastIndexOf('.'));
        try {
            return Integer.parseInt(baseName.replaceAll("[^0-9]", ""));
        } catch (NumberFormatException e) {
            return 0; // In case there's no numeric part, treat it as 0
        }
    }

    public static void main(String[] args) {
        // Example usage
        renameFiles("/path/to/directory");
    }
}
```

### Explanation:
1. **Package and Class**: The Java code is placed inside the `org.real.temp` package and named `Answer`.
2. **Method Signature**: The method `renameFiles` takes a single argument of type `String`, which is the path to the directory containing the PNG files.
3. **File Filtering**: The `listFiles` method filters out only the `.png` files using a lambda expression.
4. **Sorting**: The files are sorted alphabetically using a custom comparator that extracts the numeric part of the file names.
5. **Renaming Files**: Each file is renamed by appending a sequential number starting from 1001.
6. **Error Handling**: If a file fails to rename, an error message is printed.
7. **Utility Method**: `getNumericPart` extracts the numeric part from the file name, which is used for sorting.
8. **Main Method**: An example usage of the `renameFiles` method is provided in the `main` method.

Make sure to replace `"/path/to/directory"` with the actual path to the directory containing your PNG files when running the program.