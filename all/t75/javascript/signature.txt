Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Renames PNG files in a specified directory by appending a sequence number to each file.
 * The files are sorted alphabetically, and each base name is assigned sequential numbers.
 * For example:
 *   If the directory contains three PNG files such as "image1.png", "image2.png", "image3.png",
 *   after renaming, the PNG files will be "image1001.png", "image2001.png", "image3001.png".
 *
 * @param {string} directory - The path to the directory containing PNG files to be renamed.
 */
function renameFiles(directory) {
    // Convert directory to Path object for easier handling
    const dirPath = path.resolve(directory);

    if (!fs.existsSync(dirPath) || !fs.statSync(dirPath).isDirectory()) {
        throw new Error(`The directory '${directory}' does not exist or is not a directory.`);
    }

    // Get list of PNG files in the directory
    const pngFiles = fs.readdirSync(dirPath)
        .filter(file => fs.statSync(path.join(dirPath, file)).isFile() && path.extname(file).toLowerCase() === '.png');

    // Sort files alphabetically by their names
    pngFiles.sort();

    // Print the sorted list of files (for debugging)
    console.log("Sorted files:");
    pngFiles.forEach(file => console.log(file));

    // Rename files with sequence numbers
    let prevBaseName = null;
    let count = 1;

    for (const file of pngFiles) {
        // Extract base name without postfix and number
        const baseName = file.replace(/(\d{3})(-\d)?(?=\.png$)/, '');

        if (baseName !== prevBaseName) {
            count = 1;
        }

        const newFilename = `${baseName}${count.toString().padStart(3, '0')}.png`;
        const oldFilePath = path.join(dirPath, file);
        const newFilePath = path.join(dirPath, newFilename);

        fs.renameSync(oldFilePath, newFilePath);
        console.log(`Renaming ${file} to ${newFilename}`);

        prevBaseName = baseName;
        count += 1;
    }
}

// Example usage
(async () => {
    try {
        renameFiles('/path/to/directory');
    } catch (error) {
        console.error(error);
    }
})();
```

### Explanation:
1. **JSDoc Comments**: The function is documented using JSDoc comments, which include a description, parameters, and return values.
2. **Function Signature**: The function `renameFiles` takes a single argument `directory` of type `string`.
3. **Directory Handling**: The directory path is resolved using `path.resolve`.
4. **File Filtering and Sorting**: Files are filtered based on being PNG files and then sorted alphabetically.
5. **Regex Replacement**: The base name extraction uses a regex similar to the Python version.
6. **File Renaming**: Files are renamed using `fs.renameSync`.

### Example Usage:
An example usage block demonstrates how to call the `renameFiles` function and handle any errors that may occur.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JavaScript documentation standards.