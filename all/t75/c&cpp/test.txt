Sure, here's how you can translate your Python `unittest` test class into a C++ `Catch2` test case:

```cpp
#include <catch2/catch.hpp>
#include <filesystem>
#include <fstream>
#include <vector>

namespace fs = std::filesystem;

void renameFiles(const std::string& directory) {
    // Your implementation of rename_files function goes here
}

TEST_CASE("Rename Files Test Case", "[renameFiles]") {
    const std::string testDirectory = "./test_directory";

    // Create a temporary test directory
    fs::create_directories(testDirectory);

    // Create some test PNG files
    const std::vector<std::string> originalFileNames = {"image1.png", "image2.png", "image3.png"};
    for (const auto& fileName : originalFileNames) {
        std::ofstream ofs(testDirectory + "/" + fileName);
        ofs.close();
    }

    // Call the renameFiles function
    renameFiles(testDirectory);

    // Check if the files were renamed correctly
    const std::vector<std::string> expectedNewFileNames = {"image1001.png", "image2001.png", "image3001.png"};
    for (size_t i = 0; i < expectedNewFileNames.size(); ++i) {
        REQUIRE(fs::exists(testDirectory + "/" + expectedNewFileNames[i]));
        REQUIRE(!fs::exists(testDirectory + "/" + originalFileNames[i]));
    }

    // Clean up the test directory
    fs::remove_all(testDirectory);
}
```

In this C++ test case using Catch2, we create a temporary test directory, populate it with some test PNG files, call the `renameFiles` function, and then check if the files were renamed correctly. Finally, we clean up the test directory.

Make sure you have Catch2 installed and properly set up in your project to compile and run these tests.