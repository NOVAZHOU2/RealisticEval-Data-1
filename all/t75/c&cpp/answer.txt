Sure, here's how you can convert the Python function `rename_files` into C++ code. This version of the function assumes that the directory contains only PNG files and that the directory exists.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>
#include <dirent.h>

void renameFiles(const std::string& directory) {
    DIR* dir;
    struct dirent* ent;
    if ((dir = opendir(directory.c_str())) != NULL) {
        // Collect all PNG files
        std::vector<std::string> pngFiles;
        while ((ent = readdir(dir)) != NULL) {
            std::string fileName(ent->d_name);
            if (fileName.substr(fileName.length() - 4) == ".png") {
                pngFiles.push_back(fileName);
            }
        }

        // Sort the PNG files alphabetically
        std::sort(pngFiles.begin(), pngFiles.end());

        // Rename files
        int counter = 1001; // Start from 1001 as per your requirement
        for (const auto& fileName : pngFiles) {
            std::string oldPath = directory + "/" + fileName;
            std::string newPath = directory + "/image" + std::to_string(counter++) + ".png";

            if (std::rename(oldPath.c_str(), newPath.c_str()) != 0) {
                perror("Error renaming file");
            }
        }

        closedir(dir);
    } else {
        perror("Could not open directory");
    }
}

int main() {
    std::string directory = "/path/to/your/directory"; // Replace with your directory path
    renameFiles(directory);
    return 0;
}
```

### Explanation:

1. **Include Necessary Headers**: We include necessary headers like `<iostream>` for input/output operations, `<fstream>` for file handling, `<vector>` for storing file names, `<algorithm>` for sorting, `<string>` for string manipulation, and `<dirent.h>` for directory operations.

2. **Function Definition**: The `renameFiles` function takes a directory path as an argument.

3. **Directory Reading**:
   - We use `opendir` to open the directory.
   - We iterate through the directory entries using `readdir`.
   - We collect all `.png` files into a vector.

4. **Sorting**:
   - We sort the vector of PNG file names alphabetically using `std::sort`.

5. **Renaming Files**:
   - We iterate over the sorted list of PNG files.
   - We construct new file paths by appending a sequence number starting from 1001.
   - We use `std::rename` to rename the files.

6. **Main Function**:
   - In the `main` function, we specify the directory path and call the `renameFiles` function.

Make sure to replace `"/path/to/your/directory"` with the actual path to your directory containing the PNG files.