Certainly! Here is the equivalent C++ code for the given Python function, including the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <filesystem>
#include <regex>
#include <vector>
#include <string>

namespace fs = std::filesystem;

/**
 * Renames PNG files in a specified directory by appending a sequence number to each file.
 * The files are sorted alphabetically, and each base name is assigned sequential numbers.
 * For example:
 *     If the directory has three PNG files such as "image1.png", "image2.png", "image3.png",
 *     after renaming, the PNG files will be "image1001.png", "image2001.png", "image3001.png".
 *
 * @param directory The path to the directory containing PNG files to be renamed.
 */
void rename_files(const std::string& directory) {
    // Convert directory to Path object for easier handling
    fs::path dir_path(directory);

    if (!fs::exists(dir_path) || !fs::is_directory(dir_path)) {
        throw std::invalid_argument("The directory '" + directory + "' does not exist or is not a directory.");
    }

    // Get list of PNG files in the directory
    std::vector<fs::path> png_files;
    for (const auto& entry : fs::directory_iterator(dir_path)) {
        if (entry.is_regular_file() && entry.path().extension() == ".png") {
            png_files.push_back(entry.path());
        }
    }

    // Sort files alphabetically by their names
    std::sort(png_files.begin(), png_files.end());

    // Print the sorted list of files (for debugging)
    std::cout << "Sorted files:" << std::endl;
    for (const auto& file : png_files) {
        std::cout << file.filename().string() << std::endl;
    }

    // Rename files with sequence numbers
    std::string prev_base_name;
    int count = 1;

    std::regex re_pattern(R"((\d{3})(-\d)?(?=\.png$))");

    for (const auto& file : png_files) {
        // Extract base name without postfix and number
        std::string base_name = std::regex_replace(file.stem().string(), re_pattern, "");

        if (base_name != prev_base_name) {
            count = 1;
        }

        std::string new_filename = base_name + std::to_string(count).substr(1, 3) + ".png";
        fs::path new_file_path = file.parent_path() / new_filename;
        fs::rename(file, new_file_path);
        std::cout << "Renaming " << file.filename().string() << " to " << new_filename << std::endl;

        prev_base_name = base_name;
        ++count;
    }
}

int main() {
    try {
        rename_files("/path/to/directory");
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `#include <iostream>` for input/output operations.
   - `#include <filesystem>` for filesystem operations.
   - `#include <regex>` for regular expressions.
   - `#include <vector>` for using vectors.
   - `#include <string>` for string operations.

2. **Namespace**:
   - `namespace fs = std::filesystem;` to simplify filesystem operations.

3. **Function Documentation**:
   - A multi-line comment block (`/* ... */`) is used to document the function, providing a clear description of its purpose and parameters.

4. **Function Signature**:
   - The function `rename_files` takes a `std::string` parameter representing the directory path.

5. **Directory Validation**:
   - Checks if the directory exists and is a valid directory.

6. **File List Creation**:
   - Iterates over the directory to find all PNG files and stores them in a vector.

7. **Sorting Files**:
   - Sorts the PNG files alphabetically.

8. **Printing Sorted Files**:
   - Prints the sorted list of files for debugging purposes.

9. **Renaming Files**:
   - Uses regular expressions to extract the base name and appends a sequence number to it.
   - Renames the files accordingly.

10. **Main Function**:
    - Calls the `rename_files` function with the directory path and handles exceptions.

This C++ code preserves the original functionality and structure of the Python code, including the comments and documentation.