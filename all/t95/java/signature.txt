Certainly! Here is the Java code signature with the comments preserved, along with an empty method body:

```java
import java.util.List;
import java.util.function.Predicate;

/**
 * Finds matching elements and their indices in the input array
 * based on the specified comparison function.
 *
 * @param <T> the type of elements in the array
 * @param arr the input array to search through
 * @param comparisonFn the comparison function to determine matches
 * @return a list of objects, each containing the matched element and its index
 */
public class Matcher {

    public static <T> List<MatchResult<T>> findMatchingElements(T[] arr, Predicate<T> comparisonFn) {
        // Method body will be implemented here
    }

    public static class MatchResult<T> {
        private T element;
        private int index;

        public MatchResult(T element, int index) {
            this.element = element;
            this.index = index;
        }

        public T getElement() {
            return element;
        }

        public int getIndex() {
            return index;
        }

        @Override
        public String toString() {
            return "MatchResult{" +
                    "element=" + element +
                    ", index=" + index +
                    '}';
        }
    }
}
```

### Explanation:
1. **Class Definition**: The `Matcher` class contains the `findMatchingElements` method.
2. **Method Signature**:
   - The method is defined as `public static <T> List<MatchResult<T>> findMatchingElements(T[] arr, Predicate<T> comparisonFn)`.
   - It includes the generic type parameter `<T>` to handle different types of arrays.
   - It takes an array `arr` and a `Predicate<T>` `comparisonFn`.
   - It returns a `List<MatchResult<T>>`.
3. **Comments**: The comments are preserved as per the original JavaScript code.
4. **Inner Class**: The `MatchResult` inner class holds the matched element and its index.

This should provide you with the Java code signature and comments that match the original JavaScript code.