Certainly! Hereâ€™s the equivalent JUnit 4 test case for the given Jest test cases in Java:

```java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import java.util.Arrays;
import java.util.List;
import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class Tester {

    private static class MatchResult<T> {
        private T element;
        private int index;

        public MatchResult(T element, int index) {
            this.element = element;
            this.index = index;
        }

        public T getElement() {
            return element;
        }

        public int getIndex() {
            return index;
        }

        @Override
        public String toString() {
            return "MatchResult{" +
                    "element=" + element +
                    ", index=" + index +
                    '}';
        }
    }

    private static class Matcher<T> {
        public static <T> List<MatchResult<T>> findMatchingElements(T[] arr, java.util.function.Predicate<T> comparisonFn) {
            List<MatchResult<T>> result = new ArrayList<>();

            for (int i = 0; i < arr.length; i++) {
                if (comparisonFn.test(arr[i])) {
                    result.add(new MatchResult<>(arr[i], i));
                }
            }

            return result;
        }
    }

    @Test
    public void testFindMatchingElements() {
        // Test cases
        testFindMatchingElements(new Integer[]{}, (el) -> el > 0, Arrays.asList());
        testFindMatchingElements(new Integer[]{1, 2, 3, 4, 5}, (num) -> num > 3, Arrays.asList(
                new MatchResult<>(4, 3),
                new MatchResult<>(5, 4)
        ));
        testFindMatchingElements(new String[]{"apple", "banana", "cherry", "date"}, (fruit) -> fruit.startsWith("b"), Arrays.asList(
                new MatchResult<>("banana", 1)
        ));
        testFindMatchingElements(new Integer[]{1, 2, 2, 3, 2, 4}, (num) -> num == 2, Arrays.asList(
                new MatchResult<>(2, 1),
                new MatchResult<>(2, 2),
                new MatchResult<>(2, 4)
        ));
        testFindMatchingElements(new Person[]{
                new Person("Alice", 25),
                new Person("Bob", 30),
                new Person("Charlie", 30)
        }, (person) -> person.getAge() == 30, Arrays.asList(
                new MatchResult<>(new Person("Bob", 30), 1),
                new MatchResult<>(new Person("Charlie", 30), 2)
        ));
        testFindMatchingElements(new Integer[]{1, 3, 5, 7}, (num) -> num % 2 == 0, Arrays.asList());
        testFindMatchingElements(new Integer[]{-1, -2, 0, 1, 2}, (num) -> num < 0, Arrays.asList(
                new MatchResult<>(-1, 0),
                new MatchResult<>(-2, 1)
        ));
    }

    private <T> void testFindMatchingElements(T[] arr, java.util.function.Predicate<T> comparisonFn, List<MatchResult<T>> expected) {
        List<MatchResult<T>> result = Matcher.findMatchingElements(arr, comparisonFn);
        assertEquals(expected, result);
    }

    private static class Person {
        private String name;
        private int age;

        public Person(String name, int age) {
            this.name = name;
            this.age = age;
        }

        public String getName() {
            return name;
        }

        public int getAge() {
            return age;
        }

        @Override
        public String toString() {
            return "Person{" +
                    "name='" + name + '\'' +
                    ", age=" + age +
                    '}';
        }
    }
}
```

### Explanation:
1. **Class Definition**: The `Tester` class contains the test methods.
2. **Inner Classes**:
   - `MatchResult`: Represents the matched element and its index.
   - `Matcher`: Contains the `findMatchingElements` method.
   - `Person`: Represents a person with a name and age.
3. **JUnit Test Methods**:
   - `testFindMatchingElements`: A helper method to perform assertions.
   - `testFindMatchingElements`: A single test method that runs all test cases.
4. **Test Cases**:
   - Each test case is implemented within the `testFindMatchingElements` method.
   - Assertions are made using `assertEquals` to verify the results.

This setup ensures that the test cases are structured similarly to the Jest tests and use JUnit 4 for verification.