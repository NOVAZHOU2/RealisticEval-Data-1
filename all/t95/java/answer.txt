Sure! Here is the equivalent Java code for the given JavaScript function:

```java
import java.util.ArrayList;
import java.util.List;

public class Matcher {

    /**
     * Finds matching elements and their indices in the input array
     * based on the specified comparison function.
     *
     * @param arr The input array to search through.
     * @param comparisonFn The comparison function to determine matches.
     * @return A list of objects, each containing the matched element and its index.
     */
    public static <T> List<MatchResult<T>> findMatchingElements(T[] arr, java.util.function.Predicate<T> comparisonFn) {
        List<MatchResult<T>> result = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            if (comparisonFn.test(arr[i])) {
                result.add(new MatchResult<>(arr[i], i));
            }
        }

        return result;
    }

    public static class MatchResult<T> {
        private T element;
        private int index;

        public MatchResult(T element, int index) {
            this.element = element;
            this.index = index;
        }

        public T getElement() {
            return element;
        }

        public int getIndex() {
            return index;
        }

        @Override
        public String toString() {
            return "MatchResult{" +
                    "element=" + element +
                    ", index=" + index +
                    '}';
        }
    }

    public static void main(String[] args) {
        // Example usage:
        Integer[] arr = {1, 2, 3, 4, 5};
        List<MatchResult<Integer>> result = findMatchingElements(arr, x -> x % 2 == 0);
        result.forEach(System.out::println);
    }
}
```

### Explanation:
1. **Class Definition**: The `Matcher` class contains the `findMatchingElements` method.
2. **Generic Type**: The method uses a generic type `T` to handle different types of arrays.
3. **Predicate Function**: The method takes a `Predicate<T>` as the comparison function.
4. **List Initialization**: The `result` list is initialized with `ArrayList`.
5. **Loop and Condition**: The loop iterates over the array and checks the condition using the provided predicate.
6. **Inner Class**: The `MatchResult` inner class holds the matched element and its index.
7. **Example Usage**: The `main` method demonstrates how to use the `findMatchingElements` method.

This should give you the equivalent functionality in Java.