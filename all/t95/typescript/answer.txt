Here's the equivalent TypeScript code for your JavaScript function. I've added type annotations to improve type safety:

```typescript
/**
 * Finds matching elements and their indices in the input array
 * based on the specified comparison function.
 *
 * @param {Array<T>} arr - The input array to search through.
 * @param {(element: T) => boolean} comparisonFn - The comparison function to determine matches.
 * @returns {Array<{ element: T; index: number }>} - An array of objects, each containing the matched element and its index.
 */
function findMatchingElements<T>(arr: T[], comparisonFn: (element: T) => boolean): Array<{ element: T; index: number }> {
    const result: Array<{ element: T; index: number }> = [];

    for (let i = 0; i < arr.length; i++) {
        if (comparisonFn(arr[i])) {
            result.push({ element: arr[i], index: i });
        }
    }

    return result;
}
```

### Changes made:
1. **Generic Type `<T>`**: The function is made generic to work with any type of array.
2. **Type Annotations**: Added types for `arr`, `comparisonFn`, and the return value.
3. **Result Type**: Specified the type of the objects in the result array. 

You can now use this TypeScript function with any array type, and it will maintain type safety.