Sure! Here is the equivalent C++ code for the given JavaScript function:

```cpp
#include <vector>
#include <iostream>

// A structure to hold the matched element and its index
struct MatchedElement {
    int element;
    int index;
};

/**
 * Finds matching elements and their indices in the input vector
 * based on the specified comparison function.
 *
 * @param vec The input vector to search through.
 * @param comparisonFn The comparison function to determine matches.
 * @return A vector of MatchedElement structures, each containing the matched element and its index.
 */
std::vector<MatchedElement> findMatchingElements(const std::vector<int>& vec, bool (*comparisonFn)(int)) {
    std::vector<MatchedElement> result;

    for (size_t i = 0; i < vec.size(); ++i) {
        if (comparisonFn(vec[i])) {
            result.push_back({vec[i], static_cast<int>(i)});
        }
    }

    return result;
}

// Example comparison function
bool isEven(int num) {
    return num % 2 == 0;
}

int main() {
    // Example usage
    std::vector<int> arr = {1, 2, 3, 4, 5, 6};
    auto matches = findMatchingElements(arr, isEven);

    for (const auto& match : matches) {
        std::cout << "Element: " << match.element << ", Index: " << match.index << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Structure `MatchedElement`**: This structure holds the matched element and its index.
2. **Function `findMatchingElements`**: This function takes a vector and a comparison function as parameters and returns a vector of `MatchedElement` structures.
3. **Comparison Function `isEven`**: This is an example comparison function that checks if a number is even.
4. **Main Function**: Demonstrates how to use the `findMatchingElements` function with the `isEven` comparison function.

This should give you a good starting point for converting your JavaScript code to C++.