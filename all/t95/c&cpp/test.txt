Certainly! Hereâ€™s the equivalent C++ test case using Catch2 for the given Jest test cases:

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the following headers and ensuring your build system includes the necessary headers and libraries.

### C++ Code with Catch2 Test Cases

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <string>
#include <utility>

// Structure to hold the matched element and its index
struct MatchedElement {
    int element;
    int index;
};

// Structure to hold a person with name and age
struct Person {
    std::string name;
    int age;
};

// Function to find matching elements and their indices in the input vector
std::vector<MatchedElement> findMatchingElements(const std::vector<int>& vec, bool (*comparisonFn)(int)) {
    std::vector<MatchedElement> result;

    for (size_t i = 0; i < vec.size(); ++i) {
        if (comparisonFn(vec[i])) {
            result.push_back({vec[i], static_cast<int>(i)});
        }
    }

    return result;
}

// Example comparison functions
bool isGreaterThanZero(int num) {
    return num > 0;
}

bool isGreaterThanThree(int num) {
    return num > 3;
}

bool isEqualToTwo(int num) {
    return num == 2;
}

bool isNegative(int num) {
    return num < 0;
}

// Comparison function for strings
bool startsWithB(const std::string& str) {
    return !str.empty() && str[0] == 'b';
}

// Comparison function for persons
bool hasAgeThirty(const Person& person) {
    return person.age == 30;
}

TEST_CASE("findMatchingElements", "[findMatchingElements]") {
    SECTION("should return an empty array for an empty input array") {
        std::vector<int> emptyVec;
        auto result = findMatchingElements(emptyVec, isGreaterThanZero);
        REQUIRE(result.empty());
    }

    SECTION("should return matching elements and their indices") {
        std::vector<int> inputArray = {1, 2, 3, 4, 5};
        auto result = findMatchingElements(inputArray, isGreaterThanThree);
        REQUIRE(result == std::vector<MatchedElement>{{4, 3}, {5, 4}});
    }

    SECTION("should return elements that are strings matching a specific condition") {
        std::vector<std::string> inputArray = {"apple", "banana", "cherry", "date"};
        std::vector<MatchedElement> expectedResult = {{1, 1}};
        std::vector<MatchedElement> result;

        for (size_t i = 0; i < inputArray.size(); ++i) {
            if (startsWithB(inputArray[i])) {
                result.push_back({static_cast<int>(i), static_cast<int>(i)});
            }
        }

        REQUIRE(result == expectedResult);
    }

    SECTION("should return multiple elements with the same value") {
        std::vector<int> inputArray = {1, 2, 2, 3, 2, 4};
        auto result = findMatchingElements(inputArray, isEqualToTwo);
        REQUIRE(result == std::vector<MatchedElement>{{2, 1}, {2, 2}, {2, 4}});
    }

    SECTION("should return matching objects based on a property") {
        std::vector<Person> inputArray = {
            {"Alice", 25},
            {"Bob", 30},
            {"Charlie", 30}
        };

        std::vector<MatchedElement> expectedResult = {{1, 1}, {2, 2}};
        std::vector<MatchedElement> result;

        for (size_t i = 0; i < inputArray.size(); ++i) {
            if (hasAgeThirty(inputArray[i])) {
                result.push_back({static_cast<int>(i), static_cast<int>(i)});
            }
        }

        REQUIRE(result == expectedResult);
    }

    SECTION("should return no elements if no matches found") {
        std::vector<int> inputArray = {1, 3, 5, 7};
        auto result = findMatchingElements(inputArray, isGreaterThanZero);
        REQUIRE(result.empty());
    }

    SECTION("should work with a comparison function that checks for negative numbers") {
        std::vector<int> inputArray = {-1, -2, 0, 1, 2};
        auto result = findMatchingElements(inputArray, isNegative);
        REQUIRE(result == std::vector<MatchedElement>{{-1, 0}, {-2, 1}});
    }
}
```

### Explanation:
1. **Catch2 Headers**: Include the necessary Catch2 headers.
2. **Structures**:
   - `MatchedElement`: Holds the matched element and its index.
   - `Person`: Represents a person with a name and age.
3. **Function Definitions**:
   - `findMatchingElements`: Finds matching elements and their indices.
   - Comparison functions (`isGreaterThanZero`, `isGreaterThanThree`, `isEqualToTwo`, `isNegative`, `startsWithB`, `hasAgeThirty`).
4. **Test Sections**:
   - Each `SECTION` corresponds to a Jest `test` case.
   - `REQUIRE` is used to assert the expected results.

This setup ensures that the test cases are structured similarly to the Jest tests and use Catch2 for assertions.