Certainly! Below is the equivalent C++ code for the JavaScript function you provided:

```cpp
#include <iostream>
#include <regex>
#include <string>

/**
 * Verify that a string is a valid username and check that the username contains only letters, numbers, and underscores
 *
 * @param username - The username to be validated.
 * @return true if the username matches the regex pattern, indicating it is valid; 
 *         false if the username contains any characters outside of letters, numbers, and underscores.
 */
bool isValidUsername(const std::string& username) {
    // Define the regular expression pattern
    std::regex pattern(R"(^[a-zA-Z0-9_]+$)");

    // Use std::regex_match to check if the username matches the pattern
    return std::regex_match(username, pattern);
}

int main() {
    // Example usage
    std::string username = "example_user123";
    bool result = isValidUsername(username);

    if (result) {
        std::cout << "The username '" << username << "' is valid." << std::endl;
    } else {
        std::cout << "The username '" << username << "' is invalid." << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Regex Pattern**: The regex pattern `R"(^[a-zA-Z0-9_]+$)"` checks for a string that starts (`^`) and ends (`$`) with one or more (`+`) characters that can be either a letter (`a-z`, `A-Z`), a number (`0-9`), or an underscore (`_`).

2. **std::regex**: This class is used to define the regular expression.

3. **std::regex_match**: This function checks if the entire input string matches the given regular expression pattern.

4. **main Function**: Demonstrates how to use the `isValidUsername` function with an example username.

This C++ code will perform the same validation as your original JavaScript function.