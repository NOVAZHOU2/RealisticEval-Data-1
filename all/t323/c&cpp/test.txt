Sure! Below is the equivalent C++ test case using Catch2:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <regex>

/**
 * Verify that a string is a valid username and check that the username contains only letters, numbers, and underscores
 *
 * @param {std::string} username - The username to be validated.
 * @returns {bool} - Returns true if the username matches the regex pattern, indicating it is valid;
 *                   returns false if the username contains any characters outside of letters, numbers, and underscores.
 */
bool isValidUsername(const std::string& username) {
    std::regex usernamePattern(R"(^[a-zA-Z0-9_]+$)");
    return std::regex_match(username, usernamePattern);
}

TEST_CASE("isValidUsername should validate usernames correctly", "[username]") {
    REQUIRE(isValidUsername("user123") == true);  // Valid username
    REQUIRE(isValidUsername("user_name") == true);  // Valid username with underscore
    REQUIRE(isValidUsername("user-name") == false);  // Invalid username with hyphen
    REQUIRE(isValidUsername("user@name") == false);  // Invalid username with special character
    REQUIRE(isValidUsername("123456") == true);  // Valid username with numbers only
    REQUIRE(isValidUsername("_user") == true);  // Valid username starting with underscore
    REQUIRE(isValidUsername("user_") == true);  // Valid username ending with underscore
    REQUIRE(isValidUsername("") == false);  // Empty string is not a valid username
}
```

In this C++ code:
- We include the `Catch2` header for testing.
- The `isValidUsername` function uses a regular expression to check if the username contains only letters, numbers, and underscores.
- The `TEST_CASE` macro defines a test case named "isValidUsername should validate usernames correctly".
- Multiple `REQUIRE` statements are used to assert different scenarios for the `isValidUsername` function.

Make sure you have Catch2 installed in your project to compile and run these tests.