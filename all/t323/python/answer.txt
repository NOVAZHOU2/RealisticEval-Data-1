Sure! Here's how you can convert the JavaScript function `isValidUsername` into Python:

```python
import re

def is_valid_username(username):
    """
    Verify that a string is a valid username and check that the username contains only letters, numbers, and underscores.

    :param str username: The username to be validated.
    :return: True if the username matches the regex pattern, indicating it is valid; False otherwise.
    :rtype: bool
    """
    # Define the regular expression pattern for a valid username
    pattern = r'^[a-zA-Z0-9_]+$'
    
    # Use the re.match() function to check if the username matches the pattern
    return bool(re.match(pattern, username))

# Example usage:
username = "example_user123"
print(is_valid_username(username))  # Output: True

invalid_username = "example user!"
print(is_valid_username(invalid_username))  # Output: False
```

### Explanation:
1. **Regular Expression**: The pattern `^[a-zA-Z0-9_]+$` ensures that the username starts (`^`) and ends (`$`) with one or more (`+`) characters that are either letters (`a-zA-Z`), digits (`0-9`), or underscores (`_`).
   
2. **re.match()**: This function checks if the entire string matches the pattern. If it does, it returns a match object; otherwise, it returns `None`.

3. **bool()**: Converting the result of `re.match()` to a boolean will give us `True` if there was a match (i.e., the username is valid) and `False` otherwise.

This Python function should behave similarly to your original JavaScript function.