Sure! Below is the equivalent Python unittest test case for the provided JavaScript Jest test case:

```python
import unittest

def is_valid_username(username):
    # Define the regex pattern for a valid username
    import re
    pattern = r'^[a-zA-Z0-9_]+$'
    
    # Check if the username matches the pattern
    return bool(re.match(pattern, username))

class TestIsValidUsername(unittest.TestCase):
    def test_valid_username(self):
        self.assertTrue(is_valid_username('user123'))
        self.assertTrue(is_valid_username('User_456'))

    def test_invalid_username(self):
        self.assertFalse(is_valid_username('user@123'))
        self.assertFalse(is_valid_username('user 123'))
        self.assertFalse(is_valid_username('user#123'))
        self.assertFalse(is_valid_username('user$123'))
        self.assertFalse(is_valid_username('user%123'))

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
1. **Function Definition**: The `is_valid_username` function uses a regular expression to validate the username. It checks if the username contains only letters (both uppercase and lowercase), numbers, and underscores.

2. **Test Class**: The `TestIsValidUsername` class inherits from `unittest.TestCase`. This class contains two methods: `test_valid_username` and `test_invalid_username`.

   - `test_valid_username`: Tests valid usernames to ensure they pass the validation.
   - `test_invalid_username`: Tests invalid usernames to ensure they fail the validation.

3. **Running the Tests**: The `if __name__ == '__main__':` block ensures that the tests run when the script is executed directly.

This Python unittest test case should cover the same functionality as your original JavaScript Jest test case.