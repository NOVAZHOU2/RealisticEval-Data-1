Certainly! Below is the equivalent Python unit test using the `unittest` framework for the provided JavaScript Jest test case.

```python
import re
import unittest

def is_valid_username(username):
    # Regex pattern to match letters, numbers, and underscores
    pattern = r'^[a-zA-Z0-9_]+$'
    return bool(re.match(pattern, username))

class TestIsValidUsername(unittest.TestCase):

    def test_valid_username(self):
        self.assertTrue(is_valid_username('JohnDoe123'))

    def test_invalid_username_with_space(self):
        self.assertFalse(is_valid_username('John Doe'))

    def test_invalid_username_with_special_char(self):
        self.assertFalse(is_valid_username('John_Doe@'))

    def test_empty_string(self):
        self.assertFalse(is_valid_username(''))

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
1. **Function Definition**: 
   - The function `is_valid_username` uses a regular expression to check if the input string consists only of letters (`a-zA-Z`), numbers (`0-9`), and underscores (`_`).

2. **Test Class**:
   - We define a test class `TestIsValidUsername` that inherits from `unittest.TestCase`.
   
3. **Test Methods**:
   - Each method tests a specific scenario:
     - `test_valid_username`: Checks if a valid username passes the validation.
     - `test_invalid_username_with_space`: Ensures spaces in the username fail the validation.
     - `test_invalid_username_with_special_char`: Verifies that special characters (like `@`) fail the validation.
     - `test_empty_string`: Tests what happens when an empty string is passed.

4. **Running the Tests**:
   - The script can be run directly, and it will execute all the test methods defined within the class.

This setup ensures that your Python code behaves similarly to the original JavaScript Jest test case.