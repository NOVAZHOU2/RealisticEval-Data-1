Sure, I can help you convert the given JavaScript Jest test case into a Java JUnit test case. Below is an example of how you might write such a test case in Java using JUnit 5.

First, let's define the `isValidUsername` function in Java:

```java
package org.real.temp;

public class UsernameValidator {

    /**
     * Verify that a string is a valid username and check that the username contains only letters, numbers, and underscores.
     *
     * @param username - The username to be validated.
     * @return true if the username matches the regex pattern, indicating it is valid; false otherwise.
     */
    public static boolean isValidUsername(String username) {
        return username.matches("^[a-zA-Z0-9_]+$");
    }
}
```

Next, we'll create a JUnit test case for this function:

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class Tester {

    @Test
    public void testValidUsername() {
        assertTrue(UsernameValidator.isValidUsername("valid_user123"));
    }

    @Test
    public void testInvalidUsernameWithSpecialCharacter() {
        assertFalse(UsernameValidator.isValidUsername("invalid@username"));
    }

    @Test
    public void testInvalidUsernameWithSpace() {
        assertFalse(UsernameValidator.isValidUsername("invalid username"));
    }

    @Test
    public void testEmptyUsername() {
        assertFalse(UsernameValidator.isValidUsername(""));
    }

    @Test
    public void testNullUsername() {
        // Assuming null should not be considered a valid username
        assertFalse(UsernameValidator.isValidUsername(null));
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration is set to `org.real.temp`, which matches the provided package name.
2. **Class Definition**: The class `Tester` is defined within the package `org.real.temp`.
3. **Test Methods**:
   - `testValidUsername`: Checks if a valid username passes the validation.
   - `testInvalidUsernameWithSpecialCharacter`: Checks if a username containing special characters fails the validation.
   - `testInvalidUsernameWithSpace`: Checks if a username containing spaces fails the validation.
   - `testEmptyUsername`: Checks if an empty string fails the validation.
   - `testNullUsername`: Checks if `null` does not pass the validation (assuming `null` should not be considered a valid username).

This setup ensures that your Java code is tested thoroughly using JUnit 5. Make sure you have the necessary dependencies for JUnit 5 in your project (e.g., via Maven or Gradle).