Certainly! Below is the equivalent Java JUnit test case for the given JavaScript Jest test function `isValidUsername`. The package is set to `org.real.temp` and the class name is `Tester`.

First, let's define the `isValidUsername` method in a utility class named `UsernameValidator.java`:

```java
package org.real.temp;

public class UsernameValidator {
    public static boolean isValidUsername(String username) {
        // Regex pattern to match only letters, numbers, and underscores
        String regex = "^[a-zA-Z0-9_]+$";
        return username.matches(regex);
    }
}
```

Next, we will create the JUnit test case in the `Tester.java` class:

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

public class Tester {

    @Test
    public void testIsValidUsername() {
        assertTrue(UsernameValidator.isValidUsername("user123"));
        assertTrue(UsernameValidator.isValidUsername("User_456"));
        assertFalse(UsernameValidator.isValidUsername("user-name"));
        assertFalse(UsernameValidator.isValidUsername("user@name"));
        assertFalse(UsernameValidator.isValidUsername("123456"));
        assertFalse(UsernameValidator.isValidUsername("_username"));
        assertFalse(UsernameValidator.isValidUsername("username_"));
        assertFalse(UsernameValidator.isValidUsername(""));
        assertFalse(UsernameValidator.isValidUsername(null));
    }
}
```

### Explanation:
1. **Utility Class (`UsernameValidator.java`)**:
   - Contains a static method `isValidUsername` that uses a regular expression to validate the username.

2. **JUnit Test Case (`Tester.java`)**:
   - Imports necessary classes from JUnit 5.
   - Uses `@Test` annotation to mark the method as a test case.
   - Calls the `isValidUsername` method with various inputs and asserts the expected outcomes using `assertTrue` and `assertFalse`.

This setup ensures that your Java code has a corresponding unit test to validate the functionality of the `isValidUsername` method.