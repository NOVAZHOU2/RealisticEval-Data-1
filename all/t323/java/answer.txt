Sure! Below is the equivalent Java code for your JavaScript function:

```java
public class UsernameValidator {

    /**
     * Verify that a string is a valid username and check that the username contains only letters, numbers, and underscores.
     *
     * @param username The username to be validated.
     * @return true if the username matches the regex pattern, indicating it is valid; 
     *         false if the username contains any characters outside of letters, numbers, and underscores.
     */
    public static boolean isValidUsername(String username) {
        // Define the regex pattern for a valid username
        String regex = "^[a-zA-Z0-9_]+$";
        
        // Create a Pattern object
        Pattern pattern = Pattern.compile(regex);
        
        // Create a Matcher object
        Matcher matcher = pattern.matcher(username);
        
        // Check if the username matches the pattern
        return matcher.matches();
    }

    public static void main(String[] args) {
        // Test cases
        System.out.println(isValidUsername("JohnDoe123")); // Should print true
        System.out.println(isValidUsername("John_Doe"));  // Should print true
        System.out.println(isValidUsername("John-Doe"));  // Should print false
        System.out.println(isValidUsername("John Doe"));  // Should print false
        System.out.println(isValidUsername("John@Doe"));  // Should print false
    }
}
```

### Explanation:
1. **Regex Pattern**: The regex `^[a-zA-Z0-9_]+$` ensures that the username starts (`^`) and ends (`$`) with one or more (`+`) characters that can be either a letter (`a-z`, `A-Z`), a number (`0-9`), or an underscore (`_`).
2. **Pattern and Matcher**: The `Pattern` class compiles the regex into a pattern, and the `Matcher` class checks if the given username matches this pattern.
3. **Return Value**: The method returns `true` if the username matches the pattern, otherwise `false`.

This Java code should work similarly to your original JavaScript function.