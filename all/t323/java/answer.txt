Sure, here's how you can translate the JavaScript function `isValidUsername` into Java:

```java
/**
 * Verify that a string is a valid username and check that the username contains only letters, numbers, and underscores.
 *
 * @param username - The username to be validated.
 * @return true if the username matches the regex pattern, indicating it is valid; 
 *         false if the username contains any characters outside of letters, numbers, and underscores.
 */
public boolean isValidUsername(String username) {
    // Regex pattern to match only letters, numbers, and underscores
    String regexPattern = "^[a-zA-Z0-9_]+$";
    
    // Create a Pattern object
    Pattern pattern = Pattern.compile(regexPattern);
    
    // Create a Matcher object
    Matcher matcher = pattern.matcher(username);
    
    // Check if the username matches the pattern
    return matcher.matches();
}
```

### Explanation:
1. **Regex Pattern**: `"^[a-zA-Z0-9_]+$"` ensures that the username starts (`^`) and ends (`$`) with one or more (`+`) alphanumeric characters (`a-z`, `A-Z`, `0-9`) or underscores (`_`).
2. **Pattern and Matcher**: 
   - `Pattern.compile(regexPattern)` compiles the regular expression into a `Pattern` object.
   - `pattern.matcher(username)` creates a `Matcher` object that will match the given input against this pattern.
3. **matches() Method**: This method checks if the entire region in the input sequence matches the pattern.

This Java function behaves similarly to your original JavaScript function, validating whether a given username consists only of allowed characters.