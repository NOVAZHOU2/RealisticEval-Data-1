Sure! Below is the TypeScript version of your Jest test case using `describe`:

```typescript
import { describe, expect, it } from '@jest/globals';

/**
 * verify that a string is a valid username and check that the username contains only letters, numbers, and underscores
 *
 * @param {string} username - The username to be validated.
 * @returns {boolean} - Returns true if the username matches the regex pattern, indicating it is valid;
 *                      returns false if the username contains any characters outside of letters, numbers, and underscores.
 */
function isValidUsername(username: string): boolean {
    const regex = /^[a-zA-Z0-9_]+$/;
    return regex.test(username);
}

describe('isValidUsername', () => {
    it('should return true for a valid username', () => {
        expect(isValidUsername('JohnDoe123')).toBe(true);
    });

    it('should return false for an invalid username with special characters', () => {
        expect(isValidUsername('John@Doe123')).toBe(false);
    });

    it('should return false for an empty username', () => {
        expect(isValidUsername('')).toBe(false);
    });

    it('should return false for a username with spaces', () => {
        expect(isValidUsername('John Doe123')).toBe(false);
    });
});
```

In this TypeScript version:
- I added type annotations to the function parameters and return value.
- I used the `expect` and `it` functions from `@jest/globals` to write the test cases within the `describe` block.

This should work seamlessly with your existing Jest setup.