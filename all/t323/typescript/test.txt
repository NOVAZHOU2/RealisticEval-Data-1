Sure! Below is the TypeScript version of your Jest test case using `describe`:

```typescript
import { describe, expect, test } from '@jest/globals';

/**
 * Verify that a string is a valid username and check that the username contains only letters, numbers, and underscores
 *
 * @param {string} username - The username to be validated.
 * @returns {boolean} - Returns true if the username matches the regex pattern, indicating it is valid;
 *                      returns false if the username contains any characters outside of letters, numbers, and underscores.
 */
function isValidUsername(username: string): boolean {
  const regex = /^[a-zA-Z0-9_]+$/;
  return regex.test(username);
}

// Test suite for isValidUsername function
describe('isValidUsername', () => {
  test('should return true for valid usernames', () => {
    expect(isValidUsername('user123')).toBe(true);
    expect(isValidUsername('User_Name')).toBe(true);
    expect(isValidUsername('_username_')).toBe(true);
  });

  test('should return false for invalid usernames', () => {
    expect(isValidUsername('user@name')).toBe(false);
    expect(isValidUsername('user name')).toBe(false);
    expect(isValidUsername('user#name')).toBe(false);
    expect(isValidUsername('user$name')).toBe(false);
    expect(isValidUsername('user%name')).toBe(false);
    expect(isValidUsername('user^name')).toBe(false);
    expect(isValidUsername('user&name')).toBe(false);
    expect(isValidUsername('user*name')).toBe(false);
    expect(isValidUsername('user(name')).toBe(false);
    expect(isValidUsername('user)name')).toBe(false);
    expect(isValidUsername('user{name')).toBe(false);
    expect(isValidUsername('user}name')).toBe(false);
    expect(isValidUsername('user[name')).toBe(false);
    expect(isValidUsername('user]name')).toBe(false);
    expect(isValidUsername('user|name')).toBe(false);
    expect(isValidUsername('user\\name')).toBe(false);
    expect(isValidUsername('user;name')).toBe(false);
    expect(isValidUsername('user:name')).toBe(false);
    expect(isValidUsername('user"name')).toBe(false);
    expect(isValidUsername("user'name")).toBe(false);
    expect(isValidUsername('user`name')).toBe(false);
    expect(isValidUsername('user~name')).toBe(false);
  });
});
```

In this TypeScript version:
1. We import the necessary functions (`describe`, `expect`, and `test`) from `@jest/globals`.
2. We define the `isValidUsername` function with a type annotation for the input parameter.
3. We create a test suite using `describe` and write two tests within it:
   - One to check for valid usernames.
   - Another to check for invalid usernames.

This ensures that the function behaves correctly according to the specified requirements.