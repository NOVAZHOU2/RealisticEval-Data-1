Here’s how to convert the provided TypeScript function into Python code while retaining the functionality and comments:
Converted Python Code
python
def format_number(num: float) -> str:
    """Format the number into a more readable string representation, returning the original form if the number is less than 1,000.
    
    If it is greater than or equal to a thousand and less than a million, it is formatted as "x.xK". 
    For a million or more, format it as "x.xM".
    
    Args:
        num (float): The number to be formatted.
        
    Returns:
        str: The formatted number as a string.
    """
    if num >= 1_000_000:
        return f"{num / 1_000_000:.1f}M"
    elif num >= 1_000:
        return f"{num / 1_000:.1f}K"
    else:
        return str(num)
Explanation of the Code:
Function Declaration:
The function format_number is defined with a parameter num, which is typed as float. In Python, we can use float to accommodate decimal values.
Docstring:
A docstring is included to explain the function’s purpose, parameters, and return value, similar to the comments in the TypeScript version.
Number Formatting:
The logic checks if num is greater than or equal to 1,000,000 and divides it accordingly to format it with a 'M' suffix for millions.
If num is greater than or equal to 1,000 but less than a million, it formats it with a 'K' suffix for thousands.
If num is less than 1,000, it simply converts the number to a string using str(num).
String Formatting:
The formatted numbers are constructed using f-strings (formatted string literals) in Python, allowing us to control the number of decimal places with :.1f, ensuring one decimal point is displayed.
Example Usage
Here’s how you might call this function:
python
print(format_number(950))          # Output: "950"
print(format_number(1500))         # Output: "1.5K"
print(format_number(2500000))      # Output: "2.5M"
This Python function provides the same functionality as the original TypeScript code while adhering to Python conventions.