Here is the equivalent Java code following the provided guidelines:

```java
package org.real.temp;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class Answer {

    public static void formatText(String inputFilePath, String outputFilePath) {
        try (BufferedReader reader = new BufferedReader(new FileReader(inputFilePath));
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFilePath))) {
            
            String line;
            StringBuilder processedContent = new StringBuilder();
            
            while ((line = reader.readLine()) != null) {
                // Remove newline characters and append the line with a space
                processedContent.append(line).append(" ");
            }
            
            // Remove the last extra space
            if (processedContent.length() > 0) {
                processedContent.setLength(processedContent.length() - 1);
            }
            
            // Write the processed content to the output file
            writer.write(processedContent.toString());
            
            System.out.println("Line breaks removed and spaces added. Output written to " + outputFilePath);

        } catch (IOException e) {
            System.out.println("Input file not found.");
        }
    }

    public static void main(String[] args) {
        formatText("input.txt", "output.txt");
    }
}
```

### Explanation:
1. **Package and Class Declaration**: 
   - The code is organized within the `org.real.temp` package.
   - The class name is `Answer`.

2. **Method Signature**:
   - The method `formatText` takes two parameters: `inputFilePath` and `outputFilePath`, which are strings representing the paths to the input and output files.

3. **File Handling**:
   - Java uses `BufferedReader` and `BufferedWriter` for reading and writing files.
   - The `try-with-resources` statement is used to automatically close the resources after use.

4. **Processing Lines**:
   - Each line is read using `readLine()` and appended to a `StringBuilder` object.
   - The `StringBuilder` is used to efficiently concatenate strings.

5. **Removing Extra Space**:
   - After processing all lines, the last extra space is removed from the `StringBuilder`.

6. **Writing to Output File**:
   - The processed content is written to the output file using `BufferedWriter`.

7. **Exception Handling**:
   - An `IOException` is caught and handled by printing a message indicating that the input file was not found.

8. **Main Method**:
   - A `main` method is included to demonstrate how to call the `formatText` method with default file paths.