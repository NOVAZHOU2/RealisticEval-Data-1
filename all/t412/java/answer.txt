Here is the equivalent Java code following the provided guidelines:

```java
package org.real.temp;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class Answer {

    public static void formatText(String inputFilePath, String outputFilePath) {
        try (BufferedReader reader = new BufferedReader(new FileReader(inputFilePath));
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFilePath))) {

            String currentLine;
            StringBuilder contentBuilder = new StringBuilder();

            while ((currentLine = reader.readLine()) != null) {
                // Remove newline characters and append the line with a space
                contentBuilder.append(currentLine).append(" ");
            }

            // Remove the last space if it exists
            String contentWithoutNewlines = contentBuilder.toString().trim();

            // Write the content without newlines to the output file
            writer.write(contentWithoutNewlines);

            System.out.println("Line breaks removed and spaces added. Output written to " + outputFilePath);

        } catch (IOException e) {
            System.err.println("Input file not found.");
        }
    }

    public static void main(String[] args) {
        formatText("input.txt", "output.txt");
    }
}
```

### Explanation:
1. **Package and Class Declaration**:
   - The package `org.real.temp` and the class `Answer` are declared at the beginning.

2. **Method Signature**:
   - The `formatText` method takes two parameters: `inputFilePath` and `outputFilePath`, which represent the paths to the input and output files respectively.

3. **File Handling**:
   - `BufferedReader` is used to read from the input file.
   - `BufferedWriter` is used to write to the output file.
   - The try-with-resources statement ensures that the resources are automatically closed after use.

4. **Content Processing**:
   - A `StringBuilder` named `contentBuilder` is used to accumulate the processed lines.
   - Each line is read and appended to the `StringBuilder` with a space.
   - After reading all lines, the trailing space is trimmed using `trim()`.

5. **Exception Handling**:
   - An `IOException` is caught and handled by printing an error message if the input file is not found.

6. **Main Method**:
   - The `main` method calls `formatText` with default file paths (`"input.txt"` and `"output.txt"`).

This Java code maintains the same functionality as the provided Python code, ensuring that line breaks are removed and spaces are added between lines when writing to the output file.