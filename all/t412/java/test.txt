Certainly! Below is the conversion of the provided Python unittest test class into an equivalent JUnit test class in Java. The Java test class will be placed in the package `org.real.temp` and named `Tester`.

### Python Code:
```python
import unittest

class TestMathOperations(unittest.TestCase):
    def test_addition(self):
        self.assertEqual(3, 1 + 2)

    def test_subtraction(self):
        self.assertEqual(1, 5 - 4)

    def test_multiplication(self):
        self.assertEqual(6, 2 * 3)

    def test_division(self):
        self.assertEqual(2, 8 / 4)

if __name__ == '__main__':
    unittest.main()
```

### Java Code:
```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Tester {

    @Test
    public void testAddition() {
        assertEquals(3, 1 + 2);
    }

    @Test
    public void testSubtraction() {
        assertEquals(1, 5 - 4);
    }

    @Test
    public void testMultiplication() {
        assertEquals(6, 2 * 3);
    }

    @Test
    public void testDivision() {
        assertEquals(2, 8 / 4);
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Import Statements**: We import `org.junit.Test` and `org.junit.Assert.assertEquals` from JUnit.
3. **Class Definition**: The test class is named `Tester`.
4. **JUnit Test Methods**:
   - Each method is annotated with `@Test` to indicate it is a test case.
   - The method names follow Java naming conventions (camelCase).
   - The assertions use `assertEquals` from JUnit.

This setup ensures that each test method performs the same operations as in the original Python unittest class, but using JUnit's syntax and annotations.