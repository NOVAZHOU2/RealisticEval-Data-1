Sure! Let's start by converting the Python function signature and comments into equivalent JavaScript syntax, including JSDoc comments for better documentation. Here is the Python code:

```python
def format_text(input_file='input.txt', output_file='output.txt'):
    """
    Formats the text by removing newline characters and adding spaces between lines.

    Args:
        input_file (str): The path to the input file. Defaults to 'input.txt'.
        output_file (str): The path to the output file. Defaults to 'output.txt'.

    Returns:
        None
    """
    try:
        # Open the input file in read mode
        with open(input_file, 'r') as f:
            # Read the content of the input file line by line
            lines = f.readlines()

        # Process each line
        processed_lines = []
        for line in lines:
            # Remove newline characters and add a space
            processed_line = line.rstrip('\n')
            processed_lines.append(processed_line)  # Append the processed line

        # Join the processed lines with spaces
        content_without_newlines = ' '.join(processed_lines)

        # Open the output file in write mode
        with open(output_file, 'w') as f:
            # Write the content without newlines to the output file
            f.write(content_without_newlines)

        print("Line breaks removed and spaces added. Output written to", output_file)

    except FileNotFoundError:
        print("Input file not found.")
```

Here is the equivalent JavaScript code with JSDoc comments:

```javascript
/**
 * Formats the text by removing newline characters and adding spaces between lines.
 *
 * @param {string} [inputFile='input.txt'] - The path to the input file. Defaults to 'input.txt'.
 * @param {string} [outputFile='output.txt'] - The path to the output file. Defaults to 'output.txt'.
 */
function formatText(inputFile = 'input.txt', outputFile = 'output.txt') {
    try {
        // Open the input file in read mode
        const fs = require('fs').promises;

        fs.readFile(inputFile, 'utf8')
            .then(data => {
                // Split the content of the input file line by line
                const lines = data.split('\n');

                // Process each line
                const processedLines = lines.map(line => line.trim());

                // Join the processed lines with spaces
                const contentWithoutNewlines = processedLines.join(' ');

                // Open the output file in write mode
                return fs.writeFile(outputFile, contentWithoutNewlines);
            })
            .then(() => {
                console.log("Line breaks removed and spaces added. Output written to", outputFile);
            })
            .catch(error => {
                if (error.code === 'ENOENT') {
                    console.log("Input file not found.");
                } else {
                    throw error;
                }
            });
    } catch (error) {
        console.error(error);
    }
}

// Call the function with default parameters
formatText();
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comments provide detailed documentation for the function, including parameter descriptions and return types.

2. **Reading the Input File**:
   - We use `fs.promises.readFile` to read the contents of the input file asynchronously.
   - The file is read as a string using the `'utf8'` encoding.

3. **Processing Each Line**:
   - We split the content into lines using `.split('\n')`.
   - We process each line by trimming it to remove any trailing whitespace or newline characters using `.trim()`.

4. **Joining Processed Lines**:
   - We join the processed lines with spaces using `.join(' ')`.

5. **Writing to the Output File**:
   - We use `fs.promises.writeFile` to write the processed content to the output file asynchronously.

6. **Error Handling**:
   - We handle errors using a `.catch` block. If the error code is `'ENOENT'`, it means the file was not found, so we log an appropriate message. Otherwise, we rethrow the error to ensure it's handled properly.

7. **Function Call**:
   - Finally, we call the `formatText` function with the default parameters to execute the script.