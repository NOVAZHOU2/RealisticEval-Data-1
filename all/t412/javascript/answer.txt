Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function formatText(inputFile = 'input.txt', outputFile = 'output.txt') {
    try {
        // Open the input file in read mode
        const fs = require('fs').promises;
        
        fs.readFile(inputFile, 'utf8')
            .then(data => {
                // Split the content of the input file line by line
                const lines = data.split('\n');

                // Process each line
                const processedLines = lines.map(line => line.trim());

                // Join the processed lines with spaces
                const contentWithoutNewlines = processedLines.join(' ');

                // Open the output file in write mode
                return fs.writeFile(outputFile, contentWithoutNewlines);
            })
            .then(() => {
                console.log("Line breaks removed and spaces added. Output written to", outputFile);
            })
            .catch(error => {
                if (error.code === 'ENOENT') {
                    console.log("Input file not found.");
                } else {
                    throw error;
                }
            });
    } catch (error) {
        console.error(error);
    }
}

// Call the function with default parameters
formatText();
```

### Explanation:
1. **Reading the Input File**:
   - We use `fs.promises.readFile` to read the contents of the input file asynchronously.
   - The file is read as a string using the `'utf8'` encoding.

2. **Processing Each Line**:
   - We split the content into lines using `.split('\n')`.
   - We process each line by trimming it to remove any trailing whitespace or newline characters using `.trim()`.

3. **Joining Processed Lines**:
   - We join the processed lines with spaces using `.join(' ')`.

4. **Writing to the Output File**:
   - We use `fs.promises.writeFile` to write the processed content to the output file asynchronously.

5. **Error Handling**:
   - We handle errors using a `.catch` block. If the error code is `'ENOENT'`, it means the file was not found, so we log an appropriate message. Otherwise, we rethrow the error to ensure it's handled properly.

6. **Function Call**:
   - Finally, we call the `formatText` function with the default parameters to execute the script.