Sure, here is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function formatText(inputFile = 'input.txt', outputFile = 'output.txt') {
    try {
        // Open the input file in read mode
        const fs = require('fs').promises;
        
        fs.readFile(inputFile, 'utf8')
            .then(data => {
                // Split the content of the input file into lines
                const lines = data.split('\n');

                // Process each line
                const processedLines = lines.map(line => line.trim());

                // Join the processed lines with spaces
                const contentWithoutNewlines = processedLines.join(' ');

                // Open the output file in write mode
                return fs.writeFile(outputFile, contentWithoutNewlines);
            })
            .then(() => {
                console.log("Line breaks removed and spaces added. Output written to", outputFile);
            })
            .catch(error => {
                if (error.code === 'ENOENT') {
                    console.log("Input file not found.");
                } else {
                    throw error;
                }
            });
    } catch (error) {
        console.error("An error occurred:", error);
    }
}

// Call the function with default parameters
formatText();
```

### Explanation:
1. **Reading the Input File:**
   - The `fs.promises.readFile` method is used to read the contents of the input file asynchronously.
   - The `utf8` encoding is specified so that the file content is read as a string.

2. **Processing Each Line:**
   - The `split('\n')` method splits the content into an array of lines.
   - The `map` method is used to trim each line.

3. **Joining Processed Lines:**
   - The `join(' ')` method joins the processed lines with spaces.

4. **Writing to the Output File:**
   - The `fs.promises.writeFile` method writes the processed content to the output file asynchronously.

5. **Error Handling:**
   - If the input file is not found (`ENOENT` error), it prints a specific message.
   - Any other errors are caught and logged.

6. **Function Call:**
   - The `formatText` function is called with default parameters to execute the process.

This JavaScript code uses Node.js's asynchronous file system operations to ensure non-blocking behavior and maintain the same functionality as the Python code.