Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to JavaScript and Jest.

### Python Code:
```python
import os
import tempfile
import unittest

class TestFormatText(unittest.TestCase):

    def test_basic_text(self):
        # Test with basic text
        input_text = "This is line one.\nThis is line two.\nThis is line three."
        expected_output = "This is line one. This is line two. This is line three."

        with tempfile.NamedTemporaryFile(delete=False, mode='w+t') as input_file:
            input_file.write(input_text)
            input_file.seek(0)  # Go back to the start of the file
            output_file_path = tempfile.mktemp(suffix='.txt')  # Create a temporary output file

            format_text(input_file.name, output_file_path)

            with open(output_file_path, 'r') as output_file:
                output_text = output_file.read().strip()

            self.assertEqual(expected_output, output_text)

        os.remove(input_file.name)
        os.remove(output_file_path)

    def test_single_line(self):
        # Test with a single line
        input_text = "This is a single line."
        expected_output = "This is a single line."

        with tempfile.NamedTemporaryFile(delete=False, mode='w+t') as input_file:
            input_file.write(input_text)
            input_file.seek(0)
            output_file_path = tempfile.mktemp(suffix='.txt')

            format_text(input_file.name, output_file_path)

            with open(output_file_path, 'r') as output_file:
                output_text = output_file.read().strip()

            self.assertEqual(expected_output, output_text)

        os.remove(input_file.name)
        os.remove(output_file_path)

    def test_empty_file(self):
        # Test with an empty file
        input_text = ""
        expected_output = ""

        with tempfile.NamedTemporaryFile(delete=False, mode='w+t') as input_file:
            input_file.write(input_text)
            input_file.seek(0)
            output_file_path = tempfile.mktemp(suffix='.txt')

            format_text(input_file.name, output_file_path)

            with open(output_file_path, 'r') as output_file:
                output_text = output_file.read().strip()

            self.assertEqual(expected_output, output_text)

        os.remove(input_file.name)
        os.remove(output_file_path)

    def test_file_with_no_newlines(self):
        # Test with text that has no newlines
        input_text = "This is a continuous line without breaks."
        expected_output = "This is a continuous line without breaks."

        with tempfile.NamedTemporaryFile(delete=False, mode='w+t') as input_file:
            input_file.write(input_text)
            input_file.seek(0)
            output_file_path = tempfile.mktemp(suffix='.txt')

            format_text(input_file.name, output_file_path)

            with open(output_file_path, 'r') as output_file:
                output_text = output_file.read().strip()

            self.assertEqual(expected_output, output_text)

        os.remove(input_file.name)
        os.remove(output_file_path)
```

### Equivalent Jest Test Suite:
```javascript
const fs = require('fs');
const path = require('path');
const { tmpdir } = require('os');

// Mock the formatText function (assuming it's defined elsewhere)
jest.mock('./formatText', () => ({
    formatText: jest.fn()
}));

const formatText = require('./formatText');

describe('TestFormatText', () => {
    afterEach(() => {
        // Clean up after each test
        jest.restoreAllMocks();
    });

    test('test_basic_text', async () => {
        // Test with basic text
        const inputText = "This is line one.\nThis is line two.\nThis is line three.";
        const expectedOutput = "This is line one. This is line two. This is line three.";

        const inputFilePath = path.join(tmpdir(), 'input.txt');
        const outputFilePath = path.join(tmpdir(), 'output.txt');

        // Write input text to a temporary file
        fs.writeFileSync(inputFilePath, inputText);

        // Call the formatText function
        formatText(inputFilePath, outputFilePath);

        // Read the output file
        const outputText = fs.readFileSync(outputFilePath, 'utf8').trim();

        expect(outputText).toEqual(expectedOutput);

        // Clean up
        fs.unlinkSync(inputFilePath);
        fs.unlinkSync(outputFilePath);
    });

    test('test_single_line', async () => {
        // Test with a single line
        const inputText = "This is a single line.";
        const expectedOutput = "This is a single line.";

        const inputFilePath = path.join(tmpdir(), 'input.txt');
        const outputFilePath = path.join(tmpdir(), 'output.txt');

        // Write input text to a temporary file
        fs.writeFileSync(inputFilePath, inputText);

        // Call the formatText function
        formatText(inputFilePath, outputFilePath);

        // Read the output file
        const outputText = fs.readFileSync(outputFilePath, 'utf8').trim();

        expect(outputText).toEqual(expectedOutput);

        // Clean up
        fs.unlinkSync(inputFilePath);
        fs.unlinkSync(outputFilePath);
    });

    test('test_empty_file', async () => {
        // Test with an empty file
        const inputText = "";
        const expectedOutput = "";

        const inputFilePath = path.join(tmpdir(), 'input.txt');
        const outputFilePath = path.join(tmpdir(), 'output.txt');

        // Write input text to a temporary file
        fs.writeFileSync(inputFilePath, inputText);

        // Call the formatText function
        formatText(inputFilePath, outputFilePath);

        // Read the output file
        const outputText = fs.readFileSync(outputFilePath, 'utf8').trim();

        expect(outputText).toEqual(expectedOutput);

        // Clean up
        fs.unlinkSync(inputFilePath);
        fs.unlinkSync(outputFilePath);
    });

    test('test_file_with_no_newlines', async () => {
        // Test with text that has no newlines
        const inputText = "This is a continuous line without breaks.";
        const expectedOutput = "This is a continuous line without breaks.";

        const inputFilePath = path.join(tmpdir(), 'input.txt');
        const outputFilePath = path.join(tmpdir(), 'output.txt');

        // Write input text to a temporary file
        fs.writeFileSync(inputFilePath, inputText);

        // Call the formatText function
        formatText(inputFilePath, outputFilePath);

        // Read the output file
        const outputText = fs.readFileSync(outputFilePath, 'utf8').trim();

        expect(outputText).toEqual(expectedOutput);

        // Clean up
        fs.unlinkSync(inputFilePath);
        fs.unlinkSync(outputFilePath);
    });
});
```

### Explanation:
1. **Imports**:
   - We import necessary Node.js modules like `fs`, `path`, and `os` to handle file operations.
   - We mock the `formatText` function using Jest's `jest.mock` to ensure it is properly mocked during testing.

2. **Test Descriptions**:
   - Each test case is described using `test` blocks within the `describe` block.
   - The `afterEach` hook ensures that all mocks are restored after each test to avoid side effects.

3. **File Operations**:
   - We use `fs.writeFileSync` and `fs.readFileSync` to write and read files synchronously.
   - Temporary file paths are created using `path.join(tmpdir(), 'filename')`.

4. **Assertions**:
   - We use `expect` to assert that the output matches the expected output.
   - The `trim` method is used to remove any trailing whitespace from the output.

5. **Cleanup**:
   - After each test, we use `fs.unlinkSync` to remove the temporary files created during the test.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.