Certainly! Below is the equivalent TypeScript test class using Jest. The test cases will be structured similarly, and the necessary type annotations and Jest assertions will be included.

### TypeScript Code

First, let's define the `formatText` function in TypeScript:

```typescript
import * as fs from 'fs';
import * as path from 'path';
import { tmpdir } from 'os';

function formatText(inputFile: string = 'input.txt', outputFile: string = 'output.txt'): void {
    try {
        // Open the input file in read mode
        fs.readFile(inputFile, 'utf8', (err, data) => {
            if (err) {
                console.error("Error reading input file:", err);
                return;
            }

            // Process each line
            const lines = data.split('\n');
            const processedLines = lines.map(line => line.trimEnd());

            // Join the processed lines with spaces
            const contentWithoutNewlines = processedLines.join(' ');

            // Write the content without newlines to the output file
            fs.writeFile(outputFile, contentWithoutNewlines, (writeErr) => {
                if (writeErr) {
                    console.error("Error writing to output file:", writeErr);
                } else {
                    console.log("Line breaks removed and spaces added. Output written to", outputFile);
                }
            });
        });
    } catch (error) {
        console.error("An unexpected error occurred:", error);
    }
}

export default formatText;
```

### Jest Test Class

Now, let's create the Jest test class:

```typescript
import { formatText } from './path/to/formatText'; // Adjust the import path as needed
import * as fs from 'fs';
import * as path from 'path';
import { tmpdir } from 'os';

describe('TestFormatText', () => {
    beforeEach(() => {
        // Before each test, clean up any temporary files
        jest.resetModules();
    });

    afterEach(() => {
        // After each test, clean up any temporary files
        const cleanup = (filePath: string) => {
            if (fs.existsSync(filePath)) {
                fs.unlinkSync(filePath);
            }
        };

        cleanup(tmpInputFilePath);
        cleanup(tmpOutputFilePath);
    });

    let tmpInputFilePath: string;
    let tmpOutputFilePath: string;

    const createTempFile = (content: string): string => {
        const tempFilePath = path.join(tmpdir(), `temp-${Date.now()}.txt`);
        fs.writeFileSync(tempFilePath, content);
        return tempFilePath;
    };

    describe('test_basic_text', () => {
        it('should format basic text correctly', () => {
            const inputText = "This is line one.\nThis is line two.\nThis is line three.";
            const expectedOutput = "This is line one. This is line two. This is line three.";

            tmpInputFilePath = createTempFile(inputText);
            tmpOutputFilePath = createTempFile('');

            formatText(tmpInputFilePath, tmpOutputFilePath);

            return new Promise<void>((resolve, reject) => {
                fs.readFile(tmpOutputFilePath, 'utf8', (err, data) => {
                    if (err) {
                        reject(err);
                    } else {
                        expect(data.trim()).toBe(expectedOutput);
                        resolve();
                    }
                });
            });
        });
    });

    describe('test_single_line', () => {
        it('should format a single line correctly', () => {
            const inputText = "This is a single line.";
            const expectedOutput = "This is a single line.";

            tmpInputFilePath = createTempFile(inputText);
            tmpOutputFilePath = createTempFile('');

            formatText(tmpInputFilePath, tmpOutputFilePath);

            return new Promise<void>((resolve, reject) => {
                fs.readFile(tmpOutputFilePath, 'utf8', (err, data) => {
                    if (err) {
                        reject(err);
                    } else {
                        expect(data.trim()).toBe(expectedOutput);
                        resolve();
                    }
                });
            });
        });
    });

    describe('test_empty_file', () => {
        it('should handle an empty file correctly', () => {
            const inputText = "";
            const expectedOutput = "";

            tmpInputFilePath = createTempFile(inputText);
            tmpOutputFilePath = createTempFile('');

            formatText(tmpInputFilePath, tmpOutputFilePath);

            return new Promise<void>((resolve, reject) => {
                fs.readFile(tmpOutputFilePath, 'utf8', (err, data) => {
                    if (err) {
                        reject(err);
                    } else {
                        expect(data.trim()).toBe(expectedOutput);
                        resolve();
                    }
                });
            });
        });
    });

    describe('test_file_with_no_newlines', () => {
        it('should handle a file with no newlines correctly', () => {
            const inputText = "This is a continuous line without breaks.";
            const expectedOutput = "This is a continuous line without breaks.";

            tmpInputFilePath = createTempFile(inputText);
            tmpOutputFilePath = createTempFile('');

            formatText(tmpInputFilePath, tmpOutputFilePath);

            return new Promise<void>((resolve, reject) => {
                fs.readFile(tmpOutputFilePath, 'utf8', (err, data) => {
                    if (err) {
                        reject(err);
                    } else {
                        expect(data.trim()).toBe(expectedOutput);
                        resolve();
                    }
                });
            });
        });
    });
});
```

### Explanation:
1. **Imports**:
   - Import necessary modules such as `fs`, `path`, and `tmpdir`.
   - Import the `formatText` function.

2. **Before and After Each Hooks**:
   - `beforeEach` resets Jest modules to ensure a clean state before each test.
   - `afterEach` cleans up temporary files after each test.

3. **Helper Functions**:
   - `createTempFile` creates a temporary file with the given content.
   - `cleanup` removes temporary files.

4. **Test Cases**:
   - Each test case creates temporary input and output files.
   - Calls `formatText` and reads the output file to verify the expected output.
   - Uses Promises to handle asynchronous file operations.

This setup ensures that the tests are structured similarly to the Python unittests and uses Jest's assertion methods appropriately.