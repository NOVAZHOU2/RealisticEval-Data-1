Sure! Below is the equivalent TypeScript Jest test case for your provided Python unittest test class.

### Python Unittest Test Class

```python
import unittest

class MyTestCase(unittest.TestCase):
    def setUp(self):
        self.value = 10

    def tearDown(self):
        del self.value

    def test_addition(self):
        result = self.value + 5
        self.assertEqual(result, 15)

    def test_subtraction(self):
        result = self.value - 3
        self.assertEqual(result, 7)

if __name__ == '__main__':
    unittest.main()
```

### Equivalent TypeScript Jest Test Case

```typescript
import { describe, beforeAll, afterAll, it, expect } from '@jest/globals';

describe('MyTestSuite', () => {
    let value: number;

    beforeAll(() => {
        value = 10;
    });

    afterAll(() => {
        delete value;
    });

    it('should add 5 to value and get 15', () => {
        const result = value + 5;
        expect(result).toBe(15);
    });

    it('should subtract 3 from value and get 7', () => {
        const result = value - 3;
        expect(result).toBe(7);
    });
});
```

### Explanation

- **`beforeAll`**: This is similar to `setUp` in Python. It runs once before all tests in the suite.
- **`afterAll`**: This is similar to `tearDown` in Python. It runs once after all tests in the suite.
- **`it`**: This is used to define individual test cases. Each `it` block contains one assertion.
- **`expect`**: This is used to make assertions. The `.toBe()` method checks if the expected value matches the actual value.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest
```

or

```sh
yarn add --dev jest
```

Then, you can run your tests using:

```sh
npx jest
```

or

```sh
yarn jest
```