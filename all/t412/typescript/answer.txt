Sure! Here is the equivalent TypeScript code for the provided Python script:

```typescript
function formatText(inputFile: string = 'input.txt', outputFile: string = 'output.txt'): void {
    try {
        // Read the content of the input file
        const fs = require('fs');
        const lines = fs.readFileSync(inputFile, 'utf8').split('\n');

        // Process each line
        const processedLines: string[] = [];
        for (const line of lines) {
            // Remove newline characters and add a space
            const processedLine = line.trimEnd();
            processedLines.push(processedLine);  // Append the processed line
        }

        // Join the processed lines with spaces
        const contentWithoutNewlines = processedLines.join(' ');

        // Write the content without newlines to the output file
        fs.writeFileSync(outputFile, contentWithoutNewlines);

        console.log("Line breaks removed and spaces added. Output written to", outputFile);

    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error("Input file not found.");
        } else {
            throw error;
        }
    }
}
```

### Explanation:
1. **File System Module**: 
   - In TypeScript/JavaScript, you need to use the `fs` module to handle file operations.
   - Import the `fs` module using `require('fs')`.

2. **Reading File**:
   - Use `fs.readFileSync` to read the entire content of the input file synchronously.
   - Split the content by newline characters (`\n`) to get an array of lines.

3. **Processing Lines**:
   - Iterate over each line and remove trailing newline characters using `trimEnd()` (equivalent to `rstrip('\n')` in Python).
   - Append each processed line to an array.

4. **Joining Lines**:
   - Join the processed lines with spaces using `join(' ')`.

5. **Writing to Output File**:
   - Use `fs.writeFileSync` to write the processed content to the output file.

6. **Error Handling**:
   - Catch errors and specifically handle the case where the input file is not found (`ENOENT`).

This TypeScript code maintains the same functionality as the original Python script but uses the appropriate methods and syntax for Node.js and TypeScript.