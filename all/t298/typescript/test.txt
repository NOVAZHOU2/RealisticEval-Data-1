Certainly! Below is the TypeScript version of your JavaScript Jest test case using `describe` blocks:

```typescript
import { setEurValue } from './path-to-your-setEurValue-function'; // Adjust the import path accordingly

describe('setEurValue function', () => {
    it('should return an empty string for non-numeric or invalid inputs', () => {
        expect(setEurValue('abc')).toBe('');
        expect(setEurValue(null)).toBe('');
        expect(setEurValue(undefined)).toBe('');
        expect(setEurValue({})).toBe('');
        expect(setEurValue([])).toBe('');
    });

    it('should return the number as a string if the value is below 1000', () => {
        expect(setEurValue(999)).toBe('999');
        expect(setEurValue(500)).toBe('500');
        expect(setEurValue(123)).toBe('123');
    });

    it('should append "k" for values between 1000 and 999999', () => {
        expect(setEurValue(1000)).toBe('1k');
        expect(setEurValue(4567)).toBe('4.5k');
        expect(setEurValue(999999)).toBe('999k');
    });

    it('should append "m" for values above 999999', () => {
        expect(setEurValue(1000000)).toBe('1m');
        expect(setEurValue(4567890)).toBe('4.5m');
        expect(setEurValue(999999999)).toBe('999m');
    });
});
```

### Explanation:
1. **Import Statement**: Ensure you import the `setEurValue` function correctly based on its location in your project.
2. **Describe Block**: Groups related tests together under the `setEurValue function` description.
3. **It Blocks**: Each `it` block contains a specific test case. They cover different scenarios such as non-numeric inputs, numbers below 1000, numbers between 1000 and 999999, and numbers above 999999.

This structure ensures that your tests are organized and easy to understand.