To convert the given JavaScript Jest test case to a C++ Catch2 test case, we first need to define the function `setEurValue` in C++. After that, we can write the corresponding Catch2 test cases.

Here's how you can do it:

### Step 1: Define the Function

First, let's define the `setEurValue` function in C++:

```cpp
#include <string>
#include <optional>

std::string setEurValue(const std::string& value) {
    // Check if the input is numeric
    try {
        double num = std::stod(value);
        if (num >= 1000) {
            if (num >= 1e6) {
                return std::to_string(num / 1e6) + "m";
            } else {
                return std::to_string(num / 1000) + "k";
            }
        } else {
            return value;
        }
    } catch (...) {
        // If conversion fails, return an empty string
        return "";
    }
}

std::string setEurValue(double value) {
    if (value >= 1000) {
        if (value >= 1e6) {
            return std::to_string(value / 1e6) + "m";
        } else {
            return std::to_string(value / 1000) + "k";
        }
    } else {
        return std::to_string(value);
    }
}
```

### Step 2: Write Catch2 Test Cases

Now, let's write the Catch2 test cases for the `setEurValue` function:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

TEST_CASE("setEurValue with numeric strings", "[setEurValue]") {
    REQUIRE(setEurValue("123") == "123");
    REQUIRE(setEurValue("999") == "999");
    REQUIRE(setEurValue("1000") == "1k");
    REQUIRE(setEurValue("1500") == "1.5k");
    REQUIRE(setEurValue("1234567") == "1.23m");
    REQUIRE(setEurValue("12345678") == "12.34m");
}

TEST_CASE("setEurValue with invalid inputs", "[setEurValue]") {
    REQUIRE(setEurValue("abc") == "");
    REQUIRE(setEurValue("-123") == "");
    REQUIRE(setEurValue("") == "");
}

TEST_CASE("setEurValue with floating-point numbers", "[setEurValue]") {
    REQUIRE(setEurValue(123.0) == "123");
    REQUIRE(setEurValue(999.0) == "999");
    REQUIRE(setEurValue(1000.0) == "1k");
    REQUIRE(setEurValue(1500.0) == "1.5k");
    REQUIRE(setEurValue(1234567.0) == "1.23m");
    REQUIRE(setEurValue(12345678.0) == "12.34m");
}
```

### Explanation

1. **Function Definition**: The `setEurValue` function is defined to handle both string and numeric types. It checks if the input is numeric and then formats it accordingly.
   
2. **Catch2 Test Cases**:
   - `setEurValue with numeric strings`: Tests various numeric strings to ensure they are formatted correctly.
   - `setEurValue with invalid inputs`: Tests non-numeric and invalid inputs to ensure the function returns an empty string.
   - `setEurValue with floating-point numbers`: Tests floating-point numbers to ensure they are handled correctly.

These test cases cover different scenarios to ensure the `setEurValue` function works as expected.