Certainly! Hereâ€™s the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Simplify file paths in Windows systems into name strings.
 * 
 * For example:
 *   Input: C:\Users\User\file.txt
 *   Output: C_Users_User_file.txt
 * 
 * @param path - The Windows file path string.
 * @returns The simplified path string.
 */
function simplifyWindowsPath(path: string): string {
  // Replace the drive letter and colon, e.g., 'C:' with 'C_'
  const [drive, pathWithoutDrive] = path.split(':');
  const simplifiedDrive = drive + '_';

  // Replace backslashes with underscores and strip any trailing backslash
  const simplifiedPath = pathWithoutDrive.replace(/\\/g, '_').replace(/_+$/, '');

  // Concatenate the simplified drive and the remaining path
  const finalPath = simplifiedDrive + simplifiedPath;

  return finalPath;
}

// Example usage
console.log(simplifyWindowsPath('C:\\Users\\User\\file.txt'));
```

### Explanation:
1. **JSDoc Documentation**: The JSDoc-style comments provide clear documentation for the function, including examples and parameter/return descriptions.
2. **Function Signature**: The function `simplifyWindowsPath` is defined with a type annotation for the input parameter `path` and the return type `string`.
3. **Splitting the Drive**: The `path.split(':')` method is used to separate the drive letter from the rest of the path.
4. **Simplifying the Drive**: The drive letter is concatenated with an underscore.
5. **Simplifying the Path**: Backslashes are replaced with underscores, and any trailing underscores are removed.
6. **Concatenation**: The simplified drive and the simplified path are concatenated to form the final path.
7. **Example Usage**: An example usage of the function is provided at the end.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and providing clear documentation.