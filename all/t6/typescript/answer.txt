Sure! Hereâ€™s the equivalent TypeScript code, ensuring that the functionality remains consistent and making use of TypeScript's static typing and file system operations through Node.js:

```typescript
import * as path from 'path';

function simplifyWindowsPath(inputPath: string): string {
  // Replace the drive letter and colon, e.g., 'D:' with 'D_'
  const [drive, pathWithoutDrive] = path.parse(inputPath);
  const simplifiedDrive = drive.replace(':', '') + '_';

  // Replace backslashes with underscores and strip any trailing backslash
  const simplifiedPath = pathWithoutDrive.replace(/\\/g, '_').replace(/_+$/, '');

  // Concatenate the simplified drive and the remaining path
  const finalPath = simplifiedDrive + simplifiedPath;

  return finalPath;
}

// Example usage
console.log(simplifyWindowsPath('D:\\Users\\John\\Documents'));
```

### Explanation:
1. **Import `path` module**: The `path` module from Node.js is used to handle paths.
2. **Function Definition**: The function `simplifyWindowsPath` takes a string argument and returns a string.
3. **Parse Path**: Using `path.parse`, we split the input path into its components (drive and path without drive).
4. **Simplify Drive**: We replace the colon in the drive letter with an underscore.
5. **Simplify Path**: We replace all backslashes (`\`) with underscores (`_`) and remove any trailing underscores.
6. **Concatenate**: We concatenate the simplified drive and the simplified path.
7. **Return Final Path**: The function returns the final simplified path.

This TypeScript code closely mirrors the functionality of the provided Python code, adapting it to TypeScript and Node.js conventions.