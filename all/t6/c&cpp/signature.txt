Certainly! Here is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <algorithm>

/**
 * Simplify file paths in Windows systems into name strings.
 * For example:
 *     Input: C:\\Users\\User\\file.txt
 *     Output: C_Users_User_file.txt
 *
 * @param path The Windows file path string.
 * @return The simplified path string.
 */
std::string simplifyWindowsPath(const std::string& path) {
    // Split the drive letter from the rest of the path
    size_t pos = path.find(':');
    if (pos == std::string::npos) {
        return path; // Return the original path if no drive letter is found
    }

    // Simplify the drive letter by replacing ':' with '_'
    std::string simplifiedDrive = path.substr(0, pos + 1);
    simplifiedDrive.erase(std::remove(simplifiedDrive.begin(), simplifiedDrive.end(), ':'), simplifiedDrive.end());
    simplifiedDrive += '_';

    // Extract the part of the path without the drive letter
    std::string pathWithoutDrive = path.substr(pos + 1);

    // Replace backslashes with underscores and strip any trailing backslash
    std::string simplifiedPath = pathWithoutDrive;
    std::replace(simplifiedPath.begin(), simplifiedPath.end(), '\\', '_');
    simplifiedPath.erase(std::find_if(simplifiedPath.rbegin(), simplifiedPath.rend(), [](char ch) { return ch != '_'; }).base(), simplifiedPath.end());

    // Concatenate the simplified drive and the remaining path
    std::string finalPath = simplifiedDrive + simplifiedPath;

    return finalPath;
}

int main() {
    std::string path = "C:\\Users\\User\\file.txt";
    std::string result = simplifyWindowsPath(path);
    std::cout << "Simplified Path: " << result << std::endl;
    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `simplify_windows_path` is translated to `simplifyWindowsPath` in C++.
   - The parameter `path` is passed by reference (`const std::string& path`) to avoid unnecessary copying.

2. **Documentation Comments**:
   - Multi-line comments are used to document the function's purpose, arguments, and return value.
   - The documentation follows the C++ style using `/** ... */`.

3. **Function Implementation**:
   - The function first finds the position of the colon (`:`) to split the drive letter from the rest of the path.
   - It then simplifies the drive letter by removing the colon and appending an underscore.
   - The part of the path without the drive letter is extracted.
   - Backslashes are replaced with underscores, and any trailing underscores are removed.
   - The simplified drive and the simplified path are concatenated to form the final path.

4. **Main Function**:
   - A sample path is provided, and the `simplifyWindowsPath` function is called to demonstrate its usage.
   - The result is printed to the console.

This C++ code preserves the original functionality and structure of the Python code while adhering to C++ conventions and best practices.