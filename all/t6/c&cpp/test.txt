Certainly! Below is an equivalent C++ unit test case using Catch2 for the `simplify_windows_path` function.

```cpp
#include <catch2/catch.hpp>
#include <string>

// Function to simplify Windows paths
std::string simplify_windows_path(const std::string& path) {
    // Replace backslashes with underscores and remove drive letter if present
    std::string simplifiedPath = path;
    size_t colonPos = simplifiedPath.find(':');
    if (colonPos != std::string::npos) {
        simplifiedPath.erase(0, colonPos + 1);
    }
    std::replace(simplifiedPath.begin(), simplifiedPath.end(), '\\', '_');
    return simplifiedPath;
}

TEST_CASE("Simplify Windows Path", "[simplify_windows_path]") {
    CHECK(simplify_windows_path("C:\\Users\\User\\file.txt") == "Users_User_file.txt");
    CHECK(simplify_windows_path("D:\\Projects\\ProjectName\\main.cpp") == "Projects_ProjectName_main.cpp");
    CHECK(simplify_windows_path("C:\\a\\b\\c\\d.txt") == "a_b_c_d.txt");
    CHECK(simplify_windows_path("C:\\single_folder") == "single_folder");
    CHECK(simplify_windows_path("C:\\no_extension") == "no_extension");
    CHECK(simplify_windows_path("C:\\empty_path\\" )== "");
    CHECK(simplify_windows_path("C:\\trailing_backslash\\") == "trailing_backslash");
}
```

### Explanation:
- **Catch2**: The Catch2 framework is used for writing unit tests in C++. It provides a simple and intuitive way to write test cases.
- **Function `simplify_windows_path`**: This function takes a Windows file path as input and simplifies it by replacing backslashes with underscores and removing the drive letter if present.
- **Test Cases**:
  - Each `CHECK` macro verifies that the `simplify_windows_path` function produces the expected output for various input paths.
  - Test cases cover different scenarios such as paths with multiple directories, single folders, no extension, empty paths, and trailing backslashes.

Make sure you have Catch2 installed and properly configured in your development environment to compile and run these tests.