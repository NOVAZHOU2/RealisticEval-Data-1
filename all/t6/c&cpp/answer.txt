Here is the equivalent C++ code for your Python function:

```cpp
#include <string>
#include <algorithm>

std::string simplifyWindowsPath(std::string path) {
    // Replace all backslashes with underscores
    std::replace(path.begin(), path.end(), '\\', '_');

    return path;
}
```

And here is an equivalent C code:

```c
#include <stdio.h>
#include <string.h>

void simplifyWindowsPath(char* path) {
    // Replace all backslashes with underscores
    for(int i = 0; i < strlen(path); ++i) {
        if(path[i] == '\\') {
            path[i] = '_';
        }
    }
}

int main() {
    char path[] = "C:\\Users\\User\\file.txt";
    simplifyWindowsPath(path);
    printf("%s\n", path);

    return 0;
}
```

These functions will replace all occurrences of backslashes (`\`) in the given string with underscores (`_`). Please note that these examples do not handle cases where there might be multiple consecutive slashes or when the string contains special characters that need to be handled differently.

For more complex scenarios, you may want to use standard library functions like `strtok` or regular expressions (`regex` in C++) to split the path and then recombine it using underscores.