Hereâ€™s how you can convert the given Python function to C and C++ code:

### C Code

```c
#include <stdio.h>
#include <string.h>

void simplify_windows_path(const char *path, char *simplified_path) {
    int j = 0;
    for (int i = 0; path[i] != '\0'; i++) {
        if (path[i] == '\\') {
            simplified_path[j++] = '_';
        } else {
            simplified_path[j++] = path[i];
        }
    }
    simplified_path[j] = '\0'; // Null-terminate the string
}

int main() {
    const char *path = "C:\\Users\\User\\file.txt";
    char simplified_path[256]; // Adjust size as needed

    simplify_windows_path(path, simplified_path);
    printf("Simplified Path: %s\n", simplified_path);

    return 0;
}
```

### C++ Code

```cpp
#include <iostream>
#include <string>

std::string simplify_windows_path(const std::string &path) {
    std::string simplified_path;
    for (char c : path) {
        if (c == '\\') {
            simplified_path += '_';
        } else {
            simplified_path += c;
        }
    }
    return simplified_path;
}

int main() {
    std::string path = "C:\\Users\\User\\file.txt";
    std::string simplified_path = simplify_windows_path(path);
    std::cout << "Simplified Path: " << simplified_path << std::endl;
    return 0;
}
```

### Explanation

- **C Code**: The `simplify_windows_path` function takes a C-style string and builds a new simplified string using a character array. It replaces `\` with `_` and handles string termination properly.
  
- **C++ Code**: The function uses `std::string` for easier string manipulation. It iterates over each character and constructs a new string with the replacements.

You can compile and run either version to see the simplified file path output.