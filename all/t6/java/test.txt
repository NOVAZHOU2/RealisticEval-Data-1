Sure! Below is the equivalent Java test case using JUnit, which converts the functionality of the provided Python unittest for the `simplify_windows_path` function.

### Python Code (Original)

```python
import unittest

def simplify_windows_path(path: str) -> str:
    """
    simplify file paths in windows systems into name strings.
    For example:
        input: C:\\Users\\User\\file.txt
        output: C_Users_User_file.txt
    Args:
        path (str): windows file path str

    Returns:
        str: simplify path str
    """
    # Simplifying logic
    drive, path = path.split(':')
    simplified_path = path.replace('\\', '_')
    return f"{drive}_{simplified_path}"

class TestPathSimplifier(unittest.TestCase):
    def test_simplify_windows_path(self):
        self.assertEqual(simplify_windows_path("C:\\Users\\User\\file.txt"), "C_Users_User_file.txt")
```

### Java Code (JUnit)

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class Tester {

    public static String simplifyWindowsPath(String path) {
        // Simplifying logic
        String[] parts = path.split(":");
        String drive = parts[0];
        String simplifiedPath = parts[1].replace("\\", "_");
        return drive + "_" + simplifiedPath;
    }

    @Test
    public void testSimplifyWindowsPath() {
        assertEquals("C_Users_User_file.txt", simplifyWindowsPath("C:\\Users\\User\\file.txt"));
    }
}
```

### Explanation:
- The `simplify_windows_path` function in Python is replicated in Java as `simplifyWindowsPath`.
- The JUnit test class is named `Tester`, and the test method checks the same condition using `assertEquals`.
- The path is split by the colon (`:`) to separate the drive letter and the rest of the path, similar to the original logic.