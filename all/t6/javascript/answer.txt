Sure, hereâ€™s how you can convert the given Python code into JavaScript while maintaining the same functionality, logic, and structure:

```javascript
const path = require('path');

function simplifyWindowsPath(inputPath) {
    // Split the input path into drive and path components
    const drive = path.parse(inputPath).root;
    const pathWithoutDrive = inputPath.slice(drive.length);

    // Simplify the drive component by replacing ':' with '_'
    const simplifiedDrive = drive.replace(':', '_');

    // Replace backslashes with underscores and strip any trailing underscore
    const simplifiedPath = pathWithoutDrive.replace(/\\/g, '_').replace(/_+$/, '');

    // Concatenate the simplified drive and the remaining path
    const finalPath = simplifiedDrive + simplifiedPath;

    return finalPath;
}

// Example usage:
console.log(simplifyWindowsPath('D:\\Users\\Example User\\Documents'));
```

### Explanation:
1. **Splitting the Path**:
   - `path.parse(inputPath).root` extracts the drive letter (e.g., `'D:\\'`).
   - `inputPath.slice(drive.length)` removes the drive part from the path.

2. **Simplifying the Drive**:
   - `drive.replace(':', '_')` replaces the colon with an underscore.

3. **Replacing Backslashes and Stripping Trailing Underscores**:
   - `replace(/\\/g, '_')` replaces all backslashes (`\\`) with underscores.
   - `replace(/_+$/, '')` strips any trailing underscores.

4. **Concatenating the Final Path**:
   - `simplifiedDrive + simplifiedPath` combines the simplified drive and the simplified path.

This JavaScript function should behave similarly to the provided Python function.