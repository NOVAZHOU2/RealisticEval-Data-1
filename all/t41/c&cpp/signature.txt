Certainly! Below is the equivalent C++ code for the provided Python class definition, including comments and documentation:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <openssl/sha.h> // Requires OpenSSL library

/**
 * Implement a Bloom filter class with an add method that adds an element to the Bloom filter.
 * Callers can check for the presence of an element directly using the in keyword.
 */
class BloomFilter {
public:
    /**
     * Constructor for the BloomFilter class.
     *
     * @param size The size of the bit array.
     * @param hash_count The number of hash functions to use.
     */
    BloomFilter(size_t size, size_t hash_count);

    /**
     * Add an item to the Bloom filter.
     *
     * @param item The item to add.
     */
    void add(const std::string& item);

private:
    size_t size;          // Size of the bit array
    size_t hash_count;    // Number of hash functions
    std::vector<bool> bit_array; // Bit array for the Bloom filter
};

// Constructor implementation
BloomFilter::BloomFilter(size_t size, size_t hash_count) : size(size), hash_count(hash_count), bit_array(size, false) {}

// Add method implementation
void BloomFilter::add(const std::string& item) {
    // Add an item to the Bloom filter
    // Implementation details go here
}

int main() {
    BloomFilter bf(1000, 5);
    bf.add("hello");

    // Example usage
    std::cout << "Bloom filter initialized." << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**:
   - `#include <iostream>` for input/output.
   - `#include <string>` for string manipulation.
   - `#include <vector>` for the bit array.
   - `#include <openssl/sha.h>` for SHA-256 hashing (requires OpenSSL).

2. **Class Definition**:
   - `BloomFilter` class with member variables `size`, `hash_count`, and `bit_array`.
   - Constructor initializes the bit array with zeros.

3. **Documentation Comments**:
   - Multi-line comments (`/* ... */`) are used for class and method documentation.
   - Single-line comments (`//`) are used for inline comments.

4. **Constructor**:
   - `BloomFilter(size_t size, size_t hash_count)` initializes the Bloom filter with the specified size and hash count.

5. **Add Method**:
   - `void add(const std::string& item)` adds an item to the Bloom filter. The implementation details are left as placeholders.

6. **Main Function**:
   - Demonstrates creating an instance of `BloomFilter` and adding an item to it.

This code preserves the original purpose and structure of the Python code while adhering to C++ syntax and documentation standards.