Sure, here's how you can convert your Python unittest test class to a C++ test case using Catch2:

```cpp
#include <catch2/catch.hpp>
#include "BloomFilter.h" // Assuming your BloomFilter implementation is in this header file

// Mocking the BloomFilter class for testing purposes
class MockBloomFilter {
public:
    void add(const std::string& item) {
        // Implementation of add method
    }
};

TEST_CASE("BloomFilter Test", "[bloomfilter]") {
    MockBloomFilter bloomFilter;

    SECTION("Adding an item should not throw an exception") {
        REQUIRE_NOTHROW(bloomFilter.add("testItem"));
    }

    SECTION("Checking for the presence of an added item should return true") {
        bloomFilter.add("testItem");
        CHECK(bloomFilter.contains("testItem")); // Assuming contains() is a member function that checks if an item is present
    }

    SECTION("Checking for the absence of an item should return false") {
        CHECK(!bloomFilter.contains("nonExistentItem")); // Assuming contains() is a member function that checks if an item is present
    }
}
```

Please note that this is just a mock-up example and assumes you have a `contains` method implemented in your `BloomFilter` class. If your actual implementation does not include this method, you will need to add it or adjust the test cases accordingly.

Also, make sure to replace `"BloomFilter.h"` with the actual path to your `BloomFilter` header file.