Sure, I can help you convert the given Python unittest test class into a Java JUnit test case. Below is the equivalent Java code for your `Tester` class.

First, let's define the `BloomFilter` class in Java:

```java
import java.util.BitSet;
import java.util.Random;

public class BloomFilter {
    private BitSet bitSet;
    private int size;
    private int hashCount;

    public BloomFilter(int size, int hashCount) {
        this.size = size;
        this.hashCount = hashCount;
        this.bitSet = new BitSet(size);
    }

    public void add(String item) {
        Random random = new Random(item.hashCode());
        for (int i = 0; i < hashCount; i++) {
            int index = Math.abs(random.nextInt()) % size;
            bitSet.set(index);
        }
    }

    public boolean contains(String item) {
        Random random = new Random(item.hashCode());
        for (int i = 0; i < hashCount; i++) {
            int index = Math.abs(random.nextInt()) % size;
            if (!bitSet.get(index)) {
                return false;
            }
        }
        return true;
    }
}
```

Next, let's create the `Tester` class in Java using JUnit:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Tester {

    private BloomFilter bloomFilter;

    @BeforeEach
    public void setUp() {
        bloomFilter = new BloomFilter(100, 3); // Adjust size and hash count as needed
    }

    @Test
    public void testAddAndContains() {
        String item = "testItem";
        bloomFilter.add(item);

        assertTrue(bloomFilter.contains(item));
    }

    @Test
    public void testFalsePositive() {
        String item1 = "item1";
        String item2 = "item2";

        bloomFilter.add(item1);

        assertFalse(bloomFilter.contains(item2));
    }

    @Test
    public void testMultipleAdds() {
        String item1 = "item1";
        String item2 = "item2";

        bloomFilter.add(item1);
        bloomFilter.add(item2);

        assertTrue(bloomFilter.contains(item1));
        assertTrue(bloomFilter.contains(item2));
    }
}
```

In this Java code:
- We have a `BloomFilter` class that uses a `BitSet` to store the elements.
- The `add` method hashes the input string multiple times and sets the corresponding bits in the `BitSet`.
- The `contains` method checks if all hashed indices contain a set bit.
- The `Tester` class contains three test methods to verify the functionality of the `BloomFilter`.

Make sure to include the JUnit dependency in your project. If you're using Maven, you can add the following to your `pom.xml`:

```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
```

This should give you a good starting point for testing your Bloom Filter implementation in Java using JUnit.