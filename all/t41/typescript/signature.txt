Here is how you could translate your Python code into TypeScript:

```typescript
/**
 * Implement a bloom filter class with an add method that adds an element to the Bloom filter.
 * Callers can check for the presence of an element directly using the 'in' keyword.
 */
class BloomFilter {
    private size: number;
    private hashCount: number;

    constructor(size: number, hashCount: number) {
        this.size = size;
        this.hashCount = hashCount;
    }

    public add(item: string): void {
        // Add an item to the bloom filter
    }
}
```

In this TypeScript version, I've added private properties `size` and `hashCount` to store the parameters passed in the constructor. The `add()` function has been made public and expects a string as its parameter.

Please note that you would need to implement the actual logic inside the `add()` function according to your specific requirements. Also, TypeScript doesn't have a built-in 'in' operator like Python, so if you want to check if an item exists in the bloom filter, you would need to create a separate method for it.