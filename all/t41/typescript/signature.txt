Certainly! Hereâ€™s the equivalent TypeScript code for the provided Python class, including proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Implements a Bloom filter class with an add method that adds an element to the Bloom filter.
 * Callers can check for the presence of an element directly using the `in` keyword.
 */
class BloomFilter {
  private size: number;
  private hashCount: number;
  private bitArray: boolean[];

  /**
   * Initializes the Bloom filter with a specified size and number of hash functions.
   * @param size The size of the bit array.
   * @param hashCount The number of hash functions to use.
   */
  constructor(size: number, hashCount: number) {
    this.size = size;
    this.hashCount = hashCount;
    this.bitArray = new Array(size).fill(false);
  }

  /**
   * Adds an item to the Bloom filter.
   * @param item The item to add.
   */
  add(item: string): void {
    // Add an item to the Bloom filter
    // Implementation details go here
  }

  /**
   * Checks if an item is possibly in the Bloom filter.
   * @param item The item to check.
   * @returns true if the item might be in the Bloom filter, false otherwise.
   */
  contains(item: string): boolean {
    // Implementation details go here
    return false; // Placeholder return value
  }
}

// Example usage
const bloomFilter = new BloomFilter(1000, 5);
bloomFilter.add('hello');
console.log(bloomFilter.contains('hello')); // Should log true
console.log(bloomFilter.contains('world')); // Should log false
```

### Explanation:
1. **Class Definition**:
   - The `BloomFilter` class is defined with JSDoc comments explaining its purpose and methods.

2. **Constructor**:
   - The constructor initializes the `size`, `hashCount`, and `bitArray` properties.
   - The `bitArray` is initialized as an array of booleans filled with `false`.

3. **Methods**:
   - `add`: This method is documented to add an item to the Bloom filter. The actual implementation details are left as placeholders.
   - `contains`: This method checks if an item is possibly in the Bloom filter. The actual implementation details are left as placeholders.

4. **JSDoc Comments**:
   - Each method and the class itself have JSDoc comments providing clear documentation.

5. **Example Usage**:
   - An example demonstrates creating a `BloomFilter` instance, adding items, and checking for their presence.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices for documentation.