Sure, here is the equivalent TypeScript code for your JavaScript function:

```typescript
/**
 * Converts a thread object to a JSON file represented as a Blob.
 * 
 * @param {Thread} thread - The thread object to be converted.
 * @returns {Blob} - A Blob representing the JSON file.
 */
function convertThreadToJSONFile(thread: Thread): Blob {
    const jsonString = JSON.stringify(thread);  // Convert the thread object to a JSON string
    const jsonBlob = encodeStringAsBlob(jsonString);  // Encode the JSON string as a Blob
    return jsonBlob;
}
```

To make this TypeScript code more robust, you need to define the type `Thread` and the function `encodeStringAsBlob`. Here’s an example of how you might define these:

```typescript
interface Thread {
    // Define the properties of the Thread interface
    // Example:
    id: number;
    title: string;
    // ... other properties
}

function encodeStringAsBlob(jsonString: string): Blob {
    // Assuming this function converts a string to a Blob
    // Example implementation:
    return new Blob([jsonString], { type: 'application/json' });
}

/**
 * Converts a thread object to a JSON file represented as a Blob.
 * 
 * @param {Thread} thread - The thread object to be converted.
 * @returns {Blob} - A Blob representing the JSON file.
 */
function convertThreadToJSONFile(thread: Thread): Blob {
    const jsonString = JSON.stringify(thread);  // Convert the thread object to a JSON string
    const jsonBlob = encodeStringAsBlob(jsonString);  // Encode the JSON string as a Blob
    return jsonBlob;
}
```

In this example, I’ve defined a basic `Thread` interface with two properties (`id` and `title`). You should adjust the `Thread` interface to match the actual structure of your thread objects. Additionally, the `encodeStringAsBlob` function is implemented to create a Blob from the JSON string.