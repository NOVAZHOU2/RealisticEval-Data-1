Certainly! Here is the TypeScript version of your Jest test case using `describe` and `test` blocks:

```typescript
import { convertThreadToJSONFile } from './path/to/your/function'; // Import the function

// Define the Thread interface
interface Thread {
    id?: number;
    title?: string;
    content?: string;
    comments?: { user: string; comment: string }[];
    tags?: string[];
}

describe('convertThreadToJSONFile Function Tests', () => {
    test('should return a Blob object for a basic thread object', () => {
        const thread1: Thread = { id: 1, title: "First Thread", content: "This is the first thread." };
        const blob1 = convertThreadToJSONFile(thread1);
        expect(blob1 instanceof Blob).toBe(true);
        expect(blob1.type).toBe("application/json");
    });

    test('should return a Blob object for an empty thread object', () => {
        const thread2: Thread = {};
        const blob2 = convertThreadToJSONFile(thread2);
        expect(blob2 instanceof Blob).toBe(true);
        expect(blob2.size).toBe(2); // "{}" has a size of 2 bytes
    });

    test('should return a Blob object for a thread object with nested objects', () => {
        const thread3: Thread = { id: 2, title: "Second Thread", comments: [{ user: "Alice", comment: "Great post!" }] };
        const blob3 = convertThreadToJSONFile(thread3);
        expect(blob3 instanceof Blob).toBe(true);
    });

    test('should return a Blob object for a thread object with special characters', () => {
        const thread4: Thread = { id: 3, title: "Thread & Special <Characters>", content: 'This is a thread with special characters: <, >, &, ".' };
        const blob4 = convertThreadToJSONFile(thread4);
        expect(blob4 instanceof Blob).toBe(true);
    });

    test('should return a Blob object for a thread object with arrays', () => {
        const thread5: Thread = { id: 4, title: "Thread with Array", tags: ["JavaScript", "JSON", "Blob"] };
        const blob5 = convertThreadToJSONFile(thread5);
        expect(blob5 instanceof Blob).toBe(true);
    });
});
```

### Explanation:
1. **Import Statement**: Ensure you import the `convertThreadToJSONFile` function from the appropriate module.
2. **Interface Definition**: Define the `Thread` interface to specify the structure of the thread objects.
3. **Test Cases**: Each test case uses the `Thread` interface to define the thread objects and performs assertions on the returned Blob objects.

### Notes:
- Make sure to replace `./path/to/your/function` with the actual path where the `convertThreadToJSONFile` function is located.
- The `Thread` interface includes optional properties to handle various cases (e.g., empty objects, nested objects, arrays).

This setup ensures that your test cases are properly typed and structured in TypeScript.