Here’s the equivalent TypeScript test code using Jest, based on the provided C++ Catch2 test cases:

```typescript
import { splitString } from './path/to/your/module'; // Adjust the import to your file structure

describe('splitString function', () => {
    test('Split a regular sentence', () => {
        const input = "Hello world from Catch2";
        const expected = ["Hello", "world", "from", "Catch2"];
        expect(splitString(input)).toEqual(expected);
    });

    test('Handle multiple spaces', () => {
        const input = "Multiple   spaces between words";
        const expected = ["Multiple", "spaces", "between", "words"];
        expect(splitString(input)).toEqual(expected);
    });

    test('Single word input', () => {
        const input = "Single";
        const expected = ["Single"];
        expect(splitString(input)).toEqual(expected);
    });

    test('Empty string input', () => {
        const input = "";
        const expected: string[] = [];
        expect(splitString(input)).toEqual(expected);
    });

    test('String with leading and trailing spaces', () => {
        const input = "   Leading and trailing spaces   ";
        const expected = ["Leading", "and", "trailing", "spaces"];
        expect(splitString(input)).toEqual(expected);
    });
});
```

### Explanation:
- **Imports**: The `splitString` function is imported from the appropriate module. Adjust the import path based on your project structure.
- **`describe` and `test` Functions**: `describe` groups related tests, and `test` defines individual test cases, analogous to `TEST_CASE` and `SECTION` in Catch2.
- **Assertions**: Used `expect(...).toEqual(...)` for checking equality, which is Jest’s way of asserting that two values are deeply equal.
- **Type Annotations**: Type annotations are added where necessary, such as for the expected empty array.