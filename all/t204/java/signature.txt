Hereâ€™s the equivalent Java code, structured according to your requirements:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

/**
 * Split a string into multiple substrings based on spaces and return a list containing these substrings.
 *
 * @param str The input string to be split into words.
 * @return A list of strings, each representing a word from the input string. Returns an empty list if the input string is empty or contains only spaces.
 */
public class Answer {
    public static List<String> splitString(String str) {
        List<String> result = new ArrayList<>();
        String[] words = str.trim().split("\\s+");

        for (String word : words) {
            if (!word.isEmpty()) {
                result.add(word);
            }
        }

        return result;
    }
}
```

### Explanation:
- The C++ `std::vector<std::string>` is replaced with `List<String>`, using `ArrayList` for the implementation.
- The input parameter type changes from `const std::string&` to `String`.
- The logic of splitting the string and adding words to the list is adapted to Java syntax and conventions, ensuring that empty words (resulting from multiple spaces) are not added to the list.