Certainly! Below is an equivalent C++ test case using Catch2 for the `shuffleString` function. Note that I'll provide a simple implementation of `shuffleString` for completeness.

```cpp
#include <iostream>
#include <string>
#include <algorithm>
#include <random>
#include <catch2/catch.hpp>

/**
 * Shuffles the characters in a given string randomly.
 *
 * @param inputString - The string to shuffle.
 * @returns A new string with the characters shuffled.
 */
std::string shuffleString(const std::string& inputString) {
    if (inputString.empty()) return "";

    std::string shuffled = inputString;
    static std::mt19937 rng(std::random_device{}());
    std::shuffle(shuffled.begin(), shuffled.end(), rng);

    return shuffled;
}

// Test cases using Catch2
TEST_CASE("ShuffleString", "[shuffle]") {
    SECTION("Empty string") {
        REQUIRE(shuffleString("") == "");
    }

    SECTION("Single character string") {
        REQUIRE(shuffleString("a") == "a");
    }

    SECTION("Two-character string") {
        std::string result = shuffleString("ab");
        REQUIRE(result == "ab" || result == "ba");
    }

    SECTION("Multiple-character string") {
        std::string result = shuffleString("hello");
        // Since the order is random, we just check if it's still a permutation of "hello"
        std::sort(result.begin(), result.end());
        REQUIRE(result == "ehllo");
    }
}
```

### Explanation:
1. **Include Necessary Headers**: We include the necessary headers for string manipulation, algorithm, random number generation, and Catch2 testing framework.
2. **Function Implementation**: The `shuffleString` function shuffles the characters in the input string using the Mersenne Twister engine from `<random>`.
3. **Catch2 Test Cases**:
   - **Empty String**: Checks if shuffling an empty string returns an empty string.
   - **Single Character String**: Checks if shuffling a single-character string returns the same string.
   - **Two-Character String**: Checks if the shuffled string can be either "ab" or "ba".
   - **Multiple-Character String**: Checks if the shuffled string is still a permutation of the original string "hello".

Make sure you have Catch2 installed and properly set up in your project to compile and run these tests.