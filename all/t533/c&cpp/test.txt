Certainly! Below is an equivalent C++ test case using Catch2 for testing a function that shuffles the characters in a given string randomly.

```cpp
#include <catch2/catch.hpp>
#include <algorithm>
#include <random>
#include <string>

/**
 * Shuffles the characters in a given string randomly.
 *
 * @param inputString - The string to shuffle.
 * @returns A new string with the characters shuffled.
 */
std::string shuffleString(const std::string& inputString) {
    std::string shuffled = inputString;
    static std::mt19937 rng(std::random_device{}());
    std::shuffle(shuffled.begin(), shuffled.end(), rng);
    return shuffled;
}

TEST_CASE("ShuffleString", "[shuffle]") {
    // Test with empty string
    REQUIRE(shuffleString("") == "");

    // Test with single character
    REQUIRE(shuffleString("a") == "a");

    // Test with multiple characters
    std::string original = "hello";
    std::string result = shuffleString(original);

    // Ensure the length remains the same
    REQUIRE(result.length() == original.length());

    // Check if all characters from the original string are present in the result
    for (char c : original) {
        REQUIRE(result.find(c) != std::string::npos);
    }

    // Additional checks can be added here to ensure randomness
}
```

### Explanation:
1. **Include Catch2**: We include the Catch2 header file which provides the testing framework.
2. **Shuffle Function**: The `shuffleString` function takes a string and returns a shuffled version of it using the `<algorithm>` library's `std::shuffle` function with a random number generator.
3. **Test Case**: We define a test case named `ShuffleString` using the `TEST_CASE` macro.
   - **Empty String**: Tests the function with an empty string and ensures the output is also an empty string.
   - **Single Character**: Tests the function with a single character and ensures the output is the same single character.
   - **Multiple Characters**: Tests the function with a multi-character string and ensures:
     - The length of the shuffled string matches the original string.
     - All characters from the original string are present in the shuffled string.

This test case ensures that the `shuffleString` function behaves correctly under various conditions.