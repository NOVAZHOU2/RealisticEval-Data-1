Certainly! Below is the TypeScript version of your Jest test case using `describe`:

```typescript
import { shuffleString } from './shuffleString'; // Adjust the import path accordingly

describe('shuffleString function', () => {
  it('should return a new string with characters shuffled', () => {
    const inputString = 'abcdef';
    const result = shuffleString(inputString);

    expect(result).not.toEqual(inputString);
    expect(result.length).toBe(inputString.length);
    expect(result.split('').every(char => inputString.includes(char))).toBe(true);
  });

  it('should handle empty strings correctly', () => {
    const inputString = '';
    const result = shuffleString(inputString);

    expect(result).toEqual('');
  });

  it('should handle strings with one character correctly', () => {
    const inputString = 'a';
    const result = shuffleString(inputString);

    expect(result).toEqual('a');
  });
});
```

In this example:
1. We import the `shuffleString` function from the appropriate file.
2. We use `describe` to group related tests together.
3. Each `it` block contains a specific test case.
4. We use various Jest matchers like `.not.toEqual`, `.toBe`, and `.every` to check the expected outcomes.

Make sure you have the necessary TypeScript configuration set up in your project for this to work.