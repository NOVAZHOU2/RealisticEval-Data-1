Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Apply the im2col operation to an input image.
 *
 * @param {Float32Array} image - The input image of shape [C, H, W] where:
 *   C: Number of channels
 *   H: Height of the image
 *   W: Width of the image
 * @param {number} filterHeight - Height of the filter
 * @param {number} filterWidth - Width of the filter
 * @param {number} [stride=1] - Stride of the filter
 * @param {number} [padding=0] - Number of pixels to pad the input image
 * @returns {Float32Array} A 2D array where each column is a flattened filter region
 */
function im2col(image, filterHeight, filterWidth, stride = 1, padding = 0) {
    const [C, H, W] = image.shape;
    const outHeight = Math.floor((H + 2 * padding - filterHeight) / stride + 1);
    const outWidth = Math.floor((W + 2 * padding - filterWidth) / stride + 1);

    // Apply padding to the image
    const paddedImage = padImage(image, padding);

    // Initialize the column matrix
    const col = new Float32Array(C * filterHeight * filterWidth * outHeight * outWidth);

    // Fill the column matrix
    let colIdx = 0;
    for (let y = 0; y < H + 2 * padding - filterHeight + 1; y += stride) {
        for (let x = 0; x < W + 2 * padding - filterWidth + 1; x += stride) {
            const patch = extractPatch(paddedImage, C, H + 2 * padding, x, y, filterWidth, filterHeight);
            for (let i = 0; i < C * filterHeight * filterWidth; i++) {
                col[colIdx * (C * filterHeight * filterWidth) + i] = patch[i];
            }
            colIdx++;
        }
    }

    return col;
}

/**
 * Pad the input image with zeros.
 *
 * @param {Float32Array} image - The input image of shape [C, H, W]
 * @param {number} padding - Number of pixels to pad
 * @returns {Float32Array} The padded image
 */
function padImage(image, padding) {
    const [C, H, W] = image.shape;
    const paddedHeight = H + 2 * padding;
    const paddedWidth = W + 2 * padding;
    const paddedImage = new Float32Array(C * paddedHeight * paddedWidth);

    for (let c = 0; c < C; c++) {
        for (let y = 0; y < H; y++) {
            for (let x = 0; x < W; x++) {
                const idx = (c * H + y) * W + x;
                const paddedIdx = (c * paddedHeight + y + padding) * paddedWidth + x + padding;
                paddedImage[paddedIdx] = image[idx];
            }
        }
    }

    return paddedImage;
}

/**
 * Extract a patch from the padded image.
 *
 * @param {Float32Array} image - The padded image
 * @param {number} C - Number of channels
 * @param {number} height - Height of the padded image
 * @param {number} x - X-coordinate of the top-left corner of the patch
 * @param {number} y - Y-coordinate of the top-left corner of the patch
 * @param {number} width - Width of the patch
 * @param {number} height - Height of the patch
 * @returns {Float32Array} The extracted patch
 */
function extractPatch(image, C, height, x, y, width, height) {
    const patch = new Float32Array(C * width * height);

    for (let c = 0; c < C; c++) {
        for (let j = 0; j < height; j++) {
            for (let i = 0; i < width; i++) {
                const idx = (c * height + y + j) * height + x + i;
                const patchIdx = (c * height + j) * width + i;
                patch[patchIdx] = image[idx];
            }
        }
    }

    return patch;
}

// Example usage
const image = new Float32Array([1, 2, 3, 4, 5, 6, 7, 8, 9]);
image.shape = [1, 3, 3]; // Assuming a custom shape property for demonstration purposes
const filterHeight = 2;
const filterWidth = 2;
const stride = 1;
const padding = 0;

const result = im2col(image, filterHeight, filterWidth, stride, padding);
console.log(result);
```

### Key Points:
1. **JSDoc Comments**: The comments have been rewritten to conform to JSDoc standards.
2. **Function Signatures**: The function signatures are preserved and documented.
3. **Typed Arrays**: JavaScript uses `Float32Array` for numerical operations.
4. **Padding Function**: The `padImage` function pads the image with zeros.
5. **Extract Patch Function**: The `extractPatch` function extracts the patch from the padded image.
6. **Example Usage**: An example usage is provided at the end to demonstrate how to call the `im2col` function.

This JavaScript code should perform the same functionality as the provided Python code.