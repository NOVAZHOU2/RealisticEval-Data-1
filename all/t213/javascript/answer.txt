Sure, here's how you can translate your Python function `im2col` into JavaScript:

```javascript
function im2col(image, filterHeight, filterWidth, stride = 1, padding = 0) {
    // Get dimensions from the image array
    const [channels, height, width] = image.shape;

    // Calculate new dimensions after padding
    const paddedHeight = height + 2 * padding;
    const paddedWidth = width + 2 * padding;

    // Create a padded version of the image
    const paddedImage = Array.from({ length: channels }, () => 
        Array(paddedHeight).fill().map(() => Array(paddedWidth).fill(0))
    );

    // Fill the padded image with original values
    for (let c = 0; c < channels; c++) {
        for (let i = 0; i < height; i++) {
            for (let j = 0; j < width; j++) {
                paddedImage[c][i + padding][j + padding] = image[c][i][j];
            }
        }
    }

    // Initialize the output matrix
    let rows = Math.floor((paddedHeight - filterHeight) / stride + 1);
    let cols = Math.floor((paddedWidth - filterWidth) / stride + 1);
    let colCount = rows * cols * channels * filterHeight * filterWidth;
    let col = new Array(colCount);

    // Perform the im2col operation
    let index = 0;
    for (let c = 0; c < channels; c++) {
        for (let h = 0; h <= paddedHeight - filterHeight; h += stride) {
            for (let w = 0; w <= paddedWidth - filterWidth; w += stride) {
                for (let fh = 0; fh < filterHeight; fh++) {
                    for (let fw = 0; fw < filterWidth; fw++) {
                        col[index++] = paddedImage[c][h + fh][w + fw];
                    }
                }
            }
        }
    }

    return col;
}
```

Please note that in JavaScript, arrays are more commonly used than NumPy arrays, and their structure is slightly different. This script assumes that the `image` parameter is a nested array where the first dimension represents channels, the second represents rows, and the third represents columns. If your actual data structure differs, you may need to adjust the code accordingly. Additionally, JavaScript does not have built-in support for dynamic typing or slicing like NumPy, so some operations might be less straightforward.