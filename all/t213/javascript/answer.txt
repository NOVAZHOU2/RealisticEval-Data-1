To convert the given Python code into JavaScript, we need to ensure that the functionality, logic, and structure remain consistent. We will use the `typed-array` for numerical operations, which is similar to NumPy arrays in Python.

Here is the equivalent JavaScript code:

```javascript
// Import necessary packages
const { test } = require('node:test');
const { padEnd } = require('lodash');

function im2col(image, filterHeight, filterWidth, stride = 1, padding = 0) {
    /**
     * Apply the im2col operation to an input image.
     *
     * Parameters:
     * - image (TypedArray): The input image of shape [C, H, W] where:
     *     C: Number of channels
     *     H: Height of the image
     *     W: Width of the image
     * - filterHeight (int): Height of the filter
     * - filterWidth (int): Width of the filter
     * - stride (int): Stride of the filter
     * - padding (int): Number of pixels to pad the input image
     *
     * Returns:
     * - col (TypedArray): A 2D array where each column is a flattened filter region
     */

    const [C, H, W] = image.shape;
    const outHeight = Math.floor((H + 2 * padding - filterHeight) / stride + 1);
    const outWidth = Math.floor((W + 2 * padding - filterWidth) / stride + 1);

    // Apply padding to the image
    const paddedImage = padImage(image, padding);

    // Initialize the column matrix
    const col = new Float32Array(C * filterHeight * filterWidth * outHeight * outWidth);

    // Fill the column matrix
    let colIdx = 0;
    for (let y = 0; y < H + 2 * padding - filterHeight + 1; y += stride) {
        for (let x = 0; x < W + 2 * padding - filterWidth + 1; x += stride) {
            const patch = extractPatch(paddedImage, C, H + 2 * padding, x, y, filterWidth, filterHeight);
            for (let i = 0; i < C * filterHeight * filterWidth; i++) {
                col[colIdx * (C * filterHeight * filterWidth) + i] = patch[i];
            }
            colIdx++;
        }
    }

    return col;
}

function padImage(image, padding) {
    const [C, H, W] = image.shape;
    const paddedHeight = H + 2 * padding;
    const paddedWidth = W + 2 * padding;
    const paddedImage = new Float32Array(C * paddedHeight * paddedWidth);

    for (let c = 0; c < C; c++) {
        for (let y = 0; y < H; y++) {
            for (let x = 0; x < W; x++) {
                const idx = (c * H + y) * W + x;
                const paddedIdx = (c * paddedHeight + y + padding) * paddedWidth + x + padding;
                paddedImage[paddedIdx] = image[idx];
            }
        }
    }

    return paddedImage;
}

function extractPatch(image, C, height, x, y, width, height) {
    const patch = new Float32Array(C * width * height);

    for (let c = 0; c < C; c++) {
        for (let j = 0; j < height; j++) {
            for (let i = 0; i < width; i++) {
                const idx = (c * height + y + j) * height + x + i;
                const patchIdx = (c * height + j) * width + i;
                patch[patchIdx] = image[idx];
            }
        }
    }

    return patch;
}

// Example usage
const image = new Float32Array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape([1, 3, 3]);
const filterHeight = 2;
const filterWidth = 2;
const stride = 1;
const padding = 0;

const result = im2col(image, filterHeight, filterWidth, stride, padding);
console.log(result);
```

### Notes:
1. **Typed Arrays**: JavaScript uses typed arrays (`Float32Array`) for numerical operations.
2. **Padding Function**: The `padImage` function pads the image with zeros.
3. **Extract Patch Function**: The `extractPatch` function extracts the patch from the padded image.
4. **Reshape Function**: The `reshape` method is not directly available in JavaScript, so you would need to manually reshape the array if needed.

This JavaScript code should perform the same functionality as the provided Python code.