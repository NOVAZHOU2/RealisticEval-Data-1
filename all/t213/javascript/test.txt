Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import unittest
import numpy as np

class TestIm2Col(unittest.TestCase):

    def test_single_channel_no_padding_stride_1(self):
        image = np.array([
            [[1, 2, 3, 4],
             [5, 6, 7, 8],
             [9, 10, 11, 12],
             [13, 14, 15, 16]]
        ])  # Shape (1, 4, 4)
        filter_height = 2
        filter_width = 2
        stride = 1
        padding = 0

        expected_output = np.array([
            [1, 2, 3, 5, 6, 7, 9, 10, 11],
            [2, 3, 4, 6, 7, 8, 10, 11, 12],
            [5, 6, 7, 9, 10, 11, 13, 14, 15],
            [6, 7, 8, 10, 11, 12, 14, 15, 16]
        ])
        output = im2col(image, filter_height, filter_width, stride, padding)
        np.testing.assert_array_equal(output, expected_output)

    def test_single_channel_no_padding_stride_2(self):
        image = np.array([
            [[1, 2, 3, 4],
             [5, 6, 7, 8],
             [9, 10, 11, 12],
             [13, 14, 15, 16]]
        ])  # Shape (1, 4, 4)
        filter_height = 2
        filter_width = 2
        stride = 2
        padding = 0

        expected_output = np.array([
            [1, 3, 9, 11],
            [2, 4, 10, 12],
            [5, 7, 13, 15],
            [6, 8, 14, 16]
        ])
        output = im2col(image, filter_height, filter_width, stride, padding)
        np.testing.assert_array_equal(output, expected_output)

    def test_multi_channel_no_padding_stride_1(self):
        image = np.array([
            [[1, 2, 3],
             [4, 5, 6],
             [7, 8, 9]],
            [[9, 8, 7],
             [6, 5, 4],
             [3, 2, 1]]
        ])  # Shape (2, 3, 3), 2 channels
        filter_height = 2
        filter_width = 2
        stride = 1
        padding = 0

        expected_output = np.array([
            [1, 2, 4, 5],
            [2, 3, 5, 6],
            [4, 5, 7, 8],
            [5, 6, 8, 9],
            [9, 8, 6, 5],
            [8, 7, 5, 4],
            [6, 5, 3, 2],
            [5, 4, 2, 1]
        ])
        output = im2col(image, filter_height, filter_width, stride, padding)
        np.testing.assert_array_equal(output, expected_output)
```

### Equivalent Jest Test Suite:
```javascript
const { expect } = require('@jest/globals');
const im2col = require('./im2col'); // Assuming im2col is defined in a separate file

describe('TestIm2Col', () => {
    it('test_single_channel_no_padding_stride_1', () => {
        const image = new Float32Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);
        image.shape = [1, 4, 4]; // Assuming a custom shape property for demonstration purposes
        const filterHeight = 2;
        const filterWidth = 2;
        const stride = 1;
        const padding = 0;

        const expectedOutput = [
            [1, 2, 3, 5, 6, 7, 9, 10, 11],
            [2, 3, 4, 6, 7, 8, 10, 11, 12],
            [5, 6, 7, 9, 10, 11, 13, 14, 15],
            [6, 7, 8, 10, 11, 12, 14, 15, 16]
        ];
        const output = im2col(image, filterHeight, filterWidth, stride, padding);
        expect(output).toEqual(expectedOutput);
    });

    it('test_single_channel_no_padding_stride_2', () => {
        const image = new Float32Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);
        image.shape = [1, 4, 4]; // Assuming a custom shape property for demonstration purposes
        const filterHeight = 2;
        const filterWidth = 2;
        const stride = 2;
        const padding = 0;

        const expectedOutput = [
            [1, 3, 9, 11],
            [2, 4, 10, 12],
            [5, 7, 13, 15],
            [6, 8, 14, 16]
        ];
        const output = im2col(image, filterHeight, filterWidth, stride, padding);
        expect(output).toEqual(expectedOutput);
    });

    it('test_multi_channel_no_padding_stride_1', () => {
        const image = new Float32Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
        image.shape = [2, 3, 3]; // Assuming a custom shape property for demonstration purposes
        const filterHeight = 2;
        const filterWidth = 2;
        const stride = 1;
        const padding = 0;

        const expectedOutput = [
            [1, 2, 4, 5],
            [2, 3, 5, 6],
            [4, 5, 7, 8],
            [5, 6, 8, 9],
            [9, 8, 6, 5],
            [8, 7, 5, 4],
            [6, 5, 3, 2],
            [5, 4, 2, 1]
        ];
        const output = im2col(image, filterHeight, filterWidth, stride, padding);
        expect(output).toEqual(expectedOutput);
    });
});
```

### Key Points:
1. **Jest Assertions**: The `expect` function is used for assertions.
2. **Test Structure**: Each test case is defined within a `describe` block using `it`.
3. **Typed Arrays**: JavaScript uses `Float32Array` for numerical operations.
4. **Shape Property**: For demonstration purposes, a custom `shape` property is assumed on the `Float32Array` object to mimic the shape attribute in NumPy arrays.
5. **Function Import**: The `im2col` function is imported from a separate file.

This Jest test suite should perform the same functionality as the provided Python unittest class.