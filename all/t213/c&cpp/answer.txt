Here's how you could implement the same functionality in C and C++. Note that C does not have built-in support for dynamic arrays or matrices like Python, so we'll use pointers and manually allocate memory for our data structures:

```c
#include <stdio.h>
#include <stdlib.h>

// Function prototypes
void* im2col_c(const float* image, int C, int H, int W, int filter_height, int filter_width, int stride, int padding);
void free_im2col_result(void* result);

int main() {
    // Example usage
    const float image[] = { /* ... */ }; // Your image data here
    int C = /* number of channels */;
    int H = /* height of the image */;
    int W = /* width of the image */;
    int filter_height = /* height of the filter */;
    int filter_width = /* width of the filter */;
    int stride = 1;
    int padding = 0;

    void* result = im2col_c(image, C, H, W, filter_height, filter_width, stride, padding);
    
    // Use the result...

    free_im2col_result(result);

    return 0;
}

void* im2col_c(const float* image, int C, int H, int W, int filter_height, int filter_width, int stride, int padding) {
    // Calculate dimensions of output matrix
    int out_H = ((H + 2 * padding - filter_height) / stride) + 1;
    int out_W = ((W + 2 * padding - filter_width) / stride) + 1;
    int out_size = C * filter_height * filter_width * out_H * out_W;

    // Allocate memory for output matrix
    float* col = malloc(out_size * sizeof(float));
    if (!col) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(1);
    }

    // Apply im2col operation
    // ...

    return col;
}

void free_im2col_result(void* result) {
    free(result);
}
```

In this C version, `im2col_c` takes a pointer to the input image data and calculates the dimensions of the output matrix based on the provided parameters. It then allocates memory for the output matrix and applies the im2col operation, which you need to fill in yourself. Finally, `free_im2col_result` should be called to free the allocated memory when it's no longer needed.

For C++, you can use standard library containers like `std::vector` instead of raw pointers for easier memory management and safer code:

```cpp
#include <iostream>
#include <vector>

// Function declarations
std::vector<float> im2col_cpp(const std::vector<float>& image, int C, int H, int W, int filter_height, int filter_width, int stride, int padding);
void print_matrix(const std::vector<float>& matrix, int rows, int cols);

int main() {
    // Example usage
    std::vector<float> image = { /* ... */ }; // Your image data here
    int C = /* number of channels */;
    int H = /* height of the image */;
    int W = /* width of the image */;
    int filter_height = /* height of the filter */;
    int filter_width = /* width of the filter */;
    int stride = 1;
    int padding = 0;

    std::vector<float> result = im2col_cpp(image, C, H, W, filter_height, filter_width, stride, padding);
    
    // Use the result...
    print_matrix(result, result.size() / (filter_height * filter_width), filter_height * filter_width);

    return 0;
}

std::vector<float> im2col_cpp(const std::vector<float>& image, int C, int H, int W, int filter_height, int filter_width, int stride, int padding) {
    // Calculate dimensions of output vector
    int out_H = ((H + 2 * padding - filter_height) / stride) + 1;
    int out_W = ((W + 2 * padding - filter_width) / stride) + 1;
    int out_size = C * filter_height * filter_width * out_H * out_W;

    // Create output vector
    std::vector<float> col(out_size);

    // Apply im2col operation
    // ...

    return col;
}

void print_matrix(const std::vector<float>& matrix, int rows, int cols) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            printf("%f ", matrix[i * cols + j]);
        }
        printf("\n");
    }
}
```

In this C++ version, `im2col_cpp` works similarly to its C counterpart but uses `std::vector` to manage memory automatically. The `print_matrix` function is used to display the resulting matrix, which you may want to modify according to your needs.