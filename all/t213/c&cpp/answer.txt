Hereâ€™s the equivalent C++ code for the given Python function `im2col`. This translation maintains the functionality and logic of the original Python code, including handling arrays and loops, but adapts it to use C++ syntax and libraries such as `Eigen` for matrix operations:

```cpp
#include <Eigen/Dense>
#include <iostream>

using Eigen::MatrixXd;
using Eigen::ArrayXd;

// Function to apply the im2col operation to an input image.
MatrixXd im2col(const Eigen::Array3i& image, int filter_height, int filter_width, int stride = 1, int padding = 0) {
    // Extract dimensions of the input image
    int C = image.dimension(0);
    int H = image.dimension(1);
    int W = image.dimension(2);

    // Calculate output dimensions
    int out_height = (H + 2 * padding - filter_height) / stride + 1;
    int out_width = (W + 2 * padding - filter_width) / stride + 1;

    // Create a padded image
    Eigen::Array3i padded_image(C, H + 2 * padding, W + 2 * padding);
    padded_image.setZero();
    padded_image.block(0, padding, padding, H, W) = image;

    // Initialize the column matrix
    MatrixXd col(C * filter_height * filter_width, out_height * out_width);
    col.setZero();

    // Fill the column matrix
    int col_idx = 0;
    for (int y = 0; y <= H + 2 * padding - filter_height; y += stride) {
        for (int x = 0; x <= W + 2 * padding - filter_width; x += stride) {
            Eigen::Array3i patch = padded_image.block(0, y, x, C, filter_height, filter_width);
            col.col(col_idx) = patch.reshape(C * filter_height * filter_width);
            col_idx++;
        }
    }

    return col;
}

// Example usage and verification
int main() {
    // Example input image
    Eigen::Array3i image(3, 4, 4);
    image << 1, 2, 3, 4,
             5, 6, 7, 8,
             9, 10, 11, 12,
             13, 14, 15, 16,
             17, 18, 19, 20,
             21, 22, 23, 24,
             25, 26, 27, 28,
             29, 30, 31, 32,
             33, 34, 35, 36,
             37, 38, 39, 40,
             41, 42, 43, 44,
             45, 46, 47, 48;

    // Parameters
    int filter_height = 2;
    int filter_width = 2;
    int stride = 1;
    int padding = 1;

    // Call the im2col function
    MatrixXd result = im2col(image, filter_height, filter_width, stride, padding);

    // Print the result
    std::cout << "Result:\n" << result << std::endl;

    return 0;
}
```

### Explanation:
1. **Eigen Library**: The Eigen library is used for efficient matrix operations in C++.
2. **Array Initialization**: The input image is initialized using `Eigen::Array3i`.
3. **Padding**: Padding is applied by creating a new array and copying the original image into it.
4. **Column Matrix Initialization**: The resulting column matrix is initialized with zeros.
5. **Looping and Patch Extraction**: Loops are used to extract patches from the padded image and flatten them into columns of the result matrix.

This code ensures that the functionality and logic of the Python code are preserved while adapting to C++ syntax and features.