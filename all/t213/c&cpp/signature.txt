Certainly! Below is the equivalent C++ code signature for the `im2col` function from Python, keeping the same parameters and comments:

```cpp
#include <vector>
#include <iostream>

/**
 * Apply the im2col operation to an input image.
 *
 * @param image The input image of shape (C, H, W) where:
 *     C: Number of channels
 *     H: Height of the image
 *     W: Width of the image
 * @param filterHeight Height of the filter
 * @param filterWidth Width of the filter
 * @param stride Stride of the filter
 * @param padding Number of pixels to pad the input image
 * @return A 2D vector where each row is a flattened filter region
 */
std::vector<std::vector<int>> im2col(const std::vector<std::vector<std::vector<int>>>& image, int filterHeight, int filterWidth, int stride = 1, int padding = 0);
```

### Explanation:
- **Parameters**:
  - `image`: A 3D vector representing the input image with dimensions `(C, H, W)`.
  - `filterHeight`: An integer representing the height of the filter.
  - `filterWidth`: An integer representing the width of the filter.
  - `stride`: An integer representing the stride of the filter. Default value is 1.
  - `padding`: An integer representing the number of pixels to pad the input image. Default value is 0.
  
- **Return Value**:
  - A 2D vector where each row is a flattened filter region extracted from the input image after applying padding and convolutional operation.

This C++ version uses standard library containers (`std::vector`) to represent multi-dimensional arrays, which is a common approach in C++. Note that error handling and edge cases might need to be added depending on your specific use case and requirements.