Certainly! Below is the equivalent C++ code for the given Python function `im2col`, including the conversion of function signatures, comments, and documentation to adhere to C++ standards. The code uses the `Eigen` library for efficient matrix operations.

```cpp
#include <Eigen/Dense>
#include <iostream>

using Eigen::Array3i;
using Eigen::MatrixXd;

/**
 * Apply the im2col operation to an input image.
 *
 * Parameters:
 * - image (Eigen::Array3i): The input image of shape (C, H, W) where:
 *     C: Number of channels
 *     H: Height of the image
 *     W: Width of the image
 * - filter_height (int): Height of the filter
 * - filter_width (int): Width of the filter
 * - stride (int): Stride of the filter
 * - padding (int): Number of pixels to pad the input image
 *
 * Returns:
 * - col (Eigen::MatrixXd): A 2D array where each column is a flattened filter region
 */
MatrixXd im2col(const Array3i& image, int filter_height, int filter_width, int stride = 1, int padding = 0) {
    // Extract dimensions of the input image
    int C = image.dimension(0);
    int H = image.dimension(1);
    int W = image.dimension(2);

    // Calculate output dimensions
    int out_height = (H + 2 * padding - filter_height) / stride + 1;
    int out_width = (W + 2 * padding - filter_width) / stride + 1;

    // Create a padded image
    Array3i padded_image(C, H + 2 * padding, W + 2 * padding);
    padded_image.setZero();
    padded_image.block(0, padding, padding, H, W) = image;

    // Initialize the column matrix
    MatrixXd col(C * filter_height * filter_width, out_height * out_width);
    col.setZero();

    // Fill the column matrix
    int col_idx = 0;
    for (int y = 0; y <= H + 2 * padding - filter_height; y += stride) {
        for (int x = 0; x <= W + 2 * padding - filter_width; x += stride) {
            Array3i patch = padded_image.block(0, y, x, C, filter_height, filter_width);
            col.col(col_idx) = patch.reshape(C * filter_height * filter_width);
            col_idx++;
        }
    }

    return col;
}

// Example usage and verification
int main() {
    // Example input image
    Array3i image(3, 4, 4);
    image << 1, 2, 3, 4,
             5, 6, 7, 8,
             9, 10, 11, 12,
             13, 14, 15, 16,
             17, 18, 19, 20,
             21, 22, 23, 24,
             25, 26, 27, 28,
             29, 30, 31, 32,
             33, 34, 35, 36,
             37, 38, 39, 40,
             41, 42, 43, 44,
             45, 46, 47, 48;

    // Parameters
    int filter_height = 2;
    int filter_width = 2;
    int stride = 1;
    int padding = 1;

    // Call the im2col function
    MatrixXd result = im2col(image, filter_height, filter_width, stride, padding);

    // Print the result
    std::cout << "Result:\n" << result << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The function signature is translated to C++ using `Eigen::Array3i` for the input image and `Eigen::MatrixXd` for the output.
   - Default values for `stride` and `padding` are preserved.

2. **Documentation**:
   - The Python docstring is converted to a multi-line comment block in C++ using `/* ... */`.

3. **Initialization**:
   - The input image is initialized using `Eigen::Array3i`.
   - The padded image is created and initialized with zeros.
   - The resulting column matrix is initialized with zeros.

4. **Looping and Patch Extraction**:
   - Loops are used to extract patches from the padded image and flatten them into columns of the result matrix.

5. **Example Usage**:
   - An example input image is provided, along with parameters for `filter_height`, `filter_width`, `stride`, and `padding`.
   - The `im2col` function is called, and the result is printed.

This code preserves the functionality and structure of the original Python code while adhering to C++ syntax and documentation standards.