Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class is translated into C++ while preserving the functionality and logic of the tests. The code includes appropriate assertions using Catch2.

### C++ Code Using Catch2

```cpp
#include <catch2/catch_test_macros.hpp>
#include <Eigen/Dense>
#include <iostream>

using Eigen::Array3i;
using Eigen::MatrixXd;

// Function to apply the im2col operation to an input image.
MatrixXd im2col(const Array3i& image, int filter_height, int filter_width, int stride = 1, int padding = 0) {
    // Extract dimensions of the input image
    int C = image.dimension(0);
    int H = image.dimension(1);
    int W = image.dimension(2);

    // Calculate output dimensions
    int out_height = (H + 2 * padding - filter_height) / stride + 1;
    int out_width = (W + 2 * padding - filter_width) / stride + 1;

    // Create a padded image
    Array3i padded_image(C, H + 2 * padding, W + 2 * padding);
    padded_image.setZero();
    padded_image.block(0, padding, padding, H, W) = image;

    // Initialize the column matrix
    MatrixXd col(C * filter_height * filter_width, out_height * out_width);
    col.setZero();

    // Fill the column matrix
    int col_idx = 0;
    for (int y = 0; y <= H + 2 * padding - filter_height; y += stride) {
        for (int x = 0; x <= W + 2 * padding - filter_width; x += stride) {
            Array3i patch = padded_image.block(0, y, x, C, filter_height, filter_width);
            col.col(col_idx) = patch.reshape(C * filter_height * filter_width);
            col_idx++;
        }
    }

    return col;
}

TEST_CASE("Test Im2Col Function") {
    SECTION("Single channel, no padding, stride 1") {
        Array3i image(1, 4, 4);
        image << 1, 2, 3, 4,
                 5, 6, 7, 8,
                 9, 10, 11, 12,
                 13, 14, 15, 16;

        int filter_height = 2;
        int filter_width = 2;
        int stride = 1;
        int padding = 0;

        MatrixXd expected_output(4, 9);
        expected_output << 1, 2, 3, 5, 6, 7, 9, 10, 11,
                           2, 3, 4, 6, 7, 8, 10, 11, 12,
                           5, 6, 7, 9, 10, 11, 13, 14, 15,
                           6, 7, 8, 10, 11, 12, 14, 15, 16;

        MatrixXd output = im2col(image, filter_height, filter_width, stride, padding);

        REQUIRE(output.rows() == expected_output.rows());
        REQUIRE(output.cols() == expected_output.cols());
        REQUIRE_THAT(output, Catch::Matchers::WithinAbs(expected_output, 1e-6));
    }

    SECTION("Single channel, no padding, stride 2") {
        Array3i image(1, 4, 4);
        image << 1, 2, 3, 4,
                 5, 6, 7, 8,
                 9, 10, 11, 12,
                 13, 14, 15, 16;

        int filter_height = 2;
        int filter_width = 2;
        int stride = 2;
        int padding = 0;

        MatrixXd expected_output(4, 4);
        expected_output << 1, 3, 9, 11,
                           2, 4, 10, 12,
                           5, 7, 13, 15,
                           6, 8, 14, 16;

        MatrixXd output = im2col(image, filter_height, filter_width, stride, padding);

        REQUIRE(output.rows() == expected_output.rows());
        REQUIRE(output.cols() == expected_output.cols());
        REQUIRE_THAT(output, Catch::Matchers::WithinAbs(expected_output, 1e-6));
    }

    SECTION("Multi-channel, no padding, stride 1") {
        Array3i image(2, 3, 3);
        image << 1, 2, 3,
                 4, 5, 6,
                 7, 8, 9,
                 9, 8, 7,
                 6, 5, 4,
                 3, 2, 1;

        int filter_height = 2;
        int filter_width = 2;
        int stride = 1;
        int padding = 0;

        MatrixXd expected_output(8, 4);
        expected_output << 1, 2, 4, 5,
                           2, 3, 5, 6,
                           4, 5, 7, 8,
                           5, 6, 8, 9,
                           9, 8, 6, 5,
                           8, 7, 5, 4,
                           6, 5, 3, 2,
                           5, 4, 2, 1;

        MatrixXd output = im2col(image, filter_height, filter_width, stride, padding);

        REQUIRE(output.rows() == expected_output.rows());
        REQUIRE(output.cols() == expected_output.cols());
        REQUIRE_THAT(output, Catch::Matchers::WithinAbs(expected_output, 1e-6));
    }
}
```

### Explanation:
1. **Catch2 Framework**:
   - The `#include <catch2/catch_test_macros.hpp>` header is included to use Catch2 for testing.
   - The `TEST_CASE` macro is used to define a test case.
   - The `SECTION` macro is used to define individual test sections within the test case.

2. **Function Signature**:
   - The `im2col` function is defined with the same parameters and logic as the Python version.

3. **Test Sections**:
   - Each test section corresponds to a specific test case from the Python unittest class.
   - The input images and expected outputs are initialized using `Eigen::Array3i` and `Eigen::MatrixXd`.
   - Assertions are performed using `REQUIRE` and `REQUIRE_THAT` to check the correctness of the output.

4. **Assertions**:
   - `REQUIRE` checks the dimensions of the output matrix.
   - `REQUIRE_THAT` checks the values of the output matrix using `Catch::Matchers::WithinAbs` to ensure they match the expected values within a tolerance.

This code ensures that the functionality and logic of the Python unittest class are preserved while adhering to C++ syntax and the Catch2 testing framework.