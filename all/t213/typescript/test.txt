Here's how you can convert your Python unittest test class into a TypeScript Jest test case:

```typescript
import { describe, it, expect } from '@jest/globals';
import * as tf from '@tensorflow/tfjs';

function im2col(image: tf.Tensor4D, filterHeight: number, filterWidth: number, stride = 1, padding = 0): tf.Tensor2D {
    // Your implementation here...
}

describe('im2col', () => {
    it('should correctly apply im2col operation on a single channel image with no padding and stride 1', async () => {
        const image = tf.tensor4d([
            [ [1], [2] ],
            [ [3], [4] ]
        ], [1, 2, 2, 1]);

        const result = im2col(image, 2, 2);

        expect(result.shape).toEqual([4, 1]);
        await expect(result.data()).resolves.toEqual(new Float32Array([1, 2, 3, 4]));
    });

    it('should correctly apply im2col operation on a multi-channel image with padding and stride 2', async () => {
        const image = tf.tensor4d([
            [ [1, 2], [3, 4] ],
            [ [5, 6], [7, 8] ]
        ], [2, 2, 2, 1]);

        const result = im2col(image, 2, 2, 2, 1);

        expect(result.shape).toEqual([9, 1]);
        await expect(result.data()).resolves.toEqual(new Float32Array([0, 0, 0, 1, 2, 3, 4, 5, 6]));
    });
});
```

This TypeScript code uses TensorFlow.js for tensor operations and Jest for testing. The `im2col` function is assumed to be implemented in the same file or imported from another module. The tests check if the function works correctly with different inputs, including images with different numbers of channels, padding, and strides.