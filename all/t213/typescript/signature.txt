Certainly! Below is the equivalent TypeScript code for the given Python function `im2col`, including proper type annotations and JSDoc-style documentation comments:

```typescript
import * as tf from '@tensorflow/tfjs';

/**
 * Apply the im2col operation to an input image.
 *
 * @param image - The input image of shape (C, H, W) where:
 *   - C: Number of channels
 *   - H: Height of the image
 *   - W: Width of the image
 * @param filterHeight - Height of the filter
 * @param filterWidth - Width of the filter
 * @param stride - Stride of the filter (default: 1)
 * @param padding - Number of pixels to pad the input image (default: 0)
 * @returns A 2D tensor where each column is a flattened filter region
 */
function im2col(image: tf.Tensor3D, filterHeight: number, filterWidth: number, stride: number = 1, padding: number = 0): tf.Tensor {
    const [C, H, W] = image.shape;
    const outHeight = Math.floor((H + 2 * padding - filterHeight) / stride) + 1;
    const outWidth = Math.floor((W + 2 * padding - filterWidth) / stride) + 1;

    // Apply padding to the image
    const paddedImage = tf.pad(image, [[0, 0], [padding, padding], [padding, padding]], 'constant');

    // Initialize the column matrix
    const col = tf.zeros([C * filterHeight * filterWidth, outHeight * outWidth]);

    // Fill the column matrix
    let colIdx = 0;
    for (let y = 0; y < H + 2 * padding - filterHeight + 1; y += stride) {
        for (let x = 0; x < W + 2 * padding - filterWidth + 1; x += stride) {
            const patch = paddedImage.slice([0, y, x], [C, filterHeight, filterWidth]);
            const flattenedPatch = patch.flatten();
            col.set(flattenedPatch.dataSync(), colIdx * flattenedPatch.size, flattenedPatch.size);
            colIdx++;
        }
    }

    return col;
}

// Example usage
const image = tf.tensor3d([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 3]);
const result = im2col(image, 2, 2, 1, 0);
console.log(result);
```

### Explanation:
1. **Imports**: We use `@tensorflow/tfjs` for tensor operations, which is similar to NumPy in Python but designed for TensorFlow.js.
2. **JSDoc Documentation**: The function is documented using JSDoc-style comments, providing clear descriptions of parameters and return values.
3. **Type Annotations**: The function parameters and return type are properly annotated with TypeScript types (`tf.Tensor3D` and `tf.Tensor`).
4. **Padding**: We use `tf.pad` to apply padding to the input image.
5. **Initialization**: We initialize the output tensor `col` with zeros.
6. **Looping and Filling**: We loop through the padded image and extract patches, flatten them, and set their values in the `col` tensor using the `set` method.
7. **Example Usage**: An example usage is provided at the end to demonstrate how to call the function.

This TypeScript code preserves the original functionality and structure of the Python code while adapting it to TypeScript's static type system and TensorFlow.js library.