Here's how you could convert the Python function `im2col` to TypeScript using the `ndarray` library for handling arrays:

```typescript
import { NdArray } from 'ndarray';

function im2col(image: NdArray<number>, filterHeight: number, filterWidth: number, stride = 1, padding = 0): NdArray<number> {
    const [channels, height, width] = image.shape;
    
    // Calculate output dimensions
    const outHeight = Math.floor((height + 2 * padding - filterHeight) / stride + 1);
    const outWidth = Math.floor((width + 2 * padding - filterWidth) / stride + 1);

    // Pad the image
    const paddedImage = NdArray.zeros([channels, height + 2 * padding, width + 2 * padding]);
    paddedImage.set(image, padding, padding);

    // Initialize output array
    const col = NdArray.zeros([filterHeight * filterWidth * channels, outHeight * outWidth]);

    // Perform im2col operation
    let k = 0;
    for (let c = 0; c < channels; ++c) {
        for (let h = 0; h < outHeight; ++h) {
            for (let w = 0; w < outWidth; ++w) {
                for (let fH = 0; fH < filterHeight; ++fH) {
                    for (let fW = 0; fW < filterWidth; ++fW) {
                        const hIndex = h * stride + fH;
                        const wIndex = w * stride + fW;
                        col.set(c * filterHeight * filterWidth + fH * filterWidth + fW, h * outWidth + w, paddedImage.get(c, hIndex, wIndex));
                    }
                }
            }
        }
    }

    return col;
}
```

Please note that this code uses the `ndarray` package which can be installed via npm or yarn in your Node.js environment. This package provides a way to handle multi-dimensional arrays efficiently in JavaScript/TypeScript. Also, it assumes that the `NdArray` class has methods like `shape`, `set`, and `get` which behave similarly to NumPy arrays.