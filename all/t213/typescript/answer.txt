Certainly! Below is the equivalent TypeScript code for the given Python function `im2col`. This conversion includes defining types and adapting the logic to TypeScript:

```typescript
import * as tf from '@tensorflow/tfjs';

function im2col(image: tf.Tensor3D, filterHeight: number, filterWidth: number, stride: number = 1, padding: number = 0): tf.Tensor {
    /**
     * Apply the im2col operation to an input image.
     *
     * Parameters:
     * - image (tf.Tensor3D): The input image of shape (C, H, W) where:
     *     C: Number of channels
     *     H: Height of the image
     *     W: Width of the image
     * - filterHeight (number): Height of the filter
     * - filterWidth (number): Width of the filter
     * - stride (number): Stride of the filter
     * - padding (number): Number of pixels to pad the input image
     *
     * Returns:
     * - col (tf.Tensor): A 2D tensor where each column is a flattened filter region
     */
    const [C, H, W] = image.shape;
    const outHeight = Math.floor((H + 2 * padding - filterHeight) / stride) + 1;
    const outWidth = Math.floor((W + 2 * padding - filterWidth) / stride) + 1;

    // Apply padding to the image
    const paddedImage = tf.pad(image, [[0, 0], [padding, padding], [padding, padding]], 'constant');

    // Initialize the column matrix
    const col = tf.zeros([C * filterHeight * filterWidth, outHeight * outWidth]);

    // Fill the column matrix
    let colIdx = 0;
    for (let y = 0; y < H + 2 * padding - filterHeight + 1; y += stride) {
        for (let x = 0; x < W + 2 * padding - filterWidth + 1; x += stride) {
            const patch = paddedImage.slice([0, y, x], [C, filterHeight, filterWidth]);
            const flattenedPatch = patch.flatten();
            col.set(flattenedPatch.dataSync(), colIdx * flattenedPatch.size, flattenedPatch.size);
            colIdx++;
        }
    }

    return col;
}

// Example usage
const image = tf.tensor3d([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 3]);
const result = im2col(image, 2, 2, 1, 0);
console.log(result);
```

### Explanation:
1. **Imports**: We use `@tensorflow/tfjs` for tensor operations, which is similar to NumPy in Python but designed for TensorFlow.js.
2. **Function Definition**: The function `im2col` takes a `tf.Tensor3D` as the input image and other parameters such as `filterHeight`, `filterWidth`, `stride`, and `padding`.
3. **Padding**: We use `tf.pad` to apply padding to the input image.
4. **Initialization**: We initialize the output tensor `col` with zeros.
5. **Looping and Filling**: We loop through the padded image and extract patches, flatten them, and set their values in the `col` tensor using `set` method.
6. **Example Usage**: An example usage is provided at the end to demonstrate how to call the function.

This TypeScript code maintains the same functionality and logic as the original Python code, while adapting it to TypeScript's static type system and TensorFlow.js library.