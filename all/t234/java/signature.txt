Certainly! Below is the Java equivalent of the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

package org.real.temp;

/**
 * A utility class for handling CSV file operations.
 */
public class Answer {

    /**
     * Appends a new row to a CSV file if there isn't a row with matching values in the first three columns.
     *
     * @param fileHandler The file handler of the CSV file opened in read-plus mode ('r+').
     * @param reader The CSV reader object for reading existing rows.
     * @param rowCandidate The list containing the new row to be appended.
     */
    public static void appendOrSkipRow(PrintWriter fileHandler, List<String> reader, List<String> rowCandidate) {
        // Read existing rows into a list
        List<List<String>> existingRows = new ArrayList<>();
        try (BufferedReader bufferedReader = new BufferedReader(new FileReader(fileHandler))) {
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                String[] parts = line.split(",");
                existingRows.add(new ArrayList<>(List.of(parts)));
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        // Check if a matching row exists in the first three columns
        for (List<String> row : existingRows) {
            if (row.size() >= 3 && row.subList(0, 3).equals(rowCandidate.subList(0, 3))) {
                System.out.println("Row already exists. Skipping append.");
                return;  // Skip appending if a match is found
            }
        }

        // Append the new row if no matching row is found
        fileHandler.println();  // Ensure there's a newline before appending
        fileHandler.println(String.join(",", rowCandidate));
    }

    public static void main(String[] args) {
        // Example usage
        try (PrintWriter fileHandler = new PrintWriter(new FileWriter("path/to/your/file.csv", true))) {
            List<String> rowCandidate = List.of("value1", "value2", "value3");
            List<String> reader = new ArrayList<>();  // Placeholder for the CSV reader
            appendOrSkipRow(fileHandler, reader, rowCandidate);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Method Signature**:
   - The method signature is defined as `public static void appendOrSkipRow(PrintWriter fileHandler, List<String> reader, List<String> rowCandidate)`.

2. **Javadoc Comments**:
   - The Javadoc comments provide a clear description of the method, its parameters, and its behavior.

3. **File Handling**:
   - Java uses `PrintWriter` for writing to the file and `BufferedReader` for reading from the file.
   - The `PrintWriter` is created with the file path and `true` as the second argument to append to the file.

4. **Reading CSV Rows**:
   - Each line is read using `BufferedReader` and split into an array of strings.
   - These arrays are converted to `ArrayList<String>` and stored in a list of lists (`existingRows`).

5. **Checking for Matching Rows**:
   - The method iterates through `existingRows` and checks if any row matches the first three elements of `rowCandidate`.

6. **Appending New Row**:
   - If no matching row is found, a newline is added using `fileHandler.println()` to ensure proper formatting.
   - The new row is appended by joining the elements of `rowCandidate` with commas.

7. **Exception Handling**:
   - Any `IOException` is caught and printed using `e.printStackTrace()`.

8. **Main Method**:
   - An example usage is provided in the `main` method to demonstrate how to call `appendOrSkipRow`.

This conversion ensures that the functionality and structure of the original Python code are preserved while adhering to Java's conventions and syntax.