Sure! Here’s the equivalent TypeScript code for the provided Python script. We will use Node.js for this conversion since TypeScript is typically used in a JavaScript/Node.js environment.

First, you need to install the `csv-parser` and `csv-writer` packages to handle CSV files in TypeScript:

```bash
npm install csv-parser csv-writer
```

Then, here’s the TypeScript code:

```typescript
import * as fs from 'fs';
import * as csvParser from 'csv-parser';
import * as createCsvWriter from 'csv-writer';

/**
 * Appends a new row to a CSV file if there isn't a row with matching values in the first three columns.
 *
 * @param filePath - Path to the CSV file.
 * @param rowCandidate - Array containing the new row to be appended.
 */
function appendOrSkipRow(filePath: string, rowCandidate: string[]): void {
    const results: string[][] = [];

    // Read existing rows into an array
    fs.createReadStream(filePath)
        .pipe(csvParser())
        .on('data', (row) => {
            results.push(Object.values(row));
        })
        .on('end', () => {
            // Check if a matching row exists in the first three columns
            let foundMatch = false;
            for (const row of results) {
                if (row.slice(0, 3).join(',') === rowCandidate.slice(0, 3).join(',')) {
                    console.log("Row already exists. Skipping append.");
                    foundMatch = true;
                    break;
                }
            }

            // Append the new row if no matching row is found
            if (!foundMatch) {
                const writer = createCsvWriter.createObjectCsvWriter({
                    path: filePath,
                    header: [
                        { id: 'column1', title: 'Column 1' },
                        { id: 'column2', title: 'Column 2' },
                        { id: 'column3', title: 'Column 3' },
                        // Add more columns if needed
                    ],
                });

                writer.writeRecords([rowCandidate])
                    .then(() => console.log("Row appended successfully."))
                    .catch((error) => console.error("Error appending row:", error));
            }
        });
}

// Example usage
appendOrSkipRow('path/to/your/file.csv', ['value1', 'value2', 'value3']);
```

### Explanation:
1. **Imports**: 
   - `fs` for file system operations.
   - `csv-parser` for parsing CSV files.
   - `csv-writer` for writing CSV files.

2. **Function Definition**:
   - `appendOrSkipRow` takes the file path and the row candidate as parameters.
   
3. **Reading CSV Data**:
   - Uses `fs.createReadStream` to read the CSV file.
   - Pipes it through `csvParser` to parse each row.
   - Stores the parsed rows in an array (`results`).

4. **Checking for Matching Rows**:
   - Iterates over the `results` array to check if a matching row exists based on the first three columns.
   - If a match is found, logs a message and skips appending.

5. **Appending New Row**:
   - If no match is found, uses `createObjectCsvWriter` from `csv-writer` to write the new row to the CSV file.
   - Handles success and error cases with callbacks.

6. **Example Usage**:
   - Calls `appendOrSkipRow` with a sample file path and row candidate.

This TypeScript code maintains the same functionality as the original Python code but adapts it to work with TypeScript and Node.js.