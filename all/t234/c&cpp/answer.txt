Sure, here is how you might convert that Python function into C++ using the `<fstream>`, `<sstream>`, and `<vector>` libraries. Note that C++ does not have built-in support for CSV parsing like Python's `csv` module, so we'll use a simple approach to parse the lines.

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

bool hasMatchingRow(std::ifstream &fileHandler, const std::vector<std::string> &rowCandidate) {
    std::string line;
    while (std::getline(fileHandler, line)) {
        std::istringstream iss(line);
        std::vector<std::string> row;
        std::string cell;

        // Read each cell from the current line
        while (std::getline(iss, cell, ',')) {
            row.push_back(cell);
        }

        // Check if the first three cells match the candidate row
        if (row.size() >= 3 && 
            row[0] == rowCandidate[0] && 
            row[1] == rowCandidate[1] && 
            row[2] == rowCandidate[2]) {
            return true;
        }
    }

    return false;
}

void appendOrSkipRow(std::fstream &fileHandler, const std::vector<std::string> &rowCandidate) {
    // Move to the beginning of the file to check for duplicates
    fileHandler.seekg(0);

    // If no matching row exists, append the new row
    if (!hasMatchingRow(fileHandler, rowCandidate)) {
        fileHandler.seekp(0, std::ios_base::end); // Go to the end of the file
        for (size_t i = 0; i < rowCandidate.size(); ++i) {
            fileHandler << rowCandidate[i];
            if (i != rowCandidate.size() - 1) {
                fileHandler << ",";
            }
        }
        fileHandler << "\n";
    }
}
```

### Explanation:
1. **hasMatchingRow Function**:
   - Opens the file and reads it line by line.
   - For each line, it splits the line into individual cells based on commas.
   - It checks if the first three cells match any row candidate.
   - Returns `true` if a match is found, otherwise `false`.

2. **appendOrSkipRow Function**:
   - Moves the file pointer to the beginning of the file to start checking for duplicates.
   - Calls `hasMatchingRow` to check if the candidate row already exists.
   - If no duplicate is found, it appends the candidate row at the end of the file.

### Usage Example:
```cpp
int main() {
    std::fstream fileHandler("example.csv", std::ios::in | std::ios::out | std::ios::app);
    if (!fileHandler.is_open()) {
        std::cerr << "Failed to open file" << std::endl;
        return 1;
    }

    std::vector<std::string> rowCandidate = {"value1", "value2", "value3"};

    appendOrSkipRow(fileHandler, rowCandidate);

    fileHandler.close();
    return 0;
}
```

This C++ code provides a basic implementation similar to your Python function. However, depending on the complexity of your CSV data or performance requirements, you may want to consider using a more robust CSV library for C++.