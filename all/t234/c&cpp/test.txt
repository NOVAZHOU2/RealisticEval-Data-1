Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The goal is to preserve the functionality and logic of the Python tests while adapting to C++ and Catch2.

### C++ Code Using Catch2

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager like vcpkg.

Here is the equivalent C++ test class:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

// Function to split a string by a delimiter
std::vector<std::string> split(const std::string &s, char delimiter) {
    std::vector<std::string> tokens;
    std::string token;
    std::istringstream tokenStream(s);
    while (std::getline(tokenStream, token, delimiter)) {
        tokens.push_back(token);
    }
    return tokens;
}

// Function to append or skip a row in a CSV file
void append_or_skip_row(std::fstream &file_handler, 
                        const std::vector<std::string> &reader, 
                        const std::vector<std::string> &row_candidate) {
    /**
     * Appends a new row to a CSV file if there isn't a row with matching values in the first three columns.
     *
     * Args:
     *     file_handler: File handler of the CSV file opened in read-plus mode ('inout').
     *     reader: Vector of strings representing existing rows.
     *     row_candidate: Vector of strings containing the new row to be appended.
     */

    // Read existing rows into a vector
    std::vector<std::vector<std::string>> existing_rows;

    std::string line;
    while (std::getline(file_handler, line)) {
        std::vector<std::string> row = split(line, ',');
        existing_rows.push_back(row);
    }

    // Check if a matching row exists in the first three columns
    bool row_exists = false;
    for (const auto& row : existing_rows) {
        if (row.size() >= 3 && row_candidate.size() >= 3 &&
            row[0] == row_candidate[0] && row[1] == row_candidate[1] && row[2] == row_candidate[2]) {
            std::cout << "Row already exists. Skipping append." << std::endl;
            row_exists = true;
            break;
        }
    }

    // Append the new row if no matching row is found
    if (!row_exists) {
        file_handler.seekp(0, std::ios::end);  // Move to the end of the file
        file_handler << '\n';
        for (size_t i = 0; i < row_candidate.size(); ++i) {
            file_handler << row_candidate[i];
            if (i != row_candidate.size() - 1) {
                file_handler << ",";
            }
        }
    }
}

TEST_CASE("Test append_or_skip_row") {
    SECTION("Test appending a new row when there are no matching values") {
        std::stringstream mock_file;
        mock_file << "Alice,30,USA\nBob,25,UK\nCharlie,35,Canada\n";
        mock_file.seekg(0);  // Reset pointer to the start of the mock file

        std::vector<std::string> reader = {"Alice,30,USA", "Bob,25,UK", "Charlie,35,Canada"};
        std::vector<std::string> new_row = {"David", "28", "Australia"};

        append_or_skip_row(mock_file, reader, new_row);

        mock_file.seekg(0);  // Reset pointer to read from the start
        std::vector<std::vector<std::string>> result;
        std::string line;
        while (std::getline(mock_file, line)) {
            result.push_back(split(line, ','));
        }

        REQUIRE_THAT(result, Catch::Matchers::Contains(new_row));
    }

    SECTION("Test appending a new row with different values") {
        std::stringstream mock_file;
        mock_file << "Alice,30,USA\nBob,25,UK\nCharlie,35,Canada\n";
        mock_file.seekg(0);  // Reset pointer to the start of the mock file

        std::vector<std::string> reader = {"Alice,30,USA", "Bob,25,UK", "Charlie,35,Canada"};
        std::vector<std::string> new_row = {"Alice", "31", "USA"};

        append_or_skip_row(mock_file, reader, new_row);

        mock_file.seekg(0);  // Reset pointer to read from the start
        std::vector<std::vector<std::string>> result;
        std::string line;
        while (std::getline(mock_file, line)) {
            result.push_back(split(line, ','));
        }

        REQUIRE_THAT(result, Catch::Matchers::Contains(new_row));
    }

    SECTION("Test appending a row with different values in the first three columns") {
        std::stringstream mock_file;
        mock_file << "Alice,30,USA\nBob,25,UK\nCharlie,35,Canada\n";
        mock_file.seekg(0);  // Reset pointer to the start of the mock file

        std::vector<std::string> reader = {"Alice,30,USA", "Bob,25,UK", "Charlie,35,Canada"};
        std::vector<std::string> new_row = {"Eve", "40", "Australia", "Engineer"};

        append_or_skip_row(mock_file, reader, new_row);

        mock_file.seekg(0);  // Reset pointer to read from the start
        std::vector<std::vector<std::string>> result;
        std::string line;
        while (std::getline(mock_file, line)) {
            result.push_back(split(line, ','));
        }

        REQUIRE_THAT(result, Catch::Matchers::Contains(new_row));
    }

    SECTION("Test appending multiple new rows correctly") {
        std::stringstream mock_file;
        mock_file << "Alice,30,USA\nBob,25,UK\nCharlie,35,Canada\n";
        mock_file.seekg(0);  // Reset pointer to the start of the mock file

        std::vector<std::string> reader = {"Alice,30,USA", "Bob,25,UK", "Charlie,35,Canada"};
        std::vector<std::vector<std::string>> new_rows = {
            {"Frank", "29", "Germany"},
            {"Grace", "22", "France"}
        };

        for (const auto& row : new_rows) {
            append_or_skip_row(mock_file, reader, row);
            mock_file.seekg(0);  // Reset pointer for the next read
            std::vector<std::vector<std::string>> result;
            std::string line;
            while (std::getline(mock_file, line)) {
                result.push_back(split(line, ','));
            }
            REQUIRE_THAT(result, Catch::Matchers::Contains(row));
        }
    }
}
```

### Explanation:
1. **Header Inclusion**:
   - Include the necessary headers for Catch2, `fstream`, `sstream`, `vector`, and `string`.

2. **Split Function**:
   - The `split` function is used to split a string by a delimiter (`,` in this case).

3. **append_or_skip_row Function**:
   - This function appends a new row to a CSV file if there isn't a row with matching values in the first three columns.

4. **Test Class**:
   - The `TEST_CASE` macro defines the test suite.
   - Each `SECTION` defines a specific test case.

5. **Mock CSV File**:
   - A `std::stringstream` is used to simulate a CSV file.
   - The `seekg(0)` method resets the input pointer to the start of the mock file.

6. **Assertions**:
   - `REQUIRE_THAT` is used with `Catch::Matchers::Contains` to check if the expected row is present in the result.

This C++ code preserves the functionality and logic of the Python tests while adapting to C++ and the Catch2 testing framework.