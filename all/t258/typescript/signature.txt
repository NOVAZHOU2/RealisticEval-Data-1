Sure, here's how you can convert the Python type annotations to TypeScript interfaces:

```typescript
/**
 * Extracts the position and bits of a specific character from a byte array.
 *
 * @param byteArray - The byte array to search within
 * @param char - The character to find in the byte array
 * @param charset - The character encoding of the byte array
 * @returns A tuple of (position, bits) if the character is found, otherwise null.
 */
function extractCharacterBits(byteArray: Buffer, char: string, charset: string = 'utf-8'): [number, string] | null {
    // Function implementation goes here
}
```

### Explanation:
1. **`Buffer`**: In Node.js, `Buffer` is used for handling binary data. This is equivalent to Python's `bytes`.
2. **Type Annotations**: The parameters `byteArray`, `char`, and `charset` have been annotated with their respective types (`Buffer`, `string`, and `string`).
3. **Return Type**: The return type is annotated as `[number, string] | null`, which corresponds to the Python `Tuple[int, str]` or `None`.

This should give you a good starting point for converting your Python function to TypeScript while maintaining the same type safety and documentation.