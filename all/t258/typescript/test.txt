To convert the given Python unittest test class to TypeScript using Jest, you'll need to define a similar test function that uses Jest's testing syntax. Below is an example of how you might write the corresponding TypeScript test case for the `extract_character_bits` function:

```typescript
import { extractCharacterBits } from './path-to-your-module'; // Adjust the path accordingly
import { expect } from '@jest/globals';

describe('extractCharacterBits', () => {
  it('should return the correct position and bits when character is found', () => {
    const byteArray = Buffer.from('Hello, World!', 'utf-8');
    const char = 'o';
    const result = extractCharacterBits(byteArray, char);

    expect(result).toEqual([4, '1100']);
  });

  it('should return null when character is not found', () => {
    const byteArray = Buffer.from('Hello, World!', 'utf-8');
    const char = 'z';
    const result = extractCharacterBits(byteArray, char);

    expect(result).toBeNull();
  });

  it('should handle different character encodings', () => {
    const byteArray = Buffer.from('你好，世界！', 'gbk'); // Assuming gbk encoding
    const char = '好';
    const result = extractCharacterBits(byteArray, char, 'gbk');

    expect(result).toEqual([0, '11100100']);
  });
});
```

In this TypeScript test file, we're using Jest's `describe` and `it` functions to group our tests together and define individual test cases. We're also using `expect` to assert the expected outcomes of our `extractCharacterBits` function.

Make sure to adjust the import statement to point to the actual location of your `extractCharacterBits` function implementation. Additionally, you may need to install the necessary dependencies (`@types/jest`) and configure your project to use TypeScript with Jest.