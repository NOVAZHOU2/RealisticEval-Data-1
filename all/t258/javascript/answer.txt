Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function extractCharacterBits(byteArray, char, charset = 'utf-8') {
    /**
     * Extracts the position and bits of a specific character from a byte array.
     *
     * @param {Uint8Array} byteArray - The byte array to search within.
     * @param {string} char - The character to find in the byte array.
     * @param {string} [charset='utf-8'] - The character encoding of the byte array.
     * @returns {Array|undefined} - A tuple of (position, bits) if the character is found, otherwise undefined.
     */
    try {
        // Decode byte array to string using the specified character set
        const decoder = new TextDecoder(charset);
        const string = decoder.decode(byteArray);
    } catch (error) {
        console.log("Failed to decode the byte array.");
        return undefined;
    }

    // Check if the character is in the decoded string
    if (string.includes(char)) {
        const position = string.indexOf(char);

        // Find the byte position of the character
        const bytePosition = string.slice(0, position).length;

        // Determine the length of the character in bytes
        const charLength = new TextEncoder().encode(char).length;

        // Extract the bits corresponding to the character
        const bits = byteArray.slice(bytePosition, bytePosition + charLength);

        // Convert bits to a human-readable binary string
        const bitsAsString = bits.map(byte => byte.toString(2).padStart(8, '0')).join(' ');

        return [position, bitsAsString];
    } else {
        console.log(`The character '${char}' is not in the byte array.`);
        return undefined;
    }
}

// Example usage:
const byteArray = new Uint8Array([72, 101, 108, 108, 111, 44, 32 99 111 110 115 116 114 111 108 111 100 33]);
const result = extractCharacterBits(byteArray, 'l');
console.log(result);  // Output should be [2, "01101100"]
```

### Explanation:
1. **TextDecoder**: Used to decode the `Uint8Array` into a string using the specified character set.
2. **TextEncoder**: Used to encode the character back to a `Uint8Array` to determine its length in bytes.
3. **Array Slicing**: Used to extract the relevant bytes from the `Uint8Array`.
4. **Binary Conversion**: Used to convert each byte to a binary string and join them with spaces.

This JavaScript function closely mirrors the behavior of the original Python function.