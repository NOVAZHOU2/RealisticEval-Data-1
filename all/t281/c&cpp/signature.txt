Certainly! Below is the equivalent C++ code for the given Python function, including appropriate comments and type translations:

```cpp
#include <iostream>
#include <vector>
#include <stdexcept>

// Function to compute the squared Euclidean distance between two vectors
double squaredEuclideanDistance(const std::vector<int>& vec1, const std::vector<int>& vec2) {
    // Check if the vectors are of the same length
    if (vec1.size() != vec2.size()) {
        throw std::invalid_argument("Vectors must be of the same length");
    }

    double distanceSquared = 0.0;
    // Compute the squared Euclidean distance
    for (size_t i = 0; i < vec1.size(); ++i) {
        double diff = static_cast<double>(vec1[i] - vec2[i]);
        distanceSquared += diff * diff;
    }
    return distanceSquared;
}

int main() {
    try {
        // Example usage
        std::vector<int> vec1 = {1, 2, 3};
        std::vector<int> vec2 = {4, 5, 6};
        double result = squaredEuclideanDistance(vec1, vec2);
        std::cout << "Squared Euclidean Distance: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }
    return 0;
}
```

### Explanation:
1. **Header Inclusions**:
   - `#include <iostream>`: For input/output operations.
   - `#include <vector>`: For using `std::vector`.
   - `#include <stdexcept>`: For throwing exceptions.

2. **Function Definition**:
   - The function `squaredEuclideanDistance` takes two `std::vector<int>` parameters, `vec1` and `vec2`, representing the input vectors.
   - The return type is `double` to accommodate the squared Euclidean distance calculation.

3. **Length Check**:
   - The function checks if the vectors have the same length using `vec1.size() != vec2.size()` and throws a `std::invalid_argument` if they do not.

4. **Squared Euclidean Distance Calculation**:
   - A loop iterates over the elements of the vectors, calculates the difference between corresponding elements, squares it, and accumulates the result in `distanceSquared`.
   - The differences are cast to `double` to ensure accurate floating-point arithmetic.

5. **Main Function**:
   - An example usage of the function is demonstrated in the `main` function, including error handling with a try-catch block.

6. **Comments and Documentation**:
   - Single-line comments (`//`) are used to explain the purpose and steps within the function.
   - Multi-line comments (`/* */`) can be used for more detailed explanations if needed.

This C++ code preserves the original purpose and structure of the Python code while adapting to C++ syntax and features.