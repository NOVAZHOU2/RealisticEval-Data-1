Sure, here is the C++ version of the Python function with the same signature and comments:

```cpp
#include <vector>
#include <cmath>

/**
 * Compute the squared Euclidean distance between two vectors.
 *
 * @param vec1 The first vector.
 * @param vec2 The second vector.
 * @return The squared Euclidean distance between vec1 and vec2.
 */
int squaredEuclideanDistance(const std::vector<int>& vec1, const std::vector<int>& vec2) {
    // Check if both vectors have the same size
    if (vec1.size() != vec2.size()) {
        throw std::invalid_argument("Vectors must have the same length.");
    }

    int distance = 0;
    for (size_t i = 0; i < vec1.size(); ++i) {
        distance += (vec1[i] - vec2[i]) * (vec1[i] - vec2[i]);
    }
    return distance;
}
```

This C++ function does the following:
- Takes two `std::vector<int>` parameters.
- Checks if the vectors have the same size and throws an exception if they do not.
- Computes the squared Euclidean distance by iterating through the elements of the vectors and summing the squares of their differences.
- Returns the computed distance as an integer.