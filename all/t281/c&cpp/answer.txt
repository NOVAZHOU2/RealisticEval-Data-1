Sure! Below is the equivalent C++ code for your Python function `squared_euclidean_distance`.

```cpp
#include <vector>
#include <cmath>

int squaredEuclideanDistance(const std::vector<int>& vec1, const std::vector<int>& vec2) {
    if (vec1.size() != vec2.size()) {
        throw std::invalid_argument("Vectors must have the same size");
    }

    int sum = 0;
    for (size_t i = 0; i < vec1.size(); ++i) {
        int diff = vec1[i] - vec2[i];
        sum += diff * diff;
    }
    return sum;
}
```

### Explanation:
- **Include Headers**: We include `<vector>` for using the `std::vector` container and `<cmath>` for mathematical operations like squaring.
- **Function Signature**: The function `squaredEuclideanDistance` takes two `const std::vector<int>&` parameters and returns an `int`.
- **Size Check**: We check if the sizes of both vectors are the same. If not, we throw an `std::invalid_argument` exception.
- **Loop Through Vectors**: We loop through each element of the vectors, calculate the difference, square it, and add it to the `sum`.
- **Return Result**: Finally, we return the computed sum.

This C++ function should work similarly to your original Python function.