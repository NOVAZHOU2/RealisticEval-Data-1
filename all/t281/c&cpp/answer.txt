Certainly! Below is the equivalent C++ code for the provided Python function. The C++ version will include necessary headers, type declarations, and error handling mechanisms to ensure it behaves similarly to the Python function:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
#include <stdexcept>

/**
 * Compute the squared Euclidean distance between two vectors.
 *
 * Args:
 * vec1 (std::vector<double>): First vector.
 * vec2 (std::vector<double>): Second vector.
 *
 * Returns:
 * double: Squared Euclidean distance between vec1 and vec2.
 *
 * Throws:
 * std::invalid_argument: If the vectors are of different lengths.
 */
double squaredEuclideanDistance(const std::vector<double>& vec1, const std::vector<double>& vec2) {
    if (vec1.size() != vec2.size()) {
        throw std::invalid_argument("Vectors must be of the same length");
    }

    double distanceSquared = 0.0;
    for (size_t i = 0; i < vec1.size(); ++i) {
        distanceSquared += std::pow(vec1[i] - vec2[i], 2);
    }
    return distanceSquared;
}

int main() {
    // Example usage
    try {
        std::vector<double> vec1 = {1.0, 2.0, 3.0};
        std::vector<double> vec2 = {4.0, 5.0, 6.0};
        double result = squaredEuclideanDistance(vec1, vec2);
        std::cout << "Squared Euclidean Distance: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Headers**: The necessary headers (`<iostream>`, `<vector>`, `<cmath>`, `<stdexcept>`) are included to provide input/output, vector support, mathematical functions, and exception handling.
2. **Function Definition**: The function `squaredEuclideanDistance` takes two `std::vector<double>` parameters representing the vectors.
3. **Length Check**: It checks if the vectors have the same size using `vec1.size()` and `vec2.size()`.
4. **Squared Distance Calculation**: It calculates the squared Euclidean distance using a loop and `std::pow` for exponentiation.
5. **Exception Handling**: It throws a `std::invalid_argument` if the vectors are of different lengths.
6. **Main Function**: An example usage is provided in the `main` function to demonstrate how to call the function and handle exceptions.

This C++ code preserves the functionality and logic of the original Python code while adapting to the syntax and features of C++.