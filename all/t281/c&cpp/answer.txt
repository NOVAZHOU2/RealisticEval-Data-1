Certainly! Below is the equivalent C++ code for the given Python function. This code computes the squared Euclidean distance between two vectors, ensuring that the vectors have the same length and handling any potential errors accordingly:

```cpp
#include <iostream>
#include <vector>
#include <stdexcept>

// Function to compute the squared Euclidean distance between two vectors
double squaredEuclideanDistance(const std::vector<double>& vec1, const std::vector<double>& vec2) {
    // Check if the vectors are of the same length
    if (vec1.size() != vec2.size()) {
        throw std::invalid_argument("Vectors must be of the same length");
    }

    double distanceSquared = 0.0;
    // Compute the squared Euclidean distance
    for (size_t i = 0; i < vec1.size(); ++i) {
        double diff = vec1[i] - vec2[i];
        distanceSquared += diff * diff;
    }
    return distanceSquared;
}

int main() {
    try {
        // Example usage
        std::vector<double> vec1 = {1.0, 2.0, 3.0};
        std::vector<double> vec2 = {4.0, 5.0, 6.0};
        double result = squaredEuclideanDistance(vec1, vec2);
        std::cout << "Squared Euclidean Distance: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }
    return 0;
}
```

### Explanation:
1. **Function Definition**: The `squaredEuclideanDistance` function takes two `std::vector<double>` parameters, `vec1` and `vec2`, which represent the input vectors.
2. **Length Check**: The function checks if the vectors have the same length using `vec1.size() != vec2.size()` and throws a `std::invalid_argument` if they do not.
3. **Squared Euclidean Distance Calculation**: A loop iterates over the elements of the vectors, calculates the difference between corresponding elements, squares it, and accumulates the result in `distanceSquared`.
4. **Main Function**: An example usage of the function is demonstrated in the `main` function, including error handling with a try-catch block.

This C++ code maintains the functionality and logic of the original Python code while adapting to C++ syntax and features.