Certainly! Below is the equivalent C++ unit test using Catch2 for the `squared_euclidean_distance` function. Catch2 is a modern C++ testing framework that provides a simple and expressive syntax for writing tests.

First, ensure you have Catch2 installed in your project. If not, you can include it via a package manager or download it manually.

Here's how you can write the test case:

```cpp
#include <catch2/catch.hpp>
#include <vector>

// Function to compute the squared Euclidean distance between two vectors
int squared_euclidean_distance(const std::vector<int>& vec1, const std::vector<int>& vec2) {
    if (vec1.size() != vec2.size()) {
        throw std::invalid_argument("Vectors must be of the same size");
    }
    
    int distance = 0;
    for (size_t i = 0; i < vec1.size(); ++i) {
        distance += (vec1[i] - vec2[i]) * (vec1[i] - vec2[i]);
    }
    return distance;
}

// Test cases
TEST_CASE("Squared Euclidean Distance", "[squared_euclidean_distance]") {
    SECTION("Equal Vectors") {
        std::vector<int> vec1 = {1, 2, 3};
        std::vector<int> vec2 = {1, 2, 3};
        REQUIRE(squared_euclidean_distance(vec1, vec2) == 0);
    }

    SECTION("Different Vectors") {
        std::vector<int> vec1 = {1, 2, 3};
        std::vector<int> vec2 = {4, 5, 6};
        REQUIRE(squared_euclidean_distance(vec1, vec2) == 27);
    }

    SECTION("Empty Vectors") {
        std::vector<int> vec1 = {};
        std::vector<int> vec2 = {};
        REQUIRE(squared_euclidean_distance(vec1, vec2) == 0);
    }

    SECTION("Single Element Vectors") {
        std::vector<int> vec1 = {1};
        std::vector<int> vec2 = {2};
        REQUIRE(squared_euclidean_distance(vec1, vec2) == 1);
    }

    SECTION("Vectors with Negative Elements") {
        std::vector<int> vec1 = {-1, -2, -3};
        std::vector<int> vec2 = {1, 2, 3};
        REQUIRE(squared_euclidean_distance(vec1, vec2) == 36);
    }

    SECTION("Vectors of Different Sizes Should Throw Exception") {
        std::vector<int> vec1 = {1, 2, 3};
        std::vector<int> vec2 = {1, 2};
        REQUIRE_THROWS_WITH(squared_euclidean_distance(vec1, vec2), "Vectors must be of the same size");
    }
}
```

### Explanation:
1. **Include Catch2**: The `#include <catch2/catch.hpp>` directive includes the Catch2 library.
2. **Function Definition**: The `squared_euclidean_distance` function remains unchanged.
3. **Test Cases**:
   - **Equal Vectors**: Tests the function with two equal vectors.
   - **Different Vectors**: Tests the function with two different vectors.
   - **Empty Vectors**: Tests the function with empty vectors.
   - **Single Element Vectors**: Tests the function with single-element vectors.
   - **Vectors with Negative Elements**: Tests the function with vectors containing negative elements.
   - **Vectors of Different Sizes**: Tests the function with vectors of different sizes, which should throw an exception.

Make sure to compile your C++ code with Catch2 included in the compilation process. For example, using g++:

```sh
g++ -std=c++11 -o test_squared_euclidean test_squared_euclidean.cpp -lc++
```

Then run the executable:

```sh
./test_squared_euclidean
```

This will execute the test cases and provide the results.