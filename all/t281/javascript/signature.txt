Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JavaScript documentation standards using JSDoc format:

```javascript
/**
 * Compute the squared Euclidean distance between two vectors.
 *
 * @param {Array<number>} vec1 - First vector.
 * @param {Array<number>} vec2 - Second vector.
 * @returns {number} - Squared Euclidean distance between vec1 and vec2.
 * @throws {Error} - If the vectors are of different lengths.
 */
function squaredEuclideanDistance(vec1, vec2) {
    if (vec1.length !== vec2.length) {
        throw new Error('Vectors must be of the same length');
    }

    let distanceSquared = vec1.reduce((acc, curr, index) => {
        return acc + Math.pow(curr - vec2[index], 2);
    }, 0);

    return distanceSquared;
}
```

### Explanation:
1. **Function Definition**: The function `squaredEuclideanDistance` is defined with two parameters, `vec1` and `vec2`.
2. **JSDoc Comments**:
   - The JSDoc comment block provides a description of the function.
   - The `@param` tags describe the parameters and their types.
   - The `@returns` tag describes the return value and its type.
   - The `@throws` tag indicates that an error will be thrown if the vectors are of different lengths.
3. **Length Check**: A check is performed to ensure that `vec1` and `vec2` have the same length. If they do not, an error is thrown.
4. **Distance Calculation**: The squared Euclidean distance is calculated using the `reduce` method. It iterates over each element of `vec1`, computes the squared difference between corresponding elements of `vec1` and `vec2`, and accumulates the result.
5. **Return Value**: The final squared Euclidean distance is returned.

This JavaScript code preserves the purpose and structure of the original Python code, including the use of descriptive comments and error handling.