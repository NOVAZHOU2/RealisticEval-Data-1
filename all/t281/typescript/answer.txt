Certainly! Hereâ€™s the equivalent TypeScript code for the given Python function, including proper type definitions and error handling:

```typescript
function squaredEuclideanDistance(vec1: number[], vec2: number[]): number {
    if (vec1.length !== vec2.length) {
        throw new Error("Vectors must be of the same length");
    }

    const distanceSquared = vec1.reduce((acc, current, index) => {
        const difference = current - vec2[index];
        return acc + difference * difference;
    }, 0);

    return distanceSquared;
}
```

### Explanation:
1. **Function Definition**: The function `squaredEuclideanDistance` takes two arguments, both of which are arrays of numbers (`number[]`).
2. **Length Check**: It checks if the lengths of `vec1` and `vec2` are equal using the ternary operator. If they are not equal, it throws an error with a descriptive message.
3. **Calculation**: It uses the `reduce` method to compute the squared Euclidean distance. This method iterates over the elements of `vec1`, calculates the square of the difference between corresponding elements of `vec1` and `vec2`, and accumulates the result.
4. **Return Value**: The function returns the computed squared Euclidean distance as a number.

This TypeScript code preserves the functionality and logic of the original Python code while adhering to TypeScript's static type system and idioms.