Sure! Hereâ€™s the equivalent TypeScript code, ensuring that the functionality, structure, and logic remain consistent with the provided Python code:

```typescript
function squaredEuclideanDistance(vec1: number[], vec2: number[]): number {
    if (vec1.length !== vec2.length) {
        throw new Error("Vectors must be of the same length");
    }

    const distanceSquared = vec1.reduce((acc, curr, index) => {
        const diff = curr - vec2[index];
        return acc + diff * diff;
    }, 0);

    return distanceSquared;
}
```

### Explanation:
1. **Function Definition**:
   - The function `squaredEuclideanDistance` takes two arguments, `vec1` and `vec2`, both of which are arrays of numbers (`number[]`).

2. **Type Checking**:
   - The function checks if the lengths of `vec1` and `vec2` are equal. If not, it throws an error with the message "Vectors must be of the same length".

3. **Computation**:
   - The squared Euclidean distance is computed using the `reduce` method. This method iterates over each element of `vec1`, calculates the difference between corresponding elements of `vec1` and `vec2`, squares the difference, and accumulates the result.

4. **Return Value**:
   - The function returns the squared Euclidean distance as a number.

This TypeScript code maintains the same functionality and logic as the Python code, while adhering to TypeScript's static type system and idiomatic practices.