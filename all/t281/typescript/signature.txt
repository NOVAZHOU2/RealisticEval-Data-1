Certainly! Here’s the equivalent TypeScript code, including the appropriate JSDoc-style documentation comments and type annotations:

```typescript
import { List } from "typescript";

/**
 * Computes the squared Euclidean distance between two vectors.
 *
 * @param vec1 - The first vector.
 * @param vec2 - The second vector.
 * @returns The squared Euclidean distance between vec1 and vec2.
 * @throws {Error} If the vectors are of different lengths.
 */
function squaredEuclideanDistance(vec1: number[], vec2: number[]): number {
    if (vec1.length !== vec2.length) {
        throw new Error("Vectors must be of the same length");
    }

    const distanceSquared = vec1.reduce((acc, curr, index) => {
        const diff = curr - vec2[index];
        return acc + diff * diff;
    }, 0);

    return distanceSquared;
}
```

### Explanation:
1. **Function Definition**:
   - The function `squaredEuclideanDistance` takes two arguments, `vec1` and `vec2`, both of which are arrays of numbers (`number[]`).

2. **JSDoc Documentation**:
   - The JSDoc-style documentation comments are used to describe the function, its parameters, and its return value.
   - The `@param` tags provide descriptions for `vec1` and `vec2`.
   - The `@returns` tag describes the return value.
   - The `@throws` tag indicates that an error will be thrown if the vectors are of different lengths.

3. **Type Checking**:
   - The function checks if the lengths of `vec1` and `vec2` are equal. If not, it throws an error with the message "Vectors must be of the same length".

4. **Computation**:
   - The squared Euclidean distance is computed using the `reduce` method. This method iterates over each element of `vec1`, calculates the difference between corresponding elements of `vec1` and `vec2`, squares the difference, and accumulates the result.

5. **Return Value**:
   - The function returns the squared Euclidean distance as a number.

Here’s the complete TypeScript code with proper documentation and type annotations:

```typescript
/**
 * Computes the squared Euclidean distance between two vectors.
 *
 * @param vec1 - The first vector.
 * @param vec2 - The second vector.
 * @returns The squared Euclidean distance between vec1 and vec2.
 * @throws {Error} If the vectors are of different lengths.
 */
function squaredEuclideanDistance(vec1: number[], vec2: number[]): number {
    if (vec1.length !== vec2.length) {
        throw new Error("Vectors must be of the same length");
    }

    const distanceSquared = vec1.reduce((acc, curr, index) => {
        const diff = curr - vec2[index];
        return acc + diff * diff;
    }, 0);

    return distanceSquared;
}

// Example usage
const vec1 = [1, 2, 3];
const vec2 = [4, 5, 6];
console.log(squaredEuclideanDistance(vec1, vec2)); // Output: 27
```

This TypeScript code preserves the original functionality and structure of the Python code, while adhering to TypeScript's static type system and using appropriate JSDoc-style documentation.