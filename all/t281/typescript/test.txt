Sure! Below is the TypeScript code converted from the given Python code, including the use of Jest for testing. I'll include the function definition and a test suite with the corresponding Jest test cases.

### TypeScript Function Definition

First, let's define the `squaredEuclideanDistance` function in TypeScript:

```typescript
import { pow } from 'mathjs';

function squaredEuclideanDistance(vec1: number[], vec2: number[]): number {
    if (vec1.length !== vec2.length) {
        throw new Error('Vectors must have the same length');
    }

    return vec1.reduce((acc, val, index) => acc + pow(val - vec2[index], 2), 0);
}

export { squaredEuclideanDistance };
```

### Jest Test Suite

Now, let's create a Jest test suite to test the `squaredEuclideanDistance` function:

```typescript
import { squaredEuclideanDistance } from './path-to-your-function'; // Adjust the path as needed

describe('Squared Euclidean Distance', () => {
    it('should handle vectors of the same length', () => {
        const vec1 = [1, 2, 3];
        const vec2 = [4, 5, 6];
        expect(squaredEuclideanDistance(vec1, vec2)).toBe(27);

        const vec3 = [0, 0, 0];
        const vec4 = [1, 1, 1];
        expect(squaredEuclideanDistance(vec3, vec4)).toBe(3);

        const vec5 = [-1, -1, -1];
        const vec6 = [1, 1, 1];
        expect(squaredEuclideanDistance(vec5, vec6)).toBe(12);
    });

    it('should handle vectors of different lengths by throwing an error', () => {
        const vec1 = [1, 2, 3];
        const vec2 = [4, 5];
        expect(() => squaredEuclideanDistance(vec1, vec2)).toThrow('Vectors must have the same length');
    });
});
```

### Explanation

1. **Function Definition**:
   - The function `squaredEuclideanDistance` takes two arrays (`vec1` and `vec2`) as input and calculates the squared Euclidean distance between them.
   - It checks if the vectors have the same length and throws an error if they don't.
   - It uses the `reduce` method along with the `pow` function from the `mathjs` library to calculate the squared Euclidean distance.

2. **Test Suite**:
   - The `describe` block defines a test suite named "Squared Euclidean Distance".
   - The first `it` block tests the function with vectors of the same length and asserts that the results are correct.
   - The second `it` block tests the function with vectors of different lengths and asserts that it throws the expected error.

### Installing Dependencies

To run this code, you need to install the `mathjs` library:

```sh
npm install mathjs
```

This setup ensures that the function is thoroughly tested using Jest, and the test cases cover various scenarios, including handling errors gracefully.