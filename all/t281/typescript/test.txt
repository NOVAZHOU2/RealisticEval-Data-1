Sure, here's how you can convert your Python `unittest` test class to a TypeScript test case using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

function squaredEuclideanDistance(vec1: number[], vec2: number[]): number {
    /**
     * Compute the squared Euclidean distance between two vectors.
     *
     * @param vec1 - First vector.
     * @param vec2 - Second vector.
     * @returns The Euclidean distance between vec1 and vec2.
     */
    if (vec1.length !== vec2.length) {
        throw new Error('Vectors must have the same length');
    }

    return vec1.reduce((acc, curr, index) => acc + Math.pow(curr - vec2[index], 2), 0);
}

describe('squaredEuclideanDistance', () => {
    it('should calculate the squared Euclidean distance correctly', () => {
        const vec1 = [1, 2, 3];
        const vec2 = [4, 5, 6];

        const result = squaredEuclideanDistance(vec1, vec2);

        expect(result).toBe(27); // (4-1)^2 + (5-2)^2 + (6-3)^2 = 9 + 9 + 9 = 27
    });

    it('should handle vectors of different lengths', () => {
        const vec1 = [1, 2];
        const vec2 = [4, 5, 6];

        expect(() => squaredEuclideanDistance(vec1, vec2)).toThrowError('Vectors must have the same length');
    });
});
```

In this TypeScript code, we use Jest for testing. We define the `squaredEuclideanDistance` function similarly to your Python function. Then, we create a `describe` block to group our tests together and an `it` block for each individual test case. We use `expect` to assert the expected outcomes of our function calls.