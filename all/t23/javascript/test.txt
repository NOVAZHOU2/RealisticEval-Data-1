Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The tests will maintain the same functionality and logic, and all assertions will be mapped to their appropriate Jest equivalents.

### Python Code:
```python
import unittest

class TestLineSegmentIntersection(unittest.TestCase):

    def test_intersection(self):
        seg1 = ((1, 1), (4, 4))
        seg2 = ((1, 4), (4, 1))
        expected = (2.5, 2.5)
        result = get_line_segment_intersection(seg1, seg2)
        self.assertEqual(result, expected, "The intersection should be at (2.5, 2.5)")

    def test_no_intersection(self):
        seg1 = ((1, 1), (2, 2))
        seg2 = ((3, 3), (4, 4))
        result = get_line_segment_intersection(seg1, seg2)
        self.assertIsNone(result, "There should be no intersection")

    def test_parallel_segments(self):
        seg1 = ((1, 1), (2, 2))
        seg2 = ((1, 2), (2, 3))
        result = get_line_segment_intersection(seg1, seg2)
        self.assertIsNone(result, "Parallel segments should not intersect")

    def test_no_intersection_due_to_offset(self):
        seg1 = ((1, 1), (3, 3))
        seg2 = ((3, 2), (4, 2))
        result = get_line_segment_intersection(seg1, seg2)
        self.assertIsNone(result, "There should be no intersection due to offset between segments")

    def test_intersection_with_large_coordinates(self):
        seg1 = ((1000, 1000), (2000, 2000))
        seg2 = ((1000, 2000), (2000, 1000))
        expected = (1500.0, 1500.0)
        result = get_line_segment_intersection(seg1, seg2)
        self.assertEqual(result, expected, "The intersection should be at (1500.0, 1500.0)")
```

### Equivalent Jest Test Suite:
```javascript
const getLineSegmentIntersection = require('./getLineSegmentIntersection'); // Import the function to be tested

describe('TestLineSegmentIntersection', () => {
    it('should find the intersection at (2.5, 2.5)', () => {
        const seg1 = [[1, 1], [4, 4]];
        const seg2 = [[1, 4], [4, 1]];
        const expected = [2.5, 2.5];
        const result = getLineSegmentIntersection(seg1, seg2);
        expect(result).toEqual(expected);
    });

    it('should return null when there is no intersection', () => {
        const seg1 = [[1, 1], [2, 2]];
        const seg2 = [[3, 3], [4, 4]];
        const result = getLineSegmentIntersection(seg1, seg2);
        expect(result).toBeNull();
    });

    it('should return null for parallel segments', () => {
        const seg1 = [[1, 1], [2, 2]];
        const seg2 = [[1, 2], [2, 3]];
        const result = getLineSegmentIntersection(seg1, seg2);
        expect(result).toBeNull();
    });

    it('should return null when there is no intersection due to offset', () => {
        const seg1 = [[1, 1], [3, 3]];
        const seg2 = [[3, 2], [4, 2]];
        const result = getLineSegmentIntersection(seg1, seg2);
        expect(result).toBeNull();
    });

    it('should find the intersection at (1500.0, 1500.0) with large coordinates', () => {
        const seg1 = [[1000, 1000], [2000, 2000]];
        const seg2 = [[1000, 2000], [2000, 1000]];
        const expected = [1500.0, 1500.0];
        const result = getLineSegmentIntersection(seg1, seg2);
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Import Function**: The `getLineSegmentIntersection` function is imported at the beginning of the test file.
2. **Describe Block**: The `describe` block is used to group the tests under a common description.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Assertions**:
   - `expect(result).toEqual(expected)` is used to check if the result matches the expected value.
   - `expect(result).toBeNull()` is used to check if the result is `null`.

This Jest test suite ensures that the functionality and logic of the tests are preserved, and all assertions are mapped appropriately to Jest equivalents.