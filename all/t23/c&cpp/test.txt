Sure! Below is an equivalent C++ unit test case using Catch2 for the given Python `unittest` test class. Note that I'll assume you have a function `getLineSegmentIntersection` in your C++ code that performs the same task as the Python function.

First, ensure you have Catch2 installed and set up in your project. If not, you can download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2).

Here's how you might write the C++ test case:

```cpp
#include "catch.hpp"
#include <utility> // For std::pair

// Assuming this function is defined somewhere in your codebase
std::pair<double, double> getLineSegmentIntersection(std::pair<std::pair<double, double>, std::pair<double, double>> seg1, 
                                                       std::pair<std::pair<double, double>, std::pair<double, double>> seg2);

TEST_CASE("Test Line Segment Intersection", "[intersection]") {
    SECTION("Segments do not intersect") {
        auto seg1 = std::make_pair(std::make_pair(0.0, 0.0), std::make_pair(1.0, 1.0));
        auto seg2 = std::make_pair(std::make_pair(0.0, 1.0), std::make_pair(1.0, 0.0));
        
        auto result = getLineSegmentIntersection(seg1, seg2);
        
        REQUIRE(result.first == Approx(NAN));
        REQUIRE(result.second == Approx(NAN));
    }

    SECTION("Segments intersect at a single point") {
        auto seg1 = std::make_pair(std::make_pair(0.0, 0.0), std::make_pair(1.0, 1.0));
        auto seg2 = std::make_pair(std::make_pair(1.0, 0.0), std::make_pair(0.0, 1.0));
        
        auto result = getLineSegmentIntersection(seg1, seg2);
        
        REQUIRE(result.first == Approx(0.5));
        REQUIRE(result.second == Approx(0.5));
    }
    
    SECTION("Segments are collinear but do not intersect") {
        auto seg1 = std::make_pair(std::make_pair(0.0, 0.0), std::make_pair(1.0, 1.0));
        auto seg2 = std::make_pair(std::make_pair(-1.0, -1.0), std::make_pair(0.0, 0.0));
        
        auto result = getLineSegmentIntersection(seg1, seg2);
        
        REQUIRE(result.first == Approx(NAN));
        REQUIRE(result.second == Approx(NAN));
    }
}
```

### Explanation:
- **Catch2 Test Case**: The `TEST_CASE` macro defines a test case named "Test Line Segment Intersection".
- **Sections**: Each `SECTION` within the test case represents a different scenario or sub-test.
- **Assertions**: The `REQUIRE` macro is used to assert conditions that must be true for the test to pass. In this case, we check if the intersection points are correct or if they are `NaN` when there is no intersection.
- **Approx**: The `Approx` function from Catch2 is used to compare floating-point numbers with a tolerance, which is useful for comparing results that may not be exactly equal due to numerical precision issues.

Make sure to include the appropriate headers and link against the Catch2 library when compiling your C++ code.