Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included to match the Python unittest framework.

### TypeScript Code with Jest Testing

```typescript
import { getLineSegmentIntersection } from './path-to-your-function'; // Import your function

describe('TestLineSegmentIntersection', () => {
    it('should find the intersection correctly', () => {
        const seg1: [number, number][] = [[1, 1], [4, 4]];
        const seg2: [number, number][] = [[1, 4], [4, 1]];
        const expected: [number, number] = [2.5, 2.5];
        const result = getLineSegmentIntersection(seg1, seg2);
        expect(result).toEqual(expected);
    });

    it('should return null when there is no intersection', () => {
        const seg1: [number, number][] = [[1, 1], [2, 2]];
        const seg2: [number, number][] = [[3, 3], [4, 4]];
        const result = getLineSegmentIntersection(seg1, seg2);
        expect(result).toBeNull();
    });

    it('should return null for parallel segments', () => {
        const seg1: [number, number][] = [[1, 1], [2, 2]];
        const seg2: [number, number][] = [[1, 2], [2, 3]];
        const result = getLineSegmentIntersection(seg1, seg2);
        expect(result).toBeNull();
    });

    it('should return null when there is no intersection due to offset', () => {
        const seg1: [number, number][] = [[1, 1], [3, 3]];
        const seg2: [number, number][] = [[3, 2], [4, 2]];
        const result = getLineSegmentIntersection(seg1, seg2);
        expect(result).toBeNull();
    });

    it('should find the intersection with large coordinates correctly', () => {
        const seg1: [number, number][] = [[1000, 1000], [2000, 2000]];
        const seg2: [number, number][] = [[1000, 2000], [2000, 1000]];
        const expected: [number, number] = [1500.0, 1500.0];
        const result = getLineSegmentIntersection(seg1, seg2);
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `getLineSegmentIntersection` function is imported from the appropriate path.

2. **Describe Block**:
   - The `describe` block groups all the test cases under a single description.

3. **Test Cases**:
   - Each test case is defined using the `it` function, which describes the behavior being tested.
   - The `expect` function is used to assert the expected outcomes.

4. **Type Annotations**:
   - The segment coordinates are annotated as `[number, number][]` to match the TypeScript type definitions.

5. **Assertions**:
   - `toEqual` is used to compare arrays (coordinates).
   - `toBeNull` is used to check for `null` values.

### Running the Tests
To run the tests, you need to have Jest installed and configured in your project. You can install Jest using npm or yarn:

```sh
npm install --save-dev jest ts-jest @types/jest
```

or

```sh
yarn add --dev jest ts-jest @types/jest
```

Then, configure your `jest` setup in `package.json`:

```json
{
  "scripts": {
    "test": "jest"
  },
  "devDependencies": {
    "jest": "^27.0.0",
    "ts-jest": "^27.0.0",
    "@types/jest": "^27.0.0"
  }
}
```

Finally, run the tests:

```sh
npm test
```

or

```sh
yarn test
```

This setup ensures that the tests are executed using Jest and that the TypeScript code is properly transpiled.