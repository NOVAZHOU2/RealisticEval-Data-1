Certainly! Below is the equivalent TypeScript code for the given Python function:

```typescript
function getLineSegmentIntersection(seg1: [number, number][], seg2: [number, number][]): [number, number] | null {
    /**
     * Calculate the intersection point of two line segments, if it exists.
     *
     * @param seg1 - Coordinates of the first line segment, defined as [[x1, y1], [x2, y2]].
     * @param seg2 - Coordinates of the second line segment, defined as [[x3, y3], [x4, y4]].
     * @returns The [x, y] coordinates of the intersection point if the line segments intersect,
     *          otherwise null.
     */
    // Unpack segment points
    const [x1, y1] = seg1[0];
    const [x2, y2] = seg1[1];
    const [x3, y3] = seg2[0];
    const [x4, y4] = seg2[1];

    // Compute direction vectors and determinant
    const dx1 = x2 - x1;
    const dy1 = y2 - y1;
    const dx2 = x4 - x3;
    const dy2 = y4 - y3;
    const determinant = dx1 * dy2 - dx2 * dy1;

    // Check for parallel lines or identical segments
    if (Math.abs(determinant) < 1e-10) {
        return null;
    }

    // Calculate intersection parameters
    const t1 = ((x3 - x1) * dy2 - (y3 - y1) * dx2) / determinant;
    const t2 = ((x3 - x1) * dy1 - (y3 - y1) * dx1) / determinant;

    // Allow for a small tolerance in the intersection check
    const tolerance = 1e-10;

    // Check if intersection is within the bounds of the line segments
    if (0 - tolerance <= t1 && t1 <= 1 + tolerance && 0 - tolerance <= t2 && t2 <= 1 + tolerance) {
        const x = x1 + t1 * dx1;
        const y = y1 + t1 * dy1;
        return [Math.round(x * 1e7) / 1e7, Math.round(y * 1e7) / 1e7];
    }

    return null;
}
```

### Explanation:
1. **Type Definitions**: 
   - The function `getLineSegmentIntersection` takes two arguments of type `[number, number][]`, which represent the coordinates of the line segments.
   - The return type is `[number, number] | null`, indicating that the function can return either a coordinate pair or `null`.

2. **Unpacking Points**:
   - The coordinates of the line segments are unpacked using destructuring assignment.

3. **Direction Vectors and Determinant Calculation**:
   - The direction vectors and determinant are calculated similarly to the Python code.

4. **Checking Parallel Lines or Identical Segments**:
   - The condition for checking parallel lines or identical segments is implemented using `Math.abs(determinant) < 1e-10`.

5. **Intersection Parameters**:
   - The intersection parameters `t1` and `t2` are calculated using the same formulas.

6. **Tolerance Check**:
   - The tolerance check ensures that the intersection is within the bounds of the line segments.

7. **Returning Intersection Point**:
   - If the intersection is valid, the coordinates are rounded to 7 decimal places using `Math.round(x * 1e7) / 1e7` and returned as a tuple.

8. **Returning Null**:
   - If no valid intersection is found, `null` is returned.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate adjustments for TypeScript's static type system and syntax.