Here is the equivalent Java code:

```java
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;

public class Answer {

    public static String formatTimestampToString(double timestamp, String dateFormat) {
        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
        sdf.setTimeZone(TimeZone.getDefault());
        return sdf.format(new Date((long)(timestamp * 1000)));
    }
}
```

This function takes a `double` instead of a `float`, because in Java there is no native support for floating-point timestamps. Instead, it multiplies the timestamp by 1000 to convert it into milliseconds, which is what the `Date` constructor expects.

Also, note that the `formatTimestampToString` method in Java does not have an optional parameter like in Python. If you want to make the `dateFormat` parameter optional, you can provide a default value when calling the method. For example:

```java
String formattedTime = formatTimestampToString(1633072800.0, "%a %b %d %I:%M:%S %p %z %Y");
```

If you don't provide the `dateFormat` argument, the method will use the default format `"%a %b %d %I:%M:%S %p %z %Y"`.