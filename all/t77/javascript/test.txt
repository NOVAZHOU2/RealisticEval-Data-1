Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import unittest
from typing import Optional

def format_timestamp_to_string(timestamp: float, date_format: Optional[str] = '%a %b %d %I:%M:%S %p %z %Y') -> str:
    """
    Formats the given timestamp as a string according to the specified format, using the system's local time zone.

    Args:
        timestamp (float): The time value representing the seconds since the epoch.
        date_format (Optional[str]): The format string to use for formatting the timestamp.
                                     Defaults to '%a %b %d %I:%M:%S %p %z %Y'.

    Returns:
        str: The formatted date and time string.
    """
    if timestamp < 0:
        raise ValueError("error timestamp")

    try:
        from datetime import datetime
        import zoneinfo

        # Get the local system timezone
        local_tz = zoneinfo.ZoneInfo('local')
    except zoneinfo.ZoneInfoNotFoundError:
        # Fallback to UTC if the local timezone is not found
        local_tz = zoneinfo.ZoneInfo('UTC')

    try:
        # Convert the UNIX timestamp to a datetime object with timezone
        dt = datetime.fromtimestamp(timestamp, tz=local_tz)
        # Return the formatted datetime string
        return dt.strftime(date_format)
    except Exception as e:
        # Handle any other unexpected errors
        raise ValueError(f"Error formatting the datetime: {e}")


class TestFormatTimestampToString(unittest.TestCase):
    def test_basic_functionality(self):
        """Test basic functionality with a known timestamp."""
        timestamp = 1655364000.0  # Corresponds to Thu Jun 16 12:00:00 PM UTC 2022
        # Assuming the local timezone is UTC
        expected_date_str = 'Thu Jun 16 03:20:00 PM +0800 2022'
        self.assertEqual(format_timestamp_to_string(timestamp), expected_date_str, "Should correctly format the timestamp")

    def test_default_format(self):
        """Test using the default format string."""
        timestamp = 1655364000.0
        expected_date_str = 'Thu Jun 16 03:20:00 PM +0800 2022'
        self.assertEqual(format_timestamp_to_string(timestamp), expected_date_str, "Default format should match the expected date string")

    def test_custom_format(self):
        """Test with a custom format string."""
        timestamp = 1655364000.0
        custom_format = '%Y-%m-%d %H:%M:%S'
        expected_date_str = '2022-06-16 15:20:00'
        self.assertEqual(format_timestamp_to_string(timestamp, custom_format), expected_date_str, "Should correctly format the timestamp using the custom format")

    def test_edge_case_boundary_value(self):
        """Test with an edge case timestamp (e.g., Unix epoch start)."""
        timestamp = 0.0  # Unix epoch start
        expected_date_str = 'Thu Jan 01 08:00:00 AM +0800 1970'
        self.assertEqual(format_timestamp_to_string(timestamp), expected_date_str, "Should correctly format the Unix epoch start time")
```

### Equivalent Jest Test Suite:

```javascript
const { DateTime, ZoneInfo } = require('luxon');

function formatTimestampToString(timestamp, date_format = 'ccc LLL d HH:mm:ss zzzz yyyy') {
    if (timestamp < 0) {
        throw new Error("error timestamp");
    }

    try {
        // Get the local system timezone
        const localTz = ZoneInfo.get('local');
    } catch (error) {
        // Fallback to UTC if the local timezone is not found
        const localTz = ZoneInfo.get('UTC');
    }

    try {
        // Convert the UNIX timestamp to a DateTime object with timezone
        const dt = DateTime.fromSeconds(timestamp).setZone(localTz);
        // Return the formatted datetime string
        return dt.toFormat(date_format);
    } catch (error) {
        // Handle any other unexpected errors
        throw new Error(`Error formatting the datetime: ${error.message}`);
    }
}

describe('formatTimestampToString', () => {
    it('test basic functionality with a known timestamp', () => {
        const timestamp = 1655364000.0; // Corresponds to Thu Jun 16 12:00:00 PM UTC 2022
        const expectedDateStr = 'Thu Jun 16 03:20:00 PM +0800 2022';
        expect(formatTimestampToString(timestamp)).toBe(expectedDateStr);
    });

    it('test using the default format string', () => {
        const timestamp = 1655364000.0;
        const expectedDateStr = 'Thu Jun 16 03:20:00 PM +0800 2022';
        expect(formatTimestampToString(timestamp)).toBe(expectedDateStr);
    });

    it('test with a custom format string', () => {
        const timestamp = 1655364000.0;
        const customFormat = 'yyyy-MM-dd HH:mm:ss';
        const expectedDateStr = '2022-06-16 15:20:00';
        expect(formatTimestampToString(timestamp, customFormat)).toBe(expectedDateStr);
    });

    it('test with an edge case timestamp (e.g., Unix epoch start)', () => {
        const timestamp = 0.0; // Unix epoch start
        const expectedDateStr = 'Thu Jan 01 08:00:00 AM +0800 1970';
        expect(formatTimestampToString(timestamp)).toBe(expectedDateStr);
    });
});

// Example usage
try {
    const formattedDate = formatTimestampToString(1698423600); // Example UNIX timestamp
    console.log(formattedDate);
} catch (error) {
    console.error(error.message);
}
```

### Explanation:
1. **Imports**: The `luxon` library is used to handle date-time operations in JavaScript.
2. **Function Definition**: The function `formatTimestampToString` takes two parameters: `timestamp` (UNIX timestamp) and an optional `date_format` string.
3. **Jest Test Suite**:
   - The `describe` block groups the tests under the `formatTimestampToString` function.
   - Each `it` block represents a specific test case.
   - Assertions are made using `expect` and `toBe` to ensure the expected behavior.
4. **Test Cases**:
   - `test_basic_functionality`: Tests basic functionality with a known timestamp.
   - `test_default_format`: Tests using the default format string.
   - `test_custom_format`: Tests with a custom format string.
   - `test_edge_case_boundary_value`: Tests with an edge case timestamp (Unix epoch start).

Make sure you have the `luxon` library installed in your project by running:
```sh
npm install luxon
```

This ensures that the functionality and logic of the tests are maintained and adapted to Jest's syntax and conventions.