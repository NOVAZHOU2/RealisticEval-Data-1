Sure! Below is the equivalent TypeScript test case using Jest:

```typescript
import { format } from 'date-fns';
import { formatTimestampToString } from './path-to-your-function'; // Adjust the path accordingly

describe('formatTimestampToString', () => {
  it('should format timestamp to default date format', () => {
    const timestamp = Date.now() / 1000; // Current timestamp in seconds
    const expectedFormat = '%a %b %d %I:%M:%S %p %z %Y';
    const result = formatTimestampToString(timestamp);

    expect(result).toMatch(new RegExp(expectedFormat));
  });

  it('should format timestamp to custom date format', () => {
    const timestamp = Date.now() / 1000; // Current timestamp in seconds
    const customFormat = 'yyyy-MM-dd HH:mm:ss.SSS zzz';
    const result = formatTimestampToString(timestamp, customFormat);

    expect(result).toMatch(new RegExp(customFormat.replace(/y+/g, '\\d+').replace(/M+/g, '\\d+').replace(/d+/g, '\\d+').replace(/H+/g, '\\d+').replace(/m+/g, '\\d+').replace(/s+/g, '\\d+').replace(/z+/g, '[+-]\\d{4}')));
  });
});
```

### Explanation:
1. **Importing `format` function**: We import the `format` function from the `date-fns` library, which will help us format the timestamp into a string.
2. **Test Suite (`describe`)**: We create a test suite named `formatTimestampToString`.
3. **First Test Case (`it`)**: This test checks if the function formats the timestamp using the default date format.
   - `timestamp`: We get the current timestamp in seconds.
   - `expectedFormat`: The default format string.
   - `result`: Call the `formatTimestampToString` function with the timestamp.
   - `expect(result).toMatch(...)`: Check if the result matches the expected format using a regular expression.
4. **Second Test Case (`it`)**: This test checks if the function formats the timestamp using a custom date format.
   - `customFormat`: A custom format string.
   - `result`: Call the `formatTimestampToString` function with the timestamp and custom format.
   - `expect(result).toMatch(...)`: Check if the result matches the expected format using a regular expression.

Make sure you have `date-fns` installed in your project:

```sh
npm install date-fns
```

And adjust the import statement in the TypeScript file to match the actual path where your `formatTimestampToString` function is located.