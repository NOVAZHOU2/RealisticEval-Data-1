Certainly! Here is the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation:

```typescript
import { DateTime, Zone } from 'luxon';

/**
 * Formats the given timestamp as a string according to the specified format, using the system's local time zone.
 *
 * @param timestamp - The time value representing the seconds since the epoch.
 * @param date_format - The format string to use for formatting the timestamp. Defaults to '%a %b %d %I:%M:%S %p %z %Y'.
 * @returns The formatted date and time string.
 */
function formatTimestampToString(timestamp: number, date_format: string = 'ccc LLL d hh:mm:ss a zzzz yyyy'): string {
    if (timestamp < 0) {
        throw new Error('Error: timestamp must be non-negative');
    }

    try {
        // Get the local system timezone
        const localTz = Zone.local;

        // Convert the UNIX timestamp to a DateTime object with timezone
        const dt = DateTime.fromMillis(timestamp * 1000).setZone(localTz);

        // Return the formatted datetime string
        return dt.toFormat(date_format);
    } catch (e) {
        // Handle any other unexpected errors
        throw new Error(`Error formatting the datetime: ${e}`);
    }
}

// Example usage
console.log(formatTimestampToString(1689235200)); // Example UNIX timestamp for July 13, 2023
```

### Explanation:
1. **Imports**:
   - We import `DateTime` and `Zone` from Luxon to handle timezone and datetime operations.

2. **Function Definition**:
   - The function `formatTimestampToString` takes two parameters: `timestamp` (a number representing the UNIX timestamp) and `date_format` (a string representing the format). The `date_format` parameter has a default value.

3. **JSDoc Documentation**:
   - The function is documented using JSDoc-style comments, providing clear descriptions of the parameters and return type.

4. **Error Handling**:
   - If `timestamp` is negative, it throws an error.

5. **Timezone Handling**:
   - We use Luxon's `Zone.local` to get the local timezone.

6. **Conversion**:
   - We convert the UNIX timestamp to a `DateTime` object using `DateTime.fromMillis` and then set the timezone using `setZone`.

7. **Formatting**:
   - We use `toFormat` to format the datetime string according to the specified format.

8. **Exception Handling**:
   - Any unexpected errors are caught and re-thrown with a descriptive message.

This TypeScript code preserves the original functionality and structure of the Python code, adapting to TypeScript's static type system and using Luxon for timezone handling.