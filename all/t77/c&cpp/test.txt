Certainly! Below is the equivalent C++ test case using Catch2 for the provided Python `unittest` test class:

```cpp
#include <catch2/catch.hpp>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <ctime>

std::string format_timestamp_to_string(double timestamp, const std::string& date_format = "%a %b %d %I:%M:%S %p %z %Y") {
    std::time_t t = static_cast<std::time_t>(timestamp);
    std::tm tm = *std::localtime(&t);

    std::ostringstream oss;
    oss << std::put_time(&tm, date_format.c_str());

    return oss.str();
}

TEST_CASE("Format Timestamp to String", "[format_timestamp]") {
    // Test with default date format
    double timestamp1 = 1672531200.0; // Example timestamp
    REQUIRE(format_timestamp_to_string(timestamp1) == "Fri Jan 20 00:00:00 PM -0800 2023");

    // Test with custom date format
    double timestamp2 = 1672531200.0; // Same example timestamp
    std::string custom_format = "%Y-%m-%d %H:%M:%S";
    REQUIRE(format_timestamp_to_string(timestamp2, custom_format) == "2023-01-20 12:00:00");
}
```

### Explanation:
1. **Include Necessary Headers**: We include the necessary headers for handling dates and times in C++.
2. **Function Implementation**: The `format_timestamp_to_string` function converts a Unix timestamp to a formatted string using `std::put_time`.
3. **Catch2 Test Case**:
   - `TEST_CASE` defines a new test case named "Format Timestamp to String".
   - `REQUIRE` statements are used to assert that the output of the function matches the expected values.

This C++ code uses Catch2, which is a modern, C++-native testing framework, to write unit tests for the `format_timestamp_to_string` function.