Here is an equivalent C++ code using `<chrono>` and `<iomanip>` libraries:

```cpp
#include <iostream>
#include <iomanip>
#include <ctime>

std::string format_timestamp_to_string(double timestamp, const std::string &date_format = "%a %b %d %I:%M:%S %p %z %Y") {
    std::time_t t = static_cast<std::time_t>(timestamp);
    char buffer[80];
    strftime(buffer, sizeof(buffer), date_format.c_str(), localtime(&t));
    return std::string(buffer);
}

int main() {
    double timestamp = 1633072800; // Example timestamp
    std::cout << format_timestamp_to_string(timestamp) << std::endl;
    return 0;
}
```

And here is an equivalent C code using `<time.h>` library:

```c
#include <stdio.h>
#include <time.h>

char* format_timestamp_to_string(double timestamp, const char *date_format) {
    struct tm tm_struct;
    time_t t = (time_t)timestamp;
    localtime_r(&t, &tm_struct);

    static char buffer[80];
    strftime(buffer, sizeof(buffer), date_format, &tm_struct);
    return buffer;
}

int main() {
    double timestamp = 1633072800; // Example timestamp
    printf("%s\n", format_timestamp_to_string(timestamp, "%a %b %d %I:%M:%S %p %z %Y"));
    return 0;
}
```

Please note that in both C and C++, the `localtime` function is used to convert the time_t object to a broken-down time. The result is stored in a `struct tm`. Then, the `strftime` function formats the broken-down time into a string. 

Also, please make sure to handle errors properly in your production code. This example doesn't include error handling for simplicity.