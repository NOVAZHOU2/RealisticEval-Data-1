Here is how you can implement the same functionality in C and C++:

C Code:

```c
#include <string.h>
#include <stdlib.h>

char** remove_triple_backticks(char* string_list[], int length) {
    char** result = malloc(length * sizeof(char*));
    
    for(int i=0; i<length; i++) {
        size_t len = strlen(string_list[i]);
        char* temp = malloc((len+1)*sizeof(char));
        
        int j = 0;
        while(j<len-2){
            if(string_list[i][j]!='`' || string_list[i][j+1]!='`' || string_list[i][j+2]!='`') {
                temp[j] = string_list[i][j];
                j++;
            } else {
                j += 3;
            }
        }

        // Copy remaining characters
        if(j<len){
            temp[j] = string_list[i][j];
            j++;
        }
        temp[j] = '\0';

        result[i] = temp;
    }
    
    return result;
}
```

C++ Code:

```cpp
#include <vector>
#include <string>
using namespace std;

vector<string> remove_triple_backticks(vector<string>& string_list) {
    vector<string> result;
    
    for(auto str : string_list) {
        string temp = "";
        
        for(size_t i=0; i<str.size()-2; i++){
            if(str[i]!='`' || str[i+1]!='`' || str[i+2]!='`') {
                temp += str[i];
            } else {
                i += 2;
            }
        }

        // Append remaining characters
        if(str.size()>2){
            temp += str.substr(str.size()-2);
        }
        result.push_back(temp);
    }
    
    return result;
}
```
In both codes, `remove_triple_backticks` function takes a list of strings and returns a new list where all instances of three consecutive backticks have been removed from each string. The C version uses dynamic memory allocation, whereas the C++ version uses standard library containers and functions.