Certainly! Here is the equivalent C++ code for the given Python function, including the translation of type annotations, comments, and documentation:

```cpp
#include <iostream>
#include <vector>
#include <string>

// Function to remove all occurrences of three consecutive backticks from each string in the list
/**
 * Processes a list of strings, removing all occurrences of three consecutive backticks from each string.
 *
 * @param string_list The list of strings to process.
 * @return A new list with all instances of three consecutive backticks removed from each string.
 */
std::vector<std::string> remove_triple_backticks(const std::vector<std::string>& string_list) {
    std::vector<std::string> processed_list;
    for (const auto& s : string_list) {
        std::string processed_string = s;
        size_t pos = 0;
        // Find and replace all occurrences of '```' with an empty string
        while ((pos = processed_string.find("```", pos)) != std::string::npos) {
            processed_string.erase(pos, 3);
        }
        processed_list.push_back(processed_string);
    }
    return processed_list;
}

int main() {
    // Example usage
    std::vector<std::string> string_list = {"Hello ``` World", "This is a test ```", "No backticks here"};
    std::vector<std::string> result = remove_triple_backticks(string_list);

    // Output the results
    for (const auto& s : result) {
        std::cout << s << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<iostream>`, `<vector>`, `<string>`) are included at the beginning.
2. **Function Documentation**: The Python docstring is translated into a multi-line comment using `/* ... */` in C++.
3. **Function Signature**: The function `remove_triple_backticks` is defined with the appropriate C++ type signatures.
   - `std::vector<std::string>` is used to represent the list of strings.
   - The function takes a `const std::vector<std::string>&` as input and returns a `std::vector<std::string>`.
4. **Loop Through Strings**: The function iterates through each string in the input vector using a range-based for loop.
5. **String Replacement**: For each string, it uses a `while` loop to find and remove all occurrences of "```" by replacing them with an empty string.
6. **Result Collection**: The processed strings are collected in a new vector called `processed_list`.
7. **Example Usage**: In the `main` function, an example list of strings is provided, and the function is called to demonstrate its usage. The results are printed to the console.

This code preserves the original purpose and structure of the Python code while adhering to C++ syntax and conventions.