Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest test cases will be converted to Jest test cases, and the necessary type annotations and assertions will be included.

### TypeScript Code with Jest Tests

First, ensure you have Jest installed in your TypeScript project:

```sh
npm install --save-dev jest @types/jest ts-jest
```

Add Jest configuration to your `tsconfig.json`:

```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"],
  "jest": {
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    },
    "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.tsx?$",
    "moduleFileExtensions": ["ts", "tsx", "js", "jsx", "json", "node"]
  }
}
```

Now, let's write the TypeScript test class using Jest:

```typescript
import { removeTripleBackticks } from './your-function-file'; // Import the function to be tested

describe('TestRemoveTripleBackticks', () => {
  it('test_remove_triple_backticks_basic', () => {
    // Test basic functionality
    const inputStrings = ['Here is ```code``` example', 'Another ```example``` here', 'No backticks here'];
    const expectedOutput = ['Here is code example', 'Another example here', 'No backticks here'];
    expect(removeTripleBackticks(inputStrings)).toEqual(expectedOutput);
  });

  it('test_strings_with_multiple_instances', () => {
    // Test strings containing multiple instances of triple backticks
    const inputStrings = ['Multiple ```backticks``` in ```one``` string'];
    const expectedOutput = ['Multiple backticks in one string'];
    expect(removeTripleBackticks(inputStrings)).toEqual(expectedOutput);
  });

  it('test_empty_strings', () => {
    // Test with empty strings
    const inputStrings = [''];
    const expectedOutput = [''];
    expect(removeTripleBackticks(inputStrings)).toEqual(expectedOutput);
  });

  it('test_no_triple_backticks', () => {
    // Test strings that do not contain triple backticks
    const inputStrings = ['Just a normal string', 'Another normal string'];
    const expectedOutput = ['Just a normal string', 'Another normal string'];
    expect(removeTripleBackticks(inputStrings)).toEqual(expectedOutput);
  });

  it('test_edge_cases', () => {
    // Test edge cases like strings made entirely of triple backticks
    const inputStrings = ['```', '```more```', 'text``````'];
    const expectedOutput = ['', 'more', 'text'];
    expect(removeTripleBackticks(inputStrings)).toEqual(expectedOutput);
  });
});
```

### Explanation:
1. **Import Function**: Import the `removeTripleBackticks` function from the file where it is defined.
2. **Describe Block**: Use the `describe` block to group the test cases.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Expect Assertions**: Use `expect` with `toEqual` to assert the expected output matches the actual output.

### Running the Tests
To run the tests, add a script to your `package.json`:

```json
"scripts": {
  "test": "jest"
}
```

Run the tests using:

```sh
npm test
```

This setup ensures that the tests are structured and executed correctly using Jest, maintaining the same functionality and logic as the original Python unittest test cases.