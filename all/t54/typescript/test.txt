Sure! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class. Note that I'll assume you have a similar function in TypeScript that performs the same operation:

```typescript
import { describe, it, expect } from '@jest/globals';

function removeTripleBackticks(stringList: string[]): string[] {
    return stringList.map(str => str.replace(/```/g, ''));
}

describe('removeTripleBackticks', () => {
    it('should remove triple backticks from each string in the list', () => {
        const input = ['This is ```a test``', 'Another ```string``` here'];
        const expectedOutput = ['This is a test', 'Another string here'];

        const result = removeTripleBackticks(input);

        expect(result).toEqual(expectedOutput);
    });

    it('should handle an empty array', () => {
        const input: string[] = [];
        const expectedOutput: string[] = [];

        const result = removeTripleBackticks(input);

        expect(result).toEqual(expectedOutput);
    });

    it('should not modify strings without triple backticks', () => {
        const input = ['No triple backticks here', 'Neither do these'];
        const expectedOutput = ['No triple backticks here', 'Neither do these'];

        const result = removeTripleBackticks(input);

        expect(result).toEqual(expectedOutput);
    });
});
```

### Explanation:
1. **Function Definition**: The `removeTripleBackticks` function takes an array of strings and returns a new array where all occurrences of triple backticks (`````) are replaced with an empty string.
2. **Test Suite**:
   - **First Test Case**: Checks if the function correctly removes triple backticks from a list of strings.
   - **Second Test Case**: Ensures that the function handles an empty array gracefully.
   - **Third Test Case**: Verifies that the function does not modify strings that do not contain triple backticks.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest
```

or

```sh
yarn add --dev jest
```

Then, you can run the tests using:

```sh
npx jest
```

or

```sh
yarn test
```