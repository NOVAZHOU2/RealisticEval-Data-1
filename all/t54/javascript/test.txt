Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Unittest Code

```python
import unittest

class TestRemoveTripleBackticks(unittest.TestCase):

    def test_remove_triple_backticks_basic(self):
        # Test basic functionality
        input_strings = ['Here is ```code``` example', 'Another ```example``` here', 'No backticks here']
        expected_output = ['Here is code example', 'Another example here', 'No backticks here']
        self.assertEqual(remove_triple_backticks(input_strings), expected_output)

    def test_strings_with_multiple_instances(self):
        # Test strings containing multiple instances of triple backticks
        input_strings = ['Multiple ```backticks``` in ```one``` string']
        expected_output = ['Multiple backticks in one string']
        self.assertEqual(remove_triple_backticks(input_strings), expected_output)

    def test_empty_strings(self):
        # Test with empty strings
        input_strings = ['']
        expected_output = ['']
        self.assertEqual(remove_triple_backticks(input_strings), expected_output)

    def test_no_triple_backticks(self):
        # Test strings that do not contain triple backticks
        input_strings = ['Just a normal string', 'Another normal string']
        expected_output = ['Just a normal string', 'Another normal string']
        self.assertEqual(remove_triple_backticks(input_strings), expected_output)

    def test_edge_cases(self):
        # Test edge cases like strings made entirely of triple backticks
        input_strings = ['```', '```more```', 'text``````']
        expected_output = ['', 'more', 'text']
        self.assertEqual(remove_triple_backticks(input_strings), expected_output)
```

### Equivalent Jest Test Suite

```javascript
const removeTripleBackticks = require('./removeTripleBackticks'); // Import the function to be tested

describe('TestRemoveTripleBackticks', () => {
    describe('Basic functionality', () => {
        it('should handle basic removal of triple backticks', () => {
            const inputStrings = ['Here is ```code``` example', 'Another ```example``` here', 'No backticks here'];
            const expectedOutput = ['Here is code example', 'Another example here', 'No backticks here'];
            expect(removeTripleBackticks(inputStrings)).toEqual(expectedOutput);
        });
    });

    describe('Strings with multiple instances of triple backticks', () => {
        it('should handle multiple instances of triple backticks', () => {
            const inputStrings = ['Multiple ```backticks``` in ```one``` string'];
            const expectedOutput = ['Multiple backticks in one string'];
            expect(removeTripleBackticks(inputStrings)).toEqual(expectedOutput);
        });
    });

    describe('Empty strings', () => {
        it('should handle empty strings', () => {
            const inputStrings = [''];
            const expectedOutput = [''];
            expect(removeTripleBackticks(inputStrings)).toEqual(expectedOutput);
        });
    });

    describe('Strings without triple backticks', () => {
        it('should handle strings without triple backticks', () => {
            const inputStrings = ['Just a normal string', 'Another normal string'];
            const expectedOutput = ['Just a normal string', 'Another normal string'];
            expect(removeTripleBackticks(inputStrings)).toEqual(expectedOutput);
        });
    });

    describe('Edge cases', () => {
        it('should handle edge cases like strings made entirely of triple backticks', () => {
            const inputStrings = ['```', '```more```', 'text``````'];
            const expectedOutput = ['', 'more', 'text'];
            expect(removeTripleBackticks(inputStrings)).toEqual(expectedOutput);
        });
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `removeTripleBackticks` function is imported at the beginning of the test file.

2. **Describe Blocks**:
   - Each `unittest.TestCase` method is converted to a `describe` block in Jest.
   - Each `it` block within the `describe` block represents a specific test case.

3. **Assertions**:
   - The `self.assertEqual` from Python is replaced with `expect(...).toEqual(...)` in Jest.
   - `toEqual` is used to ensure deep equality between the actual and expected outputs.

4. **Structure**:
   - The structure is organized using `describe` blocks to group related tests together, making the test suite more readable and maintainable.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.