Certainly! Below is the TypeScript version of your JavaScript function:

```typescript
/**
 * Extracts the fileID from the given URL query arguments. If not found, returns null.
 * For example:
 *      input: https://example.com/download?fileId=12345
 *      output: 12345
 *
 * @param {string} url - The URL from which the file ID is to be extracted.
 * @returns {string | null} - The extracted file ID if present, otherwise null if the URL does not conform to the expected format.
 */
function getFileIdFromUrl(url: string): string | null {
    // Create a URL object to parse the URL
    const parsedUrl = new URL(url);

    // Check if the searchParams contains 'fileId'
    if (parsedUrl.searchParams.has('fileId')) {
        // Return the value of 'fileId' or null if it's an empty string
        return parsedUrl.searchParams.get('fileId') || null;
    }

    // Return null if 'fileId' is not found in the searchParams
    return null;
}
```

### Explanation:
- **Type Annotations**: The function parameters and return type are annotated with their respective types (`string` for `url` and `string | null` for the return type).
- **URL Object**: The `URL` constructor is used to parse the URL, which provides convenient methods like `searchParams`.
- **Search Params**: The `searchParams` property of the `URL` object allows you to access the query parameters easily.

This TypeScript version ensures that the function adheres to type safety and makes it easier to understand what each part of the function expects and returns.