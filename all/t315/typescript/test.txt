Sure! Below is the TypeScript version of your Jest test case using `describe`:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Extract the fileid from the given URL query args. If not find return null
 * For example:
 *      input: https://example.com/download?fileId=12345
 *      output: 12345
 *
 * @param {string} url - The URL from which the file ID is to be extracted.
 * @returns {string|null} - The extracted file ID if present, otherwise null if the URL does not conform to the expected format.
 */
function getFileIdFromUrl(url: string): string | null {
    const params = new URLSearchParams(new URL(url).search);
    return params.get('fileId') || null;
}

describe('getFileIdFromUrl', () => {
    it('should extract the file ID from a valid URL', () => {
        const url = 'https://example.com/download?fileId=12345';
        expect(getFileIdFromUrl(url)).toBe('12345');
    });

    it('should return null for an invalid URL', () => {
        const url = 'https://example.com/download';
        expect(getFileIdFromUrl(url)).toBeNull();
    });

    it('should handle URLs with no query parameters', () => {
        const url = 'https://example.com/download';
        expect(getFileIdFromUrl(url)).toBeNull();
    });
});
```

### Explanation:
1. **TypeScript Function Signature**: The function signature has been updated to include type annotations for the input and output parameters.
2. **URL Parsing**: The `URL` constructor is used to parse the URL and extract the search parameters.
3. **Jest Test Suite**:
   - The `describe` block groups related tests together.
   - Each `it` block contains a specific test case.
   - The `expect` function is used to assert the expected outcomes.

This should give you a good starting point for testing your TypeScript function with Jest.