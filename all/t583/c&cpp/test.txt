Here's how you can convert the provided TypeScript Jest test cases into Catch2 test cases in C++:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>

// Function prototype
std::string removeQueryParam(const std::string& url, const std::string& key);

TEST_CASE("removeQueryParam") {
    SECTION("should remove an existing parameter from the URL") {
        std::string url = "https://example.com?page=1&sort=asc&filter=red";
        std::string result = removeQueryParam(url, "sort");
        REQUIRE(result == "https://example.com/?page=1&filter=red");
    }

    SECTION("should not modify the URL if the parameter does not exist") {
        std::string url = "https://example.com?page=1&filter=red";
        std::string result = removeQueryParam(url, "sort");
        REQUIRE(result == "https://example.com/?page=1&filter=red");
    }

    SECTION("should return the original URL if there are no query parameters") {
        std::string url = "https://example.com";
        std::string result = removeQueryParam(url, "sort");
        REQUIRE(result == "https://example.com/");
    }

    SECTION("should remove multiple occurrences of a parameter") {
        std::string url = "https://example.com?page=1&filter=red&filter=blue";
        std::string result = removeQueryParam(url, "filter");
        REQUIRE(result == "https://example.com/?page=1");
    }

    SECTION("should handle encoded characters in the parameter") {
        std::string url = "https://example.com?page=1&sort=asc&filter=hello%20world";
        std::string result = removeQueryParam(url, "filter");
        REQUIRE(result == "https://example.com/?page=1&sort=asc");
    }

    SECTION("should handle the case when the parameter is the only one in the URL") {
        std::string url = "https://example.com?sort=asc";
        std::string result = removeQueryParam(url, "sort");
        REQUIRE(result == "https://example.com/");
    }
}
```

### Explanation:
1. **Catch2 Setup**: The `#define CATCH_CONFIG_MAIN` directive is used to create a main function for the Catch2 tests.
2. **Test Cases**: Each test case is wrapped in a `SECTION`, which allows for clear organization and output.
3. **Assertions**: The `REQUIRE` macro is used to assert that the actual result matches the expected result.
4. **Function Prototype**: The `removeQueryParam` function is declared at the beginning to ensure it can be referenced in the tests. 

Make sure you have Catch2 installed and linked properly to run these tests.