Hereâ€™s the equivalent JUnit 4 test case in Java for your provided Jest test case:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

public class Tester {

    @Test
    public void testRemoveExistingParameter() throws Exception {
        String url = "https://example.com?page=1&sort=asc&filter=red";
        String result = UrlUtils.removeQueryParam(url, "sort");
        assertEquals("https://example.com/?page=1&filter=red", result);
    }

    @Test
    public void testNoModificationIfParameterDoesNotExist() throws Exception {
        String url = "https://example.com?page=1&filter=red";
        String result = UrlUtils.removeQueryParam(url, "sort");
        assertEquals("https://example.com/?page=1&filter=red", result);
    }

    @Test
    public void testReturnOriginalUrlIfNoQueryParameters() throws Exception {
        String url = "https://example.com";
        String result = UrlUtils.removeQueryParam(url, "sort");
        assertEquals("https://example.com/", result);
    }

    @Test
    public void testRemoveMultipleOccurrencesOfParameter() throws Exception {
        String url = "https://example.com?page=1&filter=red&filter=blue";
        String result = UrlUtils.removeQueryParam(url, "filter");
        assertEquals("https://example.com/?page=1", result);
    }

    @Test
    public void testHandleEncodedCharactersInParameter() throws Exception {
        String url = "https://example.com?page=1&sort=asc&filter=hello%20world";
        String result = UrlUtils.removeQueryParam(url, "filter");
        assertEquals("https://example.com/?page=1&sort=asc", result);
    }

    @Test
    public void testParameterIsOnlyOneInUrl() throws Exception {
        String url = "https://example.com?sort=asc";
        String result = UrlUtils.removeQueryParam(url, "sort");
        assertEquals("https://example.com/", result);
    }
}
```

### Explanation:
1. **Package Declaration**: Matches your specified package.
2. **JUnit Imports**: Uses `org.junit.Test` for test cases and `static org.junit.Assert.*` for assertions.
3. **Test Methods**: Each test case corresponds to the original Jest tests, using `assertEquals` for assertions.
4. **Exception Handling**: Each test method declares `throws Exception` to handle potential `URISyntaxException` from `removeQueryParam`.

You can run this class using JUnit 4, and it will perform the same checks as your Jest test cases!