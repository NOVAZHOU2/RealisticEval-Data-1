Hereâ€™s how to convert the provided TypeScript code for removing a query parameter from a URL into Python. The equivalent Python code utilizes the urllib.parse module for URL manipulation.
Converted Python Code
python
from urllib.parse import urlparse, urlunparse, parse_qs, urlencode

def remove_query_param(url: str, key: str) -> str:
    """
    Removes the specified parameter from the URL query string.

    :param url: The URL from which to remove the parameter.
    :param key: The key of the parameter to remove.
    :return: The modified URL with the specified parameter removed.
    """
    # Parse the URL into its components
    url_parts = list(urlparse(url))
    
    # Parse the query parameters into a dictionary
    query_params = parse_qs(url_parts[4])
    
    # Remove the specified key if it exists
    if key in query_params:
        del query_params[key]
    
    # Rebuild the query string from the remaining parameters
    url_parts[4] = urlencode(query_params, doseq=True)
    
    # Return the modified URL
    return urlunparse(url_parts)

# Example usage:
# new_url = remove_query_param("http://example.com/page?search=test&page=1", "page")
# print(new_url)  # Output: http://example.com/page?search=test
Explanation of the Converted Code:
Imports:
The urlparse, urlunparse, parse_qs, and urlencode functions from the urllib.parse module are imported. These functions allow for parsing and manipulating URLs.
Function Definition:
The function remove_query_param is defined to accept a URL as a string and a key (the parameter to remove).
Docstring:
The docstring documents the purpose of the function, detailing the parameters and return value.
URL Parsing:
The URL is parsed into its components using urlparse(), which breaks it down into a list of its parts.
The query string (index 4 of the parsed URL) is parsed into a dictionary using parse_qs(). This function handles the query string, converting it into a dictionary where each key maps to a list of values.
Parameter Removal:
If the specified key exists in the query_params, it is removed using the del statement.
Rebuilding the Query String:
The remaining parameters are converted back into a query string using urlencode(), which is then reassigned to the original URL's query part.
Return Statement:
The modified URL is reconstructed using urlunparse() and returned.
This Python implementation replicates the functionality of the original TypeScript code, effectively removing the specified query parameter from the URL.