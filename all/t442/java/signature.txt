Sure, here's the equivalent Java code for the given Python function:

```java
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;

public class DataConverter {

    /**
     * Convert strings in nested structures (e.g., maps, lists) to numbers (integers or floating-point numbers) as much as possible.
     *
     * @param data the data before conversion
     * @return the data after conversion
     */
    public static Object convertStringsToNumbers(Object data) {
        if (data instanceof Map) {
            Map<String, Object> map = new HashMap<>();
            ((Map<?, ?>) data).forEach((key, value) -> map.put((String) key, convertStringsToNumbers(value)));
            return map;
        } else if (data instanceof List) {
            List<Object> list = new ArrayList<>();
            ((List<?>) data).forEach(item -> list.add(convertStringsToNumbers(item)));
            return list;
        } else if (data instanceof String) {
            try {
                String str = (String) data;
                if (str.contains(".")) {
                    return Double.parseDouble(str);
                } else {
                    return Integer.parseInt(str);
                }
            } catch (NumberFormatException e) {
                // If parsing fails, return the original string
                return data;
            }
        } else {
            return data;
        }
    }

    // Example usage
    public static void main(String[] args) {
        Map<String, Object> testData = new HashMap<>();
        testData.put("a", "1");
        testData.put("b", "2.5");
        testData.put("c", List.of("3", "4.6", "five"));

        Object convertedData = convertStringsToNumbers(testData);
        System.out.println(convertedData);
    }
}
```

### Explanation:
1. **Imports**: The required Java imports are added at the beginning of the file.
2. **Class Definition**: A `DataConverter` class is defined to encapsulate the conversion logic.
3. **Javadoc Comments**: The function's docstring is translated into a Javadoc comment block.
4. **Type Handling**:
   - The Python `Union[Dict, List]` is translated into a generic Java `Object` type, which can represent either a `Map` or a `List`.
   - The function checks the type of the input data and handles it accordingly.
5. **Conversion Logic**:
   - If the input is a `Map`, it creates a new `HashMap` and recursively applies the conversion logic to its values.
   - If the input is a `List`, it creates a new `ArrayList` and recursively applies the conversion logic to its elements.
   - If the input is a `String`, it attempts to parse it as an integer or double.
   - If parsing fails, the original string is returned.
6. **Example Usage**: An example usage is provided in the `main` method to demonstrate how the function works.