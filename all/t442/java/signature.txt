Certainly! Below is the equivalent Java code for the given Python function, including the appropriate Javadoc comments and type translations:

```java
import java.util.List;
import java.util.Map;

public class Answer {

    /**
     * Convert strings in nested structures (e.g., dictionaries, arrays) to numbers (integers or floating-point numbers) as much as possible.
     *
     * @param data the input data, which can be a dictionary or a list
     * @return the converted data, which can be a dictionary or a list
     */
    public static Object convertStringsToNumbers(Object data) {
        if (data instanceof Map) {
            @SuppressWarnings("unchecked")
            Map<Object, Object> map = (Map<Object, Object>) data;
            Map<Object, Object> convertedMap = new HashMap<>();
            for (Map.Entry<Object, Object> entry : map.entrySet()) {
                convertedMap.put(entry.getKey(), convertStringsToNumbers(entry.getValue()));
            }
            return convertedMap;
        } else if (data instanceof List) {
            @SuppressWarnings("unchecked")
            List<Object> list = (List<Object>) data;
            List<Object> convertedList = new ArrayList<>();
            for (Object item : list) {
                convertedList.add(convertStringsToNumbers(item));
            }
            return convertedList;
        } else if (data instanceof String) {
            String str = (String) data;
            try {
                // Try converting to float first, then to int if possible
                if (str.contains(".")) {
                    return Float.parseFloat(str);
                } else {
                    return Integer.parseInt(str);
                }
            } catch (NumberFormatException e) {
                return data; // Return original string if conversion fails
            }
        } else {
            return data; // Return data unchanged if it's not a string
        }
    }

    public static void main(String[] args) {
        // Example usage
        Map<String, Object> data = new HashMap<>();
        data.put("a", "123");
        data.put("b", List.of("456", "789.0"));
        data.put("c", "not_a_number");

        System.out.println(convertStringsToNumbers(data));
    }
}
```

### Explanation:
1. **Import Statements**: Import necessary classes such as `List` and `Map`.

2. **Class Declaration**: The class `Answer` is declared.

3. **Javadoc Comments**: The Javadoc comments provide detailed documentation for the method, including the purpose, parameters, and return type.

4. **Method Signature**:
   - The method `convertStringsToNumbers` is declared with the signature `public static Object convertStringsToNumbers(Object data)`.
   - The method takes an `Object` as input, which can be either a `Map` or a `List`.
   - The method returns an `Object`, which can be either a `Map` or a `List`.

5. **Type Checking**:
   - The method checks if the input `data` is a `Map`, `List`, or `String` using `instanceof`.
   - For `Map` and `List`, it recursively calls `convertStringsToNumbers` to process each element.
   - For `String`, it attempts to convert the string to a number.

6. **Exception Handling**: A `NumberFormatException` is caught if the string cannot be parsed as a number, and the original string is returned.

7. **Main Method**: An example usage is provided in the `main` method to demonstrate how to call the `convertStringsToNumbers` method.

This Java code preserves the original functionality and structure of the Python code, adhering to Java's syntax and conventions.