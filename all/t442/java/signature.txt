Certainly! Hereâ€™s the equivalent Java code for the provided Python function, including appropriate type annotations, method signatures, and Javadoc comments:

```java
import java.util.List;
import java.util.Map;

public class Answer {

    /**
     * Converts strings in nested structures (e.g., dictionaries, arrays) to numbers (integers or floating-point numbers) as much as possible.
     *
     * @param data the input data before conversion
     * @return the converted data
     */
    public static Object convertStringsToNumbers(Object data) {
        if (data instanceof Map) {
            @SuppressWarnings("unchecked")
            Map<String, Object> map = (Map<String, Object>) data;
            Map<String, Object> newMap = new HashMap<>();
            for (Map.Entry<String, Object> entry : map.entrySet()) {
                newMap.put(entry.getKey(), convertStringsToNumbers(entry.getValue()));
            }
            return newMap;
        } else if (data instanceof List) {
            @SuppressWarnings("unchecked")
            List<Object> list = (List<Object>) data;
            List<Object> newList = new ArrayList<>();
            for (Object item : list) {
                newList.add(convertStringsToNumbers(item));
            }
            return newList;
        } else if (data instanceof String) {
            String str = (String) data;
            try {
                // Try converting to float first, then to int if possible
                if (str.contains(".")) {
                    return Float.parseFloat(str);
                } else {
                    return Integer.parseInt(str);
                }
            } catch (NumberFormatException e) {
                return str;  // Return original string if conversion fails
            }
        } else {
            return data;  // Return data unchanged if it's not a string
        }
    }

    public static void main(String[] args) {
        // Example usage
        Map<String, Object> data = new HashMap<>();
        data.put("a", "123");
        data.put("b", "456.789");
        data.put("c", "hello");

        List<Object> listData = List.of("100", "200.5", "world");

        System.out.println(convertStringsToNumbers(data));
        System.out.println(convertStringsToNumbers(listData));
    }
}
```

### Explanation:
1. **Import Statements**: Added necessary imports for `List` and `Map`.
2. **Javadoc Comments**: Translated the Python docstring into a Javadoc comment.
3. **Method Signature**: The method signature `convertStringsToNumbers` is defined to accept and return `Object` types, which can represent either `Map` or `List`.
4. **Type Checking**: Used `instanceof` to check the type of the input data.
5. **Generics**: Used generics to handle `Map` and `List` types.
6. **Exception Handling**: Included a `try-catch` block to handle `NumberFormatException` when attempting to parse strings to numbers.
7. **Main Method**: Provided an example usage in the `main` method to demonstrate how the method works.

This Java code preserves the original functionality and structure of the Python code, ensuring that strings are converted to numbers where possible, and other types are returned unchanged.