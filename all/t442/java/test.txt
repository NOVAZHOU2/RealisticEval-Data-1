Sure! Below is the equivalent Java code using JUnit for testing the `convert_strings_to_numbers` method. First, let's define the method itself, and then we'll write the test class.

### Method Implementation in Java

```java
import java.util.List;
import java.util.Map;
import java.util.HashMap;

public class DataConverter {

    /**
     * Convert strings in nested structures (e.g. maps, lists) to numbers (integers or floating point numbers) as much as possible.
     *
     * @param data the input data, which can be a map or a list
     * @return the converted data, which can be a map or a list
     */
    public static Object convertStringsToNumbers(Object data) {
        if (data instanceof Map) {
            return convertMap((Map<?, ?>) data);
        } else if (data instanceof List) {
            return convertList((List<?>) data);
        } else {
            throw new IllegalArgumentException("Unsupported data type");
        }
    }

    private static Map<String, Object> convertMap(Map<?, ?> map) {
        Map<String, Object> result = new HashMap<>();
        for (Map.Entry<?, ?> entry : map.entrySet()) {
            String key = entry.getKey().toString();
            Object value = entry.getValue();
            result.put(key, convertValue(value));
        }
        return result;
    }

    private static List<Object> convertList(List<?> list) {
        List<Object> result = new ArrayList<>();
        for (Object item : list) {
            result.add(convertValue(item));
        }
        return result;
    }

    private static Object convertValue(Object value) {
        if (value instanceof String) {
            String str = (String) value;
            try {
                if (str.contains(".")) {
                    return Double.parseDouble(str);
                } else {
                    return Integer.parseInt(str);
                }
            } catch (NumberFormatException e) {
                // If conversion fails, return the original string
                return str;
            }
        } else if (value instanceof Map) {
            return convertMap((Map<?, ?>) value);
        } else if (value instanceof List) {
            return convertList((List<?>) value);
        } else {
            return value;
        }
    }
}
```

### Test Class Using JUnit

```java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.assertEquals;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RunWith(JUnit4.class)
public class Tester {

    private static final DataConverter converter = new DataConverter();

    @Test
    public void testConvertStringsToNumbers() {
        Map<String, Object> inputMap = new HashMap<>();
        inputMap.put("a", "100");
        inputMap.put("b", "200.5");
        Map<String, Object> nestedMap = new HashMap<>();
        nestedMap.put("c", "300");
        inputMap.put("d", nestedMap);

        Map<String, Object> expectedOutputMap = new HashMap<>();
        expectedOutputMap.put("a", 100);
        expectedOutputMap.put("b", 200.5);
        Map<String, Object> expectedNestedMap = new HashMap<>();
        expectedNestedMap.put("c", 300);
        expectedOutputMap.put("d", expectedNestedMap);

        assertEquals(expectedOutputMap, converter.convertStringsToNumbers(inputMap));

        List<Object> inputList = Arrays.asList("100", "200.5", "not_a_number", new HashMap<String, Object>() {{
            put("nested", "300");
        }});

        List<Object> expectedOutputList = Arrays.asList(100, 200.5, "not_a_number", new HashMap<String, Object>() {{
            put("nested", 300);
        }});

        assertEquals(expectedOutputList, converter.convertStringsToNumbers(inputList));
    }
}
```

In this example, the `DataConverter` class contains the method `convertStringsToNumbers`, and the `Tester` class uses JUnit to test this method with different inputs and asserts the expected outputs.