Here's how you can translate your Python code into Java:

```java
package org.real.temp;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class Answer {

    public static Object convertStringsToNumbers(Object data) {
        if (data instanceof Map<?, ?>) {
            return ((Map<?, ?>) data).entrySet().stream()
                    .collect(Collectors.toMap(
                            Map.Entry::getKey,
                            entry -> convertStringsToNumbers(entry.getValue())
                    ));
        } else if (data instanceof List<?>) {
            return ((List<?>) data).stream()
                    .map(Answer::convertStringsToNumbers)
                    .collect(Collectors.toList());
        } else if (data instanceof String && ((String) data).matches("-?\\d+(\\.\\d+)?")) {
            try {
                return Double.parseDouble((String) data);
            } catch (NumberFormatException e) {
                return Integer.parseInt((String) data);
            }
        } else {
            return data;
        }
    }

}
```

This Java code does essentially the same thing as your Python function. It recursively traverses through the input `data` object, converting any string that represents a number to an appropriate numeric type (Integer or Double), and leaving other types unchanged.

Please note that Java doesn't have a direct equivalent for Python's dynamic typing, so we use the `Object` type to represent any kind of value, and then check its actual type at runtime using `instanceof`. Also, because Java doesn't support dictionary comprehensions like Python, we use streams to achieve similar functionality.