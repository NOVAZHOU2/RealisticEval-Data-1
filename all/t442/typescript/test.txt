Sure! Below is the equivalent TypeScript test case using Jest for the provided Python unittest test class.

```typescript
import { describe, it, expect } from '@jest/globals';

// Assuming the function is defined somewhere in your project
function convertStringsToNumbers(data: any): any {
    if (typeof data === 'string') {
        const num = Number(data);
        return isNaN(num) ? data : num;
    } else if (Array.isArray(data)) {
        return data.map(item => convertStringsToNumbers(item));
    } else if (typeof data === 'object' && data !== null) {
        const newObj: any = {};
        for (const key in data) {
            if (data.hasOwnProperty(key)) {
                newObj[key] = convertStringsToNumbers(data[key]);
            }
        }
        return newObj;
    }
    return data;
}

describe('convertStringsToNumbers', () => {
    it('should convert strings to numbers in an array', () => {
        const input = ['123', '456', '789'];
        const expectedOutput = [123, 456, 789];
        expect(convertStringsToNumbers(input)).toEqual(expectedOutput);
    });

    it('should convert strings to numbers in a dictionary', () => {
        const input = { a: '123', b: '456', c: '789' };
        const expectedOutput = { a: 123, b: 456, c: 789 };
        expect(convertStringsToNumbers(input)).toEqual(expectedOutput);
    });

    it('should leave non-numeric strings unchanged', () => {
        const input = ['abc', 'def', 'ghi'];
        const expectedOutput = ['abc', 'def', 'ghi'];
        expect(convertStringsToNumbers(input)).toEqual(expectedOutput);
    });

    it('should handle nested structures', () => {
        const input = {
            a: '123',
            b: ['456', '789'],
            c: {
                d: '101112',
                e: ['131415']
            }
        };
        const expectedOutput = {
            a: 123,
            b: [456, 789],
            c: {
                d: 101112,
                e: [131415]
            }
        };
        expect(convertStringsToNumbers(input)).toEqual(expectedOutput);
    });
});
```

### Explanation:
1. **Function Definition**: The `convertStringsToNumbers` function is assumed to be defined somewhere in your project.
2. **Jest Descriptions and Tests**:
   - `describe`: Groups related tests together.
   - `it`: Defines a single test case.
   - `expect`: Asserts that the actual output matches the expected output.
3. **Test Cases**:
   - Converts strings in an array to numbers.
   - Converts strings in a dictionary to numbers.
   - Leaves non-numeric strings unchanged.
   - Handles nested structures correctly.

Make sure you have Jest installed in your project. If not, you can install it using npm:

```sh
npm install --save-dev jest
```

Then, you can run the tests using:

```sh
npx jest
```