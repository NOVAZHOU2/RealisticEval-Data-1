Sure, hereâ€™s how you can convert the Python function to TypeScript and write the corresponding tests using Jest:

First, let's define the TypeScript function `convertStringsToNumbers`:

```typescript
type NestedData = { [key: string]: any } | any[];

function convertStringsToNumbers(data: NestedData): NestedData {
  if (Array.isArray(data)) {
    return data.map(item => convertStringsToNumbers(item));
  } else if (typeof data === 'object' && data !== null) {
    const result: { [key: string]: any } = {};
    for (const key in data) {
      if (data.hasOwnProperty(key)) {
        result[key] = convertStringsToNumbers(data[key]);
      }
    }
    return result;
  } else if (typeof data === 'string') {
    const num = Number(data);
    return isNaN(num) ? data : num;
  }
  return data;
}
```

Now, let's create the Jest test suite:

```typescript
import { convertStringsToNumbers } from './path-to-your-function'; // Adjust the path accordingly

describe('convertStringsToNumbers', () => {
  it('should convert string numbers in an array to numbers', () => {
    const testData = ['1', '2.5', 'hello', '3'];
    const expectedResult = [1, 2.5, 'hello', 3];
    expect(convertStringsToNumbers(testData)).toEqual(expectedResult);
  });

  it('should convert string numbers in a dictionary to numbers', () => {
    const testData = { a: '1', b: '2.5', c: 'hello', d: '3' };
    const expectedResult = { a: 1, b: 2.5, c: 'hello', d: 3 };
    expect(convertStringsToNumbers(testData)).toEqual(expectedResult);
  });

  it('should handle nested structures correctly', () => {
    const testData = [
      { a: '1', b: '2.5', c: 'hello', d: '3' },
      ['4', '5.5', 'world'],
      { e: '6', f: '7.7', g: '8' },
    ];
    const expectedResult = [
      { a: 1, b: 2.5, c: 'hello', d: 3 },
      [4, 5.5, 'world'],
      { e: 6, f: 7.7, g: 8 },
    ];
    expect(convertStringsToNumbers(testData)).toEqual(expectedResult);
  });
});
```

### Explanation:
1. **Type Definitions**: 
   - `NestedData` is a union type that represents either an object with string keys or an array.

2. **Function Definition**:
   - The `convertStringsToNumbers` function recursively processes the input data and converts string representations of numbers to actual numbers.
   - It handles arrays and objects by recursively calling itself on each item.
   - For strings, it attempts to parse them as numbers and returns the number if successful; otherwise, it returns the original string.

3. **Test Cases**:
   - Each test case verifies specific scenarios where the function is expected to convert string representations of numbers to actual numbers while leaving other types unchanged.
   - Jest's `expect` function is used with various matchers (`toEqual`) to assert the correctness of the output.

This setup ensures that the functionality and logic of the tests are preserved while adapting to TypeScript and Jest.