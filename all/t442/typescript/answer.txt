Certainly! Below is the TypeScript code that replicates the functionality of the provided Python function:

```typescript
function convertStringsToNumbers(data: any): any {
    if (typeof data === 'object' && data !== null) {
        if (Array.isArray(data)) {
            return data.map(item => convertStringsToNumbers(item));
        } else {
            return Object.fromEntries(
                Object.entries(data).map(([key, value]) => [key, convertStringsToNumbers(value)])
            );
        }
    } else if (typeof data === 'string') {
        try {
            // Try converting to float first, then to int if possible
            const num = parseFloat(data);
            if (!isNaN(num)) {
                if (data.includes('.')) {
                    return num;
                } else {
                    return parseInt(data, 10);
                }
            }
        } catch (error) {
            // Ignore error
        }
    }
    return data;  // Return original data if conversion fails or is not a string
}

// Example usage
const data = {
    name: "John Doe",
    age: "30",
    height: "5.9",
    children: ["Alice", "Bob"],
    details: {
        address: "123 Main St",
        salary: "50000"
    }
};

console.log(convertStringsToNumbers(data));
```

### Explanation:
1. **Type Checking**: The TypeScript code uses `typeof` to check if the data is an object or a string.
2. **Dictionary Handling**: For dictionaries (`object`), it uses `Object.entries()` to iterate over key-value pairs and recursively applies the function.
3. **List Handling**: For lists (`array`), it uses `Array.map()` to apply the function to each element.
4. **String Conversion**: For strings, it attempts to parse the string as a number. If the string contains a dot (`.`), it converts it to a float; otherwise, it tries to convert it to an integer.

This approach ensures that the TypeScript code closely mirrors the behavior of the Python function.