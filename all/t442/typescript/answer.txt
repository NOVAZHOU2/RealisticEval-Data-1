Sure, here is the equivalent TypeScript code for your Python function:

```typescript
type Data = { [key: string]: any } | any[];

function convertStringsToNumbers(data: Data): Data {
    if (Array.isArray(data)) {
        return data.map(item => convertStringsToNumbers(item));
    } else if (typeof data === 'object' && data !== null) {
        const result: { [key: string]: any } = {};
        for (const key in data) {
            if (data.hasOwnProperty(key)) {
                result[key] = convertStringsToNumbers(data[key]);
            }
        }
        return result;
    } else if (typeof data === 'string') {
        const num = Number(data);
        return isNaN(num) ? data : num;
    } else {
        return data;
    }
}
```

### Explanation:
1. **Type Definitions**:
   - `Data` type is defined as either an object (`{ [key: string]: any }`) or an array (`any[]`).

2. **Function Definition**:
   - The function `convertStringsToNumbers` takes a parameter `data` of type `Data` and returns a value of type `Data`.

3. **Recursive Conversion**:
   - If `data` is an array, it maps over each item recursively calling `convertStringsToNumbers`.
   - If `data` is an object, it iterates over each property, converting nested values recursively.
   - If `data` is a string, it attempts to convert it to a number using `Number()`. If the conversion results in a valid number, it returns the number; otherwise, it returns the original string.
   - For other types (e.g., numbers, booleans), it simply returns the value as is.

This TypeScript code should behave similarly to your Python function, handling nested structures and converting strings to numbers where possible.