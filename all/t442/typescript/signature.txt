Certainly! Hereâ€™s the equivalent TypeScript code for the given Python function, including proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Convert strings in nested structures (e.g., dictionaries, arrays) to numbers (integers or floating-point numbers) as much as possible.
 *
 * @param data - The input data before conversion.
 * @returns The converted data.
 */
function convertStringsToNumbers(data: any): any {
    if (typeof data === 'object' && data !== null) {
        if (Array.isArray(data)) {
            return data.map(item => convertStringsToNumbers(item));
        } else {
            const result: Record<string, any> = {};
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    result[key] = convertStringsToNumbers(data[key]);
                }
            }
            return result;
        }
    } else if (typeof data === 'string') {
        try {
            // Try converting to float first, then to int if possible
            const num = parseFloat(data);
            if (!isNaN(num)) {
                if (data.includes('.')) {
                    return num;
                } else {
                    return parseInt(data, 10);
                }
            }
        } catch (error) {
            // Ignore the error and return the original string
        }
    }
    return data;  // Return data unchanged if it's not a string
}

// Example usage
const exampleData = {
    "a": "123",
    "b": ["456", "789.0"],
    "c": { "d": "1000" },
    "e": "hello"
};

console.log(convertStringsToNumbers(exampleData));
```

### Explanation:
1. **Function Signature**:
   - The function signature is defined with `any` types for the input and output parameters to handle various nested structures.
   - The JSDoc comment provides detailed documentation for the function, including the description, parameters, and return type.

2. **Type Checking**:
   - We use `typeof` to check if `data` is an object and not null.
   - We use `Array.isArray` to check if `data` is an array.

3. **Dictionary Handling**:
   - We iterate over the keys using a `for...in` loop and ensure that the property belongs to the object itself using `hasOwnProperty`.

4. **String Conversion**:
   - We attempt to parse the string as a float using `parseFloat`.
   - If the parsed number is not `NaN`, we further check if it contains a dot to decide whether to return a float or an integer.

5. **Error Handling**:
   - We catch any errors during parsing and return the original string if conversion fails.

This TypeScript code maintains the same functionality and logic as the Python code while adapting to TypeScript's syntax and type system, and includes appropriate JSDoc-style documentation comments.