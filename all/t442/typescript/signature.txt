Certainly! Here's the equivalent TypeScript code for the given Python function:

```typescript
import { isNumber } from "lodash";

/**
 * Converts strings in nested structures (e.g., dictionaries, arrays) to numbers (integers or floating-point numbers) as much as possible.
 *
 * @param {any} data - The data to be converted.
 * @returns {any} - The data after conversion.
 */
function convertStringsToNumbers(data: any): any {
    if (Array.isArray(data)) {
        return data.map(item => convertStringsToNumbers(item));
    } else if (typeof data === 'object' && data !== null) {
        const convertedObject: any = {};
        for (const key in data) {
            if (data.hasOwnProperty(key)) {
                convertedObject[key] = convertStringsToNumbers(data[key]);
            }
        }
        return convertedObject;
    } else if (typeof data === 'string') {
        const num = Number(data);
        if (!isNaN(num)) {
            return num;
        }
    }
    return data;
}

// Example usage
const exampleData = {
    a: "10",
    b: ["20", "30"],
    c: {
        d: "40"
    }
};

console.log(convertStringsToNumbers(exampleData));
```

### Explanation:
1. **Function Signature**: `convertStringsToNumbers(data: any): any`
   - The function takes a single argument `data` of type `any`.
   - It returns a value of type `any`.

2. **Documentation Comments**: The JSDoc-style comments provide details about the function, its parameters, and its return value.

3. **Implementation**:
   - The function checks if `data` is an array or an object.
   - If it's an array, it recursively maps over each item and calls itself on each item.
   - If it's an object, it iterates over each property and recursively calls itself on each value.
   - If it's a string, it attempts to convert it to a number using `Number`. If the conversion results in a non-NaN value, it returns the number; otherwise, it returns the original string.

This approach ensures that the TypeScript function maintains the same functionality as the Python function, converting strings to numbers where possible within nested structures.