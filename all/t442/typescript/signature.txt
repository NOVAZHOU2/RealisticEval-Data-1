Certainly! Below is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments:

```typescript
import { Dictionary, List } from "typescript";

/**
 * Convert strings in nested structures (e.g., dictionaries, arrays) to numbers (integers or floating-point numbers) as much as possible.
 *
 * @param data - The input data before conversion.
 * @returns The converted data.
 */
function convertStringsToNumbers(data: Dictionary<any> | List<any>): Dictionary<any> | List<any> {
    if (typeof data === 'object' && !Array.isArray(data) && data !== null) {
        return Object.entries(data).reduce((acc, [key, value]) => {
            acc[key] = convertStringsToNumbers(value);
            return acc;
        }, {} as Dictionary<any>);
    } else if (Array.isArray(data)) {
        return data.map(item => convertStringsToNumbers(item));
    } else if (typeof data === 'string') {
        try {
            // Try converting to float first, then to int if possible
            const num = parseFloat(data);
            if (!isNaN(num)) {
                if (data.includes('.')) {
                    return num;
                } else {
                    return parseInt(data, 10);
                }
            }
        } catch (error) {
            // Ignore error
        }
    }
    return data; // Return data unchanged if it's not a string
}

// Example usage
const exampleData = {
    name: "John",
    age: "30",
    height: "5.9",
    children: ["Alice", "Bob"],
    nested: {
        inner: "42"
    }
};

console.log(convertStringsToNumbers(exampleData));
```

### Explanation:
1. **Type Annotations**:
   - The TypeScript function signature uses `Dictionary<any>` and `List<any>` to represent dictionary and array types.
   - The return type is also annotated with `Dictionary<any> | List<any>` to match the input type.

2. **JSDoc Documentation Comments**:
   - The function is documented using JSDoc-style comments, which include a description, parameter details, and return type information.

3. **Type Checking and Conversion Logic**:
   - The function checks the type of `data` using `typeof` and `Array.isArray`.
   - It uses recursion to handle nested structures and applies the conversion logic for strings.

4. **Number Conversion**:
   - The function attempts to parse the string as a number using `parseFloat` and handles both floating-point and integer conversions based on the presence of a decimal point.

5. **Error Handling**:
   - Any errors during parsing are ignored, and the original string is returned unchanged.

### Import Statements:
- The `Dictionary` and `List` types are assumed to be imported from a hypothetical TypeScript library for demonstration purposes. In practice, you can use TypeScript's built-in types like `Record<string, any>` and `any[]` directly.

Here is the updated version without the hypothetical imports:

```typescript
/**
 * Convert strings in nested structures (e.g., dictionaries, arrays) to numbers (integers or floating-point numbers) as much as possible.
 *
 * @param data - The input data before conversion.
 * @returns The converted data.
 */
function convertStringsToNumbers(data: Record<string, any> | any[]): Record<string, any> | any[] {
    if (typeof data === 'object' && !Array.isArray(data) && data !== null) {
        return Object.entries(data).reduce((acc, [key, value]) => {
            acc[key] = convertStringsToNumbers(value);
            return acc;
        }, {} as Record<string, any>);
    } else if (Array.isArray(data)) {
        return data.map(item => convertStringsToNumbers(item));
    } else if (typeof data === 'string') {
        try {
            // Try converting to float first, then to int if possible
            const num = parseFloat(data);
            if (!isNaN(num)) {
                if (data.includes('.')) {
                    return num;
                } else {
                    return parseInt(data, 10);
                }
            }
        } catch (error) {
            // Ignore error
        }
    }
    return data; // Return data unchanged if it's not a string
}

// Example usage
const exampleData = {
    name: "John",
    age: "30",
    height: "5.9",
    children: ["Alice", "Bob"],
    nested: {
        inner: "42"
    }
};

console.log(convertStringsToNumbers(exampleData));
```

This TypeScript code preserves the functionality and structure of the original Python code while adhering to TypeScript's type system and documentation conventions.