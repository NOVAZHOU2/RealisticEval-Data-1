To convert the provided Python unittest test class into an equivalent test class using Catch2 in C++, we need to create a similar test structure and use appropriate assertions in Catch2. Below is the C++ code with the equivalent test class using Catch2.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_map_string.hpp>
#include <catch2/generators/catch_generators_all.hpp>

#include <string>
#include <vector>
#include <map>
#include <cassert>
#include <variant>

// Function to convert strings to numbers
std::variant<int, double> string_to_number(const std::string& str) {
    try {
        return std::stoi(str);
    } catch (const std::invalid_argument&) {
        // If stoi fails, try stod
        return std::stod(str);
    }
}

// Recursive function to convert strings to numbers in nested structures
void convert_strings_to_numbers_helper(const std::variant<std::map<std::string, std::variant<int, double>>, std::vector<std::variant<int, double>>>& input,
                                       std::variant<std::map<std::string, std::variant<int, double>>, std::vector<std::variant<int, double>>>& output) {
    if (auto* map = std::get_if<std::map<std::string, std::variant<int, double>>>(&input)) {
        auto& outputMap = std::get<std::map<std::string, std::variant<int, double>>>(output);
        for (auto& [key, value] : *map) {
            if (std::holds_alternative<std::string>(value)) {
                const std::string& strValue = std::get<std::string>(value);
                outputMap[key] = string_to_number(strValue);
            } else {
                outputMap[key] = value;
            }
        }
    } else if (auto* vec = std::get_if<std::vector<std::variant<int, double>>>(&input)) {
        auto& outputVec = std::get<std::vector<std::variant<int, double>>>(output);
        for (const auto& item : *vec) {
            if (std::holds_alternative<std::string>(item)) {
                const std::string& strItem = std::get<std::string>(item);
                outputVec.push_back(string_to_number(strItem));
            } else {
                outputVec.push_back(item);
            }
        }
    }
}

std::variant<std::map<std::string, std::variant<int, double>>, std::vector<std::variant<int, double>>> convert_strings_to_numbers(
    const std::variant<std::map<std::string, std::string>, std::vector<std::string>>& data) {
    std::variant<std::map<std::string, std::variant<int, double>>, std::vector<std::variant<int, double>>> output;

    if (auto* map = std::get_if<std::map<std::string, std::string>>(&data)) {
        auto& outputMap = std::get<std::map<std::string, std::variant<int, double>>>(output);
        for (const auto& [key, value] : *map) {
            outputMap[key] = string_to_number(value);
        }
    } else if (auto* vec = std::get_if<std::vector<std::string>>(&data)) {
        auto& outputVec = std::get<std::vector<std::variant<int, double>>>(output);
        for (const auto& item : *vec) {
            outputVec.push_back(string_to_number(item));
        }
    }

    convert_strings_to_numbers_helper(data, output);
    return output;
}

TEST_CASE("convert_strings_to_numbers") {
    SECTION("Convert dictionary with string values") {
        std::map<std::string, std::string> inputDict = {{"a", "1"}, {"b", "2.5"}, {"c", "hello"}};
        auto result = convert_strings_to_numbers(inputDict);
        REQUIRE(std::holds_alternative<std::map<std::string, std::variant<int, double>>>(result));

        auto& resultMap = std::get<std::map<std::string, std::variant<int, double>>>(result);
        REQUIRE(resultMap.size() == 3);
        REQUIRE(resultMap["a"] == 1);
        REQUIRE(resultMap["b"] == Approx(2.5));
        REQUIRE(std::holds_alternative<std::string>(resultMap["c"]));
        REQUIRE(std::get<std::string>(resultMap["c"]) == "hello");
    }

    SECTION("Convert list with string values") {
        std::vector<std::string> inputList = {"1", "2.5", "hello"};
        auto result = convert_strings_to_numbers(inputList);
        REQUIRE(std::holds_alternative<std::vector<std::variant<int, double>>>(result));

        auto& resultList = std::get<std::vector<std::variant<int, double>>>(result);
        REQUIRE(resultList.size() == 3);
        REQUIRE(resultList[0] == 1);
        REQUIRE(resultList[1] == Approx(2.5));
        REQUIRE(std::holds_alternative<std::string>(resultList[2]));
        REQUIRE(std::get<std::string>(resultList[2]) == "hello");
    }
}
```

### Explanation:
1. **string_to_number**: This function attempts to convert a string to either an integer or a floating-point number.
2. **convert_strings_to_numbers_helper**: This helper function recursively processes nested structures (maps and vectors) and applies `string_to_number` to string values.
3. **convert_strings_to_numbers**: This function takes a variant of a map or vector containing strings and converts them to numbers using the helper function.
4. **TEST_CASE**: The test case includes two sections, one for converting a dictionary and another for converting a list. Each section checks the correctness of the conversion using Catch2 assertions.