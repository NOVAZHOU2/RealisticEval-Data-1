Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. This will ensure that the functionality and logic of the tests are preserved, with appropriate assertions and adjustments for language differences between Python and C++.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the following headers and ensuring you have the Catch2 library available.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <vector>
#include <map>
#include <stdexcept>

// Helper function to check if a string contains a dot
bool containsDot(const std::string& s) {
    return s.find('.') != std::string::npos;
}

/**
 * Convert strings in nested structures (e.g., dictionaries, arrays) to numbers (integers or floating-point numbers) as much as possible.
 *
 * @param data The input data before conversion.
 * @return The converted data.
 */
template<typename T>
T convertStringsToNumbers(const T& data);

template<>
std::map<std::string, std::string> convertStringsToNumbers(const std::map<std::string, std::string>& data) {
    std::map<std::string, std::string> result;
    for (const auto& pair : data) {
        result[pair.first] = convertStringsToNumbers(pair.second);
    }
    return result;
}

template<>
std::vector<std::string> convertStringsToNumbers(const std::vector<std::string>& data) {
    std::vector<std::string> result;
    for (const auto& item : data) {
        result.push_back(convertStringsToNumbers(item));
    }
    return result;
}

template<>
std::string convertStringsToNumbers(const std::string& data) {
    try {
        if (containsDot(data)) {
            return std::to_string(std::stof(data));
        } else {
            return std::to_string(std::stoi(data));
        }
    } catch (const std::invalid_argument& ia) {
        // Conversion failed, return the original string
        return data;
    } catch (const std::out_of_range& oor) {
        // Conversion failed due to out of range, return the original string
        return data;
    }
}

// Non-string types are returned unchanged
template<typename T>
T convertStringsToNumbers(const T& data) {
    return data;
}

TEST_CASE("TestConvertStringsToNumbers") {
    SECTION("test_flat_dict") {
        std::map<std::string, std::string> data = {
            {"a", "1"}, {"b", "2.5"}, {"c", "not a number"}
        };
        std::map<std::string, std::string> expected = {
            {"a", "1"}, {"b", "2.5"}, {"c", "not a number"}
        };
        REQUIRE(convertStringsToNumbers(data) == expected);
    }

    SECTION("test_nested_dict") {
        std::map<std::string, std::map<std::string, std::string>> nestedData = {
            {"x", {{"y", "10"}, {"z", "3.14"}}},
            {"w", "20.0"}
        };
        std::map<std::string, std::map<std::string, std::string>> expected = {
            {"x", {{"y", "10"}, {"z", "3.14"}}},
            {"w", "20.0"}
        };
        REQUIRE(convertStringsToNumbers(nestedData) == expected);
    }

    SECTION("test_list_of_strings") {
        std::vector<std::string> data = {"1", "2.5", "3", "invalid"};
        std::vector<std::string> expected = {"1", "2.5", "3", "invalid"};
        REQUIRE(convertStringsToNumbers(data) == expected);
    }

    SECTION("test_mixed_structure") {
        std::map<std::string, std::variant<std::vector<std::string>, std::map<std::string, std::string>>> mixedData = {
            {"numbers", std::vector<std::string>{"1", "2.0", "3"}},
            {"more_numbers", std::map<std::string, std::string>{{"num", "4"}, "5"}}
        };
        std::map<std::string, std::variant<std::vector<std::string>, std::map<std::string, std::string>>> expected = {
            {"numbers", std::vector<std::string>{"1", "2.0", "3"}},
            {"more_numbers", std::map<std::string, std::string>{{"num", "4"}, "5"}}
        };
        REQUIRE(convertStringsToNumbers(mixedData) == expected);
    }

    SECTION("test_empty_structure") {
        std::map<std::string, std::string> data = {};
        std::map<std::string, std::string> expected = {};
        REQUIRE(convertStringsToNumbers(data) == expected);
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Catch2 Headers**: Include the necessary Catch2 headers.
2. **Helper Function**: The `containsDot` function checks if a string contains a dot.
3. **Template Specialization**: The `convertStringsToNumbers` function uses template specialization to handle different types (`std::map`, `std::vector`, and `std::string`).
4. **Conversion Logic**:
   - For `std::map`, it recursively converts each value.
   - For `std::vector`, it recursively converts each element.
   - For `std::string`, it attempts to convert to `float` or `int` using `std::stof` and `std::stoi`. If the conversion fails, it returns the original string.
5. **Non-String Types**: For non-string types, the function simply returns the input unchanged.
6. **Test Cases**:
   - Each test case is defined within a `SECTION` in the `TEST_CASE` macro.
   - Assertions are made using `REQUIRE` to ensure the expected results match the actual results.

This approach ensures that the functionality and logic of the Python tests are preserved while adapting to C++ syntax and features using the Catch2 testing framework.