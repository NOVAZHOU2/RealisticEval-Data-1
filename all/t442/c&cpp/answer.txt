Hereâ€™s the equivalent C++ code that replicates the functionality of the provided Python code. This C++ code includes handling dictionaries (mapped structures using `std::map`), lists (using `std::vector`), and strings (using `std::string`). It also includes error handling for conversion failures.

```cpp
#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <sstream>

// Helper function to check if a string contains a dot
bool containsDot(const std::string& str) {
    return str.find('.') != std::string::npos;
}

// Function to attempt conversion of a string to a number
template<typename T>
T stringToNumber(const std::string& str) {
    std::istringstream iss(str);
    T number;
    iss >> number;
    if (iss.fail() || !iss.eof()) {
        throw std::invalid_argument("Conversion failed");
    }
    return number;
}

// Main recursive function to convert strings to numbers
std::variant<std::string, int, double> convertStringsToNumbers(const std::variant<std::string, int, double, std::map<std::string, std::variant<std::string, int, double>>, std::vector<std::variant<std::string, int, double>>>& data) {
    if (std::holds_alternative<std::map<std::string, std::variant<std::string, int, double>>>(data)) {
        auto map = std::get<std::map<std::string, std::variant<std::string, int, double>>>(data);
        std::map<std::string, std::variant<std::string, int, double>> newMap;
        for (const auto& [key, value] : map) {
            newMap[key] = convertStringsToNumbers(value);
        }
        return newMap;
    } else if (std::holds_alternative<std::vector<std::variant<std::string, int, double>>>(data)) {
        auto vec = std::get<std::vector<std::variant<std::string, int, double>>>(data);
        std::vector<std::variant<std::string, int, double>> newVec;
        for (const auto& item : vec) {
            newVec.push_back(convertStringsToNumbers(item));
        }
        return newVec;
    } else if (std::holds_alternative<std::string>(data)) {
        std::string str = std::get<std::string>(data);
        try {
            if (containsDot(str)) {
                return stringToNumber<double>(str);
            } else {
                return stringToNumber<int>(str);
            }
        } catch (const std::invalid_argument&) {
            return str; // Return original string if conversion fails
        }
    } else {
        return data; // Return data unchanged if it's not a string
    }
}

int main() {
    // Example usage
    std::map<std::string, std::variant<std::string, int, double>> exampleData = {
        {"a", "123"},
        {"b", "456.789"},
        {"c", "not_a_number"}
    };

    auto convertedData = convertStringsToNumbers(exampleData);

    // Print the result
    if (std::holds_alternative<std::map<std::string, std::variant<std::string, int, double>>>(convertedData)) {
        auto map = std::get<std::map<std::string, std::variant<std::string, int, double>>>(convertedData);
        for (const auto& [key, value] : map) {
            std::cout << key << ": ";
            if (std::holds_alternative<int>(value)) {
                std::cout << std::get<int>(value);
            } else if (std::holds_alternative<double>(value)) {
                std::cout << std::get<double>(value);
            } else if (std::holds_alternative<std::string>(value)) {
                std::cout << std::get<std::string>(value);
            }
            std::cout << std::endl;
        }
    }

    return 0;
}
```

### Explanation:
1. **Helper Function**: The `containsDot` function checks if a string contains a dot.
2. **Template Function**: The `stringToNumber` template function attempts to convert a string to either an integer or a floating-point number, throwing an exception if the conversion fails.
3. **Main Recursive Function**: The `convertStringsToNumbers` function handles the conversion recursively for maps, vectors, and individual strings. It uses `std::variant` to represent the different types that can be stored.
4. **Example Usage**: The `main` function demonstrates how to use the `convertStringsToNumbers` function with an example map.