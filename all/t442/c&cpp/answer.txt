Hereâ€™s the equivalent C++ code that maintains the functionality of the provided Python script, including the handling of dictionaries (mapped to `std::map`), lists (mapped to `std::vector`), and strings:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <stdexcept>

// Helper function to check if a string contains a dot
bool containsDot(const std::string& s) {
    return s.find('.') != std::string::npos;
}

// Function to convert strings to numbers
template<typename T>
T convertStringsToNumbers(const T& data);

template<>
std::map<std::string, std::string> convertStringsToNumbers(const std::map<std::string, std::string>& data) {
    std::map<std::string, std::string> result;
    for (const auto& pair : data) {
        result[pair.first] = convertStringsToNumbers(pair.second);
    }
    return result;
}

template<>
std::vector<std::string> convertStringsToNumbers(const std::vector<std::string>& data) {
    std::vector<std::string> result;
    for (const auto& item : data) {
        result.push_back(convertStringsToNumbers(item));
    }
    return result;
}

template<>
std::string convertStringsToNumbers(const std::string& data) {
    try {
        if (containsDot(data)) {
            return std::to_string(std::stof(data));
        } else {
            return std::to_string(std::stoi(data));
        }
    } catch (const std::invalid_argument& ia) {
        // Conversion failed, return the original string
        return data;
    } catch (const std::out_of_range& oor) {
        // Conversion failed due to out of range, return the original string
        return data;
    }
}

// Non-string types are returned unchanged
template<typename T>
T convertStringsToNumbers(const T& data) {
    return data;
}

int main() {
    // Example usage
    std::map<std::string, std::string> exampleMap = {
        {"a", "10"},
        {"b", "20.5"},
        {"c", "hello"}
    };

    std::vector<std::string> exampleVector = {"30", "40.7", "world"};

    auto convertedMap = convertStringsToNumbers(exampleMap);
    auto convertedVector = convertStringsToNumbers(exampleVector);

    // Print the results
    for (const auto& pair : convertedMap) {
        std::cout << pair.first << ": " << pair.second << std::endl;
    }

    for (const auto& item : convertedVector) {
        std::cout << item << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Helper Function**: The `containsDot` function checks if a string contains a dot, which helps determine whether to convert to `float` or `int`.
2. **Template Specialization**: The `convertStringsToNumbers` function uses template specialization to handle different types (`std::map`, `std::vector`, and `std::string`).
3. **Conversion Logic**: For strings, it attempts to convert to `float` or `int` using `std::stof` and `std::stoi`. If the conversion fails, it returns the original string.
4. **Non-String Types**: For non-string types, the function simply returns the input unchanged.

This approach ensures that the logic and functionality of the Python code are preserved while adapting to C++ syntax and features.