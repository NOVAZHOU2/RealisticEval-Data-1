Certainly! Below is the equivalent JavaScript code with the function signature and JSDoc comments:

```javascript
/**
 * Convert strings in nested structures (e.g., dictionaries, arrays) to numbers (integers or floating-point numbers) as much as possible.
 *
 * @param {Object|Array} data - The input data before conversion.
 * @returns {Object|Array} - The converted data.
 */
function convertStringsToNumbers(data) {
    if (typeof data === 'object' && data !== null) {
        if (Array.isArray(data)) {
            return data.map(item => convertStringsToNumbers(item));
        } else {
            const result = {};
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    result[key] = convertStringsToNumbers(data[key]);
                }
            }
            return result;
        }
    } else if (typeof data === 'string') {
        try {
            // Try converting to float first, then to int if possible
            const num = parseFloat(data);
            if (!isNaN(num)) {
                if (data.includes('.')) {
                    return num;
                } else {
                    return parseInt(data, 10);
                }
            }
        } catch (error) {
            // Ignore the error and return the original string
        }
    }
    return data;  // Return data unchanged if it's not a string
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block provides a detailed description of the function, including the parameters and return types.
   - The `@param` tag specifies the parameter type and description.
   - The `@returns` tag specifies the return type and description.

2. **Function Signature**:
   - The function name `convertStringsToNumbers` is preserved.
   - The parameter `data` is annotated with the types `Object` and `Array` to indicate that it can be either a dictionary (object) or an array.

3. **Implementation**:
   - The logic remains the same as in the Python version, handling objects, arrays, and strings appropriately.
   - The `parseFloat` and `parseInt` functions are used to convert strings to numbers, with appropriate checks for validity and presence of decimal points.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JavaScript documentation standards using JSDoc.