Certainly! Below is the equivalent JavaScript code that matches the functionality, logic, and structure of the provided Python code:

```javascript
function convertStringsToNumbers(data) {
    if (typeof data === 'object' && data !== null) {
        if (Array.isArray(data)) {
            // Handle array case
            return data.map(item => convertStringsToNumbers(item));
        } else if (data.constructor === Object) {
            // Handle object/dictionary case
            const result = {};
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    result[key] = convertStringsToNumbers(data[key]);
                }
            }
            return result;
        }
    } else if (typeof data === 'string') {
        try {
            // Try converting to float first, then to int if possible
            const num = parseFloat(data);
            if (!isNaN(num)) {
                if (data.includes('.')) {
                    return num;
                } else {
                    return parseInt(data, 10);
                }
            }
        } catch (error) {
            // Return original string if conversion fails
        }
    }
    // Return data unchanged if it's not a string or object
    return data;
}
```

### Explanation:

1. **Object and Array Handling:**
   - The `typeof` operator checks if `data` is an object.
   - `Array.isArray(data)` checks if `data` is an array.
   - If `data` is an object (dictionary), we iterate over its keys using a `for...in` loop and recursively apply the function.

2. **String Conversion:**
   - If `data` is a string, we attempt to parse it as a number using `parseFloat`.
   - We check if the parsed number is valid (`!isNaN(num)`).
   - If the string contains a dot (`.`), we return the float; otherwise, we return the integer.

3. **Error Handling:**
   - If parsing fails, the original string is returned.

4. **Returning Unchanged Data:**
   - If `data` is neither a string nor an object, it is returned unchanged.