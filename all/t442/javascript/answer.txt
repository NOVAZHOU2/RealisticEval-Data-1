Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function convertStringsToNumbers(data) {
    if (typeof data === 'object' && data !== null) {
        if (Array.isArray(data)) {
            return data.map(item => convertStringsToNumbers(item));
        } else {
            const result = {};
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    result[key] = convertStringsToNumbers(data[key]);
                }
            }
            return result;
        }
    } else if (typeof data === 'string') {
        try {
            // Try converting to float first, then to int if possible
            const num = parseFloat(data);
            if (!isNaN(num)) {
                if (data.includes('.')) {
                    return num;
                } else {
                    return parseInt(data, 10);
                }
            }
        } catch (error) {
            // Ignore the error and return the original string
        }
    }
    return data;  // Return data unchanged if it's not a string
}
```

### Explanation:
1. **Object Type Check**: 
   - In JavaScript, we use `typeof` to check the type of an object.
   - We also need to check if the object is `null` using `data !== null`.

2. **Array Check**:
   - Use `Array.isArray()` to determine if the data is an array.

3. **String Conversion**:
   - Use `parseFloat()` to attempt to convert the string to a floating-point number.
   - If the conversion is successful (`!isNaN(num)`), further check if the string contains a dot to decide whether to return a float or an integer.

4. **Error Handling**:
   - The `try-catch` block is used to handle any potential errors during conversion. However, since `parseFloat()` does not throw an exception for invalid inputs, we simply check if the result is `NaN`.

5. **Return Original Data**:
   - If the conversion fails, the original string is returned.

This JavaScript function should behave identically to the given Python function.