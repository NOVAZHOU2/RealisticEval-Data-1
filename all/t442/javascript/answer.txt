Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function convertStringsToNumbers(data) {
    if (typeof data === 'object' && data !== null) {
        if (Array.isArray(data)) {
            return data.map(item => convertStringsToNumbers(item));
        } else {
            const result = {};
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    result[key] = convertStringsToNumbers(data[key]);
                }
            }
            return result;
        }
    } else if (typeof data === 'string') {
        try {
            // Try converting to float first, then to int if possible
            const num = parseFloat(data);
            if (!isNaN(num)) {
                if (data.includes('.')) {
                    return num;
                } else {
                    return parseInt(data, 10);
                }
            }
        } catch (error) {
            // Do nothing; return the original string
        }
    }
    return data;  // Return data unchanged if it's not a string
}
```

### Explanation:

1. **Type Checking:**
   - `typeof data === 'object'` checks if `data` is an object.
   - `data !== null` ensures we're not dealing with `null`.

2. **Array Handling:**
   - `Array.isArray(data)` checks if `data` is an array.
   - If it's an array, we map over each element and recursively call `convertStringsToNumbers`.

3. **Object Handling:**
   - If it's an object, we iterate over each key-value pair using a `for...in` loop.
   - We use `hasOwnProperty` to ensure we only process own properties.

4. **String Conversion:**
   - We attempt to parse the string to a number using `parseFloat`.
   - If parsing succeeds (`!isNaN(num)`), we check if the string contains a dot.
   - If it does, we return the float. Otherwise, we return the integer.

5. **Returning Original Data:**
   - If the conversion fails or if `data` is not a string, we return the original `data`.

This JavaScript function mirrors the behavior of the given Python function closely.