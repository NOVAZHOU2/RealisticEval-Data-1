Certainly! Below is the equivalent JavaScript code using Jest for testing the `convertStringsToNumbers` function. I will include the function definition and the Jest test suite to ensure that the functionality and logic of the tests are maintained.

### JavaScript Function Definition

First, let's define the `convertStringsToNumbers` function in JavaScript:

```javascript
/**
 * Convert strings in nested structures (e.g., dictionaries, arrays) to numbers (integers or floating-point numbers) as much as possible.
 *
 * @param {Object|Array} data - The input data before conversion.
 * @returns {Object|Array} - The converted data after processing.
 */
function convertStringsToNumbers(data) {
    if (typeof data === 'object' && data !== null) {
        if (Array.isArray(data)) {
            // Handle array case
            return data.map(item => convertStringsToNumbers(item));
        } else if (data.constructor === Object) {
            // Handle object/dictionary case
            const result = {};
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    result[key] = convertStringsToNumbers(data[key]);
                }
            }
            return result;
        }
    } else if (typeof data === 'string') {
        try {
            // Try converting to float first, then to int if possible
            const num = parseFloat(data);
            if (!isNaN(num)) {
                if (data.includes('.')) {
                    return num;
                } else {
                    return parseInt(data, 10);
                }
            }
        } catch (error) {
            // Return original string if conversion fails
        }
    }
    // Return data unchanged if it's not a string or object
    return data;
}
```

### Jest Test Suite

Next, let's write the Jest test suite to ensure the function works correctly:

```javascript
describe('convertStringsToNumbers', () => {
    it('should handle empty objects and arrays', () => {
        expect(convertStringsToNumbers({})).toEqual({});
        expect(convertStringsToNumbers([])).toEqual([]);
    });

    it('should handle nested objects and arrays', () => {
        const nestedData = {
            a: '1',
            b: ['2', '3'],
            c: {
                d: '4',
                e: '5.5'
            }
        };
        const expectedResult = {
            a: 1,
            b: [2, 3],
            c: {
                d: 4,
                e: 5.5
            }
        };
        expect(convertStringsToNumbers(nestedData)).toEqual(expectedResult);
    });

    it('should handle mixed types', () => {
        const mixedData = {
            a: 'hello',
            b: ['1', '2.5', 'three'],
            c: {
                d: '4',
                e: '5.5',
                f: true
            }
        };
        const expectedResult = {
            a: 'hello',
            b: [1, 2.5, 'three'],
            c: {
                d: 4,
                e: 5.5,
                f: true
            }
        };
        expect(convertStringsToNumbers(mixedData)).toEqual(expectedResult);
    });

    it('should handle deeply nested structures', () => {
        const deepData = {
            a: '1',
            b: [
                '2',
                { c: '3', d: ['4', '5.5'] },
                [6, '7.7']
            ]
        };
        const expectedResult = {
            a: 1,
            b: [
                2,
                { c: 3, d: [4, 5.5] },
                [6, 7.7]
            ]
        };
        expect(convertStringsToNumbers(deepData)).toEqual(expectedResult);
    });

    it('should handle non-string values', () => {
        const nonStringData = {
            a: 1,
            b: [2, 3],
            c: {
                d: 4,
                e: 5.5
            }
        };
        expect(convertStringsToNumbers(nonStringData)).toEqual(nonStringData);
    });
});
```

### Explanation:

1. **Function Definition:**
   - The `convertStringsToNumbers` function is defined in JavaScript with JSDoc comments for clarity.

2. **Jest Test Suite:**
   - The `describe` block groups all the tests related to the `convertStringsToNumbers` function.
   - Each `it` block represents a specific test case.
   - `expect` is used to assert the expected outcomes of the function calls.

3. **Test Cases:**
   - **Empty Objects and Arrays:** Tests whether the function correctly handles empty objects and arrays.
   - **Nested Objects and Arrays:** Tests whether the function correctly converts nested objects and arrays.
   - **Mixed Types:** Tests whether the function correctly handles mixed types, including non-convertible strings.
   - **Deeply Nested Structures:** Tests whether the function correctly handles deeply nested structures.
   - **Non-String Values:** Tests whether the function correctly handles non-string values without modification.

This setup ensures that the functionality and logic of the tests are preserved, and the structure is clear and follows Jest conventions.