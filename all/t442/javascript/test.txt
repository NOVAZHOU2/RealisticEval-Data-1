Sure, let's start by converting the provided Python function into JavaScript and then create a Jest test suite for it.

First, we'll define the JavaScript version of the `convert_strings_to_numbers` function:

```javascript
function convertStringsToNumbers(data) {
    if (Array.isArray(data)) {
        return data.map(item => convertStringsToNumbers(item));
    } else if (typeof data === 'object' && data !== null) {
        const result = {};
        for (const key in data) {
            if (data.hasOwnProperty(key)) {
                result[key] = convertStringsToNumbers(data[key]);
            }
        }
        return result;
    } else if (typeof data === 'string') {
        const num = Number(data);
        return isNaN(num) ? data : num;
    }
    return data;
}
```

Now, let's write a Jest test suite for this function:

```javascript
describe('convertStringsToNumbers', () => {
    it('should handle simple string values', () => {
        expect(convertStringsToNumbers("123")).toBe(123);
        expect(convertStringsToNumbers("456.789")).toBe(456.789);
        expect(convertStringsToNumbers("abc")).toBe("abc");
    });

    it('should handle nested arrays', () => {
        expect(convertStringsToNumbers(["123", "456", "abc"])).toEqual([123, 456, "abc"]);
        expect(convertStringsToNumbers(["123.456", ["789", "0.123"], "xyz"])).toEqual([123.456, [789, 0.123], "xyz"]);
    });

    it('should handle nested objects', () => {
        expect(convertStringsToNumbers({
            a: "123",
            b: "456.789",
            c: "abc"
        })).toEqual({
            a: 123,
            b: 456.789,
            c: "abc"
        });

        expect(convertStringsToNumbers({
            a: { x: "123" },
            b: ["456.789", "abc"],
            c: "xyz"
        })).toEqual({
            a: { x: 123 },
            b: [456.789, "abc"],
            c: "xyz"
        });
    });

    it('should handle mixed structures', () => {
        expect(convertStringsToNumbers({
            a: ["123", "456"],
            b: { x: "789", y: "123.456" },
            c: "abc"
        })).toEqual({
            a: [123, 456],
            b: { x: 789, y: 123.456 },
            c: "abc"
        });
    });
});
```

### Explanation:
1. **Function Definition**:
   - The `convertStringsToNumbers` function checks the type of the input and recursively converts any string values to numbers where possible.
   - It handles arrays and objects recursively.

2. **Test Suite**:
   - **Simple String Values**: Tests that single string values are correctly converted to numbers when possible.
   - **Nested Arrays**: Tests that arrays with nested structures are correctly processed.
   - **Nested Objects**: Tests that objects with nested structures are correctly processed.
   - **Mixed Structures**: Tests that mixed structures (arrays within objects, etc.) are correctly processed.

3. **Assertions**:
   - `expect` is used to make assertions.
   - `toBe` is used for simple value comparisons.
   - `toEqual` is used for deep object/array comparisons.

This Jest test suite ensures that the functionality of the `convertStringsToNumbers` function is thoroughly tested and covers various scenarios.