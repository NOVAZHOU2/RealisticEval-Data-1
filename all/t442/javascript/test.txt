Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will convert each test case and ensure that the functionality and logic are maintained.

### Python Code:
```python
import unittest

class TestConvertStringsToNumbers(unittest.TestCase):

    def test_flat_dict(self):
        data = {'a': '1', 'b': '2.5', 'c': 'not a number'}
        expected = {'a': 1, 'b': 2.5, 'c': 'not a number'}
        self.assertEqual(convert_strings_to_numbers(data), expected)

    def test_nested_dict(self):
        data = {'x': {'y': '10', 'z': '3.14'}, 'w': '20.0'}
        expected = {'x': {'y': 10, 'z': 3.14}, 'w': 20.0}
        self.assertEqual(convert_strings_to_numbers(data), expected)

    def test_list_of_strings(self):
        data = ['1', '2.5', '3', 'invalid']
        expected = [1, 2.5, 3, 'invalid']
        self.assertEqual(convert_strings_to_numbers(data), expected)

    def test_mixed_structure(self):
        data = {'numbers': ['1', '2.0', 3], 'more_numbers': [{'num': '4'}, '5']}
        expected = {'numbers': [1, 2.0, 3], 'more_numbers': [{'num': 4}, 5]}
        self.assertEqual(convert_strings_to_numbers(data), expected)

    def test_empty_structure(self):
        data = {}
        expected = {}
        self.assertEqual(convert_strings_to_numbers(data), expected)
```

### Equivalent Jest Test Suite:
```javascript
const convertStringsToNumbers = require('./convertStringsToNumbers'); // Import the function to be tested

describe('TestConvertStringsToNumbers', () => {
    describe('test_flat_dict', () => {
        it('should correctly convert flat dictionary', () => {
            const data = {'a': '1', 'b': '2.5', 'c': 'not a number'};
            const expected = {'a': 1, 'b': 2.5, 'c': 'not a number'};
            expect(convertStringsToNumbers(data)).toEqual(expected);
        });
    });

    describe('test_nested_dict', () => {
        it('should correctly convert nested dictionary', () => {
            const data = {'x': {'y': '10', 'z': '3.14'}, 'w': '20.0'};
            const expected = {'x': {'y': 10, 'z': 3.14}, 'w': 20.0};
            expect(convertStringsToNumbers(data)).toEqual(expected);
        });
    });

    describe('test_list_of_strings', () => {
        it('should correctly convert list of strings', () => {
            const data = ['1', '2.5', '3', 'invalid'];
            const expected = [1, 2.5, 3, 'invalid'];
            expect(convertStringsToNumbers(data)).toEqual(expected);
        });
    });

    describe('test_mixed_structure', () => {
        it('should correctly convert mixed structure', () => {
            const data = {'numbers': ['1', '2.0', 3], 'more_numbers': [{'num': '4'}, '5']};
            const expected = {'numbers': [1, 2.0, 3], 'more_numbers': [{'num': 4}, 5]};
            expect(convertStringsToNumbers(data)).toEqual(expected);
        });
    });

    describe('test_empty_structure', () => {
        it('should correctly handle empty structure', () => {
            const data = {};
            const expected = {};
            expect(convertStringsToNumbers(data)).toEqual(expected);
        });
    });
});
```

### Explanation:
1. **Import Function**:
   - The `convertStringsToNumbers` function is imported at the beginning of the test file.

2. **Describe Blocks**:
   - Each test case is wrapped in a `describe` block to provide a clear structure and grouping of related tests.

3. **It Blocks**:
   - Each test case is defined using an `it` block, which describes the behavior being tested.

4. **Assertions**:
   - The `expect` function is used with `toEqual` to assert deep equality between the actual and expected results.

5. **Data and Expected Results**:
   - The test data and expected results are defined similarly to the Python version.

6. **Structure**:
   - The structure of the tests is kept clear and organized, making it easy to understand and maintain.

This Jest test suite ensures that the functionality and logic of the Python unittest class are preserved and accurately tested in JavaScript.