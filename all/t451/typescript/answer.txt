Sure! Hereâ€™s the equivalent TypeScript code, including the necessary package imports and type definitions:

First, you'll need to install the `jimp` package, which is a popular library for image processing in Node.js, as there isn't a direct equivalent to `PIL` in TypeScript/JavaScript. You can install it using npm or yarn:

```sh
npm install jimp
```

Now, here is the TypeScript code:

```typescript
import Jimp from 'jimp';

/**
 * Converts an image to a binary representation.
 *
 * @param {string} imagePath - The file path of the image to convert.
 * @returns {Promise<number[]>} A promise that resolves to a list of bits representing the image,
 *                              where 1 is for white pixels and 0 is for black pixels.
 */
async function convertImageToBits(imagePath: string): Promise<number[]> {
  const image = await Jimp.read(imagePath);
  image.grayscale();
  image.threshold(128);

  const width = image.bitmap.width;
  const height = image.bitmap.height;

  const bitsArray: number[] = [];

  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      const pixel = image.getPixelColor(x, y);
      const bit = Jimp.intToRGBA(pixel).r === 255 ? 1 : 0;
      bitsArray.push(bit);
    }
  }

  return bitsArray;
}

// Example usage
(async () => {
  try {
    const bits = await convertImageToBits('path/to/image.jpg');
    console.log(bits);
  } catch (error) {
    console.error('Error converting image:', error);
  }
})();
```

### Explanation:

1. **Importing Jimp**: We use the `Jimp` library for image manipulation.
2. **Function Definition**: The `convertImageToBits` function is defined with the correct type signatures.
3. **Loading the Image**: We use `Jimp.read` to load the image synchronously.
4. **Converting to Grayscale and Thresholding**: We first convert the image to grayscale and then apply a threshold to get a binary image.
5. **Iterating Over Pixels**: We iterate over each pixel and extract the red channel value (which is the same for all channels in a grayscale image).
6. **Appending Bits**: We append either 1 or 0 based on the pixel value.
7. **Example Usage**: An example usage is provided at the end to demonstrate how to call the function asynchronously.

This TypeScript code maintains the same functionality as the original Python code but adapts it to work with TypeScript and the `Jimp` library.