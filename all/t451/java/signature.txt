Certainly! Below is the equivalent Java code for the given Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Converts an image to a binary representation.
 * Each pixel is represented by only 1 bit, with a white pixel value of 255 and a black pixel value of 0.
 */
public class Answer {

    /**
     * Converts an image to a binary representation.
     *
     * @param imagePath The file path of the image to convert.
     * @return A list of bits representing the image, where 1 is for white pixels and 0 is for black pixels.
     */
    public static List<Integer> convertImageToBits(String imagePath) {
        BufferedImage image;
        try {
            image = ImageIO.read(new File(imagePath));
        } catch (IOException e) {
            System.err.println("Error reading the image file: " + imagePath);
            return new ArrayList<>();
        }

        image = convertToBinary(image);

        int width = image.getWidth();
        int height = image.getHeight();

        List<Integer> bitsArray = new ArrayList<>();

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int pixel = image.getRGB(x, y);
                int bit = (pixel == -1) ? 0 : 1; // -1 represents black, other values represent white
                bitsArray.add(bit);
            }
        }

        return bitsArray;
    }

    /**
     * Converts an image to a binary format.
     *
     * @param image The original image.
     * @return A binary image.
     */
    private static BufferedImage convertToBinary(BufferedImage image) {
        BufferedImage binaryImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_BYTE_BINARY);
        binaryImage.getGraphics().drawImage(image, 0, 0, null);
        return binaryImage;
    }

    public static void main(String[] args) {
        String imagePath = "path/to/your/image.jpg";
        List<Integer> bitsArray = convertImageToBits(imagePath);
        System.out.println(bitsArray);
    }
}
```

### Explanation:
1. **Package Declaration**:
   - `package org.real.temp;`: Declares the package name.

2. **Imports**:
   - `javax.imageio.ImageIO`: Used for reading images.
   - `java.awt.image.BufferedImage`: Represents an image with an associated color model.
   - `java.io.File`: Used to handle file paths.
   - `java.io.IOException`: Thrown when there is an issue reading the image file.
   - `java.util.ArrayList`: Used to store the bits array.
   - `java.util.List`: Interface for the bits array.

3. **Class Definition**:
   - `public class Answer`: Defines the class `Answer`.

4. **Javadoc Comments**:
   - The Javadoc comments provide detailed documentation for the methods and parameters.

5. **Method `convertImageToBits`**:
   - Reads the image using `ImageIO.read`.
   - Converts the image to a binary format using `convertToBinary`.
   - Iterates over each pixel, converting it to a bit (1 for white, 0 for black), and adds it to the `bitsArray`.

6. **Helper Method `convertToBinary`**:
   - Creates a new binary image using `BufferedImage.TYPE_BYTE_BINARY`.
   - Draws the original image onto the binary image.

7. **Main Method**:
   - Demonstrates how to call `convertImageToBits` and prints the resulting bits array.

This Java code preserves the original functionality and structure of the Python code while adhering to Java conventions and providing clear documentation through Javadoc comments.