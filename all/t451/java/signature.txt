Sure! Here's how you can translate the Python function signature into Java:

```java
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

/**
 * Converts an image to a binary representation. Convert the image to black and white mode,
 * that is, each pixel is represented by only 1 bit, with a white pixel value of 255 and a black
 * pixel value of 0.
 *
 * @param imagePath The file path of the image to convert.
 * @return A list of bits representing the image, where 1 is for white pixels and 0 is for black pixels.
 */
public List<Integer> convertImageToBits(String imagePath) {
    // Function implementation will go here.
}
```

### Explanation:
- **Annotations**: Java uses annotations like `@param` and `@return` to document method parameters and return values. In this case, I've used Javadoc-style comments (`/** ... */`) to provide documentation for the method.
- **Data Types**:
  - `String`: Used for the file path.
  - `List<Integer>`: Represents the list of bits.
- **Method Signature**: The method `convertImageToBits` takes a single parameter `imagePath` of type `String` and returns a `List<Integer>`.

This Java method signature should be placed in a class, and you'll need to implement the actual logic inside the method body to handle the conversion from an image to a binary representation.