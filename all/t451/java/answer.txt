Certainly! Below is the Java code equivalent to the provided Python script. The Java code will be organized within the `org.real.temp` package and the `Answer` class. It uses the `java.awt.image.BufferedImage` class to load and process the image.

```java
package org.real.temp;

import javax.imageio.ImageIO;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class Answer {

    /**
     * Converts an image to a binary representation.
     *
     * @param imageFilePath The file path of the image to convert.
     * @return A list of bits representing the image, where 1 is for white pixels
     *         and 0 is for black pixels.
     */
    public static List<Integer> convertImageToBits(String imageFilePath) {
        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(imageFilePath));
        } catch (IOException e) {
            System.err.println("Error reading the image file: " + imageFilePath);
            return new ArrayList<>();
        }

        // Convert the image to a binary format
        int width = image.getWidth();
        int height = image.getHeight();

        List<Integer> bitsArray = new ArrayList<>();

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                Color pixelColor = new Color(image.getRGB(x, y));
                int grayValue = (pixelColor.getRed() + pixelColor.getGreen() + pixelColor.getBlue()) / 3;
                int threshold = 128; // Adjust this value as needed
                int bit = grayValue > threshold ? 1 : 0;
                bitsArray.add(bit);
            }
        }

        return bitsArray;
    }

    public static void main(String[] args) {
        String imagePath = "path/to/your/image.jpg";
        List<Integer> bits = convertImageToBits(imagePath);
        System.out.println(bits);
    }
}
```

### Explanation:
1. **Package and Class Definition**: The Java code is organized under the `org.real.temp` package with the class name `Answer`.
2. **Import Statements**: The necessary imports are added for handling images (`BufferedImage`, `ImageIO`) and exceptions (`IOException`).
3. **Method Definition**: The `convertImageToBits` method takes the path to an image file as input and returns a list of integers representing the binary representation of the image.
4. **Reading the Image**: The method reads the image using `ImageIO.read` and handles any potential `IOException`.
5. **Converting to Binary Representation**: The method converts each pixel to a grayscale value and then to a binary value based on a threshold.
6. **Main Method**: A simple `main` method is included to demonstrate how to call the `convertImageToBits` method and print the result.

This Java code mirrors the functionality of the original Python script while adhering to Java's syntax and conventions.