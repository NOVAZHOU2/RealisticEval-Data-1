Certainly! Here is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import os
import unittest
from PIL import Image

class TestConvertImageToBits(unittest.TestCase):

    def setUp(self):
        """Create test images before each test."""
        # Create a white image (all pixels white)
        self.white_image_path = 'white_image.bmp'
        white_image = Image.new('1', (2, 2), color=1)  # 1 is for white
        white_image.save(self.white_image_path)

        # Create a black image (all pixels black)
        self.black_image_path = 'black_image.bmp'
        black_image = Image.new('1', (2, 2), color=0)  # 0 is for black
        black_image.save(self.black_image_path)

        # Create a mixed image (half white, half black)
        self.mixed_image_path = 'mixed_image.bmp'
        mixed_image = Image.new('1', (2, 2))
        mixed_image.putpixel((0, 0), 1)  # White
        mixed_image.putpixel((0, 1), 0)  # Black
        mixed_image.putpixel((1, 0), 0)  # Black
        mixed_image.putpixel((1, 1), 1)  # White
        mixed_image.save(self.mixed_image_path)

    def tearDown(self):
        """Remove the test images after each test."""
        os.remove(self.white_image_path)
        os.remove(self.black_image_path)
        os.remove(self.mixed_image_path)

    def test_white_image(self):
        """Test converting a white image."""
        expected_output = [1, 1, 1, 1]  # All pixels should be 1 (white)
        result = convert_image_to_bits(self.white_image_path)
        self.assertEqual(result, expected_output)

    def test_black_image(self):
        """Test converting a black image."""
        expected_output = [0, 0, 0, 0]  # All pixels should be 0 (black)
        result = convert_image_to_bits(self.black_image_path)
        self.assertEqual(result, expected_output)

    def test_mixed_image(self):
        """Test converting a mixed image."""
        expected_output = [1, 0, 0, 1]  # 1 white, 3 black
        result = convert_image_to_bits(self.mixed_image_path)
        self.assertEqual(result, expected_output)

    def test_invalid_image_path(self):
        """Test converting an invalid image path."""
        with self.assertRaises(FileNotFoundError):
            convert_image_to_bits('invalid_image_path.bmp')

    def test_large_image(self):
        """Test converting a larger image."""
        # Create a larger image (3x3)
        large_image_path = 'large_image.bmp'
        large_image = Image.new('1', (3, 3))
        large_image.putpixel((0, 0), 1)
        large_image.putpixel((1, 1), 1)
        large_image.putpixel((2, 2), 1)
        large_image.save(large_image_path)

        expected_output = [
            1, 0, 0,
            0, 1, 0,
            0, 0, 1
        ]
        result = convert_image_to_bits(large_image_path)
        self.assertEqual(result, expected_output)

        # Clean up
        os.remove(large_image_path)
```

### JavaScript Code Using Jest:

```javascript
const fs = require('fs');
const Jimp = require('jimp');

describe('TestConvertImageToBits', () => {
    let white_image_path = 'white_image.bmp';
    let black_image_path = 'black_image.bmp';
    let mixed_image_path = 'mixed_image.bmp';

    beforeEach(() => {
        // Create a white image (all pixels white)
        Jimp.create(2, 2, 0xffffff).write(white_image_path);

        // Create a black image (all pixels black)
        Jimp.create(2, 2, 0x000000).write(black_image_path);

        // Create a mixed image (half white, half black)
        const mixedImage = new Jimp(2, 2);
        mixedImage.setPixelColor(0xffffff, 0, 0); // White
        mixedImage.setPixelColor(0x000000, 0, 1); // Black
        mixedImage.setPixelColor(0x000000, 1, 0); // Black
        mixedImage.setPixelColor(0xffffff, 1, 1); // White
        mixedImage.write(mixed_image_path);
    });

    afterEach(() => {
        fs.unlinkSync(white_image_path);
        fs.unlinkSync(black_image_path);
        fs.unlinkSync(mixed_image_path);
    });

    it('test_white_image', async () => {
        const expected_output = [1, 1, 1, 1];  // All pixels should be 1 (white)
        const result = await convertImageToBits(white_image_path);
        expect(result).toEqual(expected_output);
    });

    it('test_black_image', async () => {
        const expected_output = [0, 0, 0, 0];  // All pixels should be 0 (black)
        const result = await convertImageToBits(black_image_path);
        expect(result).toEqual(expected_output);
    });

    it('test_mixed_image', async () => {
        const expected_output = [1, 0, 0, 1];  // 1 white, 3 black
        const result = await convertImageToBits(mixed_image_path);
        expect(result).toEqual(expected_output);
    });

    it('test_invalid_image_path', async () => {
        try {
            await convertImageToBits('invalid_image_path.bmp');
        } catch (error) {
            expect(error.code).toBe('ENOENT');
        }
    });

    it('test_large_image', async () => {
        const large_image_path = 'large_image.bmp';
        const largeImage = new Jimp(3, 3);
        largeImage.setPixelColor(0xffffff, 0, 0); // White
        largeImage.setPixelColor(0xffffff, 1, 1); // White
        largeImage.setPixelColor(0xffffff, 2, 2); // White
        largeImage.write(large_image_path);

        const expected_output = [
            1, 0, 0,
            0, 1, 0,
            0, 0, 1
        ];
        const result = await convertImageToBits(large_image_path);
        expect(result).toEqual(expected_output);

        // Clean up
        fs.unlinkSync(large_image_path);
    });
});

// Example implementation of convertImageToBits
async function convertImageToBits(imagePath) {
    const image = await Jimp.read(imagePath);
    image.color([{apply: 'greyscale'}]);
    image.color([{apply: 'threshold', params: [128]}]);

    const w = image.bitmap.width;
    const h = image.bitmap.height;

    const bitsArray = [];

    for (let y = 0; y < h; y++) {
        for (let x = 0; x < w; x++) {
            const pixel = image.getPixelColor(x, y);
            const bit = (pixel === 0xffffff) ? 1 : 0;
            bitsArray.push(bit);
        }
    }

    return bitsArray;
}
```

### Explanation:
1. **Imports**: We import `fs` and `Jimp` to handle file system operations and image manipulation.
2. **Before Each Test**: In `beforeEach`, we create the test images using `Jimp`.
3. **After Each Test**: In `afterEach`, we clean up the test images using `fs.unlinkSync`.
4. **Test Cases**:
   - `test_white_image`: Tests a white image.
   - `test_black_image`: Tests a black image.
   - `test_mixed_image`: Tests a mixed image.
   - `test_invalid_image_path`: Tests an invalid image path.
   - `test_large_image`: Tests a larger image.
5. **Assertions**: We use `expect` to assert the results.
6. **Error Handling**: For the invalid image path test, we catch the error and assert the error code.
7. **Example Implementation**: Provided an example implementation of `convertImageToBits` for completeness.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.