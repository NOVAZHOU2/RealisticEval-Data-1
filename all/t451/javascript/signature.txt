Certainly! Here is the equivalent JavaScript function with JSDoc comments:

```javascript
const Jimp = require('jimp');

/**
 * Converts an image to a binary representation.
 * Convert the image to black and white mode, that is, each pixel is represented by only 1 bit,
 * with a white pixel value of 255 and a black pixel value of 0.
 *
 * @param {string} imagePath - The file path of the image to convert.
 * @returns {Promise<Array<number>>} A promise that resolves to an array of bits representing the image,
 *                                   where 1 is for white pixels and 0 is for black pixels.
 */
async function convertImageToBits(imagePath) {
    const image = await Jimp.read(imagePath);
    image.color([{apply: 'greyscale'}]);
    image.color([{apply: 'threshold', params: [128]}]);

    const w = image.bitmap.width;
    const h = image.bitmap.height;

    const bitsArray = [];

    for (let y = 0; y < h; y++) {
        for (let x = 0; x < w; x++) {
            const pixel = image.getPixelColor(x, y);
            const bit = (pixel === 0xffffffff) ? 1 : 0;
            bitsArray.push(bit);
        }
    }

    return bitsArray;
}

// Example usage:
convertImageToBits('path/to/image.jpg')
    .then(bits => console.log(bits))
    .catch(error => console.error(error));
```

### Explanation:
1. **Importing Jimp**: We import the `Jimp` library to handle image operations.
2. **Async Function**: The function `convertImageToBits` is marked as `async` because reading an image is an asynchronous operation.
3. **Loading the Image**: We use `Jimp.read` to load the image asynchronously.
4. **Greyscale Conversion**: We convert the image to greyscale using `image.color([{apply: 'greyscale'}])`.
5. **Thresholding**: We apply a threshold to convert the image to a binary format using `image.color([{apply: 'threshold', params: [128]}])`.
6. **Iterating Over Pixels**: We iterate over each pixel and check its color value. If the pixel is white (`0xffffffff`), it is represented by `1`; otherwise, it is `0`.
7. **Returning the Result**: The function returns a promise that resolves to the array of bits.
8. **JSDoc Comments**: The comments are rewritten in JSDoc format to provide clear documentation for the function.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JavaScript documentation standards.