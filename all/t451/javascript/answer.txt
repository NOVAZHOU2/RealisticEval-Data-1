Here's the equivalent JavaScript function using the `fs` module to read the image file and the `sharp` library to process it:

```javascript
const fs = require('fs');
const sharp = require('sharp');

function convertImageToBits(imagePath) {
    return new Promise((resolve, reject) => {
        sharp(imagePath)
            .greyscale()
            .raw()
            .toBuffer((err, data, info) => {
                if (err) {
                    return reject(err);
                }

                const bits = [];
                for (let i = 0; i < data.length; i += 3) {
                    // Convert RGB to grayscale
                    const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);
                    
                    // Convert grayscale to binary
                    const binary = gray > 127 ? '1' : '0';
                    bits.push(parseInt(binary));
                }

                resolve(bits);
            });
    });
}

// Usage example:
convertImageToBits('path/to/your/image.jpg')
    .then(bits => console.log(bits))
    .catch(err => console.error(err));
```

### Explanation:
1. **Reading the Image**: We use the `sharp` library to read the image file. Sharp is a powerful image processing library for Node.js.
   
2. **Grayscale Conversion**: The `.greyscale()` method converts the image to grayscale.

3. **Raw Buffer**: The `.raw()` method ensures we get the raw pixel data without any metadata.

4. **Processing Pixels**: 
   - For each pixel, we calculate its grayscale value using the formula `Math.round(0.299 * R + 0.587 * G + 0.114 * B)`.
   - We then convert the grayscale value to either '1' or '0' based on whether it is greater than 127.
   - Finally, we push the binary value into the `bits` array.

5. **Promise Handling**: The function returns a promise that resolves with the list of bits or rejects with an error.

### Note:
- Make sure you have installed the required packages using npm:
  ```bash
  npm install sharp
  ```
  
This JavaScript code will give you the same functionality as your Python code, converting an image to a binary representation where each pixel is represented by one bit (1 for white, 0 for black).