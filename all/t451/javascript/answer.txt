To convert the given Python code into JavaScript, we need to use a library or approach that can handle image manipulation similarly to Python's `PIL`. One common library for this purpose in JavaScript is `Jimp` (JavaScript Image Manipulation Program). 

First, you'll need to install Jimp using npm:

```bash
npm install jimp
```

Here is the equivalent JavaScript code using Jimp:

```javascript
const Jimp = require('jimp');

async function convertImageToBits(imagePath) {
    /**
     * Converts an image to a binary representation.
     *
     * @param {string} imagePath - The file path of the image to convert.
     * @returns {Promise<Array<number>>} A promise that resolves to a list of bits representing the image,
     *                                    where 1 is for white pixels and 0 is for black pixels.
     */
    const image = await Jimp.read(imagePath);
    image.color([{apply: 'greyscale'}]);
    image.color([{apply: 'threshold', params: [128]}]);

    const bitsArray = [];

    for (let y = 0; y < image.bitmap.height; y++) {
        for (let x = 0; x < image.bitmap.width; x++) {
            const pixel = image.getPixelColor(x, y);
            const bit = (pixel & 0xFFFFFF) === 0xFFFFFF ? 1 : 0;
            bitsArray.push(bit);
        }
    }

    return bitsArray;
}

// Example usage:
convertImageToBits('path/to/image.jpg')
    .then(bits => console.log(bits))
    .catch(error => console.error('Error:', error));
```

### Explanation:
1. **Import Jimp**: Use `require('jimp')` to import the Jimp library.
2. **Async Function**: The `convertImageToBits` function is marked as `async` because reading an image with Jimp returns a Promise.
3. **Image Processing**:
   - Read the image using `Jimp.read(imagePath)`.
   - Convert the image to grayscale using `image.color([{apply: 'greyscale'}])`.
   - Apply a threshold filter to convert the image to black and white using `image.color([{apply: 'threshold', params: [128]}])`.
4. **Iterate Over Pixels**: Iterate over each pixel in the image using nested loops.
5. **Extract Pixel Color**: Use `image.getPixelColor(x, y)` to get the color of the pixel at position `(x, y)`.
6. **Check Pixel Color**: Determine if the pixel is white (fully opaque white) by checking if the color is `0xFFFFFF`.
7. **Return Bits Array**: Return the `bitsArray` once all pixels have been processed.

This code should provide similar functionality to the original Python code.