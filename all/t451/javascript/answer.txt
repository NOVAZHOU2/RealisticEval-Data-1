To convert the given Python code into JavaScript, we need to use a library that can handle image manipulation similar to how `PIL` does in Python. One such library is `Jimp`, which allows us to load, manipulate, and save images. Below is the equivalent JavaScript code using `Jimp`:

First, you need to install Jimp:
```bash
npm install jimp
```

Then, here's the JavaScript code:

```javascript
const Jimp = require('jimp');

async function convertImageToBits(imagePath) {
    /**
     * Converts an image to a binary representation.
     *
     * @param {string} imagePath - The file path of the image to convert.
     * @returns {Promise<Array<number>>} A promise that resolves to an array of bits representing the image,
     *                                    where 1 is for white pixels and 0 is for black pixels.
     */
    const image = await Jimp.read(imagePath);
    image.color([{apply: 'greyscale'}]);
    image.color([{apply: 'threshold', params: [128]}]);

    const w = image.bitmap.width;
    const h = image.bitmap.height;

    const bitsArray = [];

    for (let y = 0; y < h; y++) {
        for (let x = 0; x < w; x++) {
            const pixel = image.getPixelColor(x, y);
            const bit = (pixel === 0xffffffff) ? 1 : 0;
            bitsArray.push(bit);
        }
    }

    return bitsArray;
}

// Example usage:
convertImageToBits('path/to/image.jpg')
    .then(bits => console.log(bits))
    .catch(error => console.error(error));
```

### Explanation:
1. **Importing Jimp**: We import the `Jimp` library to handle image operations.
2. **Async Function**: The function `convertImageToBits` is marked as `async` because reading an image is an asynchronous operation.
3. **Loading the Image**: We use `Jimp.read` to load the image asynchronously.
4. **Greyscale Conversion**: We convert the image to greyscale using `image.color([{apply: 'greyscale'}])`.
5. **Thresholding**: We apply a threshold to convert the image to a binary format using `image.color([{apply: 'threshold', params: [128]}])`.
6. **Iterating Over Pixels**: We iterate over each pixel and check its color value. If the pixel is white (`0xffffffff`), it is represented by `1`; otherwise, it is `0`.
7. **Returning the Result**: The function returns a promise that resolves to the array of bits.

This JavaScript code should provide the same functionality as the original Python code.