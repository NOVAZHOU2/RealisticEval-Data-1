Certainly! Here’s the equivalent C++ test class using the Catch2 testing framework. We will preserve the functionality and logic of the tests, making any necessary adjustments for language differences between Python and C++.

### C++ Code Using Catch2

First, make sure you have Catch2 installed. You can include it via a header-only library or use a package manager.

#### Catch2 Header-Only Library
Add the following line at the top of your C++ file to include Catch2:

```cpp
#define CATCH_CONFIG_MAIN
#include "catch2/catch.hpp"
```

Now, let’s write the test class:

```cpp
#include <iostream>
#include <vector>
#include <png++/png.hpp>
#include "catch2/catch.hpp"

// Function to convert an image to a binary representation
// Convert the image to black and white mode, that is, each pixel is represented by only 1 bit,
// with a white pixel value of 255 and a black pixel value of 0.
//
// Args:
//     image_path (const std::string&): The file path of the image to convert.
//
// Returns:
//     std::vector<int>: A vector of bits representing the image, where 1 is for white pixels
//                       and 0 is for black pixels.
std::vector<int> convert_image_to_bits(const std::string& image_path) {
    // Load the image
    png::image<png::rgb_pixel> image(image_path);

    // Convert the image to grayscale
    png::image<png::gray_pixel_8> gray_image;
    gray_image.create(image.get_width(), image.get_height());
    for (int y = 0; y < image.get_height(); ++y) {
        for (int x = 0; x < image.get_width(); ++x) {
            png::rgb_pixel pixel = image[y][x];
            png::gray_pixel_8 gray_pixel((pixel.red + pixel.green + pixel.blue) / 3);
            gray_image[y][x] = gray_pixel;
        }
    }

    // Convert the grayscale image to binary
    std::vector<int> bits_array;
    for (int y = 0; y < gray_image.get_height(); ++y) {
        for (int x = 0; x < gray_image.get_width(); ++x) {
            int pixel = static_cast<int>(gray_image[y][x].value);
            int bit = (pixel == 255) ? 1 : 0;
            bits_array.push_back(bit);
        }
    }

    return bits_array;
}

TEST_CASE("TestConvertImageToBits", "[image]") {
    // Create test images before each test
    const std::string white_image_path = "white_image.bmp";
    const std::string black_image_path = "black_image.bmp";
    const std::string mixed_image_path = "mixed_image.bmp";
    const std::string large_image_path = "large_image.bmp";

    SECTION("Test converting a white image") {
        // Create a white image (all pixels white)
        png::image<png::gray_pixel_8> white_image(png::create_canvas(2, 2));
        for (int y = 0; y < 2; ++y) {
            for (int x = 0; x < 2; ++x) {
                white_image[y][x] = png::gray_pixel_8(255);
            }
        }
        white_image.write(white_image_path);

        std::vector<int> expected_output = {1, 1, 1, 1};
        std::vector<int> result = convert_image_to_bits(white_image_path);

        REQUIRE(result == expected_output);

        // Clean up
        std::remove(white_image_path.c_str());
    }

    SECTION("Test converting a black image") {
        // Create a black image (all pixels black)
        png::image<png::gray_pixel_8> black_image(png::create_canvas(2, 2));
        for (int y = 0; y < 2; ++y) {
            for (int x = 0; x < 2; ++x) {
                black_image[y][x] = png::gray_pixel_8(0);
            }
        }
        black_image.write(black_image_path);

        std::vector<int> expected_output = {0, 0, 0, 0};
        std::vector<int> result = convert_image_to_bits(black_image_path);

        REQUIRE(result == expected_output);

        // Clean up
        std::remove(black_image_path.c_str());
    }

    SECTION("Test converting a mixed image") {
        // Create a mixed image (half white, half black)
        png::image<png::gray_pixel_8> mixed_image(png::create_canvas(2, 2));
        mixed_image[0][0] = png::gray_pixel_8(255);  // White
        mixed_image[0][1] = png::gray_pixel_8(0);    // Black
        mixed_image[1][0] = png::gray_pixel_8(0);    // Black
        mixed_image[1][1] = png::gray_pixel_8(255);  // White
        mixed_image.write(mixed_image_path);

        std::vector<int> expected_output = {1, 0, 0, 1};
        std::vector<int> result = convert_image_to_bits(mixed_image_path);

        REQUIRE(result == expected_output);

        // Clean up
        std::remove(mixed_image_path.c_str());
    }

    SECTION("Test converting an invalid image path") {
        REQUIRE_THROWS_AS(convert_image_to_bits("invalid_image_path.bmp"), std::runtime_error);
    }

    SECTION("Test converting a larger image") {
        // Create a larger image (3x3)
        png::image<png::gray_pixel_8> large_image(png::create_canvas(3, 3));
        large_image[0][0] = png::gray_pixel_8(255);
        large_image[1][1] = png::gray_pixel_8(255);
        large_image[2][2] = png::gray_pixel_8(255);
        large_image.write(large_image_path);

        std::vector<int> expected_output = {1, 0, 0, 0, 1, 0, 0, 0, 1};
        std::vector<int> result = convert_image_to_bits(large_image_path);

        REQUIRE(result == expected_output);

        // Clean up
        std::remove(large_image_path.c_str());
    }
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `def convert_image_to_bits(image_path: str)` is translated to `std::vector<int> convert_image_to_bits(const std::string& image_path)` in C++.
   - The parameter type `str` in Python is translated to `std::string` in C++.

2. **Comments and Documentation**:
   - The Python docstring is translated into a multi-line comment block using `/* */`.
   - Single-line comments are translated using `//`.

3. **Image Creation and Testing**:
   - The `setUp` and `tearDown` methods are replaced with `SECTION` blocks within the `TEST_CASE` to set up and clean up test images.
   - The `png::image` class is used to create and save test images.
   - Assertions are performed using `REQUIRE` and `REQUIRE_THROWS_AS` from Catch2.

4. **Assertions**:
   - `REQUIRE` is used to check the equality of vectors.
   - `REQUIRE_THROWS_AS` is used to check for exceptions.

### Compilation:
To compile the code, you need to link against the `png++` library and include Catch2. Here’s an example command using `g++`:

```sh
g++ -o test_convert_image test_convert_image.cpp -lpng++ -lcatch2
```

This will compile the code and create an executable named `test_convert_image`. You can then run it to execute the tests.

```sh
./test_convert_image
```

This should run all the tests and provide the results.