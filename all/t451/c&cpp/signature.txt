Certainly! Here’s the equivalent C++ code for the provided Python function, including the conversion of the Python function signature, comments, and docstrings into C++ style comments and documentation.

### C++ Code

```cpp
#include <iostream>
#include <vector>
#include <png++/png.hpp>

// Function to convert an image to a binary representation
// Convert the image to black and white mode, that is, each pixel is represented by only 1 bit,
// with a white pixel value of 255 and a black pixel value of 0.
//
// Args:
//     image_path (const std::string&): The file path of the image to convert.
//
// Returns:
//     std::vector<int>: A vector of bits representing the image, where 1 is for white pixels
//                       and 0 is for black pixels.
std::vector<int> convert_image_to_bits(const std::string& image_path) {
    // Load the image
    png::image<png::rgb_pixel> image(image_path);

    // Convert the image to grayscale
    png::image<png::gray_pixel_8> gray_image;
    gray_image.create(image.get_width(), image.get_height());
    for (int y = 0; y < image.get_height(); ++y) {
        for (int x = 0; x < image.get_width(); ++x) {
            png::rgb_pixel pixel = image[y][x];
            png::gray_pixel_8 gray_pixel((pixel.red + pixel.green + pixel.blue) / 3);
            gray_image[y][x] = gray_pixel;
        }
    }

    // Convert the grayscale image to binary
    std::vector<int> bits_array;
    for (int y = 0; y < gray_image.get_height(); ++y) {
        for (int x = 0; x < gray_image.get_width(); ++x) {
            int pixel = static_cast<int>(gray_image[y][x].value);
            int bit = (pixel == 255) ? 1 : 0;
            bits_array.push_back(bit);
        }
    }

    return bits_array;
}

int main() {
    std::string image_path = "path/to/your/image.png";
    std::vector<int> bits = convert_image_to_bits(image_path);

    // Print the bits array
    for (int bit : bits) {
        std::cout << bit << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `def convert_image_to_bits(image_path: str)` is translated to `std::vector<int> convert_image_to_bits(const std::string& image_path)` in C++.
   - The parameter type `str` in Python is translated to `std::string` in C++.

2. **Comments and Documentation**:
   - The Python docstring is translated into a multi-line comment block using `/* */`.
   - Single-line comments are translated using `//`.

3. **Image Loading and Conversion**:
   - The `png::image<png::rgb_pixel>` class is used to load the image.
   - The image is converted to grayscale by averaging the RGB values.
   - Each grayscale pixel is converted to a binary value (1 for white, 0 for black).

4. **Result**:
   - The resulting binary values are stored in a `std::vector<int>` and returned.

### Dependencies:
- **png++**: A C++ wrapper around the libpng library for handling PNG images.

### Compilation:
To compile the code, you need to link against the `png++` library. Here’s an example command using `g++`:

```sh
g++ -o convert_image convert_image.cpp -lpng++
```

This will compile the code and create an executable named `convert_image`. You can then run it with the path to your image file.

```sh
./convert_image
```

This should print the binary representation of the image.