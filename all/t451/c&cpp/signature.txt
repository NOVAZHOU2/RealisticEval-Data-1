Certainly! Here is the equivalent C++ code for the given Python function, including comments and documentation:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <CImg.h>

using namespace std;
using namespace cimg_library;

/**
 * Converts an image to a binary representation.
 * Convert the image to black and white mode, that is, each pixel is represented by only 1 bit,
 * with a white pixel value of 255 and a black pixel value of 0.
 *
 * @param image_path The file path of the image to convert.
 * @return A vector of bits representing the image, where 1 is for white pixels and 0 is for black pixels.
 */
vector<int> convert_image_to_bits(const string& image_path) {
    CImg<unsigned char> image(image_path);
    image.resize(image.width(), image.height(), 1, 1, 1); // Convert to grayscale
    image.normalize(0, 255); // Normalize the image values between 0 and 255

    vector<int> bits_array;

    int w = image.width();
    int h = image.height();

    for (int y = 0; y < h; ++y) {
        for (int x = 0; x < w; ++x) {
            unsigned char pixel = image(x, y);
            int bit = (pixel == 255) ? 1 : 0;
            bits_array.push_back(bit);
        }
    }

    return bits_array;
}

int main() {
    const string image_path = "path/to/your/image.jpg";
    vector<int> bits = convert_image_to_bits(image_path);

    // Print the bits for demonstration
    for (int bit : bits) {
        cout << bit << " ";
    }

    return 0;
}
```

### Explanation:

1. **Header Files**:
   - `#include <iostream>` for input/output operations.
   - `#include <vector>` for using vectors.
   - `#include <string>` for using strings.
   - `#include <CImg.h>` for image processing with CImg.

2. **Using Directives**:
   - `using namespace std;` for standard C++ libraries.
   - `using namespace cimg_library;` for the CImg library.

3. **Function Documentation**:
   - The function `convert_image_to_bits` includes a multi-line comment block (`/* ... */`) that describes the purpose, arguments, and return value of the function.

4. **Function Implementation**:
   - The function `convert_image_to_bits` takes a `const string&` parameter `image_path` which represents the file path of the image.
   - It loads the image using `CImg<unsigned char> image(image_path);`.
   - It converts the image to grayscale and normalizes the pixel values to be between 0 and 255.
   - It iterates over each pixel and appends the binary value (1 for white, 0 for black) to the `bits_array`.

5. **Main Function**:
   - The `main` function demonstrates how to call the `convert_image_to_bits` function and prints the resulting bits.

This translation preserves the original purpose and structure of the Python code while adapting it to C++ conventions and syntax.