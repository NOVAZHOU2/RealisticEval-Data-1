Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
import { DateTime } from 'luxon';

/**
 * Generates a string based on the entered start and end dates. If the start date and end date are in the same month,
 * only one month will be displayed. If not, the start and end months will be displayed separately. For example, if you
 * enter the start date and end date as "2023-08-01" and "2023-08-15" respectively, you will finally output "August 1 to 15, 2023".
 *
 * Example:
 *   Input:
 *     start_date: 2023-08-01
 *     end_date: 2023-08-15
 *   Output:
 *     August 1 to 15, 2023
 *
 * @param startDate - The start date in 'YYYY-MM-DD' format.
 * @param endDate - The end date in 'YYYY-MM-DD' format.
 * @returns A string representing the date range in a human-readable format.
 * @throws {Error} If the startDate or endDate are not in the correct format or if startDate is after endDate.
 */
function dateRangeString(startDate: string, endDate: string): string {
  try {
    const startDt = DateTime.fromISO(startDate);
    const endDt = DateTime.fromISO(endDate);

    if (!startDt.isValid) {
      throw new Error(`Invalid start date: ${startDate}`);
    }
    if (!endDt.isValid) {
      throw new Error(`Invalid end date: ${endDate}`);
    }
    if (startDt > endDt) {
      throw new Error("startDate cannot be after endDate.");
    }

    const startMonth = startDt.toFormat('MMMM');
    const endMonth = endDt.toFormat('MMMM');
    const startDay = startDt.day.toString();
    const endDay = endDt.day.toString();
    const startYear = startDt.year.toString();
    const endYear = endDt.year.toString();

    // Format output based on whether dates are within the same month and/or year
    if (startYear !== endYear) {
      return `${startMonth} ${startDay}, ${startYear} to ${endMonth} ${endDay}, ${endYear}`;
    } else if (startMonth === endMonth) {
      return `${startMonth} ${startDay} to ${endDay}, ${startYear}`;
    } else {
      return `${startMonth} ${startDay} to ${endMonth} ${endDay}, ${startYear}`;
    }
  } catch (error) {
    throw new Error(`Date must be in 'YYYY-MM-DD' format. ${error.message}`);
  }
}

// Example usage
console.log(dateRangeString('2023-08-01', '2023-08-15'));
console.log(dateRangeString('2023-08-01', '2023-09-15'));
console.log(dateRangeString('2023-08-01', '2024-09-15'));
```

### Explanation:
1. **Imports**: We import `DateTime` from the `luxon` library to handle date parsing and formatting.
2. **JSDoc Documentation**: The function is documented using JSDoc comments, which include the description, examples, arguments, and return type.
3. **Function Definition**: The function `dateRangeString` takes two parameters (`startDate` and `endDate`) and returns a formatted date range string.
4. **Validation**:
   - We validate the input dates using `DateTime.fromISO` to ensure they are in the correct format.
   - If the dates are invalid, we throw an error with a descriptive message.
   - We check if `startDate` is before `endDate` and throw an error if it is not.
5. **Formatting**:
   - We use Luxon's `toFormat` method to get the full month name.
   - We convert days and years to strings.
   - We format the output based on the conditions specified in the original Python code.
6. **Error Handling**: We wrap the main logic in a try-catch block to handle any errors and provide informative error messages.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices.