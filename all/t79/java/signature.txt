Sure! Below is the equivalent Java code with the same function signature and comments:

```java
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 * Generates a string based on the entered start and end dates. If the start date and end date are in the same month,
 * only one month will be displayed. If not, the start and end months will be displayed separately. For example, if you
 * enter the start date and end date as, "2023-08-01" and "2023-08-15" respectively, you will finally output
 * "August 1 to 15, 2023".
 *
 * Example:
 *      Input:
 *          start_date: 2023-08-01
 *          end_date: 2023-08-15
 *      Output:
 *          August 1 to 15, 2023
 *
 * @param startDate The start date in 'YYYY-MM-DD' format.
 * @param endDate   The end date in 'YYYY-MM-DD' format.
 * @return A string representing the date range in a human-readable format.
 */
public class DateRangeString {

    public static String dateRangeString(String startDate, String endDate) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate start = LocalDate.parse(startDate, formatter);
        LocalDate end = LocalDate.parse(endDate, formatter);

        String startMonth = start.getMonth().toString();
        int startDay = start.getDayOfMonth();
        int endDay = end.getDayOfMonth();
        int startYear = start.getYear();

        if (start.isEqual(end)) {
            return startMonth + " " + startDay + ", " + startYear;
        } else if (start.withDayOfMonth(1).isEqual(end.withDayOfMonth(1))) {
            return startMonth + " " + startDay + " to " + endDay + ", " + startYear;
        } else {
            String endMonth = end.getMonth().toString();
            int endYear = end.getYear();
            return startMonth + " " + startDay + " to " + endMonth + " " + endDay + ", " + startYear;
        }
    }

    public static void main(String[] args) {
        System.out.println(dateRangeString("2023-08-01", "2023-08-15")); // Output: August 1 to 15, 2023
    }
}
```

### Explanation:
1. **Imports**: We import necessary classes from `java.time` for handling dates and `java.time.format` for formatting dates.
2. **Class Definition**: We define a class `DateRangeString`.
3. **Method Signature**: The method `dateRangeString` takes two strings (`startDate` and `endDate`) as parameters and returns a string.
4. **Formatting Dates**: We use `DateTimeFormatter` to parse the input strings into `LocalDate` objects.
5. **Conditional Logic**:
   - If the start and end dates are the same, we return just the month and day along with the year.
   - If the start and end dates are in the same month but different days, we return the start day, end day, and year.
   - Otherwise, we return both the start and end dates in their respective formats.
6. **Main Method**: A simple test case is provided to demonstrate the usage of the method.