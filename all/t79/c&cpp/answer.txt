Sure! Below is the equivalent C++ code for the given Python function:

```cpp
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>

std::string date_range_string(const std::string& start_date, const std::string& end_date) {
    // Parse the dates
    int year_start, month_start, day_start;
    int year_end, month_end, day_end;

    std::istringstream ss_start(start_date);
    std::istringstream ss_end(end_date);

    char delimiter;
    ss_start >> year_start >> delimiter >> month_start >> delimiter >> day_start;
    ss_end >> year_end >> delimiter >> month_end >> delimiter >> day_end;

    // Get month names
    const char* months[] = {"January", "February", "March", "April", "May", "June",
                            "July", "August", "September", "October", "November", "December"};

    // Format the output string
    std::ostringstream oss;
    if (year_start == year_end && month_start == month_end) {
        oss << months[month_start - 1] << " " << day_start << " to " << day_end << ", " << year_start;
    } else {
        oss << months[month_start - 1] << " " << day_start << ", " << year_start << " to "
           << months[month_end - 1] << " " << day_end << ", " << year_end;
    }

    return oss.str();
}

int main() {
    std::string start_date = "2023-08-01";
    std::string end_date = "2023-08-15";

    std::string result = date_range_string(start_date, end_date);
    std::cout << result << std::endl;  // Output: August 1 to 15, 2023

    return 0;
}
```

### Explanation:
1. **Parsing Dates**: The function first parses the input strings `start_date` and `end_date` into their respective components (year, month, day).
2. **Month Names**: An array of month names is defined to convert numerical months to their corresponding names.
3. **Formatting the Output**: Depending on whether the start and end dates are in the same month or different months, the output string is formatted accordingly.
4. **Main Function**: The `main` function demonstrates how to use the `date_range_string` function with an example.

This C++ code should produce the same output as the provided Python function.