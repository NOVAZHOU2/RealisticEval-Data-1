Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite with appropriate assertions and setup.

First, make sure you have the Catch2 library installed. You can include it via a package manager or by downloading the single-header version.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <iostream>
#include <chrono>
#include <string>
#include <stdexcept>
#include <iomanip>
#include <sstream>
#include <fmt/format.h> // Include the fmt library for string formatting

// Function to parse a date string in 'YYYY-MM-DD' format
std::tm parse_date(const std::string& date_str) {
    std::istringstream ss(date_str);
    std::tm tm = {};
    ss >> std::get_time(&tm, "%Y-%m-%d");
    if (ss.fail()) {
        throw std::invalid_argument("Date must be in 'YYYY-MM-DD' format.");
    }
    return tm;
}

// Function to generate a formatted date range string
std::string date_range_string(const std::string& start_date, const std::string& end_date) {
    try {
        auto start_tm = parse_date(start_date);
        auto end_tm = parse_date(end_date);

        // Convert tm structures to time_points
        std::chrono::system_clock::time_point start_time = std::chrono::system_clock::from_time_t(std::mktime(&start_tm));
        std::chrono::system_clock::time_point end_time = std::chrono::system_clock::from_time_t(std::mktime(&end_tm));

        if (start_time > end_time) {
            throw std::invalid_argument("start_date cannot be after end_date.");
        }

        // Extract month names and day numbers
        std::ostringstream oss_start, oss_end;
        oss_start << std::put_time(&start_tm, "%B %d");
        oss_end << std::put_time(&end_tm, "%B %d");

        std::string start_month, end_month, start_day, end_day, start_year, end_year;
        oss_start >> start_month >> start_day;
        oss_end >> end_month >> end_day;

        start_year = std::to_string(1900 + start_tm.tm_year);
        end_year = std::to_string(1900 + end_tm.tm_year);

        // Format output based on whether dates are within the same month and/or year
        if (start_year != end_year) {
            return fmt::format("{} {}, {} to {} {}, {}", start_month, start_day, start_year, end_month, end_day, end_year);
        } else if (start_tm.tm_mon == end_tm.tm_mon) {
            return fmt::format("{} {} to {}, {}", start_month, start_day, end_day, start_year);
        } else {
            return fmt::format("{} {} to {} {}, {}", start_month, start_day, end_month, end_day, start_year);
        }
    } catch (const std::exception& e) {
        throw std::invalid_argument(fmt::format("Date must be in 'YYYY-MM-DD' format. {}", e.what()));
    }
}

TEST_CASE("Test date_range_string function") {
    SECTION("Test dates within the same month") {
        std::string result = date_range_string("2023-08-01", "2023-08-15");
        REQUIRE(result == "August 1 to 15, 2023");
    }

    SECTION("Test dates within the same month (start and end)") {
        std::string result = date_range_string("2023-08-01", "2023-08-31");
        REQUIRE(result == "August 1 to 31, 2023");
    }

    SECTION("Test dates across different months within the same year") {
        std::string result = date_range_string("2023-08-30", "2023-09-05");
        REQUIRE(result == "August 30, 2023 to September 5, 2023");
    }

    SECTION("Test dates across different years") {
        std::string result = date_range_string("2023-12-30", "2024-01-02");
        REQUIRE(result == "December 30, 2023 to January 2, 2024");
    }
}

int main(int argc, char* argv[]) {
    int result = Catch::Session().run(argc, argv);
    return result;
}
```

### Explanation:
1. **Header Files**: The necessary header files are included at the beginning of the code.
2. **Catch2 Test Suite**: The `TEST_CASE` macro defines the test suite, and each `SECTION` macro defines individual test cases.
3. **Function Definitions**: The `parse_date` and `date_range_string` functions are defined as in the previous example.
4. **Assertions**: The `REQUIRE` macro is used for assertions, ensuring that the expected results match the actual results.
5. **Main Function**: The `main` function initializes and runs the Catch2 test session.

This code preserves the original functionality and logic of the Python unittest class while adapting it to the Catch2 testing framework in C++.