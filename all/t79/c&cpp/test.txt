Sure! Below is an equivalent C++ test case using Catch2 for the `date_range_string` function. This assumes that the function is implemented in a C++ file and included in your project.

First, make sure you have Catch2 installed and set up in your project. You can download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2).

Here's how you can write the C++ test case:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"
#include <string>
#include <sstream>

// Assuming the implementation of date_range_string is in a file named date_utils.cpp
std::string date_range_string(const std::string& start_date, const std::string& end_date);

TEST_CASE("Date Range String", "[date_range_string]") {
    SECTION("Same Month") {
        REQUIRE(date_range_string("2023-08-01", "2023-08-15") == "August 1 to 15, 2023");
    }

    SECTION("Different Months") {
        REQUIRE(date_range_string("2023-08-01", "2023-09-15") == "August 1 to September 15, 2023");
    }

    SECTION("Same Year Different Days") {
        REQUIRE(date_range_string("2023-08-01", "2023-08-31") == "August 1 to 31, 2023");
    }

    SECTION("Same Day") {
        REQUIRE(date_range_string("2023-08-01", "2023-08-01") == "August 1, 2023");
    }
}
```

In this C++ code:
- We include the necessary headers, including `catch.hpp`.
- We define the `date_range_string` function prototype (assuming it's defined in another file).
- We use the `TEST_CASE` macro to create a test suite named "Date Range String".
- Inside the test suite, we use the `SECTION` macro to group related tests together.
- We use the `REQUIRE` macro to assert that the function returns the expected results.

Make sure to compile your test cases with the Catch2 library. If you're using a build system like CMake, you might add something like this to your `CMakeLists.txt`:

```cmake
find_package(Catch2 REQUIRED)

add_executable(your_test_executable your_test_file.cpp)
target_link_libraries(your_test_executable PRIVATE Catch2::Catch2WithMain)
```

This setup will allow you to run your tests using a command like `./your_test_executable`.