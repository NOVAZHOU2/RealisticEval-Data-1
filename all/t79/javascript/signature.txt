Sure! Here is the JavaScript version of your Python function with the same comments:

```javascript
/**
 * Generates a string based on the entered start and end dates. If the start date and end date are in the same month,
 * only one month will be displayed. If not, the start and end months will be displayed separately. For example, if you
 * enter the start date and end date as "2023-08-01" and "2023-08-15" respectively, you will finally output "August 1 to 15, 2023".
 *
 * Example:
 *     Input:
 *         start_date: 2023-08-01
 *         end_date: 2023-08-15
 *     Output:
 *         August 1 to 15, 2023
 *
 * @param {string} startDate - The start date in 'YYYY-MM-DD' format.
 * @param {string} endDate - The end date in 'YYYY-MM-DD' format.
 * @returns {string} A string representing the date range in a human-readable format.
 */
function dateRangeString(startDate, endDate) {
    // Convert the input strings to Date objects
    const start = new Date(startDate);
    const end = new Date(endDate);

    // Get the year, month, day for both dates
    const startYear = start.getFullYear();
    const startMonth = start.getMonth();
    const startDay = start.getDate();

    const endYear = end.getFullYear();
    const endMonth = end.getMonth();
    const endDay = end.getDate();

    // Create month names array
    const monthNames = ["January", "February", "March", "April", "May", "June",
                        "July", "August", "September", "October", "November", "December"];

    // Format the start and end dates
    const formattedStartDate = `${monthNames[startMonth]} ${startDay}, ${startYear}`;
    const formattedEndDate = `${monthNames[endMonth]} ${endDay}, ${endYear}`;

    // Check if the start and end dates are in the same month and year
    if (startYear === endYear && startMonth === endMonth) {
        return `${formattedStartDate} to ${formattedEndDate}`;
    } else {
        return `${formattedStartDate} to ${formattedEndDate}`;
    }
}
```

This JavaScript function `dateRangeString` takes two parameters, `startDate` and `endDate`, which are strings in the 'YYYY-MM-DD' format. It returns a string that represents the date range in a human-readable format, similar to the Python function.