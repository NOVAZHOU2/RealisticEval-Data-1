Sure! Here's how you can convert the Python `unittest` test class to a Jest test case using JavaScript:

```javascript
const { describe, it, expect } = require('@jest/globals');

function dateRangeString(startDate, endDate) {
    const start = new Date(startDate);
    const end = new Date(endDate);

    const options = { year: 'numeric', month: 'long', day: 'numeric' };

    const formattedStart = start.toLocaleDateString('en-US', options);
    const formattedEnd = end.toLocaleDateString('en-US', options);

    return `${formattedStart} to ${formattedEnd}`;
}

describe('dateRangeString function', () => {
    it('should return the correct date range for the same month', () => {
        const startDate = '2023-08-01';
        const endDate = '2023-08-15';
        const expected = 'August 1 to August 15, 2023';

        expect(dateRangeString(startDate, endDate)).toBe(expected);
    });

    it('should return the correct date range for different months', () => {
        const startDate = '2023-08-01';
        const endDate = '2023-09-15';
        const expected = 'August 1 to September 15, 2023';

        expect(dateRangeString(startDate, endDate)).toBe(expected);
    });
});
```

### Explanation:
1. **Function Definition**: The `dateRangeString` function is defined similarly to your original Python function.
2. **Jest Setup**: We use `@jest/globals` to import the necessary functions (`describe`, `it`, `expect`) from Jest.
3. **Test Cases**:
   - **Same Month**: Tests that when the start and end dates are in the same month, the function correctly formats the date range.
   - **Different Months**: Tests that when the start and end dates are in different months, the function correctly formats the date range.

This Jest test suite ensures that your `dateRangeString` function behaves as expected under different conditions.