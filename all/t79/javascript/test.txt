Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Unittest Code:
```python
import unittest

class TestDateRangeString(unittest.TestCase):
    def test_same_month(self):
        # Test dates within the same month
        result = date_range_string("2023-08-01", "2023-08-15")
        self.assertEqual(result, "August 1 to 15, 2023")

    def test_same_month_star_end(self):
        # Test dates within the same month
        result = date_range_string("2023-08-01", "2023-08-31")
        self.assertEqual(result, "August 1 to 31, 2023")

    def test_different_months_same_year(self):
        # Test dates across different months within the same year
        result = date_range_string("2023-08-30", "2023-09-05")
        self.assertEqual(result, "August 30, 2023 to September 5, 2023")

    def test_different_years(self):
        # Test dates across different years
        result = date_range_string("2023-12-30", "2023-12-31")
        self.assertEqual(result, "December 30, 2023 to December 31, 2023")
```

### Equivalent Jest Test Suite:
```javascript
const dateRangeString = require('./dateRangeString'); // Import the dateRangeString function

describe('TestDateRangeString', () => {
    it('should correctly format dates within the same month', () => {
        const result = dateRangeString("2023-08-01", "2023-08-15");
        expect(result).toBe("August 1 to 15, 2023");
    });

    it('should correctly format dates within the same month (start to end)', () => {
        const result = dateRangeString("2023-08-01", "2023-08-31");
        expect(result).toBe("August 1 to 31, 2023");
    });

    it('should correctly format dates across different months within the same year', () => {
        const result = dateRangeString("2023-08-30", "2023-09-05");
        expect(result).toBe("August 30, 2023 to September 5, 2023");
    });

    it('should correctly format dates across different years', () => {
        const result = dateRangeString("2023-12-30", "2024-01-02");
        expect(result).toBe("December 30, 2023 to January 2, 2024");
    });
});
```

### Explanation:
1. **Import Statement**: The `dateRangeString` function is imported at the beginning of the test file.
2. **Describe Block**: The `describe` block is used to group the tests under a common description.
3. **It Blocks**: Each test case is defined using the `it` block, which provides a clear description of what the test does.
4. **Expect Assertions**: The `expect` function is used to make assertions about the expected results. The `toBe` matcher is used to check equality.

### Notes on Conversion:
- **Importing the Function**: In JavaScript, you need to import the `dateRangeString` function from the module where it is defined.
- **Test Descriptions**: The descriptions in the `it` blocks are kept similar to the comments in the Python test cases.
- **Assertions**: The `expect` function with the `toBe` matcher is used to assert the expected results, which is equivalent to `self.assertEqual` in Python.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adhering to Jest's syntax and conventions.