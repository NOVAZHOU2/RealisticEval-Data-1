Sure, here is the Java version of your Python function with the same functionality and comments:

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

/**
 * Reads numerical columns from a file starting from the line after the last line containing '/'.
 *
 * @param fileName The name of the file to read.
 * @return A 2D ArrayList of doubles containing the numerical data.
 * @throws IOException If an I/O error occurs while reading the file.
 */
public static ArrayList<ArrayList<Double>> readColumns(String fileName) throws IOException {
    ArrayList<ArrayList<Double>> result = new ArrayList<>();
    String line;
    int lastLineIndexWithSlash = -1;

    try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
        for (int i = 0; (line = br.readLine()) != null; i++) {
            if (line.contains("/")) {
                lastLineIndexWithSlash = i;
            }
        }

        if (lastLineIndexWithSlash == -1) {
            throw new IllegalArgumentException("The file does not contain any '/' character.");
        }

        br.close();
        br = new BufferedReader(new FileReader(fileName));

        for (int i = 0; (line = br.readLine()) != null && i <= lastLineIndexWithSlash; i++) {
            if (i > lastLineIndexWithSlash) {
                String[] parts = line.split("\\s+");
                ArrayList<Double> row = new ArrayList<>();
                for (String part : parts) {
                    row.add(Double.parseDouble(part));
                }
                result.add(row);
            }
        }
    } catch (IOException e) {
        throw new IOException("Error occurred while reading the file.", e);
    }

    return result;
}
```

This Java method reads a file and returns a 2D `ArrayList` of `Double`. It starts reading from the line after the last line containing the '/' character. If no '/' character is found in the file, it throws an `IllegalArgumentException`.

Please note that the Java version uses `ArrayList` instead of `numpy.ndarray`, as there's no direct equivalent in Java for `numpy.ndarray`. Also, Java doesn't have built-in support for complex data types like `numpy.ndarray`, so we use `ArrayList` to store the data.