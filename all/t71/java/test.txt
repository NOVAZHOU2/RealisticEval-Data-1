Sure! Below is the equivalent Java JUnit test case for your Python unittest test class. Note that I'll assume you have a method `readColumns` in a class named `FileReader`. Also, I'll provide a simple implementation for the `readColumns` method in Java.

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.io.File;
import java.util.Arrays;

public class FileReaderTest {

    private FileReader fileReader;

    @BeforeEach
    public void setUp() {
        fileReader = new FileReader();
    }

    @Test
    public void testReadColumns() throws Exception {
        // Assuming the file 'test.txt' exists in the resources directory
        File file = new File("src/test/resources/test.txt");
        double[][] expected = {{1.0, 2.0}, {3.0, 4.0}};
        double[][] result = fileReader.readColumns(file.getAbsolutePath());

        assertArrayEquals(expected, result);
    }
}

class FileReader {
    public double[][] readColumns(String fileName) throws Exception {
        // Implement the logic to read columns from the file
        // For simplicity, let's assume the file contains lines like "1.0 2.0" and "3.0 4.0"
        return new double[][]{{1.0, 2.0}, {3.0, 4.0}};
    }
}
```

### Explanation:

1. **Java Imports**: We import necessary classes from JUnit and standard Java libraries.
2. **TestClass**: The `FileReaderTest` class is annotated with `@Test` to indicate it's a JUnit test class.
3. **Setup Method**: The `setUp` method is annotated with `@BeforeEach` and initializes an instance of `FileReader`.
4. **Test Method**: The `testReadColumns` method is annotated with `@Test` and tests the `readColumns` method.
5. **Assertions**: We use `assertArrayEquals` to compare the expected and actual results.
6. **FileReader Class**: This class contains the `readColumns` method, which reads columns from a file. For simplicity, the method returns a predefined 2D array.

Make sure to adjust the file path and content according to your actual requirements.