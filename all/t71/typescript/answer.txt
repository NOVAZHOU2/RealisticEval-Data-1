Sure, here is the equivalent TypeScript code for your Python function:

```typescript
import * as fs from 'fs';
import { parse } from 'csv-parse';

function readColumns(fileName: string): Promise<Array<Array<number>>> {
    return new Promise((resolve, reject) => {
        let foundDivider = false;
        const data: Array<Array<number>> = [];

        fs.createReadStream(fileName)
            .pipe(parse({ delimiter: ',', columns: true }))
            .on('data', (row) => {
                if (!foundDivider && !row['/']) {
                    return; // Skip lines until we find the divider
                }
                foundDivider = true;

                // Convert each column value to number and push to data array
                const rowValues = Object.values(row).map(value => parseFloat(value));
                data.push(rowValues);
            })
            .on('end', () => {
                resolve(data);
            })
            .on('error', (err) => {
                reject(err);
            });
    });
}

// Example usage:
readColumns('yourfile.csv')
    .then(data => console.log(data))
    .catch(error => console.error(error));
```

### Explanation:
1. **Imports**: We use `fs` for reading files and `csv-parse` for parsing CSV files. Make sure you have `csv-parse` installed (`npm install csv-parse`).
2. **Function Definition**: The function `readColumns` returns a promise that resolves with a 2D array of numbers.
3. **Reading File**: We create a readable stream from the file using `fs.createReadStream`.
4. **Parsing CSV**: We pipe the stream into `csv-parse` which converts the CSV rows into objects.
5. **Handling Data**: We check if the current row contains the `/` character. If it doesn't, we skip the row. Once we find the divider, we convert each column value to a number and push it to the `data` array.
6. **Error Handling**: We handle errors using `.on('error')`.

This TypeScript code assumes that the CSV file has headers and that the numerical values are in the columns following the divider line. Adjustments may be needed based on the actual structure of your CSV file.