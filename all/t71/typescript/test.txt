Sure, here is how you can translate the Python unittest test class into a TypeScript test case using Jest:

```typescript
import * as fs from 'fs';
import { readColumns } from './read-columns'; // Adjust the path accordingly

describe('readColumns', () => {
  it('should read numerical columns from a file starting from the line after the last line containing \'/\'', async () => {
    const fileName = 'path/to/your/file.txt'; // Replace with your actual file path
    const mockFileContent = `
      line1
      line2/
      line3
      1 2 3
      4 5 6
    `;

    // Create a temporary file for testing
    const tempFilePath = '/tmp/tempfile.txt';
    fs.writeFileSync(tempFilePath, mockFileContent);

    try {
      const result = await readColumns(tempFilePath);
      expect(result).toEqual([
        [1, 2, 3],
        [4, 5, 6]
      ]);
    } finally {
      // Clean up the temporary file
      fs.unlinkSync(tempFilePath);
    }
  });

  it('should throw an error if the file does not contain any \'/\' character', async () => {
    const fileName = 'path/to/your/file.txt'; // Replace with your actual file path
    const mockFileContent = `
      line1
      line2
      line3
      1 2 3
      4 5 6
    `;

    // Create a temporary file for testing
    const tempFilePath = '/tmp/tempfile.txt';
    fs.writeFileSync(tempFilePath, mockFileContent);

    try {
      await readColumns(tempFilePath);
      fail('Expected an error to be thrown');
    } catch (error) {
      expect(error.message).toBe('The file does not contain any \'=\' character.');
    } finally {
      // Clean up the temporary file
      fs.unlinkSync(tempFilePath);
    }
  });
});
```

### Explanation:
1. **Imports**: Import necessary modules (`fs` for file operations and the function under test).
2. **Describe Block**: Use `describe` to group related tests.
3. **It Blocks**: Use `it` to define individual test cases.
4. **Mock File Content**: Create a mock file content string that simulates the content of the file being tested.
5. **Temporary File**: Write the mock file content to a temporary file and clean it up after the test.
6. **Assertions**: Use `expect` to assert the expected behavior of the function.
7. **Error Handling**: Test for the expected error message when the file does not contain the specified character.

Make sure to adjust the file paths and the mock file content according to your specific requirements.