Sure! Below is the equivalent TypeScript function signature for the provided Python code:

```typescript
import * as fs from 'fs';
import { promisify } from 'util';

const readFile = promisify(fs.readFile);

/**
 * Reads numerical columns from a file starting from the line after the last line containing '/'.
 *
 * @param file_name - The name of the file to read.
 * @returns A Promise that resolves to a 2D array of numbers.
 * @throws Will throw an error if the file does not contain any '/' character.
 */
async function readColumns(file_name: string): Promise<number[][]> {
    // Your implementation here
}
```

### Explanation:
1. **Imports**: We use `fs` from Node.js to handle file operations and `promisify` from `util` to convert callback-based functions into promise-based ones.
2. **Function Signature**:
   - The function `readColumns` takes a single parameter `file_name` of type `string`.
   - It returns a `Promise` that resolves to a 2D array of numbers (`number[][]`).
   - The function throws an error if the file does not contain any `'/'` character.

This TypeScript version maintains the same functionality and structure as the original Python function while leveraging TypeScript's type system and asynchronous programming capabilities.