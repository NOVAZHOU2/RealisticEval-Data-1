Sure! Below is the equivalent C++ code with the same functionality and comments:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

/**
 * @brief Reads numerical columns from a file starting from the line after the last line containing '/'.
 *
 * @param file_name The name of the file to read.
 * @return std::vector<std::vector<double>> A 2D vector containing the numerical question.
 * @throw std::runtime_error If the file does not contain any '/' character.
 */
std::vector<std::vector<double>> read_columns(const std::string& file_name) {
    std::ifstream file(file_name);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open file");
    }

    std::vector<std::vector<double>> data;
    bool found_slash = false;

    std::string line;
    while (getline(file, line)) {
        if (line.find('/') != std::string::npos) {
            found_slash = true;
        } else if (found_slash) {
            std::istringstream iss(line);
            std::vector<double> row;
            double value;
            while (iss >> value) {
                row.push_back(value);
            }
            data.push_back(row);
        }
    }

    if (!found_slash) {
        throw std::runtime_error("File does not contain any '/' character");
    }

    return data;
}

int main() {
    try {
        auto result = read_columns("example.txt");
        for (const auto& row : result) {
            for (double value : row) {
                std::cout << value << " ";
            }
            std::cout << std::endl;
        }
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Signature**: The function `read_columns` reads numerical columns from a file starting from the line after the last line containing a `/`. It returns a 2D vector of doubles.
2. **File Handling**: The function opens the file using `std::ifstream` and checks if it is successfully opened.
3. **Reading Lines**: It iterates through each line of the file. If a line contains a `/`, it sets the `found_slash` flag to true. After finding the first line without a `/`, it starts reading numbers into a row vector and adds this row to the main data structure.
4. **Error Handling**: If no line contains a `/`, it throws an exception indicating that the file does not contain any `/`.
5. **Main Function**: The `main` function demonstrates how to call `read_columns` and handle potential exceptions.