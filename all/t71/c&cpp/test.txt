Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class is converted into a C++ test class, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <stdexcept>
#include <cassert>

// Function to read numerical columns from a file starting from the line after the last line containing '/'
std::vector<std::vector<double>> read_columns(const std::string& file_name) {
    // Initialize a variable to track the last slash line index
    int last_slash_index = -1;
    std::vector<std::string> lines;

    // Read all lines from the file
    std::ifstream file(file_name);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open file");
    }
    std::string line;
    while (std::getline(file, line)) {
        lines.push_back(line);
    }
    file.close();

    // Find the index of the last line that contains the "/" character
    for (int i = 0; i < lines.size(); ++i) {
        if (lines[i].find('/') != std::string::npos) {
            last_slash_index = i;
        }
    }

    // If no "/" character was found, raise an error
    if (last_slash_index == -1) {
        throw std::runtime_error("File does not contain '/' character");
    }

    // Read the remaining lines in the file, starting from the line after the last "/"
    std::vector<std::string> data_lines;
    for (int i = last_slash_index + 1; i < lines.size(); ++i) {
        std::string trimmed_line = lines[i];
        trimmed_line.erase(0, trimmed_line.find_first_not_of(" \t\n\r\f\v")); // Trim leading spaces
        trimmed_line.erase(trimmed_line.find_last_not_of(" \t\n\r\f\v") + 1); // Trim trailing spaces
        if (!trimmed_line.empty() && !trimmed_line.starts_with('!')) {
            data_lines.push_back(trimmed_line);
        }
    }

    // If no valid lines remain, return an empty vector
    if (data_lines.empty()) {
        return {};
    }

    // Get the row and column count by counting the number of columns in the first line
    int col_count = std::count(data_lines[0].begin(), data_lines[0].end(), ' ') + 1;

    // Create an empty vector of vectors of the required size
    std::vector<std::vector<double>> arr(data_lines.size(), std::vector<double>(col_count));

    // Loop through the lines in the file
    for (size_t i = 0; i < data_lines.size(); ++i) {
        std::istringstream iss(data_lines[i]);
        double num;
        int j = 0;
        while (iss >> num) {
            arr[i][j++] = num;
            if (iss.peek() == ' ') {
                iss.ignore();
            }
        }
    }

    // Return the array
    return arr;
}

TEST_CASE("Test read_columns function", "[read_columns]") {
    const std::string test_file = "test_file.txt";

    SECTION("Basic functionality") {
        // Test reading a file with a valid structure and numerical question
        std::string content = R"(
Line 1
Line 2
/
1.0 2.0 3.0
4.0 5.0 6.0
)";
        std::ofstream file(test_file);
        file << content;
        file.close();

        std::vector<std::vector<double>> result = read_columns(test_file);
        std::vector<std::vector<double>> expected_result = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}};
        REQUIRE(result == expected_result);

        if (std::remove(test_file.c_str()) != 0) {
            std::cerr << "Failed to remove test file." << std::endl;
        }
    }

    SECTION("No slash character") {
        // Test that a runtime_error is raised if no '/' character is found
        std::string content = R"(
Line 1
Line 2
Line 3
)";
        std::ofstream file(test_file);
        file << content;
        file.close();

        REQUIRE_THROWS_AS(read_columns(test_file), std::runtime_error);

        if (std::remove(test_file.c_str()) != 0) {
            std::cerr << "Failed to remove test file." << std::endl;
        }
    }

    SECTION("File with comments and empty lines") {
        // Test handling of comments and empty lines
        std::string content = R"(
Line 1
/
! This is a comment
1.0 2.0 3.0

4.0 5.0 6.0
! Another comment
)";
        std::ofstream file(test_file);
        file << content;
        file.close();

        std::vector<std::vector<double>> result = read_columns(test_file);
        std::vector<std::vector<double>> expected_result = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}};
        REQUIRE(result == expected_result);

        if (std::remove(test_file.c_str()) != 0) {
            std::cerr << "Failed to remove test file." << std::endl;
        }
    }

    SECTION("Different number of columns") {
        // Test that the function handles different number of columns correctly
        std::string content = R"(
Line 1
/
1.0 2.0
3.0 4.0
5.0 6.0 7.0
)";
        std::ofstream file(test_file);
        file << content;
        file.close();

        REQUIRE_THROWS_AS(read_columns(test_file), std::runtime_error);

        if (std::remove(test_file.c_str()) != 0) {
            std::cerr << "Failed to remove test file." << std::endl;
        }
    }

    SECTION("Empty file") {
        // Test handling of an empty file
        std::string content = "";
        std::ofstream file(test_file);
        file << content;
        file.close();

        REQUIRE_THROWS_AS(read_columns(test_file), std::runtime_error);

        if (std::remove(test_file.c_str()) != 0) {
            std::cerr << "Failed to remove test file." << std::endl;
        }
    }
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `read_columns(file_name: str) -> np.array` is converted to `std::vector<std::vector<double>> read_columns(const std::string& file_name)` in C++.
   - The return type `np.array` is translated to `std::vector<std::vector<double>>`.

2. **Catch2 Testing Framework**:
   - The `TEST_CASE` macro is used to define the test case.
   - The `SECTION` macro is used to define individual test sections within the test case.

3. **File Reading and Writing**:
   - Files are created and written using `std::ofstream`.
   - Files are read using `std::ifstream`.

4. **Assertions**:
   - `REQUIRE` is used for assertions in Catch2.
   - `REQUIRE_THROWS_AS` is used to check for specific exceptions.

5. **Temporary File Handling**:
   - A temporary file is created and cleaned up after each test section using `std::remove`.

6. **Multi-Line Strings**:
   - Raw string literals (`R"(...)"`) are used to write multi-line strings directly into the test files.

This C++ code preserves the original functionality and logic of the Python unittest class while adhering to C++ standards and practices.