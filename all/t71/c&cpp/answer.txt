Sure, here's how you can translate your Python function into C++ using the `fstream` library for file handling and `std::vector` for dynamic arrays:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

// Function to split string based on delimiter
std::vector<std::string> split(const std::string &s, char delimiter) {
    std::vector<std::string> tokens;
    std::string token;
    std::istringstream tokenStream(s);
    while (getline(tokenStream, token, delimiter)) {
        tokens.push_back(token);
    }
    return tokens;
}

std::vector<std::vector<double>> readColumns(const std::string &fileName) {
    std::ifstream file(fileName);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open file");
    }

    std::vector<std::vector<double>> data;
    bool foundSlash = false;

    std::string line;
    while (getline(file, line)) {
        if (line.find('/') != std::string::npos) {
            foundSlash = true;
            continue; // Skip lines until after the last line with '/'
        }

        if (!foundSlash) continue; // Ignore lines before the slash

        std::vector<std::string> tokens = split(line, ' ');
        std::vector<double> row;

        for (const auto &token : tokens) {
            try {
                double value = std::stod(token);
                row.push_back(value);
            } catch (...) {
                // Handle non-numeric values if necessary
                std::cerr << "Non-numeric value encountered in line: " << line << std::endl;
            }
        }

        data.push_back(row);
    }

    if (!foundSlash) {
        throw std::runtime_error("File does not contain any '/' character");
    }

    return data;
}

int main() {
    try {
        std::vector<std::vector<double>> result = readColumns("your_file.txt");

        // Print the result for demonstration purposes
        for (const auto &row : result) {
            for (double val : row) {
                std::cout << val << " ";
            }
            std::cout << std::endl;
        }
    } catch (const std::exception &e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **split Function**: This helper function splits a string into tokens based on a specified delimiter (`' '` in this case).
2. **readColumns Function**:
   - Opens the file and reads it line by line.
   - Skips lines until it finds a line containing the `/` character.
   - Parses the remaining lines to extract numerical values.
   - Stores these values in a `std::vector<std::vector<double>>`.
3. **main Function**:
   - Calls `readColumns` with a filename.
   - Prints the resulting data to demonstrate that it works correctly.

This code assumes that the input file contains numeric values separated by spaces and that the file is well-formed according to the problem description. Adjustments may be needed based on specific edge cases or requirements.