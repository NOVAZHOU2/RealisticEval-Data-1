Certainly! Hereâ€™s the equivalent JavaScript code with the function signature and JSDoc comments:

```javascript
const fs = require('fs');

/**
 * Reads numerical columns from a file starting from the line after the last line containing '/'.
 *
 * @param {string} fileName - The name of the file to read.
 * @returns {Array<Array<number>>} - A 2D array containing the numerical data.
 * @throws {Error} - If the file does not contain any '/' character.
 */
function readColumns(fileName) {
    // Initialize a variable to track the last slash line index
    let lastSlashIndex = null;

    const lines = fs.readFileSync(fileName, 'utf8').split('\n');

    // Find the index of the last line that contains the "/" character
    for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('/')) {
            lastSlashIndex = i;
        }
    }

    // If no "/" character was found, throw an error
    if (lastSlashIndex === null) {
        throw new Error("File does not contain '/' character");
    }

    // Read the remaining lines in the file, starting from the line after the last "/"
    const dataLines = lines.slice(lastSlashIndex + 1);

    // Remove any empty lines or lines that start with a comment character
    const filteredDataLines = dataLines.filter(line => line.trim() && !line.trim().startsWith('!'));

    // If no valid lines remain, return an empty array
    if (filteredDataLines.length === 0) {
        return [];
    }

    // Get the row and column count by counting the number of columns in the first line
    const colCount = filteredDataLines[0].split(' ').length;

    // Create an empty array of the required size
    const arr = new Array(filteredDataLines.length).fill(null).map(() => new Array(colCount).fill(0));

    // Loop through the lines in the file
    for (let i = 0; i < filteredDataLines.length; i++) {
        // Split the line into numbers and convert them to floats
        const nums = filteredDataLines[i].split(' ').map(Number);

        // Store the numbers in the array
        arr[i] = nums;
    }

    // Return the array
    return arr;
}

// Example usage
try {
    const result = readColumns('example.txt');
    console.log(result);
} catch (error) {
    console.error(error.message);
}
```

### Explanation:
1. **Importing `fs` Module**: The `fs` module is used to read files synchronously.
2. **Reading File**: The file is read using `fs.readFileSync`, and the content is split into lines.
3. **Finding Last Slash Index**: Iterate over the lines to find the index of the last line containing `/`.
4. **Filtering Data Lines**: Filter out empty lines and lines starting with `!`.
5. **Creating 2D Array**: Initialize a 2D array based on the number of rows and columns.
6. **Populating Array**: Parse each line into numbers and store them in the array.
7. **Returning Result**: Return the resulting 2D array.
8. **JSDoc Comments**: The function is documented using JSDoc format, providing clear descriptions of parameters, return values, and exceptions.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JavaScript documentation standards.