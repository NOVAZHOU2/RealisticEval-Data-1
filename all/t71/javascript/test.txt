Sure! Below is the equivalent JavaScript test case using Jest for the provided Python unittest test class:

```javascript
const fs = require('fs');
const path = require('path');

function readColumns(fileName) {
    const data = fs.readFileSync(path.resolve(__dirname, fileName), 'utf8');
    const lines = data.split('\n');
    let startIndex = -1;

    for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('/')) {
            startIndex = i + 1;
            break;
        }
    }

    if (startIndex === -1) {
        throw new Error('File does not contain any \'/\' character.');
    }

    return lines.slice(startIndex).map(line => line.trim().split(/\s+/).map(Number));
}

describe('readColumns', () => {
    it('should read numerical columns correctly', () => {
        // Mock the file content
        const mockFilePath = path.join(__dirname, 'mock.txt');
        const mockContent = `line1\nline2/with/some/data\n4 5 6\n7 8 9`;
        fs.writeFileSync(mockFilePath, mockContent);

        const result = readColumns(mockFilePath);
        expect(result).toEqual([[4, 5, 6], [7, 8, 9]]);

        // Clean up the mock file
        fs.unlinkSync(mockFilePath);
    });

    it('should throw an error if no \'/\' character is found', () => {
        // Mock the file content without a '/'
        const mockFilePath = path.join(__dirname, 'mock_no_slash.txt');
        const mockContent = `line1\nline2\n3 4 5`;
        fs.writeFileSync(mockFilePath, mockContent);

        expect(() => readColumns(mockFilePath)).toThrow('File does not contain any \'/\' character.');

        // Clean up the mock file
        fs.unlinkSync(mockFilePath);
    });
});
```

### Explanation:
1. **Mocking File Content**: We create mock files (`mock.txt` and `mock_no_slash.txt`) with specific content to simulate reading from a file.
2. **Testing Functionality**:
   - The first test checks if the function reads the numerical columns correctly.
   - The second test checks if the function throws an error when no `/` character is found in the file.
3. **Cleanup**: After each test, we remove the mock files to ensure there are no side effects between tests.

This Jest test suite covers the basic functionality and error handling of the `readColumns` function.