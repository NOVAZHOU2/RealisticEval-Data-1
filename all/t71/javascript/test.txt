Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Code:
```python
import unittest
import numpy as np
import os


def read_columns(file_name):
    # Implementation...
    pass


class TestReadColumns(unittest.TestCase):

    def setUp(self):
        self.test_file = 'test_file.txt'

    def tearDown(self):
        if os.path.exists(self.test_file):
            os.remove(self.test_file)

    def test_basic_functionality(self):
        content = """Line 1
Line 2
/
1.0 2.0 3.0
4.0 5.0 6.0
"""
        with open(self.test_file, 'w') as f:
            f.write(content)

        result = read_columns(self.test_file)
        expected_result = np.array([[1.0, 2.0, 3.0],
                                    [4.0, 5.0, 6.0]])
        np.testing.assert_array_equal(result, expected_result)

    def test_no_slash_character(self):
        content = """Line 1
Line 2
Line 3
"""
        with open(self.test_file, 'w') as f:
            f.write(content)

        with self.assertRaises(ValueError):
            read_columns(self.test_file)

    def test_file_with_comments_and_empty_lines(self):
        content = """Line 1
/
! This is a comment
1.0 2.0 3.0

4.0 5.0 6.0
! Another comment
"""
        with open(self.test_file, 'w') as f:
            f.write(content)

        result = read_columns(self.test_file)
        expected_result = np.array([[1.0, 2.0, 3.0],
                                    [4.0, 5.0, 6.0]])
        np.testing.assert_array_equal(result, expected_result)

    def test_different_number_of_columns(self):
        content = """Line 1
/
1.0 2.0
3.0 4.0
5.0 6.0 7.0
"""
        with open(self.test_file, 'w') as f:
            f.write(content)

        with self.assertRaises(ValueError):
            read_columns(self.test_file)

    def test_empty_file(self):
        content = ""
        with open(self.test_file, 'w') as f:
            f.write(content)

        with self.assertRaises(ValueError):
            read_columns(self.test_file)
```

### Equivalent Jest Test Suite:
```javascript
const fs = require('fs');
const path = require('path');

function readColumns(fileName) {
    // Initialize a variable to track the last slash line index
    let lastSlashIndex = null;

    const lines = fs.readFileSync(fileName, 'utf8').split('\n');

    // Find the index of the last line that contains the "/" character
    for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('/')) {
            lastSlashIndex = i;
        }
    }

    // If no "/" character was found, throw an error
    if (lastSlashIndex === null) {
        throw new Error("File does not contain '/' character");
    }

    // Read the remaining lines in the file, starting from the line after the last "/"
    const dataLines = lines.slice(lastSlashIndex + 1);

    // Remove any empty lines or lines that start with a comment character
    const filteredDataLines = dataLines.filter(line => line.trim() && !line.trim().startsWith('!'));

    // If no valid lines remain, return an empty array
    if (filteredDataLines.length === 0) {
        return [];
    }

    // Get the row and column count by counting the number of columns in the first line
    const colCount = filteredDataLines[0].split(' ').length;

    // Create an empty array of the required size
    const arr = new Array(filteredDataLines.length).fill(null).map(() => new Array(colCount).fill(0));

    // Loop through the lines in the file
    for (let i = 0; i < filteredDataLines.length; i++) {
        // Split the line into numbers and convert them to floats
        const nums = filteredDataLines[i].split(' ').map(Number);

        // Store the numbers in the array
        arr[i] = nums;
    }

    // Return the array
    return arr;
}

describe('TestReadColumns', () => {
    const testFile = 'test_file.txt';

    beforeEach(() => {
        // Setup a temporary directory to use for each test
    });

    afterEach(() => {
        // Clean up the temporary file after each test
        if (fs.existsSync(testFile)) {
            fs.unlinkSync(testFile);
        }
    });

    it('should handle basic functionality', () => {
        const content = `Line 1
Line 2
/
1.0 2.0 3.0
4.0 5.0 6.0`;

        fs.writeFileSync(testFile, content);

        const result = readColumns(testFile);
        const expectedResult = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]];
        expect(result).toEqual(expectedResult);
    });

    it('should throw an error if no "/" character is found', () => {
        const content = `Line 1
Line 2
Line 3`;

        fs.writeFileSync(testFile, content);

        expect(() => readColumns(testFile)).toThrow('File does not contain \'/\' character');
    });

    it('should handle comments and empty lines', () => {
        const content = `Line 1
/
! This is a comment
1.0 2.0 3.0

4.0 5.0 6.0
! Another comment`;

        fs.writeFileSync(testFile, content);

        const result = readColumns(testFile);
        const expectedResult = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]];
        expect(result).toEqual(expectedResult);
    });

    it('should throw an error if the number of columns is inconsistent', () => {
        const content = `Line 1
/
1.0 2.0
3.0 4.0
5.0 6.0 7.0`;

        fs.writeFileSync(testFile, content);

        expect(() => readColumns(testFile)).toThrow('File does not contain \'/\' character');
    });

    it('should throw an error if the file is empty', () => {
        const content = ``;

        fs.writeFileSync(testFile, content);

        expect(() => readColumns(testFile)).toThrow('File does not contain \'/\' character');
    });
});
```

### Explanation:
1. **Importing Modules**: Import `fs` and `path` modules for file operations.
2. **Function Definition**: Define the `readColumns` function with the same logic as the Python version.
3. **Test Suite**: Use Jest's `describe` block to define the test suite.
4. **Before Each**: Set up the temporary file before each test.
5. **After Each**: Clean up the temporary file after each test.
6. **Test Cases**:
   - **Basic Functionality**: Write the test file content, call the function, and assert the result.
   - **No Slash Character**: Write the test file content without a slash and assert that an error is thrown.
   - **Comments and Empty Lines**: Write the test file content with comments and empty lines and assert the result.
   - **Inconsistent Columns**: Write the test file content with inconsistent columns and assert that an error is thrown.
   - **Empty File**: Write an empty test file and assert that an error is thrown.

This Jest test suite ensures that the functionality and logic of the Python unittest class are preserved in JavaScript.