Hereâ€™s the equivalent Python code for the provided TypeScript function that converts a Uint8Array to a Base64-encoded string. The comments from the TypeScript code are preserved in the Python version.
TypeScript Code
typescript
/**
 * The Unit8 array is converted into 4 Base64 characters as a group of 3 bytes for processing,
 * and the output of less than 3 is filled with =, and the resulting Base64 string is returned
 *
 * @param {Uint8Array} uint8Array - The Uint8Array to be converted.
 * @returns {string} - The resulting Base64-encoded string.
 */
function uint8ArrayToBase64(uint8Array: Uint8Array): string {
    let base64 = "";
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    for (let i = 0; i < uint8Array.length; i += 3) {
        const a = uint8Array[i];
        const b = uint8Array[i + 1] || 0;  // Use 0 if b is undefined
        const c = uint8Array[i + 2] || 0;  // Use 0 if c is undefined

        const index1 = a >> 2;
        const index2 = ((a & 0x03) << 4) | (b >> 4);
        const index3 = ((b & 0x0f) << 2) | (c >> 6);
        const index4 = c & 0x3f;

        base64 +=
            characters[index1] +
            characters[index2] +
            (i + 1 < uint8Array.length ? characters[index3] : "=") +
            (i + 2 < uint8Array.length ? characters[index4] : "=");
    }

    return base64;
}
Python Code
python
"""
The Uint8 array is converted into 4 Base64 characters as a group of 3 bytes for processing,
and the output of less than 3 is filled with =, and the resulting Base64 string is returned.

:param bytearray uint8_array: The bytearray to be converted.
:return: The resulting Base64-encoded string.
:rtype: str
"""

def uint8_array_to_base64(uint8_array: bytearray) -> str:
    base64 = ""
    characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

    for i in range(0, len(uint8_array), 3):
        a = uint8_array[i]
        b = uint8_array[i + 1] if i + 1 < len(uint8_array) else 0  # Use 0 if b is undefined
        c = uint8_array[i + 2] if i + 2 < len(uint8_array) else 0  # Use 0 if c is undefined

        index1 = a >> 2
        index2 = ((a & 0x03) << 4) | (b >> 4)
        index3 = ((b & 0x0f) << 2) | (c >> 6)
        index4 = c & 0x3f

        base64 += (
            characters[index1] +
            characters[index2] +
            (characters[index3] if i + 1 < len(uint8_array) else "=") +
            (characters[index4] if i + 2 < len(uint8_array) else "=")
        )

    return base64
Key Changes Made:
Function Signature:
Changed from TypeScript syntax to Python function syntax. The TypeScript Uint8Array is translated to bytearray in Python.
Comments and Documentation:
Converted TypeScript JSDoc comments to a docstring format in Python.
Iteration:
Used Python's range() function for the loop, with a step of 3.
Handling Undefined Values:
Used a conditional expression to set b and c to 0 if they are undefined.
String Concatenation:
Python uses += for string concatenation, similar to TypeScript.
Return Statement:
The return statement remains the same, returning the Base64 string.
This Python function now performs the same functionality as the original TypeScript function, converting a byte array into a Base64-encoded string. Let me know if you have any further questions!