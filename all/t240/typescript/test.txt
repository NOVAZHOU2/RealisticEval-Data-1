Sure! Below is the equivalent TypeScript test case using Jest for the given Python unittest test class:

```typescript
import { describe, it, expect } from '@jest/globals';
import { genTimeoutTimedelta } from './genTimeoutTimedelta'; // Adjust the path accordingly

describe('genTimeoutTimedelta', () => {
  it('should convert "1d 2h 3m 4s 500ms" to correct timedelta', () => {
    const result = genTimeoutTimedelta("1d 2h 3m 4s 500ms");
    expect(result).toEqual({
      days: 1,
      hours: 2,
      minutes: 3,
      seconds: 4,
      milliseconds: 500
    });
  });

  it('should convert "2h 30m" to correct timedelta', () => {
    const result = genTimeoutTimedelta("2h 30m");
    expect(result).toEqual({
      days: 0,
      hours: 2,
      minutes: 30,
      seconds: 0,
      milliseconds: 0
    });
  });

  it('should convert "1s" to correct timedelta', () => {
    const result = genTimeoutTimedelta("1s");
    expect(result).toEqual({
      days: 0,
      hours: 0,
      minutes: 0,
      seconds: 1,
      milliseconds: 0
    });
  });

  it('should convert "500ms" to correct timedelta', () => {
    const result = genTimeoutTimedelta("500ms");
    expect(result).toEqual({
      days: 0,
      hours: 0,
      minutes: 0,
      seconds: 0,
      milliseconds: 500
    });
  });

  it('should handle empty string', () => {
    const result = genTimeoutTimedelta("");
    expect(result).toEqual({
      days: 0,
      hours: 0,
      minutes: 0,
      seconds: 0,
      milliseconds: 0
    });
  });

  it('should throw error for invalid input', () => {
    expect(() => genTimeoutTimedelta("invalid_input")).toThrowError();
  });
});
```

### Explanation:
- **`describe`**: Groups related tests together.
- **`it`**: Defines a single test case.
- **`expect`**: Asserts that the result of the function matches the expected value.
- **`toEqual`**: Compares two objects deeply to check if they are equal.
- **`toThrowError`**: Checks if the function throws an error when called with invalid input.

Make sure you have Jest installed in your project and properly configured. You can install Jest using npm or yarn:

```bash
npm install --save-dev jest
```

or

```bash
yarn add --dev jest
```

Then, run your tests using:

```bash
npx jest
```

or

```bash
yarn jest
```