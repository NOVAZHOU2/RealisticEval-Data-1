Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
// Import necessary packages
const { Duration } = require('luxon');

/**
 * Converts a time duration string into a Luxon Duration object.
 * The input string can include days (d), hours (h), minutes (m), seconds (s), and milliseconds (ms).
 * e.g., "1d 2h 3m 4s 500ms"
 * Each unit should be specified by an integer followed by its corresponding unit letter.
 *
 * @param {string} timeString - A string representing the time duration.
 * @returns {Duration} A Luxon Duration object representing the input duration.
 */
function genTimeoutDuration(timeString) {
    // Define an object to hold all our values
    const timeValues = { days: 0, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };

    // Regular expression to find all parts of the time string
    const parts = timeString.match(/(\d+)([dhms]{1,2})/g);

    // Process each found part
    parts.forEach(part => {
        const match = part.match(/(\d+)([dhms]{1,2})/);
        const amount = parseInt(match[1], 10);
        const unit = match[2];

        if (unit === 'd') {
            timeValues.days += amount;
        } else if (unit === 'h') {
            timeValues.hours += amount;
        } else if (unit === 'm') {
            timeValues.minutes += amount;
        } else if (unit === 's') {
            timeValues.seconds += amount;
        } else if (unit === 'ms') {
            timeValues.milliseconds += amount;
        }
    });

    // Create a Luxon Duration object using the extracted values
    return Duration.fromObject(timeValues);
}

// Example usage
console.log(genTimeoutDuration("1d 2h 3m 4s 500ms"));
```

### Notes:
1. **Dependencies**: This JavaScript code uses `luxon` for handling durations. You will need to install this package using npm or yarn.
   ```bash
   npm install luxon
   ```

2. **JSDoc Comments**: The comments have been rewritten to conform to JSDoc standards, providing clear documentation for the function parameters and return type.

3. **Regular Expressions**: The regular expressions used in JavaScript are similar to those in Python.

4. **Luxon Duration**: `luxon.Duration` is used to create a duration object with the parsed values.

This conversion ensures that the JavaScript version closely mirrors the functionality and structure of the original Python code, including proper documentation.