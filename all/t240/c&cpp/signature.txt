Certainly! Below is the equivalent C++ code for the given Python function, including appropriate comments and documentation:

```cpp
#include <iostream>
#include <string>
#include <regex>
#include <chrono>

// Function to convert a time duration string into a std::chrono::milliseconds object
std::chrono::milliseconds gen_timeout_duration(const std::string& time_string) {
    /*
     * Converts a time duration string into a std::chrono::milliseconds object.
     * The input string can include days (d), hours (h), minutes (m), seconds (s), and milliseconds (ms).
     * Example: "1d 2h 3m 4s 500ms"
     * Each unit should be specified by an integer followed by its corresponding unit letter.
     *
     * Args:
     *     time_string (const std::string&): A string representing the time duration.
     *
     * Returns:
     *     std::chrono::milliseconds: A std::chrono::milliseconds object representing the input duration.
     */

    // Define variables to hold all our values
    int days = 0, hours = 0, minutes = 0, seconds = 0, milliseconds = 0;

    // Regular expression to find all parts of the time string
    std::regex time_regex(R"((\d+)([dhms]{1,2}))");
    std::smatch matches;

    // Process each found part
    auto begin = std::sregex_iterator(time_string.begin(), time_string.end(), time_regex);
    auto end = std::sregex_iterator();

    for (std::sregex_iterator i = begin; i != end; ++i) {
        std::smatch match = *i;
        int amount = std::stoi(match[1].str());
        std::string unit = match[2].str();

        // Update the respective variable based on the unit
        if (unit == "d") {
            days += amount;
        } else if (unit == "h") {
            hours += amount;
        } else if (unit == "m") {
            minutes += amount;
        } else if (unit == "s") {
            seconds += amount;
        } else if (unit == "ms") {
            milliseconds += amount;
        }
    }

    // Convert days, hours, minutes, and seconds into milliseconds
    const auto days_to_ms = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::days(days));
    const auto hours_to_ms = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::hours(hours));
    const auto minutes_to_ms = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::minutes(minutes));
    const auto seconds_to_ms = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::seconds(seconds));

    // Sum up all the durations
    auto total_ms = days_to_ms + hours_to_ms + minutes_to_ms + seconds_to_ms + std::chrono::milliseconds(milliseconds);

    return total_ms;
}

int main() {
    std::string time_string = "1d 2h 3m 4s 500ms";
    auto result = gen_timeout_duration(time_string);
    std::cout << "Total duration: " << result.count() << " milliseconds" << std::endl;
    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `<iostream>` for input/output operations.
   - `<string>` for string manipulation.
   - `<regex>` for regular expressions.
   - `<chrono>` for handling time durations.

2. **Function Documentation**:
   - Multi-line comments (`/* ... */`) are used to document the function, including its purpose, arguments, and return value.

3. **Regular Expression**:
   - `std::regex time_regex(R"((\d+)([dhms]{1,2}))")`: Matches the pattern of numbers followed by units (e.g., "1d", "2h").

4. **Processing the Time String**:
   - Uses `std::sregex_iterator` to iterate over all matches in the input string.
   - Converts matched strings to integers and updates the respective variables.

5. **Converting Units to Milliseconds**:
   - Converts days, hours, minutes, and seconds to milliseconds using `std::chrono::duration_cast`.

6. **Summing Up Durations**:
   - Sums up all the durations to get the total duration in milliseconds.

7. **Main Function**:
   - Demonstrates the usage of the `gen_timeout_duration` function with a sample time string and prints the result.

This C++ code preserves the original purpose and structure of the Python code while adhering to C++ syntax and documentation standards.