To convert your Python unittest test class to TypeScript using Jest, you need to follow these steps:

1. Install Jest and TypeScript if you haven't already.
2. Write the TypeScript equivalent of your Python function.
3. Write the corresponding Jest test cases.

Here's how you can do it:

### Step 1: Install Jest and TypeScript

First, make sure you have Node.js installed. Then, install Jest and TypeScript using npm:

```bash
npm init -y
npm install --save-dev jest typescript ts-jest @types/jest @types/node
```

Create a `tsconfig.json` file for TypeScript configuration:

```json
{
  "compilerOptions": {
    "target": "ES6",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist"
  },
  "include": ["src"]
}
```

### Step 2: Write the TypeScript Equivalent of Your Function

Create a file named `get3DCoordinates.ts` in the `src` directory with the following content:

```typescript
import * as np from 'numpy';

export function get3DCoordinates(K: np.ndarray, d: number, x: number, y: number): np.ndarray {
    /**
     * Converts 2D pixel coordinates into 3D world coordinates using camera intrinsic parameters and depth.
     * @param K ((3,3) np.array): Camera intrinsic matrix
     * @param d (number): Depth (distance along z-axis)
     * @param x (number): Pixel x coordinate
     * @param y (number): Pixel y coordinate
     * @returns {np.ndarray}: x, y, z 3D point coordinates in camera RDF coordinates
     */
    const fx = K[0][0];
    const fy = K[1][1];
    const cx = K[0][2];
    const cy = K[1][2];

    const X = (x - cx) * d / fx;
    const Y = (y - cy) * d / fy;
    const Z = d;

    return np.array([X, Y, Z]);
}
```

### Step 3: Write the Corresponding Jest Test Cases

Create a file named `get3DCoordinates.test.ts` in the `src` directory with the following content:

```typescript
import { get3DCoordinates } from './get3DCoordinates';
import * as np from 'numpy';

describe('get3DCoordinates', () => {
    it('converts 2D pixel coordinates into 3D world coordinates correctly', () => {
        const K = np.array([
            [500, 0, 320],
            [0, 500, 240],
            [0, 0, 1]
        ]);
        const d = 10;
        const x = 320;
        const y = 240;

        const result = get3DCoordinates(K, d, x, y);

        expect(result).toEqual(np.array([0, 0, 10]));
    });

    it('handles different depth values correctly', () => {
        const K = np.array([
            [500, 0, 320],
            [0, 500, 240],
            [0, 0, 1]
        ]);
        const d = 20;
        const x = 320;
        const y = 240;

        const result = get3DCoordinates(K, d, x, y);

        expect(result).toEqual(np.array([0, 0, 20]));
    });
});
```

### Running the Tests

Finally, run the tests using Jest:

```bash
npx jest
```

This will execute the Jest test cases and provide you with the results. Make sure that the `numpy` package is available in your TypeScript environment, or you might need to mock or replace it with an appropriate alternative for testing purposes.