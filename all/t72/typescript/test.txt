Certainly! Here’s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. We will use Jest’s assertion methods to replace `np.testing.assert_array_almost_equal`.

First, let's define the `get3DCoordinates` function and the test class using Jest.

### TypeScript Code

```typescript
import { expect } from '@jest/globals';
import * as math from 'mathjs';

// Define the function get3DCoordinates
function get3DCoordinates(K: number[][], d: number, x: number, y: number): [number, number, number] {
    // Step 1: Convert pixel coordinates to normalized device coordinates (NDC)
    const cx = K[0][2];
    const cy = K[1][2];
    const fx = K[0][0];
    const fy = K[1][1];

    const NDC_x = (x - cx) / fx;
    const NDC_y = (y - cy) / fy;

    // Step 2: Get the 3D world coordinates (W)
    const W_x = NDC_x * d;
    const W_y = NDC_y * d;
    const W_z = d;

    return [W_x, W_y, W_z];
}

// Jest test suite
describe('TestGet3DCoordinates', () => {
    let K: number[][];

    beforeEach(() => {
        // Define a common intrinsic matrix for testing
        K = [
            [1000, 0, 320],
            [0, 1000, 240],
            [0, 0, 1]
        ];
    });

    it('test_center_coordinates', () => {
        // Test with center pixel coordinates where x and y should map to zero in NDC.
        const result = get3DCoordinates(K, 100, 320, 240);
        expect(result).toEqual([0.0, 0.0, 100]);
    });

    it('test_boundary_coordinates', () => {
        // Test with boundary values in the image frame.
        const result = get3DCoordinates(K, 50, 640, 480);
        const expected_x = (640 - 320) / 1000 * 50;
        const expected_y = (480 - 240) / 1000 * 50;
        expect(result).toEqual([expected_x, expected_y, 50]);
    });

    it('test_negative_depth', () => {
        // Test with a negative depth to see if it handles incorrect input properly.
        const result = get3DCoordinates(K, -100, 320, 240);
        expect(result).toEqual([0.0, 0.0, -100]);
    });

    it('test_zero_depth', () => {
        // Test with zero depth which should lead to a zero-length vector.
        const result = get3DCoordinates(K, 0, 320, 240);
        expect(result).toEqual([0.0, 0.0, 0.0]);
    });

    it('test_non_integer_values', () => {
        // Test with non-integer pixel coordinates.
        const result = get3DCoordinates(K, 100, 320.5, 240.5);
        const expected_x = (320.5 - 320) / 1000 * 100;
        const expected_y = (240.5 - 240) / 1000 * 100;
        expect(result).toEqual([expected_x, expected_y, 100]);
    });
});

// Example usage
const KExample: number[][] = [
    [1000, 0, 320],
    [0, 1000, 240],
    [0, 0, 1]
];
const d = 100;
const x = 320;
const y = 240;
console.log(get3DCoordinates(KExample, d, x, y));
```

### Explanation:
1. **Function Definition**:
   - The `get3DCoordinates` function is defined with proper type annotations for the inputs and outputs.

2. **Jest Test Suite**:
   - The `describe` block sets up the test suite named `TestGet3DCoordinates`.
   - The `beforeEach` hook initializes the intrinsic matrix `K` before each test.
   - Each test case uses `it` to define individual test scenarios.
   - Jest’s `expect` method is used to assert the results.

3. **Assertion Methods**:
   - `expect(result).toEqual(expected)` is used to check if the result matches the expected values. This is similar to `np.testing.assert_array_almost_equal` but without the tolerance parameter.

4. **Example Usage**:
   - An example usage of the `get3DCoordinates` function is provided at the end.

This TypeScript code preserves the original functionality and structure of the Python unittests while adapting to Jest’s testing framework and TypeScript’s static type system.