Sure! Below is the equivalent TypeScript code for your Python function:

```typescript
interface Matrix {
    [index: number]: number[];
}

function get3DCoordinates(K: Matrix, d: number, x: number, y: number): number[] {
    /**
     * Converts 2D pixel coordinates into 3D world coordinates using camera intrinsic parameters and depth.
     * @param K - Camera intrinsic matrix (3x3).
     * @param d - Depth (distance along z-axis).
     * @param x - Pixel x-coordinate.
     * @param y - Pixel y-coordinate.
     * @returns 3D point coordinates in camera RDF coordinates.
     */
    
    // Extracting elements from the camera intrinsic matrix K
    const fx = K[0][0];
    const fy = K[1][1];
    const cx = K[0][2];
    const cy = K[1][2];

    // Calculating 3D coordinates
    const X = (x - cx) * d / fx;
    const Y = (y - cy) * d / fy;
    const Z = d;

    return [X, Y, Z];
}
```

### Explanation:
1. **Matrix Interface**: The `Matrix` interface defines a type for a 2D array where each element can be accessed using two indices (`[index: number]: number[]`).

2. **Function Signature**: The `get3DCoordinates` function takes four parameters: `K` (the camera intrinsic matrix), `d` (depth), `x` (pixel x-coordinate), and `y` (pixel y-coordinate). It returns an array of three numbers representing the 3D coordinates.

3. **Extracting Elements**: The elements of the camera intrinsic matrix `K` are extracted using their respective indices.

4. **Calculations**: The 3D coordinates `(X, Y, Z)` are calculated based on the given formulas.

5. **Return Value**: The function returns an array containing the calculated 3D coordinates.

This TypeScript code should work similarly to your original Python function.