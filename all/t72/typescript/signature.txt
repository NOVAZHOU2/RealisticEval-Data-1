Certainly! Hereâ€™s the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Converts 2D pixel coordinates into 3D world coordinates using camera intrinsic parameters and depth.
 * 
 * @param K - A 3x3 camera intrinsic matrix.
 * @param d - Depth (distance along the z-axis).
 * @param x - Pixel x coordinate.
 * @param y - Pixel y coordinate.
 * @returns A tuple representing the x, y, z 3D point coordinates in camera RDF coordinates.
 */
function get3DCoordinates(K: number[][], d: number, x: number, y: number): [number, number, number] {
    // Step 1: Convert pixel coordinates to normalized device coordinates (NDC)
    const cx = K[0][2];
    const cy = K[1][2];
    const fx = K[0][0];
    const fy = K[1][1];

    const NDC_x = (x - cx) / fx;
    const NDC_y = (y - cy) / fy;

    // Step 2: Get the 3D world coordinates (W)
    const W_x = NDC_x * d;
    const W_y = NDC_y * d;
    const W_z = d;

    return [W_x, W_y, W_z];
}

// Example usage
const K: number[][] = [
    [1, 0, 320],
    [0, 1, 240],
    [0, 0, 1]
];
const d = 10;
const x = 320;
const y = 240;
console.log(get3DCoordinates(K, d, x, y));
```

### Explanation:
1. **Type Annotations**:
   - The function `get3DCoordinates` takes a 3x3 matrix `K` represented as `number[][]`, a depth `d` of type `number`, and two pixel coordinates `x` and `y` of type `number`.
   - The return type is a tuple `[number, number, number]` representing the 3D coordinates.

2. **JSDoc Documentation**:
   - The JSDoc-style comments provide detailed documentation for the function, its arguments, and its return value.

3. **Matrix Indexing**:
   - The indexing of the `K` matrix is done using standard JavaScript/TypeScript array indexing, e.g., `K[0][2]`.

4. **Function Implementation**:
   - The function implementation remains the same, performing the necessary calculations to convert 2D pixel coordinates to 3D world coordinates.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and documentation standards.