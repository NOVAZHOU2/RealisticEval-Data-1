Certainly! Let's convert the provided Python unittest test class into an equivalent test class using Catch2 in C++. We will ensure that the functionality and logic of the tests are preserved, and we will use appropriate assertions in Catch2.

Here is the C++ version using Catch2:

### C++ Code with Catch2

1. **Include Catch2 Headers**
2. **Define the Test Class**
3. **Implement the Tests**

```cpp
#include <catch2/catch_test_macros.hpp>
#include <Eigen/Dense>

using Eigen::MatrixXd;
using Eigen::VectorXd;

// Function to be tested
VectorXd get_3d_coordinates(const MatrixXd& K, double d, double x, double y) {
    // Step 1: Convert pixel coordinates to normalized device coordinates (NDC)
    double cx = K(0, 2);
    double cy = K(1, 2);
    double fx = K(0, 0);
    double fy = K(1, 1);

    double NDC_x = (x - cx) / fx;
    double NDC_y = (y - cy) / fy;

    // Step 2: Get the 3D world coordinates (W)
    double W_x = NDC_x * d;
    double W_y = NDC_y * d;
    double W_z = d;

    return VectorXd::Map(&W_x, 3);  // Map the array to a VectorXd
}

TEST_CASE("TestGet3DCoordinates", "[get_3d_coordinates]") {
    // Define a common intrinsic matrix for testing
    MatrixXd K(3, 3);
    K << 1000, 0, 320,
         0, 1000, 240,
         0, 0, 1;

    SECTION("test_center_coordinates") {
        // Test with center pixel coordinates where x and y should map to zero in NDC.
        VectorXd result = get_3d_coordinates(K, 100, 320, 240);
        REQUIRE_THAT(result, Catch::Approx(VectorXd::Zero(3)).epsilon(1e-6));
    }

    SECTION("test_boundary_coordinates") {
        // Test with boundary values in the image frame.
        VectorXd result = get_3d_coordinates(K, 50, 640, 480);
        double expected_x = (640 - 320) / 1000 * 50;
        double expected_y = (480 - 240) / 1000 * 50;
        REQUIRE_THAT(result, Catch::Approx(VectorXd::Zero(3) + VectorXd({expected_x, expected_y, 50})).epsilon(1e-6));
    }

    SECTION("test_negative_depth") {
        // Test with a negative depth to see if it handles incorrect input properly.
        VectorXd result = get_3d_coordinates(K, -100, 320, 240);
        REQUIRE_THAT(result, Catch::Approx(VectorXd::Zero(3) + VectorXd({0.0, 0.0, -100})).epsilon(1e-6));
    }

    SECTION("test_zero_depth") {
        // Test with zero depth which should lead to a zero-length vector.
        VectorXd result = get_3d_coordinates(K, 0, 320, 240);
        REQUIRE_THAT(result, Catch::Approx(VectorXd::Zero(3)).epsilon(1e-6));
    }

    SECTION("test_non_integer_values") {
        // Test with non-integer pixel coordinates.
        VectorXd result = get_3d_coordinates(K, 100, 320.5, 240.5);
        double expected_x = (320.5 - 320) / 1000 * 100;
        double expected_y = (240.5 - 240) / 1000 * 100;
        REQUIRE_THAT(result, Catch::Approx(VectorXd::Zero(3) + VectorXd({expected_x, expected_y, 100})).epsilon(1e-6));
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Include Catch2 Headers**:
   - `#include <catch2/catch_test_macros.hpp>` for Catch2 test macros.

2. **Define the Test Class**:
   - The `TEST_CASE` macro defines a test case named `TestGet3DCoordinates`.
   - Each `SECTION` within the test case corresponds to a specific test scenario.

3. **Implement the Tests**:
   - The `get_3d_coordinates` function is defined as before.
   - Each `SECTION` sets up the test scenario and uses `REQUIRE_THAT` with `Catch::Approx` to assert the expected results.

4. **Main Function**:
   - The `main` function initializes and runs the Catch2 test session.

### Assertions:
- `REQUIRE_THAT` is used with `Catch::Approx` to perform approximate comparisons, which is similar to `np.testing.assert_array_almost_equal` in Python.

This conversion ensures that the functionality and logic of the tests are preserved while adhering to C++ and Catch2 standards.