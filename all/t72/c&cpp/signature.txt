Certainly! Let's convert the given Python function into its equivalent C++ version, ensuring that the function signature, comments, and documentation adhere to C++ standards. We'll use the `Eigen` library for handling matrices and vectors.

Here is the C++ version of the Python code:

```cpp
#include <iostream>
#include <Eigen/Dense>

using Eigen::MatrixXd;
using Eigen::VectorXd;

/**
 * Converts 2D pixel coordinates into 3D world coordinates using camera intrinsic parameters and depth.
 *
 * @param K A 3x3 matrix representing the camera intrinsic matrix.
 * @param d Depth (distance along the z-axis).
 * @param x Pixel x coordinate.
 * @param y Pixel y coordinate.
 *
 * @return A 3D vector containing the x, y, z coordinates in camera RDF coordinates.
 */
VectorXd get_3d_coordinates(const MatrixXd& K, double d, double x, double y) {
    // Step 1: Convert pixel coordinates to normalized device coordinates (NDC)
    double cx = K(0, 2);
    double cy = K(1, 2);
    double fx = K(0, 0);
    double fy = K(1, 1);

    double NDC_x = (x - cx) / fx;
    double NDC_y = (y - cy) / fy;

    // Step 2: Get the 3D world coordinates (W)
    double W_x = NDC_x * d;
    double W_y = NDC_y * d;
    double W_z = d;

    return VectorXd::Map(&W_x, 3);  // Map the array to a VectorXd
}

int main() {
    // Example usage
    MatrixXd K(3, 3);
    K << 500, 0, 320,
         0, 500, 240,
         0, 0, 1;

    double d = 10.0;
    double x = 350.0;
    double y = 200.0;

    VectorXd result = get_3d_coordinates(K, d, x, y);

    std::cout << "3D Coordinates: " << result.transpose() << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**:
   - `#include <iostream>` for input/output.
   - `#include <Eigen/Dense>` for using Eigen library for matrix and vector operations.

2. **Using Directives**:
   - `using Eigen::MatrixXd;` and `using Eigen::VectorXd;` to simplify the namespace.

3. **Function Documentation**:
   - The function `get_3d_coordinates` is documented using C++ style comments (`/** ... */`) to describe the purpose, arguments, and return value.

4. **Function Definition**:
   - The function `get_3d_coordinates` takes a `MatrixXd` (3x3 matrix) `K`, a depth `d`, and pixel coordinates `x` and `y`.
   - It performs the same calculations as the Python code to compute the 3D coordinates.
   - The result is returned as a `VectorXd`.

5. **Example Usage**:
   - In the `main` function, we create a sample `K` matrix and provide some values for `d`, `x`, and `y`.
   - The function call `get_3d_coordinates` computes the 3D coordinates, which are then printed out.

This conversion preserves the original purpose and structure of the Python code while adhering to C++ standards and best practices.