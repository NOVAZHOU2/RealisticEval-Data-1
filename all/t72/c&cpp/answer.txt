Sure, here's how you can convert the Python function `get_3d_coordinates` to C++ code:

```cpp
#include <iostream>
#include <array>

// Function prototype for getting 3D coordinates from 2D pixel coordinates
std::array<double, 3> get_3d_coordinates(const std::array<std::array<double, 3>, 3>& K, double d, double x, double y);

int main() {
    // Example usage
    std::array<std::array<double, 3>, 3> K = {{
        {1000.0, 0.0, 640.0},
        {0.0, 1000.0, 480.0},
        {0.0, 0.0, 1.0}
    }};
    double d = 5.0;
    double x = 320.0;
    double y = 240.0;

    std::array<double, 3> result = get_3d_coordinates(K, d, x, y);
    
    std::cout << "3D Coordinates: (" 
              << result[0] << ", " 
              << result[1] << ", " 
              << result[2] << ")" << std::endl;

    return 0;
}

// Implementation of the function
std::array<double, 3> get_3d_coordinates(const std::array<std::array<double, 3>, 3>& K, double d, double x, double y) {
    std::array<double, 3> result;
    
    // Calculate 3D coordinates
    result[0] = (x - K[0][2]) * d / K[0][0];
    result[1] = (y - K[1][2]) * d / K[1][1];
    result[2] = d;
    
    return result;
}
```

### Explanation:

- **Include Headers**: We include `<iostream>` for input/output operations and `<array>` for fixed-size arrays.
  
- **Function Prototype**: The function `get_3d_coordinates` is declared with a prototype that matches the Python function signature.

- **Main Function**: In the `main` function, we demonstrate how to use the `get_3d_coordinates` function with an example. The camera intrinsic matrix `K`, depth `d`, and pixel coordinates `(x, y)` are defined, and the resulting 3D coordinates are printed.

- **Implementation**: The implementation of `get_3d_coordinates` calculates the 3D coordinates based on the provided camera intrinsic matrix `K`, depth `d`, and pixel coordinates `(x, y)` using the same formula as in the Python version.

This C++ code should work similarly to your original Python function, converting 2D pixel coordinates to 3D world coordinates using the given camera intrinsic parameters and depth.