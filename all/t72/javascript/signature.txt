Here is the JavaScript equivalent of your Python code:

```javascript
/**
 * Converts 2D pixel coordinates into 3D world coordinates using camera intrinsic parameters and depth.
 * @param {Array<Array<number>>} K - Camera intrinsic matrix (3x3 array).
 * @param {number} d - Depth (distance along z-axis).
 * @param {number} x - Pixel x coordinate.
 * @param {number} y - Pixel y coordinate.
 * @returns {Array<number>} The x, y, z 3D point coordinates in camera RDF coordinates.
 */
function get3DCoordinates(K, d, x, y) {
```

Please note that JavaScript doesn't have native support for numpy arrays like Python does. Therefore, you would need to use an external library such as math.js or ndarray to handle numerical computations. Here's how you could modify the function to work with math.js:

```javascript
const math = require('mathjs');

/**
 * Converts 2D pixel coordinates into 3D world coordinates using camera intrinsic parameters and depth.
 * @param {Array<Array<number>>} K - Camera intrinsic matrix (3x3 array).
 * @param {number} d - Depth (distance along z-axis).
 * @param {number} x - Pixel x coordinate.
 * @param {number} y - Pixel y coordinate.
 * @returns {Array<number>} The x, y, z 3D point coordinates in camera RDF coordinates.
 */
function get3DCoordinates(K, d, x, y) {
    // Convert input data to math.js matrices/vectors
    let KMatrix = math.matrix(K);
    let xVector = math.matrix([x]);
    let yVector = math.matrix([y]);

    // Perform inverse transformation
    let invKMatrix = math.inv(KMatrix);
    let transformedX = math.multiply(invKMatrix, xVector);
    let transformedY = math.multiply(invKMatrix, yVector);

    // Add depth value to result
    let zValue = math.matrix([[d]]);
    let result = math.add(math.add(transformedX, transformedY), zValue);

    return math.toArray(result); // Convert back to regular array
}
```

In this version of the function, we're using math.js to create matrices from our inputs, perform the necessary mathematical operations, and then convert the results back to regular JavaScript arrays. Note that this assumes you've already installed math.js via npm or another package manager.