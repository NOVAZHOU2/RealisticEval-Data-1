Here's the equivalent test class using the Catch2 framework in C++:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>
#include <cstdint>

// Function declaration (assuming the function is defined elsewhere)
std::vector<uint8_t> hex_string_to_byte_array(const std::string& hex_str);

TEST_CASE("Hex string to byte array conversion") {
    
    SECTION("Normal hex string") {
        std::string hex_str = "1a3f";
        std::vector<uint8_t> expected = {0x1A, 0x3F};
        REQUIRE(hex_string_to_byte_array(hex_str) == expected);
    }

    SECTION("Odd length hex string") {
        std::string hex_str = "123";
        std::vector<uint8_t> expected = {0x01, 0x23};
        REQUIRE(hex_string_to_byte_array(hex_str) == expected);
    }

    SECTION("Empty string") {
        std::string hex_str = "";
        std::vector<uint8_t> expected = {};
        REQUIRE(hex_string_to_byte_array(hex_str) == expected);
    }

    SECTION("Hex string with uppercase") {
        std::string hex_str = "1A3F";
        std::vector<uint8_t> expected = {0x1A, 0x3F};
        REQUIRE(hex_string_to_byte_array(hex_str) == expected);
    }
}
```

### Key Adjustments Made:
- Used `#define CATCH_CONFIG_MAIN` to include the main Catch2 header.
- Each test case from the Python unittest is represented as a `SECTION` in Catch2.
- The `REQUIRE` macro is used to assert equality, similar to `assertEqual` in unittest.
- The test cases maintain their original names and logic, ensuring functionality is preserved.