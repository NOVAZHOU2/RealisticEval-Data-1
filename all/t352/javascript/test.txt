Hereâ€™s the equivalent Jest test class for the provided Python `unittest` code, along with explanations of necessary changes:

```javascript
const { hexStringToByteArray } = require('./yourModule'); // Adjust the import as necessary

describe('hexStringToByteArray', () => {
    test('normal hex string', () => {
        const hexStr = "1a3f";
        const expected = new Uint8Array([0x1A, 0x3F]);
        expect(hexStringToByteArray(hexStr)).toEqual(expected);
        // Assertion message is not included in Jest by default
    });

    test('odd length hex string', () => {
        const hexStr = "123";
        const expected = new Uint8Array([0x01, 0x23]);
        expect(hexStringToByteArray(hexStr)).toEqual(expected);
    });

    test('empty string', () => {
        const hexStr = "";
        const expected = new Uint8Array([]);
        expect(hexStringToByteArray(hexStr)).toEqual(expected);
    });

    test('hex string with uppercase', () => {
        const hexStr = "1A3F";
        const expected = new Uint8Array([0x1A, 0x3F]);
        expect(hexStringToByteArray(hexStr)).toEqual(expected);
    });
});
```

### Key Changes Explained:
1. **Test Framework**: Switched from `unittest.TestCase` to Jest's `describe` and `test` functions for organizing tests.
2. **Assertion Method**: Replaced `self.assertEqual` with `expect().toEqual()` for assertions in Jest.
3. **Expected Value**: Used `new Uint8Array()` instead of `bytes()`, as JavaScript represents binary data using `Uint8Array`.
4. **Error Messages**: Jest does not have built-in support for assertion messages in the same way as `unittest`; thus, they are omitted here. If needed, messages can be included in the tests but are generally not necessary for simple assertions.
5. **Module Import**: Included an import statement to bring in the function being tested, which may need to be adjusted based on your project structure.