Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
import { List } from "typescript";

/**
 * Check for ticker symbols with the same ex-dividend date but different dividend amounts.
 * 
 * @param records - An array of tuples, where each tuple contains (ticker, exDividendDate, dividendAmount).
 * @returns An array of tuples, where each tuple contains (ticker, exDividendDate) that have different dividend amounts.
 */
function checkDividendVariances(records: [string, string, number][]): [string, string][] {
    // Dictionary to store dividend amounts by (ticker, exDividendDate)
    const dividendDict: Map<[string, string], Set<number>> = new Map();

    // Iterate through the records
    for (const [ticker, exDividendDate, dividendAmount] of records) {
        const key: [string, string] = [ticker, exDividendDate];
        if (!dividendDict.has(key)) {
            dividendDict.set(key, new Set());
        }
        dividendDict.get(key)?.add(dividendAmount);
    }

    // Find entries with more than one unique dividend amount
    const result: [string, string][] = [];
    for (const [key, amounts] of dividendDict) {
        if (amounts.size > 1) {
            result.push([key[0], key[1]]);
        }
    }

    return result;
}
```

### Explanation:
1. **Import Statement**:
   - The `List` type is not necessary in TypeScript since TypeScript has built-in array types. However, if you need to use a specific `List` type, you can import it from a library like `typescript-collections`.

2. **JSDoc Documentation**:
   - The JSDoc-style comments are added to provide clear documentation for the function parameters and return type.

3. **Function Signature**:
   - The function signature is defined with proper type annotations: `records` is an array of tuples `[string, string, number][]`, and the return type is an array of tuples `[string, string][]`.

4. **Implementation**:
   - The implementation remains the same, using a `Map` to store the dividend amounts and iterating over the records to populate the map.
   - The final result is constructed by filtering the keys with more than one unique dividend amount.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices for documentation.