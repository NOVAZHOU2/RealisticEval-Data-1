Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function checkDividendVariances(records: [string, string, number][]): [string, string][] {
    // Dictionary to store dividend amounts by (ticker, exDividendDate)
    const dividendDict: Map<[string, string], Set<number>> = new Map();

    // Iterate through the records
    for (const [ticker, exDividendDate, dividendAmount] of records) {
        const key: [string, string] = [ticker, exDividendDate];
        if (!dividendDict.has(key)) {
            dividendDict.set(key, new Set());
        }
        dividendDict.get(key)?.add(dividendAmount);
    }

    // Find entries with more than one unique dividend amount
    const result: [string, string][] = [];
    for (const [key, amounts] of dividendDict) {
        if (amounts.size > 1) {
            result.push([key[0], key[1]]);
        }
    }

    return result;
}
```

### Explanation:
1. **Type Definitions**:
   - The `records` parameter is defined as an array of tuples `[string, string, number][]`.
   - The return type is an array of tuples `[string, string][]`.

2. **Dictionary Initialization**:
   - A `Map` is used to store the dividend amounts by `(ticker, exDividendDate)`.

3. **Iteration**:
   - The `for...of` loop is used to iterate over the records.
   - The `Set` is used to store unique dividend amounts for each `(ticker, exDividendDate)` pair.

4. **Result Construction**:
   - A new array `result` is created to store the ticker symbols and ex-dividend dates with more than one unique dividend amount.
   - The `for...of` loop iterates over the `Map` entries to find keys with more than one unique dividend amount.

This TypeScript code maintains the same functionality and logic as the original Python code, while adapting to TypeScript's static type system and idiomatic practices.