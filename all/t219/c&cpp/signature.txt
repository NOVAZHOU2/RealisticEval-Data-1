Certainly! Here is the equivalent C++ code for the provided Python function, including the translation of comments and type annotations:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <tuple>
#include <unordered_map>
#include <set>

// Function to check for ticker symbols with the same ex-dividend date but different dividend amounts
/**
 * Check for ticker symbols with the same ex-dividend date but different dividend amounts.
 *
 * @param records A vector of tuples, where each tuple contains (ticker, ex_dividend_date, dividend_amount).
 * @return A vector of pairs, where each pair contains (ticker, ex_dividend_date) that have different dividend amounts.
 */
std::vector<std::pair<std::string, std::string>> checkDividendVariances(const std::vector<std::tuple<std::string, std::string, int>>& records) {
    // Dictionary to store dividend amounts by (ticker, ex_dividend_date)
    std::unordered_map<std::pair<std::string, std::string>, std::set<int>> dividendDict;

    // Iterate through the records
    for (const auto& record : records) {
        const std::string& ticker = std::get<0>(record);
        const std::string& exDividendDate = std::get<1>(record);
        int dividendAmount = std::get<2>(record);

        std::pair<std::string, std::string> key(ticker, exDividendDate);
        dividendDict[key].insert(dividendAmount);
    }

    // Find entries with more than one unique dividend amount
    std::vector<std::pair<std::string, std::string>> result;
    for (const auto& entry : dividendDict) {
        if (entry.second.size() > 1) {
            result.push_back(entry.first);
        }
    }

    return result;
}

int main() {
    // Example usage
    std::vector<std::tuple<std::string, std::string, int>> records = {
        {"AAPL", "2023-06-01", 100},
        {"AAPL", "2023-06-01", 150},
        {"GOOGL", "2023-06-01", 200},
        {"MSFT", "2023-06-01", 120},
        {"AAPL", "2023-06-02", 100}
    };

    auto result = checkDividendVariances(records);

    // Print the result
    for (const auto& entry : result) {
        std::cout << "(" << entry.first << ", " << entry.second << ")" << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Inclusions**:
   - Include necessary headers (`<iostream>`, `<vector>`, `<string>`, `<tuple>`, `<unordered_map>`, `<set>`).

2. **Function Documentation**:
   - Multi-line comments (`/* ... */`) are used to document the function, including parameters and return values.

3. **Function Definition**:
   - The function `checkDividendVariances` is defined with the appropriate type signatures.
   - The function uses `std::unordered_map` to store dividend amounts by `(ticker, ex_dividend_date)` and `std::set` to store unique dividend amounts.

4. **Iterating Through Records**:
   - A range-based for loop is used to iterate through the input `records`.
   - The `std::get` function is used to access elements from the tuple.

5. **Finding Entries with More Than One Unique Dividend Amount**:
   - Another range-based for loop iterates through the `dividendDict` to find keys with more than one unique dividend amount.
   - These keys are added to the `result` vector.

6. **Example Usage**:
   - An example `records` vector is provided in the `main` function.
   - The `checkDividendVariances` function is called with this data.
   - The results are printed to the console.

This C++ code preserves the original functionality and structure of the Python code, with appropriate translations for comments and type annotations.