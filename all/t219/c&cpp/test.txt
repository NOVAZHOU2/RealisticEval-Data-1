Sure! Below is the equivalent C++ test case using Catch2:

```cpp
#include <catch2/catch.hpp>
#include <vector>
#include <string>

using namespace std;

struct Record {
    string ticker;
    string ex_dividend_date;
    double dividend_amount;
};

vector<Record> check_dividend_variances(const vector<Record>& records) {
    // Implementation of the function goes here
}

TEST_CASE("Check Dividend Variances", "[check_dividend_variances]") {
    vector<Record> records = {
        {"AAPL", "2023-10-05", 1.5},
        {"GOOGL", "2023-10-05", 2.0},
        {"MSFT", "2023-10-06", 1.0},
        {"AAPL", "2023-10-05", 1.8}
    };

    vector<Record> expected = {
        {"AAPL", "2023-10-05"}
    };

    vector<Record> result = check_dividend_variances(records);

    REQUIRE(result.size() == expected.size());
    for (size_t i = 0; i < result.size(); ++i) {
        REQUIRE(result[i].ticker == expected[i].ticker);
        REQUIRE(result[i].ex_dividend_date == expected[i].ex_dividend_date);
    }
}
```

### Explanation:
1. **Struct Definition**: The `Record` struct is defined to match the Python tuple structure.
2. **Function Signature**: The `check_dividend_variances` function signature remains the same.
3. **Test Case**: 
   - A test case named `Check Dividend Variances` is created using `TEST_CASE`.
   - Sample data (`records`) is provided.
   - Expected output (`expected`) is defined.
   - The actual output (`result`) is obtained by calling `check_dividend_variances`.
   - Assertions are used to verify the correctness of the result.

Make sure you have Catch2 installed and properly set up in your project to compile and run these tests.