Here is how you can convert your Python function into C++:

```c++
#include <iostream>
#include <vector>
#include <map>

using namespace std;

struct Record {
    string ticker;
    string exDividendDate;
    double dividendAmount;
};

vector<Record> checkDividendVariances(vector<Record>& records) {
    map<string, vector<pair<string, double>>> recordMap;

    for(auto& record : records){
        recordMap[record.exDividendDate].push_back({record.ticker, record.dividendAmount});
    }

    vector<Record> result;
    
    for(auto& [key, value] : recordMap){
        if(value.size() > 1){
            for(int i = 0; i < value.size(); ++i){
                for(int j = i + 1; j < value.size(); ++j){
                    if(value[i].second != value[j].second){
                        result.push_back(Record{value[i].first, key});
                        break;
                    }
                }
            }
        }
    }

    return result;
}

int main(){
    // test the function
    vector<Record> records = {{"AAPL", "2023-05-09", 4.0}, {"GOOG", "2023-05-09", 76.0}, 
                             {"AAPL", "2023-05-09", 4.5}, {"AMZN", "2023-05-09", 180.0}};
    auto result = checkDividendVariances(records);
    for(auto& r : result){
        cout << r.ticker << ", " << r.exDividendDate << endl;
    }
    return 0;
}
```

Please note that in C++, we use `std::map` instead of Python's dictionary and `std::pair` instead of Python's tuple. Also, since C++ does not support list comprehension like Python, we need to manually loop through the vectors. The `main` function here tests the `checkDividendVariances` function.

Also, make sure to handle memory management properly when dealing with dynamic data structures in C++. In this case, all strings are stored on the stack and do not require manual deallocation. However, if you were using dynamically allocated strings or other resources, you would need to manage their lifetimes appropriately.