Sure! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function checkDividendVariances(records) {
    /**
     * Check for ticker symbols with the same ex-dividend date but different dividend amounts.
     *
     * Parameters:
     * - records (array of arrays): Each array contains [ticker, exDividendDate, dividendAmount].
     *
     * Returns:
     * - array of arrays: Each array contains [ticker, exDividendDate] that have different dividend amounts.
     */
    
    // Object to store dividend amounts by [ticker, exDividendDate]
    const dividendDict = {};

    // Iterate through the records
    for (const [ticker, exDividendDate, dividendAmount] of records) {
        const key = [ticker, exDividendDate].join('|'); // Use a string key for JavaScript objects
        if (!dividendDict[key]) {
            dividendDict[key] = new Set();
        }
        dividendDict[key].add(dividendAmount);
    }

    // Find entries with more than one unique dividend amount
    const result = Object.entries(dividendDict).filter(([key, amounts]) => amounts.size > 1).map(([key]) => {
        const [ticker, exDividendDate] = key.split('|');
        return [ticker, exDividendDate];
    });

    return result;
}
```

### Explanation:
1. **Function Definition**: The function `checkDividendVariances` is defined to match the Python function's purpose.
2. **Dictionary Representation**: In JavaScript, we use an object (`dividendDict`) instead of a dictionary. We concatenate the `ticker` and `exDividendDate` using a delimiter (`|`) to create a unique string key.
3. **Iteration**: We iterate over the `records` array using a `for...of` loop.
4. **Set Usage**: We use a `Set` to store unique dividend amounts for each key.
5. **Result Calculation**: We filter the entries where the size of the `Set` is greater than 1, indicating multiple unique dividend amounts. Then, we map these keys back to `[ticker, exDividendDate]` pairs.
6. **Return Statement**: Finally, we return the `result` array containing the desired tuples.

This JavaScript code should provide the same functionality as the original Python code.