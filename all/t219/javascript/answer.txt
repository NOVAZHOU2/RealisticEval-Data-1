Sure, here's how you can translate the Python function `check_dividend_variances` into JavaScript:

```javascript
function checkDividendVariances(records) {
    /**
     * Check for ticker symbols with the same ex-dividend date but different dividend amounts.
     * @param {Array} records - Each array element contains [ticker, ex_dividend_date, dividend_amount].
     * @returns {Array} - Each array element contains [ticker, ex_dividend_date] that have different dividend amounts.
     */

    const varianceMap = {};
    const result = [];

    records.forEach(record => {
        const [ticker, exDividendDate, dividendAmount] = record;

        if (!varianceMap[ticker]) {
            varianceMap[ticker] = {};
        }

        if (!varianceMap[ticker][exDividendDate]) {
            varianceMap[ticker][exDividendDate] = [];
        }

        varianceMap[ticker][exDividendDate].push(dividendAmount);
    });

    Object.keys(varianceMap).forEach(ticker => {
        Object.keys(varianceMap[ticker]).forEach(exDividendDate => {
            if (varianceMap[ticker][exDividendDate].length > 1) {
                result.push([ticker, exDividendDate]);
            }
        });
    });

    return result;
}
```

### Explanation:
- **varianceMap**: This object is used to keep track of all dividend amounts associated with each combination of `ticker` and `ex_dividend_date`.
- **result**: This array will store the final results where there are multiple dividend amounts for the same `ticker` and `ex_dividend_date`.

The function iterates over the input `records`, populating the `varianceMap`. Then, it checks for any entries in `varianceMap` where more than one dividend amount exists for a given `ticker` and `ex_dividend_date`, adding those combinations to the `result` array.

This JavaScript version should work similarly to your original Python function.