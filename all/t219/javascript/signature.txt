Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Check for ticker symbols with the same ex-dividend date but different dividend amounts.
 * @param {Array} records - An array of arrays, where each inner array contains [ticker, exDividendDate, dividendAmount].
 * @returns {Array} An array of arrays, where each inner array contains [ticker, exDividendDate] that have different dividend amounts.
 */
function checkDividendVariances(records) {
    // Dictionary to store dividend amounts by [ticker, exDividendDate]
    const dividendDict = {};

    // Iterate through the records
    for (const [ticker, exDividendDate, dividendAmount] of records) {
        const key = [ticker, exDividendDate].join('|'); // Use a string key for JavaScript objects
        if (!dividendDict[key]) {
            dividendDict[key] = new Set();
        }
        dividendDict[key].add(dividendAmount);
    }

    // Find entries with more than one unique dividend amount
    const result = Object.entries(dividendDict).filter(([key, amounts]) => amounts.size > 1).map(([key]) => {
        const [ticker, exDividendDate] = key.split('|');
        return [ticker, exDividendDate];
    });

    return result;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The function is documented using JSDoc comments.
   - The `@param` tag specifies the parameter type and description.
   - The `@returns` tag specifies the return type and description.

2. **Function Signature**:
   - The function `checkDividendVariances` is defined with the parameter `records`.

3. **Dictionary Representation**:
   - An object `dividendDict` is used to store dividend amounts by `[ticker, exDividendDate]`.
   - A unique string key is created by joining `ticker` and `exDividendDate` with a delimiter (`|`).

4. **Iteration**:
   - The `records` array is iterated using a `for...of` loop.
   - For each record, a unique key is created and used to store the dividend amount in a `Set`.

5. **Result Calculation**:
   - Entries with more than one unique dividend amount are filtered using `Object.entries` and `filter`.
   - The filtered keys are mapped back to `[ticker, exDividendDate]` pairs.

6. **Return Statement**:
   - The `result` array is returned.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JSDoc documentation standards.