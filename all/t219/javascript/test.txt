Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Code:
```python
import unittest

class TestCheckDividendVariances(unittest.TestCase):

    def test_no_inconsistencies(self):
        records = [
            ('AAPL', '2023-09-01', 0.22),
            ('AAPL', '2023-09-01', 0.22),
            ('MSFT', '2023-09-01', 0.56),
            ('GOOG', '2023-09-02', 0.00)
        ]
        expected_output = []
        self.assertEqual(check_dividend_variances(records), expected_output)

    def test_one_inconsistency(self):
        records = [
            ('AAPL', '2023-09-01', 0.22),
            ('AAPL', '2023-09-01', 0.23),  # Different amount
            ('MSFT', '2023-09-01', 0.56),
            ('GOOG', '2023-09-02', 0.00)
        ]
        expected_output = [('AAPL', '2023-09-01')]
        self.assertEqual(check_dividend_variances(records), expected_output)

    def test_multiple_inconsistencies(self):
        records = [
            ('AAPL', '2023-09-01', 0.22),
            ('AAPL', '2023-09-01', 0.23),  # Different amount
            ('MSFT', '2023-09-01', 0.56),
            ('MSFT', '2023-09-01', 0.60),  # Different amount
            ('GOOG', '2023-09-02', 0.00),
            ('TSLA', '2023-09-03', 0.10),
            ('TSLA', '2023-09-03', 0.10),  # Same amount, no inconsistency
            ('TSLA', '2023-09-03', 0.15)  # Different amount
        ]
        expected_output = [('AAPL', '2023-09-01'), ('MSFT', '2023-09-01'), ('TSLA', '2023-09-03')]
        self.assertEqual(check_dividend_variances(records), expected_output)

    def test_single_record(self):
        records = [
            ('AAPL', '2023-09-01', 0.22)
        ]
        expected_output = []
        self.assertEqual(check_dividend_variances(records), expected_output)

    def test_empty_list(self):
        records = []
        expected_output = []
        self.assertEqual(check_dividend_variances(records), expected_output)
```

### Equivalent Jest Test Suite:

```javascript
const checkDividendVariances = require('./checkDividendVariances'); // Import the function to be tested

describe('TestCheckDividendVariances', () => {
    it('should handle no inconsistencies', () => {
        const records = [
            ['AAPL', '2023-09-01', 0.22],
            ['AAPL', '2023-09-01', 0.22],
            ['MSFT', '2023-09-01', 0.56],
            ['GOOG', '2023-09-02', 0.00]
        ];
        const expectedOutput = [];
        expect(checkDividendVariances(records)).toEqual(expectedOutput);
    });

    it('should handle one inconsistency', () => {
        const records = [
            ['AAPL', '2023-09-01', 0.22],
            ['AAPL', '2023-09-01', 0.23],  // Different amount
            ['MSFT', '2023-09-01', 0.56],
            ['GOOG', '2023-09-02', 0.00]
        ];
        const expectedOutput = [['AAPL', '2023-09-01']];
        expect(checkDividendVariances(records)).toEqual(expectedOutput);
    });

    it('should handle multiple inconsistencies', () => {
        const records = [
            ['AAPL', '2023-09-01', 0.22],
            ['AAPL', '2023-09-01', 0.23],  // Different amount
            ['MSFT', '2023-09-01', 0.56],
            ['MSFT', '2023-09-01', 0.60],  // Different amount
            ['GOOG', '2023-09-02', 0.00],
            ['TSLA', '2023-09-03', 0.10],
            ['TSLA', '2023-09-03', 0.10],  // Same amount, no inconsistency
            ['TSLA', '2023-09-03', 0.15]  // Different amount
        ];
        const expectedOutput = [['AAPL', '2023-09-01'], ['MSFT', '2023-09-01'], ['TSLA', '2023-09-03']];
        expect(checkDividendVariances(records)).toEqual(expectedOutput);
    });

    it('should handle a single record', () => {
        const records = [
            ['AAPL', '2023-09-01', 0.22]
        ];
        const expectedOutput = [];
        expect(checkDividendVariances(records)).toEqual(expectedOutput);
    });

    it('should handle an empty list', () => {
        const records = [];
        const expectedOutput = [];
        expect(checkDividendVariances(records)).toEqual(expectedOutput);
    });
});
```

### Explanation:
1. **Import Function**: The `checkDividendVariances` function is imported at the beginning of the test file.
2. **Describe Block**: The `describe` block is used to group the tests under a common description.
3. **It Blocks**: Each `it` block represents a test case and includes a descriptive message.
4. **Expect Assertions**: The `expect` function is used to assert the expected output using `toEqual` matcher, which checks deep equality.

This Jest test suite ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.