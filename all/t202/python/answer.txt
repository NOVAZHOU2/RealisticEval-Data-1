Here is the equivalent Python code for the provided C++ function that returns the number of days in a specific month of a given year, including leap year handling.
Python Code
python
class InvalidMonthError(Exception):
    """Custom exception for invalid month values."""
    pass

def get_days_in_month(year: int, month: int) -> int:
    """
    Returns the number of days in a given month of a specific year.

    This function accounts for leap years when calculating the number of days in February.

    :param year: The year for which to get the number of days in the month. This should be
                 a valid integer representing a year (e.g., 2024).
    :param month: The month for which to get the number of days. It should be an integer
                  between 1 and 12, where 1 corresponds to January and 12 to December.
    :return: The number of days in the specified month of the specified year.
    """
    # Check if the month is valid
    if month < 1 or month > 12:
        raise InvalidMonthError("Month must be between 1 and 12.")

    # Days in each month (index 0 is unused)
    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    # Handle February case for leap years
    if month == 2:
        # Check if it is a leap year
        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
            return 29  # Leap year
        else:
            return 28  # Non-leap year

    # Return the number of days for the specified month
    return days_in_month[month]
Explanation of the Code:
Custom Exception:
A custom exception InvalidMonthError is created to handle invalid month inputs, similar to throwing an exception in C++.
Function Definition:
The function get_days_in_month takes two parameters: year (an integer) and month (an integer).
It uses type hints to specify the types of parameters and return value.
Input Validation:
The code checks if the month is valid (between 1 and 12). If not, it raises an InvalidMonthError with an appropriate message.
Days in Each Month:
An array days_in_month is defined to hold the number of days in each month, with the index corresponding to the month (index 0 is unused).
Leap Year Calculation:
The function checks if the month is February and calculates whether it is a leap year using the rules for leap years:
A year is a leap year if it is divisible by 4 but not by 100, or if it is divisible by 400.
If it is a leap year, the function returns 29; otherwise, it returns 28.
Returning the Number of Days:
For all other months, it returns the corresponding number of days from the days_in_month array.
Usage Example
You can call this function in your Python code like this:
python
try:
    print(get_days_in_month(2024, 2))  # Output: 29 (Leap year)
    print(get_days_in_month(2023, 2))  # Output: 28 (Non-leap year)
    print(get_days_in_month(2023, 4))  # Output: 30
    print(get_days_in_month(2023, 13)) # Raises InvalidMonthError
except InvalidMonthError as e:
    print(e)
This example shows how to use the function and handle potential errors due to invalid month values.