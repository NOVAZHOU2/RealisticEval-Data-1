Sure! Hereâ€™s the equivalent C++ code for the provided Python `insertion_sort` function:

```cpp
#include <iostream>
#include <vector>

void insertion_sort(std::vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; ++i) {
        // Current element to be inserted into sorted portion
        int key = arr[i];
        int j = i - 1;
        // Move elements of arr[0..i-1] that are greater than key
        // to one position ahead of their current position
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

int main() {
    std::vector<int> arr = {12, 11, 13, 5, 6};
    insertion_sort(arr);

    std::cout << "Sorted array: ";
    for (int i = 0; i < arr.size(); ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
- **Headers**: `#include <iostream>` and `#include <vector>` are included for input/output and dynamic array functionality.
- **Function Declaration**: The `insertion_sort` function accepts a reference to a `std::vector<int>`, which allows us to modify the original array.
- **Loop Structure**: The `for` loop and `while` loop are adapted to C++ syntax.
- **Main Function**: A `main` function is added to demonstrate the sorting with an example array and print the sorted output.