Here's the equivalent C++ code that matches the functionality of the provided Python code:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <stdexcept>
#include <string>

std::vector<char> read_file_to_byte_array(const std::string& file_path) {
    // Check if the file exists
    std::ifstream file(file_path, std::ios::binary);
    if (!file) {
        throw std::runtime_error("File does not exist: " + file_path);
    }

    // Read the file into a vector
    std::vector<char> data((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
    
    // Check if the data is empty
    if (data.empty()) {
        throw std::runtime_error("Could not completely read the file: " + file_path);
    }
    
    return data;
}

int main() {
    try {
        std::string file_path = "example.bin"; // Change this to your file path
        std::vector<char> data = read_file_to_byte_array(file_path);
        std::cout << "File read successfully. Size: " << data.size() << " bytes." << std::endl;
    } catch (const std::runtime_error& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:

1. **File Handling**: The C++ code uses `std::ifstream` to open the file in binary mode, similar to Python's `open(file_path, 'rb')`.

2. **Error Handling**: In C++, we throw a `std::runtime_error` when an error occurs, which is similar to raising an exception in Python.

3. **Data Storage**: Instead of using `bytes`, we use `std::vector<char>` to store the read bytes, which allows dynamic size management similar to Python's byte handling.

4. **Reading Data**: The data is read using iterators (`std::istreambuf_iterator<char>`) to read the entire file into the vector.

5. **Empty Check**: An empty check is performed after reading, which throws an error if no data was read.

6. **Main Function**: A simple `main` function demonstrates how to call `read_file_to_byte_array` and handle potential errors.

Make sure to modify the `file_path` variable to point to an actual file for testing.