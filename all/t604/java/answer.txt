Hereâ€™s the equivalent Java code for the provided C++ function, organized within the specified package and class structure:

```java
package org.real.temp;

/**
 * @brief Tail-recursive function to calculate x raised to the power y.
 *
 * This function uses tail recursion to compute x^y.
 *
 * @param x The base, a non-negative integer.
 * @param y The exponent, a non-negative integer.
 * @param acc The accumulator to hold the intermediate result.
 *
 * @return The result of x raised to the power of y.
 */
public class Answer {

    public static long powerTail(long x, long y) {
        return powerTail(x, y, 1);
    }

    private static long powerTail(long x, long y, long acc) {
        // Base case: if exponent y is 0, return the accumulated result
        if (y == 0) {
            return acc;  // Return accumulated result
        }

        // Tail-recursive call with decremented exponent and updated accumulator
        return powerTail(x, y - 1, acc * x);
    }
}
```

### Key Changes and Considerations:
1. **Package Declaration**: The Java code includes the package declaration as requested.
2. **Class Definition**: A public class named `Answer` is created.
3. **Method Signatures**: 
   - The `power_tail` function has been split into two methods in Java: `powerTail(long x, long y)` for the public interface and `powerTail(long x, long y, long acc)` for the recursive implementation.
4. **Type Declarations**: In Java, `unsigned` does not exist, so `long` is used to handle non-negative integers, ensuring it can accommodate larger values.
5. **Method Accessibility**: The recursive method is marked as `private` to encapsulate the implementation details. 

This structure maintains the functionality and logic of the original C++ code while adapting it to Java conventions.