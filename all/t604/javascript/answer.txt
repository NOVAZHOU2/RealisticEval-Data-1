Here's the equivalent JavaScript code for the provided C++ function, maintaining the same logic and functionality:

```javascript
/**
 * @brief Tail-recursive function to calculate x raised to the power y.
 *
 * This function uses tail recursion to compute x^y.
 *
 * @param {number} x The base, a non-negative integer.
 * @param {number} y The exponent, a non-negative integer.
 * @param {number} acc The accumulator to hold the intermediate result.
 *
 * @return {number} The result of x raised to the power of y.
 */
function powerTail(x, y, acc = 1) {
    // Base case: if exponent y is 0, return the accumulated result
    if (y === 0) {
        return acc;  // Return accumulated result
    }

    // Tail-recursive call with decremented exponent and updated accumulator
    return powerTail(x, y - 1, acc * x);
}
```

### Key Adaptations:
1. **Function Declaration**: JavaScript uses the `function` keyword for defining functions.
2. **Parameter Types**: JavaScript does not enforce parameter types like C++, so the type annotations are replaced with comments.
3. **Equality Check**: Used `===` for strict equality comparison, which is a best practice in JavaScript.
4. **Default Parameters**: JavaScript supports default parameters directly in the function definition. 

This code retains the original functionality and is structured according to JavaScript conventions.