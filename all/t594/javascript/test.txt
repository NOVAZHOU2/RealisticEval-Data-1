Here’s the equivalent JavaScript test code using Jest, converting the provided C++ Catch2 test cases for the `splitComma` function:

```javascript
const splitComma = require('./splitComma'); // Adjust the path as necessary

describe("splitComma function tests", () => {
    let result;

    beforeEach(() => {
        result = [];
    });

    test("Basic comma-separated values", () => {
        splitComma("apple,banana,orange", result);
        expect(result.length).toBe(3);
        expect(result[0]).toBe("apple");
        expect(result[1]).toBe("banana");
        expect(result[2]).toBe("orange");
    });

    test("Leading and trailing whitespace", () => {
        splitComma("  apple , banana , orange  ", result);
        expect(result.length).toBe(3);
        expect(result[0]).toBe("apple");
        expect(result[1]).toBe("banana");
        expect(result[2]).toBe("orange");
    });

    test("Multiple consecutive commas", () => {
        splitComma("apple,,banana,,,orange", result);
        expect(result.length).toBe(3);
        expect(result[0]).toBe("apple");
        expect(result[1]).toBe("banana");
        expect(result[2]).toBe("orange");
    });

    test("Empty input string", () => {
        splitComma("", result);
        expect(result.length).toBe(0);
    });

    test("Only whitespace input", () => {
        splitComma("   ", result);
        expect(result.length).toBe(0);
    });

    test("Trailing commas", () => {
        splitComma("apple,banana,orange,", result);
        expect(result.length).toBe(3);
        expect(result[0]).toBe("apple");
        expect(result[1]).toBe("banana");
        expect(result[2]).toBe("orange");
    });
});
```

### Key Changes:
1. **Test Structure**: Converted `TEST_CASE` and `SECTION` into Jest's `describe` and `test` functions.
2. **Setup**: Used `beforeEach` to initialize the `result` array before each test case.
3. **Assertions**: Changed `REQUIRE` to Jest’s `expect` and its matchers (like `toBe`).
4. **Module Import**: Assumed that the `splitComma` function is exported from a module, hence the `require` statement. Adjust the path based on your project structure.