Hereâ€™s the TypeScript version of your C++ code, including the function signature and comments adapted to TypeScript conventions:

```typescript
/**
 * @brief Splits a comma-separated string into individual tokens.
 *
 * This function takes a string containing comma-separated values, trims
 * leading and trailing whitespace from each token, and stores the non-empty
 * tokens in the provided array.
 *
 * @param str The input string to be split, which may contain leading and
 *            trailing whitespace around the tokens.
 * @param vect An array where the resulting tokens will be stored. The array
 *             will be cleared before storing the new tokens.
 */
function splitComma(str: string, vect: string[]): void {
    // Clear the output array to avoid residual data
    vect.length = 0;

    // Process each comma-separated token
    const tokens = str.split(',').map(token => token.trim());

    // Only add non-empty tokens to the array
    for (const token of tokens) {
        if (token) {
            vect.push(token);
        }
    }
}
```

### Key Changes:
1. **Function Signature**: Changed from C++ to TypeScript syntax. Types are specified using TypeScript types (`string` and `string[]`).
2. **Array Clearing**: Used `vect.length = 0` to clear the array.
3. **String Splitting**: Utilized `String.prototype.split` and `Array.prototype.map` for splitting and trimming.
4. **Trimming**: Used `String.prototype.trim()` for whitespace removal.
5. **Comment Syntax**: Converted C++ style comments to TypeScript comment syntax. 

This maintains the original functionality while adapting it to TypeScript conventions.