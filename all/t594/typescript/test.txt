Hereâ€™s how you can convert the provided C++ Catch2 test cases into equivalent tests using TypeScript's Jest framework:

```typescript
import { splitComma } from './yourModule'; // Adjust the import based on your file structure

describe('splitComma function tests', () => {
    let result: string[];

    beforeEach(() => {
        result = [];
    });

    test('Basic comma-separated values', () => {
        splitComma("apple,banana,orange", result);
        expect(result.length).toBe(3);
        expect(result[0]).toBe("apple");
        expect(result[1]).toBe("banana");
        expect(result[2]).toBe("orange");
    });

    test('Leading and trailing whitespace', () => {
        splitComma("  apple , banana , orange  ", result);
        expect(result.length).toBe(3);
        expect(result[0]).toBe("apple");
        expect(result[1]).toBe("banana");
        expect(result[2]).toBe("orange");
    });

    test('Multiple consecutive commas', () => {
        splitComma("apple,,banana,,,orange", result);
        expect(result.length).toBe(3);
        expect(result[0]).toBe("apple");
        expect(result[1]).toBe("banana");
        expect(result[2]).toBe("orange");
    });

    test('Empty input string', () => {
        splitComma("", result);
        expect(result.length).toBe(0);
    });

    test('Only whitespace input', () => {
        splitComma("   ", result);
        expect(result.length).toBe(0);
    });

    test('Trailing commas', () => {
        splitComma("apple,banana,orange,", result);
        expect(result.length).toBe(3);
        expect(result[0]).toBe("apple");
        expect(result[1]).toBe("banana");
        expect(result[2]).toBe("orange");
    });
});
```

### Key Changes:
1. **Import Statement**: Added an import for the `splitComma` function, assuming it's defined in a separate module.
2. **Test Structure**: Used `describe` and `test` functions from Jest to structure the tests.
3. **Setup for Each Test**: Used `beforeEach` to initialize the `result` array before each test.
4. **Assertions**: Replaced `REQUIRE` with `expect` statements to match Jest's syntax.
5. **Functionality**: The logic and checks from the original tests are preserved to ensure consistent functionality.

Make sure to adjust the import path to match where your `splitComma` function is defined.