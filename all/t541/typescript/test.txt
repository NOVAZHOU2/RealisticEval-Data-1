Sure! Below is the TypeScript version of your JavaScript Jest test case using `describe` and `it`:

```typescript
import { filterArray } from './filterArray'; // Adjust the import path as necessary

describe('filterArray', () => {
  it('should return an empty array when given an empty array', () => {
    const unfilteredArray: number[] = [];
    const isQualified = (num: number): boolean => num > 0;
    expect(filterArray(unfilteredArray, isQualified)).toEqual([]);
  });

  it('should return all positive numbers when given an array with both positive and negative numbers', () => {
    const unfilteredArray: number[] = [1, -2, 3, -4, 5];
    const isQualified = (num: number): boolean => num > 0;
    expect(filterArray(unfilteredArray, isQualified)).toEqual([1, 3, 5]);
  });

  it('should return only even numbers when given an array with both even and odd numbers', () => {
    const unfilteredArray: number[] = [1, 2, 3, 4, 5, 6];
    const isQualified = (num: number): boolean => num % 2 === 0;
    expect(filterArray(unfilteredArray, isQualified)).toEqual([2, 4, 6]);
  });
});
```

In this example:
- We've imported the `filterArray` function from the appropriate file.
- We've used `describe` to group related tests together.
- We've used `it` to define individual test cases.
- We've specified the type for the `unfilteredArray` parameter in each test case.

Make sure you have the necessary TypeScript setup in place, including the `ts-jest` package for running TypeScript tests with Jest.