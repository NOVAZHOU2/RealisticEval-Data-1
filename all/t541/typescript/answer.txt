Certainly! Here's how you can convert the given JavaScript function into TypeScript:

```typescript
/**
 * Filters elements from an array based on a qualification function.
 *
 * @param {T[]} unfilteredArray - The array to filter.
 * @param {(element: T) => boolean} isQualified - The function that determines if an element qualifies.
 * @returns {T[]} - A new array containing the elements that qualify.
 */
function filterArray<T>(unfilteredArray: T[], isQualified: (element: T) => boolean): T[] {
    return unfilteredArray.filter(isQualified);
}
```

In this TypeScript version:
- `T` is a generic type parameter that represents the type of elements in the array.
- The `filterArray` function now takes two parameters: `unfilteredArray`, which is typed as `T[]`, and `isQualified`, which is a function that takes an element of type `T` and returns a boolean indicating whether the element should be included in the resulting array.
- The function uses the built-in `.filter()` method provided by arrays in TypeScript, which ensures type safety.