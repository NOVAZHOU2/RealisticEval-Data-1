Hereâ€™s the JavaScript code you provided, converted to TypeScript:

```typescript
/**
 * Filters elements from an array based on a qualification function.
 *
 * @param {T[]} unfilteredArray - The array to filter.
 * @param {(element: T) => boolean} isQualified - The function that determines if an element qualifies.
 * @returns {T[]} - A new array containing the elements that qualify.
 */
function filterArray<T>(unfilteredArray: T[], isQualified: (element: T) => boolean): T[] {
    const filteredResults: T[] = [];

    // Use a for loop to iterate through each element in the unfiltered array
    for (let i = 0; i < unfilteredArray.length; i++) {
        // Check if the current element qualifies
        if (isQualified(unfilteredArray[i])) {
            // If it qualifies, push it to the results array
            filteredResults.push(unfilteredArray[i]);
        }
    }

    return filteredResults; // Return the filtered results
}
```

### Changes Made:
1. Added generic type parameter `<T>` to allow for filtering of arrays containing any type.
2. Specified the types for the parameters and return value.
3. Updated the `isQualified` function type to accept an element of type `T` and return a boolean. 

This way, the function can be used with arrays of any type while ensuring type safety.