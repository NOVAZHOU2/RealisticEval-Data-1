Certainly! Below is the C++ version of your JavaScript function with comments kept intact:

```cpp
/**
 * Filters elements from a vector based on a qualification predicate.
 *
 * @param unfilteredArray - The vector to filter.
 * @param isQualified - The predicate that determines if an element qualifies.
 * @return A new vector containing the elements that qualify.
 */
#include <vector>
#include <functional>

template<typename T>
std::vector<T> filterArray(const std::vector<T>& unfilteredArray, const std::function<bool(T)>& isQualified) {
    std::vector<T> filteredArray;
    for (const auto& element : unfilteredArray) {
        if (isQualified(element)) {
            filteredArray.push_back(element);
        }
    }
    return filteredArray;
}
```

### Explanation:
- **`@param unfilteredArray`**: This parameter represents the input vector that you want to filter.
- **`@param isQualified`**: This parameter is a predicate function that takes an element of type `T` and returns a boolean indicating whether the element should be included in the filtered array.
- **`@return`**: The function returns a new vector containing only the elements that satisfy the `isQualified` predicate.

### Usage Example:
```cpp
#include <iostream>
#include <vector>
#include <functional>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    auto isEven = [](int num) -> bool {
        return num % 2 == 0;
    };

    std::vector<int> evenNumbers = filterArray(numbers, isEven);

    for (int num : evenNumbers) {
        std::cout << num << " ";
    }

    return 0;
}
```

This example demonstrates how to use the `filterArray` function to filter out even numbers from a vector of integers.