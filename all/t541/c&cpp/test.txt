Sure! Below is the equivalent C++ Catch2 test case for the provided JavaScript Jest test case:

```cpp
#include <catch2/catch.hpp>
#include <vector>
#include <functional>

// Function to filter elements from an array based on a qualification function.
std::vector<int> filterArray(const std::vector<int>& unfilteredArray, std::function<bool(int)> isQualified) {
    std::vector<int> filteredArray;
    for (const auto& item : unfilteredArray) {
        if (isQualified(item)) {
            filteredArray.push_back(item);
        }
    }
    return filteredArray;
}

TEST_CASE("filterArray", "[filter]") {
    // Test with an empty array
    std::vector<int> emptyArray = {};
    auto resultEmpty = filterArray(emptyArray, [](int x) { return x > 5; });
    REQUIRE(resultEmpty.empty());

    // Test with an array where no elements qualify
    std::vector<int> noQualifyArray = {1, 2, 3};
    auto resultNoQualify = filterArray(noQualifyArray, [](int x) { return x > 5; });
    REQUIRE(resultNoQualify.empty());

    // Test with an array where some elements qualify
    std::vector<int> someQualifyArray = {4, 5, 6, 7, 8};
    auto resultSomeQualify = filterArray(someQualifyArray, [](int x) { return x > 5; });
    REQUIRE(resultSomeQualify == std::vector<int>({6, 7, 8}));

    // Test with an array where all elements qualify
    std::vector<int> allQualifyArray = {9, 10, 11};
    auto resultAllQualify = filterArray(allQualifyArray, [](int x) { return x > 5; });
    REQUIRE(resultAllQualify == std::vector<int>({9, 10, 11}));
}
```

### Explanation:
1. **Function Definition**: The `filterArray` function takes a vector of integers and a lambda function (`std::function<bool(int)>`) that determines if an element qualifies.
2. **Test Cases**:
   - **Empty Array**: Tests the function with an empty array and ensures that the result is also empty.
   - **No Qualifying Elements**: Tests the function with an array where no elements satisfy the condition and ensures that the result is empty.
   - **Some Qualifying Elements**: Tests the function with an array where some elements satisfy the condition and ensures that only those elements are included in the result.
   - **All Qualifying Elements**: Tests the function with an array where all elements satisfy the condition and ensures that all elements are included in the result.

This should give you a good starting point for testing your `filterArray` function in C++ using Catch2.