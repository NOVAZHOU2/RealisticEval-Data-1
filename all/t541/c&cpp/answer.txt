Certainly! Below is the equivalent C++ code for the provided JavaScript function:

```cpp
#include <vector>
#include <functional>

/**
 * Filters elements from a vector based on a qualification function.
 *
 * @param unfilteredVector - The vector to filter.
 * @param isQualified - The function that determines if an element qualifies.
 * @returns A new vector containing the elements that qualify.
 */
std::vector<int> filterArray(const std::vector<int>& unfilteredVector, const std::function<bool(int)>& isQualified) {
    std::vector<int> filteredVector;
    for (int elem : unfilteredVector) {
        if (isQualified(elem)) {
            filteredVector.push_back(elem);
        }
    }
    return filteredVector;
}
```

### Explanation:
1. **Include Necessary Headers**: We include `<vector>` for using the `std::vector` container and `<functional>` for using `std::function`.
2. **Function Signature**:
   - The function `filterArray` takes two parameters: `unfilteredVector`, which is a constant reference to a `std::vector<int>`, and `isQualified`, which is a `std::function<bool(int)>`. This allows for flexibility in the type of elements and the qualification function.
3. **Filtered Vector**: We create an empty `std::vector<int>` named `filteredVector` to store the qualified elements.
4. **Loop Through Elements**: We iterate through each element in `unfilteredVector` using a range-based for loop.
5. **Check Qualification**: For each element, we check if it qualifies using the `isQualified` function. If it does, we add it to `filteredVector`.
6. **Return Filtered Vector**: Finally, we return the `filteredVector`.

This C++ code should behave similarly to the original JavaScript function, filtering elements based on a given qualification function.