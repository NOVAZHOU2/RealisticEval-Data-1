Here’s a C++ version of the provided JavaScript code. This C++ function uses templates to allow for flexibility in the types of elements in the array and a function pointer (or callable) for the qualification check:

```cpp
#include <vector>
#include <functional>

template <typename T>
std::vector<T> filterArray(const std::vector<T>& unfilteredArray, std::function<bool(const T&)> isQualified) {
    std::vector<T> filteredResults;

    // Use a for loop to iterate through each element in the unfiltered array
    for (const auto& element : unfilteredArray) {
        // Check if the current element qualifies
        if (isQualified(element)) {
            // If it qualifies, push it to the results array
            filteredResults.push_back(element);
        }
    }

    return filteredResults; // Return the filtered results
}
```

### Explanation:

1. **Template Function**: The function is defined as a template so it can handle any data type.
2. **Vector**: The `std::vector` is used to represent the dynamic array.
3. **Function Pointer**: The `std::function<bool(const T&)>` is used to allow any callable that matches the signature (returns a `bool` and takes a const reference of type `T`).
4. **Range-based for Loop**: A range-based for loop iterates over the elements in the `unfilteredArray`.

### Example Usage:

Here’s how you might call this function with an example qualification function:

```cpp
#include <iostream>

bool isEven(const int& num) {
    return num % 2 == 0;
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6};
    
    std::vector<int> evenNumbers = filterArray(numbers, isEven);

    // Print the filtered results
    for (const auto& num : evenNumbers) {
        std::cout << num << " ";
    }
    // Output: 2 4 6

    return 0;
}
```

This example filters an array of integers to retain only even numbers.