Certainly! Below is the equivalent Java code for the provided JavaScript function:

```java
import java.util.ArrayList;
import java.util.List;

/**
 * Filters elements from a list based on a qualification predicate.
 *
 * @param <T>            the type of elements in the list
 * @param unfilteredList the list to filter
 * @param isQualified    the predicate that determines if an element qualifies
 * @return a new list containing the elements that qualify
 */
public class ArrayFilter {

    public static <T> List<T> filterList(List<T> unfilteredList, Predicate<T> isQualified) {
        List<T> filteredList = new ArrayList<>();
        for (T element : unfilteredList) {
            if (isQualified.test(element)) {
                filteredList.add(element);
            }
        }
        return filteredList;
    }

    public static void main(String[] args) {
        // Example usage:
        List<Integer> numbers = List.of(1, 2, 3, 4, 5, 6);
        Predicate<Integer> isEven = x -> x % 2 == 0;
        
        List<Integer> evenNumbers = filterList(numbers, isEven);
        System.out.println(evenNumbers); // Output: [2, 4, 6]
    }
}
```

### Explanation:
- **Generics**: The method `filterList` uses generics `<T>` to allow filtering any type of list.
- **Predicate Interface**: The `isQualified` parameter is a `Predicate<T>`, which is a functional interface in Java used to represent a boolean-valued function of one argument.
- **ArrayList**: We use `ArrayList` to store the filtered elements.
- **Loop and Condition**: The method iterates over each element in the input list and adds it to the filtered list if the `isQualified` predicate returns `true`.

### Usage:
In the `main` method, we demonstrate how to use the `filterList` method with a sample list of integers and a predicate to filter out even numbers.

This Java code should serve the same purpose as your original JavaScript function.