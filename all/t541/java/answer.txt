Here's how you can convert the JavaScript code into Java:

```java
import java.util.ArrayList;
import java.util.List;

/**
 * Filters elements from a list based on a qualification predicate.
 *
 * @param <T>          the type of elements in the input and output lists
 * @param unfilteredList the list to filter
 * @param isQualified    the predicate that determines if an element qualifies
 * @return a new list containing the elements that qualify
 */
public static <T> List<T> filterList(List<T> unfilteredList, Predicate<T> isQualified) {
    List<T> filteredList = new ArrayList<>();
    for (T item : unfilteredList) {
        if (isQualified.test(item)) {
            filteredList.add(item);
        }
    }
    return filteredList;
}
```

This Java method `filterList` works similarly to your JavaScript `filterArray`. It takes a `List` and a `Predicate` (which acts like your `isQualified` function), iterates over each element in the list, and adds it to a new list only if the predicate returns true for that element.

Please note that in Java, we use generics (`<T>`) to make the method work with any type of objects, just like JavaScript's functions can accept arrays of any type. Also, Java uses `Predicate` interface which represents a boolean-valued function of one argument. This is similar to your `isQualified` function.