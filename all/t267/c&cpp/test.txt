To convert the provided Python unittest test class into an equivalent test class using Catch2 in C++, we first need to define the function `extract_sld_tld` in C++. Then, we can write the test cases using Catch2's syntax and assertions. Below is the equivalent C++ code:

```cpp
#include <catch2/catch.hpp>
#include <string>
#include <utility> // For std::pair

// Function to extract the second-level and top-level domain names from the fully qualified domain name
std::pair<std::string, std::string> extract_sld_tld(const std::string& fqdn) {
    // This is a simple example implementation.
    // In a real-world scenario, you would have a more sophisticated logic to parse the domain.
    size_t lastDot = fqdn.find_last_of('.');
    if (lastDot == std::string::npos) {
        return {"", ""};
    }
    size_t secondLastDot = fqdn.substr(0, lastDot).find_last_of('.');
    if (secondLastDot == std::string::npos) {
        return {"", ""};
    }
    std::string sld = fqdn.substr(secondLastDot + 1, lastDot - (secondLastDot + 1));
    std::string tld = fqdn.substr(lastDot + 1);
    return {sld, tld};
}

TEST_CASE("Test extract_sld_tld function") {
    SECTION("Extracting SLD and TLD from valid FQDN") {
        auto [sld, tld] = extract_sld_tld("www.example.com");
        REQUIRE(sld == "example");
        REQUIRE(tld == "com");
    }

    SECTION("Extracting SLD and TLD from invalid FQDN") {
        auto [sld, tld] = extract_sld_tld("example.com");
        REQUIRE(sld == "");
        REQUIRE(tld == "");
    }

    SECTION("Extracting SLD and TLD from single-level domain") {
        auto [sld, tld] = extract_sld_tld("example");
        REQUIRE(sld == "");
        REQUIRE(tld == "");
    }
}
```

### Explanation:
1. **Function Definition**: The `extract_sld_tld` function is defined to take a string (fully qualified domain name) and return a pair of strings representing the second-level domain and top-level domain.
2. **Logic**: The function uses `find_last_of` to find the positions of the last dot (for TLD) and the second-to-last dot (for SLD).
3. **Test Cases**: The `TEST_CASE` macro is used to define a test case with multiple `SECTION`s. Each section tests different scenarios for the `extract_sld_tld` function.
4. **Assertions**: The `REQUIRE` macro is used to assert the expected outcomes of the test cases. 

This approach ensures that the functionality and logic of the original Python tests are preserved in the C++ version using Catch2.