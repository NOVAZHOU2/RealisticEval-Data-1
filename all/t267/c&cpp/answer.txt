Sure! Below is the equivalent C++ code for the provided Python function:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <sstream>

std::pair<std::string, std::string> extract_sld_tld(const std::string& fqdn) {
    // Split the FQDN into parts based on dots
    std::istringstream iss(fqdn);
    std::vector<std::string> parts;
    std::string part;
    while (getline(iss, part, '.')) {
        parts.push_back(part);
    }

    int num_parts = parts.size();
    if (num_parts <= 1) {
        throw std::invalid_argument("Invalid FQDN");
    }

    // Join all but the last two parts to get the SLD
    std::string sld;
    for (int i = 0; i < num_parts - 2; ++i) {
        sld += parts[i];
        if (i != num_parts - 3) {
            sld += '.';
        }
    }

    // The last two parts are TLD
    std::string tld = parts[num_parts - 2] + "." + parts[num_parts - 1];

    return {sld, tld};
}

int main() {
    try {
        auto [sld, tld] = extract_sld_tld("example.co.uk");
        std::cout << "Second-Level Domain: " << sld << std::endl;
        std::cout << "Top-Level Domain: " << tld << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }
    return 0;
}
```

### Explanation:
1. **Splitting the FQDN**: The `extract_sld_tld` function splits the input FQDN string into parts using `std::istringstream`.
2. **Extracting SLD and TLD**:
   - It then joins all parts except the last two to form the Second-Level Domain (SLD).
   - The last two parts are concatenated to form the Top-Level Domain (TLD).
3. **Return Value**: The function returns a `std::pair` containing the SLD and TLD.
4. **Main Function**: Demonstrates how to use the `extract_sld_tld` function and handles any potential exceptions.

This C++ code should work similarly to your Python function, extracting the SLD and TLD from a given FQDN.