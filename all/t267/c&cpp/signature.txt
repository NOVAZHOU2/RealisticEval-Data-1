Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <stdexcept>
#include <utility> // For std::pair

// Function to split a string by a delimiter
std::vector<std::string> split(const std::string& str, char delimiter) {
    std::vector<std::string> tokens;
    std::string token;
    std::istringstream tokenStream(str);

    while (std::getline(tokenStream, token, delimiter)) {
        tokens.push_back(token);
    }

    return tokens;
}

/**
 * Extracts the second-level domain (SLD) and top-level domain (TLD) from a fully qualified domain name (FQDN).
 *
 * @param fqdn The fully qualified domain name.
 * @return A pair containing the second-level domain and top-level domain.
 */
std::pair<std::string, std::string> extract_sld_tld(const std::string& fqdn) {
    // Split the FQDN into parts
    std::vector<std::string> parts = split(fqdn, '.');

    // Check if there are enough parts to extract SLD and TLD
    if (parts.size() < 2) {
        throw std::invalid_argument("The provided FQDN does not contain enough parts to extract SLD and TLD.");
    }

    // Extract the SLD and TLD
    std::string sld = parts[parts.size() - 2];  // Second to last item is the SLD
    std::string tld = parts[parts.size() - 1];  // Last item is the TLD

    return std::make_pair(sld, tld);
}

int main() {
    try {
        std::string fqdn = "example.com";
        auto result = extract_sld_tld(fqdn);
        std::cout << "SLD: " << result.first << ", TLD: " << result.second << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Include Directives**:
   - `#include <iostream>`: For input/output operations.
   - `#include <string>`: For string manipulation.
   - `#include <vector>`: For using vectors.
   - `#include <stdexcept>`: For throwing exceptions.
   - `#include <utility>`: For using `std::pair`.

2. **Split Function**:
   - The `split` function takes a string and a delimiter and returns a vector of strings containing the parts of the original string.

3. **Function Documentation**:
   - The `extract_sld_tld` function is documented using a multi-line comment block (`/* ... */`) with standard C++ documentation style.

4. **Function Signature**:
   - The function `extract_sld_tld` takes a `const std::string&` as input and returns a `std::pair<std::string, std::string>`.

5. **Main Function**:
   - The `main` function demonstrates how to use the `extract_sld_tld` function and handles any exceptions thrown.

This code preserves the original functionality and structure of the Python code while adapting it to C++ syntax and conventions.