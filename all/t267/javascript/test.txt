Certainly! Here is the equivalent Jest test suite for the given Python unittest class. I'll convert each test case and ensure that the functionality and logic are preserved.

### Python Unittest Code

```python
import unittest

class TestExtractSldTld(unittest.TestCase):
    def test_standard_fqdn(self):
        # Test a typical FQDN
        self.assertEqual(extract_sld_tld("www.example.com"), ("example", "com"))

    def test_standard_fqdn2(self):
        # Test a typical FQDN
        self.assertEqual(extract_sld_tld("www.example.xyz"), ("example", "xyz"))

    def test_fqdn_with_subdomains(self):
        # Test an FQDN with multiple subdomains
        self.assertEqual(extract_sld_tld("blog.subdomain.example.com"), ("example", "com"))

    def test_numeric_tld(self):
        # Test a numeric TLD, which can occur in private networks
        self.assertEqual(extract_sld_tld("server.example.123"), ("example", "123"))
```

### Equivalent Jest Test Suite

First, let's define the `extractSldTld` function in JavaScript:

```javascript
function extractSldTld(fqdn) {
    // Split the FQDN into parts
    const parts = fqdn.split('.');

    // Check if there are enough parts to extract SLD and TLD
    if (parts.length < 2) {
        throw new Error("The provided FQDN does not contain enough parts to extract SLD and TLD.");
    }

    // Extract the SLD and TLD
    const sld = parts[parts.length - 2];  // Second to last item is the SLD
    const tld = parts[parts.length - 1];  // Last item is the TLD

    return [sld, tld];
}
```

Now, let's write the Jest test suite:

```javascript
const extractSldTld = require('./path/to/extractSldTld'); // Adjust the path as needed

describe('TestExtractSldTld', () => {
    it('test standard FQDN', () => {
        // Test a typical FQDN
        expect(extractSldTld("www.example.com")).toEqual(["example", "com"]);
    });

    it('test standard FQDN 2', () => {
        // Test a typical FQDN
        expect(extractSldTld("www.example.xyz")).toEqual(["example", "xyz"]);
    });

    it('test FQDN with subdomains', () => {
        // Test an FQDN with multiple subdomains
        expect(extractSldTld("blog.subdomain.example.com")).toEqual(["example", "com"]);
    });

    it('test numeric TLD', () => {
        // Test a numeric TLD, which can occur in private networks
        expect(extractSldTld("server.example.123")).toEqual(["example", "123"]);
    });
});
```

### Explanation:
1. **Import the Function**:
   - The `extractSldTld` function is imported using `require` or `import` depending on your module system.

2. **Describe Block**:
   - The `describe` block groups the test cases together under a descriptive title.

3. **It Blocks**:
   - Each `it` block represents a specific test case.
   - The `expect` function is used to assert the expected outcome of the function call.

4. **Assertions**:
   - The `toEqual` matcher is used to compare arrays, ensuring that the extracted SLD and TLD match the expected values.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adhering to Jest's syntax and conventions.