Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Extracts the second-level domain (SLD) and top-level domain (TLD) from a fully qualified domain name (FQDN).
 * 
 * @param fqdn - The fully qualified domain name.
 * @returns A tuple containing the second-level domain and top-level domain.
 */
function extractSldTld(fqdn: string): [string, string] {
    // Split the FQDN into parts
    const parts = fqdn.split('.');

    // Check if there are enough parts to extract SLD and TLD
    if (parts.length < 2) {
        throw new Error("The provided FQDN does not contain enough parts to extract SLD and TLD.");
    }

    // Extract the SLD and TLD
    const sld = parts[parts.length - 2];  // Second to last item is the SLD
    const tld = parts[parts.length - 1];  // Last item is the TLD

    return [sld, tld];
}
```

### Explanation:
1. **Function Definition**: The function `extractSldTld` is defined with a single parameter `fqdn` of type `string`.
2. **Return Type**: The function returns a tuple `[string, string]`, indicating it returns two strings.
3. **JSDoc Documentation**:
   - The JSDoc comment block is used to document the function.
   - The `@param` tag is used to describe the parameter `fqdn`.
   - The `@returns` tag is used to describe the return value.
4. **Splitting the FQDN**: The `split` method is used to split the FQDN into an array of parts.
5. **Validation**: If the length of the `parts` array is less than 2, a `Error` is thrown with an appropriate message.
6. **Extracting SLD and TLD**: The second-to-last and last elements of the `parts` array are extracted as the SLD and TLD respectively.
7. **Returning the Result**: The function returns a tuple containing the SLD and TLD.

This TypeScript code preserves the original functionality and structure of the Python code, while adhering to TypeScript conventions and providing clear documentation.