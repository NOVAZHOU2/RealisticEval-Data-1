Certainly! Here is the equivalent TypeScript code using Jest for the provided Python unittest test class. The test cases will use Jest's assertion methods to ensure the functionality and logic are preserved.

### TypeScript Code with Jest Testing

First, ensure you have Jest installed in your project:
```sh
npm install --save-dev jest ts-jest @types/jest
```

Then, configure Jest in your `tsconfig.json` and `jest.config.js` files if you haven't already.

#### TypeScript Test Class

```typescript
import { extractSldTld } from './path/to/extractSldTld'; // Import the function from its module

describe('TestExtractSldTld', () => {
    it('test standard FQDN', () => {
        // Test a typical FQDN
        expect(extractSldTld("www.example.com")).toEqual(["example", "com"]);
    });

    it('test standard FQDN2', () => {
        // Test a typical FQDN
        expect(extractSldTld("www.example.xyz")).toEqual(["example", "xyz"]);
    });

    it('test FQDN with subdomains', () => {
        // Test an FQDN with multiple subdomains
        expect(extractSldTld("blog.subdomain.example.com")).toEqual(["example", "com"]);
    });

    it('test numeric TLD', () => {
        // Test a numeric TLD, which can occur in private networks
        expect(extractSldTld("server.example.123")).toEqual(["example", "123"]);
    });
});
```

### Explanation:
1. **Import the Function**: Import the `extractSldTld` function from its module.
2. **Describe Block**: Use the `describe` block to group the test cases under a descriptive name.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Assertion Methods**:
   - `expect`: Used to make assertions about the function's return value.
   - `toEqual`: Used to check if the returned tuple matches the expected tuple.

### Jest Configuration

Ensure you have the necessary configurations in your project:

#### `tsconfig.json`
```json
{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true
  },
  "include": ["src/**/*"]
}
```

#### `jest.config.js`
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest'
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
};
```

### Running the Tests

To run the tests, add a script to your `package.json`:
```json
"scripts": {
  "test": "jest"
}
```

Run the tests using:
```sh
npm test
```

This setup ensures that the tests are structured and executed correctly using Jest, maintaining the same functionality and logic as the original Python unittest test class.