To solve this problem, we need to first define the function `extract_sld_tld` in TypeScript and then write the corresponding test class using Jest. Since the original Python function is not given, I'll assume a simple implementation of `extract_sld_tld` as an example. 

Hereâ€™s how you can convert the Python function and unittest class to TypeScript and Jest:

1. **Define the Function in TypeScript:**

```typescript
function extractSldTld(fqdn: string): [string, string] {
    const parts = fqdn.split('.');
    if (parts.length < 2) {
        throw new Error('Invalid FQDN');
    }
    return [parts[parts.length - 2], parts[parts.length - 1]];
}
```

2. **Write the Jest Test Class:**

```typescript
import { extractSldTld } from './path-to-your-function'; // Replace with the actual path

describe('extractSldTld', () => {
    it('should extract the correct SLD and TLD from a valid FQDN', () => {
        expect(extractSldTld('example.com')).toEqual(['example', 'com']);
        expect(extractSldTld('subdomain.example.com')).toEqual(['subdomain.example', 'com']);
        expect(extractSldTld('www.subdomain.example.com')).toEqual(['www.subdomain.example', 'com']);
    });

    it('should throw an error for invalid FQDNs', () => {
        expect(() => extractSldTld('example')).toThrow('Invalid FQDN');
        expect(() => extractSldTld('.com')).toThrow('Invalid FQDN');
    });
});
```

### Explanation:
- **Function Definition (`extractSldTld`)**:
  - The function takes a fully qualified domain name (FQDN) and splits it by dots.
  - It checks if there are at least two parts, and if not, throws an error.
  - It returns the last two parts as the second-level domain (SLD) and top-level domain (TLD).

- **Jest Test Suite (`describe`)**:
  - The `describe` block groups related tests together.
  - Each `it` block represents a single test case.
  - `expect` is used to make assertions about the behavior of the function.
  - `toEqual` checks if the returned value matches the expected value.
  - `toThrow` checks if the function throws the expected error message.

This setup ensures that the functionality and logic of the tests are preserved while adapting to TypeScript and Jest.