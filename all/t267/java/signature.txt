Sure! Hereâ€™s the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
import java.util.AbstractMap.SimpleEntry;

public class Answer {

    /**
     * Extracts the second-level domain (SLD) and top-level domain (TLD) from a fully qualified domain name (FQDN).
     * 
     * @param fqdn The fully qualified domain name.
     * @return A pair containing the second-level domain and top-level domain.
     * @throws IllegalArgumentException if the provided FQDN does not contain enough parts to extract SLD and TLD.
     */
    public static SimpleEntry<String, String> extractSldTld(String fqdn) {
        // Split the FQDN into parts
        String[] parts = fqdn.split("\\.");

        // Check if there are enough parts to extract SLD and TLD
        if (parts.length < 2) {
            throw new IllegalArgumentException("The provided FQDN does not contain enough parts to extract SLD and TLD.");
        }

        // Extract the SLD and TLD
        String sld = parts[parts.length - 2];  // Second to last item is the SLD
        String tld = parts[parts.length - 1];  // Last item is the TLD

        return new SimpleEntry<>(sld, tld);
    }

    public static void main(String[] args) {
        // Example usage
        try {
            SimpleEntry<String, String> result = extractSldTld("example.com");
            System.out.println("SLD: " + result.getKey());
            System.out.println("TLD: " + result.getValue());
        } catch (IllegalArgumentException e) {
            System.err.println(e.getMessage());
        }
    }
}
```

### Explanation:
1. **Package and Class Definition**: The Java code is defined within the class `Answer`.

2. **Method Signature**:
   - The method `extractSldTld` is declared as `static` and returns a `SimpleEntry<String, String>`, which is a convenient way to represent a pair of values in Java.

3. **Javadoc Comments**:
   - The Python docstring is converted into a Javadoc comment block.
   - The `@param` tag is used to describe the parameter `fqdn`.
   - The `@return` tag is used to describe the return value.
   - The `@throws` tag is used to document the exception that can be thrown.

4. **Exception Handling**:
   - An `IllegalArgumentException` is thrown if the FQDN does not have enough parts.

5. **Utility Class `SimpleEntry`**:
   - The `SimpleEntry` class from `java.util.AbstractMap` is used to represent a pair of values. It provides methods `getKey()` and `getValue()` to access the elements.

6. **Main Method**:
   - An example usage is provided in the `main` method to demonstrate how to call the `extractSldTld` method and handle the returned `SimpleEntry`.

This conversion preserves the original functionality and structure while adhering to Java conventions and best practices.