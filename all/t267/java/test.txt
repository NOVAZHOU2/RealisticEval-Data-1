Sure! Below is the Java equivalent of the given Python code using JUnit for testing. I'll start by defining the method `extractSldTld` and then provide the JUnit test class.

### Java Method Definition

First, let's define the method `extractSldTld`:

```java
import java.util.Arrays;
import java.util.List;

public class DomainExtractor {

    /**
     * Extracts the second-level and top-level domain names from the fully qualified domain name (FQDN).
     * 
     * @param fqdn The fully qualified domain name.
     * @return An array containing the second-level domain and top-level domain.
     */
    public static String[] extractSldTld(String fqdn) {
        List<String> parts = Arrays.asList(fqdn.split("\\."));
        
        if (parts.size() < 2) {
            throw new IllegalArgumentException("Invalid FQDN");
        }
        
        String tld = parts.get(parts.size() - 1);
        String sld = parts.get(parts.size() - 2);
        
        return new String[]{sld, tld};
    }
}
```

### JUnit Test Class

Now, let's create the JUnit test class:

```java
import org.junit.Test;
import org.junit.Assert;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.real.temp.Tester;

@RunWith(JUnit4.class)
public class Tester {

    @Test
    public void testExtractSldTld() {
        // Test cases to verify the correctness of the method
        String[] result1 = DomainExtractor.extractSldTld("example.com");
        Assert.assertArrayEquals(new String[]{"example", "com"}, result1);

        String[] result2 = DomainExtractor.extractSldTld("subdomain.example.co.uk");
        Assert.assertArrayEquals(new String[]{"subdomain.example", "co.uk"}, result2);

        // Add more test cases as needed
    }
}
```

### Explanation

1. **Method Definition**: The method `extractSldTld` is defined in the `DomainExtractor` class. It takes a fully qualified domain name (`fqdn`) and returns an array containing the second-level domain and top-level domain.

2. **JUnit Test Class**:
   - The test class is annotated with `@RunWith(JUnit4.class)` to specify the runner for the JUnit tests.
   - The `@Test` annotation is used to mark the test method.
   - The `Assert.assertArrayEquals` method is used to check the correctness of the returned array against expected values.

3. **Package Declaration**: The test class is placed in the package `org.real.temp`.

This setup ensures that the functionality and logic of the tests are preserved while adapting to Java's syntax and structure.