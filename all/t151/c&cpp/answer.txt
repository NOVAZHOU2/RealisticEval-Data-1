Hereâ€™s the C++ equivalent of your TypeScript code:

```cpp
#include <iostream>
#include <stdexcept>
#include <algorithm>
#include <cmath>

struct RGB {
    int r;
    int g;
    int b;
};

struct HSL {
    int h;
    int s;
    int l;
};

HSL rgbToHsl(const RGB& rgb) {
    if (rgb.r < 0 || rgb.r > 255 || rgb.g < 0 || rgb.g > 255 || rgb.b < 0 || rgb.b > 255) {
        throw std::invalid_argument("Invalid RGB value. Each value must be between 0 and 255.");
    }

    double r = rgb.r / 255.0;
    double g = rgb.g / 255.0;
    double b = rgb.b / 255.0;

    double max = std::max({r, g, b});
    double min = std::min({r, g, b});
    double h = 0, s = 0;
    double l = (max + min) / 2;

    if (max != min) {
        double d = max - min;
        s = (l > 0.5) ? d / (2 - max - min) : d / (max + min);

        if (max == r) {
            h = (g - b) / d + (g < b ? 6 : 0);
        } else if (max == g) {
            h = (b - r) / d + 2;
        } else {
            h = (r - g) / d + 4;
        }
        h /= 6;
    }

    return { static_cast<int>(std::round(h * 360)), static_cast<int>(std::round(s * 100)), static_cast<int>(std::round(l * 100)) };
}
```

This C++ code mirrors the functionality of your TypeScript function, converting RGB values to HSL format.