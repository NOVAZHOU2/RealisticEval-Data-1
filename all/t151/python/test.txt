Certainly! Below is the equivalent Python unit test using the unittest framework for the provided TypeScript Jest test cases.
python
import unittest

# Assuming the rgb_to_hsl function is defined in another module,
# you would typically import it like this:
# from your_module import rgb_to_hsl

def rgb_to_hsl(rgb):
    """
    Converts RGB color values to HSL (Hue, Saturation, Lightness) color values.
    The input RGB values should be in the range of 0 to 255, and the output HSL values will have:
    - `h` (Hue) in the range of 0 to 360,
    - `s` (Saturation) in the range of 0 to 100 (percentage),
    - `l` (Lightness) in the range of 0 to 100 (percentage).
    """
    r, g, b = rgb['r'], rgb['g'], rgb['b']
    if r < 0 or r > 255 or g < 0 or g > 255 or b < 0 or b > 255:
        raise ValueError('Invalid RGB value. Each value must be between 0 and 255.')
    r /= 255
    g /= 255
    b /= 255
    max_val = max(r, g, b)
    min_val = min(r, g, b)
    h = s = 0
    l = (max_val + min_val) / 2
    if max_val != min_val:
        d = max_val - min_val
        s = d / (2 - max_val - min_val) if l > 0.5 else d / (max_val + min_val)
        if max_val == r:
            h = (g - b) / d + (6 if g < b else 0)
        elif max_val == g:
            h = (b - r) / d + 2
        elif max_val == b:
            h = (r - g) / d + 4
        h /= 6
    return {
        'h': round(h * 360),
        's': round(s * 100),
        'l': round(l * 100)
    }

class TestRgbToHsl(unittest.TestCase):

    def test_basic_rgb_red(self):
        rgb = {'r': 255, 'g': 0, 'b': 0}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 0, 's': 100, 'l': 50})

    def test_grayscale_middle_gray(self):
        rgb = {'r': 128, 'g': 128, 'b': 128}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 0, 's': 0, 'l': 50})

    def test_edge_case_white(self):
        rgb = {'r': 255, 'g': 255, 'b': 255}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 0, 's': 0, 'l': 100})

    def test_edge_case_black(self):
        rgb = {'r': 0, 'g': 0, 'b': 0}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 0, 's': 0, 'l': 0})

    def test_vibrant_green(self):
        rgb = {'r': 0, 'g': 255, 'b': 0}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 120, 's': 100, 'l': 50})

    def test_deep_blue(self):
        rgb = {'r': 0, 'g': 0, 'b': 255}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 240, 's': 100, 'l': 50})

if __name__ == '__main__':
    unittest.main()
Explanation:
Imports: The unittest module is imported to create the test cases.
Test Class: TestRgbToHsl is a subclass of unittest.TestCase that contains all the test methods.
Test Methods: Each test case from the TypeScript code is translated into a method:
Assertions: self.assertEqual is used to compare the actual output from the rgb_to_hsl function with the expected output.
Function Definition: A basic implementation of rgb_to_hsl is provided for testing. You can replace this with the actual implementation from your module.
Main Block: unittest.main() is called if the script is run directly, which executes the tests.
You can run this code in a Python environment to verify the functionality of the rgb_to_hsl function with the specified test cases.