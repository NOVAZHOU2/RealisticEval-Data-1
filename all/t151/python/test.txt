To convert the provided TypeScript Jest test cases for the rgbToHsl function into Python unittest framework test cases, we will follow a similar structure. Below is the converted code:
Python Unit Test Code
python
import unittest

def rgb_to_hsl(rgb: dict[str, int]) -> dict[str, int]:
    # Implementation of rgb_to_hsl goes here (use the previous implementation provided)
    r = rgb['r']
    g = rgb['g']
    b = rgb['b']

    if r < 0 or r > 255 or g < 0 or g > 255 or b < 0 or b > 255:
        raise ValueError('Invalid RGB value. Each value must be between 0 and 255.')

    # Normalize RGB values to [0, 1]
    r /= 255.0
    g /= 255.0
    b /= 255.0

    max_val = max(r, g, b)
    min_val = min(r, g, b)

    h = s = 0
    l = (max_val + min_val) / 2

    if max_val != min_val:
        d = max_val - min_val
        s = l > 0.5 and (d / (2 - max_val - min_val)) or (d / (max_val + min_val))

        if max_val == r:
            h = (g - b) / d + (6 if g < b else 0)
        elif max_val == g:
            h = (b - r) / d + 2
        elif max_val == b:
            h = (r - g) / d + 4

        h /= 6

    return {
        'h': round(h * 360),
        's': round(s * 100),
        'l': round(l * 100)
    }

class TestRgbToHsl(unittest.TestCase):

    def test_basic_rgb_red(self):
        rgb = {'r': 255, 'g': 0, 'b': 0}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 0, 's': 100, 'l': 50})

    def test_grayscale_middle_gray(self):
        rgb = {'r': 128, 'g': 128, 'b': 128}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 0, 's': 0, 'l': 50})

    def test_edge_case_white(self):
        rgb = {'r': 255, 'g': 255, 'b': 255}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 0, 's': 0, 'l': 100})

    def test_edge_case_black(self):
        rgb = {'r': 0, 'g': 0, 'b': 0}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 0, 's': 0, 'l': 0})

    def test_vibrant_green(self):
        rgb = {'r': 0, 'g': 255, 'b': 0}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 120, 's': 100, 'l': 50})

    def test_deep_blue(self):
        rgb = {'r': 0, 'g': 0, 'b': 255}
        result = rgb_to_hsl(rgb)
        self.assertEqual(result, {'h': 240, 's': 100, 'l': 50})

if __name__ == '__main__':
    unittest.main()
Explanation of the Converted Code:
Function Definition:
The rgb_to_hsl function is defined as before. You can insert the implementation you had from earlier responses.
Test Class:
The TestRgbToHsl class inherits from unittest.TestCase, which is the standard way to create test cases in Python's unittest framework.
Test Methods:
Each test case from the TypeScript code is converted into a method of the TestRgbToHsl class.
Each method uses self.assertEqual to check if the result from rgb_to_hsl matches the expected output.
Running the Tests:
The if __name__ == '__main__': block allows you to run the tests directly by executing the script.
You can run this Python code in an environment where the unittest framework is available, and it will execute the test cases to verify that the rgb_to_hsl function works as expected.