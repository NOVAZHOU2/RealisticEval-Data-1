Sure! Below is the equivalent Python code that implements the same functionality as your TypeScript rgbToHsl function. The Python version also includes error handling for invalid RGB values and normalizes the RGB values to the range of [0, 1] before converting to HSL.
python
def rgb_to_hsl(r: int, g: int, b: int) -> dict:
    # Check if RGB values are within the valid range
    if r < 0 or r > 255 or g < 0 or g > 255 or b < 0 or b > 255:
        raise ValueError('Invalid RGB value. Each value must be between 0 and 255.')

    # Normalize RGB values to the range [0, 1]
    r /= 255
    g /= 255
    b /= 255

    # Calculate max and min of the normalized RGB values
    max_val = max(r, g, b)
    min_val = min(r, g, b)

    # Initialize H, S, L values
    h = s = 0
    l = (max_val + min_val) / 2

    # If max and min are not equal, calculate H and S
    if max_val != min_val:
        d = max_val - min_val
        s = d / (2 - max_val - min_val) if l > 0.5 else d / (max_val + min_val)

        # Calculate Hue
        if max_val == r:
            h = (g - b) / d + (6 if g < b else 0)
        elif max_val == g:
            h = (b - r) / d + 2
        elif max_val == b:
            h = (r - g) / d + 4

        h /= 6

    # Return HSL values, rounding H, S, and L to the nearest integer
    return {
        'h': round(h * 360),
        's': round(s * 100),
        'l': round(l * 100)
    }

# Example usage
rgb_color = {'r': 255, 'g': 0, 'b': 0}
hsl_color = rgb_to_hsl(rgb_color['r'], rgb_color['g'], rgb_color['b'])
print(hsl_color)  # Output: {'h': 0, 's': 100, 'l': 50}
Explanation:
Function Definition: The function rgb_to_hsl takes three parameters: r, g, and b, which are the red, green, and blue components of the color.
Error Handling: It checks if any of the RGB values are outside the valid range (0-255). If they are, it raises a ValueError.
Normalization: The RGB values are normalized to the range [0, 1].
Max and Min Calculation: It calculates the maximum and minimum values from the normalized RGB values.
HSL Calculation:
If the max and min values are not equal, it calculates saturation and hue based on the color differences.
The hue is adjusted according to the color channel with the maximum value.
Return Value: The function returns a dictionary containing the HSL values, rounding the hue, saturation, and lightness to the nearest integers.
You can test the function by passing RGB values, and it will return the corresponding HSL values as a dictionary.