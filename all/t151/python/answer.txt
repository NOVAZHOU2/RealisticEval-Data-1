Hereâ€™s how you can translate the provided TypeScript rgbToHsl function into Python. This Python version retains the logic and structure while adapting to Python syntax and conventions.
Python Code
python
def rgb_to_hsl(rgb: dict[str, int]) -> dict[str, int]:
    """
    Convert RGB color values to HSL.
    
    :param rgb: A dictionary containing the red, green, and blue components of the color.
    :raises ValueError: If any RGB value is not in the range of 0 to 255.
    :return: A dictionary containing the hue, saturation, and lightness components.
    """
    
    r = rgb['r']
    g = rgb['g']
    b = rgb['b']
    
    if r < 0 or r > 255 or g < 0 or g > 255 or b < 0 or b > 255:
        raise ValueError('Invalid RGB value. Each value must be between 0 and 255.')

    # Normalize RGB values to [0, 1]
    r /= 255.0
    g /= 255.0
    b /= 255.0
    
    max_val = max(r, g, b)
    min_val = min(r, g, b)
    
    h = s = 0
    l = (max_val + min_val) / 2
    
    if max_val != min_val:
        d = max_val - min_val
        s = l > 0.5 and (d / (2 - max_val - min_val)) or (d / (max_val + min_val))
        
        if max_val == r:
            h = (g - b) / d + (6 if g < b else 0)
        elif max_val == g:
            h = (b - r) / d + 2
        elif max_val == b:
            h = (r - g) / d + 4
            
        h /= 6

    # Return HSL result, using percentage for saturation and lightness
    return {
        'h': round(h * 360),
        's': round(s * 100),
        'l': round(l * 100)
    }

# Example usage
rgb_color = {'r': 255, 'g': 99, 'b': 71}
hsl_color = rgb_to_hsl(rgb_color)
print(hsl_color)  # Output should be: {'h': 6, 's': 100, 'l': 50}
Explanation of Changes:
Function Definition:
The function is named rgb_to_hsl, following Python's naming convention (snake_case).
The function parameter is a dictionary expected to contain keys r, g, and b.
Error Handling:
Instead of throwing an error, Python uses ValueError to raise exceptions for invalid RGB values.
Normalization:
The RGB values are normalized to the range [0, 1] using floating-point division.
Hue Calculation:
The logic for calculating hue, saturation, and lightness remains the same as in TypeScript but uses Python's syntax.
Return Value:
The function returns a dictionary containing h, s, and l, similar to the TypeScript return structure.
Example Usage:
The example at the end shows how to use the rgb_to_hsl function, which will print the HSL equivalent of the provided RGB color.
You can run this code in a Python environment to verify its correctness.