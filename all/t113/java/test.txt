Here's the equivalent JUnit 4 test case in Java for your Jest test code. This assumes you have a method `getCSSFromSheet` in a class named `Tester` within the package `org.real.temp`.

```java
package org.real.temp;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.w3c.dom.css.CSSStyleSheet;
import org.w3c.dom.css.CSSRule;

import static org.junit.Assert.assertEquals;

public class TesterTest {
    private CSSStyleSheet styleSheet;

    @Before
    public void setUp() throws Exception {
        // Create a style element with some CSS rules for testing
        String css = "body { background-color: red; }\n" +
                     "p { color: blue; }";
        styleSheet = createStyleSheet(css);
    }

    @After
    public void tearDown() throws Exception {
        // Clean up the document after each test
        clearDocument();
    }

    @Test
    public void testEmptyStylesheet() {
        CSSStyleSheet emptyStyleSheet = createEmptyStyleSheet();
        String cssText = new Tester().getCSSFromSheet(emptyStyleSheet);
        assertEquals("", cssText);
    }

    @Test
    public void testInvalidInput() {
        assertEquals("", new Tester().getCSSFromSheet(null));
        assertEquals("", new Tester().getCSSFromSheet(new Object())); // Non-CSSStyleSheet input
        assertEquals("", new Tester().getCSSFromSheet("not a stylesheet")); // Invalid input
    }

    @Test
    public void testCrossOriginRestrictions() {
        // Simulate a cross-origin stylesheet
        CSSStyleSheet restrictedSheet = createCrossOriginStyleSheet();
        
        // Call the method, expecting no exceptions
        String cssText = new Tester().getCSSFromSheet(restrictedSheet);
        assertEquals("", cssText); // Simulate behavior by returning an empty string
    }

    @Test
    public void testStyleElementWithInlineCSS() {
        CSSStyleSheet styleElementSheet = createStyleSheet("div { font-size: 16px; }");
        String cssText = new Tester().getCSSFromSheet(styleElementSheet);
        assertEquals("div {font-size: 16px;}", cssText);
    }

    // Mock methods for creating style sheets (you'll need to implement these)
    private CSSStyleSheet createStyleSheet(String css) {
        // Implementation to create a CSSStyleSheet with the given CSS
    }

    private CSSStyleSheet createEmptyStyleSheet() {
        // Implementation to create an empty CSSStyleSheet
    }

    private CSSStyleSheet createCrossOriginStyleSheet() {
        // Implementation to simulate a cross-origin CSSStyleSheet
    }

    private void clearDocument() {
        // Implementation to clear the document head
    }
}
```

### Notes:
- You will need to implement the mock methods (`createStyleSheet`, `createEmptyStyleSheet`, `createCrossOriginStyleSheet`, and `clearDocument`) to set up your CSS stylesheets and manage the document state, as JUnit does not directly manipulate the DOM like JavaScript in a browser.
- JUnit does not have built-in support for manipulating a document like in JavaScript, so you may need to use a library like [JSoup](https://jsoup.org/) to handle HTML documents in your tests if necessary.