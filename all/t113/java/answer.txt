Sure! Here's the equivalent Java code for the given JavaScript function, assuming you want to work with CSS stylesheets in a similar manner. Note that Java does not have direct equivalents for all JavaScript features, especially when it comes to web APIs like `CSSStyleSheet`. However, I'll provide a Java implementation using a hypothetical or library-based approach.

```java
import java.util.ArrayList;
import java.util.List;

public class CSSUtils {

    public static String getCSSFromSheet(CSSStyleSheet sheet) {
        // Check if the sheet is a valid CSSStyleSheet and has rules we can access
        if (sheet == null || sheet.getCssRules() == null) {
            return "";
        }

        // Convert the CSSRuleList into a List and then join to construct the final CSS string
        List<String> cssTexts = new ArrayList<>();
        CSSRuleList rules = sheet.getCssRules();
        for (int i = 0; i < rules.getLength(); i++) {
            CSSRule rule = rules.item(i);
            cssTexts.add(rule.getCssText());
        }

        return String.join("", cssTexts);
    }

    // Hypothetical classes/interfaces to simulate the environment
    public interface CSSStyleSheet {
        CSSRuleList getCssRules();
    }

    public interface CSSRuleList {
        int getLength();
        CSSRule item(int index);
    }

    public interface CSSRule {
        String getCssText();
    }
}
```

### Explanation:
1. **Check Validity**: The method checks if the `sheet` is not null and if its `cssRules` are not null.
2. **Convert to List**: It converts the `CSSRuleList` into a `List<String>` by iterating over each rule and getting its `cssText`.
3. **Join Strings**: Finally, it joins all the strings together to form the final CSS string.

### Note:
- The interfaces (`CSSStyleSheet`, `CSSRuleList`, `CSSRule`) are provided here as placeholders. In a real-world scenario, you would use actual implementations from a library or framework that supports CSS manipulation in Java.
- If you're working with a specific Java library or framework for CSS manipulation, you might need to adjust the class and method names accordingly.