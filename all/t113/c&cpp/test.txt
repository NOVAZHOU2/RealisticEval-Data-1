Certainly! To translate your Jest test case to a C++ test case using Catch2, we need to set up a similar testing framework. Below is the equivalent C++ code using Catch2 for the given Jest test case.

First, make sure you have Catch2 installed and included in your project. You can install Catch2 via a package manager or include it directly in your project.

### Setup
1. **Install Catch2**:
   ```sh
   git clone https://github.com/catchorg/Catch2.git --branch v3.x
   ```

2. **Include Catch2 in your project**:
   Add the following headers to your project:
   ```cpp
   #include <catch2/catch_test_macros.hpp>
   ```

### C++ Test Case
Hereâ€™s the translated test case using Catch2:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <vector>

// Assuming CSSStyleSheet and CSSRule are defined in some way.
// For demonstration purposes, let's define them as follows:
struct CSSRule {
    std::string cssText;
};

struct CSSStyleSheet {
    std::vector<CSSRule> cssRules;
};

// Function to extract CSS from a stylesheet
std::string getCSSFromSheet(const CSSStyleSheet& sheet) {
    // Check if the sheet has rules we can access
    if (sheet.cssRules.empty()) {
        return "";
    }

    // Use a loop to construct the final CSS string
    std::string cssString;
    for (const auto& rule : sheet.cssRules) {
        cssString += rule.cssText;
    }

    return cssString;
}

TEST_CASE("getCSSFromSheet", "[getCSSFromSheet]") {
    SECTION("Empty Stylesheet: should return an empty string") {
        CSSStyleSheet emptyStyleSheet;
        REQUIRE(getCSSFromSheet(emptyStyleSheet).empty());
    }

    SECTION("Invalid Input: should return an empty string for non-CSSStyleSheet input") {
        REQUIRE(getCSSFromSheet(CSSStyleSheet{}).empty());
        REQUIRE(getCSSFromSheet(CSSStyleSheet()).empty());
        REQUIRE(getCSSFromSheet(CSSStyleSheet()).empty()); // Note: In C++, there's no direct equivalent to passing null or strings as non-stylesheet inputs
    }

    SECTION("Cross-Origin Restrictions: should handle restricted stylesheets gracefully") {
        // Simulate a cross-origin stylesheet
        CSSStyleSheet restrictedSheet;
        restrictedSheet.cssRules = {}; // Simulate an empty or restricted sheet

        REQUIRE_NOTHROW(getCSSFromSheet(restrictedSheet));
        REQUIRE(getCSSFromSheet(restrictedSheet).empty());
    }

    SECTION("Style Element with Inline CSS: should return CSS from inline style element") {
        CSSStyleSheet styleSheet;
        styleSheet.cssRules = {
            {"div { font-size: 16px; }"}
        };

        REQUIRE(getCSSFromSheet(styleSheet) == "div { font-size: 16px; }");
    }
}
```

### Explanation:
1. **Catch2 Headers**: Include the necessary Catch2 headers.
2. **Struct Definitions**: Define `CSSRule` and `CSSStyleSheet` structs to mimic the structure of CSS rules and stylesheets.
3. **Function `getCSSFromSheet`**: Implement the function to extract CSS from a stylesheet.
4. **Test Case Definition**:
   - **`SECTION("Empty Stylesheet: should return an empty string")`**: Tests an empty stylesheet.
   - **`SECTION("Invalid Input: should return an empty string for non-CSSStyleSheet input")`**: Tests invalid inputs.
   - **`SECTION("Cross-Origin Restrictions: should handle restricted stylesheets gracefully")`**: Simulates a restricted stylesheet.
   - **`SECTION("Style Element with Inline CSS: should return CSS from inline style element")`**: Tests a style element with inline CSS.

### Running the Tests
To run the tests, compile your code with Catch2 and execute the binary. For example, if your test file is named `test_css.cpp`, you can compile it as follows:

```sh
g++ -std=c++17 -o test_css test_css.cpp -I/path/to/catch2/include
./test_css
```

This setup provides a comprehensive translation of your Jest test case to a C++ test case using Catch2.