Here's how you can convert the provided JavaScript Jest test case into a Catch2 test case in C++. This assumes that you have similar classes and methods in place for handling CSS styles:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <sstream>
#include <vector>

class CSSRule {
public:
    std::string cssText;
};

class CSSStyleSheet {
public:
    std::vector<CSSRule> cssRules;

    bool isValid() const {
        return !cssRules.empty();
    }
};

std::string getCSSFromSheet(const CSSStyleSheet& sheet) {
    if (!sheet.isValid()) {
        return "";
    }
    
    std::ostringstream oss;
    for (const auto& rule : sheet.cssRules) {
        oss << rule.cssText;
    }
    
    return oss.str();
}

TEST_CASE("getCSSFromSheet", "[CSS]") {
    CSSStyleSheet styleSheet;

    SECTION("Empty Stylesheet: should return an empty string") {
        CSSStyleSheet emptyStyleSheet;
        REQUIRE(getCSSFromSheet(emptyStyleSheet) == "");
    }

    SECTION("Invalid Input: should return an empty string for non-CSSStyleSheet input") {
        // Assuming you have a way to test non-CSSStyleSheet input
        // In C++, you would typically not be able to pass null or random objects
        // so this might be more limited in scope.
        // Here we just represent invalid cases.
        REQUIRE(getCSSFromSheet(CSSStyleSheet{}) == "");
        // Additional cases can be added as necessary.
    }

    SECTION("Cross-Origin Restrictions: should handle restricted stylesheets gracefully") {
        // Simulate behavior of a restricted stylesheet
        CSSStyleSheet restrictedSheet; // In real case, you would mock this appropriately
        REQUIRE_NOTHROW(getCSSFromSheet(restrictedSheet));
        REQUIRE(getCSSFromSheet(restrictedSheet) == "");
    }

    SECTION("Style Element with Inline CSS: should return CSS from inline style element") {
        CSSStyleSheet styleElement;
        styleElement.cssRules.push_back({"div { font-size: 16px; }"});
        
        REQUIRE(getCSSFromSheet(styleElement) == "div { font-size: 16px; }");
    }
}
```

This C++ code uses Catch2 for testing and sets up the equivalent structure for your test cases, focusing on validating the behavior of the `getCSSFromSheet` function. Adjustments may be needed based on how CSS styles and rules are represented in your actual C++ codebase.