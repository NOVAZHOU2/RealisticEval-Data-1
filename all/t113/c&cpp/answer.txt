Sure! Here's how you can translate the given JavaScript function to C++ code, assuming you're working with a similar context where you might need to handle CSS stylesheets. Since C++ does not have native support for CSS stylesheets, I'll provide a generic example using standard C++ libraries.

```cpp
#include <iostream>
#include <vector>
#include <string>

// Assuming CSSStyleSheet and CSSRule are defined in some way.
// For demonstration purposes, let's define them as follows:
struct CSSRule {
    std::string cssText;
};

struct CSSStyleSheet {
    std::vector<CSSRule> cssRules;
};

// Function to extract CSS from a stylesheet
std::string getCSSFromSheet(const CSSStyleSheet& sheet) {
    // Check if the sheet has rules we can access
    if (sheet.cssRules.empty()) {
        return "";
    }

    // Use a loop to construct the final CSS string
    std::string cssString;
    for (const auto& rule : sheet.cssRules) {
        cssString += rule.cssText;
    }

    return cssString;
}

int main() {
    // Example usage
    CSSStyleSheet sheet;
    sheet.cssRules = {
        {"/* Rule 1 */"},
        {"/* Rule 2 */"}
    };

    std::string css = getCSSFromSheet(sheet);
    std::cout << "CSS: " << css << std::endl;

    return 0;
}
```

### Explanation:
1. **Struct Definitions**: We define `CSSRule` and `CSSStyleSheet` structs to mimic the structure of CSS rules and stylesheets.
2. **Function `getCSSFromSheet`**: This function takes a `CSSStyleSheet` object and constructs a string by concatenating the `cssText` of each rule.
3. **Main Function**: An example usage of the `getCSSFromSheet` function is provided in the `main` function.

This should give you a basic idea of how to translate the JavaScript logic into C++. Adjustments may be needed based on the specific environment or library you are using.