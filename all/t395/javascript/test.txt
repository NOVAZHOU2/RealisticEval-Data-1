To convert the given Python unittest test class to a JavaScript test case using Jest, we need to follow these steps:

1. Define the `sum_calibration_values` function in JavaScript.
2. Write Jest test cases to verify the functionality of the `sum_calibration_values` function.

Here's how you can do it:

### Step 1: Define the `sum_calibration_values` Function

```javascript
function sum_calibration_values(calibrationDocument) {
    /**
     * Sums up calibration values extracted from the document.
     * Each calibration value is formed by combining the first and last digits of numbers found in each line
     * into a two-digit number.
     *
     * @param {string[]} calibrationDocument - An array of strings, each representing a line of text.
     * @returns {number} - The total sum of all calibration values.
     */
    let totalSum = 0;

    calibrationDocument.forEach(line => {
        const matches = line.match(/\d+/g);
        if (matches && matches.length > 0) {
            matches.forEach(match => {
                const firstDigit = parseInt(match[0], 10);
                const lastDigit = parseInt(match[match.length - 1], 10);
                totalSum += firstDigit * 10 + lastDigit;
            });
        }
    });

    return totalSum;
}
```

### Step 2: Write Jest Test Cases

```javascript
const sum_calibration_values = require('./path/to/your/function'); // Adjust the path accordingly

describe('sum_calibration_values', () => {
    test('should sum up calibration values correctly', () => {
        const calibrationDocument = [
            "1abc2",
            "pqr3stu4",
            "abcd56efgh78"
        ];
        expect(sum_calibration_values(calibrationDocument)).toBe(12 + 34 + 57);
    });

    test('should handle lines with no numbers', () => {
        const calibrationDocument = [
            "no numbers here",
            "another line without numbers"
        ];
        expect(sum_calibration_values(calibrationDocument)).toBe(0);
    });

    test('should handle lines with multiple numbers', () => {
        const calibrationDocument = [
            "123abc456",
            "789def012"
        ];
        expect(sum_calibration_values(calibrationDocument)).toBe(16 + 72);
    });

    test('should handle empty lines', () => {
        const calibrationDocument = [
            "",
            ""
        ];
        expect(sum_calibration_values(calibrationDocument)).toBe(0);
    });
});
```

### Explanation

1. **Function Definition**: The `sum_calibration_values` function is defined in JavaScript to match the behavior of the original Python function.
2. **Jest Test Suite**:
   - `describe` block groups related tests together.
   - `test` blocks contain individual test cases.
   - `expect` assertions are used to check the output of the function against expected results.

Make sure to adjust the import path for the `sum_calibration_values` function according to your project structure. This setup should help you effectively test the functionality in JavaScript using Jest.