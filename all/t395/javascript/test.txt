Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will convert the Python unittest class into a Jest test suite, ensuring that the functionality and logic of the tests are maintained.

### Python Unittest Code

```python
import unittest

class TestSumCalibrationValues(unittest.TestCase):

    def test_basic_calculations(self):
        # Test with a simple input where lines contain at least two digits
        document = [
            "Reading 1234 calibration",
            "Measure 5678 complete",
            "End of data 91011"
        ]
        self.assertEqual(sum_calibration_values(document), 163)

    def test_no_digits(self):
        # Test lines with no digits
        document = [
            "No numbers here",
            "Still no numbers"
        ]
        self.assertEqual(sum_calibration_values(document), 0)

    def test_empty_lines(self):
        # Test with empty lines or lines with spaces
        document = [
            "",
            "   "
        ]
        self.assertEqual(sum_calibration_values(document), 0)

    def test_mixed_content(self):
        # Test with a mixture of valid and invalid lines
        document = [
            "Good line 1524 end",
            "Bad line",
            "Another good line 7681"
        ]
        self.assertEqual(sum_calibration_values(document), 85)
```

### Equivalent Jest Test Suite

```javascript
const sumCalibrationValues = require('./sumCalibrationValues'); // Import the sumCalibrationValues function

describe('TestSumCalibrationValues', () => {
    it('test_basic_calculations', () => {
        // Test with a simple input where lines contain at least two digits
        const document = [
            "Reading 1234 calibration",
            "Measure 5678 complete",
            "End of data 91011"
        ];
        expect(sumCalibrationValues(document)).toBe(163);
    });

    it('test_no_digits', () => {
        // Test lines with no digits
        const document = [
            "No numbers here",
            "Still no numbers"
        ];
        expect(sumCalibrationValues(document)).toBe(0);
    });

    it('test_empty_lines', () => {
        // Test with empty lines or lines with spaces
        const document = [
            "",
            "   "
        ];
        expect(sumCalibrationValues(document)).toBe(0);
    });

    it('test_mixed_content', () => {
        // Test with a mixture of valid and invalid lines
        const document = [
            "Good line 1524 end",
            "Bad line",
            "Another good line 7681"
        ];
        expect(sumCalibrationValues(document)).toBe(85);
    });
});
```

### Explanation:

1. **Importing the Function**:
   - The `sumCalibrationValues` function is imported using `require` or `import` depending on the module system being used.

2. **Describe Block**:
   - The `describe` block is used to group the tests under a descriptive name (`TestSumCalibrationValues`).

3. **It Blocks**:
   - Each `it` block represents a specific test case.
   - The descriptions and comments are preserved to maintain clarity.

4. **Assertions**:
   - The `expect` function is used to make assertions.
   - `toBe` is used to check for equality, similar to `assertEqual` in Python.

### Notes on Conversion:
- **Module Import**: Ensure that the `sumCalibrationValues` function is correctly imported from the appropriate file.
- **Test Descriptions**: The test descriptions and comments are kept consistent with the original Python code.
- **Assertion Mapping**: The `expect` function with `toBe` is used to match the behavior of `assertEqual` in Python.

This conversion ensures that the functionality and logic of the tests are maintained in the Jest test suite.