Certainly! Here is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Sums up calibration values extracted from the document.
 * Each calibration value is formed by combining the first and last digits of numbers found in each line
 * into a two-digit number.
 *
 * @param {Iterable<string>} calibrationDocument - An iterable of strings, each representing a line of text.
 * @returns {number} The total sum of all calibration values.
 */
function sumCalibrationValues(calibrationDocument) {
    let totalSum = 0;

    for (let line of calibrationDocument) {
        // Filter out non-digit characters
        let digits = [...line].filter(char => !isNaN(parseInt(char, 10)) && isFinite(char));

        // Extract the first and last digits
        if (digits.length > 0) {
            let firstDigit = parseInt(digits[0], 10);
            let lastDigit = parseInt(digits[digits.length - 1], 10);

            // Combine to form a two-digit number
            let calibrationValue = firstDigit * 10 + lastDigit;

            // Add to the total sum
            totalSum += calibrationValue;
        }
    }

    return totalSum;
}
```

### Explanation:
1. **Function Signature**: The Python function `def sum_calibration_values(calibration_document) -> int:` is converted to the JavaScript function `function sumCalibrationValues(calibrationDocument)`.

2. **JSDoc Comments**:
   - The docstring is rewritten using JSDoc format.
   - The `@param` tag specifies the parameter type and description.
   - The `@returns` tag specifies the return type and description.

3. **Implementation**:
   - The logic inside the function remains the same.
   - The `filter` method is used to extract digits from each line.
   - The first and last digits are combined into a two-digit number and added to the total sum.

This conversion ensures that the functionality, logic, and structure of the original Python code are preserved in the JavaScript version.