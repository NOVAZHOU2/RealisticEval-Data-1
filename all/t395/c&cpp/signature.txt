Hereâ€™s the converted C++ code with comments and documentation adapted to C++ standards:

```cpp
#include <iostream>
#include <vector>
#include <string>

/**
 * Sums up calibration values extracted from the document.
 * Each calibration value is formed by combining the first and last digits of numbers found in each line
 * into a two-digit number.
 *
 * @param calibration_document A vector of strings, each representing a line of text.
 * @return The total sum of all calibration values as an integer.
 */
int sum_calibration_values(const std::vector<std::string>& calibration_document) {
    // Implementation details here
    // ...
    // This is where you would implement the logic to sum the calibration values

    return 0; // Placeholder return value
}

// Example usage
int main() {
    std::vector<std::string> document = {"123", "456", "789"};
    int result = sum_calibration_values(document);
    std::cout << "Total sum: " << result << std::endl;
    return 0;
}
```

In this C++ version:
- `def` is replaced with the `int` return type.
- The parameter type `iterable` is translated to `const std::vector<std::string>&`.
- The Python docstring is translated into a C++ style comment block.
- Single-line comments are marked with `//`.
- The function signature is adjusted to fit C++ syntax, including the parameter type and name.
- The example usage demonstrates how to call the function within a `main` function.