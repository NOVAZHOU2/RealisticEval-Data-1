Certainly! Below is the equivalent C++ code for the provided Python function:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cctype> // for std::isdigit

// Function to sum up calibration values extracted from the document.
// Each calibration value is formed by combining the first and last digits of numbers found in each line
// into a two-digit number.
int sumCalibrationValues(const std::vector<std::string>& calibrationDocument) {
    int totalSum = 0;

    for (const auto& line : calibrationDocument) {
        std::vector<char> digits;

        // Filter out non-digit characters
        for (char ch : line) {
            if (std::isdigit(ch)) {
                digits.push_back(ch);
            }
        }

        // Extract the first and last digits
        if (!digits.empty()) {
            char firstDigit = digits.front();
            char lastDigit = digits.back();

            // Combine to form a two-digit number
            int calibrationValue = (firstDigit - '0') * 10 + (lastDigit - '0');

            // Add to the total sum
            totalSum += calibrationValue;
        }
    }

    return totalSum;
}

// Example usage
int main() {
    std::vector<std::string> calibrationDocument = {
        "abc123xyz",
        "456def789",
        "ghi789jkl",
        "mno4pqr5stu"
    };

    int result = sumCalibrationValues(calibrationDocument);
    std::cout << "Total Sum: " << result << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**: 
   - `<iostream>` for input/output operations.
   - `<vector>` for using `std::vector`.
   - `<string>` for using `std::string`.
   - `<cctype>` for using `std::isdigit`.

2. **Function Definition**:
   - `sumCalibrationValues` takes a `std::vector<std::string>` as input, which represents the lines of the calibration document.
   - It initializes `totalSum` to accumulate the total sum of calibration values.

3. **Iterating Over Lines**:
   - A `for` loop iterates over each line in `calibrationDocument`.
   - For each line, it filters out non-digit characters using another `for` loop and stores the digits in a `std::vector<char>` named `digits`.

4. **Extracting First and Last Digits**:
   - If `digits` is not empty, it extracts the first and last digits and converts them into integers by subtracting the ASCII value of `'0'` (to convert character digits to integer digits).

5. **Forming Calibration Value**:
   - The first digit is multiplied by 10 and added to the last digit to form a two-digit number.

6. **Adding to Total Sum**:
   - The calibration value is added to `totalSum`.

7. **Example Usage**:
   - In the `main` function, an example `calibrationDocument` is defined and passed to `sumCalibrationValues`, and the result is printed.

This C++ code preserves the functionality, logic, and structure of the original Python code while adapting to C++ syntax and features.