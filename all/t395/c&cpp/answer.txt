Sure! Below is the equivalent C++ code for your Python function `sum_calibration_values`. This C++ version assumes that the input is provided through a vector of strings, where each string represents a line of text.

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cctype>
#include <numeric>

int sum_calibration_values(const std::vector<std::string>& calibration_document) {
    int total_sum = 0;

    for (const auto& line : calibration_document) {
        int first_digit = -1;
        int last_digit = -1;

        for (char ch : line) {
            if (std::isdigit(ch)) {
                if (first_digit == -1) {
                    first_digit = ch - '0';
                }
                last_digit = ch - '0';
            }
        }

        if (first_digit != -1 && last_digit != -1) {
            total_sum += first_digit * 10 + last_digit;
        }
    }

    return total_sum;
}

int main() {
    std::vector<std::string> calibration_document = {
        "abc123def456",
        "789ghi012",
        "jkl345mno678"
    };

    int result = sum_calibration_values(calibration_document);
    std::cout << "Total Sum: " << result << std::endl; // Output should be 123 + 78 + 345 = 546

    return 0;
}
```

### Explanation:
1. **Include Necessary Headers**: We include headers for input/output operations (`<iostream>`), handling vectors (`<vector>`), strings (`<string>`), character checking (`<cctype>`), and numeric operations (`<numeric>`).
2. **Function Definition**: The function `sum_calibration_values` takes a constant reference to a vector of strings (`calibration_document`) and returns an integer.
3. **Initialize Total Sum**: We initialize `total_sum` to 0.
4. **Iterate Through Lines**: We iterate through each line in the input vector.
5. **Extract Digits**: For each character in the line, we check if it is a digit using `std::isdigit`. If it is the first digit encountered, we store it in `first_digit`; otherwise, we update `last_digit`.
6. **Form Two-Digit Number**: After processing each line, if both `first_digit` and `last_digit` are valid (i.e., not `-1`), we form a two-digit number and add it to `total_sum`.
7. **Return Result**: Finally, we return the total sum.

This C++ code should work similarly to your original Python function.