To convert the given Python test class into an equivalent test class using Catch2 in C++, we need to ensure that the functionality and logic of the tests are preserved. We'll start by defining the function `sumCalibrationValues` in C++, followed by the necessary Catch2 test cases.

Here’s how you can do it:

1. **Define the `sumCalibrationValues` function** in C++.
2. **Write the equivalent test cases** using Catch2.

Let’s begin with the implementation of the function and then move on to the test cases.

### Step 1: Define the `sumCalibrationValues` Function

```cpp
#include <vector>
#include <string>
#include <sstream>
#include <cassert>

// Helper function to extract the first and last digit from a string
std::pair<int, int> extractDigits(const std::string& line) {
    std::istringstream iss(line);
    int firstDigit = -1, lastDigit = -1;
    char ch;

    // Find the first digit
    while (iss >> ch && !isdigit(ch));
    if (isdigit(ch)) firstDigit = ch - '0';

    // Find the last digit
    iss.clear();
    iss.seekg(0, std::ios::end);
    while (iss >> ch && !isdigit(ch));
    if (isdigit(ch)) lastDigit = ch - '0';

    return {firstDigit, lastDigit};
}

// Function to sum up calibration values
int sumCalibrationValues(const std::vector<std::string>& calibrationDocument) {
    int totalSum = 0;

    for (const auto& line : calibrationDocument) {
        auto [firstDigit, lastDigit] = extractDigits(line);
        if (firstDigit != -1 && lastDigit != -1) {
            totalSum += 10 * firstDigit + lastDigit;
        }
    }

    return totalSum;
}
```

### Step 2: Write the Test Cases Using Catch2

Now, let's write the test cases using Catch2. You will need to include the Catch2 library and define the test cases inside the `TEST_CASE` macro.

```cpp
#include "catch.hpp" // Include the Catch2 header

// Test cases for sumCalibrationValues
TEST_CASE("Test sumCalibrationValues") {
    SECTION("Single line with digits at beginning and end") {
        std::vector<std::string> document = {"123456"};
        REQUIRE(sumCalibrationValues(document) == 16);
    }

    SECTION("Single line with digits scattered") {
        std::vector<std::string> document = {"a1b2c3d4e5"};
        REQUIRE(sumCalibrationValues(document) == 15);
    }

    SECTION("Multiple lines with mixed digits") {
        std::vector<std::string> document = {"abc3", "def2", "ghi8"};
        REQUIRE(sumCalibrationValues(document) == 328);
    }

    SECTION("Multiple lines with leading and trailing digits") {
        std::vector<std::string> document = {"1abc2", "3def4", "5ghi6"};
        REQUIRE(sumCalibrationValues(document) == 1246);
    }

    SECTION("Empty document") {
        std::vector<std::string> document = {};
        REQUIRE(sumCalibrationValues(document) == 0);
    }

    SECTION("No digits in some lines") {
        std::vector<std::string> document = {"abc", "123", "def", "456"};
        REQUIRE(sumCalibrationValues(document) == 126);
    }
}
```

### Final Code

Combine the above code snippets into a single file, and make sure to link against the Catch2 library when compiling your tests.

Here's the complete code:

```cpp
#include <vector>
#include <string>
#include <sstream>
#include <cassert>
#include "catch.hpp"

std::pair<int, int> extractDigits(const std::string& line) {
    std::istringstream iss(line);
    int firstDigit = -1, lastDigit = -1;
    char ch;

    // Find the first digit
    while (iss >> ch && !isdigit(ch));
    if (isdigit(ch)) firstDigit = ch - '0';

    // Find the last digit
    iss.clear();
    iss.seekg(0, std::ios::end);
    while (iss >> ch && !isdigit(ch));
    if (isdigit(ch)) lastDigit = ch - '0';

    return {firstDigit, lastDigit};
}

int sumCalibrationValues(const std::vector<std::string>& calibrationDocument) {
    int totalSum = 0;

    for (const auto& line : calibrationDocument) {
        auto [firstDigit, lastDigit] = extractDigits(line);
        if (firstDigit != -1 && lastDigit != -1) {
            totalSum += 10 * firstDigit + lastDigit;
        }
    }

    return totalSum;
}

TEST_CASE("Test sumCalibrationValues") {
    SECTION("Single line with digits at beginning and end") {
        std::vector<std::string> document = {"123456"};
        REQUIRE(sumCalibrationValues(document) == 16);
    }

    SECTION("Single line with digits scattered") {
        std::vector<std::string> document = {"a1b2c3d4e5"};
        REQUIRE(sumCalibrationValues(document) == 15);
    }

    SECTION("Multiple lines with mixed digits") {
        std::vector<std::string> document = {"abc3", "def2", "ghi8"};
        REQUIRE(sumCalibrationValues(document) == 328);
    }

    SECTION("Multiple lines with leading and trailing digits") {
        std::vector<std::string> document = {"1abc2", "3def4", "5ghi6"};
        REQUIRE(sumCalibrationValues(document) == 1246);
    }

    SECTION("Empty document") {
        std::vector<std::string> document = {};
        REQUIRE(sumCalibrationValues(document) == 0);
    }

    SECTION("No digits in some lines") {
        std::vector<std::string> document = {"abc", "123", "def", "456"};
        REQUIRE(sumCalibrationValues(document) == 126);
    }
}
```

This code defines the function `sumCalibrationValues` and includes the necessary test cases using Catch2 to ensure its correctness.