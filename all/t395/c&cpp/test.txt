Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. This conversion ensures that the functionality and logic of the tests are preserved, with appropriate assertions in Catch2.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

Hereâ€™s the C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <string>
#include <cctype>

// Function to sum up calibration values extracted from the document.
// Each calibration value is formed by combining the first and last digits of numbers found in each line
// into a two-digit number.
int sum_calibration_values(const std::vector<std::string>& calibration_document) {
    int total_sum = 0;

    for (const auto& line : calibration_document) {
        std::vector<char> digits;

        // Filter out non-digit characters
        for (char ch : line) {
            if (std::isdigit(ch)) {
                digits.push_back(ch);
            }
        }

        // Extract the first and last digits
        if (!digits.empty()) {
            char first_digit = digits.front();
            char last_digit = digits.back();

            // Combine to form a two-digit number
            int calibration_value = (first_digit - '0') * 10 + (last_digit - '0');

            // Add to the total sum
            total_sum += calibration_value;
        }
    }

    return total_sum;
}

TEST_CASE("Test sum_calibration_values", "[sum_calibration_values]") {
    SECTION("test_basic_calculations") {
        // Test with a simple input where lines contain at least two digits
        std::vector<std::string> document = {
            "Reading 1234 calibration",
            "Measure 5678 complete",
            "End of data 91011"
        };
        REQUIRE(sum_calibration_values(document) == 163);
    }

    SECTION("test_no_digits") {
        // Test lines with no digits
        std::vector<std::string> document = {
            "No numbers here",
            "Still no numbers"
        };
        REQUIRE(sum_calibration_values(document) == 0);
    }

    SECTION("test_empty_lines") {
        // Test with empty lines or lines with spaces
        std::vector<std::string> document = {
            "",
            "   "
        };
        REQUIRE(sum_calibration_values(document) == 0);
    }

    SECTION("test_mixed_content") {
        // Test with a mixture of valid and invalid lines
        std::vector<std::string> document = {
            "Good line 1524 end",
            "Bad line",
            "Another good line 7681"
        };
        REQUIRE(sum_calibration_values(document) == 85);
    }
}
```

### Explanation:
1. **Headers**:
   - `#include <catch2/catch_test_macros.hpp>` for Catch2 test macros.
   - `#include <vector>` for using `std::vector`.
   - `#include <string>` for using `std::string`.
   - `#include <cctype>` for `std::isdigit` function to check if a character is a digit.

2. **Function Definition**:
   - `sum_calibration_values` takes a `std::vector<std::string>` as input.
   - It iterates over each string (line) in the document.
   - It filters out non-digit characters and stores the digits in a `std::vector<char>`.
   - If there are digits, it extracts the first and last digits, combines them into a two-digit number, and adds this value to the total sum.

3. **Test Class**:
   - `TEST_CASE` is used to define a test case.
   - `SECTION` is used to define individual test sections within the test case.
   - `REQUIRE` is used for assertions to ensure the expected behavior.

4. **Test Sections**:
   - `test_basic_calculations`: Tests with a simple input where lines contain at least two digits.
   - `test_no_digits`: Tests lines with no digits.
   - `test_empty_lines`: Tests with empty lines or lines with spaces.
   - `test_mixed_content`: Tests with a mixture of valid and invalid lines.

This C++ code closely mirrors the functionality and structure of the original Python unittest code, ensuring that the tests are equivalent and the assertions are appropriately handled in Catch2.