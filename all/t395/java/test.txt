Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

public class Tester {

    @Test
    public void testBasicCalculations() {
        // Test with a simple input where lines contain at least two digits
        List<String> document = new ArrayList<>();
        document.add("Reading 1234 calibration");
        document.add("Measure 5678 complete");
        document.add("End of data 91011");

        int expectedSum = 163;
        int actualSum = sumCalibrationValues(document);

        assertEquals(expectedSum, actualSum);
    }

    @Test
    public void testNoDigits() {
        // Test lines with no digits
        List<String> document = new ArrayList<>();
        document.add("No numbers here");
        document.add("Still no numbers");

        int expectedSum = 0;
        int actualSum = sumCalibrationValues(document);

        assertEquals(expectedSum, actualSum);
    }

    @Test
    public void testEmptyLines() {
        // Test with empty lines or lines with spaces
        List<String> document = new ArrayList<>();
        document.add("");
        document.add("   ");

        int expectedSum = 0;
        int actualSum = sumCalibrationValues(document);

        assertEquals(expectedSum, actualSum);
    }

    @Test
    public void testMixedContent() {
        // Test with a mixture of valid and invalid lines
        List<String> document = new ArrayList<>();
        document.add("Good line 1524 end");
        document.add("Bad line");
        document.add("Another good line 7681");

        int expectedSum = 85;
        int actualSum = sumCalibrationValues(document);

        assertEquals(expectedSum, actualSum);
    }

    // Method to be tested
    private static int sumCalibrationValues(List<String> calibrationDocument) {
        int totalSum = 0;

        for (String line : calibrationDocument) {
            // Filter out non-digit characters
            List<Character> digits = new ArrayList<>();
            for (char ch : line.toCharArray()) {
                if (Character.isDigit(ch)) {
                    digits.add(ch);
                }
            }

            // Extract the first and last digits
            if (!digits.isEmpty()) {
                char firstDigit = digits.get(0);
                char lastDigit = digits.get(digits.size() - 1);

                // Combine to form a two-digit number
                int calibrationValue = Character.getNumericValue(firstDigit) * 10 + Character.getNumericValue(lastDigit);

                // Add to the total sum
                totalSum += calibrationValue;
            }
        }

        return totalSum;
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Class Definition**: The class `Tester` is defined within the package.
3. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.
4. **Assertion Methods**: The `assertEquals` method from JUnit is used to assert the expected results.
5. **Test Methods**:
    - `testBasicCalculations`: Tests a simple input where lines contain at least two digits.
    - `testNoDigits`: Tests lines with no digits.
    - `testEmptyLines`: Tests with empty lines or lines with spaces.
    - `testMixedContent`: Tests with a mixture of valid and invalid lines.
6. **Helper Method**: The `sumCalibrationValues` method is included within the test class to be tested. This method performs the same functionality as the Python function.

This Java test class preserves the original functionality and structure of the Python unittest class while adhering to JUnit conventions and best practices.