Sure, here is the equivalent Java method signature along with the Javadoc comments:

```java
import java.lang.Iterable;
import java.util.Iterator;

public class CalibrationUtility {

    /**
     * Sums up calibration values extracted from the document.
     * Each calibration value is formed by combining the first and last digits of numbers found in each line
     * into a two-digit number.
     *
     * @param calibrationDocument An iterable of strings, each representing a line of text.
     * @return The total sum of all calibration values.
     */
    public static int sumCalibrationValues(Iterable<String> calibrationDocument) {
        // Method implementation goes here
        return 0; // Placeholder for actual implementation
    }
}
```

In this Java version:
- The function name `sum_calibration_values` has been changed to `sumCalibrationValues` to follow Java's camelCase naming convention.
- The parameter name `calibration_document` has been changed to `calibrationDocument` to also follow the camelCase naming convention.
- The type annotation `(iterable)` in Python has been translated to `Iterable<String>` in Java.
- The Python docstring has been converted into a JavaDoc comment using the `/** */` format.
- The Python type hint `-> int` indicates that the method returns an integer, which is preserved in the Java method signature as `int`.