Certainly! Hereâ€™s the equivalent TypeScript code with proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Sums up calibration values extracted from the document.
 * Each calibration value is formed by combining the first and last digits of numbers found in each line
 * into a two-digit number.
 *
 * @param {Iterable<string>} calibrationDocument - An iterable of strings, each representing a line of text.
 * @returns {number} The total sum of all calibration values.
 */
function sumCalibrationValues(calibrationDocument: Iterable<string>): number {
    let totalSum = 0;

    for (const line of calibrationDocument) {
        // Filter out non-digit characters
        const digits = Array.from(line).filter(char => !isNaN(parseInt(char)));

        // Extract the first and last digits
        if (digits.length > 0) {
            const firstDigit = parseInt(digits[0]);
            const lastDigit = parseInt(digits[digits.length - 1]);

            // Combine to form a two-digit number
            const calibrationValue = firstDigit * 10 + lastDigit;

            // Add to the total sum
            totalSum += calibrationValue;
        }
    }

    return totalSum;
}
```

### Explanation:
1. **Function Definition**:
   - The function `sumCalibrationValues` is defined with a parameter `calibrationDocument` of type `Iterable<string>`.
   - The return type is specified as `number`.

2. **JSDoc Documentation Comments**:
   - The JSDoc-style comments provide detailed documentation for the function, including the parameters and return type.

3. **Variable Initialization**:
   - `totalSum` is initialized to 0.

4. **Loop Through Lines**:
   - A `for...of` loop iterates over each line in `calibrationDocument`.

5. **Filtering Digits**:
   - `Array.from(line)` converts the string into an array of characters.
   - `filter(char => !isNaN(parseInt(char)))` filters out non-digit characters.

6. **Extracting First and Last Digits**:
   - If there are any digits in the line, it extracts the first and last digits using array indexing.

7. **Combining Digits**:
   - The first and last digits are combined to form a two-digit number.

8. **Adding to Total Sum**:
   - The calibration value is added to the total sum.

9. **Returning Total Sum**:
   - The function returns the final total sum.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate type annotations and JSDoc-style documentation comments.