First, let's define the TypeScript function equivalent to the Python function `sum_calibration_values`. We'll also create a Jest test suite to validate this function.

Here's how you can do it:

1. Define the TypeScript function.
2. Write the Jest tests for the function.

### TypeScript Function

```typescript
import { sum } from "lodash";

function extractDigits(line: string): [number, number] {
  const firstDigit = line.search(/\d/);
  const lastDigit = line.search(/\d/g);
  if (firstDigit === -1 || lastDigit === -1) {
    return [0, 0];
  }
  const first = parseInt(line[firstDigit], 10);
  const last = parseInt(line[lastDigit + line.length - 1], 10);
  return [first, last];
}

function sumCalibrationValues(calibrationDocument: string[]): number {
  let totalSum = 0;
  for (const line of calibrationDocument) {
    const [first, last] = extractDigits(line);
    const calibrationValue = parseInt(`${first}${last}`, 10);
    totalSum += calibrationValue;
  }
  return totalSum;
}

export { sumCalibrationValues };
```

### Jest Test Suite

```typescript
import { sumCalibrationValues } from './path-to-your-function';

describe('sumCalibrationValues', () => {
  it('should handle empty input', () => {
    expect(sumCalibrationValues([])).toBe(0);
  });

  it('should handle lines with no digits', () => {
    expect(sumCalibrationValues(['abc', 'def'])).toBe(0);
  });

  it('should handle lines with single digit', () => {
    expect(sumCalibrationValues(['1', '2'])).toBe(12);
  });

  it('should handle lines with multiple digits', () => {
    expect(sumCalibrationValues(['123', '456'])).toBe(16);
  });

  it('should handle mixed cases', () => {
    expect(sumCalibrationValues(['123a', 'b456', '789c'])).toBe(169);
  });

  it('should handle complex cases', () => {
    expect(sumCalibrationValues(['123a456', 'b789c0', '123d456e789'])).toBe(169);
  });
});
```

### Explanation

1. **Type Annotations**: The function `sumCalibrationValues` takes an array of strings (`string[]`) as its argument and returns a number (`number`).
2. **Helper Function**: The helper function `extractDigits` finds the first and last digits in a given line.
3. **Jest Assertions**:
   - `expect(sumCalibrationValues([])).toBe(0)` checks if an empty array results in a sum of 0.
   - `expect(sumCalibrationValues(['abc', 'def'])).toBe(0)` checks if lines without digits result in a sum of 0.
   - `expect(sumCalibrationValues(['1', '2'])).toBe(12)` checks if lines with a single digit result in a correct sum.
   - `expect(sumCalibrationValues(['123', '456'])).toBe(16)` checks if lines with multiple digits result in a correct sum.
   - `expect(sumCalibrationValues(['123a', 'b456', '789c'])).toBe(169)` checks if lines with mixed characters result in a correct sum.
   - `expect(sumCalibrationValues(['123a456', 'b789c0', '123d456e789'])).toBe(169)` checks if complex cases result in a correct sum.

This approach ensures that the functionality and logic of the tests are preserved while adapting to TypeScript and Jest.