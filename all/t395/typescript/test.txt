Sure! Below is the equivalent TypeScript test case using Jest for the provided Python function `sum_calibration_values`.

```typescript
import { describe, it, expect } from '@jest/globals';

function sumCalibrationValues(calibrationDocument: string[]): number {
    /**
     * Sums up calibration values extracted from the document.
     * Each calibration value is formed by combining the first and last digits of numbers found in each line
     * into a two-digit number.
     *
     * @param calibrationDocument - An array of strings, each representing a line of text.
     * @returns The total sum of all calibration values.
     */
    let totalSum = 0;

    for (const line of calibrationDocument) {
        const matches = line.match(/\d+/g);
        if (matches) {
            for (const match of matches) {
                const firstDigit = parseInt(match[0], 10);
                const lastDigit = parseInt(match[match.length - 1], 10);
                totalSum += firstDigit * 10 + lastDigit;
            }
        }
    }

    return totalSum;
}

describe('sumCalibrationValues', () => {
    it('should sum up calibration values correctly', () => {
        const calibrationDocument = [
            '1abc2',
            'pqr3stu4',
            '5v6w7x8y9z'
        ];
        const result = sumCalibrationValues(calibrationDocument);
        expect(result).toBe(12 + 34 + 59); // 12 (from "1abc2") + 34 (from "pqr3stu4") + 59 (from "5v6w7x8y9z")
    });

    it('should handle empty lines gracefully', () => {
        const calibrationDocument = [
            '',
            'no numbers here',
            '123456'
        ];
        const result = sumCalibrationValues(calibrationDocument);
        expect(result).toBe(16); // 16 (from "123456")
    });

    it('should handle lines with no numbers', () => {
        const calibrationDocument = [
            'abcdef',
            'ghijkl'
        ];
        const result = sumCalibrationValues(calibrationDocument);
        expect(result).toBe(0); // No numbers, so sum should be 0
    });
});
```

This TypeScript code uses Jest's `describe`, `it`, and `expect` functions to write test cases that validate the behavior of the `sumCalibrationValues` function. The tests cover various scenarios including normal lines with numbers, empty lines, and lines without any numbers.