Sure, here's how you can translate the Python function `sum_calibration_values` to TypeScript:

```typescript
function sumCalibrationValues(calibrationDocument: string[]): number {
    /**
     * Sums up calibration values extracted from the document.
     * Each calibration value is formed by combining the first and last digits of numbers found in each line
     * into a two-digit number.
     *
     * @param {string[]} calibrationDocument - An array of strings, each representing a line of text.
     * @returns {number} The total sum of all calibration values.
     */
    
    let totalSum = 0;

    for (const line of calibrationDocument) {
        const matches = line.match(/\d+/g); // Find all sequences of digits

        if (matches) {
            for (const match of matches) {
                const firstDigit = parseInt(match[0], 10);
                const lastDigit = parseInt(match[match.length - 1], 10);

                if (!isNaN(firstDigit) && !isNaN(lastDigit)) {
                    totalSum += firstDigit * 10 + lastDigit;
                }
            }
        }
    }

    return totalSum;
}
```

### Explanation:
- **Type Annotations**: 
  - `calibrationDocument: string[]`: Specifies that `calibrationDocument` should be an array of strings.
  - `totalSum: number`: Specifies that `totalSum` will be a number.

- **Regular Expression**:
  - `\d+`: This regular expression matches one or more consecutive digits.

- **parseInt**: Converts a string to an integer.

- **NaN Check**: Ensures that both `firstDigit` and `lastDigit` are valid numbers before adding them to `totalSum`.

This TypeScript function behaves similarly to your original Python function, processing each line of text to extract numbers, form two-digit numbers using the first and last digits, and summing these values.