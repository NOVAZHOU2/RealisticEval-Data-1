Sure! Here’s the equivalent TypeScript code for the provided Python function, ensuring it follows TypeScript’s static type system and idiomatic practices:

```typescript
function sumCalibrationValues(calibrationDocument: string[]): number {
    let totalSum = 0;

    for (const line of calibrationDocument) {
        // Filter out non-digit characters
        const digits = Array.from(line).filter(char => !isNaN(parseInt(char)));

        // Extract the first and last digits
        if (digits.length > 0) {
            const firstDigit = parseInt(digits[0]);
            const lastDigit = parseInt(digits[digits.length - 1]);

            // Combine to form a two-digit number
            const calibrationValue = firstDigit * 10 + lastDigit;

            // Add to the total sum
            totalSum += calibrationValue;
        }
    }

    return totalSum;
}
```

### Explanation:
1. **Type Annotations**: 
   - `calibrationDocument` is defined as an array of strings (`string[]`).
   - The return type is specified as `number`.

2. **Filtering Non-Digit Characters**:
   - `Array.from(line).filter(char => !isNaN(parseInt(char)))` converts each character in the line into an array and filters out non-digit characters using `parseInt` and `isNaN`.

3. **Extracting First and Last Digits**:
   - `digits[0]` and `digits[digits.length - 1]` are used to extract the first and last digits from the filtered array.

4. **Combining Digits**:
   - `firstDigit * 10 + lastDigit` combines the first and last digits into a two-digit number.

5. **Adding to Total Sum**:
   - The `calibrationValue` is added to the `totalSum`.

This TypeScript code maintains the same functionality and logic as the Python code while adhering to TypeScript's static typing and best practices.