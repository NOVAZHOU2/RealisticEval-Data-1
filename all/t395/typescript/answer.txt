Sure! Hereâ€™s the equivalent TypeScript code, ensuring that the functionality, structure, and logic remain consistent:

```typescript
function sumCalibrationValues(calibrationDocument: string[]): number {
    let totalSum = 0;

    for (const line of calibrationDocument) {
        // Filter out non-digit characters
        const digits = Array.from(line).filter(char => !isNaN(parseInt(char)));

        // Extract the first and last digits
        if (digits.length > 0) {
            const firstDigit = parseInt(digits[0]);
            const lastDigit = parseInt(digits[digits.length - 1]);

            // Combine to form a two-digit number
            const calibrationValue = firstDigit * 10 + lastDigit;

            // Add to the total sum
            totalSum += calibrationValue;
        }
    }

    return totalSum;
}
```

### Explanation:
1. **Function Definition**: 
   - The function `sumCalibrationValues` takes an array of strings (`string[]`) as input.
   - It returns a number (`number`).

2. **Variable Initialization**:
   - `totalSum` is initialized to 0.

3. **Loop Through Lines**:
   - A `for...of` loop iterates over each line in `calibrationDocument`.

4. **Filtering Digits**:
   - `Array.from(line)` converts the string into an array of characters.
   - `filter(char => !isNaN(parseInt(char)))` filters out non-digit characters.

5. **Extracting First and Last Digits**:
   - If there are any digits in the line, it extracts the first and last digits using array indexing.

6. **Combining Digits**:
   - The first and last digits are combined to form a two-digit number.

7. **Adding to Total Sum**:
   - The calibration value is added to the total sum.

8. **Returning Total Sum**:
   - The function returns the final total sum.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate adjustments for TypeScript's syntax and type system.