Here's how to convert the provided TypeScript functions for converting RGB to HEX and HEX to RGB into Python. The Python code will replicate the functionality while following Python's syntax and conventions.
TypeScript Code
typescript
/** 
 * Convert an RGB color object to a HEX color string. 
 * @param rgb - An object containing the red, green, and blue components of the color. 
 * @returns A string representing the HEX color code. 
 */
export function rgbToHex(rgb: { r: number; g: number; b: number }): string {  
    const { r, g, b } = rgb;  
    const componentToHex = (c: number): string => {    
        if (typeof c !== "number" || isNaN(c)) {      
            console.error("Invalid RGB component:", c);      
            return "00";    
        }    
        const hex = c.toString(16).padStart(2, "0");    
        return hex;  
    };  
    return `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`;
}

/** 
 * Convert a HEX color string to an RGB color object. 
 * @param hex - A string representing the HEX color code. 
 * @returns An object containing the red, green, and blue components of the color, or null if the HEX code is invalid. 
 */
export function hexToRgb(hex: string): { r: number; g: number; b: number } | null {  
    const isValidHex = (hex: string): boolean => {    
        const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;    
        hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);    
        return /^#?([a-f\d]{6})$/i.test(hex);  
    };  
    if (!isValidHex(hex)) {    
        console.error("Invalid HEX color:", hex);    
        return null;  
    }  
    const fullHex = hex.replace(/^#/, "");  
    const r = parseInt(fullHex.slice(0, 2), 16);  
    const g = parseInt(fullHex.slice(2, 4), 16);  
    const b = parseInt(fullHex.slice(4, 6), 16);  
    return { r, g, b };
}
Python Code
python
def rgb_to_hex(rgb):
    """
    Convert an RGB color object to a HEX color string.

    :param rgb: A dictionary containing the red, green, and blue components of the color.
    :returns: A string representing the HEX color code.
    """
    r, g, b = rgb['r'], rgb['g'], rgb['b']

    def component_to_hex(c):
        if not isinstance(c, (int, float)) or c < 0 or c > 255:
            print("Invalid RGB component:", c)
            return "00"
        hex_value = hex(int(c))[2:]  # Convert to hex and remove '0x'
        return hex_value.zfill(2)  # Pad with zero if necessary

    return f'#{component_to_hex(r)}{component_to_hex(g)}{component_to_hex(b)}'


def hex_to_rgb(hex):
    """
    Convert a HEX color string to an RGB color object.

    :param hex: A string representing the HEX color code.
    :returns: A dictionary containing the red, green, and blue components of the color, or None if the HEX code is invalid.
    """
    def is_valid_hex(hex):
        shorthand_regex = r'^#?([a-f\d])([a-f\d])([a-f\d])$'
        hex = re.sub(shorthand_regex, lambda m: m.group(1) * 2 + m.group(2) * 2 + m.group(3) * 2, hex)
        return bool(re.match(r'^#?([a-f\d]{6})$', hex, re.IGNORECASE))

    if not is_valid_hex(hex):
        print("Invalid HEX color:", hex)
        return None

    full_hex = hex.lstrip('#')  # Remove the leading '#' if present
    r = int(full_hex[0:2], 16)
    g = int(full_hex[2:4], 16)
    b = int(full_hex[4:6], 16)
    
    return {'r': r, 'g': g, 'b': b}
Explanation of Changes:
Function Naming: Converted rgbToHex to rgb_to_hex and hexToRgb to hex_to_rgb to follow Python naming conventions (snake_case).
Parameter Types:
TypeScript used specific object types; Python uses dictionaries (dict) for similar functionality.
Type Checking:
Type checking for the RGB components is done using isinstance in Python, checking if the component is an integer or float.
Hex Conversion:
The conversion to HEX is done using Python's hex() function, and we slice off the '0x' prefix.
Error Handling:
Instead of using console.error, Python prints an error message for invalid RGB components or HEX strings.
Regular Expressions:
Python's re module is used for regex operations to validate HEX codes and expand shorthand HEX codes.
Returning Values:
In Python, the return statements are adjusted to return dictionaries instead of objects.
Usage
You can now use these functions in Python to convert between RGB and HEX color formats. The Python implementation maintains similar functionality to the original TypeScript code.