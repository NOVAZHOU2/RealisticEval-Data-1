Sure! Below is a Python unittest test case that mirrors the functionality of the TypeScript Jest test case you provided. This test case includes tests for converting RGB to HEX and HEX to RGB, including error handling for invalid inputs and boundary values.
First, weâ€™ll need to implement the functions rgbToHex and hexToRgb. For demonstration purposes, I'll provide basic implementations of these functions along with the unit tests.
Python Code
python
import unittest

def rgbToHex(rgb):
    # Clamp RGB values to be between 0 and 255 and convert to hex
    r = max(0, min(255, rgb['r']))
    g = max(0, min(255, rgb['g']))
    b = max(0, min(255, rgb['b']))
    return '#{:02x}{:02x}{:02x}'.format(r, g, b)

def hexToRgb(hex_code):
    # Check if hex_code is a valid hex string
    if not isinstance(hex_code, str) or len(hex_code) != 7 or hex_code[0] != '#':
        return None
    try:
        r = int(hex_code[1:3], 16)
        g = int(hex_code[3:5], 16)
        b = int(hex_code[5:7], 16)
        return {'r': r, 'g': g, 'b': b}
    except ValueError:
        return None

class TestColorConversion(unittest.TestCase):
    def test_rgb_to_hex(self):
        rgb = {'r': 255, 'g': 99, 'b': 71}
        result = rgbToHex(rgb)
        self.assertEqual(result, '#ff6347')  # Expected HEX code for RGB(255, 99, 71)

    def test_hex_to_rgb(self):
        hex_code = '#ff6347'
        result = hexToRgb(hex_code)
        self.assertEqual(result, {'r': 255, 'g': 99, 'b': 71})  # Expected RGB object for HEX #ff6347

    def test_invalid_rgb_components(self):
        rgb = {'r': 300, 'g': -10, 'b': 128}
        result = rgbToHex(rgb)
        self.assertEqual(result, '#00c080')  # Clamped values should be "00", valid value should convert to "80"

    def test_invalid_hex_string(self):
        invalid_hex = '#ggg123'
        result = hexToRgb(invalid_hex)
        self.assertIsNone(result)  # Invalid HEX code should return None

    def test_boundary_values_rgb(self):
        rgb_black = {'r': 0, 'g': 0, 'b': 0}
        result_black = rgbToHex(rgb_black)
        self.assertEqual(result_black, '#000000')  # RGB(0, 0, 0) should convert to #000000
        
        rgb_white = {'r': 255, 'g': 255, 'b': 255}
        result_white = rgbToHex(rgb_white)
        self.assertEqual(result_white, '#ffffff')  # RGB(255, 255, 255) should convert to #ffffff

if __name__ == '__main__':
    unittest.main()
Explanation:
Functions:
rgbToHex: Converts an RGB dictionary to a HEX string. It clamps the RGB values between 0 and 255 before converting to HEX.
hexToRgb: Converts a HEX string to an RGB dictionary. It checks for valid HEX format and returns None for invalid inputs.
Test Cases:
Each test case corresponds to the tests you provided in TypeScript, using methods like assertEqual for equality checks and assertIsNone for checking None values.
Execution:
The if __name__ == '__main__': block allows the script to be run directly, executing all tests defined in the TestColorConversion class.
Running the Tests:
To run the tests, save the code in a .py file and execute it with Python. It will output the results of each test, indicating whether they passed or failed.