Sure! Below is the equivalent JavaScript code for your Python function:

```javascript
function computeOutputIndex(idx1, idx2) {
    /**
     * Computes the output index from two given indices in the MultiVector's representation
     * of the G_n orthonormal basis.
     *
     * This function interprets the integers as little-endian bitstrings, takes their XOR,
     * and interprets the result as an integer in little-endian.
     *
     * @param {number} idx1 - Input index 1.
     * @param {number} idx2 - Input index 2.
     * @returns {number} - The computed output index.
     */

    // Convert numbers to little-endian bit strings
    let binIdx1 = idx1.toString(2).padStart(32, '0');
    let binIdx2 = idx2.toString(2).padStart(32, '0');

    // Perform XOR operation on each bit
    let xorResult = '';
    for (let i = 0; i < 32; i++) {
        xorResult += (binIdx1[i] === binIdx2[i]) ? '0' : '1';
    }

    // Convert the resulting bit string back to an integer
    return parseInt(xorResult, 2);
}
```

This JavaScript function `computeOutputIndex` performs the same operations as your Python function. It converts the input indices to 32-bit binary strings, performs a bitwise XOR operation on them, and then converts the result back to an integer.