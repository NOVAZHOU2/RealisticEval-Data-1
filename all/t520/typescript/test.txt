Sure, here is how you can convert the Python unittest test class to TypeScript using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

function computeOutputIndex(idx1: number, idx2: number): number {
    // Your implementation here...
}

describe('computeOutputIndex', () => {
    it('should correctly compute the output index for given input indices', () => {
        // Test case 1
        expect(computeOutputIndex(0b101, 0b110)).toBe(0b011);

        // Test case 2
        expect(computeOutputIndex(0b111, 0b000)).toBe(0b111);

        // Add more test cases as needed
    });
});
```

In this TypeScript code:
- We import `describe`, `it`, and `expect` from `@jest/globals`.
- We define the `computeOutputIndex` function with the same logic as your Python function.
- We create a test suite using `describe` and a test case using `it`.
- We use `expect` to assert that the output of `computeOutputIndex` matches the expected value.

Make sure you have Jest installed in your project. If not, you can install it using npm:

```sh
npm install --save-dev jest
```

Then, you can run your tests using:

```sh
npx jest
```

This will execute all the tests defined in your TypeScript files.