Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest test cases are mapped to Jest assertions.

### TypeScript Code

First, ensure you have Jest installed in your TypeScript project:

```sh
npm install --save-dev jest @types/jest ts-jest
```

Add the necessary Jest configuration to your `tsconfig.json` or `jest.config.js`:

```json
{
  "preset": "ts-jest",
  "testEnvironment": "node"
}
```

Now, here is the TypeScript test class using Jest:

```typescript
import { computeOutputIndex } from './path/to/computeOutputIndex'; // Import the computeOutputIndex function

describe('TestComputeOutputIndex', () => {
  it('test_standard_case', () => {
    /** Test with two standard positive integers. */
    const idx_1 = 3; // binary: 11
    const idx_2 = 5; // binary: 101
    const expected = 6; // 3 XOR 5 = 6
    const result = computeOutputIndex(idx_1, idx_2);
    expect(result).toBe(expected);
  });

  it('test_identical_indices', () => {
    /** Test with identical indices (should return 0). */
    const idx_1 = 7; // binary: 111
    const idx_2 = 7; // binary: 111
    const expected = 0; // 7 XOR 7 = 0
    const result = computeOutputIndex(idx_1, idx_2);
    expect(result).toBe(expected);
  });

  it('test_zero_index', () => {
    /** Test with one index as zero. */
    const idx_1 = 0; // binary: 0
    const idx_2 = 5; // binary: 101
    const expected = 5; // 0 XOR 5 = 5
    const result = computeOutputIndex(idx_1, idx_2);
    expect(result).toBe(expected);
  });

  it('test_large_numbers', () => {
    /** Test with large integer values. */
    const idx_1 = 1024; // binary: 10000000000
    const idx_2 = 2048; // binary: 100000000000
    const expected = 3072; // 1024 XOR 2048 = 3072
    const result = computeOutputIndex(idx_1, idx_2);
    expect(result).toBe(expected);
  });
});
```

### Explanation:
1. **Import Function**: Import the `computeOutputIndex` function from the appropriate module.
2. **Describe Block**: Use the `describe` block to group the test cases.
3. **It Blocks**: Each test case is defined using the `it` block, which includes a description and the actual test logic.
4. **Expect Assertions**: Use Jest's `expect` assertions to verify the results.

### Running the Tests
To run the tests, use the following command:

```sh
npx jest
```

This setup ensures that the tests are structured and executed correctly in TypeScript using Jest, maintaining the same functionality and logic as the original Python unittest test cases.