Here is how you can write the same Python function in TypeScript:

```typescript
function computeOutputIndex(idx1: number, idx2: number): number {
    /**
     * Computes the output index from two given indices in the MultiVector's representation
     * of the G_n orthonormal basis.
     *
     * This function interprets the integers as little-endian bitstrings, takes their XOR,
     * and interprets the result as an integer in little-endian.
     *
     * @param {number} idx1 - Input index 1.
     * @param {number} idx2 - Input index 2.
     * @returns {number} - The computed output index.
     */
    
    return parseInt((idx1.toString(2).split('').reverse().join('') + idx2.toString(2).split('').reverse().join('')).split('').map((bit, i) => bit ^ idx1.toString(2)[i]).reverse().join(''), 2);
}
```

Please note that `toString(2)` method converts the number into binary string, `split('')` splits the string into an array of characters, `reverse()` reverses the order of elements in the array, `map()` applies a function to each item in the array, and `parseInt(..., 2)` parses the string argument and returns an integer in the specified radix (in this case, base-2).