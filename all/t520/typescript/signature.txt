Certainly! Below is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Computes the output index from two given indices in the MultiVector's representation
 * of the G_n orthonormal basis.
 *
 * This function interprets the integers as little-endian bitstrings, takes their XOR,
 * and interprets the result as an integer in little-endian.
 *
 * @param idx1 - Input index 1.
 * @param idx2 - Input index 2.
 * @returns The computed output index.
 */
function computeOutputIndex(idx1: number, idx2: number): number {
    // Perform bitwise XOR between the two indices
    let result = idx1 ^ idx2;

    // Convert result to little-endian byte representation
    const resultBytes = new Uint8Array((result.bitLength() + 7) / 8);
    for (let i = 0; i < resultBytes.length; i++) {
        resultBytes[i] = result & 0xff;
        result >>= 8;
    }

    // Convert little-endian bytes back to an integer
    let resultInt = 0;
    for (let i = 0; i < resultBytes.length; i++) {
        resultInt += resultBytes[i] * Math.pow(256, i);
    }

    return resultInt;
}

// Example usage
console.log(computeOutputIndex(5, 3)); // Output will depend on the input values
```

### Explanation:
1. **Function Definition**: The function `computeOutputIndex` is defined with two parameters `idx1` and `idx2`, both of type `number`.
2. **JSDoc Documentation**: The function is documented using JSDoc-style comments, which include descriptions of the function, parameters, and return value.
3. **Bitwise XOR**: The bitwise XOR operation is performed using the `^` operator.
4. **Byte Representation**: The result is converted to a little-endian byte representation using a `Uint8Array`. The loop iterates over each byte, shifting the result by 8 bits to the right and storing the lower 8 bits in the array.
5. **Conversion Back to Integer**: The little-endian bytes are converted back to an integer by iterating over the `Uint8Array` and summing the values multiplied by powers of 256.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate type annotations and documentation.