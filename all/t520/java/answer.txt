Sure, here is the equivalent Java code for your Python function:

```java
package org.real.temp;

public class Answer {

    /**
     * Computes the output index from two given indices in the MultiVector's representation
     * of the G_n orthonormal basis.
     *
     * This function interprets the integers as little-endian bitstrings, takes their XOR,
     * and interprets the result as an integer in little-endian.
     *
     * @param idx1 Input index 1.
     * @param idx2 Input index 2.
     * @return The computed output index.
     */
    public static int computeOutputIndex(int idx1, int idx2) {
        // Perform XOR operation on the two input indices
        return idx1 ^ idx2;
    }

    public static void main(String[] args) {
        // Example usage
        int idx1 = 5; // Binary: 0101
        int idx2 = 3; // Binary: 0011
        int outputIndex = computeOutputIndex(idx1, idx2);
        System.out.println("Computed Output Index: " + outputIndex); // Output should be 6 (Binary: 0110)
    }
}
```

### Explanation:
- **Package Declaration**: The package declaration `package org.real.temp;` specifies where the class is located within the project structure.
- **Class Declaration**: The class `Answer` contains the method `computeOutputIndex`.
- **Method Signature**: The method `computeOutputIndex` takes two `int` parameters (`idx1` and `idx2`) and returns an `int`. It performs a bitwise XOR operation between the two inputs using the `^` operator.
- **Main Method**: A simple `main` method is included to demonstrate how to call the `computeOutputIndex` method and print the result.

This Java code mirrors the functionality of your original Python function.