Certainly! Here is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and method signature:

```java
package org.real.temp;

/**
 * A class that provides methods for computing output indices based on the MultiVector's
 * representation of the G_n orthonormal basis.
 */
public class Answer {

    /**
     * Computes the output index from two given indices in the MultiVector's representation
     * of the G_n orthonormal basis.
     *
     * This function interprets the integers as little-endian bitstrings, takes their XOR,
     * and interprets the result as an integer in little-endian.
     *
     * @param idx1 Input index 1.
     * @param idx2 Input index 2.
     * @return The computed output index.
     */
    public static int computeOutputIndex(int idx1, int idx2) {
        // Perform bitwise XOR between the two indices
        int result = idx1 ^ idx2;

        // Convert result to little-endian byte representation
        byte[] resultBytes = intToLittleEndianBytes(result);

        // Convert little-endian bytes back to an integer
        int resultInt = littleEndianBytesToInt(resultBytes);

        return resultInt;
    }

    /**
     * Converts an integer to a little-endian byte array.
     *
     * @param value The integer value to convert.
     * @return The little-endian byte array representation of the integer.
     */
    private static byte[] intToLittleEndianBytes(int value) {
        byte[] bytes = new byte[4];
        for (int i = 0; i < 4; i++) {
            bytes[i] = (byte) (value & 0xFF);
            value >>>= 8;
        }
        return bytes;
    }

    /**
     * Converts a little-endian byte array back to an integer.
     *
     * @param bytes The little-endian byte array to convert.
     * @return The integer representation of the little-endian byte array.
     */
    private static int littleEndianBytesToInt(byte[] bytes) {
        int result = 0;
        for (int i = 0; i < bytes.length; i++) {
            result |= (bytes[i] & 0xFF) << (i * 8);
        }
        return result;
    }

    public static void main(String[] args) {
        // Example usage
        int idx1 = 5;
        int idx2 = 3;
        int outputIndex = computeOutputIndex(idx1, idx2);
        System.out.println("Computed Output Index: " + outputIndex);
    }
}
```

### Explanation:
1. **Class Definition**: The class `Answer` is defined with the package `org.real.temp`.
2. **Javadoc Comments**: The Javadoc comments are added to provide detailed documentation for the methods.
3. **Method Signature**: The method `computeOutputIndex` is defined as `public static int computeOutputIndex(int idx1, int idx2)` to match the Python function signature.
4. **Bitwise XOR**: The bitwise XOR operation is performed using `^`.
5. **Byte Conversion**:
   - `intToLittleEndianBytes`: Converts an integer to a little-endian byte array.
   - `littleEndianBytesToInt`: Converts a little-endian byte array back to an integer.
6. **Main Method**: A `main` method is included to demonstrate how to call the `computeOutputIndex` method.

This Java code preserves the original functionality and structure of the Python code while adhering to Java's syntax and conventions.