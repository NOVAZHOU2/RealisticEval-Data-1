Certainly! Below is the equivalent C++ code with the same functionality and comments:

```cpp
#include <iostream>

/**
 * Computes the output index from two given indices in the MultiVector's representation
 * of the G_n orthonormal basis.
 *
 * This function interprets the integers as little-endian bitstrings, takes their XOR,
 * and interprets the result as an integer in little-endian.
 *
 * @param idx_1 Input index 1.
 * @param idx_2 Input index 2.
 * @return The computed output index.
 */
int computeOutputIndex(int idx_1, int idx_2) {
    return idx_1 ^ idx_2;
}

int main() {
    // Example usage
    int idx_1 = 5; // Binary: 0101
    int idx_2 = 3; // Binary: 0011

    int outputIndex = computeOutputIndex(idx_1, idx_2);
    std::cout << "Output Index: " << outputIndex << std::endl; // Should print 6 (Binary: 0110)

    return 0;
}
```

### Explanation:
- **Function Signature**: The `computeOutputIndex` function takes two `int` parameters (`idx_1` and `idx_2`) and returns an `int`.
- **XOR Operation**: Inside the function, the XOR operation (`^`) is used to combine the two input indices.
- **Comments**: The comments have been preserved to explain the purpose and behavior of the function.
- **Example Usage**: A simple example in the `main` function demonstrates how to use the `computeOutputIndex` function and prints the result.

This C++ code maintains the logic and intent of the original Python code while adhering to C++ syntax and conventions.