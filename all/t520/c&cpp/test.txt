Sure! Below is the equivalent C++ test case using Catch2 for the provided Python unittest test class. Note that I'll assume you have the `compute_output_index` function implemented in a C++ file named `multi_vector.cpp`.

### C++ Code

```cpp
// multi_vector.h
#ifndef MULTI_VECTOR_H
#define MULTI_VECTOR_H

#include <iostream>

int compute_output_index(int idx_1, int idx_2);

#endif // MULTI_VECTOR_H
```

```cpp
// multi_vector.cpp
#include "multi_vector.h"

int compute_output_index(int idx_1, int idx_2) {
    return idx_1 ^ idx_2;
}
```

```cpp
// test_multi_vector.cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "multi_vector.h"

TEST_CASE("Test compute_output_index", "[compute_output_index]") {
    SECTION("Case 1") {
        REQUIRE(compute_output_index(0b0001, 0b0010) == 0b0011);
    }

    SECTION("Case 2") {
        REQUIRE(compute_output_index(0b1111, 0b0000) == 0b1111);
    }

    SECTION("Case 3") {
        REQUIRE(compute_output_index(0b1010, 0b1010) == 0b0000);
    }

    SECTION("Case 4") {
        REQUIRE(compute_output_index(0b1100, 0b1011) == 0b0111);
    }
}
```

### Explanation

1. **Header File (`multi_vector.h`)**: This file declares the `compute_output_index` function.
2. **Implementation File (`multi_vector.cpp`)**: This file contains the implementation of the `compute_output_index` function.
3. **Test File (`test_multi_vector.cpp`)**: This file uses Catch2 to write unit tests for the `compute_output_index` function.

### Running the Tests

To run the tests, you need to have Catch2 installed. If you're using CMake, you can add the following to your `CMakeLists.txt`:

```cmake
find_package(Catch2 REQUIRED)

add_executable(test_multi_vector test_multi_vector.cpp)
target_link_libraries(test_multi_vector Catch2::Catch2WithMain)
```

Then, you can build and run the tests using:

```sh
mkdir build
cd build
cmake ..
make
./test_multi_vector
```

This will execute the tests and provide you with the results.