Sure! Below is the equivalent C++ code for the provided Python function `compute_output_index`. This function computes the output index from two given indices by interpreting them as little-endian bitstrings, taking their XOR, and then interpreting the result as an integer in little-endian format.

```cpp
#include <iostream>

// Function to compute the output index from two given indices
int compute_output_index(int idx_1, int idx_2) {
    // Take the XOR of the two input indices
    int result = idx_1 ^ idx_2;
    
    return result;
}

int main() {
    // Example usage
    int idx_1 = 5;  // Binary: 0101
    int idx_2 = 3;  // Binary: 0011
    
    int output_index = compute_output_index(idx_1, idx_2);
    
    std::cout << "Output Index: " << output_index << std::endl;  // Output should be 6 (Binary: 0110)
    
    return 0;
}
```

### Explanation:
- **XOR Operation**: The XOR operation (`^` in C++) is used to compute the result of the bitwise XOR between `idx_1` and `idx_2`.
- **Return Value**: The result of the XOR operation is returned as the output index.

This C++ code provides the same functionality as the original Python function. You can compile and run it using any standard C++ compiler.