Here's the equivalent TypeScript code for the provided Python function, ensuring the functionality and structure remain consistent while adapting to TypeScript's features and static typing:

```typescript
import * as fs from 'fs';

class FileModifier {
    /**
     * Modifies a specific line in the given file.
     * 
     * @param filePath - The path of the file to be modified.
     * @param lineNumber - The line number to be modified (1-based index).
     * @param newValue - The new value to update the line with.
     * @throws Error - If an invalid line number is specified or if an error occurs during file operations.
     */
    modifyLineInFile(filePath: string, lineNumber: number, newValue: string): void {
        // Read the current lines of the file
        let lines: string[];

        try {
            const data = fs.readFileSync(filePath, 'utf-8');
            lines = data.split('\n');
        } catch (e) {
            throw new Error(`An error occurred while reading the file: ${e}`);
        }

        // Check if the line number is valid
        if (lineNumber < 1 || lineNumber > lines.length) {
            throw new Error(`Invalid line number: ${lineNumber}`);
        }

        // Update the specific line with the new value
        lines[lineNumber - 1] = newValue; // No need to add newline here

        // Write the updated lines back to the file
        try {
            fs.writeFileSync(filePath, lines.join('\n')); // Join with newline to write back
        } catch (e) {
            throw new Error(`An error occurred while writing to the file: ${e}`);
        }
    }
}
```

### Key Changes Explained:
1. **Imports**: The `fs` module is used for file operations in Node.js.
2. **Class Definition**: Encapsulated the function within a class (`FileModifier`) for better structure.
3. **Type Annotations**: Added type annotations for parameters and return type (`void`).
4. **Error Handling**: Threw generic `Error` instances for simplicity; this can be expanded based on needs.
5. **File Reading and Writing**: Used `fs.readFileSync` and `fs.writeFileSync` for synchronous file operations. The file's lines are split and joined using `'\n'` for writing.
6. **Newline Handling**: Adjusted handling of newlines based on how JavaScript strings work compared to Python.