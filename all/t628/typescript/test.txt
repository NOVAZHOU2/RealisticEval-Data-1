Here's the equivalent test class using Jest in TypeScript, preserving the functionality and logic of the original Python tests:

```typescript
import * as fs from 'fs';
import { modifyLineInFile } from './pathToYourFunction'; // Adjust the import according to your project structure

describe('TestAnswer', () => {
    const TEST_FILE = 'testFile.txt';

    beforeEach(() => {
        // Create a test file with initial content
        fs.writeFileSync(TEST_FILE, 'Line 1\nLine 2\nLine 3\n');
    });

    afterEach(() => {
        // Clean up the test file after each test
        try {
            fs.unlinkSync(TEST_FILE);
        } catch (err) {
            // File might already be deleted
        }
    });

    test('modify line success', () => {
        modifyLineInFile(TEST_FILE, 2, 'Updated Line 2');
        const lines = fs.readFileSync(TEST_FILE, 'utf-8').split('\n');
        expect(lines[0]).toBe('Line 1');
        expect(lines[1]).toBe('Updated Line 2');
        expect(lines[2]).toBe('Line 3');
    });

    test('modify first line', () => {
        modifyLineInFile(TEST_FILE, 1, 'Updated Line 1');
        const lines = fs.readFileSync(TEST_FILE, 'utf-8').split('\n');
        expect(lines[0]).toBe('Updated Line 1');
        expect(lines[1]).toBe('Line 2');
        expect(lines[2]).toBe('Line 3');
    });

    test('modify last line', () => {
        modifyLineInFile(TEST_FILE, 3, 'Updated Line 3');
        const lines = fs.readFileSync(TEST_FILE, 'utf-8').split('\n');
        expect(lines[0]).toBe('Line 1');
        expect(lines[1]).toBe('Line 2');
        expect(lines[2]).toBe('Updated Line 3');
    });

    test('modify non-existent line', () => {
        expect(() => {
            modifyLineInFile(TEST_FILE, 4, 'Should Fail');
        }).toThrow();
    });

    test('modify negative line number', () => {
        expect(() => {
            modifyLineInFile(TEST_FILE, 0, 'Should Fail');
        }).toThrow();
    });
});
```

### Key Changes Explained:
1. **Imports**: Used Node's `fs` module for file operations and imported the function being tested.
2. **Test Framework**: Switched from `unittest.TestCase` to Jest's `describe` and `test` functions.
3. **Setup and Teardown**: Used `beforeEach` and `afterEach` for setup and cleanup, replacing `setUp` and `tearDown`.
4. **Assertions**: Replaced `self.assertEqual` with Jest's `expect(...).toBe(...)` and `self.assertRaises` with `expect(...).toThrow()`.
5. **File Handling**: Used synchronous file methods (`fs.writeFileSync` and `fs.unlinkSync`) for test file operations.
6. **Line Breaks**: Adjusted line checks to match the behavior of reading lines in TypeScript.