Here’s the equivalent JavaScript code that replicates the functionality of the provided Python code:

```javascript
const fs = require('fs');

class FileModifier {
    /**
     * Modifies a specific line in the given file.
     * 
     * @param {string} filePath - The path of the file to be modified.
     * @param {number} lineNumber - The line number to be modified (1-based index).
     * @param {string} newValue - The new value to update the line with.
     * @throws {Error} If an invalid line number is specified.
     */
    modifyLineInFile(filePath, lineNumber, newValue) {
        // Read the current lines of the file
        let lines;
        try {
            lines = fs.readFileSync(filePath, 'utf-8').split('\n');
        } catch (err) {
            throw new Error(`An error occurred while reading the file: ${err.message}`);
        }

        // Check if the line number is valid
        if (lineNumber < 1 || lineNumber > lines.length) {
            throw new Error(`Invalid line number: ${lineNumber}`);
        }

        // Update the specific line with the new value
        lines[lineNumber - 1] = newValue; // No need for newline as split will handle it

        // Write the updated lines back to the file
        try {
            fs.writeFileSync(filePath, lines.join('\n'));
        } catch (err) {
            throw new Error(`An error occurred while writing to the file: ${err.message}`);
        }
    }
}

// Example usage:
// const modifier = new FileModifier();
// modifier.modifyLineInFile('path/to/file.txt', 2, 'New content for line 2');
```

### Key Differences Explained:
1. **File System Module**: In Node.js, we use the `fs` module for file operations.
2. **Error Handling**: JavaScript uses `try...catch` for handling exceptions, similar to Python’s `try...except`.
3. **1-Based Indexing**: The line number check remains consistent to match the functionality.
4. **Reading and Writing Files**: The JavaScript code uses synchronous file read/write operations for simplicity, similar to Python’s `open()` context management.