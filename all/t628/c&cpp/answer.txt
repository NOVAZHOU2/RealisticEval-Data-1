Here's the equivalent C++ code for the provided Python function. This C++ version maintains the same functionality and structure, while adapting to the syntax and features of C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <stdexcept>
#include <string>

class FileModifier {
public:
    void modifyLineInFile(const std::string& filePath, int lineNumber, const std::string& newValue) {
        // Read the current lines of the file
        std::vector<std::string> lines;
        std::ifstream reader(filePath);

        if (!reader) {
            throw std::ios_base::failure("An error occurred while reading the file.");
        }

        std::string line;
        while (std::getline(reader, line)) {
            lines.push_back(line);
        }
        reader.close();

        // Check if the line number is valid
        if (lineNumber < 1 || lineNumber > static_cast<int>(lines.size())) {
            throw std::invalid_argument("Invalid line number: " + std::to_string(lineNumber));
        }

        // Update the specific line with the new value
        lines[lineNumber - 1] = newValue;  // No need to add newline character, it will be added while writing

        // Write the updated lines back to the file
        std::ofstream writer(filePath);
        if (!writer) {
            throw std::ios_base::failure("An error occurred while writing to the file.");
        }

        for (const auto& updatedLine : lines) {
            writer << updatedLine << '\n';  // Add newline character
        }
        writer.close();
    }
};
```

### Explanation of Changes:

1. **Class Definition**: A class `FileModifier` is created to encapsulate the method.
2. **Function Signature**: The function `modifyLineInFile` is defined with parameters that match the original Python method.
3. **File Handling**: C++ uses `std::ifstream` for reading files and `std::ofstream` for writing. Error handling is done using exceptions.
4. **Vector for Lines**: A `std::vector<std::string>` is used to store the lines read from the file.
5. **Input Validation**: The line number is checked to ensure it is valid. This uses `static_cast<int>` to ensure type safety.
6. **Writing to File**: When writing back to the file, each line is written with a newline character.

This C++ version adheres to C++ conventions and error handling practices while preserving the logic and functionality of the original Python code.