Sure! Below is the equivalent Python code for the provided Java class, which modifies a specific line in a file. The code uses standard file handling in Python, and the functionality remains consistent with the Java implementation.
python
class Answer:
    def modify_line_in_file(self, file_path, line_number, new_value):
        """
        Modifies a specific line in the given file.

        :param file_path: the path of the file to be modified
        :param line_number: the line number to be modified (1-based index)
        :param new_value: the new value to update the line with
        :raises ValueError: if an invalid line number is specified
        """
        # Read the current lines of the file
        lines = []
        try:
            with open(file_path, 'r') as reader:
                lines = reader.readlines()
        except IOError as e:
            raise IOError(f"An error occurred while reading the file: {e}")

        # Check if the line number is valid
        if line_number < 1 or line_number > len(lines):
            raise ValueError(f"Invalid line number: {line_number}")

        # Update the specific line with the new value
        lines[line_number - 1] = new_value + '\n'  # Add newline character

        # Write the updated lines back to the file
        try:
            with open(file_path, 'w') as writer:
                writer.writelines(lines)
        except IOError as e:
            raise IOError(f"An error occurred while writing to the file: {e}")

# Example usage
if __name__ == "__main__":
    answer = Answer()
    file_path = "example.txt"  # Specify your file path
    line_number = 2  # Specify which line to modify
    new_value = "This is the new content for line 2."  # New content
    try:
        answer.modify_line_in_file(file_path, line_number, new_value)
        print("Line modified successfully.")
    except (IOError, ValueError) as e:
        print(f"An error occurred: {e}")
Key Differences and Explanations:
File Handling: In Python, file handling is done using the built-in open() function. The modes 'r' for reading and 'w' for writing are used.
Error Handling: In Python, exceptions are raised using the raise statement, and ValueError is used for invalid line numbers.
Line Numbers: Python uses zero-based indexing, so we adjust the line number by subtracting 1.
Newline Characters: In the Python implementation, we add a newline character ('\n') to the new_value to maintain the original file format when writing back.
if __name__ == "__main__":: This construct allows the script to be run as a standalone program or imported as a module without executing the example usage.
This code maintains the same functionality and logic as your original Java code while following Python conventions. Let me know if you have any questions or need further modifications!