Here's how you can convert the provided JavaScript Jest test cases into Python unit tests using the unittest framework.
JavaScript Jest Test Cases
Here’s a recap of the original Jest test cases:
javascript
describe('rgbToHsl function', () => {
    test('converts pure red to HSL', () => {
        expect(rgbToHsl(255, 0, 0)).toEqual({h: 0, s: 100, l: 50});
    });
    test('converts black to HSL', () => {
        expect(rgbToHsl(0, 0, 0)).toEqual({h: 0, s: 0, l: 0});
    });
    test('converts white to HSL', () => {
        expect(rgbToHsl(255, 255, 255)).toEqual({h: 0, s: 0, l: 100});
    });
    test('converts a color on the edge of RGB range', () => {
        expect(rgbToHsl(0, 255, 255)).toEqual({h: 180, s: 100, l: 50});
    });
});
Python unittest Test Cases
Here’s the equivalent Python code using the unittest module:
python
import unittest

def rgb_to_hsl(r: int, g: int, b: int) -> dict:
    # Function implementation (as defined previously)
    r /= 255
    g /= 255
    b /= 255

    max_val = max(r, g, b)
    min_val = min(r, g, b)
    
    h, s, l = 0, 0, (max_val + min_val) / 2

    if max_val == min_val:
        h = s = 0  # Achromatic
    else:
        d = max_val - min_val
        s = d / (2 - max_val - min_val) if l > 0.5 else d / (max_val + min_val)

        if max_val == r:
            h = (g - b) / d + (6 if g < b else 0)
        elif max_val == g:
            h = (b - r) / d + 2
        elif max_val == b:
            h = (r - g) / d + 4

        h /= 6

    h = round(h * 360)
    s = round(s * 100)
    l = round(l * 100)

    return {'h': h, 's': s, 'l': l}

class TestRgbToHsl(unittest.TestCase):
    
    def test_converts_pure_red_to_hsl(self):
        self.assertEqual(rgb_to_hsl(255, 0, 0), {'h': 0, 's': 100, 'l': 50})
    
    def test_converts_black_to_hsl(self):
        self.assertEqual(rgb_to_hsl(0, 0, 0), {'h': 0, 's': 0, 'l': 0})
    
    def test_converts_white_to_hsl(self):
        self.assertEqual(rgb_to_hsl(255, 255, 255), {'h': 0, 's': 0, 'l': 100})
    
    def test_converts_a_color_on_edge_of_rgb_range(self):
        self.assertEqual(rgb_to_hsl(0, 255, 255), {'h': 180, 's': 100, 'l': 50})

if __name__ == '__main__':
    unittest.main()
Explanation of the Python Code
Importing Libraries: The unittest module is imported to allow the creation of unit tests.
Function Definition: The rgb_to_hsl function is defined to convert RGB values to HSL format. This should match the implementation you had earlier.
Test Class: A class named TestRgbToHsl is created, which inherits from unittest.TestCase.
Test Methods:
Each method starts with test_ to ensure that the unittest framework recognizes them as tests.
The self.assertEqual() method is used to check if the output of rgb_to_hsl matches the expected HSL values.
Main Block: The unittest.main() function is called if the script is run directly, which executes all the test cases.
Running the Tests
To run the tests, you can save this code in a .py file and execute it in a Python environment. The output will indicate whether the tests passed or if there were any failures.