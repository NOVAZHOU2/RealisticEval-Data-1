Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Unittest Code

```python
import unittest

class TestBitsToBytes(unittest.TestCase):

    def test_exact_multiple_of_eight(self):
        """Test bit arrays that are exact multiples of 8 bits."""
        bits = [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1]
        expected = bytearray([0b10110010, 0b01001111])  # Corrected to match actual byte values
        result = bits_to_bytes(bits)
        self.assertEqual(result, expected)

    def test_incomplete_byte_discarded(self):
        """Test bit arrays where the last bits do not make up a full byte."""
        bits = [1, 0, 1, 1, 0, 0, 1, 0, 0, 1]  # Last two bits should be discarded
        expected = bytearray([0b10110010])
        result = bits_to_bytes(bits)
        self.assertEqual(result, expected)

    def test_empty_bit_array(self):
        """Test an empty bit array."""
        bits = []
        expected = bytearray()
        result = bits_to_bytes(bits)
        self.assertEqual(result, expected)

    def test_single_full_byte(self):
        """Test bit arrays that exactly make one byte."""
        bits = [1, 1, 1, 1, 1, 1, 1, 1]  # Represents the byte 0xFF
        expected = bytearray([0xFF])
        result = bits_to_bytes(bits)
        self.assertEqual(result, expected)

    def test_no_bits_discarded(self):
        """Test bit arrays with multiple of 8 bits and no extra bits."""
        bits = [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1]
        expected = bytearray([0xCC, 0x77])  # Corrected the second byte from 0xB7 to 0x77
        result = bits_to_bytes(bits)
        self.assertEqual(result, expected)
```

### Equivalent Jest Test Suite

```javascript
const { bitsToBytes } = require('./bitsToBytes'); // Import the bitsToBytes function

describe('TestBitsToBytes', () => {
    describe('test_exact_multiple_of_eight', () => {
        it('should correctly convert bit arrays that are exact multiples of 8 bits', () => {
            const bits = [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1];
            const expected = new Uint8Array([0b10110010, 0b01001111]);
            const result = bitsToBytes(bits);
            expect(result).toEqual(expected);
        });
    });

    describe('test_incomplete_byte_discarded', () => {
        it('should discard the last incomplete byte', () => {
            const bits = [1, 0, 1, 1, 0, 0, 1, 0, 0, 1]; // Last two bits should be discarded
            const expected = new Uint8Array([0b10110010]);
            const result = bitsToBytes(bits);
            expect(result).toEqual(expected);
        });
    });

    describe('test_empty_bit_array', () => {
        it('should handle an empty bit array', () => {
            const bits = [];
            const expected = new Uint8Array([]);
            const result = bitsToBytes(bits);
            expect(result).toEqual(expected);
        });
    });

    describe('test_single_full_byte', () => {
        it('should correctly convert bit arrays that exactly make one byte', () => {
            const bits = [1, 1, 1, 1, 1, 1, 1, 1]; // Represents the byte 0xFF
            const expected = new Uint8Array([0xFF]);
            const result = bitsToBytes(bits);
            expect(result).toEqual(expected);
        });
    });

    describe('test_no_bits_discarded', () => {
        it('should correctly convert bit arrays with multiple of 8 bits and no extra bits', () => {
            const bits = [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1];
            const expected = new Uint8Array([0xCC, 0x77]); // Corrected the second byte from 0xB7 to 0x77
            const result = bitsToBytes(bits);
            expect(result).toEqual(expected);
        });
    });
});
```

### Explanation:
1. **Import Function**: The `bitsToBytes` function is imported at the beginning of the test file.
2. **Describe Blocks**: Each test case is wrapped in a `describe` block to provide context.
3. **It Blocks**: Each test case is defined using an `it` block, which includes a descriptive message.
4. **Assertions**: The `expect` function is used to assert the equality of the results. `Uint8Array` is used to represent the byte arrays, similar to `bytearray` in Python.
5. **Data Types**: `Uint8Array` is used to represent byte arrays, which is the closest equivalent to Python's `bytearray`.

This Jest test suite maintains the same functionality and logic as the original Python unittest class, ensuring that all assertions are properly mapped to Jest equivalents.