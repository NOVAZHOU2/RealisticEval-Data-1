Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JavaScript documentation standards using JSDoc format:

```javascript
/**
 * Converts an array of binary bits to an array of bytes. Traverses through each bit,
 * composing these bits into bytes, forming a byte every 8 bits, and then storing these
 * bytes in an array and returning it. If the length of the bit array is not a multiple
 * of 8, the last incomplete byte will be discarded.
 *
 * @param {Array<number>} bits - The input array of bits (each element should be 0 or 1).
 * @returns {Uint8Array} An array of bytes constructed from the bits.
 */
function bitsToBytes(bits) {
    // Ensure that the number of bits is a multiple of 8
    const numFullBytes = Math.floor(bits.length / 8);

    // Create a Uint8Array to store the byte values
    const byteArray = new Uint8Array(numFullBytes);

    // Process each group of 8 bits
    for (let i = 0; i < numFullBytes; i++) {
        // Slice the bits array to get 8 bits
        const byteBits = bits.slice(i * 8, (i + 1) * 8);
        // Convert the list of bits to a string of bits
        const byteStr = byteBits.join('');
        // Convert the string of bits to an integer and then to a byte
        const byte = parseInt(byteStr, 2);
        // Set the byte in the Uint8Array
        byteArray[i] = byte;
    }

    return byteArray;
}

// Example usage:
const bits = [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0];
console.log(bitsToBytes(bits));
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block provides a detailed description of the function's purpose.
   - It specifies the parameters and return type using JSDoc tags.

2. **Function Signature**:
   - The function `bitsToBytes` takes an array of numbers (`Array<number>`) as the parameter.
   - The return type is specified as `Uint8Array`.

3. **Implementation**:
   - The function calculates the number of full bytes that can be formed from the given bits.
   - It initializes a `Uint8Array` to store the resulting bytes.
   - It iterates through the bits in groups of 8, converting each group to a byte and storing it in the `Uint8Array`.

4. **Example Usage**:
   - An example usage demonstrates how to call the function and log the result.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JavaScript documentation standards using JSDoc.