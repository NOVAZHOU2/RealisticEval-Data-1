Certainly! Here is the equivalent Java code for the given Python function, including appropriate Javadoc comments and type conversions:

```java
import java.util.List;

public class Answer {

    /**
     * Converts an array of binary bits to an array of bytes. Traverses through each bit,
     * composing these bits into bytes, forming a byte every 8 bits, and then storing these
     * bytes in an array and returning it. If the length of the bit array is not a multiple
     * of 8, the last incomplete byte will be discarded.
     *
     * @param bits The input list of bits (each element should be 0 or 1).
     * @return A byte array constructed from the bits.
     */
    public static byte[] bitsToBytes(List<Integer> bits) {
        // Ensure that the number of bits is a multiple of 8
        int numFullBytes = bits.size() / 8;

        // Create a byte array to store the byte values
        byte[] byteArray = new byte[numFullBytes];

        // Process each group of 8 bits
        for (int i = 0; i < numFullBytes; i++) {
            // Slice the bits list to get 8 bits
            List<Integer> byteBits = bits.subList(i * 8, (i + 1) * 8);
            // Convert the list of bits to a string of bits
            StringBuilder byteStrBuilder = new StringBuilder();
            for (Integer bit : byteBits) {
                byteStrBuilder.append(bit);
            }
            String byteStr = byteStrBuilder.toString();
            // Convert the string of bits to an integer and then to a byte
            int byteValue = Integer.parseInt(byteStr, 2);
            // Append the byte to the byte array
            byteArray[i] = (byte) byteValue;
        }

        return byteArray;
    }

    public static void main(String[] args) {
        // Example usage
        List<Integer> bits = List.of(1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0);
        byte[] byteArray = bitsToBytes(bits);
        for (byte b : byteArray) {
            System.out.printf("%d ", b);
        }
    }
}
```

### Explanation:
1. **Import Statement**: The `import java.util.List;` statement is added to handle the `List` type used in the method signature.
2. **Javadoc Comments**: The Python docstring is converted into a Javadoc comment block.
3. **Method Signature**: The method `bitsToBytes` takes a `List<Integer>` as its parameter and returns a `byte[]`.
4. **Type Handling**: The input `bits` is a `List<Integer>` to ensure that each element is an integer (either 0 or 1).
5. **Byte Array Creation**: We create a `byte[]` to store the resulting bytes.
6. **Looping Through Bits**: We use a loop to process each group of 8 bits.
7. **String Conversion**: We convert the list of bits to a string using a `StringBuilder`.
8. **Integer and Byte Conversion**: We parse the string of bits to an integer and then cast it to a byte.
9. **Example Usage**: The `main` method demonstrates how to call the `bitsToBytes` method and print the resulting byte array.

This Java code preserves the functionality and structure of the original Python code while adhering to Java conventions and best practices.