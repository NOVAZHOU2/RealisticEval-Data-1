Sure! Below is the Java version of your Python function `bits_to_bytes` with the same functionality and comments:

```java
import java.util.List;

/**
 * Converts an array of binary bits to an array of bytes. Traversing through each bit,
 * composing these bits into bytes, forming a byte every 8 bits, and then storing these
 * bytes in an array and returning it. If the length of the bit array is not a multiple
 * of 8, the last incomplete byte will be discarded.
 *
 * @param bits The input array of bits (each element should be 0 or 1).
 * @return An array of bytes constructed from the bits.
 */
public class BitConverter {
    public static byte[] bitsToBytes(List<Integer> bits) {
        int numBytes = bits.size() / 8;
        if (numBytes == 0) {
            return new byte[0];
        }

        byte[] bytes = new byte[numBytes];
        for (int i = 0; i < numBytes; i++) {
            int byteValue = 0;
            for (int j = 0; j < 8; j++) {
                int bitIndex = i * 8 + j;
                if (bitIndex < bits.size()) {
                    byteValue = (byte) (byteValue | (bits.get(bitIndex) << (7 - j)));
                }
            }
            bytes[i] = (byte) byteValue;
        }
        return bytes;
    }

    public static void main(String[] args) {
        // Example usage
        List<Integer> bits = List.of(1, 0, 1, 1, 0, 1, 1, 0);
        byte[] bytes = bitsToBytes(bits);
        for (byte b : bytes) {
            System.out.printf("%02X ", b);
        }
    }
}
```

### Explanation:
- **Java Class and Method**: The method `bitsToBytes` is defined inside a class named `BitConverter`.
- **Input Parameter**: The method takes a `List<Integer>` where each integer is either `0` or `1`.
- **Output**: It returns a `byte[]` containing the bytes formed from the bits.
- **Loop Through Bits**: The outer loop iterates over each byte position, and the inner loop constructs each byte by combining the appropriate bits.
- **Bit Shifting**: Each bit is shifted into its correct position within the byte using bitwise operations.
- **Main Method**: A simple example usage of the `bitsToBytes` method is provided in the `main` method.

This Java code maintains the same logic and functionality as your original Python function.