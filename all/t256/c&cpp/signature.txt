Certainly! Below is the equivalent C++ code for the given Python function `bits_to_bytes`, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <vector>
#include <bitset>

/**
 * Convert an array of binary bits to an array of bytes. Traversing through each bit,
 * composing these bits into bytes, forming a byte every 8 bits, and then storing these
 * bytes in an array and returning it. If the length of the bit array is not a multiple
 * of 8, the last incomplete byte will be discarded.
 *
 * @param bits A vector of integers representing the bits (each element should be 0 or 1).
 * @return A vector of unsigned chars representing the bytes constructed from the bits.
 */
std::vector<unsigned char> bits_to_bytes(const std::vector<int>& bits) {
    // Ensure that the number of bits is a multiple of 8
    size_t num_full_bytes = bits.size() / 8;

    // Create a vector to store the byte values
    std::vector<unsigned char> byte_array;

    // Process each group of 8 bits
    for (size_t i = 0; i < num_full_bytes; ++i) {
        // Initialize a variable to hold the current byte value
        unsigned char byte = 0;

        // Process each bit in the current group of 8 bits
        for (int j = 0; j < 8; ++j) {
            // Shift the current bit into its position within the byte
            byte |= (bits[i * 8 + j] << (7 - j));
        }

        // Append the byte to the vector
        byte_array.push_back(byte);
    }

    return byte_array;
}

// Function to check the correctness of the conversion
void check_conversion() {
    std::vector<int> bits = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0};
    std::vector<unsigned char> expected = {0xAA, 0xAA};
    std::vector<unsigned char> result = bits_to_bytes(bits);

    if (result == expected) {
        std::cout << "Conversion is correct." << std::endl;
    } else {
        std::cout << "Conversion is incorrect." << std::endl;
    }
}

int main() {
    check_conversion();
    return 0;
}
```

### Explanation:
1. **Header Inclusions**: Include necessary headers (`<iostream>`, `<vector>`, `<bitset>`).
2. **Function Documentation**: Translate the Python docstring into a C++ multi-line comment using `/* */`.
3. **Function Signature**: Define the `bits_to_bytes` function with the appropriate C++ type signatures.
4. **Type Annotations**: Translate Python type annotations (`List[int]` and `bytearray`) into C++ types (`std::vector<int>` and `std::vector<unsigned char>`).
5. **Function Implementation**: Implement the logic to convert bits to bytes, ensuring that the number of bits is a multiple of 8 and discarding the last incomplete byte if necessary.
6. **Check Function**: Provide a simple check function to verify the correctness of the conversion.
7. **Main Function**: Call the check function in the `main` function to run the test.

This C++ code preserves the original purpose and structure of the Python code while adhering to C++ syntax and conventions.