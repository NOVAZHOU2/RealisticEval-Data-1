Certainly! Below is the equivalent C++ code for the given Python function `bits_to_bytes`. This C++ code maintains the same functionality and logic as the Python version:

```cpp
#include <iostream>
#include <vector>
#include <bitset>
#include <string>

// Function to convert a vector of bits to a vector of bytes
std::vector<unsigned char> bits_to_bytes(const std::vector<int>& bits) {
    // Ensure that the number of bits is a multiple of 8
    size_t num_full_bytes = bits.size() / 8;

    // Create a vector to store the byte values
    std::vector<unsigned char> byte_array;

    // Process each group of 8 bits
    for (size_t i = 0; i < num_full_bytes; ++i) {
        // Initialize a variable to hold the current byte value
        unsigned char byte = 0;

        // Process each bit in the current group of 8 bits
        for (int j = 0; j < 8; ++j) {
            // Shift the current bit into its position within the byte
            byte |= (bits[i * 8 + j] << (7 - j));
        }

        // Append the byte to the vector
        byte_array.push_back(byte);
    }

    return byte_array;
}

// Function to check the correctness of the conversion
void check_conversion() {
    std::vector<int> bits = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0};
    std::vector<unsigned char> expected = {0xAA, 0xAA};
    std::vector<unsigned char> result = bits_to_bytes(bits);

    if (result == expected) {
        std::cout << "Conversion is correct." << std::endl;
    } else {
        std::cout << "Conversion is incorrect." << std::endl;
    }
}

int main() {
    check_conversion();
    return 0;
}
```

### Explanation:
1. **Function Definition**: The `bits_to_bytes` function takes a `std::vector<int>` representing the bits and returns a `std::vector<unsigned char>` representing the bytes.
2. **Number of Full Bytes**: Calculate the number of full bytes by dividing the size of the bits vector by 8.
3. **Byte Array**: Initialize a `std::vector<unsigned char>` to store the resulting bytes.
4. **Processing Each Group of 8 Bits**:
   - Iterate over each group of 8 bits.
   - Use bitwise operations to construct the byte from the bits.
   - Append the byte to the byte array.
5. **Check Conversion**: A simple check function is provided to verify the correctness of the conversion using a predefined set of bits and expected output.

This C++ code closely mirrors the functionality of the Python code while adhering to C++ syntax and conventions.