Sure! Here's how you can translate your Python function to TypeScript:

```typescript
function bitsToBytes(bits: number[]): Uint8Array {
    // Calculate the number of full bytes that can be formed
    const numFullBytes = Math.floor(bits.length / 8);
    
    // Create a new Uint8Array with the calculated number of full bytes
    const bytes = new Uint8Array(numFullBytes);

    for (let i = 0; i < numFullBytes; i++) {
        let byteValue = 0;
        
        // Compose 8 bits into one byte
        for (let j = 0; j < 8; j++) {
            byteValue = (byteValue << 1) | bits[i * 8 + j];
        }
        
        // Store the composed byte in the array
        bytes[i] = byteValue;
    }

    return bytes;
}
```

### Explanation:
- **`Math.floor(bits.length / 8)`**: This calculates the number of full bytes that can be formed from the given bits array.
  
- **`Uint8Array`**: This is used to store the resulting bytes.

- **Outer loop (`for (let i = 0; i < numFullBytes; i++)`)**: Iterates over each full byte that can be formed.

- **Inner loop (`for (let j = 0; j < 8; j++)`)**: Composes 8 bits into one byte by shifting the current value left by 1 and bitwise OR-ing it with the next bit.

- **`bytes[i] = byteValue`**: Stores the composed byte in the result array.

This TypeScript function does exactly what your Python function does, converting an array of binary bits to an array of bytes, discarding any incomplete byte at the end if the length of the bit array is not a multiple of 8.