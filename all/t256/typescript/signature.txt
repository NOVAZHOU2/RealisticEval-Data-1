Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Converts an array of binary bits to an array of bytes. Traverses through each bit,
 * composing these bits into bytes, forming a byte every 8 bits, and then storing these
 * bytes in an array and returning it. If the length of the bit array is not a multiple
 * of 8, the last incomplete byte will be discarded.
 *
 * @param bits - The input array of bits (each element should be 0 or 1).
 * @returns An array of bytes constructed from the bits.
 */
function bitsToBytes(bits: number[]): Uint8Array {
    // Ensure that the number of bits is a multiple of 8
    const numFullBytes = Math.floor(bits.length / 8);

    // Create a Uint8Array to store the byte values
    const byteArray = new Uint8Array(numFullBytes);

    // Process each group of 8 bits
    for (let i = 0; i < numFullBytes; i++) {
        // Slice the bits array to get 8 bits
        const byteBits = bits.slice(i * 8, (i + 1) * 8);
        // Convert the list of bits to a string of bits
        const byteStr = byteBits.join('');
        // Convert the string of bits to an integer and then to a byte
        const byte = parseInt(byteStr, 2);
        // Assign the byte to the corresponding index in the Uint8Array
        byteArray[i] = byte;
    }

    return byteArray;
}

// Example usage
const bits = [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1];
console.log(bitsToBytes(bits));
```

### Explanation:
1. **Function Definition**: The function `bitsToBytes` takes an array of numbers (`number[]`) as input and returns a `Uint8Array`.
2. **JSDoc Documentation**: The function is documented using JSDoc-style comments, providing details about the parameters and return type.
3. **Number of Full Bytes**: `numFullBytes` is calculated by dividing the length of the `bits` array by 8 and taking the floor value.
4. **Uint8Array Creation**: A `Uint8Array` is created with a length equal to `numFullBytes`.
5. **Looping Through Bits**: For each group of 8 bits, the bits are sliced, joined into a string, converted to an integer using base 2, and then assigned to the corresponding index in the `Uint8Array`.
6. **Return Value**: The `Uint8Array` containing the bytes is returned.

This TypeScript code preserves the original functionality and structure of the Python code, while adhering to TypeScript's static type system and best practices for documentation.