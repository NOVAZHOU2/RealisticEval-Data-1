Sure, here is the equivalent TypeScript code for your Python function:

```typescript
import { createCanvas, loadImage } from 'canvas';

/**
 * Count the number of unique colors in an image.
 *
 * @param image_path - Path to the image file.
 * @returns The number of unique colors in the image.
 */
async function countUniqueColors(imagePath: string): Promise<number> {
    const canvas = createCanvas(1, 1);
    const ctx = canvas.getContext('2d');
    
    // Load the image into the canvas
    await loadImage(imagePath).then((image) => {
        canvas.width = image.width;
        canvas.height = image.height;
        ctx.drawImage(image, 0, 0);
    });

    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const data = imageData.data;

    const colorSet = new Set<string>();

    for (let i = 0; i < data.length; i += 4) {
        const r = data[i];
        const g = data[i + 1];
        const b = data[i + 2];
        const a = data[i + 3];

        // Create a color string in the format "rgba(r,g,b,a)"
        const color = `rgba(${r},${g},${b},${a})`;
        colorSet.add(color);
    }

    return colorSet.size;
}

// Example usage:
(async () => {
    try {
        const uniqueColorCount = await countUniqueColors('path/to/your/image.png');
        console.log(`Number of unique colors: ${uniqueColorCount}`);
    } catch (error) {
        console.error('Error counting unique colors:', error);
    }
})();
```

### Explanation:
1. **Dependencies**: This code uses the `canvas` library to handle image processing. You can install it using npm or yarn:
   ```sh
   npm install canvas
   ```

2. **Function Definition**: The `countUniqueColors` function is defined as an asynchronous function that returns a `Promise<number>`.

3. **Loading Image**: The `loadImage` function from the `canvas` library is used to load the image asynchronously.

4. **Drawing Image on Canvas**: Once the image is loaded, it is drawn onto the canvas with its original dimensions.

5. **Getting Image Data**: The `getImageData` method retrieves the pixel data of the image.

6. **Iterating Through Pixels**: Each pixel's RGBA values are extracted and converted into a string representation (`"rgba(r,g,b,a)"`). This string is then added to a `Set` to ensure uniqueness.

7. **Returning Unique Color Count**: Finally, the size of the `Set` (which contains only unique colors) is returned.

8. **Example Usage**: An example usage is provided to demonstrate how to call the function and handle any potential errors.

This TypeScript code should work similarly to your original Python function but adapted for TypeScript syntax and asynchronous operations.