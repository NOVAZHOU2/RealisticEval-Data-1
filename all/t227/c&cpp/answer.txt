Hereâ€™s the equivalent C++ code for counting the number of unique colors in an image, using the C++ standard library and the `stb_image` library for image loading and manipulation:

First, you need to include the `stb_image.h` header. You can download it from [here](https://github.com/nothings/stb/blob/master/stb_image.h) and place it in your project directory.

```cpp
#include <iostream>
#include <set>
#include <vector>
#include <string>
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

// Function to count the number of unique colors in an image
int count_unique_colors(const std::string& image_path) {
    // Load the image
    int width, height, channels;
    unsigned char* data = stbi_load(image_path.c_str(), &width, &height, &channels, 3);

    if (!data) {
        std::cerr << "Failed to load image." << std::endl;
        return 0;
    }

    std::set<std::vector<unsigned char>> unique_colors;

    // Iterate through each pixel
    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            unsigned char r = data[(y * width + x) * 3 + 0];
            unsigned char g = data[(y * width + x) * 3 + 1];
            unsigned char b = data[(y * width + x) * 3 + 2];

            // Store the color in a vector
            std::vector<unsigned char> color = {r, g, b};
            unique_colors.insert(color);
        }
    }

    // Free the loaded image data
    stbi_image_free(data);

    // Return the number of unique colors
    return unique_colors.size();
}

int main() {
    std::string image_path = "path/to/your/image.jpg";
    int num_unique_colors = count_unique_colors(image_path);
    std::cout << "Number of unique colors: " << num_unique_colors << std::endl;

    return 0;
}
```

### Explanation:
1. **Image Loading**: The `stbi_load` function from the `stb_image` library is used to load the image data into memory. It returns a pointer to the image data, along with the width, height, and number of color channels.
2. **Color Extraction**: A nested loop iterates through each pixel in the image, extracting the red, green, and blue components.
3. **Unique Colors**: A `std::set` is used to store unique colors. Each color is represented as a `std::vector<unsigned char>` containing the RGB values.
4. **Error Handling**: If the image fails to load, an error message is printed, and the function returns 0.
5. **Memory Management**: The `stbi_image_free` function is called to free the allocated image data after processing.

This code provides the same functionality as the Python version but adapted to C++ syntax and libraries.