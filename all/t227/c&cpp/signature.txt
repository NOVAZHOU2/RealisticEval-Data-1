Certainly! Here is the equivalent C++ code for the given Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <set>
#include <vector>
#include <string>
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

/**
 * Count the number of unique colors in an image.
 *
 * @param image_path The path to the image file.
 * @return The number of unique colors in the image.
 */
int count_unique_colors(const std::string& image_path) {
    // Load the image
    int width, height, channels;
    unsigned char* data = stbi_load(image_path.c_str(), &width, &height, &channels, 3);

    if (!data) {
        std::cerr << "Failed to load image." << std::endl;
        return 0;
    }

    std::set<std::vector<unsigned char>> unique_colors;

    // Iterate through each pixel
    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            unsigned char r = data[(y * width + x) * 3 + 0];
            unsigned char g = data[(y * width + x) * 3 + 1];
            unsigned char b = data[(y * width + x) * 3 + 2];

            // Store the color in a vector
            std::vector<unsigned char> color = {r, g, b};
            unique_colors.insert(color);
        }
    }

    // Free the loaded image data
    stbi_image_free(data);

    // Return the number of unique colors
    return unique_colors.size();
}

int main() {
    std::string image_path = "path/to/your/image.jpg";
    int num_unique_colors = count_unique_colors(image_path);
    std::cout << "Number of unique colors: " << num_unique_colors << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `count_unique_colors` is translated to a C++ function with the same name and parameters.
   - The parameter `image_path` is passed by reference (`const std::string&`) to avoid unnecessary copying.

2. **Documentation Comments**:
   - The Python docstring is converted to a C++ multi-line comment block (`/* ... */`) with appropriate parameter and return value descriptions.

3. **Single-Line Comments**:
   - Single-line comments are prefixed with `//`.

4. **Image Loading**:
   - The `stbi_load` function is used to load the image data into memory.
   - Error handling is included to check if the image loads successfully.

5. **Color Extraction**:
   - A nested loop iterates through each pixel, extracting the red, green, and blue components.
   - Each color is stored in a `std::vector<unsigned char>` and inserted into a `std::set` to ensure uniqueness.

6. **Memory Management**:
   - The `stbi_image_free` function is called to free the allocated image data after processing.

7. **Main Function**:
   - A simple `main` function demonstrates how to call `count_unique_colors` and print the result.

This code preserves the original functionality and structure of the Python code while adhering to C++ best practices and documentation standards.