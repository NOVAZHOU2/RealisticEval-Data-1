Here’s the equivalent test class using Jest, along with explanations of any necessary changes due to language differences:

### JavaScript (Jest) Version

```javascript
const isValidEmail = require('./path/to/your/module'); // Adjust the path as needed

describe('Email Validation Tests', () => {
    
    test('Valid email 1', () => {
        expect(isValidEmail("example@test.com")).toBe(true);
    });

    test('Valid email 2', () => {
        expect(isValidEmail("user.name+tag+sorting@example.com")).toBe(true);
    });

    test('Valid email 3', () => {
        expect(isValidEmail("user@subdomain.example.com")).toBe(true);
    });

    test('Invalid email 1', () => {
        expect(isValidEmail("invalid-email@.com")).toBe(false);
    });

    test('Invalid email 2', () => {
        expect(isValidEmail("invalid@domain@domain.com")).toBe(false);
    });

    test('Null email', () => {
        expect(isValidEmail(null)).toBe(false);
    });

});
```

### Key Changes and Documentation

1. **Importing Functions**: In Jest, you typically import the function being tested. Adjust the path according to your file structure.

2. **Test Structure**: Instead of a class, Jest uses a `describe` block to group tests. Each individual test case is defined using the `test` function.

3. **Assertions**: 
   - In Python's `unittest`, assertions like `self.assertTrue()` and `self.assertFalse()` are used. 
   - In Jest, you use `expect(...).toBe(...)` to assert values.

4. **No Setup Method**: If there are no setup requirements (like `setUp` in `unittest`), you don’t need a specific setup phase in Jest.

5. **Null vs. None**: In JavaScript, you check for `null` directly, similar to checking for `None` in Python.

This conversion maintains the same logic and assertions as the original Python tests while adapting to JavaScript syntax and Jest conventions.