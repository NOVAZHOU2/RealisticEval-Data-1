Hereâ€™s the equivalent Jest test class in TypeScript for the provided Python `unittest` code, preserving the functionality and logic while adapting to TypeScript's syntax and Jest's assertion methods:

```typescript
import { isValidEmail } from './path-to-your-function'; // Adjust the import path accordingly

describe('TestValidEmail', () => {
    test('valid email 1', () => {
        expect(isValidEmail("example@test.com")).toBe(true);
    });

    test('valid email 2', () => {
        expect(isValidEmail("user.name+tag+sorting@example.com")).toBe(true);
    });

    test('valid email 3', () => {
        expect(isValidEmail("user@subdomain.example.com")).toBe(true);
    });

    test('invalid email 1', () => {
        expect(isValidEmail("invalid-email@.com")).toBe(false);
    });

    test('invalid email 2', () => {
        expect(isValidEmail("invalid@domain@domain.com")).toBe(false);
    });

    test('null email', () => {
        expect(isValidEmail(null)).toBe(false);
    });
});
```

### Key Adjustments:
1. **Import Statement**: Adjust the import path to point to where your `isValidEmail` function is defined.
2. **Test Structure**: Converted the `unittest.TestCase` structure to Jest's `describe` and `test` functions.
3. **Assertions**: Replaced `self.assertTrue` and `self.assertFalse` with Jest's `expect(...).toBe(...)` assertions.
4. **TypeScript Compatibility**: Type annotations and null handling in TypeScript are inherently managed, so we directly check for `null` in the last test.