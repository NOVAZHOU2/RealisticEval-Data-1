Here's the equivalent C++ test class using the Catch2 framework, converting the provided Python unittest test class:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>
#include <algorithm>

std::string generate_random_string(); // Declaration of the function to be tested

TEST_CASE("Test Generate Random String") {

    SECTION("Test length") {
        std::string random_string = generate_random_string();
        REQUIRE(random_string.length() == 25);
    }

    SECTION("Test contains upper case") {
        std::string random_string = generate_random_string();
        bool has_upper_case = std::any_of(random_string.begin(), random_string.end(), [](char c) {
            return std::isupper(static_cast<unsigned char>(c));
        });
        REQUIRE(has_upper_case);
    }

    SECTION("Test contains lower case") {
        std::string random_string = generate_random_string();
        bool has_lower_case = std::any_of(random_string.begin(), random_string.end(), [](char c) {
            return std::islower(static_cast<unsigned char>(c));
        });
        REQUIRE(has_lower_case);
    }

    SECTION("Test randomness") {
        std::string string1 = generate_random_string();
        std::string string2 = generate_random_string();
        REQUIRE(string1 != string2);
    }

    SECTION("Test multiple generations") {
        const int num_tests = 100;
        bool has_upper_case = false;
        bool has_lower_case = false;

        for (int i = 0; i < num_tests; ++i) {
            std::string random_string = generate_random_string();
            has_upper_case |= std::any_of(random_string.begin(), random_string.end(), [](char c) {
                return std::isupper(static_cast<unsigned char>(c));
            });
            has_lower_case |= std::any_of(random_string.begin(), random_string.end(), [](char c) {
                return std::islower(static_cast<unsigned char>(c));
            });
        }

        REQUIRE(has_upper_case);
        REQUIRE(has_lower_case);
    }
}
```

### Explanation:

1. **Includes**: The `catch2/catch.hpp` header is included to access the Catch2 testing framework functionalities.

2. **Function Declaration**: The `generate_random_string` function is declared at the top to ensure it can be tested.

3. **TEST_CASE**: The `TEST_CASE` macro defines a test suite named "Test Generate Random String". Each test corresponds to a `SECTION`.

4. **Assertions**: 
   - `REQUIRE` is used for assertions, similar to `assertEqual` and `assertTrue` in Python.
   - C++ requires `static_cast<unsigned char>(c)` when using functions like `std::isupper` and `std::islower` to avoid potential issues with negative character values.

5. **Logic Preservation**: The logic of the tests is preserved, ensuring that each test checks the same conditions as in the original Python code. Each test case checks the specified conditions and requirements for the generated random string.