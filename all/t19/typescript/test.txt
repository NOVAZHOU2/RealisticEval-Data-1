Sure! Below is the equivalent TypeScript test case using Jest for the given Python unittest function `contains_phone_number`.

First, let's define the function in TypeScript:

```typescript
function containsPhoneNumber(s: string): boolean {
    const phoneNumberRegex = /\+?\d{1,3}-?\d{3}-?\d{3}-?\d{4}/;
    return phoneNumberRegex.test(s);
}
```

Now, let's write the Jest test cases for this function:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('containsPhoneNumber', () => {
    it('should return true if the string contains a valid phone number (+1-800-555-1234)', () => {
        expect(containsPhoneNumber('+1-800-555-1234')).toBe(true);
    });

    it('should return true if the string contains a valid phone number (555-555-1234)', () => {
        expect(containsPhoneNumber('555-555-1234')).toBe(true);
    });

    it('should return true if the string contains a valid phone number (555 555 1234)', () => {
        expect(containsPhoneNumber('555 555 1234')).toBe(true);
    });

    it('should return false if the string does not contain a valid phone number', () => {
        expect(containsPhoneNumber('This is a test string without a phone number')).toBe(false);
    });
});
```

### Explanation:
1. **Function Definition**: The `containsPhoneNumber` function uses a regular expression to check if the input string contains a valid phone number.
2. **Jest Test Suite**:
   - `describe`: Groups related tests together.
   - `it`: Defines individual test cases.
   - `expect`: Asserts that the result of the function matches the expected value.

These test cases cover different scenarios, including valid and invalid phone numbers, ensuring that the function behaves as expected.