Certainly! Hereâ€™s the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`.

### Java Code Using JUnit

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

public class Tester {

    @Test
    public void testWithInternationalPrefix() {
        assertTrue("Should detect international prefix", containsPhoneNumber("+1-800-555-1234"));
    }

    @Test
    public void testWithStandardDashes() {
        assertTrue("Should detect standard format with dashes", containsPhoneNumber("800-555-1234"));
    }

    @Test
    public void testWithSpaces() {
        assertTrue("Should detect standard format with spaces", containsPhoneNumber("800 555 1234"));
    }

    @Test
    public void testWithoutPhoneNumber() {
        assertFalse("Should not detect any phone number", containsPhoneNumber("Hello, world!"));
    }

    @Test
    public void testWithTextContainingNumbers() {
        assertTrue("Should detect phone number in text", containsPhoneNumber("Call me at 800-555-1234 today!"));
    }

    // Method to be tested
    private static boolean containsPhoneNumber(String s) {
        // Regex pattern to identify phone numbers
        String pattern = "(\\+\\d{1,3}[- ]?)?(\\d{3}[- ]\\d{3}[- ]\\d{4})";

        // Compile the regex pattern
        Pattern compiledPattern = Pattern.compile(pattern);

        // Create a matcher for the input string
        Matcher matcher = compiledPattern.matcher(s);

        // Check if the matcher finds a match
        return matcher.find();
    }
}
```

### Explanation:
1. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.
2. **Assertions**: JUnit assertions such as `assertTrue` and `assertFalse` are used to verify the expected behavior.
3. **Method Naming**: The test method names are descriptive and follow Java naming conventions.
4. **Static Import**: The `import static org.junit.Assert.*;` statement allows us to use `assertTrue` and `assertFalse` directly without qualifying them with `Assert.`.
5. **Method to Be Tested**: The `containsPhoneNumber` method is included within the test class for completeness. In a real-world scenario, this method would typically be in a separate utility class or service class.

### Running the Tests
To run these tests, you can use a build tool like Maven or Gradle, or an IDE like IntelliJ IDEA or Eclipse.

#### Example Maven Configuration
If you are using Maven, you can add the following dependencies to your `pom.xml` file:

```xml
<dependencies>
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.13.2</version>
        <scope>test</scope>
    </dependency>
</dependencies>
```

Then, you can run the tests using the command:

```sh
mvn test
```

This setup ensures that the tests are executed and the results are displayed in the console.