Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will ensure that the functionality and logic of the tests are maintained, and I will document any necessary changes due to language differences between Python and JavaScript.

### Python Code:
```python
import re
import unittest

class TestPhoneNumberDetection(unittest.TestCase):
    def test_with_international_prefix(self):
        self.assertTrue(contains_phone_number("+1-800-555-1234"), "Should detect international prefix")

    def test_with_standard_dashes(self):
        self.assertTrue(contains_phone_number("800-555-1234"), "Should detect standard format with dashes")

    def test_with_spaces(self):
        self.assertTrue(contains_phone_number("800 555 1234"), "Should detect standard format with spaces")

    def test_without_phone_number(self):
        self.assertFalse(contains_phone_number("Hello, world!"), "Should not detect any phone number")

    def test_with_text_containing_numbers(self):
        self.assertTrue(contains_phone_number("Call me at 800-555-1234 today!"), "Should detect phone number in text")
```

### JavaScript Code with Jest Testing Framework:

```javascript
const containsPhoneNumber = require('./containsPhoneNumber');

describe('TestPhoneNumberDetection', () => {
    it('should detect international prefix', () => {
        expect(containsPhoneNumber('+1-800-555-1234')).toBe(true);
    });

    it('should detect standard format with dashes', () => {
        expect(containsPhoneNumber('800-555-1234')).toBe(true);
    });

    it('should detect standard format with spaces', () => {
        expect(containsPhoneNumber('800 555 1234')).toBe(true);
    });

    it('should not detect any phone number', () => {
        expect(containsPhoneNumber('Hello, world!')).toBe(false);
    });

    it('should detect phone number in text', () => {
        expect(containsPhoneNumber('Call me at 800-555-1234 today!')).toBe(true);
    });
});
```

### Explanation:
1. **Importing the Function**:
   - In JavaScript, we need to import the `containsPhoneNumber` function from the file where it is defined. This is done using `require` or `import` depending on the module system being used.

2. **Describe Block**:
   - The `describe` block in Jest is used to group related tests together. It takes a name and a callback function containing the tests.

3. **It Blocks**:
   - Each `it` block represents a single test case. It takes a description and a callback function containing the assertions.

4. **Assertions**:
   - Jest uses `expect` for assertions. We use `expect(containsPhoneNumber(s)).toBe(true)` to assert that the function returns `true` for valid phone numbers.
   - Similarly, `expect(containsPhoneNumber(s)).toBe(false)` is used to assert that the function returns `false` for invalid cases.

5. **Example Usage**:
   - Each test case is clearly described and the expected behavior is documented using the message passed to the `it` function.

### File Structure:
- Ensure that the `containsPhoneNumber` function is exported from a separate file (e.g., `containsPhoneNumber.js`).

### `containsPhoneNumber.js`:
```javascript
/**
 * Determines whether the string contains a phone number. Possible formats for a phone number include +1-800-555-1234, 555-555-1234, and 555 555 1234.
 * @param {string} s - The input string that may contain a phone number.
 * @returns {boolean} - Whether the string contains a phone number.
 */
function containsPhoneNumber(s) {
    // Regex pattern to identify phone numbers
    const pattern = /(\+\d{1,3}[- ]?)?(\d{3}[- ]\d{3}[- ]\d{4})/;
    // Use RegExp test method to find a match
    return pattern.test(s);
}

module.exports = containsPhoneNumber;
```

### Summary:
- The Jest test suite maintains the same functionality and logic as the Python unittest class.
- All assertions are mapped appropriately using Jest's `expect` and `toBe` functions.
- The structure is clear and follows best practices for Jest testing.