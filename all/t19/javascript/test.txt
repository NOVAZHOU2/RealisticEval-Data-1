Certainly! Below is the equivalent JavaScript test case using Jest:

```javascript
// Assuming you have a function called containsPhoneNumber that performs the same logic as your Python function

function containsPhoneNumber(s) {
    // Regular expression to match phone numbers in the specified formats
    const phoneNumberRegex = /^(?:\+1[- ]?)?(\d{3})[- .]?\d{3}[- .]?\d{4}$/;
    return phoneNumberRegex.test(s);
}

// Test cases using Jest
const { describe, it, expect } = require('@jest/globals');

describe('containsPhoneNumber', () => {
    it('should return true if the string contains a valid phone number (+1-800-555-1234)', () => {
        expect(containsPhoneNumber('+1-800-555-1234')).toBe(true);
    });

    it('should return true if the string contains a valid phone number (555-555-1234)', () => {
        expect(containsPhoneNumber('555-555-1234')).toBe(true);
    });

    it('should return true if the string contains a valid phone number (555 555 1234)', () => {
        expect(containsPhoneNumber('555 555 1234')).toBe(true);
    });

    it('should return false if the string does not contain a valid phone number', () => {
        expect(containsPhoneNumber('Hello World')).toBe(false);
        expect(containsPhoneNumber('555-abc-1234')).toBe(false);
        expect(containsPhoneNumber('5555551234')).toBe(false);
    });
});
```

### Explanation:
1. **Regular Expression**: The `phoneNumberRegex` is used to match phone numbers in the specified formats.
2. **Test Cases**:
   - Each `it` block represents a single test case.
   - `expect(containsPhoneNumber(...)).toBe(true)` checks if the function returns `true` when given a valid phone number.
   - `expect(containsPhoneNumber(...)).toBe(false)` checks if the function returns `false` when given an invalid phone number or non-phone text.

Make sure to install Jest if you haven't already:

```bash
npm install --save-dev jest
```

Then run your tests with:

```bash
npx jest
```