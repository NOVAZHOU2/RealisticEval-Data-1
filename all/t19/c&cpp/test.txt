Certainly! Below is the equivalent C++ test case using Catch2 for the provided Python unittest function `contains_phone_number`. Note that the actual implementation of `contains_phone_number` in C++ would need to be provided or assumed based on the context.

First, ensure you have Catch2 installed and set up in your project. If you're using CMake, you can add Catch2 as a subdirectory:

```cmake
add_subdirectory(path/to/catch2)
```

Then, create a C++ test file (e.g., `test_contains_phone_number.cpp`) with the following content:

```cpp
#include <catch2/catch.hpp>
#include <string>

// Assuming contains_phone_number is implemented somewhere in your project
bool contains_phone_number(const std::string& s);

TEST_CASE("Contains Phone Number", "[phone]") {
    REQUIRE(contains_phone_number("+1-800-555-1234") == true);
    REQUIRE(contains_phone_number("555-555-1234") == true);
    REQUIRE(contains_phone_number("555 555 1234") == true);
    REQUIRE(contains_phone_number("This is not a phone number") == false);
    REQUIRE(contains_phone_number("") == false);
}
```

In this example:
- The `TEST_CASE` macro defines a new test case named "Contains Phone Number".
- The `REQUIRE` macro is used to assert that the `contains_phone_number` function returns the expected results for various inputs.
- Replace the `contains_phone_number` function with the actual implementation if it's different from what you intended.

To run the tests, compile your test file along with any other source files and link against Catch2. For example, using g++ and CMake:

```sh
mkdir build && cd build
cmake ..
make
./tests
```

This will execute the tests and output the results.