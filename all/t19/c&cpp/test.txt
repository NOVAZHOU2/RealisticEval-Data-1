Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro for each test case.

Hereâ€™s the C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <regex>

// Function to check if the string contains a phone number
// Possible formats for a phone number are: +1-800-555-1234, 555-555-1234, 555 555 1234
// Args:
//     s (std::string): Input string that may contain a phone number
// Returns:
//     bool: Whether the string contains a phone number
bool contains_phone_number(const std::string& s) {
    // Regex pattern to identify phone numbers
    std::regex pattern(R"((\+\d{1,3}[- ]?)?(\d{3}[- ]\d{3}[- ]\d{4}))");

    // Use std::regex_search to find a match
    return std::regex_search(s, pattern);
}

TEST_CASE("Test PhoneNumber Detection", "[PhoneNumberDetection]") {
    SECTION("with international prefix") {
        REQUIRE(contains_phone_number("+1-800-555-1234"));
    }

    SECTION("with standard dashes") {
        REQUIRE(contains_phone_number("800-555-1234"));
    }

    SECTION("with spaces") {
        REQUIRE(contains_phone_number("800 555 1234"));
    }

    SECTION("without phone number") {
        REQUIRE_FALSE(contains_phone_number("Hello, world!"));
    }

    SECTION("with text containing numbers") {
        REQUIRE(contains_phone_number("Call me at 800-555-1234 today!"));
    }
}
```

### Explanation:
1. **Header Files**: Include the necessary headers (`<catch2/catch_test_macros.hpp>`, `<string>`, `<regex>`).
2. **Function Definition**: The `contains_phone_number` function is defined with a regex pattern and uses `std::regex_search` to find matches.
3. **Test Suite**: The `TEST_CASE` macro defines the test suite named "Test PhoneNumber Detection".
4. **Sections**: Each `SECTION` corresponds to a specific test case from the Python unittest class.
5. **Assertions**:
   - `REQUIRE` is used to assert that a condition is true.
   - `REQUIRE_FALSE` is used to assert that a condition is false.

This C++ code preserves the functionality and logic of the original Python unittest class, ensuring that all test cases are properly implemented and tested using Catch2.