Certainly! Below is the equivalent C++ code that preserves the original purpose and structure of the Python code, including comments and documentation:

```cpp
#include <iostream>
#include <regex>
#include <string>

// Function to check if the string contains a phone number
// Possible formats for a phone number are: +1-800-555-1234, 555-555-1234, 555 555 1234
// Args:
//     s (std::string): Input string that may contain a phone number
// Returns:
//     bool: Whether the string contains a phone number
bool contains_phone_number(const std::string& s) {
    // Regex pattern to identify phone numbers
    std::regex pattern(R"((\+\d{1,3}[- ]?)?(\d{3}[- ]\d{3}[- ]\d{4}))");

    // Use std::regex_search to find a match
    return std::regex_search(s, pattern);
}

int main() {
    // Test the function with some example strings
    std::string test_strings[] = {"+1-800-555-1234", "555-555-1234", "555 555 1234", "No phone number here"};

    for (const auto& s : test_strings) {
        std::cout << "'" << s << "' contains a phone number: " 
                  << (contains_phone_number(s) ? "True" : "False") << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary headers (`<iostream>`, `<regex>`, `<string>`) are included.
2. **Function Documentation**: The function `contains_phone_number` is documented with C++ style comments.
3. **Function Definition**: The function takes a `std::string` as input and returns a `bool` indicating whether the string contains a phone number.
4. **Regex Pattern**: The regex pattern is defined using `std::regex` with a raw string literal `R"(...)"`.
5. **Search Function**: `std::regex_search` is used to search for a match within the string.
6. **Main Function**: A simple `main` function is provided to test the `contains_phone_number` function with various strings.

This C++ code preserves the original purpose and structure of the Python code, including the comments and documentation.