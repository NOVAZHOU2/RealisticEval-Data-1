Sure, here's how you might translate that Python function into C and C++:

**C Code:**
```c
#include <stdio.h>
#include <string.h>

int contains_phone_number(char *s) {
    // Define patterns for phone numbers
    char pattern1[] = "+1-800-555-1234";
    char pattern2[] = "555-555-1234";
    char pattern3[] = "555 555 1234";

    if(strstr(s, pattern1) != NULL || strstr(s, pattern2) != NULL || strstr(s, pattern3) != NULL)
        return 1;
    else
        return 0;
}

int main() {
    char str[] = "Call us at +1-800-555-1234 or 555-555-1234.";
    
    if(contains_phone_number(str))
        printf("The string contains a phone number.\n");
    else
        printf("The string does not contain a phone number.\n");

    return 0;
}
```

**C++ Code:**
```cpp
#include <iostream>
#include <string>
#include <algorithm>

bool contains_phone_number(const std::string &s) {
    // Define patterns for phone numbers
    std::string pattern1 = "+1-800-555-1234";
    std::string pattern2 = "555-555-1234";
    std::string pattern3 = "555 555 1234";

    if(s.find(pattern1) != std::string::npos || s.find(pattern2) != std::string::npos || s.find(pattern3) != std::string::npos)
        return true;
    else
        return false;
}

int main() {
    std::string str = "Call us at +1-800-555-1234 or 555-555-1234.";

    if(contains_phone_number(str))
        std::cout << "The string contains a phone number." << std::endl;
    else
        std::cout << "The string does not contain a phone number." << std::endl;

    return 0;
}
```
In both versions of the code, we're checking for the presence of three specific phone number formats within a given string. The `strstr` function in C and the `find` method in C++ are used to search for these substrings. If any of them are found, the function returns `true`, otherwise it returns `false`.