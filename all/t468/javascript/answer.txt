Sure! Below is the equivalent JavaScript code that replicates the functionality of the provided Python code. The JavaScript version will use the `mathjs` library to handle matrix operations, as it provides similar functionalities to NumPy in Python.

First, you need to install the `mathjs` library if you haven't already:

```bash
npm install mathjs
```

Now, here's the JavaScript code:

```javascript
const math = require('mathjs');

/**
 * Given a 3x3 matrix, return the corresponding translation vector.
 *
 * @param {Array<Array<number>>} matrix - A 3x3 affine transformation matrix.
 * @returns {Array<number>} A 2-element array containing the translation components (translation_x, translation_y).
 */
function getTranslation(matrix) {
    // Ensure the matrix is a 3x3 array
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => !Array.isArray(row) || row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Convert the input matrix to a mathjs matrix for easier manipulation
    const matrixMathjs = math.matrix(matrix);

    // Extract the translation components from the matrix
    const translation = math.subset(matrixMathjs, math.index(math.range(0, 2), 2));

    // Convert the translation back to an array and ensure the elements are numbers
    const translationArray = math.eval(math.stringify(translation)).map(value => Number(value));

    return translationArray;
}

// Example usage
const matrix = [
    [1, 0, 5],
    [0, 1, 3],
    [0, 0, 1]
];

console.log(getTranslation(matrix));  // Output: [5, 3]
```

### Explanation:
1. **Importing `mathjs`**: The `mathjs` library is used to handle matrix operations.
2. **Function Definition**: The `getTranslation` function takes a 3x3 matrix as input and returns the translation components.
3. **Validation**: The function checks if the input is a valid 3x3 matrix.
4. **Matrix Conversion**: The input matrix is converted to a `mathjs` matrix for easier manipulation.
5. **Extracting Translation Components**: The translation components are extracted using the `math.subset` method.
6. **Conversion to Array**: The extracted translation components are converted back to an array and cast to numbers to ensure the correct data type.

This JavaScript code should provide the same functionality as the original Python code.