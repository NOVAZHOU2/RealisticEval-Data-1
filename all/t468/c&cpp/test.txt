Certainly! Below is the equivalent C++ code using the Catch2 testing framework to replicate the functionality and logic of the provided Python unittest class.

### Python Code:

```python
import numpy as np


def get_translation(matrix: np.ndarray) -> np.ndarray:
    """
    Given a 3x3 matrix, return the corresponding translation vector.

    Args:
        matrix (np.ndarray): A 3x3 affine transformation matrix.

    Returns:
        np.ndarray: A 2-element array containing the translation components (translation_x, translation_y).
    """
    if not isinstance(matrix, np.ndarray) or matrix.shape != (3, 3):
        raise ValueError("Input must be a 3x3 affine transformation matrix.")

    translation = matrix[:2, 2]
    return translation.astype(np.float64)


import unittest


class TestTranslation(unittest.TestCase):

    def test_get_translation(self):
        matrix = np.array([
            [1, 0, 10],
            [0, 1, 20],
            [0, 0, 1]
        ])
        expected_translation = np.array([10, 20], dtype=np.float64)
        result = get_translation(matrix)
        np.testing.assert_array_almost_equal(result, expected_translation)

    def test_invalid_matrix(self):
        matrix = np.array([
            [1, 0, 10],
            [0, 1, 20]
        ])
        with self.assertRaises(ValueError):
            get_translation(matrix)


if __name__ == '__main__':
    unittest.main()
```

### Equivalent C++ Code Using Catch2:

First, make sure you have the Catch2 library installed. You can include it via a package manager or download it directly.

#### CMake Setup (if using CMake):

```cmake
cmake_minimum_required(VERSION 3.10)
project(TranslationTests)

# Add Catch2
find_package(Catch2 REQUIRED)

# Add executable
add_executable(TranslationTests main.cpp test_translation.cpp)
target_link_libraries(TranslationTests PRIVATE Catch2::Catch2)
```

#### Main File (`main.cpp`):

```cpp
#include "test_translation.h"

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

#### Test File (`test_translation.cpp`):

```cpp
#include <catch2/catch_test_macros.hpp>
#include <Eigen/Dense>

// Function to extract the translation vector from a 3x3 affine transformation matrix
Eigen::Matrix<double, 2, 1> get_translation(const Eigen::Matrix3d& matrix) {
    // Ensure the input matrix is a 3x3 matrix
    if (matrix.rows() != 3 || matrix.cols() != 3) {
        throw std::invalid_argument("Input must be a 3x3 affine transformation matrix.");
    }

    // Extract the translation components from the matrix
    Eigen::Matrix<double, 2, 1> translation;
    translation << matrix(0, 2), matrix(1, 2);

    return translation;
}

TEST_CASE("Test get_translation function", "[translation]") {
    SECTION("Test valid matrix") {
        Eigen::Matrix3d matrix;
        matrix << 1, 0, 10,
                  0, 1, 20,
                  0, 0, 1;

        Eigen::Matrix<double, 2, 1> expected_translation;
        expected_translation << 10, 20;

        REQUIRE(get_translation(matrix) == expected_translation);
    }

    SECTION("Test invalid matrix") {
        Eigen::MatrixXd invalid_matrix(2, 3);
        invalid_matrix << 1, 0, 10,
                          0, 1, 20;

        REQUIRE_THROWS_AS(get_translation(invalid_matrix), std::invalid_argument);
    }
}
```

### Explanation:
1. **Imports**:
   - `#include <catch2/catch_test_macros.hpp>`: Includes the Catch2 test macros.
   - `#include <Eigen/Dense>`: Includes the Eigen library for matrix operations.

2. **Function Definition**:
   - `get_translation`: This function takes a `Eigen::Matrix3d` (a 3x3 double precision matrix) as input and returns a `Eigen::Matrix<double, 2, 1>` (a 2x1 double precision column vector).

3. **Test Class**:
   - `TEST_CASE`: Defines a test case named "Test get_translation function".
   - `SECTION`: Defines sections within the test case for different scenarios.

4. **Valid Matrix Test**:
   - `SECTION("Test valid matrix")`: Tests the function with a valid 3x3 matrix and checks if the returned translation matches the expected translation.

5. **Invalid Matrix Test**:
   - `SECTION("Test invalid matrix")`: Tests the function with an invalid matrix and checks if it throws the expected exception (`std::invalid_argument`).

6. **Main Function**:
   - `main`: Entry point for running the tests using Catch2.

This conversion preserves the functionality and logic of the Python unittest class in C++ using Catch2.