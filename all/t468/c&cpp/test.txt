Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. We will ensure that the functionality and logic of the tests are preserved, and we will use appropriate assertions in Catch2.

First, make sure you have Catch2 included in your project. You can include it using the following directive:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <Eigen/Dense>
```

Here is the complete C++ test class:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <Eigen/Dense>
#include <stdexcept>

// Function to extract the translation vector from a 3x3 affine transformation matrix
Eigen::Matrix<double, 2, 1> get_translation(const Eigen::Matrix3d& matrix) {
    // Ensure the matrix is a 3x3 Eigen matrix
    if (matrix.rows() != 3 || matrix.cols() != 3) {
        throw std::invalid_argument("Input must be a 3x3 affine transformation matrix.");
    }

    // Extract the translation components from the matrix
    Eigen::Matrix<double, 2, 1> translation;
    translation << matrix(0, 2), matrix(1, 2);

    return translation;
}

TEST_CASE("Test GetTranslationFunction", "[get_translation]") {
    SECTION("Identity Matrix") {
        Eigen::Matrix3d matrix;
        matrix << 1, 0, 0,
                  0, 1, 0,
                  0, 0, 1;

        Eigen::Matrix<double, 2, 1> expected_translation = Eigen::Matrix<double, 2, 1>::Zero();
        REQUIRE(get_translation(matrix) == expected_translation);
    }

    SECTION("Translation Matrix") {
        Eigen::Matrix3d matrix;
        matrix << 1, 0, 5,
                  0, 1, 10,
                  0, 0, 1;

        Eigen::Matrix<double, 2, 1> expected_translation;
        expected_translation << 5.0, 10.0;
        REQUIRE(get_translation(matrix) == expected_translation);
    }

    SECTION("Negative Translation") {
        Eigen::Matrix3d matrix;
        matrix << 1, 0, -3,
                  0, 1, -6,
                  0, 0, 1;

        Eigen::Matrix<double, 2, 1> expected_translation;
        expected_translation << -3.0, -6.0;
        REQUIRE(get_translation(matrix) == expected_translation);
    }
}
```

### Explanation:
1. **Include Catch2**: The `#include <catch2/catch_test_macros.hpp>` directive includes the necessary Catch2 headers.
2. **Include Eigen**: The `#include <Eigen/Dense>` directive includes the necessary Eigen headers for matrix operations.
3. **Function Definition**: The `get_translation` function is defined as before, taking a `Eigen::Matrix3d` as input and returning a `Eigen::Matrix<double, 2, 1>` representing the translation vector.
4. **Test Class**: The `TEST_CASE` macro defines a test case named "Test GetTranslationFunction" with the tag `[get_translation]`.
5. **Sections**: Each `SECTION` within the test case corresponds to a specific test scenario.
   - **Identity Matrix**: Tests the identity matrix with no translation.
   - **Translation Matrix**: Tests a matrix with positive translation values.
   - **Negative Translation**: Tests a matrix with negative translation values.
6. **Assertions**: The `REQUIRE` macro is used to assert that the result of `get_translation` matches the expected translation vector.

This code ensures that the functionality and logic of the original Python tests are preserved while adapting to the syntax and features of C++ and the Catch2 testing framework. The comments and documentation are also appropriately translated to adhere to C++ standards.