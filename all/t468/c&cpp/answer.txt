Certainly! Below is the equivalent C++ code for the provided Python function. This code includes the necessary imports, type declarations, and logic to achieve the same functionality:

```cpp
#include <iostream>
#include <Eigen/Dense>  // Eigen library for matrix operations

// Function to extract the translation vector from a 3x3 affine transformation matrix
Eigen::Matrix<double, 2, 1> get_translation(const Eigen::Matrix3d& matrix) {
    // Ensure the input matrix is a 3x3 matrix
    if (matrix.rows() != 3 || matrix.cols() != 3) {
        throw std::invalid_argument("Input must be a 3x3 affine transformation matrix.");
    }

    // Extract the translation components from the matrix
    Eigen::Matrix<double, 2, 1> translation;
    translation << matrix(0, 2), matrix(1, 2);

    return translation;
}

int main() {
    try {
        // Example usage
        Eigen::Matrix3d matrix;
        matrix << 1, 0, 10,
                  0, 1, 20,
                  0, 0, 1;

        Eigen::Matrix<double, 2, 1> translation = get_translation(matrix);
        std::cout << "Translation vector: (" << translation(0) << ", " << translation(1) << ")" << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Imports**:
   - `#include <iostream>`: For basic I/O operations.
   - `#include <Eigen/Dense>`: The Eigen library provides efficient matrix operations and is used here to handle the matrix and vector operations.

2. **Function Definition**:
   - `get_translation`: This function takes a `Eigen::Matrix3d` (a 3x3 double precision matrix) as input and returns a `Eigen::Matrix<double, 2, 1>` (a 2x1 double precision column vector).

3. **Type Checking**:
   - The function checks if the input matrix is a 3x3 matrix using the `rows()` and `cols()` methods. If not, it throws a `std::invalid_argument`.

4. **Extracting Translation Components**:
   - The translation components are extracted from the third column of the input matrix using `matrix(0, 2)` and `matrix(1, 2)`.

5. **Example Usage in `main`**:
   - An example 3x3 matrix is defined.
   - The `get_translation` function is called with this matrix, and the resulting translation vector is printed.

This C++ code ensures that the functionality remains consistent with the original Python code, handling the matrix operations and type checking appropriately.