Sure! Below is the equivalent C++ code for the provided Python function `get_translation`. This code assumes that you have access to a library like Eigen for handling matrices and vectors.

```cpp
#include <iostream>
#include <Eigen/Dense>

// Function to extract the translation part from a 3x3 affine transformation matrix
Eigen::Vector2d getTranslation(const Eigen::Matrix3d& matrix) {
    // Extract the translation vector from the last column of the matrix
    Eigen::Vector2d translation = matrix.block(0, 2, 3, 1).topRows<2>();
    return translation;
}

int main() {
    // Example usage
    Eigen::Matrix3d matrix;
    matrix << 1, 0, 2,
              0, 1, 3,
              0, 0, 1;

    Eigen::Vector2d translation = getTranslation(matrix);
    std::cout << "Translation: (" << translation.x() << ", " << translation.y() << ")" << std::endl;

    return 0;
}
```

### Explanation:
1. **Include Necessary Headers**: We include `<iostream>` for input/output operations and `<Eigen/Dense>` for using Eigen's matrix and vector types.
2. **Function Definition**: The function `getTranslation` takes an `Eigen::Matrix3d` as input and returns an `Eigen::Vector2d`.
3. **Extract Translation Vector**: We use the `block` method to extract the last column of the matrix and then take the top two rows to get the translation vector.
4. **Example Usage**: In the `main` function, we create an example 3x3 matrix and call `getTranslation` to print the translation vector.

Make sure you have the Eigen library installed in your development environment to compile and run this code. If you don't have Eigen installed, you can download it from [Eigen's official website](http://eigen.tuxfamily.org/).