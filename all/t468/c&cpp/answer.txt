Sure! Here is the equivalent C++ code for the given Python function. This code assumes you have access to the C++ standard library and Eigen library for matrix operations, which is a popular choice for handling matrices in C++.

First, make sure you have Eigen installed. You can include it in your project by adding the following line at the beginning of your file:

```cpp
#include <Eigen/Dense>
```

Hereâ€™s the translated C++ code:

```cpp
#include <Eigen/Dense>
#include <stdexcept>

// Function to extract the translation vector from a 3x3 affine transformation matrix
Eigen::Matrix<double, 2, 1> get_translation(const Eigen::Matrix3d& matrix) {
    // Ensure the matrix is a 3x3 Eigen matrix
    if (matrix.rows() != 3 || matrix.cols() != 3) {
        throw std::invalid_argument("Input must be a 3x3 affine transformation matrix.");
    }

    // Extract the translation components from the matrix
    Eigen::Matrix<double, 2, 1> translation;
    translation << matrix(0, 2), matrix(1, 2);

    return translation;
}

int main() {
    // Example usage
    Eigen::Matrix3d matrix;
    matrix << 1, 0, 10,
              0, 1, 20,
              0, 0, 1;

    try {
        Eigen::Matrix<double, 2, 1> translation = get_translation(matrix);
        std::cout << "Translation vector: (" << translation(0) << ", " << translation(1) << ")" << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Include Eigen Library**: The `#include <Eigen/Dense>` directive includes the necessary Eigen headers.
2. **Function Definition**: The `get_translation` function takes a `Eigen::Matrix3d` (a 3x3 double-precision matrix) as input and returns a `Eigen::Matrix<double, 2, 1>` (a 2x1 double-precision matrix representing the translation vector).
3. **Validation**: The function checks if the input matrix is a 3x3 matrix using the `rows()` and `cols()` methods. If not, it throws a `std::invalid_argument`.
4. **Extract Translation**: The translation components are extracted using the `<<` operator to create a new `Eigen::Matrix<double, 2, 1>` object.
5. **Example Usage**: In the `main` function, an example 3x3 matrix is created, and the `get_translation` function is called with this matrix. The resulting translation vector is printed.

This code ensures that the functionality, logic, and structure of the original Python code are preserved while adapting to the syntax and features of C++ and the Eigen library.