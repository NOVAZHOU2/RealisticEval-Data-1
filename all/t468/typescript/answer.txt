Certainly! Below is the equivalent TypeScript code for the given Python function. We will use TypeScript along with the `numpy` library (which can be replaced with an equivalent library such as `mathjs` or `numericjs` if `numpy` is not available in TypeScript).

First, ensure you have the necessary dependencies installed:
```sh
npm install mathjs
```

Here is the TypeScript code:

```typescript
import * as math from 'mathjs';

/**
 * Given a 3x3 matrix, return the corresponding translation vector.
 *
 * @param matrix - A 3x3 affine transformation matrix.
 * @returns A 2-element array containing the translation components (translation_x, translation_y).
 */
function getTranslation(matrix: number[][]): number[] {
    // Ensure the matrix is a 3x3 array
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Extract the translation components from the matrix
    const translation = [matrix[0][2], matrix[1][2]];

    return translation.map(value => Number(value)); // Ensure the return type is of type number
}

// Example usage
const matrix: number[][] = [
    [1, 0, 5],
    [0, 1, 3],
    [0, 0, 1]
];

console.log(getTranslation(matrix)); // Output: [5, 3]
```

### Explanation:
1. **Importing Libraries**: The `mathjs` library is used here as a substitute for `numpy`. If you prefer another library, you can adjust the import accordingly.
2. **Function Definition**: The `getTranslation` function is defined with a clear type signature for the input (`number[][]`) and output (`number[]`).
3. **Validation**: The function checks if the input matrix is a 3x3 array. If not, it throws an error.
4. **Translation Extraction**: The translation components are extracted from the third column of the first two rows.
5. **Return Type**: The translation components are returned as an array of numbers.

This TypeScript code maintains the same functionality and logic as the original Python code, ensuring consistency and correctness.