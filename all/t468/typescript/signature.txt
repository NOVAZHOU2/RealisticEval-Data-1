Certainly! Hereâ€™s the equivalent TypeScript code, including the appropriate type annotations and JSDoc-style documentation:

```typescript
/**
 * Given a 3x3 matrix, return the corresponding translation vector.
 *
 * @param matrix - A 3x3 affine transformation matrix.
 * @returns A 2-element array containing the translation components (translation_x, translation_y).
 */
function getTranslation(matrix: number[][]): number[] {
  // Ensure the matrix is a 3x3 array
  if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
    throw new Error("Input must be a 3x3 affine transformation matrix.");
  }

  // Extract the translation components from the matrix
  const translation: number[] = [matrix[0][2], matrix[1][2]];

  return translation;
}

// Example usage
const matrix: number[][] = [
  [1, 0, 5],
  [0, 1, 3],
  [0, 0, 1]
];

console.log(getTranslation(matrix)); // Output: [5, 3]
```

### Explanation:

1. **JSDoc Documentation**:
   - The function `getTranslation` is documented using the JSDoc style, providing clear descriptions for the parameters and return value.

2. **Type Annotations**:
   - The input `matrix` is annotated as `number[][]`, representing a 2D array of numbers.
   - The return type is `number[]`, representing a 1D array of numbers.

3. **Validation**:
   - The function checks if the input matrix is a 3x3 array using `Array.isArray` and `.some`.

4. **Extracting Translation Components**:
   - The translation components are extracted from the matrix by accessing the third column of the first two rows.

5. **Return Type**:
   - The function returns the translation components directly as a JavaScript array of numbers.

This conversion preserves the original functionality and structure of the Python code while adapting it to TypeScript conventions and documentation standards.