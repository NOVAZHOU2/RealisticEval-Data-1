Here's how you can convert the given JavaScript function to Python:
Python Code
python
from typing import List, Dict, Any

def separate_octave_and_root(midi_notes: List[int]) -> Dict[str, List[int]]:
    """
    Splits a list of MIDI note numbers into separate lists of octaves and root notes.

    Args:
        midi_notes (List[int]): An array of MIDI note numbers.

    Returns:
        Dict[str, List[int]]: A dictionary containing lists of octaves and root notes.
    
    Raises:
        TypeError: If the input is not a list of integers.
    """
    if not isinstance(midi_notes, list) or not all(isinstance(note, int) for note in midi_notes):
        raise TypeError('Input must be an array of integers.')

    octave_notes = []
    root_notes = []

    for note in midi_notes:
        octave = note // 12  # Calculate the octave by integer division
        root_note = note % 12  # Calculate the root note as the remainder
        octave_notes.append(octave)
        root_notes.append(root_note)

    return {
        'octaveNotes': octave_notes,
        'rootNotes': root_notes
    }
Explanation of Changes:
Function Name: The function name is changed from separateOctaveAndRoot to separate_octave_and_root, following Python's naming convention of using snake_case.
Type Annotations:
The parameter midi_notes is annotated as List[int], indicating that it is a list of integers.
The return type is annotated as Dict[str, List[int]], indicating that it returns a dictionary with string keys and lists of integers as values.
Docstring:
The comments describing the function have been converted into a docstring, providing details about the parameters, return values, and exceptions raised.
Type Checking:
Instead of using Array.isArray and Number.isInteger, we use isinstance and a generator expression to check if midi_notes is a list and if all elements are integers.
The TypeError is raised with a clear message if the checks fail.
Integer Division:
The JavaScript Math.floor function is replaced with the integer division operator //, which gives the same result for positive integers.
Append Method:
The push method used in JavaScript is replaced with the append method in Python to add elements to the lists.
Return Statement:
The return object is changed to a Python dictionary, where the keys are strings corresponding to the desired output.
This Python function maintains the same logic as the original JavaScript function while adhering to Python's syntax and conventions.