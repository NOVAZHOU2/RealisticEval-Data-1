Certainly! Below is the conversion of the provided Python unittest test class into an equivalent test class using Jest in TypeScript. I will include the necessary imports, type annotations, and Jest assertions to ensure the functionality and logic of the tests are preserved.

### Python Code

```python
import numpy as np
import unittest

def get_rotation(matrix: np.array) -> float:
    """
    Given an affine transformation matrix, return the corresponding rotation angle in radians.

    Args:
        matrix (np.array): A 2D affine transformation matrix.

    Returns:
        float: The rotation angle in radians, extracted from the affine matrix.
    """
    if not isinstance(matrix, np.ndarray) or matrix.shape != (3, 3):
        raise ValueError("Input must be a 3x3 affine transformation matrix.")
    
    rotation_angle = np.arctan2(matrix[1, 0], matrix[0, 0])
    return float(rotation_angle)

class TestGetRotation(unittest.TestCase):
    def test_identity_matrix(self):
        matrix = np.eye(3)
        self.assertAlmostEqual(get_rotation(matrix), 0.0)

    def test_rotation_matrix_90_degrees(self):
        matrix = np.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]])
        self.assertAlmostEqual(get_rotation(matrix), np.pi / 2)

    def test_rotation_matrix_45_degrees(self):
        matrix = np.array([[np.cos(np.pi / 4), -np.sin(np.pi / 4), 0], 
                           [np.sin(np.pi / 4), np.cos(np.pi / 4), 0], 
                           [0, 0, 1]])
        self.assertAlmostEqual(get_rotation(matrix), np.pi / 4)

if __name__ == '__main__':
    unittest.main()
```

### TypeScript Conversion with Jest

```typescript
import { expect } from '@jest/globals';
import * as math from 'mathjs';

/**
 * Given an affine transformation matrix, return the corresponding rotation angle in radians.
 *
 * @param matrix - A 2D affine transformation matrix.
 * @returns The rotation angle in radians, extracted from the affine matrix.
 */
function getRotation(matrix: number[][]): number {
    // Ensure the matrix is a 2D array and has the correct shape
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the rotation angle using Math.atan2
    const rotationAngle = Math.atan2(matrix[1][0], matrix[0][0]);
    return rotationAngle;
}

describe('TestGetRotation', () => {
    it('should return 0 for identity matrix', () => {
        const matrix: number[][] = [
            [1, 0, 0],
            [0, 1, 0],
            [0, 0, 1]
        ];
        expect(getRotation(matrix)).toBeCloseTo(0.0);
    });

    it('should return π/2 for a 90-degree rotation matrix', () => {
        const matrix: number[][] = [
            [0, -1, 0],
            [1, 0, 0],
            [0, 0, 1]
        ];
        expect(getRotation(matrix)).toBeCloseTo(Math.PI / 2);
    });

    it('should return π/4 for a 45-degree rotation matrix', () => {
        const matrix: number[][] = [
            [math.cos(math.pi / 4), -math.sin(math.pi / 4), 0],
            [math.sin(math.pi / 4), math.cos(math.pi / 4), 0],
            [0, 0, 1]
        ];
        expect(getRotation(matrix)).toBeCloseTo(math.pi / 4);
    });
});

// Example usage
const matrix: number[][] = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]
];

console.log(getRotation(matrix));  // Should print 0
```

### Explanation:
1. **Function Definition**:
   - The `getRotation` function is defined with proper type annotations and logic to handle the 3x3 matrix validation and rotation angle calculation.

2. **Jest Testing Framework**:
   - Jest is used for testing with `describe` and `it` blocks.
   - The `expect` assertion library is used to verify the results.

3. **Test Cases**:
   - Each test case uses `toBeCloseTo` to compare floating-point values accurately.
   - The test cases cover the identity matrix, a 90-degree rotation matrix, and a 45-degree rotation matrix.

4. **Example Usage**:
   - An example usage demonstrates how to call the `getRotation` function with a sample 3x3 matrix.

This TypeScript code preserves the original functionality and logic of the Python unittest code while adapting it to Jest for testing.