Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included to match the Python unittest framework.

### TypeScript Code with Jest Testing

First, ensure you have the necessary dependencies installed:
```sh
npm install mathjs jest @types/jest ts-jest
```

Then, configure Jest in your `tsconfig.json` and `jest.config.js` files:

#### `tsconfig.json`
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "skipLibCheck": true
  }
}
```

#### `jest.config.js`
```js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
};
```

### TypeScript Test Class

Here is the TypeScript code with Jest tests:

```typescript
import * as math from 'mathjs';
import { getRotation } from './getRotation'; // Import the getRotation function

/**
 * Given an affine transformation matrix, return the corresponding rotation angle in radians.
 *
 * @param matrix - A 2D affine transformation matrix.
 * @returns The rotation angle in radians, extracted from the affine matrix.
 */
function getRotation(matrix: number[][]): number {
    // Ensure the matrix is a 2D array and has the correct shape
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the rotation angle using atan2
    const rotationAngle = math.atan2(matrix[1][0], matrix[0][0]);

    return rotationAngle;
}

describe('TestGetRotationFunction', () => {
    it('test_rotation_0_degrees', () => {
        const matrix = [
            [1, 0, 0],
            [0, 1, 0],
            [0, 0, 1]
        ];
        const expectedRotation = 0.0;
        expect(getRotation(matrix)).toBeCloseTo(expectedRotation, 6);
    });

    it('test_rotation_90_degrees', () => {
        const matrix = [
            [0, -1, 0],
            [1, 0, 0],
            [0, 0, 1]
        ];
        const expectedRotation = math.PI / 2; // 90 degrees in radians
        expect(getRotation(matrix)).toBeCloseTo(expectedRotation, 6);
    });

    it('test_rotation_180_degrees', () => {
        const matrix = [
            [-1, 0, 0],
            [0, -1, 0],
            [0, 0, 1]
        ];
        const expectedRotation = math.PI; // 180 degrees in radians
        expect(getRotation(matrix)).toBeCloseTo(expectedRotation, 6);
    });

    it('test_rotation_negative_90_degrees', () => {
        const matrix = [
            [0, 1, 0],
            [-1, 0, 0],
            [0, 0, 1]
        ];
        const expectedRotation = -math.PI / 2; // -90 degrees in radians
        expect(getRotation(matrix)).toBeCloseTo(expectedRotation, 6);
    });
});

// Example usage
const exampleMatrix: number[][] = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]
];

console.log(getRotation(exampleMatrix));  // Output will be 0
```

### Explanation:
1. **Import `mathjs`**: The `mathjs` library provides mathematical functions like `atan2`, which is equivalent to `numpy.arctan2`.
2. **JSDoc Documentation**: The function is documented using JSDoc-style comments.
3. **Type Definitions**: The input `matrix` is defined as a 2D array of numbers (`number[][]`).
4. **Validation**: The function checks if the input is a 2D array with the correct dimensions (3x3).
5. **Calculation**: The rotation angle is calculated using `math.atan2(matrix[1][0], matrix[0][0])`.
6. **Jest Tests**: Each test case uses `expect` with `toBeCloseTo` to compare floating-point values, ensuring precision up to 6 decimal places.

This ensures that the TypeScript code maintains the same functionality and structure as the original Python code, with appropriate Jest assertions and type annotations.