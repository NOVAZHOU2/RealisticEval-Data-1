Certainly! Below is the TypeScript code that replicates the functionality of the provided Python code:

```typescript
import * as math from 'mathjs';

/**
 * Given an affine transformation matrix, return the corresponding rotation angle in radians.
 *
 * @param matrix - A 2D affine transformation matrix.
 * @returns The rotation angle in radians, extracted from the affine matrix.
 */
function getRotation(matrix: number[][]): number {
    // Ensure the matrix is a 2D array and has the correct shape
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the rotation angle using Math.atan2
    const rotationAngle = Math.atan2(matrix[1][0], matrix[0][0]);

    return rotationAngle;
}

// Example usage
const matrix: number[][] = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]
];

console.log(getRotation(matrix));  // Should print 0
```

### Explanation:
1. **Import Statement**: 
   - In TypeScript, we use `mathjs` library for mathematical operations. However, since we only need `Math.atan2`, we can directly use `Math.atan2` without importing additional libraries.

2. **Type Definitions**:
   - The function parameter `matrix` is defined as a 2D array of numbers (`number[][]`).

3. **Validation**:
   - We check if `matrix` is an array and has the correct dimensions (3x3). If not, an error is thrown.

4. **Calculation**:
   - The rotation angle is calculated using `Math.atan2(matrix[1][0], matrix[0][0])`.

5. **Return Type**:
   - The function returns a `number` which represents the rotation angle in radians.

This TypeScript code closely mirrors the Python code while adhering to TypeScript's static type system and conventions.