Certainly! Below is the TypeScript code that converts the provided Python function into equivalent TypeScript code, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Given an affine transformation matrix, return the corresponding rotation angle in radians.
 *
 * @param matrix - A 2D affine transformation matrix.
 * @returns The rotation angle in radians, extracted from the affine matrix.
 */
function getRotation(matrix: number[][]): number {
    // Ensure the matrix is a 2D array and has the correct shape
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the rotation angle using Math.atan2
    const rotationAngle = Math.atan2(matrix[1][0], matrix[0][0]);

    return rotationAngle;
}

// Example usage
const matrix: number[][] = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]
];

console.log(getRotation(matrix));  // Should print 0
```

### Explanation:
1. **JSDoc Documentation**:
   - The function `getRotation` is documented with JSDoc-style comments, providing clear descriptions of the parameters and return value.

2. **Type Annotations**:
   - The function parameter `matrix` is annotated as a 2D array of numbers (`number[][]`).
   - The return type is `number`.

3. **Validation**:
   - The function checks if `matrix` is a valid 3x3 array. If not, it throws an error.

4. **Calculation**:
   - The rotation angle is calculated using `Math.atan2(matrix[1][0], matrix[0][0])`.

5. **Example Usage**:
   - An example usage demonstrates how to call the function with a sample 3x3 matrix.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and conventions.