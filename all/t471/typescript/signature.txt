Certainly! Below is the equivalent TypeScript code for the given Python function, including appropriate JSDoc-style documentation and type annotations:

```typescript
import * as math from 'mathjs';

/**
 * Given an affine transformation matrix, return the corresponding rotation angle in radians.
 *
 * @param matrix - A 2D affine transformation matrix.
 * @returns The rotation angle in radians, extracted from the affine matrix.
 */
function getRotation(matrix: number[][]): number {
    // Ensure the matrix is a 2D array and has the correct shape
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the rotation angle using atan2
    const rotationAngle = math.atan2(matrix[1][0], matrix[0][0]);

    return rotationAngle;
}

// Example usage
const exampleMatrix: number[][] = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]
];

console.log(getRotation(exampleMatrix));  // Output will be 0
```

### Explanation:
1. **Import `mathjs`**: The `mathjs` library provides mathematical functions like `atan2`, which is equivalent to `numpy.arctan2`.
2. **JSDoc Documentation**:
   - The function is documented using JSDoc-style comments, including parameter and return descriptions.
3. **Type Definitions**:
   - The input `matrix` is defined as a 2D array of numbers (`number[][]`).
4. **Validation**:
   - The function checks if the input is a 2D array with the correct dimensions (3x3).
5. **Calculation**:
   - The rotation angle is calculated using `math.atan2(matrix[1][0], matrix[0][0])`.

This ensures that the TypeScript code maintains the same functionality and structure as the original Python code, with appropriate documentation and type annotations.