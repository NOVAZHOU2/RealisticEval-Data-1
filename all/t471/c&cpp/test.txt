Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code Using Catch2

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <Eigen/Dense>
#include <cmath>

// Function to calculate the rotation angle from a 3x3 affine transformation matrix
double get_rotation(const Eigen::Matrix3d& matrix) {
    // Ensure the matrix is a 3x3 affine transformation matrix
    if (matrix.rows() != 3 || matrix.cols() != 3) {
        throw std::invalid_argument("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the rotation angle using atan2
    double rotation_angle = std::atan2(matrix(1, 0), matrix(0, 0));

    return rotation_angle;
}

TEST_CASE("TestGetRotationFunction", "[rotation]") {
    SECTION("test_rotation_0_degrees") {
        // Test for a rotation of 0 degrees (identity matrix)
        Eigen::Matrix3d matrix;
        matrix << 1, 0, 0,
                  0, 1, 0,
                  0, 0, 1;
        double expected_rotation = 0.0;
        REQUIRE(std::abs(get_rotation(matrix) - expected_rotation) < 1e-6);
    }

    SECTION("test_rotation_90_degrees") {
        // Test for a rotation of 90 degrees
        Eigen::Matrix3d matrix;
        matrix << 0, -1, 0,
                  1, 0, 0,
                  0, 0, 1;
        double expected_rotation = M_PI / 2;  // 90 degrees in radians
        REQUIRE(std::abs(get_rotation(matrix) - expected_rotation) < 1e-6);
    }

    SECTION("test_rotation_180_degrees") {
        // Test for a rotation of 180 degrees
        Eigen::Matrix3d matrix;
        matrix << -1, 0, 0,
                  0, -1, 0,
                  0, 0, 1;
        double expected_rotation = M_PI;  // 180 degrees in radians
        REQUIRE(std::abs(get_rotation(matrix) - expected_rotation) < 1e-6);
    }

    SECTION("test_rotation_negative_90_degrees") {
        // Test for a rotation of -90 degrees
        Eigen::Matrix3d matrix;
        matrix << 0, 1, 0,
                  -1, 0, 0,
                  0, 0, 1;
        double expected_rotation = -M_PI / 2;  // -90 degrees in radians
        REQUIRE(std::abs(get_rotation(matrix) - expected_rotation) < 1e-6);
    }
}
```

### Explanation:
1. **Imports**:
   - `#include <catch2/catch_test_macros.hpp>`: For Catch2 test macros.
   - `#include <Eigen/Dense>`: For matrix operations using the Eigen library.
   - `#include <cmath>`: For trigonometric functions like `atan2`.

2. **Function Definition**:
   - `get_rotation`: This function takes a `Eigen::Matrix3d` (a 3x3 matrix) as input and returns the rotation angle in radians.
   - It checks if the matrix is indeed a 3x3 matrix and throws an exception if it is not.

3. **Test Class**:
   - `TEST_CASE`: Defines a test case named `TestGetRotationFunction`.
   - Each `SECTION` corresponds to a specific test case from the Python unittest class.
   - The tests use `REQUIRE` to assert the correctness of the rotation angle within a tolerance of `1e-6`.

4. **Assertions**:
   - `REQUIRE(std::abs(get_rotation(matrix) - expected_rotation) < 1e-6)` ensures that the calculated rotation angle is close to the expected value within a small tolerance.

This code preserves the functionality and logic of the original Python unittest class while adapting it to the Catch2 testing framework in C++.