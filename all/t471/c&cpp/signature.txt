Certainly! Here is the equivalent C++ code for the given Python function, including appropriate comments and type translations:

```cpp
#include <iostream>
#include <Eigen/Dense> // For matrix operations
#include <cmath>       // For trigonometric functions

/**
 * Given an affine transformation matrix, return the corresponding rotation angle in radians.
 *
 * @param matrix A 2D affine transformation matrix.
 * @return The rotation angle in radians, extracted from the affine matrix.
 */
double get_rotation(const Eigen::Matrix3d& matrix) {
    // Ensure the matrix is a 3x3 affine transformation matrix
    if (matrix.rows() != 3 || matrix.cols() != 3) {
        throw std::invalid_argument("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the rotation angle using atan2
    double rotation_angle = std::atan2(matrix(1, 0), matrix(0, 0));

    return rotation_angle;
}

int main() {
    try {
        // Example usage
        Eigen::Matrix3d matrix;
        matrix << 1, 2, 3,
                  4, 5, 6,
                  0, 0, 1;

        double angle = get_rotation(matrix);
        std::cout << "Rotation Angle: " << angle << " radians" << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Imports**:
   - `#include <iostream>`: For basic input/output operations.
   - `#include <Eigen/Dense>`: For matrix operations using the Eigen library.
   - `#include <cmath>`: For trigonometric functions like `atan2`.

2. **Function Definition**:
   - `get_rotation`: This function takes a `Eigen::Matrix3d` (a 3x3 matrix) as input and returns the rotation angle in radians.
   - The function includes a check to ensure the matrix is a 3x3 matrix and throws an exception if it is not.

3. **Calculation**:
   - Uses `std::atan2` to calculate the rotation angle based on the elements of the matrix.

4. **Comments and Documentation**:
   - Multi-line comments (`/* ... */`) are used for the function documentation.
   - Single-line comments (`//`) are used for inline comments within the function.

5. **Main Function**:
   - Demonstrates how to use the `get_rotation` function with an example matrix.
   - Handles exceptions by catching and printing error messages.

This code preserves the original purpose and structure of the Python code while adapting it to C++ syntax and conventions.