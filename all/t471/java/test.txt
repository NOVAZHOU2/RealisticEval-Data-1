Certainly! Here’s the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. 

First, let's define the `get_rotation` method in a separate Java class, and then create the JUnit test class to verify its correctness.

### Step 1: Define the `get_rotation` Method

Create a Java class named `RotationCalculator` that contains the `getRotation` method:

```java
package org.real.temp;

/**
 * Provides methods for calculating rotation angles from affine transformation matrices.
 */
public class RotationCalculator {

    /**
     * Given a 3x3 affine transformation matrix, returns the corresponding rotation angle in radians.
     *
     * @param matrix A 2D array representing the affine transformation matrix.
     * @return The rotation angle in radians, extracted from the affine matrix.
     * @throws IllegalArgumentException If the input matrix is not a 3x3 matrix.
     */
    public static double getRotation(double[][] matrix) {
        // Ensure the matrix is a 3x3 array
        if (matrix == null || matrix.length != 3 || matrix[0].length != 3 || matrix[1].length != 3 || matrix[2].length != 3) {
            throw new IllegalArgumentException("Input must be a 3x3 affine transformation matrix.");
        }

        // Calculate the rotation angle using Math.atan2
        double rotationAngle = Math.atan2(matrix[1][0], matrix[0][0]);

        return rotationAngle;
    }
}
```

### Step 2: Create the JUnit Test Class

Now, create the JUnit test class named `Tester` in the same package:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

/**
 * Test class for the RotationCalculator.
 */
public class Tester {

    /**
     * Test the getRotation method with a valid 3x3 matrix.
     */
    @Test
    public void testGetRotationValidMatrix() {
        double[][] matrix = {
            {1, 0, 0},
            {0, 1, 0},
            {0, 0, 1}
        };
        double expectedAngle = 0.0;
        double actualAngle = RotationCalculator.getRotation(matrix);
        assertEquals("The rotation angle should be 0.0", expectedAngle, actualAngle, 1e-9);
    }

    /**
     * Test the getRotation method with a matrix that represents a 45-degree rotation.
     */
    @Test
    public void testGetRotation45DegreeMatrix() {
        double[][] matrix = {
            {0, 1, 0},
            {-1, 0, 0},
            {0, 0, 1}
        };
        double expectedAngle = Math.PI / 4;
        double actualAngle = RotationCalculator.getRotation(matrix);
        assertEquals("The rotation angle should be π/4", expectedAngle, actualAngle, 1e-9);
    }

    /**
     * Test the getRotation method with an invalid matrix (not 3x3).
     */
    @Test(expected = IllegalArgumentException.class)
    public void testGetRotationInvalidMatrix() {
        double[][] matrix = {
            {1, 0, 0},
            {0, 1, 0}
        };
        RotationCalculator.getRotation(matrix);
    }
}
```

### Explanation:
1. **Package and Class Declaration**:
   - The package declaration `package org.real.temp;` sets the package name.
   - The class declaration `public class Tester` defines the test class name.

2. **JUnit Annotations**:
   - The `@Test` annotation is used to mark each test method.

3. **Test Methods**:
   - `testGetRotationValidMatrix`: Tests the `getRotation` method with a valid 3x3 identity matrix and asserts that the rotation angle is 0.0.
   - `testGetRotation45DegreeMatrix`: Tests the `getRotation` method with a matrix that represents a 45-degree rotation and asserts that the rotation angle is π/4.
   - `testGetRotationInvalidMatrix`: Tests the `getRotation` method with an invalid matrix (not 3x3) and expects an `IllegalArgumentException`.

4. **Assertion Methods**:
   - `assertEquals` is used to compare the expected and actual values with a tolerance (`1e-9` for floating-point comparisons).

This setup ensures that the functionality and logic of the tests are preserved while adhering to Java and JUnit conventions.