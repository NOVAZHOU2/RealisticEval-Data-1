Sure! Below is the equivalent JavaScript code for the given Python function. This code will use the `tf` (TensorFlow.js) library to handle matrix operations and ensure similar functionality:

```javascript
// Import TensorFlow.js for matrix operations
const tf = require('@tensorflow/tfjs');

/**
 * Given an affine transformation matrix, return the corresponding rotation angle in radians.
 *
 * @param {tf.Tensor} matrix - A 2D affine transformation matrix.
 * @returns {number} The rotation angle in radians, extracted from the affine matrix.
 */
function getRotation(matrix) {
    // Ensure the matrix is a 2D tensor and has the correct shape
    if (!(matrix instanceof tf.Tensor) || !matrix.shape.equals([3, 3])) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Extract the relevant elements from the matrix
    const m10 = matrix.get(1, 0);
    const m00 = matrix.get(0, 0);

    // Calculate the rotation angle using Math.atan2
    const rotationAngle = Math.atan2(m10, m00);

    return rotationAngle;
}

// Example usage:
// Create a 3x3 matrix
const matrix = tf.tensor([[1, 0, 0], [0, 1, 0], [0, 0, 1]]);

// Get the rotation angle
const angle = getRotation(matrix);
console.log(angle);  // Output should be 0
```

### Explanation:
1. **Import TensorFlow.js**: We use TensorFlow.js for handling matrix operations.
2. **Function Definition**: The `getRotation` function takes a 3x3 matrix as input and returns the rotation angle in radians.
3. **Validation**: The function checks if the input is a 3x3 tensor.
4. **Matrix Elements**: It extracts the necessary elements (`m10` and `m00`) from the matrix.
5. **Calculation**: It uses `Math.atan2` to calculate the rotation angle.
6. **Example Usage**: An example is provided to demonstrate how to use the function with a sample 3x3 matrix.

This JavaScript code maintains the same functionality and logic as the original Python code.