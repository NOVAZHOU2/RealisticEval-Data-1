Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import numpy as np
import unittest

class TestGetRotationFunction(unittest.TestCase):

    def test_rotation_0_degrees(self):
        """ Test for a rotation of 0 degrees (identity matrix) """
        matrix = np.array([[1, 0, 0],
                           [0, 1, 0],
                           [0, 0, 1]])
        expected_rotation = 0.0
        self.assertAlmostEqual(get_rotation(matrix), expected_rotation, places=6)

    def test_rotation_90_degrees(self):
        """ Test for a rotation of 90 degrees """
        matrix = np.array([[0, -1, 0],
                           [1, 0, 0],
                           [0, 0, 1]])
        expected_rotation = np.pi / 2  # 90 degrees in radians
        self.assertAlmostEqual(get_rotation(matrix), expected_rotation, places=6)

    def test_rotation_180_degrees(self):
        """ Test for a rotation of 180 degrees """
        matrix = np.array([[-1, 0, 0],
                           [0, -1, 0],
                           [0, 0, 1]])
        expected_rotation = np.pi  # 180 degrees in radians
        self.assertAlmostEqual(get_rotation(matrix), expected_rotation, places=6)

    def test_rotation_negative_90_degrees(self):
        """ Test for a rotation of -90 degrees """
        matrix = np.array([[0, 1, 0],
                           [-1, 0, 0],
                           [0, 0, 1]])
        expected_rotation = -np.pi / 2  # -90 degrees in radians
        self.assertAlmostEqual(get_rotation(matrix), expected_rotation, places=6)
```

### Equivalent Jest Test Suite:
```javascript
const { getRotation } = require('./getRotation'); // Assuming getRotation is exported from another file
const assert = require('assert');

describe('TestGetRotationFunction', () => {
    it('test_rotation_0_degrees', () => {
        // Test for a rotation of 0 degrees (identity matrix)
        const matrix = [
            [1, 0, 0],
            [0, 1, 0],
            [0, 0, 1]
        ];
        const expectedRotation = 0.0;
        expect(getRotation(matrix)).toBeCloseTo(expectedRotation, 6);
    });

    it('test_rotation_90_degrees', () => {
        // Test for a rotation of 90 degrees
        const matrix = [
            [0, -1, 0],
            [1, 0, 0],
            [0, 0, 1]
        ];
        const expectedRotation = Math.PI / 2;  // 90 degrees in radians
        expect(getRotation(matrix)).toBeCloseTo(expectedRotation, 6);
    });

    it('test_rotation_180_degrees', () => {
        // Test for a rotation of 180 degrees
        const matrix = [
            [-1, 0, 0],
            [0, -1, 0],
            [0, 0, 1]
        ];
        const expectedRotation = Math.PI;  // 180 degrees in radians
        expect(getRotation(matrix)).toBeCloseTo(expectedRotation, 6);
    });

    it('test_rotation_negative_90_degrees', () => {
        // Test for a rotation of -90 degrees
        const matrix = [
            [0, 1, 0],
            [-1, 0, 0],
            [0, 0, 1]
        ];
        const expectedRotation = -Math.PI / 2;  // -90 degrees in radians
        expect(getRotation(matrix)).toBeCloseTo(expectedRotation, 6);
    });
});
```

### Explanation:
1. **Imports**: 
   - `getRotation` is assumed to be imported from another file.
   - `assert` is imported for additional assertion utilities if needed.

2. **Test Suite Structure**:
   - The `describe` block defines the test suite.
   - Each `it` block represents a specific test case.

3. **Assertions**:
   - `expect(getRotation(matrix)).toBeCloseTo(expectedRotation, 6)` is used to check floating-point equality within a specified precision (6 decimal places).

4. **Matrix Representation**:
   - The matrices are represented as 2D arrays in JavaScript, which is equivalent to NumPy arrays in Python.

5. **Documentation**:
   - Comments are included to describe each test case, similar to the docstrings in the Python code.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adapting to Jest's syntax and conventions.