Hereâ€™s the TypeScript translation of the provided C++ code, ensuring that the logic and functionality remain consistent while adhering to TypeScript conventions:

```typescript
/**
 * @brief Finds the maximum difference between elements in the array
 * such that the smaller element appears before the larger one.
 *
 * @param l An array of integers containing the elements.
 * @return The maximum difference.
 */
function findMaxDifference(l: number[]): number {
    let minVal = l[0];
    let maxDiff = Number.MIN_SAFE_INTEGER;

    for (let i = 1; i < l.length; i++) {
        maxDiff = Math.max(maxDiff, l[i] - minVal);
        minVal = Math.min(minVal, l[i]);
    }

    return maxDiff;
}

function main(): void {
    const n: number = Number(prompt("Enter the number of elements:"));
    const l: number[] = [];

    for (let i = 0; i < n; i++) {
        l[i] = Number(prompt(`Enter element ${i + 1}:`));
    }

    const maxDiff: number = findMaxDifference(l);
    console.log(maxDiff);
}

main();
```

### Key Changes and Adaptations:
1. **Type Annotations**: TypeScript uses type annotations, so I've added `number[]` for arrays and `number` for numeric values.
2. **Input Handling**: Instead of using `cin`, I've used `prompt` to gather input from the user. This assumes a browser environment. If you're using Node.js, you might want to use a different method for input.
3. **Math Functions**: The C++ `max` and `min` functions have been replaced with `Math.max` and `Math.min`.
4. **Constants**: Instead of `numeric_limits<int>::min()`, `Number.MIN_SAFE_INTEGER` is used to represent the minimum safe integer value.
5. **Main Function**: The `main` function structure is maintained, but it is defined as `void` since it does not return a value.