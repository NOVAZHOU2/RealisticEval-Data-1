Hereâ€™s the equivalent Python code for the provided C++ code. This conversion includes the functionality to find the maximum difference between elements in an array where the smaller element appears before the larger one.
C++ Code
cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <limits>
using namespace std;

/**
 * @brief Finds the maximum difference between elements in the array 
 * such that the smaller element appears before the larger one.
 * 
 * @param l A vector of integers containing the elements.
 * @return The maximum difference.
 */
int findMaxDifference(const vector<int>& l) {
    int min_val = l[0];
    int max_diff = numeric_limits<int>::min();
    for (size_t i = 1; i < l.size(); ++i) {
        max_diff = max(max_diff, l[i] - min_val);
        min_val = min(min_val, l[i]);
    }
    return max_diff;
}

int main() {
    int n;
    cin >> n;
    vector<int> l(n);
    for (int i = 0; i < n; ++i) {
        cin >> l[i];
    }
    int max_diff = findMaxDifference(l);
    cout << max_diff << endl;
    return 0;
}
Python Code
python
def find_max_difference(l):
    """
    Finds the maximum difference between elements in the array 
    such that the smaller element appears before the larger one.

    :param l: A list of integers containing the elements.
    :return: The maximum difference.
    """
    min_val = l[0]
    max_diff = float('-inf')  # Initialize to negative infinity

    for i in range(1, len(l)):
        max_diff = max(max_diff, l[i] - min_val)
        min_val = min(min_val, l[i])

    return max_diff

if __name__ == "__main__":
    n = int(input("Enter the number of elements: "))
    l = []

    print("Enter the elements:")
    for _ in range(n):
        l.append(int(input()))

    max_diff = find_max_difference(l)
    print(max_diff)
Key Changes
Function Name and Parameters: The function name is converted to snake_case, and the vector type vector<int> in C++ is changed to a Python list.
Initialization: Instead of using numeric_limits<int>::min() for max_diff, Python uses float('-inf') to represent negative infinity.
Input Handling: The main function is replaced with Python's standard input methods. The number of elements and the elements themselves are read using input().
Output: The final result is printed directly using print().
Usage
You can run this Python script in any Python environment. It will prompt for the number of elements and the elements themselves, then calculate and print the maximum difference.