Hereâ€™s the equivalent Java code based on the provided C++ code. The Java code maintains the same functionality and structure, adapting to Java's syntax and conventions.

```java
package org.real.temp;

import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;

/**
 * @brief Finds the maximum difference between elements in the array
 * such that the smaller element appears before the larger one.
 */
public class Answer {

    /**
     * Finds the maximum difference between elements in the list.
     *
     * @param l A list of integers containing the elements.
     * @return The maximum difference.
     */
    public static int findMaxDifference(List<Integer> l) {
        int minVal = l.get(0);
        int maxDiff = Integer.MIN_VALUE;

        for (int i = 1; i < l.size(); ++i) {
            maxDiff = Math.max(maxDiff, l.get(i) - minVal);
            minVal = Math.min(minVal, l.get(i));
        }

        return maxDiff;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> l = new ArrayList<>(n);
        
        for (int i = 0; i < n; ++i) {
            l.add(scanner.nextInt());
        }

        int maxDiff = findMaxDifference(l);
        System.out.println(maxDiff);
        
        scanner.close();
    }
}
```

### Key Changes and Adaptations:
1. **Package Declaration**: Added `package org.real.temp;` at the top.
2. **Class Declaration**: The main logic is enclosed in a public class named `Answer`.
3. **Imports**: Imported necessary classes like `Scanner` for input and `List`, `ArrayList` for storing integers.
4. **Method Signature**: The method `findMaxDifference` takes a `List<Integer>` instead of a vector.
5. **Integer Constants**: Used `Integer.MIN_VALUE` instead of `numeric_limits<int>::min()`.
6. **Math Functions**: Replaced `max` and `min` with `Math.max` and `Math.min`.
7. **Input Handling**: Used `Scanner` to read input and store it in an `ArrayList<Integer>`.
8. **Closing Scanner**: Closed the `Scanner` to prevent resource leaks.

This Java version retains the original algorithm and structure, ensuring it functions similarly to the provided C++ code.