Sure, here's the equivalent JavaScript code for the provided Python function:

```javascript
function extractEmailDetails(email) {
    /**
     * Extracts the username and mailbox suffix from an email address.
     *
     * @param {string} email - The email address to extract details from.
     * @returns {Array} An array containing the username and domain, where:
     *      username is the part before '@'
     *      domain is the part after '@'
     *
     * Example:
     *      extractEmailDetails("xxx@gmail.com") returns ['xxx', 'gmail.com']
     */

    // Check if '@' is in the email
    if (!email.includes('@')) {
        throw new Error("Invalid email address. Email must contain an '@' character.");
    }

    // Split the email at the '@' and assign parts to username and domain
    const [username, domain] = email.split('@', 1);

    return [username, domain];
}
```

### Explanation:
1. **Function Declaration**: The `extractEmailDetails` function is defined similarly to the Python function.
2. **Documentation**: The docstring is converted to a JSDoc comment.
3. **Validation**: The check for the presence of '@' in the email is performed using the `includes` method.
4. **Error Handling**: If the email does not contain '@', an error is thrown.
5. **Splitting the Email**: The `split` method is used to split the email at the first occurrence of '@'. The result is destructured into `username` and `domain`.
6. **Return Value**: The function returns an array containing the `username` and `domain`.

This JavaScript function should behave identically to the Python function in terms of functionality and logic.