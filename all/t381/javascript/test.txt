Sure! Here's how you can convert your Python unittest test class to a JavaScript test case using Jest:

```javascript
const { extractEmailDetails } = require('./path_to_your_module'); // Adjust the path accordingly

describe('extractEmailDetails function', () => {
  it('should return the correct username and domain for a valid email', () => {
    const email = "xxx@gmail.com";
    const expectedOutput = ['xxx', 'gmail.com'];
    const result = extractEmailDetails(email);
    
    expect(result).toEqual(expectedOutput);
  });

  it('should handle emails with different domains correctly', () => {
    const email = "user@outlook.com";
    const expectedOutput = ['user', 'outlook.com'];
    const result = extractEmailDetails(email);
    
    expect(result).toEqual(expectedOutput);
  });

  it('should throw an error for invalid email formats', () => {
    const email = "invalid-email";
    expect(() => extractEmailDetails(email)).toThrow();
  });
});
```

In this example:
- The `describe` block is used to group related tests.
- The `it` blocks are individual test cases.
- `expect` is used to assert that the output of the function matches the expected result.
- `toThrow` is used to check if the function throws an error when given an invalid email format.

Make sure to replace `'./path_to_your_module'` with the actual path to your module containing the `extractEmailDetails` function.