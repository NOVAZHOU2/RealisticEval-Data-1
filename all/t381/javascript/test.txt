To convert the given Python function into a Jest test class, we need to first implement the function in JavaScript and then write the corresponding tests. Below is the equivalent JavaScript implementation followed by the Jest test class.

### JavaScript Implementation:

```javascript
function extractEmailDetails(email) {
    /**
     * Extracts the username and mailbox suffix from an email address.
     * e.g extractEmailDetails("xxx@gmail.com") returns ['xxx', 'gmail.com']
     * 
     * @param {string} email - the email address to extract details from
     * @returns {Array} [username, domain]
     */
    const atIndex = email.indexOf('@');
    if (atIndex === -1) {
        throw new Error('Invalid email format');
    }
    const username = email.substring(0, atIndex);
    const domain = email.substring(atIndex + 1);
    return [username, domain];
}
```

### Jest Test Class:

```javascript
const extractEmailDetails = require('./extractEmailDetails');

describe('extractEmailDetails', () => {
    it('should correctly extract username and domain for valid emails', () => {
        expect(extractEmailDetails('xxx@gmail.com')).toEqual(['xxx', 'gmail.com']);
        expect(extractEmailDetails('abc@def.com')).toEqual(['abc', 'def.com']);
    });

    it('should throw an error for invalid emails', () => {
        expect(() => extractEmailDetails('invalidemail')).toThrow('Invalid email format');
    });
});
```

### Explanation:

1. **Function Implementation**:
   - The `extractEmailDetails` function uses JavaScript string methods to extract the username and domain parts of the email.
   - It checks if the `@` character exists in the email and throws an error if not found.

2. **Test Structure**:
   - The `describe` block groups related tests together.
   - Each `it` block represents a specific test case.
   - Assertions are made using `expect` with different matchers like `toEqual` and `toThrow`.

3. **Assertions**:
   - `toEqual`: Checks if the returned array matches the expected values.
   - `toThrow`: Checks if the function throws an error when given an invalid email.

By following these steps, you can ensure that the JavaScript Jest tests are equivalent to the original Python unittests.