First, let's define the function `extract_email_details` in TypeScript:

```typescript
function extractEmailDetails(email: string): [string, string] {
    const atIndex = email.indexOf('@');
    if (atIndex === -1) {
        throw new Error('Invalid email format');
    }
    const username = email.substring(0, atIndex);
    const domain = email.substring(atIndex + 1);
    return [username, domain];
}
```

Now, let's write the Jest test class:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('Test the extractEmailDetails function', () => {
    it('should correctly extract email details for a valid email', () => {
        const email = 'xxx@gmail.com';
        const expected = ['xxx', 'gmail.com'];
        const result = extractEmailDetails(email);
        expect(result).toEqual(expected);
    });

    it('should throw an error for an invalid email', () => {
        const invalidEmail = 'invalidemail.com';
        expect(() => extractEmailDetails(invalidEmail)).toThrow('Invalid email format');
    });
});
```

In this solution:

- We've defined the `extractEmailDetails` function, which takes an email as input and returns a tuple with the username and domain.
- We've used Jest's `describe` and `it` functions to structure our tests.
- We're using the `expect` function to make assertions about the output of the `extractEmailDetails` function.
- The first test checks if the function correctly extracts the username and domain from a valid email.
- The second test verifies that the function throws an error when given an invalid email.

This setup ensures that we cover the functionality described in the original Python code with appropriate Jest assertions.