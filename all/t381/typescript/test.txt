Certainly! Here is the equivalent TypeScript test class using Jest. We will convert the Python unittest test class into a Jest test suite, ensuring that the functionality and logic of the tests are preserved.

First, let's assume that the `extractEmailDetails` function is defined in a separate file, such as `emailUtils.ts`. Here is the TypeScript code for the `emailUtils.ts` file:

```typescript
// emailUtils.ts

export function extractEmailDetails(email: string): [string, string] {
    if (!email.includes('@')) {
        throw new Error("Invalid email address. Email must contain an '@' character.");
    }

    const [username, domain] = email.split('@', 1);
    return [username, domain];
}
```

Now, let's write the Jest test suite for this function:

```typescript
// emailUtils.test.ts

import { extractEmailDetails } from './emailUtils';

describe('extractEmailDetails', () => {
    it('should extract details from a typical email address', () => {
        const email = 'user@example.com';
        const expected = ['user', 'example.com'];
        const result = extractEmailDetails(email);
        expect(result).toEqual(expected);
    });

    it('should extract details from an email with a subdomain', () => {
        const email = 'user@mail.office.com';
        const expected = ['user', 'mail.office.com'];
        const result = extractEmailDetails(email);
        expect(result).toEqual(expected);
    });

    it('should throw an error for an email without an @ symbol', () => {
        const email = 'userexample.com';
        expect(() => extractEmailDetails(email)).toThrow('Invalid email address. Email must contain an \'@\' character.');
    });

    it('should throw an error for an empty email', () => {
        const email = '';
        expect(() => extractEmailDetails(email)).toThrow('Invalid email address. Email must contain an \'@\' character.');
    });
});
```

### Explanation:
1. **Import Function**:
   - The `extractEmailDetails` function is imported from the `emailUtils.ts` file.

2. **Test Suite**:
   - The `describe` block defines the test suite for `extractEmailDetails`.

3. **Test Cases**:
   - Each `it` block represents a specific test case.
   - The `expect` statements are used to assert the expected behavior of the function.

4. **Assertions**:
   - `expect(result).toEqual(expected)` checks that the result matches the expected tuple.
   - `expect(() => extractEmailDetails(email)).toThrow('Invalid email address. Email must contain an \'@\' character.')` checks that the function throws the expected error message.

This Jest test suite ensures that the functionality and logic of the tests are preserved, and it uses appropriate Jest assertions to validate the behavior of the `extractEmailDetails` function.