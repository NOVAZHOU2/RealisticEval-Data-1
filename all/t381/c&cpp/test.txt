Certainly! Below is the equivalent C++ test case using Catch2 for the given Python `unittest` test class.

```cpp
#include <catch2/catch.hpp>
#include <string>

// Function to be tested
std::pair<std::string, std::string> extract_email_details(const std::string& email) {
    size_t at_pos = email.find('@');
    if (at_pos != std::string::npos) {
        return {email.substr(0, at_pos), email.substr(at_pos + 1)};
    }
    return {"", ""};
}

TEST_CASE("Extract Email Details", "[extract_email_details]") {
    // Test cases
    REQUIRE(extract_email_details("xxx@gmail.com") == std::make_pair("xxx", "gmail.com"));
    REQUIRE(extract_email_details("user@domain.co.uk") == std::make_pair("user", "domain.co.uk"));
    REQUIRE(extract_email_details("noatsign.com") == std::make_pair("", ""));
    REQUIRE(extract_email_details("@nodomain") == std::make_pair("", ""));
    REQUIRE(extract_email_details("") == std::make_pair("", ""));
}
```

### Explanation:

- **Catch2 Setup**: Ensure you have Catch2 installed in your project. If not, you can download it from [Catch2 GitHub](https://github.com/catchorg/Catch2).
  
- **Function Definition**: The function `extract_email_details` is defined in C++. It takes a string `email` and returns a pair of strings containing the username and domain.

- **Test Cases**:
  - `REQUIRE`: This macro is used to assert that the function's output matches the expected result.
  - Several test cases are provided to cover different scenarios, including valid email addresses, invalid email addresses, and edge cases like empty strings or missing '@' symbols.

Make sure to include the Catch2 header file (`#include <catch2/catch.hpp>`) and link against the Catch2 library when compiling your test program.