To convert the provided Python function into a C++ test class using Catch2, we first need to define the function `extract_email_details` in C++. After that, we can write the corresponding test cases using Catch2's assertion mechanisms.

Hereâ€™s how you can do it:

1. **Define the Function**:
   ```cpp
   #include <string>
   #include <utility> // For std::pair

   std::pair<std::string, std::string> extract_email_details(const std::string& email) {
       size_t at_pos = email.find('@');
       if (at_pos == std::string::npos) {
           return std::make_pair("", "");
       }
       std::string username = email.substr(0, at_pos);
       std::string domain = email.substr(at_pos + 1);
       return std::make_pair(username, domain);
   }
   ```

2. **Write the Test Class Using Catch2**:
   ```cpp
   #include "catch.hpp"

   TEST_CASE("Extract Email Details", "[email]") {
       SECTION("Valid email") {
           auto result = extract_email_details("xxx@gmail.com");
           REQUIRE(result.first == "xxx");
           REQUIRE(result.second == "gmail.com");
       }

       SECTION("Email without @") {
           auto result = extract_email_details("invalidemail");
           REQUIRE(result.first.empty());
           REQUIRE(result.second.empty());
       }

       SECTION("Email with multiple @") {
           auto result = extract_email_details("xxx@invalid@.com");
           REQUIRE(result.first == "xxx");
           REQUIRE(result.second == "invalid@.com");
       }

       SECTION("Empty email") {
           auto result = extract_email_details("");
           REQUIRE(result.first.empty());
           REQUIRE(result.second.empty());
       }

       SECTION("Email with leading/trailing spaces") {
           auto result = extract_email_details(" xxx @ gmail . com ");
           REQUIRE(result.first == "xxx");
           REQUIRE(result.second == "gmail.com");
       }
   }
   ```

### Explanation:
- **Function Definition**: The function `extract_email_details` takes a string representing an email and uses `std::string::find` to locate the '@' character. It then extracts the username and domain parts accordingly.
- **Test Class**: The `TEST_CASE` macro is used to define a test case named "Extract Email Details". Each `SECTION` represents a different scenario or condition to test the function against.
- **Assertions**: `REQUIRE` is used to assert the expected outcomes of each section. If any of the assertions fail, the test will report the failure.

This setup ensures that the functionality and logic of the original Python unittest are preserved in the C++ version using Catch2.