Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a set of Catch2 test cases, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

Here is the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <stdexcept>
#include <utility> // For std::pair

// Extracts the username and mailbox suffix from an email address.
// Example: extract_email_details("xxx@gmail.com") returns ("xxx", "gmail.com")
//
// Args:
//     email (std::string): the email address to extract details from
//
// Returns:
//     std::pair<std::string, std::string>: (username, domain)
std::pair<std::string, std::string> extract_email_details(const std::string& email) {
    // Check if '@' is in the email
    size_t at_pos = email.find('@');
    if (at_pos == std::string::npos) {
        throw std::invalid_argument("Invalid email address. Email must contain an '@' character.");
    }

    // Extract the username and domain
    std::string username = email.substr(0, at_pos);
    std::string domain = email.substr(at_pos + 1);

    return {username, domain};
}

TEST_CASE("TestExtractEmailDetails", "[email]") {
    SECTION("test_valid_email") {
        // Test with a typical email address
        std::string email = "user@example.com";
        std::pair<std::string, std::string> expected = {"user", "example.com"};
        auto result = extract_email_details(email);
        REQUIRE(result == expected);
    }

    SECTION("test_valid_email_with_subdomain") {
        // Test with an email that includes a subdomain
        std::string email = "user@mail.office.com";
        std::pair<std::string, std::string> expected = {"user", "mail.office.com"};
        auto result = extract_email_details(email);
        REQUIRE(result == expected);
    }

    SECTION("test_email_without_at_symbol") {
        // Test with an email that lacks an '@' symbol
        std::string email = "userexample.com";
        REQUIRE_THROWS_AS(extract_email_details(email), std::invalid_argument);
    }

    SECTION("test_empty_email") {
        // Test with an empty string as an email
        std::string email = "";
        REQUIRE_THROWS_AS(extract_email_details(email), std::invalid_argument);
    }
}
```

### Explanation:
1. **Include Directives**:
   - `#include <catch2/catch_test_macros.hpp>`: For Catch2 test macros.
   - `#include <string>`: For string manipulation.
   - `#include <stdexcept>`: For throwing exceptions.
   - `#include <utility>`: For using `std::pair`.

2. **Function Documentation**:
   - The Python docstring is translated into C++ comments using `//` for single-line comments and `/* */` for multi-line comments.
   - The function documentation includes the example usage, arguments, and return value.

3. **Function Signature**:
   - The Python function `def extract_email_details(email: str)` is translated to `std::pair<std::string, std::string> extract_email_details(const std::string& email)`.

4. **Implementation**:
   - The function checks if the '@' character is present in the email.
   - If not, it throws a `std::invalid_argument`.
   - Otherwise, it extracts the `username` and `domain` using `std::string::substr`.

5. **Catch2 Test Cases**:
   - Each Python test method is translated into a `SECTION` within a `TEST_CASE`.
   - `REQUIRE` is used for assertions.
   - `REQUIRE_THROWS_AS` is used to check for specific exception types.

6. **Main Function**:
   - The `main` function is typically not needed when using Catch2, as it handles the test execution automatically.

This code preserves the original functionality and logic of the Python tests while adhering to C++ syntax and the Catch2 testing framework.