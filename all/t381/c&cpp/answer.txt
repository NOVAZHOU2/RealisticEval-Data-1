Certainly! Below is the equivalent C++ code for the given Python function. The code includes error checking for the presence of the '@' symbol and extracts the username and domain from the email address.

```cpp
#include <iostream>
#include <string>
#include <stdexcept>

/**
 * Extracts the username and mailbox suffix from an email address.
 *
 * @param email The email address to extract details from.
 * @return A pair containing the username and domain, where:
 *     - The first element (first) is the part before '@'.
 *     - The second element (second) is the part after '@'.
 *
 * Example:
 *     auto result = extract_email_details("xxx@gmail.com");
 *     // result.first should be "xxx"
 *     // result.second should be "gmail.com"
 */
std::pair<std::string, std::string> extract_email_details(const std::string& email) {
    // Check if '@' is in the email
    size_t at_pos = email.find('@');
    if (at_pos == std::string::npos) {
        throw std::invalid_argument("Invalid email address. Email must contain an '@' character.");
    }

    // Split the email at the '@' and assign parts to username and domain
    std::string username = email.substr(0, at_pos);
    std::string domain = email.substr(at_pos + 1);

    return {username, domain};
}

int main() {
    try {
        auto [username, domain] = extract_email_details("xxx@gmail.com");
        std::cout << "Username: " << username << ", Domain: " << domain << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Include Directives**: The required headers (`<iostream>`, `<string>`, `<stdexcept>`) are included to provide necessary functionalities.
2. **Function Definition**: The `extract_email_details` function takes a string `email` and returns a `std::pair<std::string, std::string>` representing the username and domain.
3. **Error Checking**: The function checks if the '@' symbol is present in the email using `std::string::find`. If not found, it throws a `std::invalid_argument`.
4. **String Manipulation**: The function uses `std::string::substr` to extract the username and domain parts.
5. **Main Function**: Demonstrates how to use the `extract_email_details` function, including handling exceptions for invalid input.