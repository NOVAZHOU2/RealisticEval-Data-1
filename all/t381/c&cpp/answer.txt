Certainly! Below is the equivalent C++ code for the provided Python function. This code will extract the username and domain from an email address, ensuring that the email contains the '@' character:

```cpp
#include <iostream>
#include <string>
#include <stdexcept>

std::pair<std::string, std::string> extract_email_details(const std::string& email) {
    /**
     * Extracts the username and mailbox suffix from an email address.
     *
     * @param email: The email address to extract details from.
     * @return: A pair (username, domain) where:
     *      username is the part before '@'
     *      domain is the part after '@'
     *
     * Example:
     *      extract_email_details("xxx@gmail.com") returns ("xxx", "gmail.com")
     */
    
    // Check if '@' is in the email
    size_t at_pos = email.find('@');
    if (at_pos == std::string::npos) {
        throw std::invalid_argument("Invalid email address. Email must contain an '@' character.");
    }

    // Extract the username and domain
    std::string username = email.substr(0, at_pos);
    std::string domain = email.substr(at_pos + 1);

    return {username, domain};
}

int main() {
    try {
        auto [username, domain] = extract_email_details("xxx@gmail.com");
        std::cout << "Username: " << username << ", Domain: " << domain << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Definition**: The function `extract_email_details` takes a `std::string` parameter named `email`.
2. **Find '@' Position**: It uses `std::string::find` to locate the position of the '@' character in the email.
3. **Validation**: If the '@' character is not found (`at_pos` is `std::string::npos`), it throws a `std::invalid_argument`.
4. **Extracting Parts**: It extracts the `username` and `domain` using `std::string::substr`.
5. **Return Value**: It returns a `std::pair<std::string, std::string>` containing the `username` and `domain`.

This code ensures that the functionality and logic of the original Python code are preserved while adapting to C++ syntax and features.