Hereâ€™s the equivalent C++ function with comments and documentation:

```cpp
#include <string>
#include <utility> // For std::pair

// Function to extract the username and mailbox suffix from an email address.
// Example: extract_email_details("xxx@gmail.com") returns ("xxx", "gmail.com")
std::pair<std::string, std::string> extract_email_details(const std::string& email) {
    /*
    Extracts the username and mailbox suffix from an email address.
    
    Args:
        email (const std::string&): the email address to extract details from
    
    Returns:
        std::pair<std::string, std::string>: (username, domain)
    */

    size_t at_pos = email.find('@');
    if (at_pos == std::string::npos) {
        return std::make_pair("", "");
    }

    std::string username = email.substr(0, at_pos);
    std::string domain = email.substr(at_pos + 1);

    return std::make_pair(username, domain);
}
```

### Explanation:
- **Include Directives**: 
  - `<string>` is included for `std::string`.
  - `<utility>` is included for `std::pair`.

- **Function Signature**:
  - The Python function `def extract_email_details(email: str)` becomes `std::pair<std::string, std::string> extract_email_details(const std::string& email)`.
  - `std::string` is used as the type for the email parameter and return values.

- **Multi-line Comments**:
  - The Python docstring is converted to a multi-line comment using `/* ... */`.

- **Single-line Comments**:
  - Single-line comments use `//` in C++.

- **Function Body**:
  - The logic for extracting the username and domain from the email string is preserved using `std::string` methods such as `find` and `substr`.

This ensures that the C++ version retains the original functionality and documentation style.