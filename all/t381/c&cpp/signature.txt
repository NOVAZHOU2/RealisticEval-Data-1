Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <stdexcept>
#include <utility> // For std::pair

// Extracts the username and mailbox suffix from an email address.
// Example: extract_email_details("xxx@gmail.com") returns ("xxx", "gmail.com")
//
// Args:
//     email (std::string): the email address to extract details from
//
// Returns:
//     std::pair<std::string, std::string>: (username, domain)
std::pair<std::string, std::string> extract_email_details(const std::string& email) {
    // Check if '@' is in the email
    size_t at_pos = email.find('@');
    if (at_pos == std::string::npos) {
        throw std::invalid_argument("Invalid email address. Email must contain an '@' character.");
    }

    // Extract the username and domain
    std::string username = email.substr(0, at_pos);
    std::string domain = email.substr(at_pos + 1);

    return {username, domain};
}

int main() {
    try {
        auto [username, domain] = extract_email_details("xxx@gmail.com");
        std::cout << "Username: " << username << ", Domain: " << domain << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Include Directives**:
   - `#include <iostream>`: For input/output operations.
   - `#include <string>`: For string manipulation.
   - `#include <stdexcept>`: For throwing exceptions.
   - `#include <utility>`: For using `std::pair`.

2. **Function Documentation**:
   - The Python docstring is translated into C++ comments using `//` for single-line comments and `/* */` for multi-line comments.
   - The function documentation includes the example usage, arguments, and return value.

3. **Function Signature**:
   - The Python function `def extract_email_details(email: str)` is translated to `std::pair<std::string, std::string> extract_email_details(const std::string& email)`.

4. **Implementation**:
   - The function checks if the '@' character is present in the email.
   - If not, it throws a `std::invalid_argument`.
   - Otherwise, it extracts the `username` and `domain` using `std::string::substr`.

5. **Main Function**:
   - The `main` function demonstrates how to call `extract_email_details` and handles any exceptions thrown by the function.

This code preserves the original functionality and structure of the Python code while adhering to C++ syntax and documentation standards.