Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertThrows;

/**
 * Test class for the extractEmailDetails method.
 */
public class Tester {

    /**
     * Tests extracting details from a typical email address.
     */
    @Test
    public void testValidEmail() {
        // Test with a typical email address
        String email = "user@example.com";
        String[] expected = {"user", "example.com"};
        String[] result = extractEmailDetails(email);
        assertArrayEquals(expected, result);
    }

    /**
     * Tests extracting details from an email that includes a subdomain.
     */
    @Test
    public void testValidEmailWithSubdomain() {
        // Test with an email that includes a subdomain
        String email = "user@mail.office.com";
        String[] expected = {"user", "mail.office.com"};
        String[] result = extractEmailDetails(email);
        assertArrayEquals(expected, result);
    }

    /**
     * Tests extracting details from an email that lacks an '@' symbol.
     */
    @Test
    public void testEmailWithoutAtSymbol() {
        // Test with an email that lacks an '@' symbol
        String email = "userexample.com";
        assertThrows(IllegalArgumentException.class, () -> extractEmailDetails(email));
    }

    /**
     * Tests extracting details from an empty string as an email.
     */
    @Test
    public void testEmptyEmail() {
        // Test with an empty string as an email
        String email = "";
        assertThrows(IllegalArgumentException.class, () -> extractEmailDetails(email));
    }

    // Utility method to simulate the extractEmailDetails method for testing purposes
    private String[] extractEmailDetails(String email) {
        // Check if '@' is in the email
        if (!email.contains("@")) {
            throw new IllegalArgumentException("Invalid email address. Email must contain an '@' character.");
        }

        // Split the email at the '@' and assign parts to username and domain
        String[] parts = email.split("@", 2);
        String username = parts[0];
        String domain = parts[1];

        return new String[]{username, domain};
    }
}
```

### Explanation:
1. **Package Declaration**:
   ```java
   package org.real.temp;
   ```
   This sets the namespace for the classes defined within it.

2. **Import Statements**:
   ```java
   import org.junit.Test;
   import static org.junit.Assert.assertArrayEquals;
   import static org.junit.Assert.assertThrows;
   ```
   These imports are necessary for using JUnit annotations and assertion methods.

3. **Class Definition**:
   ```java
   public class Tester {
   ```
   The test class `Tester` is defined to encapsulate the test methods.

4. **Javadoc Comments**:
   ```java
   /**
    * Tests extracting details from a typical email address.
    */
   ```
   Each test method has a Javadoc comment explaining its purpose.

5. **JUnit Annotations**:
   ```java
   @Test
   public void testValidEmail() {
   ```
   The `@Test` annotation marks each method as a test case.

6. **Assertion Methods**:
   - `assertArrayEquals`: Used to compare arrays.
   - `assertThrows`: Used to verify that a specific exception is thrown.

7. **Test Methods**:
   - `testValidEmail`: Tests a typical email address.
   - `testValidEmailWithSubdomain`: Tests an email with a subdomain.
   - `testEmailWithoutAtSymbol`: Tests an email without an '@' symbol.
   - `testEmptyEmail`: Tests an empty email string.

8. **Utility Method**:
   ```java
   private String[] extractEmailDetails(String email) {
       // Implementation of the extractEmailDetails method for testing purposes
   }
   ```
   A utility method `extractEmailDetails` is included to simulate the behavior of the actual method being tested.

This setup ensures that the tests are structured and annotated correctly according to JUnit conventions.