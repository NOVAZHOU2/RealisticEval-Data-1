To convert the given Python unittest test class into a Java JUnit test case, you need to follow these steps:

1. Create a new Java package named `org.real.temp`.
2. Create a new Java class named `Tester` within the `org.real.temp` package.
3. Write JUnit test methods for each of the test cases in your Python unittest.

Here's how you can do it:

### Step 1: Define the Method in Java
First, define the method `extractEmailDetails` in a utility class. Let's assume this method is part of a class named `EmailUtils`.

```java
package org.real.temp;

public class EmailUtils {
    public static String[] extractEmailDetails(String email) {
        if (email == null || !email.contains("@")) {
            return new String[]{"", ""};
        }
        String[] parts = email.split("@");
        return new String[]{parts[0], parts[1]};
    }
}
```

### Step 2: Create the JUnit Test Class
Next, create the JUnit test class `Tester` in the `org.real.temp` package.

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Tester {

    @Test
    public void testExtractEmailDetails() {
        String[] result = EmailUtils.extractEmailDetails("xxx@gmail.com");
        assertEquals("xxx", result[0]);
        assertEquals("gmail.com", result[1]);

        // Additional test cases
        result = EmailUtils.extractEmailDetails("another_user@yahoo.com");
        assertEquals("another_user", result[0]);
        assertEquals("yahoo.com", result[1]);

        result = EmailUtils.extractEmailDetails("no_at_symbol");
        assertEquals("", result[0]);
        assertEquals("", result[1]);

        result = EmailUtils.extractEmailDetails(null);
        assertEquals("", result[0]);
        assertEquals("", result[1]);
    }

    @Test
    public void testEmptyEmail() {
        String[] result = EmailUtils.extractEmailDetails("");
        assertEquals("", result[0]);
        assertEquals("", result[1]);
    }
}
```

### Explanation:
- **Package Declaration**: The `@Test` annotation indicates that this class contains test methods.
- **Test Methods**: Each method prefixed with `test` will be run as a separate test case.
- **Assertions**: The `assertEquals` method is used to verify that the output of the `extractEmailDetails` method matches the expected values.
- **Edge Cases**: Additional test cases are included to handle edge scenarios such as emails without an "@" symbol or empty strings.

This Java JUnit test class should cover the same functionality as your original Python unittest test class. Make sure you have the JUnit Jupiter API dependency in your project to run these tests. If you're using Maven, add the following dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
```

If you're using Gradle, add the following dependencies to your `build.gradle`:

```groovy
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}
```

Now you can run the tests using your IDE or build tool.