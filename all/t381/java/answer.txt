Sure, here's how you can translate the Python function `extract_email_details` into Java:

```java
package org.real.temp;

public class Answer {
    
    /**
     * Extracts the username and mailbox suffix from an email address.
     * eg extractEmailDetails("xxx@gmail.com") returns ("xxx", "gmail.com")
     *
     * @param email the email address to extract details from
     * @return String array containing the username and domain
     */
    public static String[] extractEmailDetails(String email) {
        if (email == null || !email.contains("@")) {
            throw new IllegalArgumentException("Invalid email format");
        }
        
        int atIndex = email.indexOf('@');
        String username = email.substring(0, atIndex);
        String domain = email.substring(atIndex + 1);
        
        return new String[]{username, domain};
    }

    // Main method for testing purposes
    public static void main(String[] args) {
        String[] result = extractEmailDetails("xxx@gmail.com");
        System.out.println("Username: " + result[0]);
        System.out.println("Domain: " + result[1]);
    }
}
```

### Explanation:
- **Package Declaration**: The package declaration is added at the top of the file.
- **Class Definition**: The class `Answer` is defined within the specified package.
- **Method Signature**: The method `extractEmailDetails` is converted to a static method in Java, which is similar to a Python function. It takes a `String` parameter and returns a `String` array.
- **Exception Handling**: An `IllegalArgumentException` is thrown if the input email is null or does not contain an "@" symbol.
- **Substring Extraction**: The `indexOf` method is used to find the position of the "@" symbol, and `substring` is used to extract the username and domain parts.
- **Main Method**: A simple `main` method is provided to test the functionality of the `extractEmailDetails` method.

This Java code should work similarly to your original Python function.