Sure! Here is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

/**
 * Extracts the username and mailbox suffix from an email address.
 * 
 * Example: extractEmailDetails("xxx@gmail.com") returns ("xxx", "gmail.com").
 */
public class Answer {

    /**
     * Extracts the username and domain from an email address.
     *
     * @param email the email address to extract details from
     * @return a String array containing the username and domain
     * @throws IllegalArgumentException if the email does not contain an '@' character
     */
    public static String[] extractEmailDetails(String email) {
        // Check if '@' is in the email
        if (!email.contains("@")) {
            throw new IllegalArgumentException("Invalid email address. Email must contain an '@' character.");
        }

        // Split the email at the '@' and assign parts to username and domain
        String[] parts = email.split("@", 2);
        String username = parts[0];
        String domain = parts[1];

        return new String[]{username, domain};
    }

    // A simple check function to verify the correctness of the extractEmailDetails method
    public static void main(String[] args) {
        try {
            String[] result = extractEmailDetails("xxx@gmail.com");
            System.out.println("Username: " + result[0] + ", Domain: " + result[1]);
        } catch (IllegalArgumentException e) {
            System.err.println(e.getMessage());
        }
    }
}
```

### Explanation:
1. **Package Declaration**:
   ```java
   package org.real.temp;
   ```
   This sets the namespace for the classes defined within it.

2. **Class Definition**:
   ```java
   public class Answer {
   ```
   The class `Answer` is defined to encapsulate the functionality.

3. **Javadoc Comments**:
   ```java
   /**
    * Extracts the username and mailbox suffix from an email address.
    * 
    * Example: extractEmailDetails("xxx@gmail.com") returns ("xxx", "gmail.com").
    */
   ```
   The Javadoc comment provides a brief description of the class and an example.

4. **Method Signature**:
   ```java
   /**
    * Extracts the username and domain from an email address.
    *
    * @param email the email address to extract details from
    * @return a String array containing the username and domain
    * @throws IllegalArgumentException if the email does not contain an '@' character
    */
   public static String[] extractEmailDetails(String email) {
   ```
   The method signature includes Javadoc comments describing the parameters, return type, and possible exceptions.

5. **Exception Handling**:
   ```java
   if (!email.contains("@")) {
       throw new IllegalArgumentException("Invalid email address. Email must contain an '@' character.");
   }
   ```
   If the email does not contain an '@' character, an `IllegalArgumentException` is thrown.

6. **String Manipulation**:
   ```java
   String[] parts = email.split("@", 2);
   String username = parts[0];
   String domain = parts[1];
   ```
   The email is split using the `split` method, and the parts are assigned to `username` and `domain`.

7. **Return Statement**:
   ```java
   return new String[]{username, domain};
   ```
   The method returns an array containing the `username` and `domain`.

8. **Main Method**:
   ```java
   public static void main(String[] args) {
       try {
           String[] result = extractEmailDetails("xxx@gmail.com");
           System.out.println("Username: " + result[0] + ", Domain: " + result[1]);
       } catch (IllegalArgumentException e) {
           System.err.println(e.getMessage());
       }
   }
   ```
   A simple `main` method is included to demonstrate the usage of the `extractEmailDetails` method and to verify its correctness.