Sure, here is the equivalent Java method with the appropriate Javadoc comments and structure:

```java
public class EmailUtils {

    /**
     * Extracts the username and mailbox suffix from an email address.
     * <p>
     * Example: extractEmailDetails("xxx@gmail.com") returns ("xxx", "gmail.com")
     * </p>
     *
     * @param email the email address to extract details from
     * @return a pair containing the username and domain of the email address
     */
    public static Pair<String, String> extractEmailDetails(String email) {
        // Implementation goes here
        int atIndex = email.indexOf('@');
        if (atIndex == -1) {
            return null; // Handle invalid email
        }
        
        String username = email.substring(0, atIndex);
        String domain = email.substring(atIndex + 1);
        
        return new Pair<>(username, domain);
    }
}

// A simple implementation of a Pair class for demonstration purposes
class Pair<T, U> {
    private T first;
    private U second;

    public Pair(T first, U second) {
        this.first = first;
        this.second = second;
    }

    public T getFirst() {
        return first;
    }

    public U getSecond() {
        return second;
    }
}
```

Note that I've included a simple `Pair` class implementation for demonstration purposes. In practice, you might want to use a library like Apache Commons Langâ€™s `Pair` or implement your own more robust version of the `Pair` class.