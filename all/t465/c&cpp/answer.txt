Certainly! The given Python code uses NumPy for matrix-vector multiplication. In C++, we can achieve similar functionality using standard libraries or third-party libraries like Eigen or Armadillo. For simplicity, I'll provide an example using the standard C++ library with basic array operations.

Here's how you can implement the matrix-vector multiplication in C++:

```cpp
#include <iostream>
#include <vector>

// Function to perform matrix-vector multiplication
std::vector<double> matrixVectorMultiplication(const std::vector<std::vector<double>>& matrix, const std::vector<double>& vector) {
    int rows = matrix.size();
    int cols = matrix[0].size();
    int vecSize = vector.size();

    // Check if the dimensions are compatible
    if (cols != vecSize) {
        throw std::invalid_argument("Matrix and vector dimensions are incompatible.");
    }

    std::vector<double> result(rows);

    for (int i = 0; i < rows; ++i) {
        double sum = 0.0;
        for (int j = 0; j < cols; ++j) {
            sum += matrix[i][j] * vector[j];
        }
        result[i] = sum;
    }

    return result;
}

int main() {
    // Example usage
    std::vector<std::vector<double>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    std::vector<double> vector = {1, 2, 3};

    try {
        std::vector<double> result = matrixVectorMultiplication(matrix, vector);
        std::cout << "Result vector: ";
        for (double val : result) {
            std::cout << val << " ";
        }
        std::cout << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Definition**: `matrixVectorMultiplication` takes a 2D vector (`matrix`) and a 1D vector (`vector`) as inputs.
2. **Dimension Checking**: It checks if the number of columns in the matrix matches the size of the vector.
3. **Result Initialization**: It initializes a result vector with the same number of rows as the matrix.
4. **Matrix-Vector Multiplication**: It performs the matrix-vector multiplication using nested loops.
5. **Example Usage**: The `main` function demonstrates how to use the `matrixVectorMultiplication` function and prints the result.

This approach ensures that the functionality remains consistent with the original Python code but adapts to C++ syntax and features.