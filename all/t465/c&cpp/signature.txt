Certainly! Let's convert the given Python function into its equivalent C++ version, ensuring that the functionality, structure, and comments are preserved. We will use C++ comments and adhere to C++ documentation standards.

Hereâ€™s the equivalent C++ code:

```cpp
#include <iostream>
#include <vector>

/**
 * Multiplies a given matrix by a vector.
 *
 * This function performs matrix-vector multiplication using a nested loop.
 *
 * Parameters:
 * matrix (std::vector<std::vector<double>>): A 2D array (matrix) of shape (m, n) where m is the number of rows
 *                                            and n is the number of columns.
 * vector (std::vector<double>): A 1D array (vector) of shape (n,) that represents a vector
 *                               compatible for multiplication with the given matrix.
 *
 * Returns:
 * std::vector<double>: A 1D array (resulting vector) of shape (m,) representing the product of
 *                      the matrix and the vector.
 */
std::vector<double> matrixVectorMultiplication(const std::vector<std::vector<double>>& matrix, const std::vector<double>& vector) {
    // Check if the number of columns in the matrix matches the size of the vector.
    if (matrix.empty() || vector.empty() || matrix[0].size() != vector.size()) {
        throw std::invalid_argument("Matrix columns must match vector size.");
    }

    // Initialize the result vector with the same number of rows as the matrix.
    std::vector<double> result(matrix.size(), 0.0);

    // Perform matrix-vector multiplication using nested loops.
    for (size_t i = 0; i < matrix.size(); ++i) {
        for (size_t j = 0; j < vector.size(); ++j) {
            result[i] += matrix[i][j] * vector[j];
        }
    }

    // Return the resulting vector from the multiplication.
    return result;
}

int main() {
    // Example usage
    std::vector<std::vector<double>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    std::vector<double> vector = {1, 2, 3};

    try {
        std::vector<double> result = matrixVectorMultiplication(matrix, vector);
        std::cout << "Result vector: ";
        for (double value : result) {
            std::cout << value << " ";
        }
        std::cout << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**: 
   - `#include <iostream>` for input/output operations.
   - `#include <vector>` for handling vectors.

2. **Function Documentation**:
   - The function `matrixVectorMultiplication` is documented using a multi-line comment block (`/* ... */`) that describes the parameters and return type.

3. **Function Implementation**:
   - The function checks if the dimensions of the matrix and vector are compatible.
   - It initializes the result vector with the same number of rows as the matrix.
   - Nested loops are used to perform the matrix-vector multiplication.
   - The result vector is returned.

4. **Main Function**:
   - An example matrix and vector are defined.
   - The function is called, and the result is printed.
   - Error handling is included to catch any exceptions thrown during computation.

This approach ensures that the functionality and structure of the original Python code are preserved in C++, along with appropriate comments and documentation.