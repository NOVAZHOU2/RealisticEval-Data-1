Sure, here is the equivalent C++ code with the same functionality and comments:

```cpp
#include <iostream>
#include <vector>

/**
 * Multiplies a given matrix by a vector.
 *
 * @param matrix The input matrix represented as a vector of vectors.
 * @param vector The input vector represented as a vector.
 * @return The resulting vector after multiplying the matrix and the vector.
 */
std::vector<double> matrixVectorMultiplication(const std::vector<std::vector<double>>& matrix, const std::vector<double>& vector) {
    // Check if the dimensions are compatible for multiplication
    size_t numRows = matrix.size();
    size_t numCols = matrix[0].size();
    size_t vecSize = vector.size();

    if (numCols != vecSize) {
        throw std::invalid_argument("Matrix and vector dimensions do not match.");
    }

    // Initialize the resulting vector with zeros
    std::vector<double> result(numRows, 0);

    // Perform matrix-vector multiplication
    for (size_t i = 0; i < numRows; ++i) {
        for (size_t j = 0; j < numCols; ++j) {
            result[i] += matrix[i][j] * vector[j];
        }
    }

    // Return the resulting vector
    return result;
}

int main() {
    // Example usage
    std::vector<std::vector<double>> matrix = {{1, 2}, {3, 4}};
    std::vector<double> vector = {5, 6};

    try {
        std::vector<double> result = matrixVectorMultiplication(matrix, vector);
        
        // Print the result
        for (double val : result) {
            std::cout << val << " ";
        }
        std::cout << std::endl;
    } catch (const std::invalid_argument& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

This C++ code defines a function `matrixVectorMultiplication` that performs matrix-vector multiplication without relying on external libraries like NumPy. It includes error handling for dimension mismatch and demonstrates how to use the function in a simple example.