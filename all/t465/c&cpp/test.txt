Certainly! Let's convert the provided Python unittest test class into an equivalent test class using Catch2 in C++. We will ensure that the functionality and logic of the tests are preserved, making any necessary adjustments for language differences between Python and C++.

Here is the Python unittest test class:

```python
import numpy as np

class TestMatrixVectorMultiplication:
    def test_correct_result(self):
        matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
        vector = np.array([1, 2, 3])
        expected_result = np.array([14, 32, 50])

        result = matrix_vector_multiplication(matrix, vector)
        assert np.allclose(result, expected_result)

    def test_incompatible_dimensions(self):
        matrix = np.array([[1, 2], [3, 4]])
        vector = np.array([1, 2, 3])

        try:
            matrix_vector_multiplication(matrix, vector)
            assert False, "Expected an exception due to incompatible dimensions"
        except ValueError:
            pass

    def test_empty_matrix(self):
        matrix = np.array([])
        vector = np.array([1, 2])

        try:
            matrix_vector_multiplication(matrix, vector)
            assert False, "Expected an exception due to empty matrix"
        except ValueError:
            pass

    def test_empty_vector(self):
        matrix = np.array([[1, 2], [3, 4]])
        vector = np.array([])

        try:
            matrix_vector_multiplication(matrix, vector)
            assert False, "Expected an exception due to empty vector"
        except ValueError:
            pass
```

Now, let's convert this to an equivalent test class using Catch2 in C++.

### C++ Code Using Catch2

First, make sure you have Catch2 installed and included in your project. You can include Catch2 using a header-only library or install it via a package manager.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <stdexcept>

// Function to perform matrix-vector multiplication
std::vector<double> matrixVectorMultiplication(const std::vector<std::vector<double>>& matrix, const std::vector<double>& vector) {
    if (matrix.empty() || vector.empty() || matrix[0].size() != vector.size()) {
        throw std::invalid_argument("Matrix columns must match vector size.");
    }

    std::vector<double> result(matrix.size(), 0.0);

    for (size_t i = 0; i < matrix.size(); ++i) {
        for (size_t j = 0; j < vector.size(); ++j) {
            result[i] += matrix[i][j] * vector[j];
        }
    }

    return result;
}

TEST_CASE("Test Matrix-Vector Multiplication") {
    SECTION("Correct Result") {
        std::vector<std::vector<double>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        std::vector<double> vector = {1, 2, 3};
        std::vector<double> expected_result = {14, 32, 50};

        auto result = matrixVectorMultiplication(matrix, vector);
        REQUIRE_THAT(result, Catch::Approx(expected_result));
    }

    SECTION("Incompatible Dimensions") {
        std::vector<std::vector<double>> matrix = {{1, 2}, {3, 4}};
        std::vector<double> vector = {1, 2, 3};

        REQUIRE_THROWS_AS(matrixVectorMultiplication(matrix, vector), std::invalid_argument);
    }

    SECTION("Empty Matrix") {
        std::vector<std::vector<double>> matrix = {};
        std::vector<double> vector = {1, 2};

        REQUIRE_THROWS_AS(matrixVectorMultiplication(matrix, vector), std::invalid_argument);
    }

    SECTION("Empty Vector") {
        std::vector<std::vector<double>> matrix = {{1, 2}, {3, 4}};
        std::vector<double> vector = {};

        REQUIRE_THROWS_AS(matrixVectorMultiplication(matrix, vector), std::invalid_argument);
    }
}
```

### Explanation:
1. **Header Files**:
   - `#include <catch2/catch_test_macros.hpp>` for Catch2 testing macros.
   - `#include <vector>` for handling vectors.
   - `#include <stdexcept>` for throwing exceptions.

2. **Function Definition**:
   - The `matrixVectorMultiplication` function performs matrix-vector multiplication and throws an exception if the dimensions are incompatible.

3. **Test Class**:
   - The `TEST_CASE` macro defines a test case.
   - Each `SECTION` within the test case defines a specific test scenario.
   - `REQUIRE_THAT` is used to check the approximate equality of the result vector.
   - `REQUIRE_THROWS_AS` is used to verify that the function throws the expected exception.

This approach ensures that the functionality and logic of the Python unittest tests are preserved in C++ using Catch2, with appropriate assertions and error handling.