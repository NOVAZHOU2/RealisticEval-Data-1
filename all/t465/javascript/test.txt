Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while converting the tests to Jest.

### Python Code:
```python
import unittest
import numpy as np

def matrix_vector_multiplication(matrix, vector):
    result = np.dot(matrix, vector)
    return result

class TestMatrixVectorMultiplication(unittest.TestCase):

    def test_case_1(self):
        # Test with a simple 2x2 matrix and a 2-element vector
        matrix = np.array([[1, 2], [3, 4]])
        vector = np.array([5, 6])
        expected_result = np.array([17, 39])  # [1*5 + 2*6, 3*5 + 4*6]
        np.testing.assert_array_equal(matrix_vector_multiplication(matrix, vector), expected_result)

    def test_case_2(self):
        # Test with a 3x3 matrix and a 3-element vector
        matrix = np.array([[1, 0, 2], [0, 1, 2], [1, 1, 0]])
        vector = np.array([3, 4, 5])
        expected_result = np.array([13, 14, 7])  # [1*3 + 0*4 + 2*5, 0*3 + 1*4 + 2*5, 1*3 + 1*4 + 0*5]
        np.testing.assert_array_equal(matrix_vector_multiplication(matrix, vector), expected_result)

    def test_case_3(self):
        # Test with a zero matrix and a vector
        matrix = np.array([[0, 0], [0, 0]])
        vector = np.array([1, 1])
        expected_result = np.array([0, 0])  # Zero matrix multiplied by any vector yields zero
        np.testing.assert_array_equal(matrix_vector_multiplication(matrix, vector), expected_result)

    def test_case_4(self):
        # Test with a matrix having negative values
        matrix = np.array([[-1, -2], [-3, -4]])
        vector = np.array([1, 1])
        expected_result = np.array([-3, -7])  # [-1*1 + -2*1, -3*1 + -4*1]
        np.testing.assert_array_equal(matrix_vector_multiplication(matrix, vector), expected_result)

    def test_case_5(self):
        # Test with non-square matrix (2x3) and a compatible vector (3-element)
        matrix = np.array([[1, 2, 3], [4, 5, 6]])
        vector = np.array([1, 0, 1])
        expected_result = np.array([4, 10])  # [1*1 + 2*0 + 3*1, 4*1 + 5*0 + 6*1]
        np.testing.assert_array_equal(matrix_vector_multiplication(matrix, vector), expected_result)
```

### Equivalent Jest Test Suite:
```javascript
const math = require('mathjs');

function matrixVectorMultiplication(matrix, vector) {
    const result = math.multiply(matrix, vector);
    return result;
}

describe('TestMatrixVectorMultiplication', () => {
    it('test_case_1', () => {
        // Test with a simple 2x2 matrix and a 2-element vector
        const matrix = [[1, 2], [3, 4]];
        const vector = [5, 6];
        const expected_result = [17, 39];  // [1*5 + 2*6, 3*5 + 4*6]
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expected_result);
    });

    it('test_case_2', () => {
        // Test with a 3x3 matrix and a 3-element vector
        const matrix = [[1, 0, 2], [0, 1, 2], [1, 1, 0]];
        const vector = [3, 4, 5];
        const expected_result = [13, 14, 7];  // [1*3 + 0*4 + 2*5, 0*3 + 1*4 + 2*5, 1*3 + 1*4 + 0*5]
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expected_result);
    });

    it('test_case_3', () => {
        // Test with a zero matrix and a vector
        const matrix = [[0, 0], [0, 0]];
        const vector = [1, 1];
        const expected_result = [0, 0];  // Zero matrix multiplied by any vector yields zero
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expected_result);
    });

    it('test_case_4', () => {
        // Test with a matrix having negative values
        const matrix = [[-1, -2], [-3, -4]];
        const vector = [1, 1];
        const expected_result = [-3, -7];  // [-1*1 + -2*1, -3*1 + -4*1]
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expected_result);
    });

    it('test_case_5', () => {
        // Test with non-square matrix (2x3) and a compatible vector (3-element)
        const matrix = [[1, 2, 3], [4, 5, 6]];
        const vector = [1, 0, 1];
        const expected_result = [4, 10];  // [1*1 + 2*0 + 3*1, 4*1 + 5*0 + 6*1]
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expected_result);
    });
});
```

### Explanation:
1. **Import Statement**: The `mathjs` library is imported at the beginning.
2. **Function Definition**: The `matrixVectorMultiplication` function is defined to perform the matrix-vector multiplication using `math.multiply`.
3. **Test Suite Structure**:
   - The `describe` block defines the test suite.
   - Each `it` block defines a specific test case.
4. **Assertions**:
   - The `expect` function is used to assert the equality of the results.
   - `toEqual` is used to compare arrays, which is equivalent to `np.testing.assert_array_equal` in Python.

This ensures that the functionality and logic of the tests are preserved, and the structure is clear and follows Jest conventions.