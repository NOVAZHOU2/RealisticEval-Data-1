Sure! Below is the equivalent TypeScript test case using Jest for the provided Python unittest test class:

```typescript
import { expect } from '@jest/globals';
import { matrixVectorMultiplication } from './path-to-your-matrix-vector-multiplication-file'; // Adjust the path accordingly

describe('Matrix-Vector Multiplication', () => {
    it('should correctly multiply a matrix by a vector', () => {
        const matrix = [
            [1, 2, 3],
            [4, 5, 6]
        ];
        const vector = [7, 8, 9];
        const expected = [50, 122];

        const result = matrixVectorMultiplication(matrix, vector);

        expect(result).toEqual(expected);
    });

    it('should handle empty vectors and matrices', () => {
        const matrix = [];
        const vector = [];
        const expected = [];

        const result = matrixVectorMultiplication(matrix, vector);

        expect(result).toEqual(expected);
    });

    it('should throw an error if the dimensions do not match', () => {
        const matrix = [
            [1, 2, 3],
            [4, 5, 6]
        ];
        const vector = [7, 8]; // Incorrect dimension
        const expectedError = 'Dimension mismatch';

        expect(() => matrixVectorMultiplication(matrix, vector)).toThrow(expectedError);
    });
});
```

### Explanation:
1. **Import Statements**: The `expect` function from Jest is imported at the beginning.
2. **Describe Block**: The tests are grouped under a `describe` block titled "Matrix-Vector Multiplication".
3. **It Blocks**: Individual test cases are defined within `it` blocks.
   - **Correct Multiplication**: Tests if the function correctly multiplies a matrix by a vector.
   - **Empty Vectors/Matrices**: Checks if the function handles empty vectors and matrices gracefully.
   - **Dimension Mismatch**: Verifies that the function throws an error when the dimensions of the matrix and vector do not match.

Make sure to adjust the import statement to point to the correct location of your `matrixVectorMultiplication` function in your TypeScript project.