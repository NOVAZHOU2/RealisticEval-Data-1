Sure! Here’s how you can convert the given Python code to TypeScript. The main task here is to translate the NumPy operation into something that can be done using a library like `mathjs` or a simple loop since TypeScript doesn't have a built-in equivalent to NumPy. For this example, I'll use `mathjs` which provides similar functionalities.

First, install `mathjs` if you haven't already:
```sh
npm install mathjs
```

Now, here’s the TypeScript code:

```typescript
import * as math from 'mathjs';

// Define types for the inputs
type Matrix = number[][];
type Vector = number[];

/**
 * Performs matrix-vector multiplication.
 * @param matrix - A 2D array representing the matrix.
 * @param vector - An array representing the vector.
 * @returns The resulting vector after multiplication.
 */
function matrixVectorMultiplication(matrix: Matrix, vector: Vector): Vector {
    const result = math.multiply(matrix, vector);
    return result;
}

// Example usage
const matrix: Matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];

const vector: Vector = [1, 0, 1];

const result = matrixVectorMultiplication(matrix, vector);
console.log(result); // Output will be the result of matrix-vector multiplication
```

### Explanation:
1. **Imports**: We import `math` from `mathjs` to handle matrix operations.
2. **Types**: We define types `Matrix` and `Vector` to represent the input data.
3. **Function Definition**: The function `matrixVectorMultiplication` takes a matrix and a vector as arguments and returns the result of their multiplication.
4. **Example Usage**: We provide an example of how to use the function with a sample matrix and vector.

This approach ensures that the functionality remains consistent with the original Python code, while adapting it to TypeScript's static type system and using a suitable library for mathematical operations.