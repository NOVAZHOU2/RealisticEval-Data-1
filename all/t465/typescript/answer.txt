Sure! Here’s how you can convert the given Python code to TypeScript. Since TypeScript doesn't have direct support for NumPy, we'll use a similar library such as `mathjs` to handle matrix and vector operations. 

First, install `mathjs` using npm:

```sh
npm install mathjs
```

Now, here’s the equivalent TypeScript code:

```typescript
import * as math from 'mathjs';

// Define the types for the matrix and vector
type Matrix = number[][];
type Vector = number[];

/**
 * Performs matrix-vector multiplication.
 * @param matrix - The matrix represented as a 2D array of numbers.
 * @param vector - The vector represented as an array of numbers.
 * @returns The result of the matrix-vector multiplication.
 */
function matrixVectorMultiplication(matrix: Matrix, vector: Vector): Vector {
    const result = math.multiply(matrix, vector);
    return result;
}

// Example usage
const matrix: Matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];

const vector: Vector = [1, 0, 1];

const result = matrixVectorMultiplication(matrix, vector);
console.log(result); // Output will be the result of the matrix-vector multiplication
```

In this TypeScript code:
- We import `mathjs` which provides functions for matrix and vector operations.
- We define types `Matrix` and `Vector` to represent the input data.
- The `matrixVectorMultiplication` function uses `math.multiply` to perform the matrix-vector multiplication.
- An example usage demonstrates how to call the function with a sample matrix and vector.

This approach ensures that the functionality remains consistent with the original Python code, while adapting to TypeScript's static type system and using a suitable library for mathematical operations.