Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class is placed in the package `org.real.temp` and named `Tester`. It uses JUnit annotations and assertion methods to ensure the functionality and logic of the tests are preserved.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

/**
 * Test class for matrix-vector multiplication.
 */
public class Tester {

    private static final double[] ZERO_VECTOR = {0, 0};
    private static final double[] EXPECTED_RESULT_1 = {17, 39};
    private static final double[] EXPECTED_RESULT_2 = {13, 14, 7};
    private static final double[] EXPECTED_RESULT_3 = {0, 0};
    private static final double[] EXPECTED_RESULT_4 = {-3, -7};
    private static final double[] EXPECTED_RESULT_5 = {4, 10};

    @Test
    public void testCase1() {
        // Test with a simple 2x2 matrix and a 2-element vector
        double[][] matrix = {{1, 2}, {3, 4}};
        double[] vector = {5, 6};
        double[] expectedResult = EXPECTED_RESULT_1;

        double[] result = matrixVectorMultiplication(matrix, vector);
        assertArrayEquals(expectedResult, result, 0.0);
    }

    @Test
    public void testCase2() {
        // Test with a 3x3 matrix and a 3-element vector
        double[][] matrix = {{1, 0, 2}, {0, 1, 2}, {1, 1, 0}};
        double[] vector = {3, 4, 5};
        double[] expectedResult = EXPECTED_RESULT_2;

        double[] result = matrixVectorMultiplication(matrix, vector);
        assertArrayEquals(expectedResult, result, 0.0);
    }

    @Test
    public void testCase3() {
        // Test with a zero matrix and a vector
        double[][] matrix = {{0, 0}, {0, 0}};
        double[] vector = {1, 1};
        double[] expectedResult = ZERO_VECTOR;

        double[] result = matrixVectorMultiplication(matrix, vector);
        assertArrayEquals(expectedResult, result, 0.0);
    }

    @Test
    public void testCase4() {
        // Test with a matrix having negative values
        double[][] matrix = {{-1, -2}, {-3, -4}};
        double[] vector = {1, 1};
        double[] expectedResult = EXPECTED_RESULT_4;

        double[] result = matrixVectorMultiplication(matrix, vector);
        assertArrayEquals(expectedResult, result, 0.0);
    }

    @Test
    public void testCase5() {
        // Test with non-square matrix (2x3) and a compatible vector (3-element)
        double[][] matrix = {{1, 2, 3}, {4, 5, 6}};
        double[] vector = {1, 0, 1};
        double[] expectedResult = EXPECTED_RESULT_5;

        double[] result = matrixVectorMultiplication(matrix, vector);
        assertArrayEquals(expectedResult, result, 0.0);
    }

    // Method for matrix-vector multiplication
    private double[] matrixVectorMultiplication(double[][] matrix, double[] vector) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        if (cols != vector.length) {
            throw new IllegalArgumentException("Matrix columns must match vector length.");
        }

        double[] result = new double[rows];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i] += matrix[i][j] * vector[j];
            }
        }

        return result;
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Import Statements**: Import the necessary JUnit classes and methods.
3. **Class Definition**: The class `Tester` is defined within the package.
4. **Javadoc Comments**: Each test method includes a brief comment describing the test case.
5. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test method.
6. **Assertion Methods**: The `assertArrayEquals` method is used to compare the expected and actual results.
7. **Test Cases**: Each test case is implemented with the same logic and data as the Python test cases.
8. **Matrix-Vector Multiplication Method**: The `matrixVectorMultiplication` method is included within the test class for convenience. Alternatively, it can be placed in a separate utility class if desired.

This Java code preserves the functionality and logic of the original Python unittest class while adhering to Java's syntax and JUnit conventions.