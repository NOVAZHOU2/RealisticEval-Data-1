Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest test class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It will include appropriate JUnit annotations and assertions to validate the `matrixVectorMultiplication` method.

### Java Test Class

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;

/**
 * Test class for matrix-vector multiplication.
 */
public class Tester {

    /**
     * Tests the matrixVectorMultiplication method with a sample matrix and vector.
     */
    @Test
    public void testMatrixVectorMultiplication() {
        // Sample matrix
        double[][] matrix = {
            {1, 2, 3},
            {4, 5, 6}
        };

        // Sample vector
        double[] vector = {7, 8, 9};

        // Expected result
        double[] expectedResult = {50, 122};

        // Actual result
        double[] actualResult = matrixVectorMultiplication(matrix, vector);

        // Verify the result
        assertArrayEquals(expectedResult, actualResult, 1e-6);
    }

    /**
     * Multiplies a given matrix by a vector.
     *
     * @param matrix A 2D array (matrix) of shape (m, n) where m is the number of rows
     *               and n is the number of columns.
     * @param vector A 1D array (vector) of shape (n,) that represents a vector
     *               compatible for multiplication with the given matrix.
     * @return A 1D array (resulting vector) of shape (m,) representing the product of
     *         the matrix and the vector.
     */
    private static double[] matrixVectorMultiplication(double[][] matrix, double[] vector) {
        // Validate the dimensions of the matrix and vector
        if (matrix == null || vector == null || matrix.length == 0 || matrix[0].length != vector.length) {
            throw new IllegalArgumentException("Matrix columns and vector size must match.");
        }

        int rows = matrix.length;
        int cols = matrix[0].length;

        // Initialize the result vector
        double[] result = new double[rows];

        // Perform matrix-vector multiplication
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i] += matrix[i][j] * vector[j];
            }
        }

        return result;
    }
}
```

### Explanation:

1. **Package and Class**: The test class is placed in the `org.real.temp` package and named `Tester`.
2. **JUnit Annotations**:
   - `@Test`: Indicates that the method is a test method.
3. **Test Method**:
   - `testMatrixVectorMultiplication`: Tests the `matrixVectorMultiplication` method with a sample matrix and vector.
4. **Assertions**:
   - `assertArrayEquals`: Compares the expected result with the actual result, allowing for a small tolerance (`1e-6`) due to floating-point arithmetic.
5. **Method Implementation**:
   - `matrixVectorMultiplication`: The method performs matrix-vector multiplication and includes validation for the input dimensions.

This Java test class ensures that the functionality and logic of the tests are preserved while adhering to Java's syntax and conventions.