Certainly! Below is the equivalent Java code for the given Python function, which performs matrix-vector multiplication using Java's approach with the specified package and class names. Since Java does not have a built-in library like NumPy, we will use a simple implementation to perform the matrix-vector multiplication.

```java
package org.real.temp;

public class Answer {

    /**
     * Performs matrix-vector multiplication.
     * 
     * @param matrix The matrix represented as a 2D array.
     * @param vector The vector represented as a 1D array.
     * @return The resulting vector after multiplying the matrix by the vector.
     */
    public static double[] matrixVectorMultiplication(double[][] matrix, double[] vector) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        
        // Ensure the dimensions are compatible for multiplication
        if (cols != vector.length) {
            throw new IllegalArgumentException("Matrix columns and vector size must match.");
        }

        double[] result = new double[rows];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i] += matrix[i][j] * vector[j];
            }
        }

        return result;
    }

    public static void main(String[] args) {
        // Example usage:
        double[][] matrix = {
            {1, 2, 3},
            {4, 5, 6}
        };
        double[] vector = {7, 8, 9};

        double[] result = matrixVectorMultiplication(matrix, vector);
        System.out.println("Resulting vector: ");
        for (double val : result) {
            System.out.println(val);
        }
    }
}
```

### Explanation:
- **Package and Class**: The code is organized within the `org.real.temp` package and the `Answer` class.
- **Method**: The `matrixVectorMultiplication` method takes a 2D array representing the matrix and a 1D array representing the vector.
- **Validation**: It checks if the number of columns in the matrix matches the length of the vector before performing the multiplication.
- **Multiplication Logic**: It uses nested loops to compute the dot product of each row of the matrix with the vector.
- **Example Usage**: The `main` method demonstrates how to call the `matrixVectorMultiplication` method with example data and prints the resulting vector.

This Java code mirrors the functionality of the original Python code while adhering to Java's syntax and best practices.