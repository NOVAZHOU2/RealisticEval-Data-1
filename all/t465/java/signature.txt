Certainly! Below is the equivalent Java code for the given Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

/**
 * A class that provides methods for matrix and vector operations.
 */
public class Answer {

    /**
     * Multiplies a given matrix by a vector.
     *
     * @param matrix A 2D array (matrix) of shape (m, n) where m is the number of rows
     *               and n is the number of columns.
     * @param vector A 1D array (vector) of shape (n,) that represents a vector
     *               compatible for multiplication with the given matrix.
     * @return A 1D array (resulting vector) of shape (m,) representing the product of
     *         the matrix and the vector.
     */
    public static double[] matrixVectorMultiplication(double[][] matrix, double[] vector) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        if (cols != vector.length) {
            throw new IllegalArgumentException("Matrix columns must match vector length.");
        }

        double[] result = new double[rows];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i] += matrix[i][j] * vector[j];
            }
        }

        return result;
    }

    public static void main(String[] args) {
        // Example usage
        double[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        double[] vector = {1, 0, 1};

        double[] result = matrixVectorMultiplication(matrix, vector);

        // Print the result
        System.out.println("Result:");
        for (double value : result) {
            System.out.println(value);
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Class Definition**: The class `Answer` is defined within the package.
3. **Javadoc Comments**: The method `matrixVectorMultiplication` includes Javadoc comments that describe the parameters and return values.
4. **Method Signature**: The method signature `matrixVectorMultiplication` takes two parameters: `matrix` (a 2D array of `double`) and `vector` (a 1D array of `double`).
5. **Error Handling**: The method checks if the number of columns in the matrix matches the length of the vector. If not, it throws an `IllegalArgumentException`.
6. **Multiplication Logic**: The nested loops perform the matrix-vector multiplication by iterating over each row and column of the matrix.
7. **Example Usage**: The `main` method demonstrates how to use the `matrixVectorMultiplication` method with example data and prints the result.

This Java code preserves the functionality and structure of the original Python code while adhering to Java's syntax and best practices.