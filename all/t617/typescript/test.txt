Hereâ€™s the equivalent Jest test class in TypeScript for your provided Python `unittest` code:

```typescript
import { parseJsonFile } from './yourModule'; // Adjust the import path as necessary
import * as fs from 'fs';

describe('Tester', () => {
    afterEach(() => {
        // Cleanup any created temporary files after each test
        const files = ['temp_valid.json', 'temp_empty.json', 'temp_not_json.txt', 'temp_array.json'];
        files.forEach(file => {
            if (fs.existsSync(file)) {
                fs.unlinkSync(file);
            }
        });
    });

    test('valid json', () => {
        const jsonContent = '{"name": "John", "age": 30}';
        const path = 'temp_valid.json';
        
        fs.writeFileSync(path, jsonContent);
        const result = parseJsonFile(path);
        
        expect(result.name).toBe("John");
        expect(result.age).toBe(30);
    });

    test('empty json', () => {
        const jsonContent = '{}';
        const path = 'temp_empty.json';
        
        fs.writeFileSync(path, jsonContent);
        const result = parseJsonFile(path);
        
        expect(Object.keys(result).length).toBe(0);
    });

    test('null input', () => {
        expect(() => {
            parseJsonFile(null as any);
        }).toThrow();
    });

    test('non-json file', () => {
        const notJsonContent = "Hello, World!";
        const path = 'temp_not_json.txt';
        
        fs.writeFileSync(path, notJsonContent);
        
        expect(() => {
            parseJsonFile(path);
        }).toThrow(SyntaxError);
    });

    test('json with array', () => {
        const jsonContent = '{"names": ["John", "Doe"]}';
        const path = 'temp_array.json';
        
        fs.writeFileSync(path, jsonContent);
        const result = parseJsonFile(path);
        
        expect(result.names).toBeDefined();
    });
});
```

### Key Changes:
1. **Import Statements**: Adjust the import path for `parseJsonFile` as needed.
2. **Test Structure**: Used `describe` and `test` to structure the tests in Jest.
3. **Assertions**: Mapped Python assertions to Jest's `expect` functions.
4. **Cleanup**: Implemented `afterEach` to remove temporary files after each test.
5. **Error Handling**: Used `toThrow` for testing exceptions. 

This structure preserves the functionality and logic of your original tests.