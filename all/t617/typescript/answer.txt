Here's the equivalent TypeScript code for your Python function:

```typescript
import * as fs from 'fs';

interface ParsedJson {
    [key: string]: any;
}

function parseJsonFile(filePath: string): ParsedJson {
    /**
     * Parses a JSON file and stores its contents in a dictionary.
     *
     * This function reads a JSON file from the specified file path, parses the JSON data, and stores
     * each key-value pair from the JSON object into a dictionary.
     *
     * @param filePath The path to the JSON file to be parsed. The file must exist and contain valid JSON.
     * @returns A dictionary containing the key-value pairs parsed from the JSON file.
     *          The function returns an empty dictionary if the file is empty.
     */
    let resultDict: ParsedJson = {};

    try {
        const data = fs.readFileSync(filePath, 'utf-8');
        resultDict = JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error(`File not found: ${filePath}`);
        } else if (error instanceof SyntaxError) {
            console.error(`Error decoding JSON from the file: ${filePath}`);
        }
    }

    return resultDict;
}
```

This TypeScript code maintains the structure and logic of the original Python code while adapting it to TypeScript's syntax and type system.