Certainly! Hereâ€™s the equivalent C++ test class using the Catch2 testing framework. The goal is to preserve the functionality and logic of the tests while adapting them to C++ and Catch2.

First, make sure you have the Catch2 library included in your project. You can download it from [here](https://github.com/catchorg/Catch2).

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <unordered_map>
#include <vector>
#include <string>

// Function to sanitize a dictionary by removing specific keys.
std::unordered_map<std::string, std::string> sanitize_data(
    const std::unordered_map<std::string, std::string>& data,
    const std::vector<std::string>* key_to_remove = nullptr
) {
    /*
     * Remove the corresponding sensitive questions in the given dictionary based on the given key_to_remove list.
     *
     * Args:
     *     data (std::unordered_map<std::string, std::string>): Original question dictionary.
     *     key_to_remove (std::vector<std::string>*): Key-to-remove list.
     *
     * Returns:
     *     std::unordered_map<std::string, std::string>: Sanitized dictionary.
     */

    static const std::vector<std::string> default_keys_to_remove = {
        "email", "pc_conflicts", "metadata", "eligible_student_paper_prize", "talk_poster",
        "submitted_at", "decision", "status", "submitted", "submission"
    };

    const std::vector<std::string>& keys_to_remove = (key_to_remove == nullptr) ? default_keys_to_remove : *key_to_remove;

    std::unordered_map<std::string, std::string> sanitized;
    for (const auto& item : data) {
        if (std::find(keys_to_remove.begin(), keys_to_remove.end(), item.first) == keys_to_remove.end()) {
            sanitized[item.first] = item.second;
        }
    }

    return sanitized;
}

TEST_CASE("TestSanitizeData", "[SanitizeData]") {
    SECTION("test_empty_dict") {
        // Test with an empty dictionary.
        std::unordered_map<std::string, std::string> data = {};
        std::vector<std::string> key_to_remove = {"email", "metadata"};

        std::unordered_map<std::string, std::string> expected = {};
        REQUIRE(sanitize_data(data, &key_to_remove) == expected);
    }

    SECTION("test_remove_default_keys") {
        // Test removing default keys from a nested structure.
        std::unordered_map<std::string, std::string> data = {
            {"name", "John Doe"},
            {"email", "johndoe@example.com"},
            {"metadata", "version: 1, timestamp: 2021-07-10, status: pending"},
            {"comments", "Good, Needs review"}
        };
        std::vector<std::string> key_to_remove = {"email", "metadata"};
        std::unordered_map<std::string, std::string> expected = {
            {"name", "John Doe"},
            {"comments", "Good, Needs review"}
        };
        REQUIRE(sanitize_data(data, &key_to_remove) == expected);
    }

    SECTION("test_specified_key_to_remove") {
        // Test removing a specified key from the dictionary.
        std::unordered_map<std::string, std::string> data = {
            {"name", "John Doe"},
            {"location", "Earth"},
            {"email", "johndoe@example.com"}
        };
        std::unordered_map<std::string, std::string> expected = {
            {"name", "John Doe"},
            {"location", "Earth"}
        };
        REQUIRE(sanitize_data(data, &std::vector<std::string>{"email"}) == expected);
    }
}
```

### Explanation:
1. **Headers**: The code includes necessary headers (`<catch2/catch_test_macros.hpp>`, `<unordered_map>`, `<vector>`, `<string>`).
2. **Function Definition**: The `sanitize_data` function is defined with appropriate C++ types and logic.
3. **Catch2 Test Class**:
   - The `TEST_CASE` macro defines the test suite.
   - Each `SECTION` within the test case corresponds to a specific test case in the Python code.
4. **Assertions**:
   - `REQUIRE` is used to assert the equality of the sanitized dictionary with the expected result.
5. **Test Data**:
   - The test data is structured similarly to the Python code, ensuring that the tests cover the same scenarios.

This code preserves the functionality and logic of the original Python tests while adapting them to the Catch2 testing framework in C++.