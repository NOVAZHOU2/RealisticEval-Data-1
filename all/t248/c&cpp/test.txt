To convert the provided Python unittest test class to a C++ test case using Catch2, you need to follow these steps:

1. Install Catch2 if you haven't already.
2. Write the equivalent C++ test cases for your Python functions.

Here's an example of how you can write the C++ test cases using Catch2:

```cpp
#include <catch2/catch.hpp>
#include <iostream>
#include <map>
#include <vector>

// Function to be tested
std::map<std::string, std::string> sanitizeData(const std::map<std::string, std::string>& data, const std::vector<std::string>& keyToRemove = {}) {
    std::map<std::string, std::string> sanitizedData;
    for (const auto& pair : data) {
        if (std::find(keyToRemove.begin(), keyToRemove.end(), pair.first) == keyToRemove.end()) {
            sanitizedData.insert(pair);
        }
    }
    return sanitizedData;
}

TEST_CASE("sanitizeData removes specified keys", "[sanitizeData]") {
    // Test case 1: No keys to remove
    std::map<std::string, std::string> input1 = {{"name", "John"}, {"age", "30"}, {"city", "New York"}};
    std::vector<std::string> keysToRemove1 = {};
    std::map<std::string, std::string> expectedOutput1 = input1;
    REQUIRE(sanitizeData(input1, keysToRemove1) == expectedOutput1);

    // Test case 2: Single key to remove
    std::map<std::string, std::string> input2 = {{"name", "John"}, {"age", "30"}, {"city", "New York"}};
    std::vector<std::string> keysToRemove2 = {"age"};
    std::map<std::string, std::string> expectedOutput2 = {{"name", "John"}, {"city", "New York"}};
    REQUIRE(sanitizeData(input2, keysToRemove2) == expectedOutput2);

    // Test case 3: Multiple keys to remove
    std::map<std::string, std::string> input3 = {{"name", "John"}, {"age", "30"}, {"city", "New York"}, {"email", "john@example.com"}};
    std::vector<std::string> keysToRemove3 = {"age", "email"};
    std::map<std::string, std::string> expectedOutput3 = {{"name", "John"}, {"city", "New York"}};
    REQUIRE(sanitizeData(input3, keysToRemove3) == expectedOutput3);

    // Test case 4: Key not present in input
    std::map<std::string, std::string> input4 = {{"name", "John"}, {"age", "30"}, {"city", "New York"}};
    std::vector<std::string> keysToRemove4 = {"address"};
    std::map<std::string, std::string> expectedOutput4 = input4;
    REQUIRE(sanitizeData(input4, keysToRemove4) == expectedOutput4);
}
```

### Explanation:

1. **Include Catch2 Header**: The `#include <catch2/catch.hpp>` directive includes the Catch2 header file which is necessary for writing tests.
  
2. **Function Implementation**: The `sanitizeData` function is implemented similarly to your Python function but uses C++ standard library containers (`std::map` and `std::vector`).

3. **Test Cases**:
   - Each test case is defined within a `TEST_CASE` block.
   - The `REQUIRE` macro is used to assert that the output of `sanitizeData` matches the expected result.
   
4. **Test Case Details**:
   - **Test case 1**: No keys to remove.
   - **Test case 2**: Single key to remove.
   - **Test case 3**: Multiple keys to remove.
   - **Test case 4**: Key not present in input.

Make sure you have Catch2 installed and properly set up in your project environment before running these tests. If you're using a build system like CMake, you can add Catch2 as a subdirectory or link it to your project accordingly.