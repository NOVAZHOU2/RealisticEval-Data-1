Sure, here is the equivalent C++ code with the same function signature and comments:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>

/**
 * @brief Remove the corresponding sensitive questions in the given dictionary based on the given key_to_remove list.
 *
 * @param data The original question dictionary.
 * @param key_to_remove The list of keys to remove.
 * @return std::unordered_map<std::string, std::string> The removed dictionary.
 */
std::unordered_map<std::string, std::string> sanitizeData(const std::unordered_map<std::string, std::string>& data, const std::vector<std::string>& keyToRemove) {
    std::unordered_map<std::string, std::string> sanitizedData;
    
    for (const auto& pair : data) {
        if (std::find(keyToRemove.begin(), keyToRemove.end(), pair.first) == keyToRemove.end()) {
            sanitizedData[pair.first] = pair.second;
        }
    }

    return sanitizedData;
}
```

This C++ function `sanitizeData` takes an unordered map (`std::unordered_map`) representing the dictionary and a vector (`std::vector`) of strings representing the keys to remove. It returns a new unordered map with the specified keys removed.