Certainly! Hereâ€™s the equivalent C++ code for the provided Python function, including the translation of type annotations, comments, and docstrings into C++ standards:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>

// Function to sanitize a dictionary by removing specific keys.
std::unordered_map<std::string, std::string> sanitize_data(
    const std::unordered_map<std::string, std::string>& data,
    const std::vector<std::string>* key_to_remove = nullptr
) {
    /*
     * Remove the corresponding sensitive questions in the given dictionary based on the given key_to_remove list.
     *
     * Args:
     *     data (std::unordered_map<std::string, std::string>): Original question dictionary.
     *     key_to_remove (std::vector<std::string>*): Key-to-remove list.
     *
     * Returns:
     *     std::unordered_map<std::string, std::string>: Sanitized dictionary.
     */

    static const std::vector<std::string> default_keys_to_remove = {
        "email", "pc_conflicts", "metadata", "eligible_student_paper_prize", "talk_poster",
        "submitted_at", "decision", "status", "submitted", "submission"
    };

    const std::vector<std::string>& keys_to_remove = (key_to_remove == nullptr) ? default_keys_to_remove : *key_to_remove;

    std::unordered_map<std::string, std::string> sanitized;
    for (const auto& item : data) {
        if (std::find(keys_to_remove.begin(), keys_to_remove.end(), item.first) == keys_to_remove.end()) {
            sanitized[item.first] = item.second;
        }
    }

    return sanitized;
}

int main() {
    // Example usage
    std::unordered_map<std::string, std::string> input_data = {
        {"name", "John Doe"},
        {"email", "johndoe@example.com"},
        {"metadata", "version: 1, timestamp: 2023-01-01T12:00:00Z"},
        {"papers", "Paper 1, Paper 2"}
    };

    std::unordered_map<std::string, std::string> sanitized_data = sanitize_data(input_data);

    for (const auto& item : sanitized_data) {
        std::cout << item.first << ": " << item.second << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Headers**: The code includes necessary headers (`<iostream>`, `<string>`, `<vector>`, `<unordered_map>`).
2. **Type Annotations**: The Python type annotations `Dict` and `List` are translated to `std::unordered_map<std::string, std::string>` and `std::vector<std::string>` respectively.
3. **Function Signature**: The function signature is defined with appropriate C++ types.
4. **Docstring and Comments**:
   - Multi-line comments are used for the function documentation.
   - Single-line comments are used for brief explanations.
5. **Implementation**:
   - The function checks if `key_to_remove` is `nullptr` and uses a default list if it is.
   - It iterates over the items in the input dictionary and filters out the keys specified in `keys_to_remove`.
6. **Example Usage**: The `main` function demonstrates how to use the `sanitize_data` function and prints the sanitized dictionary.

This code preserves the original purpose and structure of the Python code while adapting it to C++ standards.