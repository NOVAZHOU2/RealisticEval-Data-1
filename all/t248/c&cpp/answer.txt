Hereâ€™s the equivalent C++ code for the provided Python function. This code will recursively sanitize a JSON object by removing specific keys:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

// Function to sanitize a JSON object by removing specific keys.
json sanitize_data(const json& data, const std::set<std::string>* key_to_remove = nullptr) {
    static const std::set<std::string> default_keys_to_remove = {
        "email", "pc_conflicts", "metadata", "eligible_student_paper_prize", "talk_poster",
        "submitted_at", "decision", "status", "submitted", "submission"
    };

    const std::set<std::string>& keys_to_remove = (key_to_remove == nullptr) ? default_keys_to_remove : *key_to_remove;

    if (data.is_object()) {
        json sanitized;
        for (const auto& item : data.items()) {
            if (keys_to_remove.find(item.key()) == keys_to_remove.end()) {
                sanitized[item.key()] = sanitize_data(item.value());
            }
        }
        return sanitized;
    } else if (data.is_array()) {
        json sanitized;
        for (const auto& value : data) {
            sanitized.push_back(sanitize_data(value));
        }
        return sanitized;
    } else {
        return data;
    }
}

int main() {
    // Example usage
    std::string input_json = R"({
        "name": "John Doe",
        "email": "johndoe@example.com",
        "metadata": {
            "version": 1,
            "timestamp": "2023-01-01T12:00:00Z"
        },
        "papers": [
            {
                "title": "Paper 1",
                "submitted_at": "2023-01-01T12:00:00Z"
            },
            {
                "title": "Paper 2",
                "status": "accepted"
            }
        ]
    })";

    json input = json::parse(input_json);
    json sanitized = sanitize_data(input);

    std::cout << sanitized.dump(4) << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**: The code includes necessary headers (`<iostream>`, `<string>`, `<vector>`, `<nlohmann/json.hpp>`).
2. **Using `nlohmann::json`**: The `nlohmann::json` library is used to handle JSON objects in C++.
3. **Function Definition**: The `sanitize_data` function takes a `json` object and an optional pointer to a set of strings representing keys to remove.
4. **Default Keys to Remove**: If no keys are provided, it uses a predefined set of keys to remove.
5. **Recursive Sanitization**:
   - For objects, it iterates over each key-value pair and removes the specified keys.
   - For arrays, it applies the sanitization recursively to each element.
6. **Example Usage**: The `main` function demonstrates parsing a JSON string, sanitizing it, and printing the result.

This code maintains the functionality and logic of the original Python code while adapting to C++ syntax and features.