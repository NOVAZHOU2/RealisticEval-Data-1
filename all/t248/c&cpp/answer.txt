Sure! Below is the equivalent C++ and C code for the provided Python function `sanitize_data`. Note that C++ does not have built-in support for dictionaries like Python, so we'll use a custom structure or a map from the `<map>` library.

### C++ Code

```cpp
#include <iostream>
#include <map>
#include <vector>
#include <string>

std::map<std::string, std::string> sanitizeData(const std::map<std::string, std::string>& data, const std::vector<std::string>& keyToRemove = {}) {
    std::map<std::string, std::string> sanitizedData;
    for (const auto& pair : data) {
        if (std::find(keyToRemove.begin(), keyToRemove.end(), pair.first) == keyToRemove.end()) {
            sanitizedData[pair.first] = pair.second;
        }
    }
    return sanitizedData;
}

int main() {
    std::map<std::string, std::string> data = {{"name", "John"}, {"age", "30"}, {"address", "123 Main St"}};
    std::vector<std::string> keyToRemove = {"age"};

    auto sanitizedData = sanitizeData(data, keyToRemove);

    for (const auto& pair : sanitizedData) {
        std::cout << pair.first << ": " << pair.second << std::endl;
    }

    return 0;
}
```

### Explanation of C++ Code
- We define a function `sanitizeData` that takes a constant reference to a `std::map` (representing the dictionary) and a constant reference to a `std::vector` (representing the list of keys to remove).
- We create an empty `std::map` called `sanitizedData`.
- We iterate through each key-value pair in the input `data` map.
- If the current key is not found in the `keyToRemove` vector, we add it to the `sanitizedData` map.
- Finally, we return the `sanitizedData` map.

### C Code

In C, there is no direct equivalent to Python's dictionary or list types. However, we can simulate this using structures and linked lists. Below is a simplified example using a linked list:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node {
    char* key;
    char* value;
    struct Node* next;
} Node;

Node* createNode(const char* key, const char* value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->key = strdup(key);
    newNode->value = strdup(value);
    newNode->next = NULL;
    return newNode;
}

void insertNode(Node** head, const char* key, const char* value) {
    Node* newNode = createNode(key, value);
    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void freeList(Node* head) {
    Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp->key);
        free(temp->value);
        free(temp);
    }
}

Node* sanitizeData(Node* data, const char* keyToRemove[], size_t keyCount) {
    Node* sanitizedData = NULL;
    Node* temp = data;

    while (temp != NULL) {
        int shouldRemove = 0;
        for (size_t i = 0; i < keyCount; i++) {
            if (strcmp(temp->key, keyToRemove[i]) == 0) {
                shouldRemove = 1;
                break;
            }
        }
        if (!shouldRemove) {
            insertNode(&sanitizedData, temp->key, temp->value);
        }
        temp = temp->next;
    }

    return sanitizedData;
}

void printList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        printf("%s: %s\n", temp->key, temp->value);
        temp = temp->next;
    }
}

int main() {
    Node* data = NULL;
    insertNode(&data, "name", "John");
    insertNode(&data, "age", "30");
    insertNode(&data, "address", "123 Main St");

    const char* keyToRemove[] = {"age"};
    size_t keyCount = sizeof(keyToRemove) / sizeof(keyToRemove[0]);

    Node* sanitizedData = sanitizeData(data, keyToRemove, keyCount);

    printList(sanitizedData);

    freeList(data);
    freeList(sanitizedData);

    return 0;
}
```

### Explanation of C Code
- We define a `Node` structure to represent each key-value pair.
- We implement functions to create nodes, insert nodes into a linked list, free the memory allocated for the linked list, and sanitize the data.
- In the `main` function, we create a linked list representing the data, call the `sanitizeData` function, and print the sanitized data.
- Finally, we free the memory allocated for both the original and sanitized linked lists.

These examples provide a basic implementation of the functionality you described in C++ and C. Depending on your specific requirements, you may need to extend these implementations further.