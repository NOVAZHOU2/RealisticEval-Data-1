Certainly! Here's the equivalent JavaScript code with the function signature and JSDoc comments:

```javascript
/**
 * Recursively sanitizes a dictionary by removing specific keys.
 *
 * @param {Object} data - The original dictionary to sanitize.
 * @param {Array<string>=} keyToRemove - An optional list of keys to remove.
 * @returns {Object} The sanitized dictionary.
 */
function sanitizeData(data, keyToRemove = null) {
    if (keyToRemove === null) {
        keyToRemove = new Set([
            "email", "pc_conflicts", "metadata", 
            "eligible_student_paper_prize", "talk_poster", 
            "submitted_at", "decision", "status", 
            "submitted", "submission"
        ]);
    }

    if (typeof data === 'object' && !Array.isArray(data) && data !== null) {
        const result = {};
        for (const [key, value] of Object.entries(data)) {
            if (!keyToRemove.has(key)) {
                result[key] = sanitizeData(value, keyToRemove);
            }
        }
        return result;
    } else if (Array.isArray(data)) {
        return data.map(value => sanitizeData(value, keyToRemove));
    } else {
        return data;
    }
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block provides a description of the function and its parameters.
   - `@param` tags describe the types and descriptions of the parameters.
   - `@returns` tag describes the return type and its description.

2. **Function Signature**:
   - The function `sanitizeData` takes two parameters: `data` and `keyToRemove`.
   - `keyToRemove` has a default value of `null`.

3. **Implementation**:
   - If `keyToRemove` is `null`, it initializes a `Set` containing the keys to be removed.
   - It checks if `data` is an object (excluding arrays and null), and if so, iterates over the keys using `Object.entries` and recursively applies `sanitizeData` on each value.
   - If `data` is an array, it maps over the array elements and applies `sanitizeData` on each element.
   - Otherwise, it returns the original `data`.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JavaScript documentation standards using JSDoc.