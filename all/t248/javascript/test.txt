Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I'll convert the Python unittest class into a Jest test suite, ensuring that the functionality and logic of the tests are maintained.

### Python Unittest Code

```python
import unittest

class TestSanitizeData(unittest.TestCase):
    def test_empty_dict(self):
        """ Test with an empty dictionary. """
        data = {}
        key_to_remove = ["email", "metadata"]

        expected = {}
        self.assertEqual(sanitize_data(data, key_to_remove), expected)

    def test_remove_default_keys(self):
        """ Test removing default keys from a nested structure. """
        data = {
            "name": "John Doe",
            "email": "johndoe@example.com",
            "metadata": {"submitted_at": "2021-07-10", "status": "pending"},
            "comments": ["Good", "Needs review"]
        }
        key_to_remove = ["email", "metadata"]
        expected = {
            "name": "John Doe",
            "comments": ["Good", "Needs review"]
        }
        self.assertEqual(sanitize_data(data, key_to_remove), expected)

    def test_specified_key_to_remove(self):
        """ Test removing a specified key from the dictionary. """
        data = {
            "name": "John Doe",
            "location": "Earth",
            "email": "johndoe@example.com"
        }
        expected = {
            "name": "John Doe",
            "location": "Earth"
        }
        self.assertEqual(sanitize_data(data, key_to_remove=["email"]), expected)
```

### Equivalent Jest Test Suite

Here's the equivalent Jest test suite:

```javascript
const sanitizeData = require('./sanitizeData'); // Import the sanitizeData function

describe('TestSanitizeData', () => {
    it('test_empty_dict', () => {
        // Test with an empty dictionary.
        const data = {};
        const keyToRemove = ["email", "metadata"];

        const expected = {};
        expect(sanitizeData(data, keyToRemove)).toEqual(expected);
    });

    it('test_remove_default_keys', () => {
        // Test removing default keys from a nested structure.
        const data = {
            name: "John Doe",
            email: "johndoe@example.com",
            metadata: { submitted_at: "2021-07-10", status: "pending" },
            comments: ["Good", "Needs review"]
        };
        const keyToRemove = ["email", "metadata"];
        const expected = {
            name: "John Doe",
            comments: ["Good", "Needs review"]
        };
        expect(sanitizeData(data, keyToRemove)).toEqual(expected);
    });

    it('test_specified_key_to_remove', () => {
        // Test removing a specified key from the dictionary.
        const data = {
            name: "John Doe",
            location: "Earth",
            email: "johndoe@example.com"
        };
        const expected = {
            name: "John Doe",
            location: "Earth"
        };
        expect(sanitizeData(data, keyToRemove: ["email"])).toEqual(expected);
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `sanitizeData` function is imported at the beginning of the test file using `require('./sanitizeData')`.

2. **Describe Block**:
   - The `describe` block is used to group the tests under a common name (`TestSanitizeData`).

3. **It Blocks**:
   - Each `it` block represents a single test case.
   - The test names are kept similar to the Python docstrings for clarity.

4. **Assertions**:
   - The `expect` function is used to make assertions.
   - `toEqual` is used to check deep equality, which is equivalent to `assertEqual` in Python.

5. **Data Structures**:
   - The data structures (objects and arrays) are defined similarly to the Python version.

6. **Key Removal**:
   - The `keyToRemove` parameter is passed to the `sanitizeData` function as needed.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adhering to Jest's syntax and conventions.