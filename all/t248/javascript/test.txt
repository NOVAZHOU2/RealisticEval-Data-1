Certainly! Below is the equivalent JavaScript test case using Jest for the provided Python unittest test class.

```javascript
const sanitizeData = require('./sanitizeData'); // Adjust the path accordingly

describe('sanitizeData', () => {
  it('removes specified keys from the input dictionary', () => {
    const data = {
      name: 'John Doe',
      email: 'john.doe@example.com',
      password: '123456'
    };
    const keyToRemove = ['email', 'password'];

    const result = sanitizeData(data, keyToRemove);

    expect(result).toEqual({
      name: 'John Doe'
    });
  });

  it('does not modify the input dictionary if no keys are specified', () => {
    const data = {
      name: 'John Doe',
      email: 'john.doe@example.com',
      password: '123456'
    };

    const result = sanitizeData(data);

    expect(result).toEqual({
      name: 'John Doe',
      email: 'john.doe@example.com',
      password: '123456'
    });
  });

  it('returns an empty object if both input and keyToRemove are empty', () => {
    const data = {};
    const keyToRemove = [];

    const result = sanitizeData(data, keyToRemove);

    expect(result).toEqual({});
  });

  it('handles nested dictionaries correctly', () => {
    const data = {
      user: {
        name: 'John Doe',
        email: 'john.doe@example.com',
        address: {
          city: 'New York',
          zip: '10001'
        }
      },
      password: '123456'
    };
    const keyToRemove = ['user.email', 'password'];

    const result = sanitizeData(data, keyToRemove);

    expect(result).toEqual({
      user: {
        name: 'John Doe',
        address: {
          city: 'New York',
          zip: '10001'
        }
      }
    });
  });
});
```

### Explanation:
1. **Importing the Function**: The `sanitizeData` function is imported at the beginning of the file.
2. **Describe Block**: The `describe` block groups related tests together under the name "sanitizeData".
3. **It Blocks**: Each `it` block contains a specific test case.
   - The first test checks if the specified keys are removed from the input dictionary.
   - The second test ensures that the input dictionary remains unchanged if no keys are specified.
   - The third test handles the scenario where both the input dictionary and the keyToRemove array are empty.
   - The fourth test verifies that nested dictionaries are handled correctly.

This setup should help you write comprehensive tests for your `sanitizeData` function using Jest in JavaScript.