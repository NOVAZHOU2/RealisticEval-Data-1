Sure, here is the TypeScript version of your Python function with the same comments and type annotations:

```typescript
interface QuestionDict {
    [key: string]: any;
}

function sanitizeData(data: QuestionDict, keyToRemove: string[] = []): QuestionDict {
    /**
     * Removes the corresponding sensitive questions in the given dictionary based on the given keyToRemove array.
     *
     * @param {QuestionDict} data - The original question dictionary.
     * @param {string[]} keyToRemove - The array of keys to remove.
     * @returns {QuestionDict} - The dictionary with the specified keys removed.
     */
    return Object.keys(data).reduce((acc, key) => {
        if (!keyToRemove.includes(key)) {
            acc[key] = data[key];
        }
        return acc;
    }, {} as QuestionDict);
}
```

In this TypeScript code:
- `QuestionDict` is an interface that represents a dictionary where keys are strings and values can be of any type.
- `sanitizeData` function takes a `data` parameter of type `QuestionDict` and an optional `keyToRemove` parameter of type `string[]`.
- The function uses the `reduce` method to create a new dictionary excluding the keys listed in `keyToRemove`.