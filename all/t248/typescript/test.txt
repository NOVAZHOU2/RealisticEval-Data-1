Certainly! Below is the equivalent TypeScript test class using Jest. The test cases will be converted to Jest's `describe` and `it` blocks, and the assertions will use Jest's assertion methods.

First, let's define the `sanitizeData` function in TypeScript:

```typescript
import { Dictionary } from "lodash";

/**
 * Recursively sanitizes a dictionary by removing specific keys.
 *
 * @param data - The original dictionary to sanitize.
 * @param keyToRemove - An optional list of keys to remove. If not provided, defaults to a predefined set of keys.
 * @returns The sanitized dictionary.
 */
function sanitizeData(data: Dictionary<any>, keyToRemove?: string[]): Dictionary<any> {
  if (!keyToRemove) {
    keyToRemove = [
      "email",
      "pc_conflicts",
      "metadata",
      "eligible_student_paper_prize",
      "talk_poster",
      "submitted_at",
      "decision",
      "status",
      "submitted",
      "submission"
    ];
  }

  if (typeof data === 'object' && !Array.isArray(data) && data !== null) {
    return Object.entries(data).reduce((acc, [key, value]) => {
      if (!keyToRemove.includes(key)) {
        acc[key] = sanitizeData(value, keyToRemove);
      }
      return acc;
    }, {} as Dictionary<any>);
  } else if (Array.isArray(data)) {
    return data.map(value => sanitizeData(value, keyToRemove));
  } else {
    return data;
  }
}

export { sanitizeData };
```

Now, let's write the Jest test class:

```typescript
import { sanitizeData } from './path/to/sanitizeData'; // Adjust the path as needed

describe('TestSanitizeData', () => {
  describe('test_empty_dict', () => {
    it('should return an empty dictionary when given an empty dictionary', () => {
      const data = {};
      const keyToRemove = ["email", "metadata"];
      const expected = {};

      expect(sanitizeData(data, keyToRemove)).toEqual(expected);
    });
  });

  describe('test_remove_default_keys', () => {
    it('should remove default keys from a nested structure', () => {
      const data = {
        name: "John Doe",
        email: "johndoe@example.com",
        metadata: { submitted_at: "2021-07-10", status: "pending" },
        comments: ["Good", "Needs review"]
      };
      const keyToRemove = ["email", "metadata"];
      const expected = {
        name: "John Doe",
        comments: ["Good", "Needs review"]
      };

      expect(sanitizeData(data, keyToRemove)).toEqual(expected);
    });
  });

  describe('test_specified_key_to_remove', () => {
    it('should remove a specified key from the dictionary', () => {
      const data = {
        name: "John Doe",
        location: "Earth",
        email: "johndoe@example.com"
      };
      const expected = {
        name: "John Doe",
        location: "Earth"
      };

      expect(sanitizeData(data, ["email"])).toEqual(expected);
    });
  });
});
```

### Explanation:
1. **Import Statements**:
   - Import the `sanitizeData` function from the appropriate module.

2. **Describe Blocks**:
   - Use `describe` blocks to group related tests.
   - Use `it` blocks to define individual test cases.

3. **Assertions**:
   - Use `expect` and `toEqual` to assert the equality of the sanitized data with the expected result.

4. **Test Data**:
   - Define the test data and expected results within each test case.

This setup ensures that the tests are structured similarly to the original Python unittests but use Jest's syntax and assertion methods.