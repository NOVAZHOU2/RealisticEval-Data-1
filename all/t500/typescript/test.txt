Certainly! Here is the equivalent TypeScript test class using Jest, along with the necessary setup and imports:

### TypeScript Code

First, ensure you have Jest installed in your project:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Then, configure Jest in your `tsconfig.json` and `jest.config.js` files:

#### `tsconfig.json`
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

#### `jest.config.js`
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest'
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
};
```

### TypeScript Test Class

Here is the TypeScript test class using Jest:

```typescript
import { convertScoreToDecimal } from './path/to/your/function'; // Adjust the path as needed

describe('TestConvertScoreToDecimal', () => {
  it('should correctly convert a simple decimal score', () => {
    expect(convertScoreToDecimal("2.5")).toEqual(2.5);
  });

  it('should correctly convert a fraction score', () => {
    expect(convertScoreToDecimal("10/4")).toEqual(2.5);
  });

  it('should correctly convert an integer score represented as a string', () => {
    expect(convertScoreToDecimal("5")).toEqual(5.0);
  });

  it('should correctly convert an integer division score', () => {
    expect(convertScoreToDecimal("12/3")).toEqual(4.0);
  });
});
```

### Explanation:
1. **Imports**:
   - Import the `convertScoreToDecimal` function from the appropriate file.
   - Jest does not require explicit imports for test frameworks like `unittest` in Python.

2. **Describe Block**:
   - Use the `describe` function to group related tests together.
   - Each test is defined using the `it` function, which takes a description and a callback function containing the test logic.

3. **Assertions**:
   - Use Jest's `expect` function along with matchers like `toEqual` to perform assertions.
   - `toEqual` is used to check equality, similar to `assertEqual` in Python's `unittest`.

4. **Test Cases**:
   - Each test case is structured similarly to the Python test cases, ensuring that the functionality and logic are preserved.

By following these steps, you can effectively convert the Python unittest test class into an equivalent Jest test class in TypeScript.