Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. I'll include the necessary imports and setup to ensure that the tests are structured and behave similarly to the Python unittest class.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can typically add Catch2 via a package manager or include it manually.

#### Catch2 Setup

1. **Include Catch2 Header**:
   ```cpp
   #include <catch2/catch_test_macros.hpp>
   ```

2. **Test Class**:
   Define the test cases using Catch2's `TEST_CASE` macro.

Here is the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <optional>
#include <string>
#include <sstream>
#include <stdexcept>

// Function to convert a string representation of a score to its decimal value
/**
 * Converts the string representation of a score to its decimal value.
 * For example:
 *     input: 10/4
 *     output: 2.5
 *
 * @param score_str The score as a string, can be a decimal or a fraction
 * @return The decimal value of the score as a float, or std::nullopt if the input is invalid
 */
std::optional<float> convert_score_to_decimal(const std::string& score_str) {
    try {
        // Check if the score is a fraction
        size_t slash_pos = score_str.find('/');
        if (slash_pos != std::string::npos) {
            std::string numerator = score_str.substr(0, slash_pos);
            std::string denominator = score_str.substr(slash_pos + 1);

            // Convert strings to floats
            float num = std::stof(numerator);
            float den = std::stof(denominator);

            // Calculate the decimal value
            float decimal_value = num / den;
            return decimal_value;
        } else {
            // Otherwise, treat it as a decimal
            float decimal_value = std::stof(score_str);
            return decimal_value;
        }
    } catch (const std::invalid_argument& ia) {
        std::cerr << "Error converting '" << score_str << "' to decimal: " << ia.what() << std::endl;
        return std::nullopt;
    } catch (const std::out_of_range& oor) {
        std::cerr << "Error converting '" << score_str << "' to decimal: " << oor.what() << std::endl;
        return std::nullopt;
    } catch (const std::exception& ex) {
        std::cerr << "Error converting '" << score_str << "' to decimal: " << ex.what() << std::endl;
        return std::nullopt;
    }
}

// Test cases using Catch2
TEST_CASE("Test convert_score_to_decimal") {
    SECTION("Test a simple decimal score") {
        REQUIRE(convert_score_to_decimal("2.5").value() == Approx(2.5f));
    }

    SECTION("Test a fraction score") {
        REQUIRE(convert_score_to_decimal("10/4").value() == Approx(2.5f));
    }

    SECTION("Test an integer score represented as a string") {
        REQUIRE(convert_score_to_decimal("5").value() == Approx(5.0f));
    }

    SECTION("Test an integer divide score") {
        REQUIRE(convert_score_to_decimal("12/3").value() == Approx(4.0f));
    }
}

int main(int argc, char* argv[]) {
    // Run Catch2 tests
    int result = Catch::Session().run(argc, argv);
    return result;
}
```

### Explanation:
1. **Catch2 Header**:
   - Include the Catch2 header file `#include <catch2/catch_test_macros.hpp>`.

2. **Function Definition**:
   - The `convert_score_to_decimal` function remains the same as before.

3. **Test Cases**:
   - Use the `TEST_CASE` macro to define the test suite.
   - Use the `SECTION` macro to define individual test sections.
   - Use `REQUIRE` for assertions, ensuring that the expected values match the actual values.

4. **Main Function**:
   - The `main` function runs the Catch2 tests and returns the result.

This setup ensures that the functionality and logic of the tests are preserved, and the tests are structured similarly to the Python unittest class.