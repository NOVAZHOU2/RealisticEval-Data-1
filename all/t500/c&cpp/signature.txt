Certainly! Here is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <optional>
#include <sstream>
#include <stdexcept>

// Function to convert a string representation of a score to its decimal value
/**
 * Converts the string representation of a score to its decimal value.
 * For example:
 *     input: 10/4
 *     output: 2.5
 *
 * @param score_str The score as a string, can be a decimal or a fraction
 * @return The decimal value of the score as a float, or std::nullopt if the input is invalid
 */
std::optional<float> convert_score_to_decimal(const std::string& score_str) {
    try {
        // Check if the score is a fraction
        size_t slash_pos = score_str.find('/');
        if (slash_pos != std::string::npos) {
            std::string numerator = score_str.substr(0, slash_pos);
            std::string denominator = score_str.substr(slash_pos + 1);

            // Convert strings to floats
            float num = std::stof(numerator);
            float den = std::stof(denominator);

            // Calculate the decimal value
            float decimal_value = num / den;
            return decimal_value;
        } else {
            // Otherwise, treat it as a decimal
            float decimal_value = std::stof(score_str);
            return decimal_value;
        }
    } catch (const std::invalid_argument& ia) {
        std::cerr << "Error converting '" << score_str << "' to decimal: " << ia.what() << std::endl;
        return std::nullopt;
    } catch (const std::out_of_range& oor) {
        std::cerr << "Error converting '" << score_str << "' to decimal: " << oor.what() << std::endl;
        return std::nullopt;
    } catch (const std::exception& ex) {
        std::cerr << "Error converting '" << score_str << "' to decimal: " << ex.what() << std::endl;
        return std::nullopt;
    }
}

int main() {
    // Test the function with different inputs
    auto result1 = convert_score_to_decimal("2.5");
    if (result1.has_value()) {
        std::cout << "Decimal value: " << result1.value() << std::endl;
    } else {
        std::cout << "Invalid input." << std::endl;
    }

    auto result2 = convert_score_to_decimal("10/4");
    if (result2.has_value()) {
        std::cout << "Decimal value: " << result2.value() << std::endl;
    } else {
        std::cout << "Invalid input." << std::endl;
    }

    auto result3 = convert_score_to_decimal("abc");
    if (result3.has_value()) {
        std::cout << "Decimal value: " << result3.value() << std::endl;
    } else {
        std::cout << "Invalid input." << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The function `convert_score_to_decimal` takes a `const std::string&` as input and returns `std::optional<float>`.
   
2. **Documentation Comments**:
   - Multi-line comments (`/* ... */`) are used to document the function's purpose, arguments, and return values.
   - Single-line comments (`//`) are used for inline comments.

3. **Error Handling**:
   - `try-catch` blocks are used to handle exceptions such as `std::invalid_argument` and `std::out_of_range`.

4. **Fraction Handling**:
   - If the input string contains a `/`, it is split into numerator and denominator parts, and the division is performed.

5. **Decimal Handling**:
   - If the input string does not contain a `/`, it is directly converted to a float.

6. **Main Function**:
   - The `main` function tests the `convert_score_to_decimal` function with different inputs and prints the results or error messages accordingly.

This ensures that the functionality, logic, and structure of the original Python code are preserved in the C++ version.