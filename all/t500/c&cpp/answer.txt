Here is a C++ version of your Python function:

```c++
#include <string>
#include <sstream>
#include <algorithm>

float convertScoreToDecimal(std::string scoreStr)
{
    std::istringstream iss(scoreStr);
    int numerator, denominator;
    char slash;

    // Try to parse the string into a numerator, slash, and denominator
    if (!(iss >> numerator >> slash >> denominator))
        return -1; // Return -1 to indicate an error

    // Check that there was only one slash in the string
    if (std::count(scoreStr.begin(), scoreStr.end(), '/') != 1)
        return -1; // Return -1 to indicate an error

    // Check that the denominator is not zero
    if (denominator == 0)
        return -1; // Return -1 to indicate an error

    // Convert the fraction to a decimal and return it
    return static_cast<float>(numerator) / denominator;
}
```

And here's the equivalent C version of the same function:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

float convertScoreToDecimal(char *scoreStr)
{
    int numerator, denominator;
    char slash;
    
    // Use sscanf to parse the string into a numerator, slash, and denominator
    if (sscanf(scoreStr, "%d%c%d", &numerator, &slash, &denominator) != 3)
        return -1; // Return -1 to indicate an error
    
    // Check that there was only one slash in the string
    if (strchr(scoreStr, '/') != strchr(scoreStr, '\0'))
        return -1; // Return -1 to indicate an error
    
    // Check that the denominator is not zero
    if (denominator == 0)
        return -1; // Return -1 to indicate an error
    
    // Convert the fraction to a decimal and return it
    return (float)numerator / denominator;
}
```
In both versions, we use `-1` to represent an error condition, which you may want to handle differently depending on your specific needs.