Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will convert each test case from Python's `unittest` framework to Jest, ensuring that the functionality and logic are preserved.

### Python Code:
```python
import unittest

def convert_score_to_decimal(score_str: str) -> float:
    """
    Converts the string representation of a score to its decimal value.
    For example:
        input: 10/4
        output: 2.5
    Args:
        score_str (str): The score as a string, can be a decimal or a fraction

    Returns:
        float: The decimal value of the score as a float, or None if the input is invalid
    """
    try:
        # Check if the score is a fraction
        if '/' in score_str:
            numerator, denominator = score_str.split('/')
            decimal_value = float(numerator) / float(denominator)
        else:
            # Otherwise, treat it as a decimal
            decimal_value = float(score_str)

        return decimal_value

    except (ValueError, ZeroDivisionError) as e:
        print(f"Error converting '{score_str}' to decimal: {e}")
        return None

class TestConvertScoreToDecimal(unittest.TestCase):

    def test_decimal_score(self):
        """ Test a simple decimal score. """
        self.assertEqual(convert_score_to_decimal("2.5"), 2.5)

    def test_fraction_score(self):
        """ Test a fraction score. """
        self.assertEqual(convert_score_to_decimal("10/4"), 2.5)

    def test_integer_score(self):
        """ Test an integer score represented as a string. """
        self.assertEqual(convert_score_to_decimal("5"), 5.0)

    def test_integer_divide_score(self):
        self.assertEqual(convert_score_to_decimal("12/3"), 4.0)
```

### Equivalent Jest Test Suite:

```javascript
// Import the function to be tested
const convertScoreToDecimal = require('./path/to/convertScoreToDecimal');

describe('TestConvertScoreToDecimal', () => {
    test('test_decimal_score', () => {
        // Test a simple decimal score
        expect(convertScoreToDecimal("2.5")).toBe(2.5);
    });

    test('test_fraction_score', () => {
        // Test a fraction score
        expect(convertScoreToDecimal("10/4")).toBe(2.5);
    });

    test('test_integer_score', () => {
        // Test an integer score represented as a string
        expect(convertScoreToDecimal("5")).toBe(5.0);
    });

    test('test_integer_divide_score', () => {
        // Test an integer divide score
        expect(convertScoreToDecimal("12/3")).toBe(4.0);
    });
});
```

### Explanation:
1. **Importing the Function**: The `convertScoreToDecimal` function is imported at the beginning of the test file.
2. **Describe Block**: The `describe` block is used to group the test cases under a common description.
3. **Test Cases**:
   - Each test case is defined using the `test` function.
   - The test descriptions are included as strings within the `test` function.
   - Assertions are made using `expect` and `toBe` to check the equality of the function's return value.
4. **Mapping Assertions**:
   - `self.assertEqual` in Python is mapped to `expect(...).toBe(...)` in Jest.
   - The `toBe` matcher is used for exact equality comparisons.

### Notes on Conversion:
- **Function Import**: Ensure that the `convertScoreToDecimal` function is correctly imported from the appropriate module.
- **Test Descriptions**: The test descriptions are kept as comments within the `test` function for clarity.
- **Assertion Mapping**: The `expect` and `toBe` matchers are used to ensure the same level of assertion as in the Python `unittest` framework.

This Jest test suite preserves the functionality and logic of the original Python unittest class.