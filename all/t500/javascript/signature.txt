Certainly! Below is the equivalent JavaScript code for the given Python function, including the JSDoc comments to maintain the purpose and structure of the code:

```javascript
/**
 * Converts the string representation of a score to its decimal value.
 * For example:
 *   input: "10/4"
 *   output: 2.5
 * 
 * @param {string} scoreStr - The score as a string, can be a decimal or a fraction
 * @returns {number | null} - The decimal value of the score as a float, or null if the input is invalid
 */
function convertScoreToDecimal(scoreStr) {
    try {
        // Check if the score is a fraction
        if (scoreStr.includes('/')) {
            const [numerator, denominator] = scoreStr.split('/');
            const decimalValue = parseFloat(numerator) / parseFloat(denominator);
            return decimalValue;
        } else {
            // Otherwise, treat it as a decimal
            const decimalValue = parseFloat(scoreStr);
            return decimalValue;
        }

    } catch (error) {
        console.log(`Error converting '${scoreStr}' to decimal: ${error.message}`);
        return null;
    }
}
```

### Explanation:
1. **Function Definition**: The function `convertScoreToDecimal` is defined with a single parameter `scoreStr`.
2. **JSDoc Comments**:
   - The JSDoc comment block provides a description of the function's purpose.
   - It includes an example to illustrate how the function works.
   - The `@param` tag specifies the type and description of the parameter `scoreStr`.
   - The `@returns` tag specifies the type and description of the return value.
3. **Try-Catch Block**: A try-catch block is used to handle potential errors during the conversion process.
4. **Fraction Check**: If the `scoreStr` contains a '/', it is considered a fraction and split into numerator and denominator.
5. **Decimal Conversion**: The numerator and denominator are converted to floats and divided to get the decimal value.
6. **Decimal String**: If the `scoreStr` does not contain a '/', it is treated as a decimal string and converted directly to a float.
7. **Error Handling**: If any error occurs (such as a parsing error or division by zero), an error message is logged, and `null` is returned.

This JavaScript function preserves the purpose and structure of the original Python function, including the detailed documentation using JSDoc format.