Certainly! Below is the equivalent Java test class using JUnit. The Java test class will be placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests will be preserved using appropriate JUnit annotations and assertion methods.

### Java Code Using JUnit

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Tester {

    @Test
    public void testDecimalScore() {
        // Test a simple decimal score.
        assertEquals(2.5, convertScoreToDecimal("2.5"), 0.001);
    }

    @Test
    public void testFractionScore() {
        // Test a fraction score.
        assertEquals(2.5, convertScoreToDecimal("10/4"), 0.001);
    }

    @Test
    public void testIntegerScore() {
        // Test an integer score represented as a string.
        assertEquals(5.0, convertScoreToDecimal("5"), 0.001);
    }

    @Test
    public void testIntegerDivideScore() {
        // Test an integer division score.
        assertEquals(4.0, convertScoreToDecimal("12/3"), 0.001);
    }

    // Utility method to convert the score to decimal
    private Double convertScoreToDecimal(String scoreStr) {
        try {
            // Check if the score is a fraction
            if (scoreStr.contains("/")) {
                String[] parts = scoreStr.split("/");
                if (parts.length == 2) {
                    double numerator = Double.parseDouble(parts[0]);
                    double denominator = Double.parseDouble(parts[1]);
                    return numerator / denominator;
                } else {
                    throw new IllegalArgumentException("Invalid fraction format");
                }
            } else {
                // Otherwise, treat it as a decimal
                return Double.parseDouble(scoreStr);
            }

        } catch (NumberFormatException | ArithmeticException e) {
            System.out.println("Error converting '" + scoreStr + "' to decimal: " + e.getMessage());
            return null;
        }
    }
}
```

### Explanation:
1. **JUnit Annotations**:
   - The `@Test` annotation is used to mark each test method.

2. **Assertion Methods**:
   - The `assertEquals` method is used to assert the expected values. The third parameter `0.001` is the delta value used for floating-point comparisons.

3. **Test Methods**:
   - Each test method is annotated with `@Test` and includes a descriptive comment.
   - The test methods call the `convertScoreToDecimal` method and assert the expected results.

4. **Utility Method**:
   - The `convertScoreToDecimal` method is defined as a private utility method within the test class. This method replicates the functionality of the Python function.

5. **Package and Class Name**:
   - The test class is placed in the package `org.real.temp` and named `Tester`.

This Java code preserves the original functionality and logic of the Python unittests while adhering to JUnit conventions and best practices.