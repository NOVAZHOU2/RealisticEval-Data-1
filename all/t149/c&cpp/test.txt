Hereâ€™s how you can convert the TypeScript Jest test cases to Catch2 test cases in C++:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

RGB hslToRgb(double hue, double saturation, double lightness); // Declaration of the function

TEST_CASE("hslToRgb", "[color]") {
    SECTION("Converts black (0% lightness)") {
        RGB color = hslToRgb(0, 0, 0);
        REQUIRE(color.r == 0);
        REQUIRE(color.g == 0);
        REQUIRE(color.b == 0);
    }

    SECTION("Converts white (100% lightness)") {
        RGB color = hslToRgb(0, 0, 1);
        REQUIRE(color.r == 255);
        REQUIRE(color.g == 255);
        REQUIRE(color.b == 255);
    }

    SECTION("Converts red (hue at 0)") {
        RGB color = hslToRgb(0, 1, 0.5);
        REQUIRE(color.r == 255);
        REQUIRE(color.g == 0);
        REQUIRE(color.b == 0);
    }

    SECTION("Converts green (hue at 120)") {
        RGB color = hslToRgb(120, 1, 0.5);
        REQUIRE(color.r == 0);
        REQUIRE(color.g == 255);
        REQUIRE(color.b == 0);
    }

    SECTION("Converts blue (hue at 240)") {
        RGB color = hslToRgb(240, 1, 0.5);
        REQUIRE(color.r == 0);
        REQUIRE(color.g == 0);
        REQUIRE(color.b == 255);
    }

    SECTION("Handles edge case with maximum hue (360 equivalent to 0)") {
        RGB color = hslToRgb(360, 1, 0.5);
        REQUIRE(color.r == 255);
        REQUIRE(color.g == 0);
        REQUIRE(color.b == 0);
    }
}
```

### Explanation:
- The Catch2 library is included and configured with `CATCH_CONFIG_MAIN`.
- Each Jest `test` is replaced with a `SECTION`, which allows for descriptive grouping of related tests.
- The `expect` assertions are replaced with `REQUIRE`, which checks that the RGB values are as expected.