Hereâ€™s how you can convert the provided TypeScript Jest test cases into Python unit tests using the unittest framework. Each test checks the output of the hsl_to_rgb function for different input values, similar to the original Jest tests.
TypeScript Jest Test Cases
typescript
describe('hslToRgb', () => {
    test('Converts black (0% lightness)', () => {
        expect(hslToRgb(0, 0, 0)).toEqual({ r: 0, g: 0, b: 0 });
    });
    test('Converts white (100% lightness)', () => {
        expect(hslToRgb(0, 0, 1)).toEqual({ r: 255, g: 255, b: 255 });
    });
    test('Converts red (hue at 0)', () => {
        expect(hslToRgb(0, 1, 0.5)).toEqual({ r: 255, g: 0, b: 0 });
    });
    test('Converts green (hue at 120)', () => {
        expect(hslToRgb(120, 1, 0.5)).toEqual({ r: 0, g: 255, b: 0 });
    });
    test('Converts blue (hue at 240)', () => {
        expect(hslToRgb(240, 1, 0.5)).toEqual({ r: 0, g: 0, b: 255 });
    });
    test('Handles edge case with maximum hue (360 equivalent to 0)', () => {
        expect(hslToRgb(360, 1, 0.5)).toEqual({ r: 255, g: 0, b: 0 });
    });
});
Python unittest Test Cases
python
import unittest

class TestHSLToRGB(unittest.TestCase):
    def test_converts_black(self):
        self.assertEqual(hsl_to_rgb(0, 0, 0), {'r': 0, 'g': 0, 'b': 0})

    def test_converts_white(self):
        self.assertEqual(hsl_to_rgb(0, 0, 1), {'r': 255, 'g': 255, 'b': 255})

    def test_converts_red(self):
        self.assertEqual(hsl_to_rgb(0, 1, 0.5), {'r': 255, 'g': 0, 'b': 0})

    def test_converts_green(self):
        self.assertEqual(hsl_to_rgb(120, 1, 0.5), {'r': 0, 'g': 255, 'b': 0})

    def test_converts_blue(self):
        self.assertEqual(hsl_to_rgb(240, 1, 0.5), {'r': 0, 'g': 0, 'b': 255})

    def test_handles_maximum_hue(self):
        self.assertEqual(hsl_to_rgb(360, 1, 0.5), {'r': 255, 'g': 0, 'b': 0})

if __name__ == '__main__':
    unittest.main()
Explanation of Changes:
Importing the unittest module: The unittest module is imported to enable testing in Python.
Creating a Test Class: A class named TestHSLToRGB is defined, inheriting from unittest.TestCase. This is a common practice in Python unit tests.
Test Method Naming: Each test method is prefixed with test_ to ensure it is recognized as a test case by the unittest framework.
Assertions: The expect(...).toEqual(...) assertion from Jest is replaced with self.assertEqual(...) in Python, which serves the same purpose.
Execution of Tests: The standard if __name__ == '__main__': unittest.main() construct is included to run the tests when the script is executed.
You can run the Python test cases in your environment, and they should produce results similar to those you would get from the TypeScript Jest tests.