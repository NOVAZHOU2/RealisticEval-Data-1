Here’s how you can convert the TypeScript function signature to Python, while keeping the comments intact. Python uses a different syntax for type hints and docstrings, so I’ll translate the TypeScript signature accordingly.
TypeScript Code Signature
typescript
/**
 * Converts an HSL color value to RGB.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param hue The hue of the color (0-360)
 * @param saturation The saturation of the color (0-1)
 * @param lightness The lightness of the color (0-1)
 * @return An object containing the red, green, and blue channels.
 */
function hslToRgb(hue: number, saturation: number, lightness: number): { r: number, g: number, b: number } {}
Python Code Signature
python
def hsl_to_rgb(hue: float, saturation: float, lightness: float) -> dict[str, int]:
    """
    Converts an HSL color value to RGB.
    Assumes h, s, and l are contained in the set [0, 1] and
    returns r, g, and b in the set [0, 255].

    :param hue: The hue of the color (0-360)
    :param saturation: The saturation of the color (0-1)
    :param lightness: The lightness of the color (0-1)
    :return: A dictionary containing the red, green, and blue channels.
    """
Explanation of Changes:
Function Name: Changed from hslToRgb to hsl_to_rgb to follow Python naming conventions (snake_case).
Parameter Types: Changed number to float for hues, saturation, and lightness, as Python uses float for decimal numbers.
Return Type: Changed to dict[str, int], which represents a dictionary with string keys and integer values for the RGB channels.
Docstring Format: Converted the JSDoc style comments into a Python docstring, which uses triple quotes and :param and :return for parameter and return documentation.
You can use this Python signature as the basis for implementing the HSL to RGB conversion logic.