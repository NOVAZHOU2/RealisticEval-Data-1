Certainly! Below is the equivalent C++ test case using Catch2 for the provided Python `unittest` function:

```cpp
#include <catch2/catch.hpp>
#include <string>

std::string renameFilePath(const std::string& path) {
    /**
     * Renames a Windows file path by replacing colons in the filename with underscores.
     *
     * @param path The original file path.
     * @return The modified file path with colons in the filename replaced by underscores.
     */
    std::string result = path;
    size_t pos = 0;
    while ((pos = result.find(':', pos)) != std::string::npos) {
        result.replace(pos, 1, "_");
        pos += 1; // Move past the underscore
    }
    return result;
}

TEST_CASE("renameFilePath", "[file-path]") {
    REQUIRE(renameFilePath("C:\\Users\\Username\\Documents\\example.txt") == "C:\\Users\\Username\\Documents\\example.txt");
    REQUIRE(renameFilePath("C:\\Users\\Username\\Documents\\example:file.txt") == "C:\\Users\\Username\\Documents\\example_file.txt");
    REQUIRE(renameFilePath("C:\\Users\\Username\\Documents\\file:with:colons.txt") == "C:\\Users\\Username\\Documents\\file_with_colons.txt");
    REQUIRE(renameFilePath("C:\\Users\\Username\\Documents\\no_colon_in_filename.txt") == "C:\\Users\\Username\\Documents\\no_colon_in_filename.txt");
}
```

### Explanation:
- **Function Definition**: The `renameFilePath` function takes a string representing a file path and replaces all occurrences of colons (`:`) with underscores (`_`).
- **Catch2 Test Case**:
  - `TEST_CASE("renameFilePath", "[file-path]")`: Defines a test case named "renameFilePath" and tags it with `[file-path]`.
  - `REQUIRE(...)`: This macro asserts that the expression inside it evaluates to `true`. If it doesn't, the test will fail.

This C++ code uses Catch2's testing framework to ensure that the `renameFilePath` function behaves correctly under various conditions.