Hereâ€™s the equivalent Java code for the given Python function, organized within the package `org.real.temp` and the class `Answer`:

```java
package org.real.temp;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;

public class Answer {

    /**
     * Renames a Windows file path by replacing colons in the filename with underscores.
     *
     * @param path The original file path as a String.
     * @return The modified file path with colons in the filename replaced by underscores as a String.
     */
    public static String renameFilePath(String path) {
        // Convert the string path to a Path object
        Path filePath = Paths.get(path);

        // Get the parent directory and the filename
        Path parentDirectory = filePath.getParent();
        String filename = filePath.getFileName().toString();

        // Replace colons in the filename with underscores
        String sanitizedFilename = filename.replace(":", "_");

        // Reconstruct the full path with the sanitized filename
        Path newPath = parentDirectory.resolve(sanitizedFilename);

        // Convert the Path object back to a string
        return newPath.toString();
    }

    // Example usage
    public static void main(String[] args) {
        String originalPath = "C:\\Users\\Example\\Documents\\file:name.txt";
        String newPath = renameFilePath(originalPath);
        System.out.println("Original Path: " + originalPath);
        System.out.println("New Path: " + newPath);
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Imports**: Necessary imports are added at the beginning of the Java code to handle file paths and strings.
3. **Class Definition**: The class `Answer` is defined.
4. **Method Signature**: The method `renameFilePath` is declared with a `String` parameter and returns a `String`.
5. **Path Handling**: The method uses `Paths.get(path)` to create a `Path` object from the input string.
6. **Splitting the Path**: The `Path` object is used to get the parent directory and the filename.
7. **Sanitizing the Filename**: The filename is sanitized by replacing colons with underscores using `filename.replace(":", "_")`.
8. **Reconstructing the Path**: The new path is constructed using `parentDirectory.resolve(sanitizedFilename)`.
9. **Returning the New Path**: The method returns the new path as a string using `newPath.toString()`.
10. **Main Method**: An example usage is provided in the `main` method to demonstrate how the `renameFilePath` method can be called.