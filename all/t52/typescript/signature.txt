Certainly! Here is the equivalent TypeScript code with proper JSDoc-style documentation and type annotations:

```typescript
import * as path from 'path';

/**
 * Renames a Windows file path by replacing colons in the filename with underscores.
 * 
 * @param {string} path - The original file path.
 * @returns {string} - The modified file path with colons in the filename replaced by underscores.
 */
function renameFilePath(path: string): string {
    // Split the path into directory and filename
    const directory = path.parse(path).dir;
    const filename = path.parse(path).base;

    // Replace colons in the filename with underscores
    const sanitizedFilename = filename.replace(/:/g, '_');

    // Reconstruct the full path with the sanitized filename
    const newPath = path.join(directory, sanitizedFilename);

    return newPath;
}

// Example usage
console.log(renameFilePath('C:\\Users\\User\\Documents\\file:name.txt'));  // Should output 'C:\\Users\\User\\Documents\\file_name.txt'
```

### Explanation:
1. **Import Statement**: We import the `path` module from Node.js to handle path operations.

2. **Function Definition**: The function `renameFilePath` is defined with a type signature indicating that it takes a `string` parameter and returns a `string`.

3. **JSDoc Documentation**: The function is documented using JSDoc-style comments, which provide detailed information about parameters and return values.

4. **Path Parsing**: We use `path.parse` to split the path into directory and filename components. This is similar to Python's `os.path.split`.

5. **String Replacement**: The `replace` method is used to replace all colons (`:`) with underscores (`_`).

6. **Reconstructing the Path**: We use `path.join` to reconstruct the full path with the sanitized filename.

7. **Example Usage**: An example call to `renameFilePath` is included to demonstrate how the function can be used.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and best practices.