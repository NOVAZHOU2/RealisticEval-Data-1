Sure! Here is the equivalent TypeScript code:

```typescript
import * as path from 'path';

function renameFilePath(path: string): string {
    /**
     * Renames a Windows file path by replacing colons in the filename with underscores.
     *
     * @param {string} path - The original file path.
     * @returns {string} - The modified file path with colons in the filename replaced by underscores.
     */
    // Split the path into directory and filename
    const [directory, filename] = path.parse(path).dir.split(path.sep).pop() + path.parse(path).base;

    // Replace colons in the filename with underscores
    const sanitizedFilename = filename.replace(/:/g, '_');

    // Reconstruct the full path with the sanitized filename
    const newPath = path.join(directory, sanitizedFilename);

    return newPath;
}

// Example usage
console.log(renameFilePath('C:\\Users\\User\\Documents\\file:name.txt'));  // Should output 'C:\Users\User\Documents\file_name.txt'
```

### Explanation:
1. **Import Statement**: In TypeScript, we use `import` statements similar to Python's `import`. Since TypeScript does not have a direct equivalent of Python's `os` module, we use Node.js's `path` module which provides similar functionality.

2. **Function Definition**: The function `renameFilePath` is defined with a type signature indicating that it takes a `string` parameter and returns a `string`.

3. **Path Parsing**: We use `path.parse` to split the path into directory and filename components. This is slightly different from Python's `os.path.split`, but it achieves the same result.

4. **String Replacement**: The `replace` method is used to replace all colons (`:`) with underscores (`_`).

5. **Reconstructing the Path**: We use `path.join` to reconstruct the full path with the sanitized filename.

6. **Example Usage**: An example call to `renameFilePath` is included to demonstrate how the function can be used.

This TypeScript code maintains the same functionality and logic as the Python code, while adapting to TypeScript's syntax and conventions.