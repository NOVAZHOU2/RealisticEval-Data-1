Certainly! Below is the equivalent TypeScript test case using Jest for the provided Python function `rename_file_path`.

```typescript
import { renameFilePath } from './path-to-your-module'; // Adjust the import path accordingly

describe('renameFilePath', () => {
  it('replaces colons in the filename with underscores', () => {
    const inputPath = 'C:\\Users\\Username\\Documents\\file:name.txt';
    const expectedOutput = 'C:\\Users\\Username\\Documents\\file_name.txt';
    expect(renameFilePath(inputPath)).toBe(expectedOutput);
  });

  it('does not modify paths without colons', () => {
    const inputPath = 'C:\\Users\\Username\\Documents\\filename.txt';
    const expectedOutput = 'C:\\Users\\Username\\Documents\\filename.txt';
    expect(renameFilePath(inputPath)).toBe(expectedOutput);
  });

  it('handles multiple colons in the filename', () => {
    const inputPath = 'C:\\Users\\Username\\Documents\\file::name.txt';
    const expectedOutput = 'C:\\Users\\Username\\Documents\\file__name.txt';
    expect(renameFilePath(inputPath)).toBe(expectedOutput);
  });

  it('works with relative paths', () => {
    const inputPath = 'relative:path\\to\\file:name.txt';
    const expectedOutput = 'relative:path\\to\\file_name.txt';
    expect(renameFilePath(inputPath)).toBe(expectedOutput);
  });
});
```

### Explanation:
1. **Import Statement**: Ensure you have the correct import statement pointing to your implementation of `renameFilePath`.
2. **Describe Block**: This groups related tests together.
3. **It Blocks**: Each `it` block contains a specific test case.
4. **Expectations**: Use `expect` along with matchers like `.toBe()` to check if the output matches the expected result.

Make sure you have Jest installed and properly configured in your project. If you haven't set up Jest yet, you can do so by running:

```bash
npm install --save-dev jest
```

Then, add a script to your `package.json` to run the tests:

```json
"scripts": {
  "test": "jest"
}
```

Finally, run your tests using:

```bash
npm test
```

This should give you a similar testing experience to what you had with the Python unittest framework.