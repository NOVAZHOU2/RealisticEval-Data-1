Sure! Here's how you can convert the given Python unittest test class to a Jest test case in JavaScript:

```javascript
const renameFilePath = require('./renameFilePath'); // Adjust the import based on your project structure

describe('renameFilePath', () => {
  it('should replace colons in the filename with underscores', () => {
    const inputPath = 'C:\\Users\\Username\\Documents\\example:file.txt';
    const expectedOutput = 'C:\\Users\\Username\\Documents\\example_file.txt';
    
    expect(renameFilePath(inputPath)).toBe(expectedOutput);
  });

  it('should not modify paths without colons', () => {
    const inputPath = 'C:\\Users\\Username\\Documents\\example_file.txt';
    const expectedOutput = 'C:\\Users\\Username\\Documents\\example_file.txt';
    
    expect(renameFilePath(inputPath)).toBe(expectedOutput);
  });
  
  it('should handle paths with multiple colons', () => {
    const inputPath = 'C:\\Users\\Username\\Documents\\example:file:name.txt';
    const expectedOutput = 'C:\\Users\\Username\\Documents\\example_file_name.txt';
    
    expect(renameFilePath(inputPath)).toBe(expectedOutput);
  });
});
```

In this example, we assume that the `renameFilePath` function is located in a module named `renameFilePath.js`. If your actual implementation is different, adjust the import accordingly. This Jest test suite includes three tests to cover various scenarios, including paths with and without colons, and paths with multiple colons.