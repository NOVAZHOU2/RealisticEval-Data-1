Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JavaScript documentation standards using JSDoc format:

```javascript
const path = require('path');

/**
 * Renames a Windows file path by replacing colons in the filename with underscores.
 * 
 * @param {string} path - The original file path.
 * @returns {string} The modified file path with colons in the filename replaced by underscores.
 */
function renameFilePath(path) {
    // Split the path into directory and filename
    const { dir, base } = path.parse(path);

    // Replace colons in the filename with underscores
    const sanitizedFilename = base.replace(/:/g, '_');

    // Reconstruct the full path with the sanitized filename
    const newPath = path.format({ dir, base: sanitizedFilename });

    return newPath;
}

// Example usage
console.log(renameFilePath('C:\\Users\\Example\\Documents\\file:name.txt'));
```

### Explanation:
1. **Importing `path` module**: We import the `path` module from Node.js to handle file paths.
2. **JSDoc Comments**: The function is documented using JSDoc format, which includes parameter and return type descriptions.
3. **Function Definition**: The function `renameFilePath` is defined with the same name and parameters as the Python function.
4. **Splitting the Path**: We use `path.parse` to split the path into directory (`dir`) and filename (`base`) components.
5. **Sanitizing the Filename**: We replace all colons (`:`) in the filename with underscores (`_`) using a regular expression.
6. **Reconstructing the Path**: We use `path.format` to reconstruct the full path with the sanitized filename.
7. **Example Usage**: An example call to the function is shown at the end for demonstration purposes.

This JavaScript code preserves the purpose and structure of the original Python code while adhering to JavaScript documentation standards.