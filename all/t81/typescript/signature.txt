Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Finds and returns the element from the given array that is closest to the specified target value.
 *
 * @param target - The target number to which we want to find the closest element.
 * @param elements - An array of numerical elements from which the closest element is to be found.
 * @returns The element from the array that is closest to the target value.
 */
function findClosestElement(target: number, elements: number[]): number {
    if (elements.length === 0) {
        throw new Error("The list of elements cannot be empty.");
    }

    return elements.reduce((prev, curr) => Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev);
}

// Example usage
const elements = [1, 2, 3, 4, 5];
const target = 3.6;
console.log(findClosestElement(target, elements)); // Output: 4
```

### Explanation:
1. **Function Definition**:
   - The function `findClosestElement` takes two parameters: `target` (a number) and `elements` (an array of numbers).
   - The return type is `number`.

2. **JSDoc Documentation**:
   - The JSDoc-style comments provide detailed documentation for the function, including parameter descriptions and the return type.

3. **Empty Array Check**:
   - If the `elements` array is empty, it throws an error with a descriptive message.

4. **Finding the Closest Element**:
   - The `reduce` method is used to iterate over the `elements` array and find the element closest to the `target`.
   - The comparison is done using the absolute difference between each element and the `target`.

This TypeScript code preserves the original functionality and structure of the Python code, ensuring that the closest element is found and returned, with proper documentation and type annotations.