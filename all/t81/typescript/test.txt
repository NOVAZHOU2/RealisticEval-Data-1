Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest test cases will be converted to Jest test cases with appropriate assertions.

### TypeScript Code with Jest Testing

First, ensure you have Jest installed in your TypeScript project:

```sh
npm install --save-dev jest @types/jest ts-jest
```

Add the necessary Jest configuration to your `tsconfig.json` or `jest.config.js`:

```json
{
  "preset": "ts-jest",
  "testEnvironment": "node"
}
```

Now, let's write the TypeScript test class:

```typescript
import { findClosestElement } from './path/to/findClosestElement'; // Import the function

describe('TestFindClosestElement', () => {
  it('should return 3 as it is the first closest element to 5', () => {
    expect(findClosestElement(5, [1, 3, 7, 8, 9])).toBe(3);
  });

  it('should return 7 as it exactly matches the target', () => {
    expect(findClosestElement(7, [1, 3, 7, 8, 9])).toBe(7);
  });

  it('should return 4 as it is the first closest element to 5', () => {
    expect(findClosestElement(5, [4, 6, 8, 9])).toBe(4);
  });

  it('should return 3.3 as it is the first closest element to 5.5', () => {
    expect(findClosestElement(5.5, [1.1, 3.3, 7.7, 8.8])).toBe(3.3);
  });
});
```

### TypeScript Implementation of `findClosestElement`

Ensure that the `findClosestElement` function is implemented correctly in TypeScript:

```typescript
/**
 * Finds and returns the element from the given array that is closest to the specified target value.
 *
 * @param target - The target number to which we want to find the closest element.
 * @param elements - An array of numerical elements from which the closest element is to be found.
 * @returns The element from the array that is closest to the target value.
 */
function findClosestElement(target: number, elements: number[]): number {
  if (elements.length === 0) {
    throw new Error("The list of elements cannot be empty.");
  }

  return elements.reduce((prev, curr) => Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev);
}

export { findClosestElement };
```

### Jest Configuration

Make sure your Jest configuration is set up correctly. Hereâ€™s an example `jest.config.js`:

```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
};
```

### Running the Tests

To run the tests, add a script to your `package.json`:

```json
"scripts": {
  "test": "jest"
}
```

Run the tests using:

```sh
npm test
```

This setup ensures that the tests are equivalent to the Python unittests and that the functionality is preserved. The Jest assertions (`expect`) are used to verify the correctness of the `findClosestElement` function.