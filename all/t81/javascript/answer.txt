Sure, here's the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function findClosestElement(target, elements) {
    /**
     * Finds and returns the element from the given array that is closest to the specified target value.
     *
     * @param {number} target - The target number to which we want to find the closest element.
     * @param {Array<number>} elements - An array of numerical elements from which the closest element is to be found.
     * @returns {number} The element from the array that is closest to the target value.
     */

    if (!elements || elements.length === 0) {
        throw new Error("The array of elements cannot be empty.");
    }

    return elements.reduce((prev, curr) => {
        return (Math.abs(curr - target) < Math.abs(prev - target)) ? curr : prev;
    });
}

// Example usage:
const target = 5;
const elements = [1, 3, 7, 10, 4];
console.log(findClosestElement(target, elements)); // Output should be 4
```

### Explanation:
1. **Function Definition**: The function `findClosestElement` takes two parameters: `target` and `elements`.
2. **Error Handling**: If the `elements` array is empty or not provided, an error is thrown.
3. **Finding the Closest Element**: The `reduce` method is used to iterate over the `elements` array and find the element with the minimum absolute difference from the `target`. This is achieved by comparing the absolute differences using `Math.abs`.

This JavaScript code preserves the original Python logic and functionality while adapting it to JavaScript syntax and methods.