Sure, here is the C++ code signature with the same comments:

```cpp
#include <vector>
#include <cmath> // For std::abs

/**
 * Finds and returns the element from the given vector that is closest to the specified target value.
 *
 * @param target The target number to which we want to find the closest element.
 * @param elements A vector of numerical elements from which the closest element is to be found.
 * @return The element from the vector that is closest to the target value.
 */
template<typename T>
T findClosestElement(T target, const std::vector<T>& elements) {
```

This function uses template programming in C++ to handle both `int` and `float` types. The `<typename T>` part declares a generic type `T`, allowing the function to work with any numeric type provided at compile time. The rest of the function should follow the logic of finding the closest element, similar to what you would do in Python.