To convert the provided Python unittest test class into a C++ test case using Catch2, you'll need to follow these steps:

1. Install Catch2 if you haven't already. You can download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2) or install it via your package manager.
2. Create a new C++ file for your tests, e.g., `test_find_closest_element.cpp`.
3. Write the equivalent C++ test cases using Catch2 syntax.

Here's an example of how you might write the test cases in C++ using Catch2:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"

// Assuming the function definition is in a header file named 'find_closest_element.h'
#include "find_closest_element.h"

TEST_CASE("Find Closest Element", "[find_closest_element]") {
    SECTION("Integer Targets") {
        std::vector<int> elements = {1, 5, 9, 14};
        REQUIRE(find_closest_element(7, elements) == 5);
        REQUIRE(find_closest_element(10, elements) == 9);
    }

    SECTION("Float Targets") {
        std::vector<float> elements = {1.1f, 5.5f, 9.9f, 14.1f};
        REQUIRE(find_closest_element(7.0f, elements) == 5.5f);
        REQUIRE(find_closest_element(10.0f, elements) == 9.9f);
    }

    SECTION("Edge Cases") {
        std::vector<int> singleElement = {5};
        REQUIRE(find_closest_element(5, singleElement) == 5);

        std::vector<int> emptyVector;
        REQUIRE_THROWS(find_closest_element(5, emptyVector));  // Assuming find_closest_element throws when the vector is empty
    }
}
```

### Explanation:
- **`#define CATCH_CONFIG_MAIN`**: This macro tells Catch to automatically generate a `main()` function for your test executable.
- **`#include "catch.hpp"`**: Include the Catch2 header file.
- **`TEST_CASE`**: Defines a test case with a name and a tag (optional).
- **`SECTION`**: Groups related test cases together.
- **`REQUIRE`**: Asserts that a condition must be true; if not, the test fails.
- **`REQUIRE_THROWS`**: Asserts that a function call should throw an exception.

Make sure to include the appropriate headers and ensure that your function `find_closest_element` is correctly defined and accessible in your project. If the function has any specific error handling logic (like throwing exceptions), make sure to account for those in your tests.