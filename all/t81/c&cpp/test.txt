Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro for defining test cases.

Hereâ€™s the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <cmath>
#include <stdexcept>

// Function to find the closest element to the target value in a vector of doubles
double find_closest_element(double target, const std::vector<double>& elements) {
    // Check if the list of elements is empty
    if (elements.empty()) {
        throw std::invalid_argument("The list of elements cannot be empty.");
    }

    // Initialize the closest element with the first element of the vector
    double closest = elements[0];

    // Iterate through the elements to find the closest one
    for (const auto& element : elements) {
        if (std::abs(element - target) < std::abs(closest - target)) {
            closest = element;
        }
    }

    return closest;
}

TEST_CASE("TestFindClosestElement", "[find_closest_element]") {
    SECTION("test_basic_functionality") {
        REQUIRE(find_closest_element(5, {1, 3, 7, 8, 9}) == Approx(3));
        CHECK("Should return 3 as it is the first closest element to 5");
    }

    SECTION("test_exact_match") {
        REQUIRE(find_closest_element(7, {1, 3, 7, 8, 9}) == Approx(7));
        CHECK("Should return 7 as it exactly matches the target");
    }

    SECTION("test_multiple_closest_values") {
        REQUIRE(find_closest_element(5, {4, 6, 8, 9}) == Approx(4));
        CHECK("Should return 4 as it is the first closest element to 5");
    }

    SECTION("test_float_values") {
        REQUIRE(find_closest_element(5.5, {1.1, 3.3, 7.7, 8.8}) == Approx(3.3));
        CHECK("Should return 3.3 as it is the first closest element to 5.5");
    }
}

// Main function to run the tests
int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Header Inclusion**:
   - Include the Catch2 header file `#include <catch2/catch_test_macros.hpp>` to use the testing macros.

2. **Function Definition**:
   - The `find_closest_element` function is defined as before, with appropriate error handling and logic.

3. **Test Class**:
   - Use the `TEST_CASE` macro to define the test suite.
   - Use the `SECTION` macro to define individual test cases.
   - Use `REQUIRE` for asserting the expected results.
   - Use `CHECK` for providing additional context or messages.

4. **Assertions**:
   - `Approx` is used for comparing floating-point values to handle small rounding errors.

5. **Main Function**:
   - The `main` function runs the Catch2 test session.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to the syntax and features of the Catch2 testing framework.