Here's how you can translate your Python function into C++:

```cpp
#include <vector>
#include <cmath>

template<typename T>
T findClosestElement(T target, std::vector<T> elements) {
    if(elements.empty()) return 0;

    T closest = elements[0];
    for(auto &element : elements) {
        if(std::abs(element - target) < std::abs(closest - target)) {
            closest = element;
        }
    }

    return closest;
}
```

And here's how you can use it in your C++ program:

```cpp
int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 3.5;

    int closestNumber = findClosestElement(target, numbers);

    // print the result
    std::cout << "The closest number is: " << closestNumber << std::endl;

    return 0;
}
```

This code defines a template function `findClosestElement` that takes a target value and a vector of elements, then finds and returns the element that is closest to the target value. The function uses the absolute value (`std::abs`) to compare the distances between the target and each element. It initializes the closest element with the first one in the vector, then iterates through all other elements to find the closest one. If the input vector is empty, the function will return 0.