To convert the provided Python unittest test class into a Java JUnit test case, you need to follow these steps:

1. Define the method `find_closest_element` in a Java class.
2. Create a JUnit test class named `Tester` under the package `org.real.temp`.
3. Write test methods within the `Tester` class to validate the functionality of `find_closest_element`.

Here's how you can do it:

### Step 1: Implement the Method in Java

First, create a Java class with the method `find_closest_element`. Let's call this class `ClosestElementFinder`.

```java
package org.real.temp;

import java.util.List;
import java.util.Arrays;

public class ClosestElementFinder {
    
    public static double findClosestElement(double target, List<Double> elements) {
        if (elements == null || elements.isEmpty()) {
            throw new IllegalArgumentException("The elements list cannot be null or empty");
        }
        
        double closest = elements.get(0);
        for (double element : elements) {
            if (Math.abs(element - target) < Math.abs(closest - target)) {
                closest = element;
            }
        }
        return closest;
    }
}
```

### Step 2: Create the JUnit Test Class

Next, create a JUnit test class named `Tester` under the same package `org.real.temp`.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.util.List;

public class Tester {

    @Test
    public void testFindClosestElement() {
        ClosestElementFinder finder = new ClosestElementFinder();
        
        // Test with positive numbers
        List<Double> elements1 = Arrays.asList(5.0, 10.0, 15.0, 20.0);
        assertEquals(10.0, finder.findClosestElement(7.5, elements1), "Should return 10.0");

        // Test with negative numbers
        List<Double> elements2 = Arrays.asList(-5.0, -10.0, -15.0, -20.0);
        assertEquals(-10.0, finder.findClosestElement(-7.5, elements2), "Should return -10.0");

        // Test with mixed positive and negative numbers
        List<Double> elements3 = Arrays.asList(-5.0, 0.0, 5.0, 10.0);
        assertEquals(0.0, finder.findClosestElement(3.0, elements3), "Should return 0.0");

        // Test with single element list
        List<Double> elements4 = Arrays.asList(42.0);
        assertEquals(42.0, finder.findClosestElement(42.0, elements4), "Should return 42.0");

        // Test with an empty list (should throw exception)
        assertThrows(IllegalArgumentException.class, () -> {
            finder.findClosestElement(42.0, Arrays.asList());
        }, "Should throw IllegalArgumentException for empty list");
    }
}
```

### Explanation:

- **Class Definition**: The `ClosestElementFinder` class contains the method `findClosestElement`, which takes a `target` and a `List<Double>` and returns the closest element.
  
- **JUnit Test Class**: The `Tester` class uses JUnit 5 annotations (`@Test`) to define test methods. Each test method checks different scenarios such as positive numbers, negative numbers, mixed numbers, a single-element list, and an empty list.

- **Assertions**: The `assertEquals` method is used to check if the returned value matches the expected result. The `assertThrows` method ensures that the correct exception is thrown when an invalid input (empty list) is provided.

This setup will help you verify the correctness of the `findClosestElement` method using JUnit tests in Java.