Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

/**
 * Test class for the findClosestElement method.
 */
public class Tester {

    /**
     * Tests basic functionality of the findClosestElement method.
     */
    @Test
    public void testBasicFunctionality() {
        assertEquals("Should return 3 as it is the first closest element to 5",
                     3, findClosestElement(5, List.of(1, 3, 7, 8, 9)).intValue());
    }

    /**
     * Tests the exact match scenario for the findClosestElement method.
     */
    @Test
    public void testExactMatch() {
        assertEquals("Should return 7 as it exactly matches the target",
                     7, findClosestElement(7, List.of(1, 3, 7, 8, 9)).intValue());
    }

    /**
     * Tests multiple closest values scenario for the findClosestElement method.
     */
    @Test
    public void testMultipleClosestValues() {
        assertEquals("Should return 4 as it is the first closest element to 5",
                     4, findClosestElement(5, List.of(4, 6, 8, 9)).intValue());
    }

    /**
     * Tests float values scenario for the findClosestElement method.
     */
    @Test
    public void testFloatValues() {
        assertEquals("Should return 3.3 as it is the first closest element to 5.5",
                     3.3, findClosestElement(5.5, List.of(1.1, 3.3, 7.7, 8.8)).doubleValue(), 0.001);
    }

    // Utility method to simulate the findClosestElement method
    private Number findClosestElement(Number target, List<Number> elements) {
        if (elements.isEmpty()) {
            throw new IllegalArgumentException("The list of elements cannot be empty.");
        }

        return elements.stream()
                .min((x1, x2) -> Double.compare(Math.abs(x1.doubleValue() - target.doubleValue()), Math.abs(x2.doubleValue() - target.doubleValue())))
                .orElseThrow(() -> new IllegalArgumentException("No value present"));
    }
}

// Import statements for JUnit and List
import java.util.List;
import java.util.NoSuchElementException;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
```

### Explanation:
1. **Package and Class Declaration**:
   - The package declaration `package org.real.temp;` ensures the code is organized under the specified package.
   - The class `Tester` contains the test methods.

2. **JUnit Annotations**:
   - Each test method is annotated with `@Test` to indicate that it is a test case.

3. **Assertion Methods**:
   - `assertEquals` is used to assert the expected results.

4. **Test Methods**:
   - `testBasicFunctionality`: Tests the basic functionality of finding the closest element.
   - `testExactMatch`: Tests the scenario where the target matches an element in the list.
   - `testMultipleClosestValues`: Tests the scenario with multiple closest values.
   - `testFloatValues`: Tests the scenario with floating-point values.

5. **Utility Method**:
   - The `findClosestElement` method simulates the behavior of the actual method being tested. This is included for completeness and to demonstrate how the test cases work.

6. **Import Statements**:
   - Necessary imports for `List`, `NoSuchElementException`, `Test`, and `assertEquals` are included at the end of the file.

This Java code preserves the functionality and logic of the original Python test cases while adhering to JUnit's syntax and best practices.