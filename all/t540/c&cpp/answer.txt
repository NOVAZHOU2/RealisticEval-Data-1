Certainly! Below is the equivalent C++ code for generating all unique combinations of pairs from an array:

```cpp
#include <iostream>
#include <vector>

/**
 * Generates all unique combinations of pairs from an array.
 *
 * @param array - The input vector from which combinations are generated.
 * @return A vector of vectors, where each inner vector contains a unique pair of elements.
 */
std::vector<std::vector<int>> generateUniquePairs(const std::vector<int>& array) {
    std::vector<std::vector<int>> result;

    int n = array.size();
    if (n <= 1) {
        return result;
    }

    for (int i = 0; i < n - 1; ++i) {
        for (int j = i + 1; j < n; ++j) {
            result.push_back({array[i], array[j]});
        }
    }

    return result;
}

// Function to print the result for demonstration purposes
void printResult(const std::vector<std::vector<int>>& result) {
    for (const auto& pair : result) {
        std::cout << "(" << pair[0] << ", " << pair[1] << ") ";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> array = {1, 2, 3, 4};
    std::vector<std::vector<int>> result = generateUniquePairs(array);
    printResult(result);

    return 0;
}
```

### Explanation:
- **generateUniquePairs Function**:
  - This function takes a `const std::vector<int>&` as input and returns a `std::vector<std::vector<int>>`.
  - It iterates through the array using two nested loops to generate all possible unique pairs.
  - Each pair is added to the `result` vector.

- **printResult Function**:
  - This helper function prints the pairs in a readable format.

- **main Function**:
  - Demonstrates how to use the `generateUniquePairs` function with a sample array and prints the result.

This C++ code will produce the same output as the JavaScript function for generating unique pairs from an array.