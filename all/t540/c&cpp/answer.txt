Certainly! Below is the equivalent C++ code for generating all unique combinations of pairs from an array:

```cpp
#include <iostream>
#include <vector>

/**
 * Generates all unique combinations of pairs from an array.
 *
 * @param array - The input vector from which combinations are generated.
 * @return A vector of vectors, where each inner vector contains a unique pair of elements.
 */
std::vector<std::vector<int>> generateUniquePairs(const std::vector<int>& array) {
    std::vector<std::vector<int>> pairs;
    int n = array.size();
    
    for (int i = 0; i < n - 1; ++i) {
        for (int j = i + 1; j < n; ++j) {
            pairs.push_back({array[i], array[j]});
        }
    }
    
    return pairs;
}

// Function to print the pairs for demonstration purposes
void printPairs(const std::vector<std::vector<int>>& pairs) {
    for (const auto& pair : pairs) {
        std::cout << "(" << pair[0] << ", " << pair[1] << ")" << std::endl;
    }
}

int main() {
    std::vector<int> array = {1, 2, 3, 4};
    auto pairs = generateUniquePairs(array);
    printPairs(pairs);

    return 0;
}
```

### Explanation:
1. **Function Signature**: The `generateUniquePairs` function takes a constant reference to a vector of integers and returns a vector of vectors of integers.
2. **Nested Loops**: Two nested loops iterate over the array to generate unique pairs. The outer loop runs from the first element to the second-to-last element, and the inner loop runs from the element right after the current element of the outer loop to the last element.
3. **Pair Storage**: Each pair is stored in a temporary vector and then added to the `pairs` vector.
4. **Main Function**: The `main` function demonstrates how to use the `generateUniquePairs` function and prints the resulting pairs.

This C++ code will produce the same output as the JavaScript function for the given input array.