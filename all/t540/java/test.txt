Certainly! Below is the equivalent Java JUnit test case for the JavaScript Jest test case you provided. The package is `org.real.temp`, and the class is `Tester`.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.junit.jupiter.api.Test;

public class Tester {

    /**
     * Generates all unique combinations of pairs from an array.
     *
     * @param array - The input array from which combinations are generated.
     * @return An array of arrays, where each inner array contains a unique pair of elements.
     */
    public List<List<Integer>> generateUniquePairs(int[] array) {
        if (array == null || array.length < 2) {
            return Arrays.asList();
        }

        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < array.length; i++) {
            for (int j = i + 1; j < array.length; j++) {
                result.add(Arrays.asList(array[i], array[j]));
            }
        }
        return result;
    }

    @Test
    public void testGenerateUniquePairs() {
        int[] inputArray = {1, 2, 3, 4};
        List<List<Integer>> expectedOutput = Arrays.asList(
            Arrays.asList(1, 2),
            Arrays.asList(1, 3),
            Arrays.asList(1, 4),
            Arrays.asList(2, 3),
            Arrays.asList(2, 4),
            Arrays.asList(3, 4)
        );

        List<List<Integer>> actualOutput = generateUniquePairs(inputArray);

        assertEquals(expectedOutput.size(), actualOutput.size());
        assertTrue(actualOutput.containsAll(expectedOutput));
    }
}
```

### Explanation:
1. **Package and Class**: The package is set to `org.real.temp` and the class is named `Tester`.
2. **generateUniquePairs Method**: This method takes an integer array as input and returns a list of lists, where each inner list represents a unique pair of elements.
3. **testGenerateUniquePairs Method**: This is the JUnit test method that checks the correctness of the `generateUniquePairs` method. It uses assertions to verify that the size of the output matches the expected size and that the output contains all the expected pairs.

This should provide a good starting point for your Java unit testing using JUnit.