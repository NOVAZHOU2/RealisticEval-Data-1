Certainly! Below is the equivalent Java JUnit test case for the JavaScript Jest test case you provided. This Java code uses JUnit 5 and Hamcrest matchers for assertions.

First, let's define the `generateUniquePairs` method in a class named `PairGenerator`.

```java
import java.util.ArrayList;
import java.util.List;

public class PairGenerator {

    /**
     * Generates all unique combinations of pairs from an array.
     *
     * @param array - The input array from which combinations are generated.
     * @return An array of arrays, where each inner array contains a unique pair of elements.
     */
    public static List<List<Integer>> generateUniquePairs(int[] array) {
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < array.length; i++) {
            for (int j = i + 1; j < array.length; j++) {
                List<Integer> pair = new ArrayList<>();
                pair.add(array[i]);
                pair.add(array[j]);
                result.add(pair);
            }
        }
        return result;
    }
}
```

Next, we'll create a JUnit test case for this method in a class named `Tester`.

```java
import org.junit.jupiter.api.Test;
import org.hamcrest.MatcherAssert;
import org.hamcrest.Matchers;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class Tester {

    @Test
    public void testGenerateUniquePairs() {
        int[] input = {1, 2, 3, 4};
        List<List<Integer>> expectedOutput = Arrays.asList(
                Arrays.asList(1, 2),
                Arrays.asList(1, 3),
                Arrays.asList(1, 4),
                Arrays.asList(2, 3),
                Arrays.asList(2, 4),
                Arrays.asList(3, 4)
        );

        List<List<Integer>> actualOutput = PairGenerator.generateUniquePairs(input);

        MatcherAssert.assertThat(actualOutput, Matchers.hasItems(expectedOutput.toArray()));
    }

    @Test
    public void testGenerateUniquePairsWithEmptyArray() {
        int[] input = {};
        List<List<Integer>> expectedOutput = Arrays.asList();

        List<List<Integer>> actualOutput = PairGenerator.generateUniquePairs(input);

        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testGenerateUniquePairsWithSingleElement() {
        int[] input = {1};
        List<List<Integer>> expectedOutput = Arrays.asList();

        List<List<Integer>> actualOutput = PairGenerator.generateUniquePairs(input);

        assertEquals(expectedOutput, actualOutput);
    }
}
```

### Explanation:

1. **PairGenerator Class**: This class contains the `generateUniquePairs` method that generates all unique pairs from an integer array.

2. **Tester Class**: This class contains three test methods:
   - `testGenerateUniquePairs`: Tests the method with a typical input array and verifies if the output matches the expected list of pairs.
   - `testGenerateUniquePairsWithEmptyArray`: Tests the method with an empty array and verifies if the output is also an empty list.
   - `testGenerateUniquePairsWithSingleElement`: Tests the method with an array containing only one element and verifies if the output is an empty list since there are no pairs possible.

These tests ensure that the `generateUniquePairs` method works correctly under different scenarios.