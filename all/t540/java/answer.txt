Sure! Below is the equivalent Java code for the provided JavaScript function `generateUniquePairs`.

```java
import java.util.ArrayList;
import java.util.List;

/**
 * Generates all unique combinations of pairs from an array.
 *
 * @param array The input array from which combinations are generated.
 * @return A list of lists, where each inner list contains a unique pair of elements.
 */
public class UniquePairsGenerator {

    public static List<List<Integer>> generateUniquePairs(int[] array) {
        List<List<Integer>> result = new ArrayList<>();
        
        if (array == null || array.length < 2) {
            return result; // Not enough elements to form pairs
        }
        
        for (int i = 0; i < array.length - 1; i++) {
            for (int j = i + 1; j < array.length; j++) {
                List<Integer> pair = new ArrayList<>();
                pair.add(array[i]);
                pair.add(array[j]);
                result.add(pair);
            }
        }
        
        return result;
    }

    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4};
        List<List<Integer>> pairs = generateUniquePairs(array);
        
        for (List<Integer> pair : pairs) {
            System.out.println(pair);
        }
    }
}
```

### Explanation:
1. **Class and Method Declaration**: 
   - The method `generateUniquePairs` is declared within a class named `UniquePairsGenerator`.
   
2. **Input and Output**:
   - The method takes an array of integers (`int[] array`) as input and returns a list of lists (`List<List<Integer>>`), where each inner list represents a unique pair.

3. **Edge Case Handling**:
   - If the input array is `null` or has fewer than 2 elements, the method returns an empty list since no pairs can be formed.

4. **Nested Loops**:
   - Two nested loops iterate through the array to generate all possible unique pairs. The outer loop runs from the first element to the second-to-last element, and the inner loop runs from the element after the current element of the outer loop to the last element.

5. **Pair Creation**:
   - For each pair, a new list (`pair`) is created, and the two elements are added to it. This list is then added to the result list (`result`).

6. **Main Method**:
   - The `main` method demonstrates how to use the `generateUniquePairs` method by passing an example array and printing the resulting pairs.

This Java code should work similarly to the original JavaScript function, generating all unique pairs from the given array.