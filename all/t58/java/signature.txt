Sure! Here is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and type conversions:

```java
package org.real.temp;

public class Answer {

    /**
     * Calculate the probability that n red balls will be drawn when 15 balls are randomly drawn from a jar containing x red balls and y blue balls.
     *
     * @param n The number of red balls to be drawn.
     * @param x The number of red balls in the jar.
     * @param y The number of blue balls in the jar.
     * @return The probability of drawing exactly n red balls.
     */
    public static double probabilityOfRedBalls(int n, int x, int y) {
        final int TOTAL_DRAWS = 15;
        double p = (double) x / (x + y); // Probability of drawing a red ball

        // Calculate the probability using the binomial formula
        double probability = comb(TOTAL_DRAWS, n) * Math.pow(p, n) * Math.pow(1 - p, TOTAL_DRAWS - n);
        return probability;
    }

    // Helper method to calculate combinations (n choose k)
    private static long comb(int n, int k) {
        long result = 1;
        for (int i = 0; i < k; i++) {
            result *= (n - i);
            result /= (i + 1);
        }
        return result;
    }

    // Main method for testing
    public static void main(String[] args) {
        System.out.println(probabilityOfRedBalls(3, 7, 8)); // Example test case
    }
}
```

### Explanation:
1. **Package and Class Definition**:
   - The package `org.real.temp` is defined.
   - The class `Answer` contains the method `probabilityOfRedBalls`.

2. **Javadoc Comments**:
   - The method `probabilityOfRedBalls` includes a detailed Javadoc comment block that describes the purpose, parameters, and return value.

3. **Method Signature**:
   - The method signature `public static double probabilityOfRedBalls(int n, int x, int y)` matches the Python function signature, with appropriate Java types.

4. **Implementation**:
   - The implementation of the method follows the same logic as the Python code.
   - The constant `TOTAL_DRAWS` is defined as `15`.
   - The probability calculation uses the binomial formula.

5. **Helper Method**:
   - The helper method `comb` calculates combinations (n choose k).

6. **Main Method**:
   - A `main` method is included for testing the functionality.

This Java code preserves the original functionality and structure of the Python code while adhering to Java conventions and best practices.