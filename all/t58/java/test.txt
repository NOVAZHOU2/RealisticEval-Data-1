Certainly! Here is the equivalent Java JUnit test class for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It will use JUnit annotations and assertions to ensure the functionality and logic of the tests are preserved.

### Java Code

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class Tester {

    private static final double DELTA = 1e-15;

    /**
     * Test the probability of drawing half red balls.
     */
    @Test
    public void testHalfRedBalls() {
        // Scenario where half of the drawn balls are expected to be red
        double result = probabilityOfRedBalls(7, 10, 10);
        double expectedResult = 0.001376; // Replace with the actual expected result
        assertTrue("Test with half red balls failed", isClose(result, expectedResult, DELTA));
    }

    /**
     * Test the probability of drawing some red balls.
     */
    @Test
    public void testSomeRedBalls() {
        // Scenario with some red balls in the jar, expecting a few red draws
        double result = probabilityOfRedBalls(5, 5, 10);
        double expectedResult = 0.02795; // Replace with the actual expected result
        assertTrue("Test with some red balls failed", isClose(result, expectedResult, DELTA));
    }

    /**
     * Test the probability of drawing red balls in an extreme case.
     */
    @Test
    public void testExtremeCase() {
        // Extreme scenario where the probability is low for the chosen n
        double result = probabilityOfRedBalls(15, 1, 99);
        double expectedResult = 0.000001; // Replace with the actual expected result
        assertTrue("Test with extreme case failed", isClose(result, expectedResult, DELTA));
    }

    // Helper method to check if two doubles are close enough
    private boolean isClose(double a, double b, double delta) {
        return Math.abs(a - b) <= delta;
    }

    // Method to calculate the probability of drawing red balls
    private static double probabilityOfRedBalls(int n, int x, int y) {
        final int TOTAL_DRAWS = 15;
        double p = (double) x / (x + y); // Probability of drawing a red ball

        // Calculate the probability using the binomial formula
        double probability = comb(TOTAL_DRAWS, n) * Math.pow(p, n) * Math.pow(1 - p, TOTAL_DRAWS - n);
        return probability;
    }

    // Helper method to calculate combinations (n choose k)
    private static long comb(int n, int k) {
        long result = 1;
        for (int i = 0; i < k; i++) {
            result *= (n - i);
            result /= (i + 1);
        }
        return result;
    }
}
```

### Explanation:
1. **Package and Class Definition**:
   - The package `org.real.temp` is defined.
   - The class `Tester` contains the test methods.

2. **JUnit Annotations**:
   - Each test method is annotated with `@Test` to indicate it is a test method.

3. **Assertions**:
   - The `assertTrue` method is used to assert that the calculated result is close to the expected result within a specified delta.

4. **Helper Methods**:
   - The `isClose` method checks if two double values are close enough.
   - The `probabilityOfRedBalls` method calculates the probability of drawing red balls.
   - The `comb` method calculates combinations (n choose k).

5. **Expected Results**:
   - The expected results (`expectedResult`) need to be replaced with the actual expected values calculated manually or from another tool.

This Java code preserves the original functionality and logic of the Python unittest class while adhering to JUnit conventions and best practices.