Certainly! I'll convert the Python function signature and comments into equivalent JavaScript syntax, including JSDoc comments for documentation. Here’s the converted code:

```javascript
/**
 * Calculate the probability that n red balls will be drawn when 15 balls are randomly drawn from a jar containing x red balls and y blue balls.
 *
 * @param {number} n - Number of red balls to be drawn.
 * @param {number} x - Number of red balls in the jar.
 * @param {number} y - Number of blue balls in the jar.
 * @returns {number} - The probability of drawing exactly n red balls.
 */
function probabilityOfRedBalls(n, x, y) {
    const N = 15;  // Total number of draws
    const p = x / (x + y);  // Probability of drawing a red ball

    // Calculate the probability using the binomial formula
    const probability = comb(N, n) * Math.pow(p, n) * Math.pow(1 - p, N - n);
    return probability;
}

// Example usage
console.log(probabilityOfRedBalls(3, 7, 8));  // Example call with n=3, x=7, y=8
```

### Explanation:
1. **JSDoc Comments**: The Python docstring has been converted to JSDoc comments, providing detailed descriptions of the function, arguments, and return value.

2. **Function Definition**: The function `probability_of_red_balls` is renamed to `probabilityOfRedBalls` to follow JavaScript naming conventions (camelCase).

3. **Constants and Variables**: The constants `N` and `p` are defined similarly to the Python code.

4. **Probability Calculation**: The probability is calculated using the binomial formula, involving the combination function and powers.

5. **Example Usage**: An example call to the function is provided at the end.

### Note on `comb` Function:
To use the `comb` function, you can either implement it yourself or import it from a library like `mathjs`. Here’s an example implementation if you prefer not to use an external library:

```javascript
/**
 * Calculate the combination (n choose k).
 * 
 * @param {number} n - The total number of items.
 * @param {number} k - The number of items to choose.
 * @returns {number} - The combination value.
 */
function comb(n, k) {
    let result = 1;
    for (let i = 0; i < k; i++) {
        result *= (n - i);
        result /= (i + 1);
    }
    return result;
}

// Now you can use the comb function in your main function
function probabilityOfRedBalls(n, x, y) {
    const N = 15;  // Total number of draws
    const p = x / (x + y);  // Probability of drawing a red ball

    // Calculate the probability using the binomial formula
    const probability = comb(N, n) * Math.pow(p, n) * Math.pow(1 - p, N - n);
    return probability;
}

// Example usage
console.log(probabilityOfRedBalls(3, 7, 8));  // Example call with n=3, x=7, y=8
```

This approach ensures that the functionality remains consistent and the code is self-contained.