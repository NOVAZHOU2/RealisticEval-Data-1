Sure! I'll convert the given Python code into JavaScript, ensuring that the functionality, logic, and structure remain consistent. Here's the equivalent JavaScript code:

```javascript
// Import the necessary functions for combinations and power calculations
const { comb } = require('mathjs');

function probabilityOfRedBalls(n, x, y) {
    /**
     * Calculate the probability that n red balls will be drawn when 15 balls are drawn with replacement
     * from a jar containing x red balls and y blue balls.
     *
     * @param {number} n - Number of red balls to be drawn.
     * @param {number} x - Number of red balls in the jar.
     * @param {number} y - Number of blue balls in the jar.
     *
     * @returns {number} - The probability of drawing exactly n red balls.
     */
    const N = 15;  // Total number of draws
    const p = x / (x + y);  // Probability of drawing a red ball

    // Calculate the probability using the binomial formula
    const probability = comb(N, n) * Math.pow(p, n) * Math.pow(1 - p, N - n);
    return probability;
}

// Example usage
console.log(probabilityOfRedBalls(3, 7, 8));  // Example call with n=3, x=7, y=8
```

### Explanation:
1. **Importing `comb` Function**: In JavaScript, you need to import the `comb` function from a library like `mathjs`. This function calculates the combination (n choose k).

2. **Function Definition**: The function `probabilityOfRedBalls` is defined with the same parameters and logic as the Python function.

3. **Constants and Variables**: The constants `N` and `p` are defined similarly to the Python code.

4. **Probability Calculation**: The probability is calculated using the binomial formula, which involves the combination function and powers.

5. **Example Usage**: An example call to the function is provided at the end.

This JavaScript code should provide the same functionality as the original Python code.