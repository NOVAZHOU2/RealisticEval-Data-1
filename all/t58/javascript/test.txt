Sure! Below is the equivalent JavaScript test case using Jest for the given Python unittest function `probability_of_red_balls`.

First, let's define the function in JavaScript:

```javascript
function factorial(num) {
    if (num === 0 || num === 1) return 1;
    let result = 1;
    for (let i = 2; i <= num; i++) {
        result *= i;
    }
    return result;
}

function combination(n, k) {
    return factorial(n) / (factorial(k) * factorial(n - k));
}

function probabilityOfRedBalls(n, x, y) {
    if (n > x || n > 15 || x + y !== 15) {
        throw new Error("Invalid input");
    }
    const totalWays = combination(15, n);
    const favorableWays = combination(x, n) * combination(y, 15 - n);
    return favorableWays / totalWays;
}
```

Now, let's write the Jest test cases for this function:

```javascript
const { probabilityOfRedBalls } = require('./path-to-your-function-file'); // Adjust the path accordingly

describe('probabilityOfRedBalls', () => {
    it('should calculate the probability correctly', () => {
        expect(probabilityOfRedBalls(3, 6, 9)).toBeCloseTo(0.4861111111111111);
        expect(probabilityOfRedBalls(5, 10, 5)).toBeCloseTo(0.1736111111111111);
        expect(probabilityOfRedBalls(0, 0, 15)).toBeCloseTo(0.0003586175000000001);
    });

    it('should handle invalid inputs', () => {
        expect(() => probabilityOfRedBalls(4, 6, 9)).toThrowError("Invalid input");
        expect(() => probabilityOfRedBalls(6, 10, 5)).toThrowError("Invalid input");
        expect(() => probabilityOfRedBalls(3, 3, 12)).toThrowError("Invalid input");
    });
});
```

In this example:
- We import the `probabilityOfRedBalls` function from your JavaScript file.
- We use the `describe` function to group related tests together.
- We use the `it` function to define individual test cases.
- We use `expect` with `toBeCloseTo` to check if the calculated probability is close to the expected value.
- We use `toThrowError` to check if the function throws an error with the correct message when given invalid inputs.

Make sure to adjust the path to your function file in the `require` statement.