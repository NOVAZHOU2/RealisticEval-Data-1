Sure! Here is the equivalent TypeScript code:

```typescript
import { comb } from 'mathjs';

function probabilityOfRedBalls(n: number, x: number, y: number): number {
    /**
     * Calculate the probability that n red balls will be drawn when 15 balls are drawn with replacement
     * from a jar containing x red balls and y blue balls.
     *
     * @param n - Number of red balls to be drawn.
     * @param x - Number of red balls in the jar.
     * @param y - Number of blue balls in the jar.
     * @returns The probability of drawing exactly n red balls.
     */
    const N = 15; // Total number of draws
    const p = x / (x + y); // Probability of drawing a red ball

    // Calculate the probability using the binomial formula
    const probability = comb(N, n) * Math.pow(p, n) * Math.pow(1 - p, N - n);
    return probability;
}

// Example usage
console.log(probabilityOfRedBalls(3, 7, 8));
```

### Explanation:
1. **Import Statement**: The `comb` function is imported from the `mathjs` library. This library provides a wide range of mathematical functions, including `comb`.

2. **Function Definition**: The function `probabilityOfRedBalls` is defined with the same parameters and return type as the Python function.

3. **Constants**: The constants `N` and `p` are defined similarly to the Python code.

4. **Probability Calculation**: The probability is calculated using the binomial formula, which involves the `comb` function and the `Math.pow` function for exponentiation.

5. **Example Usage**: An example call to the function is included at the end to demonstrate how it can be used.

This TypeScript code maintains the same functionality and logic as the original Python code, while adhering to TypeScript's static type system and best practices.