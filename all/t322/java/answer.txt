Certainly! Below is the equivalent Java code for your JavaScript function `isValidEmail`:

```java
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 * Verify that a string is a valid email address.
 *
 * @param email The email address to be validated.
 * @return true if the email matches the regex pattern, indicating it is valid; false otherwise.
 */
public class EmailValidator {

    public static boolean isValidEmail(String email) {
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        Pattern pattern = Pattern.compile(emailRegex);
        if (email == null) {
            return false;
        }
        Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }

    public static void main(String[] args) {
        // Test cases
        System.out.println(isValidEmail("example@example.com")); // true
        System.out.println(isValidEmail("invalid-email"));       // false
        System.out.println(isValidEmail(null));                  // false
    }
}
```

### Explanation:
1. **Imports**: We import `Pattern` and `Matcher` from the `java.util.regex` package to work with regular expressions in Java.
2. **Method Definition**: The method `isValidEmail` takes a `String` parameter `email` and returns a `boolean`.
3. **Regular Expression**: The same regular expression used in the JavaScript function is used in the Java version.
4. **Pattern Compilation**: The regular expression is compiled into a `Pattern` object.
5. **Null Check**: If the input `email` is `null`, the method returns `false`.
6. **Matcher**: A `Matcher` object is created to match the input `email` against the compiled pattern.
7. **Return Result**: The method returns `true` if the email matches the pattern, otherwise `false`.

### Usage:
- The `main` method includes some test cases to demonstrate how the `isValidEmail` method works.

This Java code should behave similarly to the provided JavaScript function.