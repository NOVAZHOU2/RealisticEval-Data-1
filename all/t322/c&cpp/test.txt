Certainly! Below is an equivalent C++ Catch2 test case for the provided JavaScript Jest test function `isValidEmail`. 

First, ensure you have Catch2 installed in your project. If not, you can install it via vcpkg or manually.

Here's how you might write the C++ Catch2 test case:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <regex>

// Function to validate an email address
bool isValidEmail(const std::string& email) {
    // Regex pattern for validating an email
    const std::regex emailRegex(R"(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$)");
    return std::regex_match(email, emailRegex);
}

// Test cases using Catch2
TEST_CASE("Test Email Validation", "[email]") {
    REQUIRE(isValidEmail("example@example.com") == true);
    REQUIRE(isValidEmail("user.name@domain.co.uk") == true);
    REQUIRE(isValidEmail("user_name@domain.com") == true);
    REQUIRE(isValidEmail("user-name@domain.com") == true);
    REQUIRE(isValidEmail("user+name@domain.com") == true);

    REQUIRE(isValidEmail("user@domain") == false); // Missing top-level domain
    REQUIRE(isValidEmail("user@domain.") == false); // Dot at the end of domain
    REQUIRE(isValidEmail("@domain.com") == false);  // Missing local part
    REQUIRE(isValidEmail("user@.com") == false);   // Empty domain
    REQUIRE(isValidEmail("user@domain..com") == false); // Double dot in domain
    REQUIRE(isValidEmail("user@domain.c") == false); // Too short top-level domain
}
```

### Explanation:
1. **Function Definition**: The `isValidEmail` function uses a regular expression to check if the input string matches the pattern of a valid email address.
   
2. **Catch2 Test Case**:
   - `TEST_CASE("Test Email Validation", "[email]")`: Defines a test case named "Test Email Validation" and tags it with `[email]`.
   - `REQUIRE(isValidEmail(...))`: Checks if the `isValidEmail` function returns the expected result (`true` or `false`). If any of these assertions fail, the test will fail.

3. **Assertions**: Multiple `REQUIRE` statements are used to test various scenarios including valid and invalid email addresses.

Make sure to include the Catch2 header file (`#include <catch2/catch_test_macros.hpp>`) and link against the Catch2 library when compiling your C++ code.