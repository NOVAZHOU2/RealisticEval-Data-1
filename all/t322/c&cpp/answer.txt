Sure! Below is the equivalent C++ code for your JavaScript function `isValidEmail`. This C++ code uses regular expressions to validate an email address.

```cpp
#include <iostream>
#include <regex>
#include <string>

/**
 * Verify that a string is a valid email address
 *
 * @param email - The email address to be validated.
 * @return true if the email matches the regex pattern, indicating it is valid,
 *         false otherwise.
 */
bool isValidEmail(const std::string& email) {
    // Regular expression for validating an Email
    const std::regex emailRegex(R"(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$)");

    // Check if the email matches the regex pattern
    return std::regex_match(email, emailRegex);
}

int main() {
    // Test cases
    std::string email1 = "example@example.com";
    std::string email2 = "invalid-email";

    std::cout << "Is \"" << email1 << "\" a valid email? " << (isValidEmail(email1) ? "Yes" : "No") << std::endl;
    std::cout << "Is \"" << email2 << "\" a valid email? " << (isValidEmail(email2) ? "Yes" : "No") << std::endl;

    return 0;
}
```

### Explanation:
1. **Include Necessary Headers**: We include `<iostream>`, `<regex>`, and `<string>` headers.
2. **Function Definition**: The `isValidEmail` function takes a `const std::string&` parameter representing the email address to be validated.
3. **Regular Expression**: We define a regular expression `emailRegex` that matches valid email addresses.
4. **Regex Match**: We use `std::regex_match` to check if the input email matches the regular expression.
5. **Return Result**: The function returns `true` if the email is valid, otherwise `false`.
6. **Main Function**: The `main` function includes test cases to demonstrate the usage of `isValidEmail`.

This C++ code should work similarly to your original JavaScript function.