Sure! Below is the equivalent Python unit test case using the `unittest` framework for your JavaScript Jest test case:

```python
import re
import unittest

def is_valid_email(email):
    # Regular expression pattern for validating an email address
    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(email_regex, email))

class TestIsValidEmail(unittest.TestCase):
    def test_valid_emails(self):
        self.assertTrue(is_valid_email("example@example.com"))
        self.assertTrue(is_valid_email("test.user+tag+sorting@example.co.uk"))
    
    def test_invalid_emails(self):
        self.assertFalse(is_valid_email("example.com"))
        self.assertFalse(is_valid_email("@missingusername.com"))
        self.assertFalse(is_valid_email("username@.com"))
        self.assertFalse(is_valid_email("username@domain"))

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
1. **Regular Expression**: The `is_valid_email` function uses a regular expression to validate the email format.
2. **Test Class**: The `TestIsValidEmail` class inherits from `unittest.TestCase`.
3. **Test Methods**:
   - `test_valid_emails`: Contains assertions to check if valid email addresses are correctly identified.
   - `test_invalid_emails`: Contains assertions to check if invalid email addresses are correctly identified.

This Python script can be run using the `unittest` module, and it will provide detailed output on whether each test passes or fails.