Sure! Here's how you can convert the JavaScript Jest test case to a Python unit test using `unittest`:

```python
import re
import unittest

def is_valid_email(email):
    # Define the regex pattern for validating an email
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))

class TestIsValidEmail(unittest.TestCase):

    def test_valid_emails(self):
        self.assertTrue(is_valid_email('example@example.com'))
        self.assertTrue(is_valid_email('name.lastname@domain.co.uk'))
        self.assertTrue(is_valid_email('1234567890@domain.com'))

    def test_invalid_emails(self):
        self.assertFalse(is_valid_email('invalid-email@'))
        self.assertFalse(is_valid_email('@missingusername.com'))
        self.assertFalse(is_valid_email('noatsign.com'))
        self.assertFalse(is_valid_email('special*char@domain.com'))

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
1. **Function Definition**: The `is_valid_email` function remains unchanged and uses a regular expression to validate the email format.

2. **Test Class**: A new class `TestIsValidEmail` is created that inherits from `unittest.TestCase`.

3. **Test Methods**:
   - `test_valid_emails`: This method tests various valid email addresses.
   - `test_invalid_emails`: This method tests various invalid email addresses.

4. **Running Tests**: The script includes `if __name__ == '__main__': unittest.main()` which allows running the tests directly from the command line.

This setup ensures that your email validation function is tested with both valid and invalid inputs in Python using the `unittest` framework.