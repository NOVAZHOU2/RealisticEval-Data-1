Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro for each test case.

Hereâ€™s the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <algorithm>

// Function to find the length of the longest strictly increasing subsequence in an integer vector.
// Args:
//     nums (std::vector<int>): Integer vector.
// Returns:
//     int: Length of the longest strictly increasing subsequence.
int length_of_LIS(const std::vector<int>& nums) {
    if (nums.empty()) {
        return 0;
    }

    std::vector<int> dp(nums.size(), 1);

    for (size_t i = 0; i < nums.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[i] > nums[j]) {
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
    }

    return *std::max_element(dp.begin(), dp.end());
}

TEST_CASE("Test Length of LIS", "[LIS]") {
    SECTION("Empty list") {
        REQUIRE(length_of_LIS({}) == 0);
    }

    SECTION("Single element") {
        REQUIRE(length_of_LIS({7}) == 1);
    }

    SECTION("Strictly increasing sequence") {
        REQUIRE(length_of_LIS({1, 2, 3, 4, 5}) == 5);
    }

    SECTION("Strictly decreasing sequence") {
        REQUIRE(length_of_LIS({5, 4, 3, 2, 1}) == 1);
    }

    SECTION("Complex sequence") {
        REQUIRE(length_of_LIS({10, 9, 2, 5, 3, 7, 101, 18}) == 4);
    }

    SECTION("All equal elements") {
        REQUIRE(length_of_LIS({2, 2, 2, 2}) == 1);
    }

    SECTION("With negative numbers") {
        REQUIRE(length_of_LIS({-1, -2, -3, 0, 1, 2}) == 4);
    }
}
```

### Explanation:
1. **Header Files**:
   - `#include <catch2/catch_test_macros.hpp>` for Catch2 test macros.
   - `#include <vector>` for using `std::vector`.
   - `#include <algorithm>` for using `std::max_element`.

2. **Function Definition**:
   - The function `length_of_LIS` takes a `const std::vector<int>&` as input and returns an `int`.

3. **Catch2 Test Suite**:
   - The `TEST_CASE` macro defines a test suite named "Test Length of LIS".
   - Each `SECTION` within the test suite corresponds to a specific test case.

4. **Assertions**:
   - `REQUIRE` is used for assertions. It checks that the expected value matches the actual value returned by the function.

5. **Test Cases**:
   - Each test case is implemented using a `SECTION` within the test suite.
   - The test cases cover various scenarios, including empty lists, single elements, strictly increasing sequences, strictly decreasing sequences, complex sequences, and sequences with negative numbers.

This C++ code ensures that the functionality and logic of the tests are preserved, and it uses appropriate assertions in Catch2 to validate the correctness of the `length_of_LIS` function.