Sure! Let's convert the given Python function into a C++ function and write the corresponding tests using Catch2.

First, we need to define the function `length_of_LIS` in C++. Then, we will write the tests using Catch2.

Hereâ€™s the complete C++ implementation and tests:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <algorithm>

// Function to find the length of the longest strictly increasing subsequence
int length_of_LIS(const std::vector<int>& nums) {
    if (nums.empty()) return 0;

    std::vector<int> dp(nums.size(), 1);
    int maxLength = 1;

    for (size_t i = 1; i < nums.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[i] > nums[j]) {
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
        maxLength = std::max(maxLength, dp[i]);
    }

    return maxLength;
}

TEST_CASE("Test longest strictly increasing subsequence") {
    SECTION("Empty vector") {
        REQUIRE(length_of_LIS({}) == 0);
    }

    SECTION("Single element") {
        REQUIRE(length_of_LIS({5}) == 1);
    }

    SECTION("Increasing sequence") {
        REQUIRE(length_of_LIS({1, 2, 3, 4, 5}) == 5);
    }

    SECTION("Non-increasing sequence") {
        REQUIRE(length_of_LIS({5, 4, 3, 2, 1}) == 1);
    }

    SECTION("Mixed sequence") {
        REQUIRE(length_of_LIS({10, 9, 2, 5, 3, 7, 101, 18}) == 4);
    }
}
```

### Explanation:
1. **Function Definition**: The `length_of_LIS` function takes a vector of integers and returns the length of the longest strictly increasing subsequence.
2. **Dynamic Programming Approach**: We use dynamic programming to solve this problem. We initialize a `dp` vector to keep track of the longest increasing subsequence ending at each index.
3. **Testing**: We use Catch2 to write several test cases to verify the correctness of the function. Each section in the `TEST_CASE` checks different scenarios such as empty vectors, single elements, increasing sequences, non-increasing sequences, and mixed sequences.

### Setup Instructions:
- Ensure you have Catch2 installed in your project.
- Include the necessary headers and libraries.
- Compile and run the tests using a C++ compiler with Catch2 support.

This setup should provide a comprehensive set of tests that validate the functionality of the `length_of_LIS` function in C++.