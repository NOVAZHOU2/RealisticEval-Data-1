Hereâ€™s the converted C++ function with comments that match the original Python docstring and type annotations:

```cpp
#include <vector>
#include <algorithm>

// Function to find the length of the longest strictly increasing subsequence
// Given a vector of integers 'nums', returns the length of the longest strictly increasing subsequence
int length_of_LIS(const std::vector<int>& nums) {
    /*
        Find the length of the longest strictly increasing subsequence in 'nums'

        Args:
            nums (std::vector<int>): vector of integers

        Returns:
            int: length of the longest strictly increasing subsequence
    */

    if (nums.empty()) return 0;

    std::vector<int> dp(nums.size(), 1);

    for (size_t i = 1; i < nums.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[i] > nums[j]) {
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
    }

    return *std::max_element(dp.begin(), dp.end());
}
```

In this C++ version:
- `List[int]` is translated to `std::vector<int>`.
- The function signature includes a return type and a parameter with its type.
- Docstrings are translated into C++ style comments, including multi-line comments for the detailed explanation.
- The logic inside the function remains the same, using dynamic programming to find the length of the longest strictly increasing subsequence.