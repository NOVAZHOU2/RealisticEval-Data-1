Sure! Below is the equivalent C++ code for the given Python function. The code maintains the same functionality and logic but adapts to C++ syntax and features:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int length_of_LIS(const std::vector<int>& nums) {
    /**
     * Given a vector of integers nums, find the length of the longest strictly increasing subsequence in it.
     *
     * Args:
     *     nums (std::vector<int>): Integer vector.
     *
     * Returns:
     *     int: Length of the longest strictly increasing subsequence.
     */
    if (nums.empty()) {
        return 0;
    }

    std::vector<int> dp(nums.size(), 1);

    for (size_t i = 0; i < nums.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[i] > nums[j]) {
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
    }

    return *std::max_element(dp.begin(), dp.end());
}

int main() {
    // Example usage
    std::vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
    std::cout << "Length of the longest strictly increasing subsequence: " << length_of_LIS(nums) << std::endl;

    return 0;
}
```

### Explanation:
1. **Header Files**: 
   - `#include <iostream>` for input/output operations.
   - `#include <vector>` for using `std::vector`.
   - `#include <algorithm>` for using `std::max_element`.

2. **Function Definition**:
   - The function `length_of_LIS` takes a `std::vector<int>` as input and returns an integer.

3. **Initialization**:
   - Check if the input vector is empty. If so, return 0.
   - Initialize a dynamic programming vector `dp` with all elements set to 1.

4. **Dynamic Programming Loop**:
   - Iterate over the input vector using two nested loops.
   - Update the `dp` vector based on the condition `nums[i] > nums[j]`.

5. **Finding the Maximum Value**:
   - Use `std::max_element` to find the maximum value in the `dp` vector.

6. **Example Usage**:
   - In the `main` function, an example vector is defined and passed to `length_of_LIS`, and the result is printed.

This C++ code should provide the same functionality as the original Python code.