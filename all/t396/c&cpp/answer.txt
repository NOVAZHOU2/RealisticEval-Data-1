Here is a C++ version of your Python function:

```c++
#include <vector>
#include <algorithm>

int lengthOfLIS(std::vector<int>& nums) {
    std::vector<int> dp(nums.size(), 1);

    for(int i = 0; i < nums.size(); ++i)
        for(int j = 0; j < i; ++j)
            if(nums[i] > nums[j])
                dp[i] = std::max(dp[i], dp[j]+1);
                
    return *std::max_element(dp.begin(), dp.end());
}
```

And here is the corresponding C version:

```c
#include <stdlib.h>
#include <limits.h>

int max(int a, int b){
    return a > b ? a : b;
}

int lengthOfLIS(int* nums, int numsSize) {
    int* dp = malloc(sizeof(int)*numsSize);
    for(int i=0;i<numsSize;i++){
        dp[i] = 1;
    }

    for(int i = 0; i < numsSize; ++i){
        for(int j = 0; j < i; ++j){
            if(nums[i] > nums[j]){
                dp[i] = max(dp[i], dp[j]+1);
            }
        }
    }

    int result = INT_MIN;
    for(int i=0;i<numsSize;i++){
        if(result < dp[i]){
            result = dp[i];
        }
    }
    free(dp);
    return result;
}
```
In both versions, `dp` is used to store the maximum length of LIS ending at each position in the input array. The outer loop iterates over each element and the inner loop checks all previous elements to see if they can form a longer increasing subsequence with the current element.

Please note that you need to include `<vector>` and `<algorithm>` in C++ and `<stdlib.h>` and `<limits.h>` in C to use vector, algorithm, malloc, free and limits respectively.