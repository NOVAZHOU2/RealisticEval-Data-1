Sure! Below is the equivalent C++ code for the given Python function. The code maintains the same functionality and logic but adapts to C++ syntax and features:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int length_of_LIS(const std::vector<int>& nums) {
    /**
     * Given a vector of integers nums, find the length of the longest strictly increasing subsequence in it.
     *
     * Args:
     *     nums (std::vector<int>): Integer vector.
     *
     * Returns:
     *     int: Length of the longest strictly increasing subsequence.
     */
    if (nums.empty()) {
        return 0;
    }
    
    std::vector<int> dp(nums.size(), 1);
    
    for (size_t i = 0; i < nums.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[i] > nums[j]) {
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
    }
    
    return *std::max_element(dp.begin(), dp.end());
}

int main() {
    // Example usage
    std::vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
    std::cout << "Length of the longest strictly increasing subsequence: " << length_of_LIS(nums) << std::endl;
    return 0;
}
```

### Explanation:
1. **Headers**: 
   - `#include <iostream>` for input/output operations.
   - `#include <vector>` for using the `std::vector` container.
   - `#include <algorithm>` for using `std::max_element`.

2. **Function Definition**:
   - `length_of_LIS`: This function takes a `std::vector<int>` as an argument and returns an integer representing the length of the longest strictly increasing subsequence.

3. **Empty Check**:
   - If the input vector is empty (`nums.empty()`), the function returns `0`.

4. **Dynamic Programming Array**:
   - `dp` is initialized as a vector of integers with all elements set to `1`. The size of `dp` is the same as the size of `nums`.

5. **Loop for DP Calculation**:
   - Two nested loops iterate through the vector and calculate the maximum length of the increasing subsequence ending at each index.

6. **Finding Maximum**:
   - `std::max_element` is used to find the maximum value in the `dp` vector.

7. **Main Function**:
   - An example usage of the `length_of_LIS` function is shown in the `main` function, which prints the result to the console.

This C++ code follows the same logic and structure as the Python code but uses C++-specific syntax and features.