Certainly! I'll convert the given Python function signature and comments into equivalent JavaScript syntax, including JSDoc comments for documentation. Hereâ€™s the converted code:

```javascript
/**
 * Given an array of integers `nums`, find the length of the longest strictly increasing subsequence in it.
 *
 * @param {number[]} nums - An array of integers
 * @return {number} The length of the longest strictly increasing subsequence
 */
function lengthOfLIS(nums) {
    if (!nums.length) {
        return 0;
    }
    const dp = [];
    for (let i = 0; i < nums.length; i++) {
        dp[i] = 1;
        for (let j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }
    return Math.max(...dp);
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block at the beginning provides a clear description of the function.
   - It specifies the parameters and return type using JSDoc tags.
   
2. **Function Definition**:
   - The function `lengthOfLIS` is defined with a single parameter `nums`.
   
3. **Initialization**:
   - If the input array `nums` is empty, the function returns `0`.
   
4. **Dynamic Programming Array**:
   - The `dp` array is initialized with all elements set to `1`.
   
5. **Nested Loops**:
   - The outer loop iterates over each element in `nums`.
   - The inner loop compares each element with previous elements to update the `dp` array based on the strictly increasing condition.
   
6. **Return Statement**:
   - Finally, the function returns the maximum value found in the `dp` array using `Math.max(...dp)`.

This JavaScript code preserves the purpose and structure of the original Python code, including proper documentation using JSDoc.