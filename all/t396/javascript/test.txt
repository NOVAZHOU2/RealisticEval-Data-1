Sure, let's convert the given Python unittest test class into a Jest test class. Since you haven't provided the actual unittest test class, I'll assume a typical structure for testing the `length_of_LIS` function and convert it to Jest.

Here's the Python unittest test class for reference:

```python
import unittest

from typing import List

def length_of_LIS(nums: List[int]) -> int:
    """
    Given an array of integers nums, find the length of the longest strictly increasing subsequence in it

    Args:
        nums (List[int]): int array

    Returns:
        int: longest strictly increasing subsequence
    """
    # Implementation of the function goes here
    pass

class TestLengthOfLIS(unittest.TestCase):
    def test_empty_array(self):
        self.assertEqual(length_of_LIS([]), 0)

    def test_single_element(self):
        self.assertEqual(length_of_LIS([5]), 1)

    def test_increasing_sequence(self):
        self.assertEqual(length_of_LIS([1, 2, 3, 4, 5]), 5)

    def test_decreasing_sequence(self):
        self.assertEqual(length_of_LIS([5, 4, 3, 2, 1]), 1)

    def test_mixed_sequence(self):
        self.assertEqual(length_of_LIS([10, 9, 2, 5, 3, 7, 101, 18]), 4)

if __name__ == '__main__':
    unittest.main()
```

Now, let's convert this to a Jest test class:

```javascript
// Assuming the implementation of the function is in a separate file
const { lengthOfLIS } = require('./path/to/lengthOfLIS');

describe('lengthOfLIS', () => {
    it('should return 0 for an empty array', () => {
        expect(lengthOfLIS([])).toBe(0);
    });

    it('should return 1 for a single element array', () => {
        expect(lengthOfLIS([5])).toBe(1);
    });

    it('should return 5 for an increasing sequence', () => {
        expect(lengthOfLIS([1, 2, 3, 4, 5])).toBe(5);
    });

    it('should return 1 for a decreasing sequence', () => {
        expect(lengthOfLIS([5, 4, 3, 2, 1])).toBe(1);
    });

    it('should return 4 for a mixed sequence', () => {
        expect(lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18])).toBe(4);
    });
});
```

### Notes on Conversion:
1. **Imports**: In JavaScript, we use `require` or `import` statements to import functions from other files.
2. **Test Structure**: Jest uses `describe` blocks and `it` blocks to structure tests, similar to how `unittest.TestCase` methods work.
3. **Assertions**: Jest uses `expect` for assertions, which provides a variety of matchers like `toBe`, `toEqual`, etc.
4. **Function Naming**: The function name was converted from snake_case (`length_of_LIS`) to camelCase (`lengthOfLIS`) as per common JavaScript conventions.

If you have any specific implementation details for `length_of_LIS` or additional test cases, please provide them, and I can further refine the conversion.