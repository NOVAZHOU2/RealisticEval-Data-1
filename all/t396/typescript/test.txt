Sure! Here's how you can convert the given Python unittest test class to TypeScript using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

function lengthOfLIS(nums: number[]): number {
    /**
     * Given an array of integers nums, find the length of the longest strictly increasing subsequence in it.
     *
     * @param {number[]} nums - The input array of integers.
     * @returns {number} The length of the longest strictly increasing subsequence.
     */
    if (nums.length === 0) return 0;

    const dp = new Array(nums.length).fill(1);

    for (let i = 1; i < nums.length; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }

    return Math.max(...dp);
}

describe('lengthOfLIS', () => {
    it('should return 4 for [10,9,2,5,3,7,101,18]', () => {
        expect(lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18])).toBe(4);
    });

    it('should return 1 for [0]', () => {
        expect(lengthOfLIS([0])).toBe(1);
    });

    it('should return 1 for [1]', () => {
        expect(lengthOfLIS([1])).toBe(1);
    });

    it('should return 0 for []', () => {
        expect(lengthOfLIS([])).toBe(0);
    });
});
```

### Explanation:
1. **Function Definition**: The `lengthOfLIS` function is defined to take an array of numbers and return the length of the longest strictly increasing subsequence.
2. **Jest Setup**: We use Jest's `describe`, `it`, and `expect` functions to write our tests.
3. **Test Cases**:
   - `it('should return 4 for [10,9,2,5,3,7,101,18]', () => { ... })`: Tests the function with the example provided.
   - `it('should return 1 for [0]', () => { ... })`: Tests the function with a single element array.
   - `it('should return 1 for [1]', () => { ... })`: Tests the function with a single element array.
   - `it('should return 0 for []', () => { ... })`: Tests the function with an empty array.

This setup ensures that your TypeScript code is tested effectively using Jest.