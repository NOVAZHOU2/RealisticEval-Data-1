Sure! Below is the equivalent TypeScript code using Jest for testing the `length_of_LIS` function.

First, let's define the function in TypeScript:

```typescript
function lengthOfLIS(nums: number[]): number {
    if (nums.length === 0) return 0;

    const dp = new Array(nums.length).fill(1);

    for (let i = 1; i < nums.length; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }

    return Math.max(...dp);
}
```

Now, let's write the Jest test suite:

```typescript
import { lengthOfLIS } from './path-to-your-function'; // Adjust the path as needed

describe('lengthOfLIS', () => {
    it('returns 0 for an empty array', () => {
        expect(lengthOfLIS([])).toBe(0);
    });

    it('returns 1 for an array with one element', () => {
        expect(lengthOfLIS([1])).toBe(1);
    });

    it('returns the correct length for a strictly increasing sequence', () => {
        expect(lengthOfLIS([1, 2, 3, 4, 5])).toBe(5);
    });

    it('returns the correct length for a mixed sequence', () => {
        expect(lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18])).toBe(4);
    });

    it('returns the correct length for a non-increasing sequence', () => {
        expect(lengthOfLIS([5, 4, 3, 2, 1])).toBe(1);
    });

    it('returns the correct length for a sequence with duplicates', () => {
        expect(lengthOfLIS([1, 3, 5, 4, 7, 7, 8, 9])).toBe(5);
    });
});
```

### Explanation:
1. **Function Definition**: 
   - The TypeScript function `lengthOfLIS` is defined to match the Python function `length_of_LIS`.
   - It uses dynamic programming to find the length of the longest strictly increasing subsequence.

2. **Test Suite**:
   - The `describe` block groups all related tests under the `lengthOfLIS` function.
   - Each `it` block contains a specific test case with a description and an assertion using `expect`.

3. **Assertions**:
   - `expect(lengthOfLIS([])).toBe(0)` checks the function returns 0 for an empty array.
   - `expect(lengthOfLIS([1])).toBe(1)` checks the function returns 1 for an array with one element.
   - `expect(lengthOfLIS([1, 2, 3, 4, 5])).toBe(5)` checks the function returns the correct length for a strictly increasing sequence.
   - `expect(lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18])).toBe(4)` checks the function returns the correct length for a mixed sequence.
   - `expect(lengthOfLIS([5, 4, 3, 2, 1])).toBe(1)` checks the function returns the correct length for a non-increasing sequence.
   - `expect(lengthOfLIS([1, 3, 5, 4, 7, 7, 8, 9])).toBe(5)` checks the function returns the correct length for a sequence with duplicates.

Make sure you adjust the import path for the `lengthOfLIS` function based on your project structure.