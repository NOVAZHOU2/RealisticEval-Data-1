Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest test cases will be converted to Jest test cases, and the necessary type annotations and Jest assertions will be included.

### TypeScript Code

First, ensure you have Jest installed in your TypeScript project:
```sh
npm install --save-dev jest @types/jest ts-jest
```

Add the necessary Jest configuration to your `tsconfig.json` or `jest.config.js`:
```json
{
  "preset": "ts-jest",
  "testEnvironment": "node"
}
```

Now, here is the TypeScript test class:

```typescript
import { lengthOfLIS } from './path-to-your-function'; // Import the function from the appropriate file

describe('TestLengthOfLIS', () => {
  it('should handle an empty list', () => {
    expect(lengthOfLIS([])).toBe(0);
  });

  it('should handle a list with a single element', () => {
    expect(lengthOfLIS([7])).toBe(1);
  });

  it('should handle a strictly increasing sequence', () => {
    expect(lengthOfLIS([1, 2, 3, 4, 5])).toBe(5);
  });

  it('should handle a strictly decreasing sequence', () => {
    expect(lengthOfLIS([5, 4, 3, 2, 1])).toBe(1);
  });

  it('should handle a complex sequence with a mix of increasing and decreasing elements', () => {
    expect(lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18])).toBe(4);
  });

  it('should handle a list with all elements being equal', () => {
    expect(lengthOfLIS([2, 2, 2, 2])).toBe(1);
  });

  it('should handle a mix of negative and positive numbers', () => {
    expect(lengthOfLIS([-1, -2, -3, 0, 1, 2])).toBe(4);
  });
});
```

### Explanation:
1. **Import Function**:
   - Import the `lengthOfLIS` function from the appropriate file using `import { lengthOfLIS } from './path-to-your-function';`.

2. **Describe Block**:
   - Use the `describe` block to group the test cases under a descriptive name (`TestLengthOfLIS`).

3. **Test Cases**:
   - Each test case is defined using the `it` function, which takes a description and a callback function.
   - Inside each callback function, use `expect` to assert the expected behavior of the `lengthOfLIS` function.

4. **Assertions**:
   - Use `expect` with `toBe` to check that the output of `lengthOfLIS` matches the expected value.

### Example Test Cases:
- **Empty List**: Checks that the function returns `0` when given an empty list.
- **Single Element**: Checks that the function returns `1` when given a list with a single element.
- **Strictly Increasing Sequence**: Checks that the function returns the correct length for a strictly increasing sequence.
- **Strictly Decreasing Sequence**: Checks that the function returns the correct length for a strictly decreasing sequence.
- **Complex Sequence**: Checks that the function handles a mix of increasing and decreasing elements correctly.
- **All Equal Elements**: Checks that the function returns `1` when all elements in the list are equal.
- **Mix of Negative and Positive Numbers**: Checks that the function handles a mix of negative and positive numbers correctly.

This setup ensures that the tests are structured and documented clearly, and the assertions are appropriately mapped from Python's `unittest` to Jest's assertion methods.