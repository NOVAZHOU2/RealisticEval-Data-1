Certainly! Here is the equivalent TypeScript code for the given Python function:

```typescript
function lengthOfLIS(nums: number[]): number {
    /**
     * Given an array of integers nums, find the length of the longest strictly increasing subsequence in it.
     *
     * @param nums - Array of integers.
     * @returns The length of the longest strictly increasing subsequence.
     */
    if (nums.length === 0) {
        return 0;
    }

    const dp: number[] = new Array(nums.length).fill(1);

    for (let i = 0; i < nums.length; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }

    return Math.max(...dp);
}

// Example usage
console.log(lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18])); // Output: 4
```

### Explanation:
1. **Function Definition**: The function `lengthOfLIS` is defined with the type signature `function lengthOfLIS(nums: number[]): number`.
2. **Check for Empty Array**: If `nums` is empty, the function returns `0`.
3. **Dynamic Programming Initialization**: An array `dp` is initialized with `1`s, representing the minimum length of the subsequence (itself).
4. **Nested Loops**: Two nested loops iterate through the array to compute the longest increasing subsequence.
5. **Math.max**: The `Math.max` function is used to update the `dp` array with the maximum value found.
6. **Return Statement**: The function returns the maximum value in the `dp` array using the spread operator with `Math.max`.

This TypeScript code maintains the same functionality and logic as the original Python code, while adhering to TypeScript's static type system.