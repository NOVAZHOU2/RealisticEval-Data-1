Sure! Here is the equivalent TypeScript code for the given Python function:

```typescript
function lengthOfLIS(nums: number[]): number {
    /**
     * Given an array of integers nums, find the length of the longest strictly increasing subsequence in it.
     *
     * @param {number[]} nums - Array of integers.
     * @returns {number} Length of the longest strictly increasing subsequence.
     */
    if (nums.length === 0) {
        return 0;
    }

    const dp: number[] = new Array(nums.length).fill(1);

    for (let i = 0; i < nums.length; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }

    return Math.max(...dp);
}
```

### Explanation:
1. **Function Definition**: The function `lengthOfLIS` takes an array of numbers (`nums`) and returns a number representing the length of the longest strictly increasing subsequence.

2. **Initial Check**: If the input array `nums` is empty, the function returns `0`.

3. **Dynamic Programming Array**: A dynamic programming array `dp` is initialized with all elements set to `1`. This array will store the length of the longest increasing subsequence ending at each index.

4. **Nested Loops**:
   - The outer loop iterates over the indices of `nums`.
   - The inner loop iterates over the indices up to the current index `i`.
   - For each pair `(i, j)` where `nums[i] > nums[j]`, the value at `dp[i]` is updated to the maximum of its current value and `dp[j] + 1`.

5. **Result**: Finally, the function returns the maximum value found in the `dp` array, which represents the length of the longest strictly increasing subsequence.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate adjustments for TypeScript's syntax and type system.