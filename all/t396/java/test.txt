Certainly! Below is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The test cases are converted to use JUnit annotations and assertions, ensuring that the functionality and logic of the tests are preserved.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

/**
 * Test class for the lengthOfLIS method.
 */
public class Tester {

    /**
     * Tests the function with an empty list.
     */
    @Test
    public void testEmptyList() {
        // Test the function with an empty list
        assertEquals(0, lengthOfLIS(new int[]{}));
    }

    /**
     * Tests the function with a list containing only one element.
     */
    @Test
    public void testSingleElement() {
        // Test with a list containing only one element
        assertEquals(1, lengthOfLIS(new int[]{7}));
    }

    /**
     * Tests the function with a list where the elements are strictly increasing.
     */
    @Test
    public void testIncreasingSequence() {
        // Test with a list where the elements are strictly increasing
        assertEquals(5, lengthOfLIS(new int[]{1, 2, 3, 4, 5}));
    }

    /**
     * Tests the function with a list where the elements are strictly decreasing.
     */
    @Test
    public void testDecreasingSequence() {
        // Test with a list where the elements are strictly decreasing
        assertEquals(1, lengthOfLIS(new int[]{5, 4, 3, 2, 1}));
    }

    /**
     * Tests the function with a complex sequence with a mix of increasing and decreasing elements.
     */
    @Test
    public void testComplexSequence() {
        // Test with a complex sequence with a mix of increasing and decreasing elements
        assertEquals(4, lengthOfLIS(new int[]{10, 9, 2, 5, 3, 7, 101, 18}));
    }

    /**
     * Tests the function with all elements in the list being equal.
     */
    @Test
    public void testAllEqualElements() {
        // Test with all elements in the list being equal
        assertEquals(1, lengthOfLIS(new int[]{2, 2, 2, 2}));
    }

    /**
     * Tests the function with a mix of negative and positive numbers.
     */
    @Test
    public void testWithNegativeNumbers() {
        // Test with a mix of negative and positive numbers
        assertEquals(4, lengthOfLIS(new int[]{-1, -2, -3, 0, 1, 2}));
    }

    // Method to be tested
    private int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }

        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);

        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }

        int maxLength = 0;
        for (int length : dp) {
            maxLength = Math.max(maxLength, length);
        }

        return maxLength;
    }
}

// Import statements
import java.util.Arrays;
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Class Definition**: The test class `Tester` is defined within the package.
3. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.
4. **Javadoc Comments**: Each test method has a Javadoc comment explaining the purpose of the test.
5. **Assertions**: The `assertEquals` method from JUnit is used to assert the expected results.
6. **Test Data**: Each test method provides different test data arrays to validate the `lengthOfLIS` method.
7. **Method Implementation**: The `lengthOfLIS` method is implemented within the test class to ensure that the test methods can call it directly.

This Java code preserves the original functionality and logic of the Python test cases while adhering to JUnit's syntax and conventions.