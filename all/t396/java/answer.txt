Certainly! Below is the equivalent Java code for the given Python function, organized within the package `org.real.temp` and the class `Answer`. The code follows Java conventions and best practices, including handling type declarations and method signatures.

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.Arrays;

public class Answer {

    /**
     * Given an array of integers nums, find the length of the longest strictly increasing subsequence.
     *
     * @param nums the array of integers
     * @return the length of the longest strictly increasing subsequence
     */
    public static int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }

        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);

        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }

        return Arrays.stream(dp).max().getAsInt();
    }

    public static void main(String[] args) {
        int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};
        System.out.println(lengthOfLIS(nums)); // Output: 4
    }
}
```

### Explanation:

1. **Package Declaration**: 
   ```java
   package org.real.temp;
   ```
   This line sets the package name as `org.real.temp`.

2. **Class Definition**:
   ```java
   public class Answer {
   ```
   The Java class `Answer` is defined here.

3. **Method Definition**:
   ```java
   public static int lengthOfLIS(int[] nums) {
   ```
   This method takes an array of integers `nums` and returns the length of the longest strictly increasing subsequence.

4. **Null and Empty Check**:
   ```java
   if (nums == null || nums.length == 0) {
       return 0;
   }
   ```
   Checks if the input array is null or empty, returning 0 in such cases.

5. **Dynamic Programming Array Initialization**:
   ```java
   int[] dp = new int[nums.length];
   Arrays.fill(dp, 1);
   ```
   Initializes the dynamic programming array `dp` with all elements set to 1.

6. **Dynamic Programming Calculation**:
   ```java
   for (int i = 1; i < nums.length; i++) {
       for (int j = 0; j < i; j++) {
           if (nums[i] > nums[j]) {
               dp[i] = Math.max(dp[i], dp[j] + 1);
           }
       }
   }
   ```
   Iterates through the array to calculate the length of the longest increasing subsequence using dynamic programming.

7. **Finding the Maximum Value**:
   ```java
   return Arrays.stream(dp).max().getAsInt();
   ```
   Uses Java Streams to find the maximum value in the `dp` array and returns it.

8. **Main Method**:
   ```java
   public static void main(String[] args) {
       int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};
       System.out.println(lengthOfLIS(nums)); // Output: 4
   }
   ```
   Demonstrates the usage of the `lengthOfLIS` method with a sample input array and prints the result.

This Java code maintains the same functionality and logic as the provided Python code but adapts to Java's syntax and features.