Certainly! Below is the Java code equivalent to the provided Python code, organized within the package `org.real.temp` and the class `Answer`. It includes the necessary imports and follows Java's syntax and conventions:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.Arrays;

public class Answer {

    /**
     * Given an array of integers nums, find the length of the longest strictly increasing subsequence.
     *
     * @param nums the array of integers
     * @return the length of the longest strictly increasing subsequence
     */
    public static int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);
        
        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        
        int maxLength = 0;
        for (int length : dp) {
            maxLength = Math.max(maxLength, length);
        }
        
        return maxLength;
    }

    public static void main(String[] args) {
        int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};
        System.out.println("Length of the longest strictly increasing subsequence: " + lengthOfLIS(nums));
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Class Definition**: The class `Answer` is defined within the package.
3. **Method Signature**: The method `lengthOfLIS` takes an array of integers `nums` and returns an integer representing the length of the longest strictly increasing subsequence.
4. **Initialization**: The method initializes the `dp` array with all elements set to 1 using `Arrays.fill(dp, 1);`.
5. **Dynamic Programming Loop**: The nested loops iterate over the array to update the `dp` array based on the strictly increasing condition.
6. **Finding Maximum Length**: After populating the `dp` array, the method finds the maximum value in the `dp` array to determine the length of the longest strictly increasing subsequence.
7. **Main Method**: A `main` method is included to demonstrate how to call the `lengthOfLIS` method with a sample input.

This Java code maintains the same functionality and logic as the original Python code while adhering to Java's syntax and best practices.