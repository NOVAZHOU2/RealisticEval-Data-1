Sure! Below is the equivalent C++ unit test case using Catch2 for the provided Python function `read_txt_add_json_bracket`. This assumes that you have a C++ version of the same function or an appropriate implementation that reads a text file, wraps its content in JSON brackets, and parses it into a C++ data structure.

```cpp
#include <catch2/catch.hpp>
#include <fstream>
#include <sstream>
#include <string>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

// Function to mimic the Python function in C++
std::vector<std::string> read_txt_add_json_bracket(const std::string& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        throw std::runtime_error("File not found");
    }

    std::stringstream buffer;
    buffer << file.rdbuf();
    std::string content = buffer.str();

    // Wrap the content in JSON brackets
    std::string json_content = "[" + content + "]";

    try {
        // Parse the JSON content
        auto parsed_json = json::parse(json_content);
        std::vector<std::string> result;
        for (const auto& item : parsed_json) {
            result.push_back(item.get<std::string>());
        }
        return result;
    } catch (const json::exception& e) {
        throw std::runtime_error("JSON decode error: " + std::string(e.what()));
    }
}

TEST_CASE("Test read_txt_add_json_bracket", "[read_txt_add_json_bracket]") {
    // Create a temporary text file with some content
    const std::string temp_filename = "temp.txt";
    std::ofstream temp_file(temp_filename);
    temp_file << R"({"key": "value"})";
    temp_file.close();

    // Call the function
    std::vector<std::string> result;
    REQUIRE_NOTHROW(result = read_txt_add_json_bracket(temp_filename));

    // Check the result
    REQUIRE(result.size() == 1);
    REQUIRE(result[0] == "{\"key\": \"value\"}");

    // Clean up the temporary file
    std::remove(temp_filename.c_str());
}
```

### Explanation:
1. **Include Necessary Headers**: We include the necessary headers for Catch2, file operations, string streams, and the JSON library (`nlohmann/json`).
2. **Function Implementation**: The `read_txt_add_json_bracket` function mimics the behavior of the Python function. It reads a file, wraps its content in JSON brackets, and parses it into a vector of strings.
3. **Catch2 Test Case**:
   - We create a temporary text file with some content.
   - We call the `read_txt_add_json_bracket` function and check if it throws any exceptions.
   - We verify that the result contains the expected JSON string.
   - Finally, we clean up the temporary file.

Make sure you have the `nlohmann/json` library installed and properly linked in your project to compile this code.