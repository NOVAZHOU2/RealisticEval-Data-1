Certainly! Below is the equivalent C++ code signature for the provided Python function, keeping the same comments:

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <nlohmann/json.hpp>

// Define an alias for nlohmann::json
using json = nlohmann::json;

/**
 * @brief Reads a text file, wraps its content in JSON brackets, and parses it into a C++ object.
 *
 * @param filename The path to the text file to be read.
 * @return std::vector<json> A vector of json objects parsed from the JSON content wrapped in brackets.
 * @throw std::runtime_error If the specified file does not exist or the content cannot be parsed as JSON.
 */
std::vector<json> read_txt_add_json_bracket(const std::string& filename);
```

### Explanation:
1. **Include Headers**: The necessary headers are included for file operations (`<fstream>`), string handling (`<string>`), and JSON parsing using `nlohmann/json` library (`<nlohmann/json.hpp>`).
2. **Alias Definition**: An alias `json` is defined for `nlohmann::json` to simplify the usage.
3. **Function Signature**:
   - The function `read_txt_add_json_bracket` takes a single parameter `filename` of type `const std::string&`.
   - It returns a `std::vector<json>`, which represents a list of JSON objects.
   - The function throws a `std::runtime_error` if the specified file does not exist or the content cannot be parsed as JSON.
4. **Doxygen Comments**: Doxygen-style comments are used to document the function, including its purpose, parameters, return value, and exceptions.

Make sure you have the `nlohmann/json` library installed and properly linked in your C++ project to use this code.