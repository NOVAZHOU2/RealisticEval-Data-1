Sure! Here is the equivalent TypeScript code, including proper type definitions and error handling:

```typescript
import fs from 'fs';
import * as JSON from 'json5'; // Using json5 for convenience with parsing

/**
 * Reads a text file, wraps its content in JSON brackets, and parses it into a JavaScript object.
 *
 * @param filename - The path to the text file to be read.
 * @returns A list parsed from the JSON content wrapped in brackets.
 * @throws {FileNotFoundError} If the specified file does not exist.
 * @throws {JSONDecodeError} If the content cannot be parsed as JSON.
 */
function readTxtAddJsonBracket(filename: string): any[] {
    try {
        const text = fs.readFileSync(filename, { encoding: 'utf-8' });

        // Wrap the text in square brackets to form a valid JSON array
        const wrappedText = `[${text.trim()}]`;

        // Parse the JSON content into a JavaScript object
        const data = JSON.parse(wrappedText);

        return data;

    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error(`Error: ${error.message}`);
            return [];
        } else if (error instanceof SyntaxError) {
            console.error(`Error decoding JSON: ${error.message}`);
            return [];
        } else {
            throw error; // Re-throw other unexpected errors
        }
    }
}

// Example usage
const filename = './example.txt';
console.log(readTxtAddJsonBracket(filename));
```

### Explanation:
1. **Imports**: 
   - `fs` is used for file system operations.
   - `json5` is used for parsing JSON-like strings. If you prefer using standard JSON, you can replace `json5` with `JSON`.

2. **Function Definition**:
   - The function `readTxtAddJsonBracket` reads the content of the specified file, wraps it in square brackets, and parses it into a JavaScript object.

3. **Error Handling**:
   - The function catches `FileNotFoundError` by checking the error code (`ENOENT`) and logs an appropriate message.
   - It also catches `JSONDecodeError` by checking if the error is a `SyntaxError` and logs an appropriate message.
   - Other unexpected errors are re-thrown.

4. **Example Usage**:
   - An example usage is provided at the end to demonstrate how to call the function.

This TypeScript code maintains the same functionality and logic as the original Python code, with necessary adjustments for TypeScript syntax and conventions.