Certainly! Hereâ€™s the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation comments:

```typescript
import fs from 'fs';

/**
 * Reads a text file, wraps its content in JSON brackets, and parses it into a JavaScript object.
 *
 * @param filename - The path to the text file to be read.
 * @returns A list parsed from the JSON content wrapped in brackets.
 * @throws {Error} If the specified file does not exist.
 * @throws {Error} If the content cannot be parsed as JSON.
 */
function readTxtAddJsonBracket(filename: string): any[] {
    try {
        const text = fs.readFileSync(filename, { encoding: 'utf-8' });

        // Wrap the text in square brackets to form a valid JSON array
        const wrappedText = `[${text.trim()}]`;

        // Parse the JSON content into a JavaScript object
        const data = JSON.parse(wrappedText);

        return data;

    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error(`Error: ${error.message}`);
            return [];
        } else if (error instanceof SyntaxError) {
            console.error(`Error decoding JSON: ${error.message}`);
            return [];
        } else {
            throw error; // Re-throw other unexpected errors
        }
    }
}

// Example usage
const filename = './example.txt';
console.log(readTxtAddJsonBracket(filename));
```

### Explanation:
1. **Imports**:
   - `fs` is imported from Node.js for file system operations.

2. **JSDoc Documentation**:
   - The function `readTxtAddJsonBracket` is documented using JSDoc comments, which provide clear descriptions of parameters, return values, and possible exceptions.

3. **Function Definition**:
   - The function reads the content of the specified file, wraps it in square brackets, and parses it into a JavaScript object.

4. **Error Handling**:
   - The function catches `ENOENT` errors (file not found) and logs an appropriate message.
   - It also catches `SyntaxError` (JSON parsing errors) and logs an appropriate message.
   - Other unexpected errors are re-thrown.

5. **Example Usage**:
   - An example usage is provided at the end to demonstrate how to call the function.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate type annotations and JSDoc comments.