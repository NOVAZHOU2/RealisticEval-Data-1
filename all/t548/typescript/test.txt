Sure! Below is the equivalent TypeScript test case using Jest for the provided Python function `read_txt_add_json_bracket`.

```typescript
import fs from 'fs';
import { parse } from 'json5'; // Using json5 to handle JSON-like strings that may not be perfectly valid JSON

describe('read_txt_add_json_bracket', () => {
  const mockFileName = 'mockFile.txt';

  beforeAll(() => {
    // Mocking the file system to return a specific content when read
    jest.spyOn(fs, 'readFileSync').mockImplementation((filePath) => {
      if (filePath === mockFileName) {
        return '[{"key": "value"}]'; // Example JSON string
      }
      throw new Error(`ENOENT: no such file or directory, open '${filePath}'`);
    });
  });

  afterAll(() => {
    jest.clearAllMocks();
  });

  it('reads a text file, wraps its content in JSON brackets, and parses it into a Python object', async () => {
    try {
      const result = await read_txt_add_json_bracket(mockFileName);
      expect(result).toEqual([{ key: 'value' }]);
    } catch (error) {
      fail(error.message);
    }
  });

  it('throws an error if the specified file does not exist', async () => {
    const nonExistentFileName = 'nonExistentFile.txt';
    try {
      await read_txt_add_json_bracket(nonExistentFileName);
      fail('Expected an error to be thrown');
    } catch (error) {
      expect(error.message).toBe(`ENOENT: no such file or directory, open '${nonExistentFileName}'`);
    }
  });

  it('throws an error if the content cannot be parsed as JSON', async () => {
    jest.spyOn(fs, 'readFileSync').mockImplementation(() => {
      return 'This is not valid JSON'; // Invalid JSON string
    });

    const invalidJsonFileName = 'invalidJsonFile.txt';
    try {
      await read_txt_add_json_bracket(invalidJsonFileName);
      fail('Expected an error to be thrown');
    } catch (error) {
      expect(error.message).toContain('Unexpected token T in JSON at position 0');
    }
  });
});

async function read_txt_add_json_bracket(filename: string): Promise<any[]> {
  try {
    const fileContent = fs.readFileSync(filename, 'utf8');
    const jsonContent = `[${fileContent}]`;
    return parse(jsonContent); // Using json5 to parse JSON-like strings
  } catch (error) {
    if (error.code === 'ENOENT') {
      throw new Error('File not found');
    }
    throw new Error('Invalid JSON content');
  }
}
```

### Explanation:
1. **Mocking the File System**: We use Jest's `spyOn` method to mock the `fs.readFileSync` function to return a predefined JSON string when called with the mock file name.
2. **Testing Normal Case**: We test that the function correctly reads the file, wraps its content in JSON brackets, and parses it into a Python object.
3. **Testing File Not Found Error**: We test that the function throws an error if the specified file does not exist.
4. **Testing Invalid JSON Content**: We test that the function throws an error if the content of the file cannot be parsed as JSON.

Note: This TypeScript code assumes you have a function `read_txt_add_json_bracket` defined in your project. If you need to define this function, make sure it matches the provided Python function signature and logic.