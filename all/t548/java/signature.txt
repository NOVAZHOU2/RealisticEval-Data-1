Here is the Java version of your Python function with the same functionality:

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class Main {

    /**
     * Reads a text file, wraps its content in JSON brackets, and parses it into a Java object.
     *
     * @param filename The path to the text file to be read.
     * @return A List parsed from the JSON content wrapped in brackets.
     * @throws IOException if an I/O error occurs.
     * @throws RuntimeException if the content cannot be parsed as JSON.
     */
    public static List<Object> readTxtAddJsonBracket(String filename) throws IOException {
        StringBuilder sb = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }
        }

        ObjectMapper mapper = new ObjectMapper();
        return mapper.readValue("[" + sb.toString() + "]", new TypeReference<List<Object>>() {});
    }

}
```
This Java code uses Jackson library for parsing JSON. It reads the entire file content and then wraps it in JSON brackets before parsing. Note that you need to add `com.fasterxml.jackson.core:jackson-databind` dependency to your project to use `ObjectMapper` and `TypeReference`.