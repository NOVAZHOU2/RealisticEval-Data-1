Certainly! Here is the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Compares two sets of floats for equality within a relative and absolute tolerance.
 *
 * @param set1 - The first set of floats.
 * @param set2 - The second set of floats.
 * @param rtol - The relative tolerance (default: 1e-5).
 * @param atol - The absolute tolerance (default: 1e-6).
 * @returns True if the sets are equal within the specified tolerances, False otherwise.
 */
function areSetsEqual(set1: Set<number>, set2: Set<number>, rtol: number = 1e-5, atol: number = 1e-6): boolean {
    // Convert sets to sorted arrays for comparison
    const list1 = Array.from(set1).sort((a, b) => a - b);
    const list2 = Array.from(set2).sort((a, b) => a - b);

    // Check if the lengths of both sets are the same
    if (list1.length !== list2.length) {
        return false;
    }

    // Compare each element in the two sorted arrays
    for (let i = 0; i < list1.length; i++) {
        if (!isClose(list1[i], list2[i], rtol, atol)) {
            return false;
        }
    }

    return true;
}

/**
 * Checks if two numbers are close within a relative and absolute tolerance.
 *
 * @param a - The first number.
 * @param b - The second number.
 * @param rtol - The relative tolerance.
 * @param atol - The absolute tolerance.
 * @returns True if the numbers are close, False otherwise.
 */
function isClose(a: number, b: number, rtol: number, atol: number): boolean {
    return Math.abs(a - b) <= (atol + rtol * Math.abs(b));
}

// Example usage
const set1 = new Set([1.0, 2.0, 3.0]);
const set2 = new Set([1.0, 2.0, 3.000001]);

console.log(areSetsEqual(set1, set2)); // Output: true
```

### Explanation:
1. **JSDoc Documentation**: The Python docstring has been converted to JSDoc-style comments.
2. **Type Annotations**: The function parameters and return types are properly annotated in TypeScript.
3. **Sorting Arrays**: The sets are converted to arrays and sorted using the `Array.from` method and the `sort` method with a custom comparator.
4. **Custom Comparison Function**: A helper function `isClose` is defined to check if two numbers are close within the specified tolerances.
5. **Main Comparison Logic**: The main logic for comparing the sorted arrays is implemented using the `isClose` function.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices.