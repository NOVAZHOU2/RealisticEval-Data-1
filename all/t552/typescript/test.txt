Sure! Here's how you can convert your Python unittest test class to a TypeScript test case using Jest:

```typescript
import { expect } from '@jest/globals';
import { areSetsEqual } from './yourModule'; // Adjust the import path accordingly

describe('areSetsEqual', () => {
  it('should return true when both sets are empty', () => {
    const set1 = new Set<number>();
    const set2 = new Set<number>();

    expect(areSetsEqual(set1, set2)).toBe(true);
  });

  it('should return false when one set is empty and the other is not', () => {
    const set1 = new Set<number>();
    const set2 = new Set<number>().add(1);

    expect(areSetsEqual(set1, set2)).toBe(false);
  });

  it('should return true when both sets contain the same elements within the default tolerances', () => {
    const set1 = new Set<number>([0.1, 0.2, 0.3]);
    const set2 = new Set<number>([0.1 + Number.EPSILON, 0.2, 0.3]);

    expect(areSetsEqual(set1, set2)).toBe(true);
  });

  it('should return false when sets contain different elements', () => {
    const set1 = new Set<number>([0.1, 0.2, 0.3]);
    const set2 = new Set<number>([0.1, 0.2, 0.4]);

    expect(areSetsEqual(set1, set2)).toBe(false);
  });

  it('should respect custom relative tolerance', () => {
    const set1 = new Set<number>([0.1, 0.2, 0.3]);
    const set2 = new Set<number>([0.1 + 0.00001, 0.2, 0.3]);

    expect(areSetsEqual(set1, set2, 1e-7)).toBe(true);
  });

  it('should respect custom absolute tolerance', () => {
    const set1 = new Set<number>([0.1, 0.2, 0.3]);
    const set2 = new Set<number>([0.1, 0.2, 0.3 + 1e-7]);

    expect(areSetsEqual(set1, set2, undefined, 1e-7)).toBe(true);
  });
});
```

Make sure to adjust the import path to where `areSetsEqual` is defined in your project. This TypeScript test case uses Jest's `expect` function to assert the expected outcomes of the `areSetsEqual` function.