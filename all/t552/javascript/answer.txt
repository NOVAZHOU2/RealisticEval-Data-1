To convert the given Python code into JavaScript, we need to ensure that the functionality, logic, and structure remain consistent. We will use the `mathjs` library in JavaScript to handle the floating-point comparisons similar to `numpy.isclose`.

First, you'll need to install the `mathjs` library if you haven't already:

```bash
npm install mathjs
```

Here is the equivalent JavaScript code:

```javascript
const math = require('mathjs');

/**
 * Compares two sets of floats for equality within a relative and absolute tolerance.
 *
 * @param {Set<number>} set1 - The first set of floats.
 * @param {Set<number>} set2 - The second set of floats.
 * @param {number} [rtol=1e-5] - The relative tolerance (default: 1e-5).
 * @param {number} [atol=1e-6] - The absolute tolerance (default: 1e-6).
 * @returns {boolean} True if the sets are equal within the specified tolerances, False otherwise.
 */
function areSetsEqual(set1, set2, rtol = 1e-5, atol = 1e-6) {
    // Convert sets to sorted arrays for comparison
    const list1 = Array.from(set1).sort((a, b) => a - b);
    const list2 = Array.from(set2).sort((a, b) => a - b);

    // Check if the lengths of both sets are the same
    if (list1.length !== list2.length) {
        return false;
    }

    // Compare each element in the two sorted arrays
    for (let i = 0; i < list1.length; i++) {
        if (!math.isEqual(math.bignumber(list1[i]), math.bignumber(list2[i]), { rtol, atol })) {
            return false;
        }
    }

    return true;
}

// Example usage
console.log(areSetsEqual(new Set([1.0, 2.0, 3.0]), new Set([3.0, 2.0, 1.0])));
```

### Explanation:
1. **Importing `mathjs`**: The `mathjs` library provides a function `isEqual` which can be used to compare floating-point numbers with relative and absolute tolerances.
2. **Converting Sets to Sorted Arrays**: In JavaScript, we use `Array.from()` to convert sets to arrays and then sort them using `.sort()`.
3. **Length Comparison**: We check if the lengths of the two arrays are the same.
4. **Element-wise Comparison**: We iterate over the elements and use `math.isEqual` to compare them with the specified tolerances.

This ensures that the functionality and logic of the original Python code are preserved in JavaScript.