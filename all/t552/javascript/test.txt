Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Unittest Code

```python
import unittest

class TestAreSetsEqual(unittest.TestCase):

    def test_identical_sets(self):
        """Test with two identical sets of floats."""
        set1 = {1.0, 2.0, 3.0}
        set2 = {1.0, 2.0, 3.0}
        self.assertTrue(are_sets_equal(set1, set2))

    def test_sets_with_close_values(self):
        """Test with two sets that are close within the tolerance."""
        set1 = {1.0, 2.00001, 3.0}
        set2 = {1.0, 2.00002, 3.0}
        self.assertTrue(are_sets_equal(set1, set2, rtol=1e-5, atol=1e-6))

    def test_sets_with_large_difference(self):
        """Test with two sets that have large differences beyond tolerance."""
        set1 = {1.0, 2.0, 3.0}
        set2 = {1.0, 2.5, 3.0}
        self.assertFalse(are_sets_equal(set1, set2))

    def test_sets_with_one_different_values(self):
        """Test with two sets containing one different floats."""
        set1 = {1.0, 2.0, 3.0}
        set2 = {1.0, 2.000001, 3.0}
        self.assertTrue(are_sets_equal(set1, set2, rtol=1e-5, atol=1e-6))

    def test_empty_sets(self):
        """Test with two empty sets."""
        set1 = set()
        set2 = set()
        self.assertTrue(are_sets_equal(set1, set2))
```

### Equivalent Jest Test Suite

```javascript
const areSetsEqual = require('./areSetsEqual'); // Import the function from the file where it is defined
const math = require('mathjs');

describe('TestAreSetsEqual', () => {

    describe('test_identical_sets', () => {
        it('should return true for two identical sets of floats', () => {
            const set1 = new Set([1.0, 2.0, 3.0]);
            const set2 = new Set([1.0, 2.0, 3.0]);
            expect(areSetsEqual(set1, set2)).toBe(true);
        });
    });

    describe('test_sets_with_close_values', () => {
        it('should return true for two sets that are close within the tolerance', () => {
            const set1 = new Set([1.0, 2.00001, 3.0]);
            const set2 = new Set([1.0, 2.00002, 3.0]);
            expect(areSetsEqual(set1, set2, 1e-5, 1e-6)).toBe(true);
        });
    });

    describe('test_sets_with_large_difference', () => {
        it('should return false for two sets that have large differences beyond tolerance', () => {
            const set1 = new Set([1.0, 2.0, 3.0]);
            const set2 = new Set([1.0, 2.5, 3.0]);
            expect(areSetsEqual(set1, set2)).toBe(false);
        });
    });

    describe('test_sets_with_one_different_values', () => {
        it('should return true for two sets containing one different float', () => {
            const set1 = new Set([1.0, 2.0, 3.0]);
            const set2 = new Set([1.0, 2.000001, 3.0]);
            expect(areSetsEqual(set1, set2, 1e-5, 1e-6)).toBe(true);
        });
    });

    describe('test_empty_sets', () => {
        it('should return true for two empty sets', () => {
            const set1 = new Set();
            const set2 = new Set();
            expect(areSetsEqual(set1, set2)).toBe(true);
        });
    });

});

// Example implementation of areSetsEqual function
function areSetsEqual(set1, set2, rtol = 1e-5, atol = 1e-6) {
    // Convert sets to sorted arrays for comparison
    const list1 = Array.from(set1).sort((a, b) => a - b);
    const list2 = Array.from(set2).sort((a, b) => a - b);

    // Check if the lengths of both sets are the same
    if (list1.length !== list2.length) {
        return false;
    }

    // Compare each element in the two sorted arrays
    for (let i = 0; i < list1.length; i++) {
        if (!math.isEqual(math.bignumber(list1[i]), math.bignumber(list2[i]), { rtol, atol })) {
            return false;
        }
    }

    return true;
}

module.exports = areSetsEqual;
```

### Explanation:
1. **Import Statements**: 
   - `require('mathjs')` is used to import the `mathjs` library for floating-point comparisons.
   - `require('./areSetsEqual')` imports the `areSetsEqual` function from the file where it is defined.

2. **Describe Blocks**: 
   - Each test case is wrapped in a `describe` block to group related tests.
   - Each test case is defined using `it` blocks with descriptive messages.

3. **Assertions**:
   - `expect(areSetsEqual(...)).toBe(true)` and `expect(areSetsEqual(...)).toBe(false)` are used to assert the expected outcomes of the tests.

4. **Set Conversion**:
   - In JavaScript, sets are created using `new Set([...])` and converted to sorted arrays using `Array.from()` and `.sort()`.

5. **Function Implementation**:
   - The `areSetsEqual` function is implemented to match the Python logic, using `math.isEqual` for floating-point comparisons.

This ensures that the functionality and logic of the original Python unittest class are preserved in the Jest test suite.