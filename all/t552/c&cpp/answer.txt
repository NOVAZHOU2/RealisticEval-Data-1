Sure! Below is the equivalent C++ code for the provided Python function. This code includes the necessary type declarations, memory management, and loop adaptations to ensure it works correctly in C++.

```cpp
#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
#include <cmath>

// Function to compare two floating-point numbers within a relative and absolute tolerance
bool isclose(double a, double b, double rtol, double atol) {
    return std::abs(a - b) <= std::max(rtol * std::max(std::abs(a), std::abs(b)), atol);
}

// Function to compare two sets of floats for equality within a relative and absolute tolerance
bool areSetsEqual(const std::set<double>& set1, const std::set<double>& set2, double rtol = 1e-5, double atol = 1e-6) {
    // Convert sets to sorted vectors for comparison
    std::vector<double> list1(set1.begin(), set1.end());
    std::vector<double> list2(set2.begin(), set2.end());

    // Check if the lengths of both sets are the same
    if (list1.size() != list2.size()) {
        return false;
    }

    // Compare each element in the two sorted vectors
    for (size_t i = 0; i < list1.size(); ++i) {
        if (!isclose(list1[i], list2[i], rtol, atol)) {
            return false;
        }
    }

    return true;
}

int main() {
    // Example usage
    std::set<double> set1 = {1.0, 2.0, 3.0};
    std::set<double> set2 = {1.0, 2.0, 3.0};

    bool result = areSetsEqual(set1, set2);
    std::cout << "Are the sets equal? " << (result ? "Yes" : "No") << std::endl;

    return 0;
}
```

### Explanation:
1. **isclose Function**: 
   - This function checks if two floating-point numbers are close within a given relative (`rtol`) and absolute (`atol`) tolerance.
   
2. **areSetsEqual Function**:
   - Converts the input sets to sorted vectors using `std::set` iterators.
   - Checks if the sizes of the two vectors are the same.
   - Iterates through the elements of the vectors and uses the `isclose` function to compare each pair of elements.
   
3. **Main Function**:
   - Demonstrates how to use the `areSetsEqual` function with example sets.

This C++ code maintains the functionality and logic of the original Python code while adapting to C++ syntax and features.