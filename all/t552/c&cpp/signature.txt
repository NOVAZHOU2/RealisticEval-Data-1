Sure! Below is the C++ version of your Python function `are_sets_equal`, with comments kept similar to the original:

```cpp
#include <vector>
#include <algorithm> // For std::sort

// Function to compare two vectors of doubles for equality within a relative and absolute tolerance
bool areSetsEqual(const std::vector<double>& set1, const std::vector<double>& set2, double rtol = 1e-5, double atol = 1e-6) {
    /**
     * Compares two sets of floats for equality within a relative and absolute tolerance.
     *
     * Args:
     *      set1: The first set of floats.
     *      set2: The second set of floats.
     *      rtol: The relative tolerance (default: 1e-5).
     *      atol: The absolute tolerance (default: 1e-6).
     *
     * Returns:
     *      True if the sets are equal within the specified tolerances, False otherwise.
     */

    // Check if both sets have the same size
    if (set1.size() != set2.size()) {
        return false;
    }

    // Sort both sets to ensure comparison is correct regardless of order
    std::vector<double> sortedSet1 = set1;
    std::vector<double> sortedSet2 = set2;
    std::sort(sortedSet1.begin(), sortedSet1.end());
    std::sort(sortedSet2.begin(), sortedSet2.end());

    // Compare each element in the sorted sets
    for (size_t i = 0; i < sortedSet1.size(); ++i) {
        double diff = std::abs(sortedSet1[i] - sortedSet2[i]);
        if (diff > atol && diff > rtol * std::max(std::abs(sortedSet1[i]), std::abs(sortedSet2[i]))) {
            return false;
        }
    }

    return true;
}
```

### Explanation:
1. **Sorting**: Both input vectors (`set1` and `set2`) are sorted before comparison to handle cases where the elements might be in different orders but still represent the same set.
2. **Tolerance Check**: For each pair of corresponding elements from the sorted vectors, the difference is calculated. If the difference exceeds either the absolute tolerance (`atol`) or the relative tolerance (`rtol`), the function returns `false`.
3. **Size Check**: Before performing any comparisons, the sizes of the two vectors are checked to ensure they are equal. If not, the function immediately returns `false`.

This C++ implementation should provide similar functionality to your original Python function.