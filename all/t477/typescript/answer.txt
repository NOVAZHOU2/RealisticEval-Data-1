Certainly! Below is the equivalent TypeScript code for the provided Python function. Since TypeScript does not have direct equivalents for Python's `dataclasses` or the exact same behavior for `isinstance` and `hasattr`, we'll need to adapt these concepts using TypeScript's type system and reflection capabilities.

```typescript
function canClassToDict(obj: any): boolean {
    /**
     * Check if the given object can be treated as a dictionary.
     *
     * @param {any} obj - any type
     * @returns {boolean} - can obj be converted to a dictionary-like object
     */
    return isDataClass(obj) || isObjectOfType(obj) || hasDictProperty(obj);
}

function isDataClass(obj: any): boolean {
    // Since TypeScript doesn't have dataclasses, we'll check if it's an object with properties
    return typeof obj === 'object' && obj !== null && !Array.isArray(obj);
}

function isObjectOfType(obj: any): boolean {
    // Check if it's a constructor function
    return typeof obj === 'function';
}

function hasDictProperty(obj: any): boolean {
    // Check if the object has a __dict__ property
    return '__dict__' in obj;
}

// Example usage
const exampleObj = { name: "John", age: 30 };
console.log(canClassToDict(exampleObj)); // true
```

### Explanation:
1. **`canClassToDict` Function**: This function checks if the given object can be treated as a dictionary-like object by calling three helper functions: `isDataClass`, `isObjectOfType`, and `hasDictProperty`.

2. **`isDataClass` Function**: This function checks if the object is a plain JavaScript object (i.e., not an array and not `null`).

3. **`isObjectOfType` Function**: This function checks if the object is a constructor function, which is similar to checking if it's a class in TypeScript.

4. **`hasDictProperty` Function**: This function checks if the object has a `__dict__` property. While TypeScript does not have this specific property, you can use it to simulate a similar check if your object has some specific property that acts like a dictionary.

This TypeScript code follows the same logic and structure as the Python code, adapting to TypeScript's static type system and available features.