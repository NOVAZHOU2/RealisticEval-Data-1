Certainly! Below is the equivalent TypeScript code that maintains the same functionality, structure, and logic as the provided Python code:

```typescript
import { isDataClass } from 'some-dataclass-library'; // Assuming a library that provides isDataClass functionality

function canClassToDict(obj: any): boolean {
    /**
     * Check if the given object can be treated as a dictionary.
     *
     * @param obj - any type
     * @returns boolean indicating if obj can be converted to a dictionary
     */
    return isDataClass(obj) || typeof obj === 'object' && obj !== null && '__dict__' in obj;
}

// Example usage
console.log(canClassToDict({})); // true
console.log(canClassToDict(123)); // false
```

### Explanation:
1. **Function Definition**: The function `canClassToDict` is defined with a single parameter `obj` of type `any`.
2. **Type Checking**:
   - `isDataClass`: This assumes there is a library that provides similar functionality to Python's `is_dataclass`. If such a library does not exist, you would need to implement this functionality manually.
   - `typeof obj === 'object' && obj !== null && '__dict__' in obj`: This checks if `obj` is an object and has a `__dict__` property, which is a common pattern in Python but not directly available in TypeScript. For simplicity, we assume that if an object has a `__dict__` property, it can be treated similarly to a dictionary.

### Note:
- In TypeScript, there is no direct equivalent to Python's `dataclasses`, so we assume a library that provides similar functionality.
- The `__dict__` attribute is a Python-specific feature used to store instance variables. In TypeScript, objects typically use properties instead, so we check for the presence of a `__dict__` property to mimic the behavior.

This TypeScript code should provide the same functionality as the original Python code.