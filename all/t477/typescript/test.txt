Sure, here's how you can convert your Python `unittest` test class into a TypeScript test case using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

function canClassToDict(obj: any): boolean {
    /**
     * Check if the given object can be treated as a dictionary.
     *
     * @param {any} obj - any type
     * @returns {boolean} - can obj to dict
     */
    return typeof obj === 'object' && obj !== null;
}

describe('canClassToDict', () => {
    it('should return true for an empty object', () => {
        expect(canClassToDict({})).toBe(true);
    });

    it('should return true for a non-empty object', () => {
        expect(canClassToDict({ key: 'value' })).toBe(true);
    });

    it('should return false for null', () => {
        expect(canClassToDict(null)).toBe(false);
    });

    it('should return false for a string', () => {
        expect(canClassToDict('string')).toBe(false);
    });

    it('should return false for a number', () => {
        expect(canClassToDict(123)).toBe(false);
    });

    it('should return false for a boolean', () => {
        expect(canClassToDict(true)).toBe(false);
    });

    it('should return false for an array', () => {
        expect(canClassToDict([1, 2, 3])).toBe(false);
    });
});
```

In this TypeScript code, we use Jest's `describe`, `it`, and `expect` functions to create test cases. The `canClassToDict` function is implemented similarly to your original Python function, checking if the object is of type `object` and not `null`. Each test case checks different scenarios to ensure the function behaves correctly.