Certainly! Below is the equivalent Jest test suite for the given Python unittest class. We will use Jest's testing capabilities to ensure that the functionality and logic of the tests are maintained.

### Python Code:
```python
import unittest
import pandas as pd

class TestFillMissingWithFirstValid(unittest.TestCase):

    def test_basic_filling(self):
        df = pd.DataFrame({'A': [1, None, 3, None], 'B': ['foo', 'bar', None, 'baz']})
        result = fill_missing_with_first_valid(df, 'B')
        expected = pd.DataFrame({'A': [1, None, 3, None], 'B': ['foo', 'bar', 'foo', 'baz']})
        pd.testing.assert_frame_equal(result, expected)

    def test_no_missing_values(self):
        df = pd.DataFrame({'A': [1, 2, 3], 'B': ['foo', 'bar', 'baz']})
        result = fill_missing_with_first_valid(df, 'B')
        expected = pd.DataFrame({'A': [1, 2, 3], 'B': ['foo', 'bar', 'baz']})
        pd.testing.assert_frame_equal(result, expected)

    def test_single_valid_value(self):
        df = pd.DataFrame({'A': [1, None, None, 4], 'B': [None, 'bar', None, None]})
        result = fill_missing_with_first_valid(df, 'B')
        expected = pd.DataFrame({'A': [1, None, None, 4], 'B': ['bar', 'bar', 'bar', 'bar']})
        pd.testing.assert_frame_equal(result, expected)

    def test_multiple_valid_values(self):
        df = pd.DataFrame({'A': [1, None, 3, 4], 'B': [None, 'bar', 'foo', None]})
        result = fill_missing_with_first_valid(df, 'B')
        expected = pd.DataFrame({'A': [1, None, 3, 4], 'B': ['bar', 'bar', 'foo', 'bar']})
        pd.testing.assert_frame_equal(result, expected)
```

### Equivalent Jest Test Suite:

```javascript
const { DataFrame } = require('dataframe-js'); // Assuming dataframe-js library is used
const fillMissingWithFirstValid = require('./fillMissingWithFirstValid');

describe('TestFillMissingWithFirstValid', () => {
    describe('test_basic_filling', () => {
        it('fills missing values correctly', () => {
            const df = new DataFrame({
                A: [1, null, 3, null],
                B: ['foo', 'bar', null, 'baz']
            });
            const result = fillMissingWithFirstValid(df, 'B');
            const expected = new DataFrame({
                A: [1, null, 3, null],
                B: ['foo', 'bar', 'foo', 'baz']
            });

            expect(result.equals(expected)).toBe(true);
        });
    });

    describe('test_no_missing_values', () => {
        it('does not change the DataFrame when no missing values', () => {
            const df = new DataFrame({
                A: [1, 2, 3],
                B: ['foo', 'bar', 'baz']
            });
            const result = fillMissingWithFirstValid(df, 'B');
            const expected = new DataFrame({
                A: [1, 2, 3],
                B: ['foo', 'bar', 'baz']
            });

            expect(result.equals(expected)).toBe(true);
        });
    });

    describe('test_single_valid_value', () => {
        it('fills all missing values with the single valid value', () => {
            const df = new DataFrame({
                A: [1, null, null, 4],
                B: [null, 'bar', null, null]
            });
            const result = fillMissingWithFirstValid(df, 'B');
            const expected = new DataFrame({
                A: [1, null, null, 4],
                B: ['bar', 'bar', 'bar', 'bar']
            });

            expect(result.equals(expected)).toBe(true);
        });
    });

    describe('test_multiple_valid_values', () => {
        it('fills missing values with the first valid value', () => {
            const df = new DataFrame({
                A: [1, null, 3, 4],
                B: [null, 'bar', 'foo', null]
            });
            const result = fillMissingWithFirstValid(df, 'B');
            const expected = new DataFrame({
                A: [1, null, 3, 4],
                B: ['bar', 'bar', 'foo', 'bar']
            });

            expect(result.equals(expected)).toBe(true);
        });
    });
});
```

### Explanation:
1. **Imports**:
   - Import the `DataFrame` class from the `dataframe-js` library.
   - Import the `fillMissingWithFirstValid` function from the relevant file.

2. **Test Structure**:
   - Use `describe` blocks to group related tests.
   - Use `it` blocks to define individual test cases.

3. **DataFrames**:
   - Create `DataFrame` objects using the `DataFrame` constructor from `dataframe-js`.
   - Ensure that the data frames are created with the correct initial values.

4. **Assertions**:
   - Use the `equals` method provided by `dataframe-js` to compare the resulting data frames with the expected data frames.
   - Use Jest's `expect` function to assert the equality of the data frames.

This Jest test suite ensures that the functionality and logic of the tests are preserved, and all assertions are appropriately mapped to Jest equivalents.