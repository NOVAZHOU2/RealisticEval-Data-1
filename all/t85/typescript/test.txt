Here is how you can convert your Python unittest test class to TypeScript using Jest:

```typescript
// Importing required packages
const { DataFrame } = require('dataframe-js');
import { fillMissingWithFirstValid } from './yourPythonFile';

describe('fillMissingWithFirstValid', () => {
  it('should fill missing values with the first valid value in the column', () => {
    const df = new DataFrame({
      'column1': [1, null, 3],
      'column2': ['a', null, 'c'],
    });
    
    const result = fillMissingWithFirstValid(df, 'column1');

    expect(result.get('column1')).toEqual([1, 1, 3]);
  });

  it('should not alter the dataframe if no missing values', () => {
    const df = new DataFrame({
      'column1': [1, 2, 3],
      'column2': ['a', 'b', 'c'],
    });

    const result = fillMissingWithFirstValid(df, 'column1');

    expect(result.get('column1')).toEqual([1, 2, 3]);
  });

  it('should throw an error if the column does not exist', () => {
    const df = new DataFrame({
      'column1': [1, 2, 3],
      'column2': ['a', 'b', 'c'],
    });

    expect(() => fillMissingWithFirstValid(df, 'nonExistentColumn'))
      .toThrowError("Column 'nonExistentColumn' does not exist");
  });
});
```

Please replace `'./yourPythonFile'` with the actual path to your Python file containing `fillMissingWithFirstValid` function.

This TypeScript test case uses Jest's `describe`, `it`, and `expect` functions to write tests for your Python function. It checks whether the function correctly fills missing values in the specified column, leaves the dataframe unchanged when there are no missing values, and throws an error when the specified column does not exist.