Certainly! Below is the equivalent TypeScript test class using Jest, which preserves the functionality and logic of the provided Python unittest class. The code includes proper type annotations and uses Jest assertions to match the behavior of `pd.testing.assert_frame_equal`.

### TypeScript Code with Jest Testing

```typescript
import { DataFrame } from 'pandas-ts'; // Assuming a hypothetical pandas-like library
import { fillMissingWithFirstValid } from './path-to-your-function'; // Import your function

/**
 * Fills missing values in the specified column of the DataFrame with the first valid value in that column.
 * 
 * @param df - The pandas DataFrame.
 * @param columnName - The name of the column to fill missing values.
 * @returns The DataFrame with missing values filled.
 */
function fillMissingWithFirstValid(df: DataFrame, columnName: string): DataFrame {
  if (!df.columns.includes(columnName)) {
    throw new Error(`Column '${columnName}' does not exist in the DataFrame.`);
  }

  // Get the first valid (non-null) value in the specified column
  const firstValidValue = df.get(columnName).dropna().iloc(0) || null;

  // Fill missing values in the specified column with the first valid value
  df.set(columnName, df.get(columnName).fillna(firstValidValue));

  return df;
}

describe('TestFillMissingWithFirstValid', () => {
  it('test_basic_filling', () => {
    const df = DataFrame.fromRecords([
      { A: 1, B: 'foo' },
      { A: null, B: 'bar' },
      { A: 3, B: null },
      { A: null, B: 'baz' }
    ]);
    const result = fillMissingWithFirstValid(df, 'B');
    const expected = DataFrame.fromRecords([
      { A: 1, B: 'foo' },
      { A: null, B: 'bar' },
      { A: 3, B: 'foo' },
      { A: null, B: 'baz' }
    ]);

    expect(result.toRecords()).toEqual(expected.toRecords());
  });

  it('test_no_missing_values', () => {
    const df = DataFrame.fromRecords([
      { A: 1, B: 'foo' },
      { A: 2, B: 'bar' },
      { A: 3, B: 'baz' }
    ]);
    const result = fillMissingWithFirstValid(df, 'B');
    const expected = DataFrame.fromRecords([
      { A: 1, B: 'foo' },
      { A: 2, B: 'bar' },
      { A: 3, B: 'baz' }
    ]);

    expect(result.toRecords()).toEqual(expected.toRecords());
  });

  it('test_single_valid_value', () => {
    const df = DataFrame.fromRecords([
      { A: 1, B: null },
      { A: null, B: 'bar' },
      { A: null, B: null },
      { A: 4, B: null }
    ]);
    const result = fillMissingWithFirstValid(df, 'B');
    const expected = DataFrame.fromRecords([
      { A: 1, B: 'bar' },
      { A: null, B: 'bar' },
      { A: null, B: 'bar' },
      { A: 4, B: 'bar' }
    ]);

    expect(result.toRecords()).toEqual(expected.toRecords());
  });

  it('test_multiple_valid_values', () => {
    const df = DataFrame.fromRecords([
      { A: 1, B: null },
      { A: null, B: 'bar' },
      { A: 3, B: 'foo' },
      { A: 4, B: null }
    ]);
    const result = fillMissingWithFirstValid(df, 'B');
    const expected = DataFrame.fromRecords([
      { A: 1, B: 'bar' },
      { A: null, B: 'bar' },
      { A: 3, B: 'foo' },
      { A: 4, B: 'bar' }
    ]);

    expect(result.toRecords()).toEqual(expected.toRecords());
  });
});

// Example usage
const data = [
  { id: 1, value: 10 },
  { id: 2, value: null },
  { id: 3, value: 20 },
  { id: 4, value: null }
];

const df = DataFrame.fromRecords(data);
console.log('Before filling:', df);

const filledDf = fillMissingWithFirstValid(df, 'value');
console.log('After filling:', filledDf);
```

### Explanation:
1. **Imports**: We assume a hypothetical `DataFrame` class from a `pandas-ts` library and import the `fillMissingWithFirstValid` function.
2. **Function Definition**: The `fillMissingWithFirstValid` function is defined with proper type annotations.
3. **Jest Testing**: The `describe` block contains individual `it` blocks for each test case.
4. **DataFrames**: DataFrames are created using `DataFrame.fromRecords` to simulate the initial DataFrame state.
5. **Assertions**: Jest's `expect` and `toEqual` are used to compare the resulting DataFrame records with the expected DataFrame records.

This TypeScript code preserves the original functionality and logic of the Python unittest class, adapting it to Jest's syntax and conventions.