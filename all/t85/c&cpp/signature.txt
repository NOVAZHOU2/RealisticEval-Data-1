Sure! Below is the equivalent C++ code signature for the provided Python function. Note that C++ does not have built-in support for DataFrames like Python's pandas, so you would typically need to use a library such as `Eigen` or write your own data structure and functions to handle this task.

```cpp
#include <iostream>
#include <vector>
#include <string>

// Define a simple DataFrame-like structure using vectors
class DataFrame {
public:
    std::vector<std::vector<double>> data;
    std::vector<std::string> columns;

    DataFrame(const std::vector<std::vector<double>>& data, const std::vector<std::string>& columns)
        : data(data), columns(columns) {}

    // Function to fill missing values with the first valid value in a specified column
    void fillMissingWithFirstValid(const std::string& columnName);
};

void DataFrame::fillMissingWithFirstValid(const std::string& columnName) {
    // Find the index of the specified column
    int columnIndex = -1;
    for (size_t i = 0; i < columns.size(); ++i) {
        if (columns[i] == columnName) {
            columnIndex = static_cast<int>(i);
            break;
        }
    }

    if (columnIndex == -1) {
        throw std::runtime_error("Column not found");
    }

    // Get the first valid value in the specified column
    double firstValidValue = NAN;
    bool foundFirstValid = false;
    for (const auto& row : data) {
        if (!std::isnan(row[columnIndex])) {
            firstValidValue = row[columnIndex];
            foundFirstValid = true;
            break;
        }
    }

    if (!foundFirstValid) {
        throw std::runtime_error("No valid value found in the column");
    }

    // Fill missing values with the first valid value
    for (auto& row : data) {
        if (std::isnan(row[columnIndex])) {
            row[columnIndex] = firstValidValue;
        }
    }
}

int main() {
    // Example usage
    std::vector<std::vector<double>> data = {
        {1.0, std::nan(""), 3.0},
        {4.0, 5.0, std::nan("")},
        {6.0, std::nan(""), std::nan("")}
    };

    std::vector<std::string> columns = {"A", "B", "C"};

    DataFrame df(data, columns);

    df.fillMissingWithFirstValid("B");

    // Print the modified DataFrame
    for (const auto& row : df.data) {
        for (double val : row) {
            if (std::isnan(val)) {
                std::cout << "NaN\t";
            } else {
                std::cout << val << "\t";
            }
        }
        std::cout << std::endl;
    }

    return 0;
}
```

This C++ code defines a `DataFrame` class with a method `fillMissingWithFirstValid` to fill missing values in a specified column with the first valid value. The example usage demonstrates how to create a `DataFrame`, call the method, and print the modified DataFrame. Note that error handling is included to check if the column exists and if there is at least one valid value in the column.