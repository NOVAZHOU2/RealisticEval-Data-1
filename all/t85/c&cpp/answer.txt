Hereâ€™s the equivalent C++ code that performs the same functionality as the provided Python code. This code uses the `arrow::Table` from Apache Arrow for handling tabular data since C++ doesn't have a direct equivalent to Pandas:

```cpp
#include <arrow/api.h>
#include <arrow/csv/api.h>
#include <arrow/table.h>
#include <iostream>
#include <memory>
#include <string>
#include <vector>

using namespace arrow;

Status fill_missing_with_first_valid(const std::shared_ptr<Table>& table, const std::string& column_name,
                                     std::shared_ptr<Table>* result) {
    // Check if the column exists in the table
    if (!table->HasColumnByName(column_name)) {
        return Status::Invalid("Column '", column_name, "' does not exist in the table.");
    }

    // Get the column index
    int column_index = table->GetColumnIndexByName(column_name);

    // Extract the column
    auto column = table->column(column_index);

    // Create a new column with missing values filled
    std::shared_ptr<Array> filled_column;
    if (column->null_count() > 0) {
        // Find the first non-null value
        int first_non_null_index = -1;
        for (int i = 0; i < column->length(); ++i) {
            if (!column->IsNull(i)) {
                first_non_null_index = i;
                break;
            }
        }

        // If no non-null value is found, use a default value (e.g., 0 for integers)
        if (first_non_null_index == -1) {
            if (column->type()->id() == Type::INT64) {
                filled_column = std::make_shared<Int64Array>(column->length(), 0);
            } else if (column->type()->id() == Type::FLOAT64) {
                filled_column = std::make_shared<DoubleArray>(column->length(), 0.0);
            } else {
                return Status::NotImplemented("Unsupported type");
            }
        } else {
            // Fill missing values with the first non-null value
            auto first_non_null_value = column->GetView(first_non_null_index);
            if (column->type()->id() == Type::INT64) {
                auto int64_values = std::static_pointer_cast<Int64Array>(column)->data();
                std::vector<int64_t> filled_data(column->length());
                for (int i = 0; i < column->length(); ++i) {
                    filled_data[i] = column->IsNull(i) ? int64_values[first_non_null_index] : int64_values[i];
                }
                filled_column = std::make_shared<Int64Array>(column->length(), filled_data.data());
            } else if (column->type()->id() == Type::FLOAT64) {
                auto double_values = std::static_pointer_cast<DoubleArray>(column)->data();
                std::vector<double> filled_data(column->length());
                for (int i = 0; i < column->length(); ++i) {
                    filled_data[i] = column->IsNull(i) ? double_values[first_non_null_index] : double_values[i];
                }
                filled_column = std::make_shared<DoubleArray>(column->length(), filled_data.data());
            } else {
                return Status::NotImplemented("Unsupported type");
            }
        }
    } else {
        // No null values, just use the original column
        filled_column = column;
    }

    // Replace the column in the table
    std::vector<std::shared_ptr<Field>> fields = table->schema()->fields();
    std::vector<std::shared_ptr<Array>> columns(table->num_columns());
    for (int i = 0; i < table->num_columns(); ++i) {
        columns[i] = (i == column_index) ? filled_column : table->column(i);
    }

    *result = Table::Make(table->schema(), columns);

    return Status::OK();
}

int main() {
    // Example usage
    std::string csv_data = R"(a,b,c
1,,3
2,,4)";

    std::shared_ptr<Table> table;
    ARROW_CHECK_OK(ReadCSV(csv_data, DefaultReadOptions(), &table));

    std::shared_ptr<Table> result_table;
    ARROW_CHECK_OK(fill_missing_with_first_valid(table, "b", &result_table));

    // Print the resulting table
    std::cout << "Resulting Table:\n";
    ARROW_CHECK_OK(PrintTable(*result_table, 0, nullptr, &std::cout));

    return 0;
}
```

### Explanation:
1. **Importing Libraries**: The necessary libraries are included at the beginning.
2. **Function Definition**: The function `fill_missing_with_first_valid` takes a `std::shared_ptr<Table>` and a column name, and returns a `std::shared_ptr<Table>` with the missing values filled.
3. **Error Handling**: Checks if the column exists in the table and throws an error if it does not.
4. **Finding First Non-Null Value**: Iterates through the column to find the first non-null value.
5. **Filling Missing Values**: Replaces missing values with the first non-null value or a default value if no non-null value is found.
6. **Replacing Column**: Creates a new table with the updated column.
7. **Example Usage**: Demonstrates how to read a CSV string, call the function, and print the resulting table.

This code should provide the same functionality as the Python code but adapted to C++ using Apache Arrow for handling tabular data.