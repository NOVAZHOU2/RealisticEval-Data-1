Certainly! Below is the equivalent C++ code using the Catch2 testing framework to replicate the provided Python unittest class. The code preserves the functionality and logic of the tests and uses appropriate assertions in Catch2.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>

// Function to perform polynomial decryption
std::vector<int> perform_polynomial_decryption(int degree, int modulus, const std::vector<int>& key, const std::vector<int>& encrypted_data) {
    // Decrypts the polynomial based encryption by reversing the encryption steps
    std::vector<int> decrypted_data(degree, 0);

    for (int index = 0; index < degree; ++index) {
        // Reversing encryption: subtract key and take modulo
        int decrypted_value = (encrypted_data[index] - key[index]) % modulus;

        // Adjust for C++'s behavior with negative numbers
        if (decrypted_value < 0) {
            decrypted_value += modulus;
        }

        decrypted_data[index] = decrypted_value;
    }

    return decrypted_data;
}

TEST_CASE("Test Decrypt Function", "[decrypt]") {
    SECTION("Basic functionality") {
        REQUIRE(perform_polynomial_decryption(4, 5, {1, 2, 3, 4}, {5, 6, 7, 8}) == std::vector<int>({4, 4, 4, 4}));
    }

    SECTION("Zero secret key") {
        REQUIRE(perform_polynomial_decryption(3, 7, {0, 0, 0}, {6, 13, 20}) == std::vector<int>({6, 6, 6}));
    }

    SECTION("Zero ciphertext") {
        REQUIRE(perform_polynomial_decryption(3, 9, {1, 2, 3}, {0, 0, 0}) == std::vector<int>({8, 7, 6}));
    }

    SECTION("Large values") {
        REQUIRE(perform_polynomial_decryption(2, 1000, {500, 500}, {1000, 1000}) == std::vector<int>({500, 500}));
    }
}
```

### Explanation:

1. **Header Files**:
   - `#include <catch2/catch_test_macros.hpp>` for Catch2 testing macros.
   - `#include <vector>` for using the `std::vector` container.

2. **Function Definition**:
   - The function `perform_polynomial_decryption` takes four parameters: `degree`, `modulus`, `key`, and `encrypted_data`.
   - It returns a `std::vector<int>` containing the decrypted data.
   - The function initializes `decrypted_data` with zeros and then calculates the decrypted values using the provided formula, adjusting for negative values.

3. **Catch2 Test Class**:
   - The `TEST_CASE` macro defines a test case named "Test Decrypt Function" with the tag "[decrypt]".
   - Each `SECTION` within the test case represents a specific test scenario.
   - The `REQUIRE` macro is used to assert the expected results.

4. **Test Scenarios**:
   - **Basic functionality**: Tests basic decryption with a degree of 4 and modulus of 5.
   - **Zero secret key**: Tests decryption with a zero secret key.
   - **Zero ciphertext**: Tests decryption with zero ciphertext values.
   - **Large values**: Tests decryption with large values and a modulus of 1000.

This C++ code preserves the functionality and logic of the original Python unittest class while adapting to the Catch2 testing framework.