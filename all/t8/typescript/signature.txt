Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Implement decryption based on polynomials and keys.
 * 
 * @param degree - The highest degree of a polynomial plus one.
 * @param modulus - Modulus to use when encrypting the data.
 * @param key - An array of encrypted keys.
 * @param encryptedData - An array of encrypted data.
 * 
 * @returns The decrypted data.
 */
function performPolynomialDecryption(degree: number, modulus: number, key: number[], encryptedData: number[]): number[] {
    const decryptedData: number[] = [];

    for (let index = 0; index < degree; index++) {
        // Calculate the decrypted value considering the positive modulus range
        let decryptedValue = (encryptedData[index] - key[index]) % modulus;

        // Adjust for TypeScript's behavior with negative numbers
        if (decryptedValue < 0) {
            decryptedValue += modulus;
        }

        decryptedData.push(decryptedValue);
    }

    return decryptedData;
}
```

### Explanation:
1. **Function Definition**: The function `performPolynomialDecryption` is defined with the same parameters and return type as the Python function.
2. **JSDoc Documentation**: The Python docstring is converted to JSDoc-style comments using the `/** */` format.
3. **Type Annotations**: All variables and parameters are annotated with their respective types (`number`, `number[]`).
4. **Loop**: A `for` loop is used to iterate over the `degree` range.
5. **Calculation**: The decrypted value is calculated using the modulus operation, similar to the Python code.
6. **Adjustment for Negative Numbers**: If the `decryptedValue` is negative, it is adjusted by adding the modulus value, ensuring the result is within the expected range.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and documentation standards.