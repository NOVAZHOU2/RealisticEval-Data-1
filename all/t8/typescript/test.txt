To convert the given Python unittest test class into a TypeScript test case using Jest, you need to follow these steps:

1. Install Jest if you haven't already.
2. Create a new TypeScript file for your tests.
3. Write the equivalent Jest test cases.

Here's an example of how you can do it:

### Step 1: Install Jest
If you don't have Jest installed yet, you can install it using npm or yarn:

```bash
npm install --save-dev jest
```

or

```bash
yarn add --dev jest
```

### Step 2: Create a TypeScript File for Tests
Create a new TypeScript file named `test.ts` in your project directory.

### Step 3: Write the Equivalent Jest Test Cases
Here's how you can write the Jest test cases for the `perform_polynomial_decryption` function:

```typescript
import { describe, expect, test } from '@jest/globals';
import { perform_polynomial_decryption } from './path-to-your-function'; // Adjust the path accordingly

describe('perform_polynomial_decryption', () => {
  test('should decrypt data correctly with degree 2 and modulus 5', () => {
    const degree = 2;
    const modulus = 5;
    const key = [1, 2, 3];
    const encryptedData = [4, 0, 2];

    const expectedResult = [1, 0, 1]; // Expected result after decryption

    const result = perform_polynomial_decryption(degree, modulus, key, encryptedData);

    expect(result).toEqual(expectedResult);
  });

  test('should handle different inputs correctly', () => {
    const degree = 3;
    const modulus = 7;
    const key = [2, 3, 5, 7];
    const encryptedData = [6, 0, 1, 4];

    const expectedResult = [2, 0, 0, 2]; // Expected result after decryption

    const result = perform_polynomial_decryption(degree, modulus, key, encryptedData);

    expect(result).toEqual(expectedResult);
  });
});
```

### Step 4: Run Your Tests
Add a script in your `package.json` to run the tests:

```json
"scripts": {
  "test": "jest"
}
```

Then, run the tests using:

```bash
npm test
```

or

```bash
yarn test
```

This will execute the Jest test cases and verify that your `perform_polynomial_decryption` function works as expected.