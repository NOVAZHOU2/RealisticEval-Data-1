Certainly! Below is the equivalent TypeScript code using Jest for testing the `performPolynomialDecryption` function. The provided Python unittest class will be converted into a Jest test suite, and the assert methods will be mapped to appropriate Jest assertions.

### TypeScript Code

First, we need to define the `performPolynomialDecryption` function in TypeScript:

```typescript
function performPolynomialDecryption(degree: number, modulus: number, key: number[], encryptedData: number[]): number[] {
    // Decrypts the polynomial based encryption by reversing the encryption steps
    const decryptedData: number[] = new Array(degree).fill(0);

    for (let index = 0; index < degree; index++) {
        // Reversing encryption: subtract key and take modulo
        let decryptedValue = (encryptedData[index] - key[index]) % modulus;

        // Adjust for TypeScript's behavior with negative numbers
        if (decryptedValue < 0) {
            decryptedValue += modulus;
        }

        decryptedData[index] = decryptedValue;
    }

    return decryptedData;
}
```

### Jest Test Suite

Next, we define the Jest test suite for the `performPolynomialDecryption` function:

```typescript
import { performPolynomialDecryption } from './path/to/performPolynomialDecryption'; // Adjust the import path as needed

describe('TestDecryptFunction', () => {
    it('test basic functionality', () => {
        expect(performPolynomialDecryption(4, 5, [1, 2, 3, 4], [5, 6, 7, 8])).toEqual([4, 4, 4, 4]);
    });

    it('test zero secret key', () => {
        expect(performPolynomialDecryption(3, 7, [0, 0, 0], [6, 13, 20])).toEqual([6, 6, 6]);
    });

    it('test zero ciphertext', () => {
        expect(performPolynomialDecryption(3, 9, [1, 2, 3], [0, 0, 0])).toEqual([8, 7, 6]);
    });

    it('test large values', () => {
        expect(performPolynomialDecryption(2, 1000, [500, 500], [1000, 1000])).toEqual([500, 500]);
    });
});
```

### Explanation:
1. **Function Definition**: The `performPolynomialDecryption` function is defined with proper type annotations and logic to handle negative numbers.
2. **Import Statement**: The function is imported from its module.
3. **Jest Test Suite**: The `describe` block defines the test suite named `TestDecryptFunction`.
4. **Test Cases**: Each test case uses `it` to describe the test and `expect` to assert the expected results.
   - `expect` is used with `toEqual` to compare arrays.
5. **Adjustments**: The `Array.fill(0)` method is used to initialize the `decryptedData` array with zeros, which is equivalent to the Python list initialization.

This setup ensures that the functionality and logic of the tests are preserved, and the code adheres to TypeScript and Jest conventions.