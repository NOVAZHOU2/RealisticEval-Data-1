Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I'll convert the Python unittest class into a Jest test suite, ensuring that the functionality and logic of the tests are maintained.

### Python Code

```python
import unittest

def perform_polynomial_decryption(degree, modulus, key, encrypted_data):
    # Decrypts the polynomial based encryption by reversing the encryption steps
    decrypted_data = [0] * degree

    for index in range(degree):
        # Reversing encryption: subtract key and take modulo
        decrypted_data[index] = (encrypted_data[index] - key[index]) % modulus

    return decrypted_data

class TestDecryptFunction(unittest.TestCase):
    def test_basic_functionality(self):
        self.assertEqual(perform_polynomial_decryption(4, 5, [1, 2, 3, 4], [5, 6, 7, 8]), [4, 4, 4, 4])

    def test_zero_secret_key(self):
        self.assertEqual(perform_polynomial_decryption(3, 7, [0, 0, 0], [6, 13, 20]), [6, 6, 6])

    def test_zero_ciphertext(self):
        self.assertEqual(perform_polynomial_decryption(3, 9, [1, 2, 3], [0, 0, 0]), [8, 7, 6])

    def test_large_values(self):
        self.assertEqual(perform_polynomial_decryption(2, 1000, [500, 500], [1000, 1000]), [500, 500])
```

### Equivalent Jest Test Suite

```javascript
// Import the function to be tested
const performPolynomialDecryption = require('./path/to/performPolynomialDecryption');

describe('TestDecryptFunction', () => {
    it('test basic functionality', () => {
        expect(performPolynomialDecryption(4, 5, [1, 2, 3, 4], [5, 6, 7, 8])).toEqual([4, 4, 4, 4]);
    });

    it('test zero secret key', () => {
        expect(performPolynomialDecryption(3, 7, [0, 0, 0], [6, 13, 20])).toEqual([6, 6, 6]);
    });

    it('test zero ciphertext', () => {
        expect(performPolynomialDecryption(3, 9, [1, 2, 3], [0, 0, 0])).toEqual([8, 7, 6]);
    });

    it('test large values', () => {
        expect(performPolynomialDecryption(2, 1000, [500, 500], [1000, 1000])).toEqual([500, 500]);
    });
});

// performPolynomialDecryption.js
function performPolynomialDecryption(degree, modulus, key, encryptedData) {
    // Decrypts the polynomial based encryption by reversing the encryption steps
    const decryptedData = new Array(degree).fill(0);

    for (let index = 0; index < degree; index++) {
        // Reversing encryption: subtract key and take modulo
        decryptedData[index] = (encryptedData[index] - key[index]) % modulus;
    }

    return decryptedData;
}

module.exports = performPolynomialDecryption;
```

### Explanation

1. **Importing the Function**:
   - In Jest, we need to import the function `performPolynomialDecryption` from the file where it is defined.

2. **Test Suite Structure**:
   - We use `describe` to define the test suite.
   - Each test case is defined using `it`, which takes a description and a test function.

3. **Assertions**:
   - The `expect` function is used to make assertions.
   - `toEqual` is used to check if the actual result matches the expected result.

4. **Function Implementation**:
   - The `performPolynomialDecryption` function is implemented in a separate file (`performPolynomialDecryption.js`) and exported for use in the test suite.
   - The function initializes the `decryptedData` array using `new Array(degree).fill(0)` to match the Python list initialization.

By following these steps, the Jest test suite accurately replicates the functionality and logic of the Python unittest class.