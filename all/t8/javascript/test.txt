Sure, here's how you can convert your Python unittest test class into a Jest test case in JavaScript:

```javascript
const { describe, it, expect } = require('@jest/globals');
const performPolynomialDecryption = require('./performPolynomialDecryption'); // Adjust the path accordingly

describe('performPolynomialDecryption', () => {
  it('should decrypt data correctly with given parameters', () => {
    const degree = 2;
    const modulus = 13;
    const key = [5, 8, 10];
    const encryptedData = [6, 9, 4];
    const expectedResult = [7, 6, 5];

    const result = performPolynomialDecryption(degree, modulus, key, encryptedData);

    expect(result).toEqual(expectedResult);
  });

  it('should handle edge cases correctly', () => {
    const degree = 1;
    const modulus = 5;
    const key = [2, 3];
    const encryptedData = [4, 2];
    const expectedResult = [1, 3];

    const result = performPolynomialDecryption(degree, modulus, key, encryptedData);

    expect(result).toEqual(expectedResult);
  });
});
```

In this example, I've assumed that `performPolynomialDecryption` function is located in a file named `performPolynomialDecryption.js`. You should adjust the path accordingly.

The `describe` block groups related tests together, while the `it` blocks define individual test cases. The `expect` function is used to assert that the output of `performPolynomialDecryption` matches the expected result.