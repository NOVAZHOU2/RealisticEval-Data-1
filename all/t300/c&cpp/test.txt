Here's how you can translate the provided JavaScript Jest test cases into C++ using the Catch2 testing framework:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>
#include <string>
#include <algorithm>

class ListItem {
public:
    std::string content;
    std::string className;
    bool isSponsored() const {
        return className == "css-16lshh0";
    }
};

void removeAds(std::vector<ListItem>& items) {
    items.erase(
        std::remove_if(items.begin(), items.end(),
                       [](const ListItem& item) { return item.isSponsored(); }),
        items.end());
}

TEST_CASE("removeAds") {
    std::vector<ListItem> items;

    SECTION("removes a single sponsored product") {
        items = {{"Sponsored", "css-16lshh0"}, {"Regular Item", ""}};
        removeAds(items);
        REQUIRE(items.size() == 2);
        REQUIRE(items[0].content == "Sponsored");
    }

    SECTION("removes multiple sponsored products") {
        items = {
            {"Sponsored", "css-16lshh0"},
            {"Regular Item", ""},
            {"Sponsored", "css-16lshh0"},
            {"Another Regular Item", ""}
        };
        removeAds(items);
        REQUIRE(items.size() == 4);
        REQUIRE(items[0].content == "Sponsored");
        REQUIRE(items[1].content == "Regular Item");
    }

    SECTION("does not remove any items if there are no sponsored products") {
        items = {
            {"Regular Item", ""},
            {"Another Regular Item", ""}
        };
        removeAds(items);
        REQUIRE(items.size() == 2);
        REQUIRE(items[0].content == "Regular Item");
        REQUIRE(items[1].content == "Another Regular Item");
    }

    SECTION("removes items with nested sponsored indicators") {
        items = {
            {"Sponsored", "css-16lshh0"},
            {"Regular Item", ""}
        };
        removeAds(items);
        REQUIRE(items.size() == 2);
    }

    SECTION("does not remove items with similar but non-sponsored class names") {
        items = {
            {"Not Sponsored", "css-16lshh1"},
            {"Regular Item", ""}
        };
        removeAds(items);
        REQUIRE(items.size() == 2);
        REQUIRE(items[0].content == "Not Sponsored");
        REQUIRE(items[1].content == "Regular Item");
    }
}
```

In this C++ translation, I've used the Catch2 framework to structure the test cases, focusing on the `removeAds` function's logic. Let me know if youâ€™d like to delve into any specific aspects of this conversion!