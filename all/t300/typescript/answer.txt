Sure! Below is the TypeScript version of your JavaScript function `removeAds`. In TypeScript, you'll need to define the type for the list items and ensure that the function parameters and return type are properly typed.

```typescript
/**
 * Iterate over list items on a web page and remove ads that contain a specific class name
 */
function removeAds(adsClassName: string): void {
    // Get all list items on the page
    const listItems = document.querySelectorAll('li');

    // Iterate over each list item
    listItems.forEach(item => {
        // Check if the list item contains the specified class name
        if (item.classList.contains(adsClassName)) {
            // Remove the list item from the DOM
            item.remove();
        }
    });
}
```

### Explanation:
1. **Function Signature**: The function `removeAds` now takes one parameter `adsClassName` of type `string` and returns `void`.
2. **TypeScript Type Annotations**:
   - `const listItems = document.querySelectorAll('li');`: This line uses `document.querySelectorAll` which returns a NodeList. We don't have a direct TypeScript equivalent for `NodeList`, but we can use `Element[]` or `HTMLElement[]` depending on the context.
   - `.forEach(item => { ... })`: The `forEach` method is used to iterate over each element in the NodeList.
   - `if (item.classList.contains(adsClassName)) { ... }`: This checks if the list item has the specified class name.
   - `item.remove();`: This removes the list item from the DOM.

This should work well in a TypeScript environment where you have access to the DOM and Node.js modules. If you're working within a browser environment, you might want to use `Element[]` instead of `HTMLElement[]`:

```typescript
function removeAds(adsClassName: string): void {
    const listItems = Array.from(document.querySelectorAll('li')) as HTMLElement[];

    listItems.forEach(item => {
        if (item.classList.contains(adsClassName)) {
            item.remove();
        }
    });
}
```

In this case, `Array.from` is used to convert the NodeList into an array, and `as HTMLElement[]` ensures that the elements are treated as `HTMLElement`s.