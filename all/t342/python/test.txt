Here’s how you can convert the provided TypeScript Jest test cases to Python’s unittest framework. The test structure has been adapted to match Python conventions, while keeping the comments and logic intact.
python
import unittest

def parse_markdown_titles(markdown: str) -> dict[str, list[str]]:
    # Dummy implementation for the sake of test structure.
    return {
        'level1': [],
        'level2': [],
        'level3': []
    }

class TestParseMarkdownTitles(unittest.TestCase):
    
    def test_extract_first_second_and_third_level_titles(self):
        markdown = """        
        # Title 1
        Content here.
        ## Subtitle 1.1
        More content.
        ### Subsubtitle 1.1.1
        Even more content.
        # Title 2
        Another content.
        """
        result = parse_markdown_titles(markdown)
        self.assertEqual(result, {
            'level1': ["Title 1", "Title 2"],
            'level2': ["Subtitle 1.1"],
            'level3': ["Subsubtitle 1.1.1"],
        })
    
    def test_handle_missing_headers(self):
        markdown = """        
        This is just some text without headers.
        """
        result = parse_markdown_titles(markdown)
        self.assertEqual(result, {
            'level1': [],
            'level2': [],
            'level3': [],
        })
    
    def test_handle_only_first_level_headers(self):
        markdown = """        
        # Only Title 1
        Content without subtitles.
        
        # Only Title 2
        More content.
        """
        result = parse_markdown_titles(markdown)
        self.assertEqual(result, {
            'level1': ["Only Title 1", "Only Title 2"],
            'level2': [],
            'level3': [],
        })
    
    def test_handle_mixed_headers_with_empty_lines(self):
        markdown = """        
        # Title 1
        ## Subtitle 1.1
        Some content here.
        ### Subsubtitle 1.1.1
        
        # Title 2
        """
        result = parse_markdown_titles(markdown)
        self.assertEqual(result, {
            'level1': ["Title 1", "Title 2"],
            'level2': ["Subtitle 1.1"],
            'level3': ["Subsubtitle 1.1.1"],
        })
    
    def test_handle_headers_with_special_characters(self):
        markdown = """        
        # Title 1 - Special Characters!
        ## Subtitle 1.1: The Beginning
        ### Subsubtitle 1.1.1 (Note)
        """
        result = parse_markdown_titles(markdown)
        self.assertEqual(result, {
            'level1': ["Title 1 - Special Characters!"],
            'level2': ["Subtitle 1.1: The Beginning"],
            'level3': ["Subsubtitle 1.1.1 (Note)"],
        })

if __name__ == '__main__':
    unittest.main()
Explanation of the Code:
Importing unittest: The unittest module is imported to create and run the test cases.
Dummy Implementation of parse_markdown_titles: For the sake of running the tests, a dummy implementation of the parse_markdown_titles function is provided. You can replace this with your actual function logic.
Test Class Definition:
A test class TestParseMarkdownTitles is defined, inheriting from unittest.TestCase.
Test Methods:
Each test case from the TypeScript code is translated into a method within the class:
The method names are updated to be more Pythonic (using underscores).
The markdown string is defined using triple quotes (""") for multi-line strings.
Assertions are made using self.assertEqual() to check the expected results against the actual results from the parse_markdown_titles function.
Running the Tests: The script checks if it is being run as the main module and calls unittest.main() to execute the tests.
This structure adheres to Python's conventions for unit testing while maintaining the logic and intent of the original TypeScript tests.