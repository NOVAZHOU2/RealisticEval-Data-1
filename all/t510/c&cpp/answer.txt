Sure! Below is the equivalent C++ code for the provided Python function. This code includes necessary type declarations, error handling, and the logic to find the powers of 2 and 3 that multiply to produce the given number.

```cpp
#include <iostream>
#include <utility>  // For std::pair
#include <stdexcept>  // For std::invalid_argument

// Function to find the powers of 2 and 3 that multiply to produce the given number
std::pair<int, int> find_powers(int num) {
    // Input validation
    if (num <= 0) {
        throw std::invalid_argument("Input must be a positive integer greater than zero.");
    }

    int n = 0;  // Counter for powers of 2
    int m = 0;  // Counter for powers of 3

    // Count the power of 2 in the factorization
    while (num % 2 == 0) {
        n++;
        num /= 2;
    }

    // Count the power of 3 in the factorization
    while (num % 3 == 0) {
        m++;
        num /= 3;
    }

    // If num is reduced to 1, only 2's and 3's were factors
    if (num == 1) {
        return std::make_pair(n, m);
    } else {
        return std::make_pair(-1, -1);  // Use (-1, -1) to indicate other prime factors
    }
}

int main() {
    try {
        int num = 72;  // Example input
        auto result = find_powers(num);
        if (result.first != -1 && result.second != -1) {
            std::cout << "Powers of 2 and 3: (" << result.first << ", " << result.second << ")" << std::endl;
        } else {
            std::cout << "The number has prime factors other than 2 and 3." << std::endl;
        }
    } catch (const std::invalid_argument& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**: 
   - `#include <iostream>` for input/output operations.
   - `#include <utility>` for using `std::pair`.
   - `#include <stdexcept>` for throwing exceptions.

2. **Function Definition**:
   - The function `find_powers` takes an integer `num` as input and returns a pair of integers `(n, m)` representing the powers of 2 and 3, respectively.
   - It performs input validation by checking if `num` is less than or equal to 0 and throws an exception if it is.

3. **Counting Powers**:
   - Two counters `n` and `m` are initialized to count the powers of 2 and 3, respectively.
   - Loops are used to divide `num` by 2 and 3 until they are no longer factors.

4. **Result Handling**:
   - If `num` is reduced to 1, it means the only factors were 2 and 3, and the function returns the pair `(n, m)`.
   - Otherwise, it returns `(-1, -1)` to indicate that there are other prime factors.

5. **Main Function**:
   - An example input `num` is provided.
   - The result is checked and printed accordingly.
   - Any exceptions thrown during execution are caught and handled.