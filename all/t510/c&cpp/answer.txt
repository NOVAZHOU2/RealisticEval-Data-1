Sure! Here's how you can convert the Python function `find_powers` into C++:

```cpp
#include <iostream>
#include <tuple>

std::tuple<int, int> findPowers(int num) {
    if (num <= 0) return std::make_tuple(-1, -1);

    int n = 0; // Power of 2
    while (num % 2 == 0) {
        num /= 2;
        ++n;
    }

    int m = 0; // Power of 3
    while (num % 3 == 0) {
        num /= 3;
        ++m;
    }

    if (num != 1) return std::make_tuple(-1, -1); // Number has prime factors other than 2 and 3

    return std::make_tuple(n, m);
}

int main() {
    int num = 72; // Example input
    auto [n, m] = findPowers(num);
    
    if (n == -1 && m == -1) {
        std::cout << "The number has prime factors other than 2 and 3." << std::endl;
    } else {
        std::cout << "Power of 2: " << n << ", Power of 3: " << m << std::endl;
    }
    
    return 0;
}
```

### Explanation:
- **Input Handling**: The function checks if the input number is less than or equal to zero and returns an invalid tuple (`-1, -1`) in such cases.
  
- **Finding Powers**:
  - It uses a loop to divide the number by 2 until it's no longer divisible by 2, counting the number of divisions.
  - Similarly, it does the same for division by 3.
  
- **Validation**: If after removing all factors of 2 and 3, the number is not 1, it means the number has prime factors other than 2 and 3, so it returns an invalid tuple (`-1, -1`).

- **Output**: In the `main` function, it demonstrates how to call the `findPowers` function and handle its output.

This C++ code should work similarly to your original Python function.