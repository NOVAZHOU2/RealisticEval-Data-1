Certainly! Below is the C++ version of your Python function `find_powers` with the same functionality and comments:

```cpp
#include <iostream>
#include <tuple>

/**
 * Find the powers of 2 and 3 that multiply to produce the given number.
 *
 * @param num A positive integer greater than zero.
 * @return A std::tuple<int, int> where the first element is the power of 2 and the second is the power of 3.
 *         Returns an empty tuple if the number is zero or if the number has prime factors other than 2 and 3.
 */
std::tuple<int, int> find_powers(int num) {
    if (num == 0) {
        return {};
    }

    int power_of_2 = 0;
    int power_of_3 = 0;

    // Divide num by 2 until it's no longer divisible by 2
    while (num % 2 == 0) {
        num /= 2;
        ++power_of_2;
    }

    // Divide num by 3 until it's no longer divisible by 3
    while (num % 3 == 0) {
        num /= 3;
        ++power_of_3;
    }

    // If num is reduced to anything other than 1, it means it has prime factors other than 2 and 3
    if (num != 1) {
        return {};
    }

    return {power_of_2, power_of_3};
}

// Example usage
int main() {
    auto [n, m] = find_powers(72);
    if (!n && !m) {
        std::cout << "Number has prime factors other than 2 and 3." << std::endl;
    } else {
        std::cout << "Power of 2: " << n << ", Power of 3: " << m << std::endl;
    }
    return 0;
}
```

### Explanation:
- The function `find_powers` takes an integer `num` as input.
- It initializes two variables, `power_of_2` and `power_of_3`, to keep track of the exponents.
- The function uses a loop to divide `num` by 2 until it is no longer divisible by 2, incrementing `power_of_2` each time.
- Similarly, it divides `num` by 3 until it is no longer divisible by 3, incrementing `power_of_3` each time.
- If after these divisions `num` is not equal to 1, it means `num` has prime factors other than 2 and 3, so the function returns an empty tuple.
- Otherwise, it returns a tuple containing the powers of 2 and 3.
- The `main` function demonstrates how to call `find_powers` and handle its output.