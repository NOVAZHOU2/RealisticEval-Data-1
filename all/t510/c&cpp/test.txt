Here's how you can convert the Python unittest test class into a C++ Catch2 test case:

```cpp
#include <catch2/catch.hpp>
#include "find_powers.h" // Assuming find_powers function is defined in this header

TEST_CASE("Find Powers Test Cases", "[find_powers]") {
    SECTION("Test Case 1") {
        int num = 8;
        std::tuple<int, int> result = find_powers(num);
        REQUIRE(std::get<0>(result) == 3); // Since 2^3 = 8
        REQUIRE(std::get<1>(result) == 0); // Since 3^0 = 1
    }

    SECTION("Test Case 2") {
        int num = 27;
        std::tuple<int, int> result = find_powers(num);
        REQUIRE(std::get<0>(result) == 0); // Since 2^0 = 1
        REQUIRE(std::get<1>(result) == 3); // Since 3^3 = 27
    }

    SECTION("Test Case 3") {
        int num = 24;
        std::tuple<int, int> result = find_powers(num);
        REQUIRE(result == std::make_tuple(3, 0)); // Since 2^3 * 3^0 = 24
    }

    SECTION("Test Case 4") {
        int num = 0;
        std::tuple<int, int> result = find_powers(num);
        REQUIRE(result == std::make_tuple(0, 0)); // For 0 input, return (0, 0)
    }

    SECTION("Test Case 5") {
        int num = -10; 
        std::tuple<int, int> result = find_powers(num);
        REQUIRE(result == std::make_tuple(0, 0)); // For negative input, return (0, 0)
    }
}
```

Please note that Catch2 uses `SECTION` instead of `def`, and `REQUIRE` for assertions. The `std::tuple<int, int>` returned from `find_powers` is compared using the equality operator (`==`). If your `find_powers` function does not return a tuple but rather two separate values, adjust the comparison accordingly. Also, ensure that the `find_powers` function is properly implemented and available for inclusion in your tests.