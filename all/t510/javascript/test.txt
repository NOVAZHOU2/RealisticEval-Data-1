Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will convert each test method from Python's `unittest` framework to JavaScript's `jest` testing framework, ensuring that the functionality and logic of the tests are maintained.

### Python Code:
```python
import unittest

class TestFindPowers(unittest.TestCase):

    def test_valid_cases(self):
        """Test valid numbers with only 2's and 3's as prime factors."""
        self.assertEqual(find_powers(18), (1, 2))  # 18 = 2^1 * 3^2
        self.assertEqual(find_powers(8), (3, 0))   # 8 = 2^3 * 3^0
        self.assertEqual(find_powers(27), (0, 3))  # 27 = 2^0 * 3^3
        self.assertEqual(find_powers(12), (2, 1))  # 12 = 2^2 * 3^1
        self.assertEqual(find_powers(1), (0, 0))    # 1 = 2^0 * 3^0

    def test_invalid_cases(self):
        """Test numbers with prime factors other than 2 and 3."""
        self.assertIsNone(find_powers(7))    # 7 is a prime factor
        self.assertIsNone(find_powers(14))   # 14 = 2^1 * 7^1 (contains 7)
        self.assertIsNone(find_powers(10))   # 10 = 2^1 * 5^1 (contains 5)

    def test_large_numbers(self):
        """Test large numbers that have only 2 and 3 as prime factors."""
        self.assertEqual(find_powers(864), (5, 3))  # 864 = 2^5 * 3^3
        self.assertEqual(find_powers(729), (0, 6))  # 729 = 2^0 * 3^6

    def test_edge_cases(self):
        """Test edge cases for minimal inputs."""
        self.assertEqual(find_powers(2), (1, 0))   # 2 = 2^1 * 3^0
        self.assertEqual(find_powers(3), (0, 1))   # 3 = 2^0 * 3^1
```

### Equivalent Jest Test Suite:
```javascript
const findPowers = require('./findPowers'); // Assuming findPowers is exported from a separate file

describe('TestFindPowers', () => {
    describe('Valid Cases', () => {
        it('should handle valid numbers with only 2\'s and 3\'s as prime factors', () => {
            expect(findPowers(18)).toEqual([1, 2]);  // 18 = 2^1 * 3^2
            expect(findPowers(8)).toEqual([3, 0]);   // 8 = 2^3 * 3^0
            expect(findPowers(27)).toEqual([0, 3]);  // 27 = 2^0 * 3^3
            expect(findPowers(12)).toEqual([2, 1]);  // 12 = 2^2 * 3^1
            expect(findPowers(1)).toEqual([0, 0]);   // 1 = 2^0 * 3^0
        });
    });

    describe('Invalid Cases', () => {
        it('should handle numbers with prime factors other than 2 and 3', () => {
            expect(findPowers(7)).toBeNull();    // 7 is a prime factor
            expect(findPowers(14)).toBeNull();   // 14 = 2^1 * 7^1 (contains 7)
            expect(findPowers(10)).toBeNull();   // 10 = 2^1 * 5^1 (contains 5)
        });
    });

    describe('Large Numbers', () => {
        it('should handle large numbers that have only 2 and 3 as prime factors', () => {
            expect(findPowers(864)).toEqual([5, 3]);  // 864 = 2^5 * 3^3
            expect(findPowers(729)).toEqual([0, 6]);  // 729 = 2^0 * 3^6
        });
    });

    describe('Edge Cases', () => {
        it('should handle edge cases for minimal inputs', () => {
            expect(findPowers(2)).toEqual([1, 0]);   // 2 = 2^1 * 3^0
            expect(findPowers(3)).toEqual([0, 1]);   // 3 = 2^0 * 3^1
        });
    });
});
```

### Explanation:
1. **Import Statement**:
   - The `findPowers` function is imported from a separate file using `require('./findPowers')`. This assumes that `findPowers` is defined and exported in another file.

2. **Describe Blocks**:
   - Each `describe` block groups related tests together, providing a clear structure.
   - The `describe` blocks are named according to the purpose of the tests.

3. **It Blocks**:
   - Each `it` block contains one or more test cases.
   - The descriptions within the `it` blocks provide context for the tests.

4. **Assertions**:
   - `expect(findPowers(...)).toEqual([...])` is used to check that the returned values match the expected tuples.
   - `expect(findPowers(...)).toBeNull()` is used to check that the function returns `null` for invalid cases.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adhering to Jest's syntax and conventions.