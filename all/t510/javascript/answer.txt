Sure! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function findPowers(num) {
    /**
     * Find the powers of 2 and 3 that multiply to produce the given number.
     *
     * Parameters:
     * num (number): A positive integer greater than zero.
     *
     * Returns:
     * Array: An array [n, m] where n is the power of 2 and m is the power of 3.
     *        Returns null if the number is zero or if the number has prime factors other than 2 and 3.
     */

    // Input validation
    if (num <= 0) {
        throw new Error("Input must be a positive integer greater than zero.");
    }

    let n = 0;  // Initialize counter for powers of 2
    let m = 0;  // Initialize counter for powers of 3

    // Count the power of 2 in the factorization
    while (num % 2 === 0) {
        n += 1;
        num = Math.floor(num / 2);
    }

    // Count the power of 3 in the factorization
    while (num % 3 === 0) {
        m += 1;
        num = Math.floor(num / 3);
    }

    // If num is reduced to 1, only 2's and 3's were factors
    if (num === 1) {
        return [n, m];
    } else {
        return null;  // Return null if there are other prime factors
    }
}

// Example usage
console.log(findPowers(72));  // Output: [3, 2]
console.log(findPowers(81));  // Output: [0, 4]
console.log(findPowers(125)); // Output: null
```

### Explanation:
1. **Function Definition**: The function `findPowers` is defined with a single parameter `num`.
2. **Input Validation**: The function checks if the input is a positive integer greater than zero using an `if` statement. If not, it throws an error.
3. **Counting Powers**:
   - It initializes two variables `n` and `m` to count the powers of 2 and 3, respectively.
   - It uses a `while` loop to count the power of 2 by continuously dividing `num` by 2 until it is no longer divisible by 2.
   - It uses another `while` loop to count the power of 3 by continuously dividing `num` by 3 until it is no longer divisible by 3.
4. **Final Check**: After the loops, it checks if `num` is reduced to 1. If so, it returns the powers `[n, m]`. Otherwise, it returns `null`.

This JavaScript code should behave identically to the original Python code.