Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Find the powers of 2 and 3 that multiply to produce the given number.
 *
 * @param num - A positive integer greater than zero.
 * @returns A tuple [n, m] where n is the power of 2 and m is the power of 3.
 *          Returns null if the number is zero or if the number has prime factors other than 2 and 3.
 */
function findPowers(num: number): [number, number] | null {
    // Input validation
    if (num <= 0) {
        throw new Error("Input must be a positive integer greater than zero.");
    }

    let n = 0; // Initialize counter for powers of 2
    let m = 0; // Initialize counter for powers of 3

    // Count the power of 2 in the factorization
    while (num % 2 === 0) {
        n += 1;
        num = Math.floor(num / 2);
    }

    // Count the power of 3 in the factorization
    while (num % 3 === 0) {
        m += 1;
        num = Math.floor(num / 3);
    }

    // If num is reduced to 1, only 2's and 3's were factors
    if (num === 1) {
        return [n, m];
    } else {
        return null; // Return null if there are other prime factors
    }
}
```

### Explanation:
1. **Function Signature**: The function signature `def find_powers(num: int) -> tuple:` is translated to `function findPowers(num: number): [number, number] | null`.
2. **JSDoc Comments**: The Python docstring is converted to JSDoc-style comments using `/** */`.
3. **Type Annotations**: The Python type `int` is translated to `number` in TypeScript.
4. **Return Type**: The Python return type `tuple` is translated to `[number, number] | null` in TypeScript to represent the tuple or `null` return value.
5. **Logic**: The logic remains the same, with appropriate adjustments for TypeScript syntax.

This TypeScript code preserves the original functionality and structure of the Python function while adhering to TypeScript's static type system and documentation conventions.