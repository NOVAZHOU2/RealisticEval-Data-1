Certainly! Below is the equivalent TypeScript test class using Jest, which preserves the functionality and logic of the provided Python unittest class. The code includes appropriate Jest assertions and type annotations.

### TypeScript Code with Jest Testing

```typescript
import { findPowers } from './findPowers'; // Import the findPowers function

describe('TestFindPowers', () => {
  describe('test valid cases', () => {
    it('should handle numbers with only 2\'s and 3\'s as prime factors', () => {
      expect(findPowers(18)).toEqual([1, 2]);  // 18 = 2^1 * 3^2
      expect(findPowers(8)).toEqual([3, 0]);   // 8 = 2^3 * 3^0
      expect(findPowers(27)).toEqual([0, 3]);  // 27 = 2^0 * 3^3
      expect(findPowers(12)).toEqual([2, 1]);  // 12 = 2^2 * 3^1
      expect(findPowers(1)).toEqual([0, 0]);   // 1 = 2^0 * 3^0
    });
  });

  describe('test invalid cases', () => {
    it('should return null for numbers with prime factors other than 2 and 3', () => {
      expect(findPowers(7)).toBeNull();    // 7 is a prime factor
      expect(findPowers(14)).toBeNull();   // 14 = 2^1 * 7^1 (contains 7)
      expect(findPowers(10)).toBeNull();   // 10 = 2^1 * 5^1 (contains 5)
    });
  });

  describe('test large numbers', () => {
    it('should handle large numbers with only 2 and 3 as prime factors', () => {
      expect(findPowers(864)).toEqual([5, 3]);  // 864 = 2^5 * 3^3
      expect(findPowers(729)).toEqual([0, 6]);  // 729 = 2^0 * 3^6
    });
  });

  describe('test edge cases', () => {
    it('should handle minimal inputs', () => {
      expect(findPowers(2)).toEqual([1, 0]);   // 2 = 2^1 * 3^0
      expect(findPowers(3)).toEqual([0, 1]);   // 3 = 2^0 * 3^1
    });
  });
});
```

### Explanation:
1. **Import Statement**: The `findPowers` function is imported from the `findPowers` module.
2. **Describe Blocks**: Each `unittest.TestCase` method is converted to a `describe` block in Jest.
3. **It Blocks**: Each test case within a `describe` block is represented by an `it` block.
4. **Assertions**:
   - `expect(findPowers(18)).toEqual([1, 2])`: Maps `self.assertEqual(find_powers(18), (1, 2))`.
   - `expect(findPowers(7)).toBeNull()`: Maps `self.assertIsNone(find_powers(7))`.

This conversion ensures that the tests are structured similarly to the original Python unittest class and use the appropriate Jest assertions to validate the behavior of the `findPowers` function.