Here's the equivalent TypeScript code for your Python function:

```typescript
function findPowers(num: number): [number, number] | null {
    /**
     * Find the powers of 2 and 3 that multiply to produce the given number.
     *
     * @param {number} num - A positive integer greater than zero.
     * @returns {[number, number] | null} - A tuple [n, m] where n is the power of 2 and m is the power of 3.
     *          Returns null if the number is zero or if the number has prime factors other than 2 and 3.
     */
    
    if (num === 0) return null;

    let n = 0;
    while (num % 2 === 0) {
        num /= 2;
        n++;
    }

    let m = 0;
    while (num % 3 === 0) {
        num /= 3;
        m++;
    }

    if (num !== 1) return null;

    return [n, m];
}
```

This TypeScript function `findPowers` does exactly what your Python function `find_powers` does. It calculates the highest powers of 2 and 3 that divide the input number without leaving a remainder. If the number cannot be divided evenly by either 2 or 3 at any point, it returns `null`. If the final result is not 1 after dividing by both 2 and 3, it also means the number has prime factors other than 2 and 3, so it returns `null`. Otherwise, it returns a tuple containing the powers of 2 (`n`) and 3 (`m`).