Sure! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class:

```typescript
import { describe, it, expect } from '@jest/globals';

function calculateColumnWidths(data: string[][]): number[] {
    /**
     * Calculate the maximum width of each column in a list of lists where each sub-list represents a row of table data.
     *
     * @param data - A two-dimensional array containing rows of data, where each inner array contains string elements representing the values in each column.
     * @returns An array containing the maximum width (in characters) of each column across all rows. The width of a column is defined by the longest string present in that column.
     */
    return data[0].map((_, columnIndex) => 
        Math.max(...data.map(row => row[columnIndex].length))
    );
}

describe('calculateColumnWidths', () => {
    it('should correctly calculate the maximum width of each column', () => {
        const testData = [
            ['Name', 'Age', 'City'],
            ['Alice', '30', 'New York'],
            ['Bob', '25', 'Los Angeles'],
            ['Charlie', '35', 'Chicago']
        ];

        const expectedOutput = [6, 2, 11];
        const result = calculateColumnWidths(testData);

        expect(result).toEqual(expectedOutput);
    });

    it('should handle an empty input', () => {
        const testData: string[][] = [];
        const expectedOutput: number[] = [];
        const result = calculateColumnWidths(testData);

        expect(result).toEqual(expectedOutput);
    });

    it('should handle a single-row input', () => {
        const testData = [['John', '40', 'Boston']];
        const expectedOutput = [4, 2, 6];
        const result = calculateColumnWidths(testData);

        expect(result).toEqual(expectedOutput);
    });
});
```

### Explanation:
- **Function Definition**: The `calculateColumnWidths` function is defined in TypeScript with type annotations.
- **Test Suite**: We use `describe` to group related tests together.
- **Individual Tests**: Each `it` block defines a specific test case.
- **Assertions**: We use `expect` along with `toEqual` to verify that the output of the function matches the expected results.

This setup ensures that your TypeScript code is tested effectively using Jest.