Certainly! Here is the equivalent Jest test class in TypeScript, including the necessary type annotations and Jest assertions:

```typescript
import { calculateColumnWidths } from './path-to-your-file'; // Import the calculateColumnWidths function

describe('TestCalculateColumnWidths', () => {
  it('should handle a standard case', () => {
    const data = [
      ["Name", "Age", "City"],
      ["Alice", "22", "New York"],
      ["Bob", "30", "San Francisco"]
    ];
    const expected = [5, 3, 13];
    expect(calculateColumnWidths(data)).toEqual(expected);
  });

  it('should handle a single element case', () => {
    const data = [["Name"]];
    const expected = [4];
    expect(calculateColumnWidths(data)).toEqual(expected);
  });

  it('should handle varied length cases', () => {
    const data = [
      ["a", "bb", "ccc"],
      ["dddd", "ee", "f"]
    ];
    const expected = [4, 2, 3];
    expect(calculateColumnWidths(data)).toEqual(expected);
  });

  it('should handle all empty strings', () => {
    const data = [
      ["", "", ""],
      ["", "", ""]
    ];
    const expected = [0, 0, 0];
    expect(calculateColumnWidths(data)).toEqual(expected);
  });

  it('should handle mixed content', () => {
    const data = [
      ["1234", "567", "890"],
      ["abc", "defg", "h"]
    ];
    const expected = [4, 4, 3];
    expect(calculateColumnWidths(data)).toEqual(expected);
  });

  it('should handle a single column with multiple rows', () => {
    const data = [
      ["one"],
      ["two"],
      ["three"]
    ];
    const expected = [5];
    expect(calculateColumnWidths(data)).toEqual(expected);
  });
});
```

### Explanation:
1. **Import the Function**:
   - Import the `calculateColumnWidths` function from the file where it is defined.

2. **Describe Block**:
   - Use the `describe` block to group the test cases under a descriptive name.

3. **Test Cases**:
   - Each test case is defined using the `it` block.
   - The `expect` function is used to assert the expected outcomes.

4. **Data and Expected Results**:
   - Each test case defines the input `data` and the expected result `expected`.
   - The `expect` function is used with `toEqual` to check if the output matches the expected result.

### Example Usage:
Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest ts-jest @types/jest
# or
yarn add --dev jest ts-jest @types/jest
```

Configure your `jest` setup in `package.json`:

```json
{
  "scripts": {
    "test": "jest"
  },
  "devDependencies": {
    "jest": "^27.0.0",
    "ts-jest": "^27.0.0",
    "@types/jest": "^27.0.0"
  },
  "jest": {
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    },
    "testRegex": ".*\\.spec\\.tsx?$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "jsx",
      "json",
      "node"
    ]
  }
}
```

This setup ensures that Jest can handle TypeScript files and run the tests correctly.