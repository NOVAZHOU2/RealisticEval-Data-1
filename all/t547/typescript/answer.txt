Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function calculateColumnWidths(data: string[][]): number[] {
    // Initialize a list to hold the maximum widths for each column.
    // This assumes that all rows in data have the same number of columns.
    const widths: number[] = new Array(data[0].length).fill(0);

    // Iterate over each row in the data.
    for (const row of data) {
        // Iterate over each column in the row.
        for (let idx = 0; idx < row.length; idx++) {
            // Update the width at index `idx` with the maximum of the current width
            // and the length of the string in the current column.
            widths[idx] = Math.max(widths[idx], row[idx].length);
        }
    }

    // Return the list of maximum widths for each column.
    return widths;
}
```

### Explanation:
1. **Function Definition**: The function `calculateColumnWidths` is defined with a parameter `data` of type `string[][]`, which represents a two-dimensional array of strings.
2. **Initialization**: The `widths` array is initialized using `new Array(data[0].length).fill(0)` to ensure it has the correct length and is filled with zeros.
3. **Looping Over Rows**: The outer loop iterates over each row in the `data` array.
4. **Looping Over Columns**: The inner loop iterates over each column in the current row.
5. **Updating Widths**: The width at index `idx` is updated with the maximum value between the current width and the length of the string in the current column.
6. **Return Statement**: The function returns the `widths` array containing the maximum widths for each column.

This TypeScript code maintains the same functionality and logic as the original Python code.