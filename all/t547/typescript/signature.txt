Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Calculate the maximum width of each column in a list of lists where each sub-list represents a row of table data.
 *
 * @param data - A two-dimensional array containing rows of data, where each inner array contains string elements representing the values in each column.
 * @returns An array containing the maximum width (in characters) of each column across all rows. The width of a column is defined by the longest string present in that column.
 */
function calculateColumnWidths(data: string[][]): number[] {
    // Initialize a list to hold the maximum widths for each column.
    // This assumes that all rows in data have the same number of columns.
    const widths: number[] = new Array(data[0].length).fill(0);

    // Iterate over each row in the data.
    for (const row of data) {
        // Iterate over each column in the row.
        for (let idx = 0; idx < row.length; idx++) {
            // Update the width at index `idx` with the maximum of the current width
            // and the length of the string in the current column.
            widths[idx] = Math.max(widths[idx], row[idx].length);
        }
    }

    // Return the list of maximum widths for each column.
    return widths;
}
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc comment block is placed above the function definition.
   - It includes a brief description of the function.
   - It specifies the parameters and their types (`@param data`) and the return type (`@returns`).

2. **Function Definition**:
   - The function `calculateColumnWidths` is defined with a parameter `data` of type `string[][]`, which represents a two-dimensional array of strings.
   - The return type is specified as `number[]`.

3. **Initialization**:
   - The `widths` array is initialized using `new Array(data[0].length).fill(0)` to ensure it has the correct length and is filled with zeros.

4. **Looping Over Rows and Columns**:
   - The outer loop iterates over each row in the `data` array.
   - The inner loop iterates over each column in the current row.
   - The width at index `idx` is updated with the maximum value between the current width and the length of the string in the current column.

5. **Return Statement**:
   - The function returns the `widths` array containing the maximum widths for each column.

This TypeScript code preserves the original functionality and structure of the Python code, including proper type annotations and documentation.