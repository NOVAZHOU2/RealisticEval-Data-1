To convert the given Python code into JavaScript, we need to maintain the same functionality, logic, and structure. Here's the equivalent JavaScript code:

```javascript
function calculateColumnWidths(data) {
    // Initialize an array to hold the maximum widths for each column.
    // This assumes that all rows in data have the same number of columns.
    let widths = new Array(data[0].length).fill(0);

    // Iterate over each row in the data.
    for (let row of data) {
        // Iterate over each column in the row.
        for (let idx = 0; idx < row.length; idx++) {
            // Update the width at index `idx` with the maximum of the current width
            // and the length of the string in the current column.
            widths[idx] = Math.max(widths[idx], row[idx].toString().length);
        }
    }

    // Return the array of maximum widths for each column.
    return widths;
}
```

### Explanation:
1. **Initialization**: 
   - In JavaScript, we use `new Array(data[0].length).fill(0)` to initialize an array with zeros, similar to `[0] * len(data[0])` in Python.

2. **Iteration**:
   - We use `for...of` loops to iterate over the rows and columns, similar to the nested `for` loops in Python.

3. **String Length Calculation**:
   - In JavaScript, we use `row[idx].toString().length` to get the length of the string representation of the value in the current column, similar to `len(col)` in Python.

4. **Return Statement**:
   - The function returns the `widths` array, which contains the maximum widths for each column.

This JavaScript code should provide the same functionality as the original Python code.