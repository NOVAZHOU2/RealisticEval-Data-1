Sure! Below is the equivalent JavaScript test case using Jest for the provided Python function `calculate_column_widths`.

```javascript
const calculateColumnWidths = require('./path-to-your-calculate-column-widths-file');

describe('calculateColumnWidths', () => {
  it('should return the correct column widths for a given table data', () => {
    const data = [
      ['Name', 'Age', 'City'],
      ['Alice', '30', 'New York'],
      ['Bob', '25', 'Los Angeles'],
      ['Charlie', '35', 'Chicago']
    ];

    const expectedOutput = [6, 2, 11];

    expect(calculateColumnWidths(data)).toEqual(expectedOutput);
  });

  it('should handle empty input correctly', () => {
    const data = [];

    const expectedOutput = [];

    expect(calculateColumnWidths(data)).toEqual(expectedOutput);
  });

  it('should handle single row input correctly', () => {
    const data = [['John', '40', 'Boston']];

    const expectedOutput = [4, 2, 6];

    expect(calculateColumnWidths(data)).toEqual(expectedOutput);
  });

  it('should handle rows with varying lengths correctly', () => {
    const data = [
      ['Short', 'Longer String', 'Even Longer'],
      ['One', 'Two Three Four Five', 'Six Seven Eight']
    ];

    const expectedOutput = [7, 19, 18];

    expect(calculateColumnWidths(data)).toEqual(expectedOutput);
  });
});
```

In this example:
- We're importing the `calculateColumnWidths` function from your file.
- We're using `describe` and `it` blocks to group and define our tests.
- Each `it` block contains an assertion using `expect` to check if the output of `calculateColumnWidths` matches the expected result.

Make sure to replace `'./path-to-your-calculate-column-widths-file'` with the actual path to your JavaScript file containing the `calculateColumnWidths` function.