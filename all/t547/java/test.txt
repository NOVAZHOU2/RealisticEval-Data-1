Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

### Java Code

```java
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

package org.real.temp;

public class Tester {

    @Test
    public void testStandardCase() {
        List<List<String>> data = Arrays.asList(
            Arrays.asList("Name", "Age", "City"),
            Arrays.asList("Alice", "22", "New York"),
            Arrays.asList("Bob", "30", "San Francisco")
        );
        List<Integer> expected = Arrays.asList(5, 3, 13);
        assertEquals(expected, calculateColumnWidths(data));
    }

    @Test
    public void testSingleElement() {
        List<List<String>> data = Arrays.asList(
            Arrays.asList("Name")
        );
        List<Integer> expected = Arrays.asList(4);
        assertEquals(expected, calculateColumnWidths(data));
    }

    @Test
    public void testVariedLength() {
        List<List<String>> data = Arrays.asList(
            Arrays.asList("a", "bb", "ccc"),
            Arrays.asList("dddd", "ee", "f")
        );
        List<Integer> expected = Arrays.asList(4, 2, 3);
        assertEquals(expected, calculateColumnWidths(data));
    }

    @Test
    public void testAllEmptyStrings() {
        List<List<String>> data = Arrays.asList(
            Arrays.asList("", "", ""),
            Arrays.asList("", "", "")
        );
        List<Integer> expected = Arrays.asList(0, 0, 0);
        assertEquals(expected, calculateColumnWidths(data));
    }

    @Test
    public void testMixedContent() {
        List<List<String>> data = Arrays.asList(
            Arrays.asList("1234", "567", "890"),
            Arrays.asList("abc", "defg", "h")
        );
        List<Integer> expected = Arrays.asList(4, 4, 3);
        assertEquals(expected, calculateColumnWidths(data));
    }

    @Test
    public void testSingleColumnMultipleRows() {
        List<List<String>> data = Arrays.asList(
            Arrays.asList("one"),
            Arrays.asList("two"),
            Arrays.asList("three")
        );
        List<Integer> expected = Arrays.asList(5);
        assertEquals(expected, calculateColumnWidths(data));
    }

    // Method to calculate column widths
    private List<Integer> calculateColumnWidths(List<List<String>> data) {
        List<Integer> widths = new ArrayList<>(data.get(0).size());
        for (int i = 0; i < data.get(0).size(); i++) {
            widths.add(0);
        }

        for (List<String> row : data) {
            for (int idx = 0; idx < row.size(); idx++) {
                int currentWidth = widths.get(idx);
                int stringLength = row.get(idx).length();
                widths.set(idx, Math.max(currentWidth, stringLength));
            }
        }

        return widths;
    }
}
```

### Explanation:
1. **Imports**:
   - `import org.junit.Test;`: Import the JUnit `@Test` annotation.
   - `import static org.junit.Assert.assertEquals;`: Import the `assertEquals` method for assertions.
   - `import java.util.ArrayList;`: Import `ArrayList` for creating lists.
   - `import java.util.Arrays;`: Import `Arrays` for creating lists from arrays.
   - `import java.util.List;`: Import `List` interface.

2. **Package Declaration**:
   - `package org.real.temp;`: Place the test class in the specified package.

3. **Class Definition**:
   - `public class Tester`: Define the test class.

4. **JUnit Test Methods**:
   - Each test method is annotated with `@Test`.
   - Each test method sets up the input data and expected results, then calls the `calculateColumnWidths` method and asserts the result using `assertEquals`.

5. **Helper Method**:
   - `private List<Integer> calculateColumnWidths(List<List<String>> data)`: This method calculates the maximum width of each column in the provided data.

6. **Example Usage**:
   - Each test method demonstrates how to use the `calculateColumnWidths` method with different scenarios.

This Java code preserves the original functionality and structure of the Python unittest class while adhering to JUnit's syntax and conventions.