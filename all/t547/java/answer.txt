Hereâ€™s the Java equivalent of the provided Python code, organized within the package `org.real.temp` and the class `Answer`. The code maintains the same functionality and logic but adapts to Java's syntax and object-oriented principles:

```java
package org.real.temp;

public class Answer {

    /**
     * Calculates the maximum width for each column in a given 2D array of strings.
     * 
     * @param data A 2D array of strings representing the table data.
     * @return An array of integers representing the maximum width for each column.
     */
    public static int[] calculateColumnWidths(String[][] data) {
        // Initialize an array to hold the maximum widths for each column.
        // Assumes all rows in data have the same number of columns.
        int[] widths = new int[data[0].length];

        // Iterate over each row in the data.
        for (String[] row : data) {
            // Iterate over each column in the row.
            for (int idx = 0; idx < row.length; idx++) {
                // Update the width at index `idx` with the maximum of the current width
                // and the length of the string in the current column.
                widths[idx] = Math.max(widths[idx], row[idx].length());
            }
        }

        // Return the array of maximum widths for each column.
        return widths;
    }

    // Example usage
    public static void main(String[] args) {
        String[][] data = {
            {"apple", "banana", "cherry"},
            {"orange", "grape", "mango"},
            {"kiwi", "pineapple", "strawberry"}
        };

        int[] widths = calculateColumnWidths(data);
        for (int width : widths) {
            System.out.println(width);
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The code starts with the package declaration `package org.real.temp;`.
2. **Class Definition**: The class `Answer` is defined within the package.
3. **Method Signature**: The method `calculateColumnWidths` takes a 2D array of strings (`String[][] data`) as input and returns an array of integers (`int[]`) representing the maximum width for each column.
4. **Initialization**: An integer array `widths` is initialized with the length of the first row in `data`.
5. **Iteration**: Two nested loops iterate over each row and column in `data`, updating the `widths` array with the maximum length found for each column.
6. **Return Statement**: The `widths` array is returned after all iterations.
7. **Example Usage**: The `main` method demonstrates how to use the `calculateColumnWidths` method with sample data.

This Java code preserves the original functionality and logic of the Python code while adhering to Java's syntax and conventions.