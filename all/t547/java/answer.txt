Here's the equivalent Java code for the provided Python function:

```java
package org.real.temp;

import java.util.List;
import java.util.ArrayList;

public class Answer {

    /**
     * Calculate the maximum width of each column in a list of lists where each sub-list represents a row of table data.
     *
     * @param data A two-dimensional list containing rows of data, where each inner list contains string elements representing the values in each column.
     * @return A list containing the maximum width (in characters) of each column across all rows. The width of a column is defined by the longest string present in that column.
     */
    public static List<Integer> calculateColumnWidths(List<List<String>> data) {
        List<Integer> columnWidths = new ArrayList<>();

        // Iterate over each row in the data
        for (List<String> row : data) {
            // Iterate over each cell in the row
            for (int i = 0; i < row.size(); i++) {
                String cellValue = row.get(i);
                int currentWidth = columnWidths.size() > i ? columnWidths.get(i) : 0;
                
                // Update the column width if the current cell value is wider
                if (cellValue.length() > currentWidth) {
                    columnWidths.set(i, cellValue.length());
                } else {
                    // Add new column width if it doesn't exist yet
                    if (columnWidths.size() <= i) {
                        columnWidths.add(cellValue.length());
                    }
                }
            }
        }

        return columnWidths;
    }
}
```

This Java code defines a method `calculateColumnWidths` within the `Answer` class. It takes a two-dimensional `List` of `String` objects (`data`) and returns a `List` of integers representing the maximum width of each column. The logic mirrors the original Python function, iterating through each row and updating the column widths based on the length of the strings in each cell.