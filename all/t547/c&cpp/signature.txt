Certainly! Here is the equivalent C++ code for the given Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

// Function to calculate the maximum width of each column in a list of lists
// where each sub-list represents a row of table data.
//
// Args:
//     data: A two-dimensional vector containing rows of data, where each inner vector contains string elements representing the values in each column.
//
// Returns:
//     A vector containing the maximum width (in characters) of each column across all rows. The width of a column is defined by the longest string present in that column.
std::vector<int> calculate_column_widths(const std::vector<std::vector<std::string>>& data) {
    // Initialize a vector to hold the maximum widths for each column.
    // This assumes that all rows in data have the same number of columns.
    std::vector<int> widths(data[0].size(), 0);

    // Iterate over each row in the data.
    for (const auto& row : data) {
        // Iterate over each column in the row.
        for (size_t idx = 0; idx < row.size(); ++idx) {
            // Update the width at index `idx` with the maximum of the current width
            // and the length of the string in the current column.
            widths[idx] = std::max(widths[idx], static_cast<int>(row[idx].length()));
        }
    }

    // Return the vector of maximum widths for each column.
    return widths;
}

int main() {
    // Example usage
    std::vector<std::vector<std::string>> data = {{"apple", "banana"}, {"cherry", "date"}};
    std::vector<int> result = calculate_column_widths(data);
    
    // Output the results
    for (int width : result) {
        std::cout << width << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `calculate_column_widths` is translated to a C++ function with the same name and parameters.
   - The type `List[List[str]]` is translated to `std::vector<std::vector<std::string>>`.
   - The return type `List[int]` is translated to `std::vector<int>`.

2. **Comments and Documentation**:
   - The Python docstring is converted to a multi-line comment block using `/* */`.
   - Single-line comments are used to explain specific parts of the code using `//`.

3. **Initialization**:
   - The vector `widths` is initialized with zeros using `std::vector<int>(data[0].size(), 0);`.

4. **Looping Over Rows and Columns**:
   - Range-based for loops are used to iterate over each row and each column within the row.
   - The width at index `idx` is updated using `std::max` to ensure it holds the maximum value between the current width and the length of the string in the current column.

5. **Return Statement**:
   - The function returns the vector of maximum widths.

6. **Example Usage**:
   - An example usage is provided in the `main` function to demonstrate how to call the `calculate_column_widths` function and print the results.

This C++ code preserves the original purpose and structure of the Python code while adhering to C++ standards and practices.