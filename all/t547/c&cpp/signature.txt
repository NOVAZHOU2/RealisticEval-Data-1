```cpp
#include <vector>
#include <string>
#include <algorithm>

/**
 * @brief Calculate the maximum width of each column in a vector of vectors where each sub-vector represents a row of table data.
 *
 * @param data A two-dimensional vector containing rows of data, where each inner vector contains string elements representing the values in each column.
 * @return std::vector<int> A vector containing the maximum width (in characters) of each column across all rows. The width of a column is defined by the longest string present in that column.
 */
std::vector<int> calculateColumnWidths(const std::vector<std::vector<std::string>>& data) {
    std::vector<int> columnWidths;

    for (const auto& row : data) {
        for (size_t col = 0; col < row.size(); ++col) {
            if (columnWidths.size() <= col) {
                columnWidths.push_back(row[col].length());
            } else {
                columnWidths[col] = std::max(columnWidths[col], row[col].length());
            }
        }
    }

    return columnWidths;
}
```

This C++ function `calculateColumnWidths` takes a two-dimensional vector of strings (`data`) and returns a vector of integers representing the maximum width of each column. The function iterates through each row and then through each element within those rows, updating the `columnWidths` vector with the maximum length found for each column. If a new column is encountered during iteration, it adds an entry to `columnWidths`.