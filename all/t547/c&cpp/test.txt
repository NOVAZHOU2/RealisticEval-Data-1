Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be translated into a C++ test class with equivalent functionality and logic.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 using the following headers:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <string>
#include <algorithm>
```

Now, let's define the test cases using Catch2:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <string>
#include <algorithm>

// Function to calculate the maximum width of each column in a list of lists
// where each sub-list represents a row of table data.
std::vector<int> calculate_column_widths(const std::vector<std::vector<std::string>>& data) {
    // Initialize a vector to hold the maximum widths for each column.
    // This assumes that all rows in data have the same number of columns.
    std::vector<int> widths(data[0].size(), 0);

    // Iterate over each row in the data.
    for (const auto& row : data) {
        // Iterate over each column in the row.
        for (size_t idx = 0; idx < row.size(); ++idx) {
            // Update the width at index `idx` with the maximum of the current width
            // and the length of the string in the current column.
            widths[idx] = std::max(widths[idx], static_cast<int>(row[idx].length()));
        }
    }

    // Return the vector of maximum widths for each column.
    return widths;
}

TEST_CASE("Test calculate_column_widths") {
    SECTION("Standard case") {
        std::vector<std::vector<std::string>> data = {
            {"Name", "Age", "City"},
            {"Alice", "22", "New York"},
            {"Bob", "30", "San Francisco"}
        };
        std::vector<int> expected = {5, 3, 13};
        REQUIRE(calculate_column_widths(data) == expected);
    }

    SECTION("Single element") {
        std::vector<std::vector<std::string>> data = {{"Name"}};
        std::vector<int> expected = {4};
        REQUIRE(calculate_column_widths(data) == expected);
    }

    SECTION("Varied length") {
        std::vector<std::vector<std::string>> data = {
            {"a", "bb", "ccc"},
            {"dddd", "ee", "f"}
        };
        std::vector<int> expected = {4, 2, 3};
        REQUIRE(calculate_column_widths(data) == expected);
    }

    SECTION("All empty strings") {
        std::vector<std::vector<std::string>> data = {
            {"", "", ""},
            {"", "", ""}
        };
        std::vector<int> expected = {0, 0, 0};
        REQUIRE(calculate_column_widths(data) == expected);
    }

    SECTION("Mixed content") {
        std::vector<std::vector<std::string>> data = {
            {"1234", "567", "890"},
            {"abc", "defg", "h"}
        };
        std::vector<int> expected = {4, 4, 3};
        REQUIRE(calculate_column_widths(data) == expected);
    }

    SECTION("Single column multiple rows") {
        std::vector<std::vector<std::string>> data = {
            {"one"},
            {"two"},
            {"three"}
        };
        std::vector<int> expected = {5};
        REQUIRE(calculate_column_widths(data) == expected);
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Function Definition**:
   - The `calculate_column_widths` function is defined as before, with the same logic and structure.

2. **Catch2 Test Class**:
   - The `TEST_CASE` macro is used to define a test case named "Test calculate_column_widths".
   - Each `SECTION` corresponds to a test method in the Python unittest class.
   - The `REQUIRE` macro is used to assert that the calculated widths match the expected widths.

3. **Main Function**:
   - The `main` function initializes and runs the Catch2 test session.

This C++ code preserves the functionality and logic of the original Python unittest class while adhering to the Catch2 testing framework conventions.