Here's how you could write a corresponding Catch2 C++ unit test for your Python function:

```cpp
#include <catch2/catch.hpp>
#include <vector>
#include <string>

std::vector<int> calculateColumnWidths(const std::vector<std::vector<std::string>>& data) {
    // Implementation remains the same...
}

TEST_CASE("Calculate Column Widths", "[calculate_column_widths]") {
    SECTION("Empty Data") {
        auto result = calculateColumnWidths({{}});
        REQUIRE(result.empty());
    }

    SECTION("Single Row") {
        auto result = calculateColumnWidths({{"Hello", "World"}});
        REQUIRE(result.size() == 2);
        REQUIRE(result[0] == 5); // Length of "Hello"
        REQUIRE(result[1] == 5); // Length of "World"
    }

    SECTION("Multiple Rows") {
        auto result = calculateColumnWidths({
            {"Apple", "Banana"},
            {"Cherry", "Date"}
        });
        REQUIRE(result.size() == 2);
        REQUIRE(result[0] == 6); // Length of "Banana"
        REQUIRE(result[1] == 4); // Length of "Date"
    }
}
```

In this C++ version, we're using Catch2's `SECTION` macro to group related tests together and the `REQUIRE` macro to assert conditions similar to Python's `assert`. The `calculateColumnWidths` function implementation is left out as it should remain the same.