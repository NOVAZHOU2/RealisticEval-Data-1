# Generated By ChatGPT DGL
# Write Python code that generates all possible combinations of 8 characters, 
# with each character consisting of either a lowercase or uppercase English letter and 
# also has a function to check the XOR sum of the 0th, 3rd, 6th characters, 
# the XOR sum of the 1st, 4th, 7th characters, 
# and the XOR sum of the 2nd and 5th characters. 
# Also add function to check sha1 hash of the combination startwith 0xff7b948953ac
# Use Pytorch framework to use GPU
# Generated By ChatGPT DGL
# Write Python code that generates all possible combinations of 8 characters, 
# with each character consisting of either a lowercase or uppercase English letter and 
# also has a function to check the XOR sum of the 0th, 3rd, 6th characters, 
# the XOR sum of the 1st, 4th, 7th characters, 
# and the XOR sum of the 2nd and 5th characters. 
# Also add function to check sha1 hash of the combination startwith 0xff7b948953ac
# Use Pytorch framework to use GPU

import torch
import string
import hashlib
import time
import itertools
     

def add_xy_and_check_sha1(valid_combinations, device):
    letters = 'abcdefghijklmnopqrstuvwxyz'
    xy_combinations = torch.tensor(
        [[ord(x), ord(y)] for x in letters for y in letters], dtype=torch.uint8, device=device)

    final_results = []
    for combination in valid_combinations:
        for xy in xy_combinations:
            new_combination = torch.cat((combination[:3], xy[0].unsqueeze(
                0), combination[3:6], xy[1].unsqueeze(0), combination[6:]), dim=0)
            sha1_hash = hashlib.sha1(
                new_combination.cpu().numpy().tobytes()).hexdigest()
            if sha1_hash.startswith('ff7b948953ac'):
                final_results.append(new_combination)
    return final_results