Hereâ€™s the JavaScript code converted to TypeScript:

```typescript
/**
 * Produces a character array of length 52 containing all lowercase and uppercase letters in alphabetical order.
 *
 * @returns {string[]} An array of alphabet characters from 'a' to 'z' and 'A' to 'Z'.
 */
function getAllAlphabets(): string[] {
    const alphabetCount = 26; // Number of letters in the English alphabet
    return Array.from({ length: alphabetCount * 2 }, (_, index) => {
        // Determine the character code based on the index:
        // - If the index is less than 26, it's a lowercase letter ('a' to 'z')
        // - If the index is 26 or greater, it's an uppercase letter ('A' to 'Z')
        const charCode = index < alphabetCount
            ? 97 + index  // Lowercase letters start at char code 97 ('a')
            : 65 + index - alphabetCount; // Uppercase letters start at char code 65 ('A')

        // Convert the character code to a string character
        return String.fromCharCode(charCode);
    });
}
```

### Changes Made:
1. **Type Annotations**: Added a return type annotation (`: string[]`) to the function signature to specify that it returns an array of strings.
2. **Code Style**: Ensured that the TypeScript code maintains the same logic and style as the original JavaScript code, as it was already suitable for TypeScript with minimal changes needed. 

This TypeScript function will work the same way as the original JavaScript function, while providing the benefits of type checking.