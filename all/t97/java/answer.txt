Sure! Here's the equivalent Java code for the given JavaScript queue implementation:

```java
import java.util.ArrayList;
import java.util.NoSuchElementException;

/**
 * Realizes the basic functions of the queue structure: enqueue, dequeue, get the front element of the queue,
 * judge whether it is empty, and output all elements.
 */
public class Queue<T> {
    private ArrayList<T> items;

    public Queue() {
        this.items = new ArrayList<>();
    }

    /**
     * Adds an element to the end of the queue.
     * @param element The element to be added to the queue.
     */
    public void enqueue(T element) {
        this.items.add(element);
    }

    /**
     * Removes and returns the element from the front of the queue.
     * @return The removed element from the front of the queue, or throws NoSuchElementException if the queue is empty.
     */
    public T dequeue() {
        if (isEmpty()) {
            throw new NoSuchElementException("Underflow");
        }
        return this.items.remove(0);
    }

    /**
     * Returns the front element of the queue without removing it.
     * @return The front element of the queue, or throws NoSuchElementException if the queue is empty.
     */
    public T front() {
        if (isEmpty()) {
            throw new NoSuchElementException("No elements in Queue");
        }
        return this.items.get(0);
    }

    /**
     * Checks if the queue is empty.
     * @return True if the queue is empty, otherwise false.
     */
    public boolean isEmpty() {
        return this.items.isEmpty();
    }

    /**
     * Returns a string representation of all the elements in the queue.
     * @return A string containing all elements in the queue, separated by spaces.
     */
    public String printQueue() {
        StringBuilder sb = new StringBuilder();
        for (T item : items) {
            sb.append(item).append(" ");
        }
        return sb.toString().trim();
    }

    public static void main(String[] args) {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);

        System.out.println("Front element: " + queue.front());
        System.out.println("Dequeued element: " + queue.dequeue());
        System.out.println("Queue contents: " + queue.printQueue());
        System.out.println("Is queue empty? " + queue.isEmpty());
    }
}
```

### Explanation:
- **Class Definition**: The `Queue` class is defined with a generic type `T` to allow storing any type of elements.
- **Constructor**: Initializes an `ArrayList` to store the queue elements.
- **enqueue**: Adds an element to the end of the queue using `add`.
- **dequeue**: Removes and returns the first element of the queue using `remove(0)` and throws a `NoSuchElementException` if the queue is empty.
- **front**: Returns the first element of the queue using `get(0)` and throws a `NoSuchElementException` if the queue is empty.
- **isEmpty**: Checks if the queue is empty using `isEmpty`.
- **printQueue**: Constructs a string representation of the queue elements, separated by spaces.

This Java implementation closely mirrors the functionality of the provided JavaScript code.