Here's the Java equivalent of the provided JavaScript queue implementation:

```java
import java.util.LinkedList;

public class Queue {
    private LinkedList<Object> items;

    public Queue() {
        this.items = new LinkedList<>();
    }

    /**
     * Adds an element to the end of the queue.
     * @param element The element to be added to the queue.
     */
    public void enqueue(Object element) {
        items.addLast(element);
    }

    /**
     * Removes and returns the element from the front of the queue.
     * @returns The removed element from the front of the queue, or "Underflow" if the queue is empty.
     */
    public Object dequeue() {
        if (isEmpty()) {
            return "Underflow";
        }
        return items.removeFirst();
    }

    /**
     * Returns the front element of the queue without removing it.
     * @returns The front element of the queue, or "No elements in Queue" if the queue is empty.
     */
    public Object front() {
        if (isEmpty()) {
            return "No elements in Queue";
        }
        return items.getFirst();
    }

    /**
     * Checks if the queue is empty.
     * @returns True if the queue is empty, otherwise false.
     */
    public boolean isEmpty() {
        return items.isEmpty();
    }

    /**
     * Returns a string representation of all the elements in the queue.
     * @returns A string containing all elements in the queue, separated by spaces.
     */
    public String printQueue() {
        return String.join(" ", items.stream().map(Object::toString).toArray(String[]::new));
    }

    public static void main(String[] args) {
        Queue queue = new Queue();
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        System.out.println("Queue: " + queue.printQueue()); // Output: Queue: 1 2 3
        System.out.println("Dequeue: " + queue.dequeue()); // Output: Dequeue: 1
        System.out.println("Front: " + queue.front()); // Output: Front: 2
        System.out.println("Is Empty: " + queue.isEmpty()); // Output: Is Empty: false
    }
}
```

### Key Changes
1. **Data Structure**: Used `LinkedList` from Java's collections framework to mimic JavaScript's array behavior.
2. **Method Signatures**: Adjusted the method signatures to fit Java's syntax.
3. **Return Types**: Changed the return types to match Java conventions.
4. **String Representation**: Used Java streams to join the elements in the `printQueue` method.