Certainly! Hereâ€™s the equivalent JUnit 4 test case for the `Queue` class in Java:

```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class Tester {

    private Queue<Integer> queue;

    @Before
    public void setUp() {
        queue = new Queue<>();
    }

    @Test
    public void shouldInitializeAnEmptyQueue() {
        assertTrue(queue.isEmpty());
    }

    @Test
    public void shouldEnqueueElementsToTheQueue() {
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        assertEquals("1 2 3", queue.printQueue());
        assertFalse(queue.isEmpty());
    }

    @Test
    public void shouldDequeueElementsFromTheQueue() {
        queue.enqueue(1);
        queue.enqueue(2);
        assertEquals(1, (int) queue.dequeue());
    }

    @Test
    public void shouldReturnTheFrontElementWithoutRemovingIt() {
        queue.enqueue(10);
        queue.enqueue(20);
        assertEquals(10, (int) queue.front());
    }

    @Test
    public void shouldCheckIfTheQueueIsEmpty() {
        assertTrue(queue.isEmpty());
        queue.enqueue(5);
        assertFalse(queue.isEmpty());
        queue.dequeue();
        assertTrue(queue.isEmpty());
    }
}
```

### Explanation:
1. **Package Declaration**:
   ```java
   import org.junit.Before;
   import org.junit.Test;
   import static org.junit.Assert.*;
   ```

2. **Class Definition**:
   ```java
   public class Tester {
   ```

3. **Setup Method**:
   ```java
   private Queue<Integer> queue;

   @Before
   public void setUp() {
       queue = new Queue<>();
   }
   ```
   - This method initializes the `Queue` object before each test.

4. **Test Cases**:
   - **shouldInitializeAnEmptyQueue**:
     ```java
     @Test
     public void shouldInitializeAnEmptyQueue() {
         assertTrue(queue.isEmpty());
     }
     ```

   - **shouldEnqueueElementsToTheQueue**:
     ```java
     @Test
     public void shouldEnqueueElementsToTheQueue() {
         queue.enqueue(1);
         queue.enqueue(2);
         queue.enqueue(3);
         assertEquals("1 2 3", queue.printQueue());
         assertFalse(queue.isEmpty());
     }
     ```

   - **shouldDequeueElementsFromTheQueue**:
     ```java
     @Test
     public void shouldDequeueElementsFromTheQueue() {
         queue.enqueue(1);
         queue.enqueue(2);
         assertEquals(1, (int) queue.dequeue());
     }
     ```

   - **shouldReturnTheFrontElementWithoutRemovingIt**:
     ```java
     @Test
     public void shouldReturnTheFrontElementWithoutRemovingIt() {
         queue.enqueue(10);
         queue.enqueue(20);
         assertEquals(10, (int) queue.front());
     }
     ```

   - **shouldCheckIfTheQueueIsEmpty**:
     ```java
     @Test
     public void shouldCheckIfTheQueueIsEmpty() {
         assertTrue(queue.isEmpty());
         queue.enqueue(5);
         assertFalse(queue.isEmpty());
         queue.dequeue();
         assertTrue(queue.isEmpty());
     }
     ```

### Notes:
- **JUnit Assertions**:
  - `assertTrue` and `assertFalse` are used to check boolean conditions.
  - `assertEquals` is used to check equality of values.

- **Type Casting**:
  - Since `queue.dequeue()` and `queue.front()` return `Integer`, we need to cast them to `int` when comparing with primitive `int`.

This setup ensures that the tests are structured similarly to the Jest tests and cover the same functionality.