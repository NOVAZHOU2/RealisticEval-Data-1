Sure! Here's the equivalent C++ code for the given JavaScript queue implementation:

```cpp
#include <iostream>
#include <vector>
#include <string>

/**
 * Realize the basic functions of the queue structure: enqueue, dequeue, get the front element of the queue, judge whether it is empty, output all elements
 */
class Queue {
public:
    Queue() : items() {}

    /**
     * Adds an element to the end of the queue.
     * @param T element - The element to be added to the queue.
     */
    void enqueue(const T& element) {
        items.push_back(element);
    }

    /**
     * Removes and returns the element from the front of the queue.
     * @returns T The removed element from the front of the queue, or "Underflow" if the queue is empty.
     */
    T dequeue() {
        if (isEmpty()) {
            throw std::runtime_error("Underflow");
        }
        T frontElement = items.front();
        items.erase(items.begin());
        return frontElement;
    }

    /**
     * Returns the front element of the queue without removing it.
     * @returns T The front element of the queue, or throws an exception if the queue is empty.
     */
    T front() const {
        if (isEmpty()) {
            throw std::runtime_error("No elements in Queue");
        }
        return items.front();
    }

    /**
     * Checks if the queue is empty.
     * @returns bool True if the queue is empty, otherwise false.
     */
    bool isEmpty() const {
        return items.empty();
    }

    /**
     * Returns a string representation of all the elements in the queue.
     * @returns std::string A string containing all elements in the queue, separated by spaces.
     */
    std::string printQueue() const {
        std::string result;
        for (const auto& item : items) {
            result += std::to_string(item) + " ";
        }
        if (!result.empty()) {
            result.pop_back(); // Remove the last space
        }
        return result;
    }

private:
    std::vector<T> items;
};

int main() {
    Queue<int> q;

    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);

    std::cout << "Front element: " << q.front() << std::endl;
    std::cout << "Dequeued element: " << q.dequeue() << std::endl;
    std::cout << "Queue contents: " << q.printQueue() << std::endl;

    return 0;
}
```

### Explanation:
- **Class Definition**: The `Queue` class is defined with member functions for enqueue, dequeue, front, isEmpty, and printQueue.
- **Member Variables**: The `items` vector is used to store the elements of the queue.
- **Enqueue**: Adds an element to the end of the queue using `push_back`.
- **Dequeue**: Removes and returns the front element of the queue using `front` and `erase`. Throws an exception if the queue is empty.
- **Front**: Returns the front element of the queue using `front`. Throws an exception if the queue is empty.
- **IsEmpty**: Checks if the queue is empty using `empty`.
- **PrintQueue**: Returns a string representation of all elements in the queue.

This C++ code provides the same functionality as the JavaScript code but uses C++ idioms and standard library containers.