Hereâ€™s how you can convert your JavaScript Jest test cases for the `Queue` class into C++ test cases using the Catch2 framework:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include "Queue.hpp" // Include the header file for the Queue class

TEST_CASE("Queue Class", "[queue]") {
    Queue queue;

    SECTION("should initialize an empty queue") {
        REQUIRE(queue.isEmpty() == true);
    }

    SECTION("should enqueue elements to the queue") {
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        REQUIRE(queue.printQueue() == "1 2 3");
        REQUIRE(queue.isEmpty() == false);
    }

    SECTION("should dequeue elements from the queue") {
        queue.enqueue(1);
        queue.enqueue(2);
        std::string dequeuedElement = queue.dequeue();
        REQUIRE(dequeuedElement == "1");
    }

    SECTION("should return the front element without removing it") {
        queue.enqueue(10);
        queue.enqueue(20);
        std::string frontElement = queue.front();
        REQUIRE(frontElement == "10");
    }

    SECTION("should check if the queue is empty") {
        REQUIRE(queue.isEmpty() == true);
        queue.enqueue(5);
        REQUIRE(queue.isEmpty() == false);
        queue.dequeue();
        REQUIRE(queue.isEmpty() == true);
    }
}
```

### Key Points:
- Each test case is wrapped in a `SECTION` to define specific behaviors.
- The `REQUIRE` macro is used to assert conditions, similar to Jest's `expect`.
- The `#include "Queue.hpp"` line assumes that your `Queue` class is defined in a separate header file. Adjust the include statement as necessary based on your file structure.
- Ensure you have the Catch2 library set up in your project to compile and run the tests.