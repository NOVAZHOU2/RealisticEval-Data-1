Sure! Below is the equivalent Java JUnit test case for your Python unittest test class. The package is `org.real.temp` and the class name is `Tester`.

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class Tester {

    @Test
    public void testMatrixMultiply() {
        // Test data
        int[][] matrixA = {
            {1, 2},
            {3, 4}
        };
        int[][] matrixB = {
            {5, 6},
            {7, 8}
        };
        int[][] expectedOutput = {
            {19, 22},
            {43, 50}
        };

        // Call the method under test
        int[][] result = matrixMultiply(matrixA, matrixB);

        // Verify the result
        assertEquals(expectedOutput.length, result.length);
        for (int i = 0; i < expectedOutput.length; i++) {
            assertEquals(expectedOutput[i].length, result[i].length);
            for (int j = 0; j < expectedOutput[i].length; j++) {
                assertEquals(expectedOutput[i][j], result[i][j]);
            }
        }
    }

    // Method under test
    public int[][] matrixMultiply(int[][] matrixA, int[][] matrixB) {
        int rowsA = matrixA.length;
        int colsA = matrixA[0].length;
        int rowsB = matrixB.length;
        int colsB = matrixB[0].length;

        if (colsA != rowsB) {
            throw new IllegalArgumentException("Number of columns in matrixA must be equal to number of rows in matrixB");
        }

        int[][] result = new int[rowsA][colsB];

        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                for (int k = 0; k < colsA; k++) {
                    result[i][j] += matrixA[i][k] * matrixB[k][j];
                }
            }
        }

        return result;
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration is at the top of the file.
2. **Class Declaration**: The class `Tester` is declared within the specified package.
3. **JUnit Test Method**: The `testMatrixMultiply` method is annotated with `@Test`, indicating that it is a test method.
4. **Test Data**: Sample matrices `matrixA` and `matrixB` along with their expected output are defined.
5. **Method Under Test**: The `matrixMultiply` method is implemented to perform matrix multiplication.
6. **Assertions**: Assertions are used to verify that the result matches the expected output.

Make sure you have JUnit 5 library included in your project dependencies. If you're using Maven, add the following dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
```

If you're using Gradle, add the following to your `build.gradle`:

```groovy
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}
```

This setup will allow you to run the test using JUnit.