Here's the equivalent Java code for your Python function:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Answer {

    /**
     * Implementing matrix multiplication
     *
     * @param matrixA matrix A
     * @param matrixB matrix B
     * @return matrixA matrixB multiplication model_answer_result
     */
    public static List<List<Integer>> matrixMultiply(List<List<Integer>> matrixA, List<List<Integer>> matrixB) {
        int rowsA = matrixA.size();
        int colsA = matrixA.get(0).size();
        int rowsB = matrixB.size();
        int colsB = matrixB.get(0).size();

        if (colsA != rowsB) {
            throw new IllegalArgumentException("The number of columns in matrix A must be equal to the number of rows in matrix B");
        }

        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < rowsA; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < colsB; j++) {
                int sum = 0;
                for (int k = 0; k < colsA; k++) {
                    sum += matrixA.get(i).get(k) * matrixB.get(k).get(j);
                }
                row.add(sum);
            }
            result.add(row);
        }

        return result;
    }
}
```

This Java method `matrixMultiply` performs the same operation as your Python function. It takes two matrices (`matrixA` and `matrixB`) as input and returns their product. The method uses nested loops to iterate through the elements of the matrices and calculate the dot products to construct the resulting matrix.

Please note that error handling has been added to check if the number of columns in `matrixA` matches the number of rows in `matrixB`. If they don't match, an `IllegalArgumentException` is thrown. This ensures that the method can only be called with valid matrix dimensions for multiplication.