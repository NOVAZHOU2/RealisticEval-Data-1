Hereâ€™s the equivalent C++ code for your Python matrix multiplication function:

```cpp
#include <vector>
#include <iostream>

using namespace std;

vector<vector<int>> matrix_multiply(const vector<vector<int>>& matrixA, const vector<vector<int>>& matrixB) {
    // Get dimensions
    int rowsA = matrixA.size();
    int colsA = matrixA[0].size();
    int rowsB = matrixB.size();
    int colsB = matrixB[0].size();

    // Check if multiplication is possible
    if (colsA != rowsB) {
        throw invalid_argument("Number of columns in matrixA must equal number of rows in matrixB.");
    }

    // Initialize result matrix with zeroes
    vector<vector<int>> result(rowsA, vector<int>(colsB, 0));

    // Perform matrix multiplication
    for (int i = 0; i < rowsA; ++i) {
        for (int j = 0; j < colsB; ++j) {
            for (int k = 0; k < colsA; ++k) {
                result[i][j] += matrixA[i][k] * matrixB[k][j];
            }
        }
    }

    return result;
}

// Example usage
int main() {
    vector<vector<int>> matrixA = {{1, 2, 3}, {4, 5, 6}};
    vector<vector<int>> matrixB = {{7, 8}, {9, 10}, {11, 12}};

    vector<vector<int>> result = matrix_multiply(matrixA, matrixB);

    // Print result
    for (const auto& row : result) {
        for (int val : row) {
            cout << val << " ";
        }
        cout << endl;
    }

    return 0;
}
```

### Explanation:
- This C++ code defines a function `matrix_multiply` that takes two matrices as input and returns their product.
- It checks if the multiplication is valid (i.e., the number of columns in `matrixA` must equal the number of rows in `matrixB`).
- It initializes a result matrix filled with zeroes and uses nested loops to compute the matrix product.
- An example in the `main` function demonstrates how to use the `matrix_multiply` function.