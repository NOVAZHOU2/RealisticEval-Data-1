Sure, here's the equivalent C++ code for the given Python function:

```cpp
#include <vector>
#include <iostream>

std::vector<std::vector<int>> matrixMultiply(const std::vector<std::vector<int>>& matrixA, const std::vector<std::vector<int>>& matrixB) {
    int rowsA = matrixA.size();
    int colsA = matrixA[0].size();
    int rowsB = matrixB.size();
    int colsB = matrixB[0].size();

    // Check if the number of columns in A is equal to the number of rows in B
    if (colsA != rowsB) {
        throw std::invalid_argument("Matrix dimensions do not match for multiplication.");
    }

    // Initialize result matrix with zeros
    std::vector<std::vector<int>> result(rowsA, std::vector<int>(colsB, 0));

    // Perform matrix multiplication
    for (int i = 0; i < rowsA; ++i) {
        for (int j = 0; j < colsB; ++j) {
            for (int k = 0; k < colsA; ++k) {
                result[i][j] += matrixA[i][k] * matrixB[k][j];
            }
        }
    }

    return result;
}

int main() {
    std::vector<std::vector<int>> matrixA = {{1, 2}, {3, 4}};
    std::vector<std::vector<int>> matrixB = {{5, 6}, {7, 8}};

    try {
        auto result = matrixMultiply(matrixA, matrixB);
        
        // Print the result
        for (const auto& row : result) {
            for (int val : row) {
                std::cout << val << " ";
            }
            std::cout << std::endl;
        }
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Signature**: The `matrixMultiply` function takes two 2D vectors (`matrixA` and `matrixB`) as input and returns a 2D vector representing their product.
2. **Dimension Check**: It checks if the number of columns in `matrixA` matches the number of rows in `matrixB`. If they don't match, it throws an exception.
3. **Result Initialization**: It initializes a result matrix with zeros, having the same number of rows as `matrixA` and the same number of columns as `matrixB`.
4. **Matrix Multiplication**: It performs the matrix multiplication using nested loops.
5. **Main Function**: The `main` function demonstrates how to use the `matrixMultiply` function and prints the result.

This C++ code should work similarly to your original Python function, assuming that the input matrices have compatible dimensions for multiplication.