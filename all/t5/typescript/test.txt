Sure, here's how you can convert your Python `unittest` test class to a TypeScript test case using Jest:

```typescript
import { expect } from '@jest/globals';

// Assuming matrixMultiply function is defined in a separate file or module
import { matrixMultiply } from './matrixOperations'; // Adjust the path accordingly

describe('Matrix Multiplication', () => {
  it('should multiply two matrices correctly', () => {
    const matrixA = [
      [1, 2],
      [3, 4]
    ];

    const matrixB = [
      [5, 6],
      [7, 8]
    ];

    const expected = [
      [19, 22],
      [43, 50]
    ];

    const result = matrixMultiply(matrixA, matrixB);

    expect(result).toEqual(expected);
  });

  it('should handle empty matrices', () => {
    const matrixA: number[][] = [];
    const matrixB: number[][] = [];

    const expected: number[][] = [];

    const result = matrixMultiply(matrixA, matrixB);

    expect(result).toEqual(expected);
  });

  it('should throw an error if the number of columns in matrixA does not match the number of rows in matrixB', () => {
    const matrixA = [
      [1, 2],
      [3, 4]
    ];

    const matrixB = [
      [5, 6, 7],
      [8, 9, 10]
    ];

    expect(() => matrixMultiply(matrixA, matrixB)).toThrowError('Number of columns in matrixA must match number of rows in matrixB');
  });
});
```

### Explanation:
1. **Importing Dependencies**: We import `expect` from `@jest/globals` to use Jest's assertion functions.
2. **Describing the Test Suite**: We use `describe` to group related tests together.
3. **Writing Individual Tests**: Each `it` block represents a single test case.
   - The first test checks if the `matrixMultiply` function works correctly with valid input.
   - The second test checks if the function handles empty matrices.
   - The third test checks if the function throws an error when the dimensions of the matrices do not allow for multiplication.

Make sure that the `matrixMultiply` function is correctly implemented and exported from the specified module (`./matrixOperations`). Adjust the import path as necessary based on your project structure.