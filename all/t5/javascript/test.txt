Certainly! Below is the equivalent Jest test suite for the given Python unittest test class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Unittest Code

```python
import unittest

class TestMatrixMultiplication(unittest.TestCase):
    def test_standard_matrices(self):
        mat1 = [[1, 2], [3, 4]]
        mat2 = [[5, 6], [7, 8]]
        expected = [[19, 22], [43, 50]]
        self.assertEqual(matrix_multiply(mat1, mat2), expected, "Should correctly multiply standard matrices")

    def test_identity_matrix(self):
        mat1 = [[1, 0], [0, 1]]
        mat2 = [[5, 6], [7, 8]]
        expected = [[5, 6], [7, 8]]
        self.assertEqual(matrix_multiply(mat1, mat2), expected,
                         "Multiplying by the identity matrix should yield the answer matrix")

    def test_zero_matrix(self):
        mat1 = [[0, 0], [0, 0]]
        mat2 = [[5, 6], [7, 8]]
        expected = [[0, 0], [0, 0]]
        self.assertEqual(matrix_multiply(mat1, mat2), expected,
                         "Multiplying by the zero matrix should yield a zero matrix")

    def test_square_matrix_multiplication(self):
        mat1 = [[1, 2], [3, 4]]
        mat2 = [[5, 6], [7, 8]]
        expected = [[19, 22], [43, 50]]
        self.assertEqual(matrix_multiply(mat1, mat2), expected,
                         "The multiplication of two square matrices should yield the correct product")

    def test_large_identity_matrix(self):
        mat1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        mat2 = [[5, 6, 7], [8, 9, 10], [11, 12, 13]]
        expected = [[5, 6, 7], [8, 9, 10], [11, 12, 13]]
        self.assertEqual(matrix_multiply(mat1, mat2), expected,
                         "Multiplying by the larger identity matrix should yield the answer matrix")
```

### Equivalent Jest Test Suite

```javascript
const matrixMultiply = require('./matrixMultiply'); // Import the matrixMultiply function

describe('TestMatrixMultiplication', () => {
    it('should correctly multiply standard matrices', () => {
        const mat1 = [[1, 2], [3, 4]];
        const mat2 = [[5, 6], [7, 8]];
        const expected = [[19, 22], [43, 50]];
        expect(matrixMultiply(mat1, mat2)).toEqual(expected);
    });

    it('multiplying by the identity matrix should yield the answer matrix', () => {
        const mat1 = [[1, 0], [0, 1]];
        const mat2 = [[5, 6], [7, 8]];
        const expected = [[5, 6], [7, 8]];
        expect(matrixMultiply(mat1, mat2)).toEqual(expected);
    });

    it('multiplying by the zero matrix should yield a zero matrix', () => {
        const mat1 = [[0, 0], [0, 0]];
        const mat2 = [[5, 6], [7, 8]];
        const expected = [[0, 0], [0, 0]];
        expect(matrixMultiply(mat1, mat2)).toEqual(expected);
    });

    it('the multiplication of two square matrices should yield the correct product', () => {
        const mat1 = [[1, 2], [3, 4]];
        const mat2 = [[5, 6], [7, 8]];
        const expected = [[19, 22], [43, 50]];
        expect(matrixMultiply(mat1, mat2)).toEqual(expected);
    });

    it('multiplying by the larger identity matrix should yield the answer matrix', () => {
        const mat1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
        const mat2 = [[5, 6, 7], [8, 9, 10], [11, 12, 13]];
        const expected = [[5, 6, 7], [8, 9, 10], [11, 12, 13]];
        expect(matrixMultiply(mat1, mat2)).toEqual(expected);
    });
});
```

### Explanation:

1. **Importing the Function**:
   - The `matrixMultiply` function is imported at the beginning of the test file using `require('./matrixMultiply')`.

2. **Describe Block**:
   - The `describe` block groups the tests together under a descriptive name (`TestMatrixMultiplication`).

3. **It Blocks**:
   - Each `it` block represents a specific test case.
   - The description of each test case is provided as a string argument to `it`.

4. **Expect Assertions**:
   - The `expect` function is used to assert the expected outcome of the `matrixMultiply` function.
   - The `toEqual` matcher is used to check if the actual result matches the expected result.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.