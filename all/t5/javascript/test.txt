Sure! Below is the equivalent JavaScript test case using Jest for the provided Python unittest test class.

```javascript
const { describe, it, expect } = require('@jest/globals');

function matrixMultiply(matrixA, matrixB) {
    /**
     * Implementing matrix multiplication

     * @param {number[][]} matrixA - Matrix A
     * @param {number[][]} matrixB - Matrix B

     * @returns {number[][]} - Matrix A multiplied by Matrix B
     */
    const result = [];
    for (let i = 0; i < matrixA.length; i++) {
        result[i] = [];
        for (let j = 0; j < matrixB[0].length; j++) {
            let sum = 0;
            for (let k = 0; k < matrixB.length; k++) {
                sum += matrixA[i][k] * matrixB[k][j];
            }
            result[i][j] = sum;
        }
    }
    return result;
}

describe('matrixMultiply', () => {
    it('should multiply two matrices correctly', () => {
        const matrixA = [
            [1, 2],
            [3, 4]
        ];
        const matrixB = [
            [5, 6],
            [7, 8]
        ];
        const expected = [
            [19, 22],
            [43, 50]
        ];
        const result = matrixMultiply(matrixA, matrixB);
        expect(result).toEqual(expected);
    });

    it('should handle empty matrices', () => {
        const matrixA = [];
        const matrixB = [];
        const expected = [];
        const result = matrixMultiply(matrixA, matrixB);
        expect(result).toEqual(expected);
    });

    it('should handle single row and column matrices', () => {
        const matrixA = [[1]];
        const matrixB = [[2]];
        const expected = [[2]];
        const result = matrixMultiply(matrixA, matrixB);
        expect(result).toEqual(expected);
    });
});
```

In this JavaScript code:

1. We define the `matrixMultiply` function which performs matrix multiplication.
2. We use Jest's `describe` and `it` functions to create test cases.
3. Each `it` block contains a specific test scenario with input matrices and the expected output.
4. The `expect` function is used to assert that the result of `matrixMultiply` matches the expected output.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest
```

or

```sh
yarn add --dev jest
```

Then, you can run the tests using:

```sh
npx jest
```

or

```sh
yarn jest
```