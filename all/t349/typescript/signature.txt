Hereâ€™s the equivalent TypeScript code for the provided Python function signature and documentation, following TypeScript conventions and preserving the original functionality:

```typescript
/**
 * Generates all possible combinations of elements from a list of lists.
 * Each combination consists of picking exactly one element from each list in the input list of lists.
 * This method is useful for generating product variations, scenarios in decision-making tools,
 * or any context where all possible combinations of a set of options need to be explored.
 *
 * @param inputLists - A list of lists containing the elements to combine.
 *                     The lists must not be empty but can contain elements of any type.
 * @returns A list of lists, where each inner list represents a possible combination of elements
 *          taken from the input lists. Returns an empty list if the input list is empty.
 */
function generateCombinations(inputLists: Array<Array<unknown>>): Array<Array<unknown>> {
    // Function implementation goes here
}
```

### Key Changes:

1. **Function Signature**: The type `List[List[Any]]` is translated to `Array<Array<unknown>>`, as TypeScript uses `Array` for arrays and `unknown` for a flexible type.

2. **Documentation Comments**: The Python docstring is converted into a JSDoc-style comment. This includes `@param` and `@returns` tags to describe the function parameters and return value.

3. **Language Conventions**: The overall structure remains the same, but the syntax is adjusted for TypeScript, including the use of `unknown` to represent any type, similar to Python's `Any`.

This TypeScript code maintains the original intent and description while aligning with TypeScript standards.