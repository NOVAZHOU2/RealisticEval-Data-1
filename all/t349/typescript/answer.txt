Here's the equivalent TypeScript code that maintains the functionality and logic of the provided Python code while adapting it for TypeScript's type system:

```typescript
type Any = unknown; // Use `unknown` for a more flexible type

class CombinationGenerator {
    generateCombinations(inputLists: Array<Array<Any>>): Array<Array<Any>> {
        if (inputLists === null || inputLists.length === 0) {
            return []; // Return an empty list if input is null or empty
        }
        const combinations: Array<Array<Any>> = [];
        this._generateCombinationsRecursive(inputLists, 0, [], combinations);
        return combinations;
    }

    private _generateCombinationsRecursive(
        inputLists: Array<Array<Any>>,
        currentIndex: number,
        currentCombination: Array<Any>,
        combinations: Array<Array<Any>>
    ): void {
        if (currentIndex === inputLists.length) {
            combinations.push([...currentCombination]); // Snapshot of currentCombination
            return;
        }
        const currentList = inputLists[currentIndex];
        for (const element of currentList) {
            currentCombination.push(element);
            this._generateCombinationsRecursive(inputLists, currentIndex + 1, currentCombination, combinations);
            currentCombination.pop(); // Remove the last element for backtracking
        }
    }
}
```

### Key Changes and Considerations:

1. **Type Definitions**: In TypeScript, we explicitly define types for function parameters and return types. The type `Any` is defined as `unknown` for flexibility.

2. **Array and Function Syntax**: The syntax for arrays and methods is adjusted to TypeScript conventions.

3. **Method Visibility**: The `_generate_combinations_recursive` method is marked as `private` to indicate it should only be used within the class.

4. **Copying Arrays**: The syntax `combinations.push([...currentCombination])` is used to create a shallow copy of the current combination, similar to `current_combination.copy()` in Python.

5. **Iteration Syntax**: A `for...of` loop is used for iterating over arrays, which is idiomatic in TypeScript.

This TypeScript version retains the original logic while adhering to TypeScript's type safety and conventions.