Here's the equivalent test class using Jest, maintaining the functionality and logic of the original Python `unittest` tests. Comments have been added to document any necessary changes due to language differences.

```javascript
// Import the function to be tested
const { generateCombinations } = require('./path-to-your-module'); // Adjust the path accordingly

describe('generateCombinations', () => {
    
    test('empty input', () => {
        const inputData = [];
        const expected = [];
        expect(generateCombinations(inputData)).toEqual(expected); // Jest's expect is similar to unittest's assertEqual
    });

    test('single empty list', () => {
        const inputData = [[]]; // Equivalent to [[]] in Python
        const expected = [];
        expect(generateCombinations(inputData)).toEqual(expected);
    });

    test('single non-empty list', () => {
        const inputData = [["a", "b", "c"]]; // Same representation in JavaScript
        const expected = [["a"], ["b"], ["c"]];
        expect(generateCombinations(inputData)).toEqual(expected);
    });

    test('multiple lists', () => {
        const inputData = [["a", "b"], ["1", "2"]]; // Same representation in JavaScript
        const expected = [["a", "1"], ["a", "2"], ["b", "1"], ["b", "2"]];
        expect(generateCombinations(inputData)).toEqual(expected);
    });

    test('input containing empty list', () => {
        const inputData = [["a", "b"], [], ["1", "2"]]; // Same representation in JavaScript
        const expected = [];
        expect(generateCombinations(inputData)).toEqual(expected);
    });

});
```

### Key Differences and Notes:

1. **Test Framework Structure**:
   - In Python's `unittest`, test cases are organized in classes. In Jest, tests are organized using `describe` blocks, which can contain multiple `test` functions.

2. **Assertions**:
   - `self.assertEqual` in `unittest` is replaced by `expect(...).toEqual(...)` in Jest. This provides a similar level of assertion, checking for value equality.

3. **Imports**:
   - Ensure to import the function being tested correctly in your Jest test file. Adjust the path in the `require` statement to point to your JavaScript module that contains `generateCombinations`.

4. **Comments**:
   - Inline comments in Jest are similar to those in Python, but JSDoc style can be used for more extensive documentation if needed. 

With this structure, your tests should function correctly in a JavaScript environment using Jest, while maintaining the same logical assertions as in your original Python tests.