Here's the equivalent JavaScript code with JSDoc comments:

```javascript
/**
 * Generates all possible combinations of elements from a list of lists.
 * Each combination consists of picking exactly one element from each list in the input list of lists.
 * This method is useful for generating product variations, scenarios in decision-making tools,
 * or any context where all possible combinations of a set of options need to be explored.
 *
 * @param {Array<Array<any>>} inputLists - A list of lists containing the elements to combine.
 *                                          The lists must not be empty but can contain elements of any type.
 * @returns {Array<Array<any>>} - A list of lists, where each inner list represents a possible combination of elements
 *                                 taken from the input lists. Returns an empty list if the input list is empty.
 */
function generateCombinations(inputLists) {
    if (!inputLists || inputLists.length === 0) {
        return []; // Return an empty array if input is null or empty
    }
    const combinations = [];
    generateCombinationsRecursive(inputLists, 0, [], combinations);
    return combinations;
}

function generateCombinationsRecursive(inputLists, currentIndex, currentCombination, combinations) {
    if (currentIndex === inputLists.length) {
        combinations.push([...currentCombination]); // Snapshot of currentCombination
        return;
    }
    const currentList = inputLists[currentIndex];
    for (const element of currentList) {
        currentCombination.push(element);
        generateCombinationsRecursive(inputLists, currentIndex + 1, currentCombination, combinations);
        currentCombination.pop(); // Remove the last element for backtracking
    }
}
```