Sure! Here's how you can convert your Python function `move_emojis_to_end` into TypeScript:

```typescript
function moveEmojisToEnd(text: string): string {
    // Regular expression to match emojis
    const emojiRegex = /([\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}])/gu;

    // Split the text into non-emoji and emoji parts
    let nonEmojiParts: string[] = [];
    let emojiParts: string[] = [];

    for (let char of text) {
        if (emojiRegex.test(char)) {
            emojiParts.push(char);
        } else {
            nonEmojiParts.push(char);
        }
    }

    // Combine non-emoji parts followed by emoji parts
    return nonEmojiParts.join('') + emojiParts.join('');
}

// Example usage:
const result = moveEmojisToEnd("Hello World ðŸ˜Š");
console.log(result);  // Output: "Hello WorldðŸ˜Š"
```

### Explanation:
1. **Regular Expression**: The regular expression `/([\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}])/gu` is used to match emojis. This range covers most common emojis, but it might need adjustments based on specific requirements.

2. **Splitting Text**: The function iterates through each character of the input string. If the character is an emoji, it is added to the `emojiParts` array; otherwise, it is added to the `nonEmojiParts` array.

3. **Combining Parts**: Finally, the function combines the `nonEmojiParts` and `emojiParts` arrays into a single string with all emojis at the end.

This should give you a good starting point for converting your Python function to TypeScript!