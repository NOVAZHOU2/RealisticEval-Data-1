Certainly! Below is the equivalent Jest test class in TypeScript for the provided Python unittest class. The functionality and logic of the tests are preserved, and the necessary type annotations are included. The Python `assertEqual` method is mapped to the appropriate Jest assertions.

### TypeScript Code with Jest Testing Framework

```typescript
import { moveEmojisToEnd } from './path/to/moveEmojisToEnd'; // Import the moveEmojisToEnd function

describe('TestMoveEmojisToEnd', () => {
    it('should handle strings with no emojis', () => {
        const inputText = "This is a test.";
        const expectedOutput = "This is a test.";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });

    it('should handle strings with only emojis', () => {
        const inputText = "😀😃😄😁";
        const expectedOutput = "😀😃😄😁";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });

    it('should handle emojis at the start of the text', () => {
        const inputText = "😀😃Hello world!";
        const expectedOutput = "Hello world!😀😃";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });

    it('should handle emojis already at the end of the text', () => {
        const inputText = "Hello world!😀😃";
        const expectedOutput = "Hello world!😀😃";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });

    it('should handle emojis in the middle of the text', () => {
        const inputText = "Hello 😀world😃!";
        const expectedOutput = "Hello world!😀😃";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });

    it('should handle text with mixed characters and emojis', () => {
        const inputText = "Hi! 😀 How are you? 😃";
        const expectedOutput = "Hi!  How are you? 😀😃";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });
});
```

### Explanation:
1. **Import Statement**: The `moveEmojisToEnd` function is imported from the appropriate module.
2. **Describe Block**: The `describe` block is used to group the test cases under a descriptive name.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Expect Assertions**: The `expect` function is used with `toEqual` to assert the equality of the output with the expected value.

### Example Usage
To run these tests, you would need to have Jest installed and configured in your project. Here’s how you can set up Jest and run the tests:

1. **Install Jest**:
   ```sh
   npm install --save-dev jest ts-jest @types/jest
   ```

2. **Configure Jest**:
   Add the following configuration to your `tsconfig.json` file:
   ```json
   {
     "compilerOptions": {
       "module": "commonjs",
       "esModuleInterop": true,
       "target": "es6",
       "moduleResolution": "node",
       "sourceMap": true,
       "outDir": "./dist",
       "baseUrl": "./src",
       "incremental": true,
       "strict": true,
       "jsx": "react"
     },
     "include": ["src/**/*"],
     "exclude": ["node_modules"]
   }
   ```

   Add the following configuration to your `jest.config.js` file:
   ```javascript
   module.exports = {
     preset: 'ts-jest',
     testEnvironment: 'node',
     roots: ['<rootDir>/src'],
     transform: {
       '^.+\\.tsx?$': 'ts-jest'
     },
     testRegex: '.*\\.test\\.tsx?$',
     moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
   };
   ```

3. **Run Tests**:
   Add a script to your `package.json` to run the tests:
   ```json
   "scripts": {
     "test": "jest"
   }
   ```

   Run the tests:
   ```sh
   npm test
   ```

This setup ensures that the Jest tests are properly configured and run as expected.