Sure! Here's how you can convert your Python unittest test class to a TypeScript test case using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

function moveEmojisToEnd(text: string): string {
    /**
     * Move the emoj expression in the string to the end of the text
     *
     * @param {string} text - The input string containing text and possibly emojis.
     * @returns {string} - The modified string with all emojis moved to the end.
     */
    const emojiRegex = /[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu;
    const emojis = text.match(emojiRegex);
    const nonEmojis = text.replace(emojiRegex, '');
    return nonEmojis + (emojis ? emojis.join('') : '');
}

describe('moveEmojisToEnd', () => {
    it('should move emojis to the end of the string', () => {
        expect(moveEmojisToEnd('Hello, World! 😊')).toBe('Hello, World! 😊');
        expect(moveEmojisToEnd('Hello, 🌍! 😊')).toBe('Hello, ! 🌍😊');
        expect(moveEmojisToEnd('Hello, 🌍! 🌐')).toBe('Hello, ! 🌍🌐');
        expect(moveEmojisToEnd('Hello, 🌍! 😀')).toBe('Hello, ! 😀🌍');
        expect(moveEmojisToEnd('Hello, 🌍! 😊😀')).toBe('Hello, ! 😊😀🌍');
        expect(moveEmojisToEnd('Hello, 🌍! 😊😀🙂')).toBe('Hello, ! 😊😀🙂🌍');
    });

    it('should handle strings without emojis', () => {
        expect(moveEmojisToEnd('Hello, World! ')).toBe('Hello, World! ');
        expect(moveEmojisToEnd('Hello, World!')).toBe('Hello, World!');
        expect(moveEmojisToEnd('Hello, World! ')).toBe('Hello, World! ');
        expect(moveEmojisToEnd('Hello, World!')).toBe('Hello, World!');
    });
});
```

In this TypeScript code, we define the `moveEmojisToEnd` function and then write a Jest test suite to verify its behavior. The `describe` function is used to group related tests together, and the `it` function is used to define individual test cases. The `expect` function is used to assert that the output of the `moveEmojisToEnd` function matches the expected result.