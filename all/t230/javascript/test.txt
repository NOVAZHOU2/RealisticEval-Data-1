Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The structure and functionality of the tests will be preserved, and all assertions will be mapped to their appropriate Jest equivalents.

### Python Unittest Code

```python
import unittest

class TestMoveEmojisToEnd(unittest.TestCase):

    def test_no_emojis(self):
        # Case: String with no emojis
        input_text = "This is a test."
        expected_output = "This is a test."
        self.assertEqual(move_emojis_to_end(input_text), expected_output)

    def test_all_emojis(self):
        # Case: String with only emojis
        input_text = "😀😃😄😁"
        expected_output = "😀😃😄😁"
        self.assertEqual(move_emojis_to_end(input_text), expected_output)

    def test_emojis_at_start(self):
        # Case: Emojis at the start of the text
        input_text = "😀😃Hello world!"
        expected_output = "Hello world!😀😃"
        self.assertEqual(move_emojis_to_end(input_text), expected_output)

    def test_emojis_at_end(self):
        # Case: Emojis already at the end of the text
        input_text = "Hello world!😀😃"
        expected_output = "Hello world!😀😃"
        self.assertEqual(move_emojis_to_end(input_text), expected_output)

    def test_emojis_in_middle(self):
        # Case: Emojis in the middle of the text
        input_text = "Hello 😀world😃!"
        expected_output = "Hello world!😀😃"
        self.assertEqual(move_emojis_to_end(input_text), expected_output)

    def test_mixed_characters(self):
        # Case: Text with mixed characters and emojis
        input_text = "Hi! 😀 How are you? 😃"
        expected_output = "Hi!  How are you? 😀😃"
        self.assertEqual(move_emojis_to_end(input_text), expected_output)
```

### Equivalent Jest Test Suite

```javascript
const { moveEmojisToEnd } = require('./path/to/moveEmojisToEnd'); // Import the function

describe('TestMoveEmojisToEnd', () => {
    it('should handle a string with no emojis', () => {
        const inputText = "This is a test.";
        const expectedOutput = "This is a test.";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });

    it('should handle a string with only emojis', () => {
        const inputText = "😀😃😄😁";
        const expectedOutput = "😀😃😄😁";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });

    it('should handle emojis at the start of the text', () => {
        const inputText = "😀😃Hello world!";
        const expectedOutput = "Hello world!😀😃";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });

    it('should handle emojis already at the end of the text', () => {
        const inputText = "Hello world!😀😃";
        const expectedOutput = "Hello world!😀😃";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });

    it('should handle emojis in the middle of the text', () => {
        const inputText = "Hello 😀world😃!";
        const expectedOutput = "Hello world!😀😃";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });

    it('should handle text with mixed characters and emojis', () => {
        const inputText = "Hi! 😀 How are you? 😃";
        const expectedOutput = "Hi!  How are you? 😀😃";
        expect(moveEmojisToEnd(inputText)).toEqual(expectedOutput);
    });
});
```

### Explanation:
1. **Import Function**:
   - The `moveEmojisToEnd` function is imported from the appropriate module.

2. **Describe Block**:
   - The `describe` block groups the test cases together under a descriptive name (`TestMoveEmojisToEnd`).

3. **It Blocks**:
   - Each `it` block represents a specific test case.
   - The test descriptions are provided within the `it` blocks.

4. **Expect Assertions**:
   - The `expect` function is used to assert the expected output of the `moveEmojisToEnd` function.
   - `toEqual` is used to check if the actual output matches the expected output.

5. **Test Cases**:
   - Each test case is structured similarly to the Python unittest cases, with input and expected output clearly defined.

This Jest test suite ensures that the functionality and logic of the tests are maintained, and all assertions are mapped appropriately to Jest equivalents.