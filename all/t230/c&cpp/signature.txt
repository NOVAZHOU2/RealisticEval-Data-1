Here's how you could write the equivalent C++ function using regex:

```cpp
#include <regex>
#include <string>

std::string moveEmojisToEnd(const std::string& text) {
    /*
    Move the emoj expression in the string to the end of the text

    Args:
        text (const std::string&): The input string containing text and possibly emojis.

    Returns:
        std::string: The modified string with all emojis moved to the end.
    */

    // Regex pattern to match any emoji character
    std::regex emojiPattern(R"([\x{1F600}-\x{1F64F}\x{1F300}-\x{1F5FF}\x{1F680}-\x{1F6FF}\x{2600}-\x{26FF}\x{2700}-\x{27BF}])", std::regex_constants::icase);

    // Find all matches in the string
    std::sregex_iterator iter(text.begin(), text.end(), emojiPattern);
    std::sregex_iterator end;

    // Create a new string with only non-emoji characters
    std::string result;
    for (; iter != end; ++iter)
        result += text.substr(iter->position() + iter->length());

    // Append all found emojis at the end
    while (iter != end) {
        result += (*iter)[0];
        ++iter;
    }

    return result;
}
```

This function uses regular expressions to find all emojis in the given string, then constructs a new string without them, appending the emojis to the end of the new string. Please note that the range for emojis is simplified and might not cover all possible emojis. Also, it assumes that your environment supports UTF-8 encoding.