Sure! Below is how you can translate the Python `unittest` test class to a TypeScript test case using Jest:

```typescript
// Import necessary packages
import { expect } from '@jest/globals';

// Function to be tested
function floatToRgb(value: number): [number, number, number] {
    /**
     * Convert a floating point number between 0 and 1 to a color from red to green in the color format RGB
     * @param value - A float between 0 and 1.
     * @returns A tuple representing the RGB color.
     */
    if (value < 0 || value > 1) {
        throw new Error('Value must be between 0 and 1');
    }
    const r = Math.floor(255 * (1 - value));
    const g = Math.floor(255 * value);
    return [r, g, 0];
}

// Test cases using Jest
describe('floatToRgb', () => {
    it('should convert 0 to red', () => {
        expect(floatToRgb(0)).toEqual([255, 0, 0]);
    });

    it('should convert 0.5 to yellow', () => {
        expect(floatToRgb(0.5)).toEqual([128, 128, 0]);
    });

    it('should convert 1 to green', () => {
        expect(floatToRgb(1)).toEqual([0, 255, 0]);
    });

    it('should throw an error for values outside of 0-1 range', () => {
        expect(() => floatToRgb(-0.1)).toThrowError('Value must be between 0 and 1');
        expect(() => floatToRgb(1.1)).toThrowError('Value must be between 0 and 1');
    });
});
```

### Explanation:
1. **Function Definition**: The function `floatToRgb` is defined to take a floating-point number between 0 and 1 and returns an RGB tuple.
2. **Test Suite with Jest**:
   - We use `describe` to group related tests together.
   - Each test case is defined using `it`.
   - We use `expect` along with matchers like `toEqual` and `toThrowError` to assert the expected outcomes.
3. **Error Handling**: The test checks that the function throws an error when the input is outside the valid range (less than 0 or greater than 1).

Make sure you have Jest installed in your project. You can install it using npm or yarn:

```bash
npm install --save-dev jest
```

or

```bash
yarn add --dev jest
```

Then, you can run your tests using:

```bash
npx jest
```

or

```bash
yarn jest
```