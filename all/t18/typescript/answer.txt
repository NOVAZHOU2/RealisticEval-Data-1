Certainly! Below is the equivalent TypeScript code for the provided Python function `float_to_rgb`. The TypeScript version will include proper type definitions and ensure that the functionality remains consistent:

```typescript
function floatToRGB(value: number): [number, number, number] {
    /**
     * Convert a floating-point number between 0 and 1 to a color from red to green in RGB format.
     *
     * @param value - A float between 0 and 1.
     * @returns A tuple representing the RGB color.
     */
    if (!(0.0 <= value && value <= 1.0)) {
        throw new Error("Value must be between 0 and 1 inclusive.");
    }

    // Calculate the red and green components
    const red = Math.floor((1.0 - value) * 255);
    const green = Math.floor(value * 255);

    // Blue component is always 0 for the red-to-green gradient
    const blue = 0;

    return [red, green, blue];
}

// Example usage
console.log(floatToRGB(0.5)); // Output: [127, 127, 0]
```

### Explanation:
1. **Function Definition**: The function `floatToRGB` is defined with a parameter of type `number` and returns a tuple `[number, number, number]`.
2. **Type Checking**: The condition `(0.0 <= value && value <= 1.0)` ensures that the input value is within the specified range. If it is not, an `Error` is thrown.
3. **Calculation**: The red and green components are calculated using `Math.floor` to ensure they are integers.
4. **Return Value**: The function returns a tuple `[red, green, blue]` representing the RGB color.

This TypeScript code maintains the same functionality and logic as the original Python code, while adhering to TypeScript's static type system.