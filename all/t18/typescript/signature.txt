Certainly! Below is the equivalent TypeScript code for the provided Python function `float_to_rgb`, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Converts a floating-point number between 0 and 1 to a color from red to green in the RGB format.
 * 
 * @param value - A float between 0 and 1.
 * @returns A tuple representing the RGB color.
 */
function floatToRGB(value: number): [number, number, number] {
    if (!(0.0 <= value && value <= 1.0)) {
        throw new Error("Value must be between 0 and 1 inclusive.");
    }

    // Calculate the red and green components
    const red = Math.floor((1.0 - value) * 255);
    const green = Math.floor(value * 255);

    // Blue component is always 0 for the red-to-green gradient
    const blue = 0;

    return [red, green, blue];
}

// Example usage
console.log(floatToRGB(0.5)); // Output: [127, 127, 0]
```

### Explanation:
1. **Function Definition**: The function `floatToRGB` is defined with a parameter of type `number` and returns a tuple `[number, number, number]`.
2. **JSDoc Documentation**:
   - The JSDoc comment block `/** */` is used to provide detailed documentation.
   - The `@param` tag is used to describe the parameter `value`.
   - The `@returns` tag is used to describe the return value.
3. **Type Checking**: The condition `(0.0 <= value && value <= 1.0)` ensures that the input value is within the specified range. If it is not, an `Error` is thrown.
4. **Calculation**: The red and green components are calculated using `Math.floor` to ensure they are integers.
5. **Return Value**: The function returns a tuple `[red, green, blue]` representing the RGB color.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and using appropriate documentation comments.