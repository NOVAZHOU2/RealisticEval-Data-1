Sure, here's how you can translate your Python unittest test class into a Java JUnit test case:

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    @Test
    public void testFloatToRGB() {
        // Assuming floatToRGB method exists in some class, let's say ColorConverter
        ColorConverter converter = new ColorConverter();

        // Test cases
        assertEquals(converter.floatToRGB(0.0f), new int[]{255, 0, 0}, "Red at 0");
        assertEquals(converter.floatToRGB(0.5f), new int[]{128, 128, 0}, "Green at 0.5");
        assertEquals(converter.floatToRGB(1.0f), new int[]{0, 255, 0}, "Green at 1");

        // Additional test cases can be added here
    }
}

class ColorConverter {
    /**
     * Convert a floating point number between 0 and 1 to a color from red to green in the color format RGB
     *
     * @param value A float between 0 and 1.
     * @return An array of integers representing the RGB color.
     */
    public int[] floatToRGB(float value) {
        if (value < 0 || value > 1) {
            throw new IllegalArgumentException("Value must be between 0 and 1");
        }

        int r = (int) (255 * (1 - value));
        int g = (int) (255 * value);
        return new int[]{r, g, 0};
    }
}
```

In this Java example:
- The `ColorConverter` class contains the `floatToRGB` method which performs the conversion.
- The `Tester` class contains a JUnit test method `testFloatToRGB` that tests the `floatToRGB` method with different values.
- The `assertEquals` method from JUnit is used to verify that the output of `floatToRGB` matches the expected results.

Make sure to replace the placeholder `ColorConverter` class with the actual implementation or adjust the package and class names accordingly.