Certainly! I'll convert the Python function signature and comments into equivalent JavaScript syntax, including JSDoc comments for documentation. Hereâ€™s the JavaScript version:

```javascript
/**
 * Converts a floating-point number between 0 and 1 to a color from red to green in the RGB format.
 * 
 * @param {number} value - A float between 0 and 1.
 * @returns {Array} An array representing the RGB color.
 */
function floatToRGB(value) {
    if (!(0.0 <= value && value <= 1.0)) {
        throw new Error("Value must be between 0 and 1 inclusive.");
    }

    // Calculate the red and green components
    const red = Math.floor((1.0 - value) * 255);
    const green = Math.floor(value * 255);

    // Blue component is always 0 for the red-to-green gradient
    const blue = 0;

    return [red, green, blue];
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `def float_to_rgb(value: float) -> tuple:` is converted to `function floatToRGB(value)` in JavaScript.
   - The return type annotation `-> tuple` is not directly supported in JavaScript, but it is documented using JSDoc.

2. **JSDoc Comments**:
   - The Python docstring is converted to JSDoc comments.
   - The `Args` section is converted to `@param`.
   - The `Returns` section is converted to `@returns`.

3. **Error Handling**:
   - The Python `raise ValueError` is converted to `throw new Error` in JavaScript.

4. **Calculation**:
   - The calculation of `red` and `green` components uses `Math.floor` to ensure integer values.

5. **Return Value**:
   - The function returns an array `[red, green, blue]` as the RGB color representation.

This JavaScript function should maintain the same functionality and structure as the original Python function.