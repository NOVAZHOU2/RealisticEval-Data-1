Sure! Below is how you can translate the given Python `unittest` test class into a JavaScript test case using Jest:

```javascript
// Assuming the function floatToRgb is defined somewhere in your project
const { floatToRgb } = require('./path-to-your-function');

describe('floatToRgb', () => {
    it('should convert a float between 0 and 1 to an RGB color', () => {
        // Test with a value close to 0
        expect(floatToRgb(0)).toEqual([255, 0, 0]); // Red

        // Test with a value close to 0.5
        expect(floatToRgb(0.5)).toEqual([128, 128, 0]); // Yellow

        // Test with a value close to 1
        expect(floatToRgb(1)).toEqual([0, 255, 0]); // Green
    });

    it('should handle edge cases', () => {
        // Test with value exactly 0
        expect(floatToRgb(0)).toEqual([255, 0, 0]);

        // Test with value exactly 1
        expect(floatToRgb(1)).toEqual([0, 255, 0]);
    });

    it('should throw an error for values outside the range [0, 1]', () => {
        expect(() => floatToRgb(-0.1)).toThrowError();
        expect(() => floatToRgb(1.1)).toThrowError();
    });
});
```

### Explanation:
- **`describe`**: Groups related tests together.
- **`it`**: Defines a single test case.
- **`expect`**: Used to make assertions about the output of the function.
- **`toEqual`**: Checks if the expected result matches the actual result.
- **`toThrowError`**: Checks if the function throws an error when called with invalid input.

Make sure to replace `'./path-to-your-function'` with the actual path to where your `floatToRgb` function is defined.