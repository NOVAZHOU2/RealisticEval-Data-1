Certainly! I’ll convert the given Python unittest test class into an equivalent Jest test suite. I will ensure that the functionality and logic of the tests are maintained, and any necessary changes due to language differences will be documented.

Here’s the equivalent Jest test suite:

```javascript
const floatToRGB = require('./floatToRGB'); // Assuming floatToRGB is defined in a separate file

describe('TestFloatToRGB', () => {
    it('should return pure red for value 0.0', () => {
        const result = floatToRGB(0.0);
        expect(result).toEqual([255, 0, 0]);
    });

    it('should return pure green for value 1.0', () => {
        const result = floatToRGB(1.0);
        expect(result).toEqual([0, 255, 0]);
    });

    it('should return yellow (equal mix of red and green) for value 0.5', () => {
        const result = floatToRGB(0.5);
        expect(result).toEqual([127, 127, 0]);
    });

    it('should return more red than green for value 0.25', () => {
        const result = floatToRGB(0.25);
        expect(result).toEqual([191, 63, 0]);
    });

    it('should throw an error for value outside the range [0, 1]', () => {
        expect(() => floatToRGB(1.5)).toThrow('Value must be between 0 and 1 inclusive.');
    });
});
```

### Explanation:
1. **Importing the Function**:
   - We assume that the `floatToRGB` function is defined in a separate file (`floatToRGB.js`), and we import it using `require('./floatToRGB')`.

2. **Describe Block**:
   - The `unittest.TestCase` class is replaced with a `describe` block in Jest to group the tests.

3. **Test Cases**:
   - Each `test` method in the Python `unittest.TestCase` is converted to an `it` block in Jest.
   - The test descriptions are provided as strings within the `it` blocks.

4. **Assertions**:
   - `self.assertEqual` is replaced with `expect(result).toEqual` in Jest.
   - For the invalid value test, `self.assertRaises` is replaced with `expect(() => ...).toThrow`.

5. **Error Handling**:
   - The `toThrow` matcher is used to check if the function throws the expected error message.

### File Structure:
- **floatToRGB.js**:
  ```javascript
  function floatToRGB(value) {
      if (!(0.0 <= value && value <= 1.0)) {
          throw new Error("Value must be between 0 and 1 inclusive.");
      }

      const red = Math.floor((1.0 - value) * 255);
      const green = Math.floor(value * 255);
      const blue = 0;

      return [red, green, blue];
  }

  module.exports = floatToRGB;
  ```

- **testFloatToRGB.js**:
  ```javascript
  const floatToRGB = require('./floatToRGB');

  describe('TestFloatToRGB', () => {
      it('should return pure red for value 0.0', () => {
          const result = floatToRGB(0.0);
          expect(result).toEqual([255, 0, 0]);
      });

      it('should return pure green for value 1.0', () => {
          const result = floatToRGB(1.0);
          expect(result).toEqual([0, 255, 0]);
      });

      it('should return yellow (equal mix of red and green) for value 0.5', () => {
          const result = floatToRGB(0.5);
          expect(result).toEqual([127, 127, 0]);
      });

      it('should return more red than green for value 0.25', () => {
          const result = floatToRGB(0.25);
          expect(result).toEqual([191, 63, 0]);
      });

      it('should throw an error for value outside the range [0, 1]', () => {
          expect(() => floatToRGB(1.5)).toThrow('Value must be between 0 and 1 inclusive.');
      });
  });
  ```

This Jest test suite maintains the same functionality and structure as the original Python unittest test class.