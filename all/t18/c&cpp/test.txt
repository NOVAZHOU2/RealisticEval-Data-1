To convert the provided Python unittest test class to a C++ Catch2 test case, you first need to define the function `float_to_rgb` in C++. Then, you can create a corresponding test case using Catch2. Below is an example of how you might do this:

### Step 1: Define the Function `float_to_rgb` in C++
First, let's define the `float_to_rgb` function in C++:

```cpp
#include <tuple>
#include <cmath>

std::tuple<int, int, int> float_to_rgb(float value) {
    if (value < 0 || value > 1) {
        throw std::out_of_range("Value must be between 0 and 1");
    }

    // Convert the float value to a grayscale value (0-255)
    int gray = static_cast<int>(value * 255);

    // Return the RGB values for a grayscale image
    return {gray, gray, gray};
}
```

### Step 2: Create a Catch2 Test Case
Now, let's write a Catch2 test case to verify that `float_to_rgb` works correctly:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file

#include "catch.hpp"
#include <tuple>

// Forward declaration of the function
std::tuple<int, int, int> float_to_rgb(float value);

TEST_CASE("Convert float to RGB", "[float_to_rgb]") {
    SECTION("Value at 0 should return black") {
        auto result = float_to_rgb(0.0f);
        REQUIRE(std::get<0>(result) == 0);
        REQUIRE(std::get<1>(result) == 0);
        REQUIRE(std::get<2>(result) == 0);
    }

    SECTION("Value at 0.5 should return gray") {
        auto result = float_to_rgb(0.5f);
        REQUIRE(std::get<0>(result) == 127);
        REQUIRE(std::get<1>(result) == 127);
        REQUIRE(std::get<2>(result) == 127);
    }

    SECTION("Value at 1 should return white") {
        auto result = float_to_rgb(1.0f);
        REQUIRE(std::get<0>(result) == 255);
        REQUIRE(std::get<1>(result) == 255);
        REQUIRE(std::get<2>(result) == 255);
    }

    SECTION("Negative value should throw exception") {
        REQUIRE_THROWS_AS(float_to_rgb(-0.1f), std::out_of_range);
    }

    SECTION("Value greater than 1 should throw exception") {
        REQUIRE_THROWS_AS(float_to_rgb(1.1f), std::out_of_range);
    }
}
```

### Explanation
1. **Function Definition**: The `float_to_rgb` function converts a float value between 0 and 1 to a grayscale RGB value.
2. **Catch2 Test Case**:
   - `SECTION`: Defines different scenarios to test the function.
   - `REQUIRE`: Checks if the returned tuple matches the expected RGB values.
   - `REQUIRE_THROWS_AS`: Checks if the function throws the expected exception when given invalid input.

This setup ensures that your C++ function behaves as expected under various conditions.