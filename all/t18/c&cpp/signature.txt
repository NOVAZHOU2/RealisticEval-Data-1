Sure, here is the equivalent C++ function signature with the same comments:

```cpp
/**
 * Convert a floating point number between 0 and 1 to a color from red to green in the color format RGB.
 *
 * @param value A float between 0 and 1.
 * @return A tuple representing the RGB color.
 */
std::tuple<int, int, int> floatToRGB(float value);
```

In C++, we typically return tuples using `std::tuple` or structures. If you prefer to use a structure for better readability, it could look like this:

```cpp
struct RGBColor {
    int r;
    int g;
    int b;
};

/**
 * Convert a floating point number between 0 and 1 to a color from red to green in the color format RGB.
 *
 * @param value A float between 0 and 1.
 * @return An RGBColor structure representing the RGB color.
 */
RGBColor floatToRGB(float value);
```

Both approaches will achieve the same result, but using a struct can make the code more readable and intuitive.