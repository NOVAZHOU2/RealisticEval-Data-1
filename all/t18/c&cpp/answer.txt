Sure! Here is the equivalent C++ code for your Python function:

```cpp
#include <iostream>
#include <tuple>

std::tuple<int, int, int> floatToRGB(float value) {
    if (value < 0 || value > 1) {
        throw std::invalid_argument("Value must be between 0 and 1.");
    }

    int r = static_cast<int>(255 * (1 - value));
    int g = static_cast<int>(255 * value);
    int b = 0;

    return {r, g, b};
}

int main() {
    try {
        auto [r, g, b] = floatToRGB(0.5f);
        std::cout << "RGB: (" << r << ", " << g << ", " << b << ")" << std::endl;
    } catch (const std::invalid_argument &e) {
        std::cerr << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
- The `floatToRGB` function takes a floating-point number `value` between 0 and 1 and converts it to an RGB color.
- If the input value is outside the valid range, it throws an `std::invalid_argument` exception.
- The RGB values are calculated based on the formula provided in the Python code.
- The `main` function demonstrates how to call `floatToRGB` and prints the resulting RGB tuple.

This C++ code should work similarly to your original Python function.