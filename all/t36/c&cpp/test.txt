Here's how you can convert your Python unittest test class into a C++ Catch2 test case:

```cpp
#include <vector>
#include <algorithm>
#include "catch.hpp"

// Function prototype for floyd_warshall_shortest_paths
std::vector<std::vector<double>> floyd_warshall_shortest_paths(const std::vector<std::vector<double>>& adjacency_matrix);

TEST_CASE("Floyd Warshall Shortest Paths", "[floyd-warshall]")
{
    // Test case 1: Graph with negative cycle
    std::vector<std::vector<double>> adj_matrix_1 = {
        {0, 3, std::numeric_limits<double>::infinity(), 5},
        {2, 0, std::numeric_limits<double>::infinity(), 4},
        {std::numeric_limits<double>::infinity(), -1, 0, std::numeric_limits<double>::infinity()},
        {std::numeric_limits<double>::infinity(), std::numeric_limits<double>::infinity(), 2, 0}
    };

    std::vector<std::vector<double>> expected_result_1 = {
        {0, 2, -2, 0},
        {1, 0, -1, 1},
        {std::numeric_limits<double>::infinity(), -1, 0, std::numeric_limits<double>::infinity()},
        {std::numeric_limits<double>::infinity(), std::numeric_limits<double>::infinity(), 0, 0}
    };

    REQUIRE(floyd_warshall_shortest_paths(adj_matrix_1) == expected_result_1);

    // Test case 2: Graph without negative cycle
    std::vector<std::vector<double>> adj_matrix_2 = {
        {0, 7, std::numeric_limits<double>::infinity(), 8},
        {std::numeric_limits<double>::infinity(), 0, 9, std::numeric_limits<double>::infinity()},
        {std::numeric_limits<double>::infinity(), std::numeric_limits<double>::infinity(), 0, 6},
        {2, std::numeric_limits<double>::infinity(), std::numeric_limits<double>::infinity(), 0}
    };

    std::vector<std::vector<double>> expected_result_2 = {
        {0, 7, 16, 9},
        {std::numeric_limits<double>::infinity(), 0, 10, std::numeric_limits<double>::infinity()},
        {std::numeric_limits<double>::infinity(), std::numeric_limits<double>::infinity(), 0, 6},
        {2, 9, 7, 0}
    };

    REQUIRE(floyd_warshall_shortest_paths(adj_matrix_2) == expected_result_2);
}

// Implementation of floyd_warshall_shortest_paths function
std::vector<std::vector<double>> floyd_warshall_shortest_paths(const std::vector<std::vector<double>>& adjacency_matrix)
{
    // Your implementation goes here...
}
```

This C++ code uses Catch2 for testing and includes two test cases that mirror the functionality of your original Python unittest test class. Note that the `floyd_warshall_shortest_paths` function needs to be implemented in the provided space.