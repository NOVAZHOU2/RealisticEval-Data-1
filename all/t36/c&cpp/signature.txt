```cpp
#include <vector>
#include <limits>

/**
 * Implements Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices
 * in a graph represented by an adjacency matrix.
 *
 * @param adjacencyMatrix A 2D vector representing the graph, where adjacencyMatrix[i][j] is the weight of the edge
 *                        from vertex i to vertex j. If there is no edge, the weight should be represented as std::numeric_limits<int>::max().
 * @return A 2D vector representing the shortest paths between all pairs of vertices. shortestPaths[i][j] will hold the shortest distance
 *         from vertex i to vertex j.
 */
std::vector<std::vector<int>> floydWarshallShortestPaths(const std::vector<std::vector<int>>& adjacencyMatrix) {
    int n = adjacencyMatrix.size();
    std::vector<std::vector<int>> shortestPaths(n, std::vector<int>(n, std::numeric_limits<int>::max()));

    // Initialize the shortest paths with the given adjacency matrix values.
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (adjacencyMatrix[i][j] != std::numeric_limits<int>::max()) {
                shortestPaths[i][j] = adjacencyMatrix[i][j];
            }
        }
    }

    // Floyd-Warshall algorithm to compute the shortest paths.
    for (int k = 0; k < n; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (shortestPaths[i][k] != std::numeric_limits<int>::max() && 
                    shortestPaths[k][j] != std::numeric_limits<int>::max() &&
                    shortestPaths[i][k] + shortestPaths[k][j] < shortestPaths[i][j]) {
                    shortestPaths[i][j] = shortestPaths[i][k] + shortestPaths[k][j];
                }
            }
        }
    }

    return shortestPaths;
}
```
This C++ function `floydWarshallShortestPaths` implements the Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices in a weighted graph represented by an adjacency matrix. The function takes a 2D vector `adjacencyMatrix` as input and returns another 2D vector `shortestPaths` where each element `shortestPaths[i][j]` contains the shortest path distance from vertex `i` to vertex `j`. If there's no direct or indirect path between two vertices, it remains at its initial value of `std::numeric_limits<int>::max()` indicating infinity.