Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The structure and functionality of the tests are preserved, and all assertions are mapped to their appropriate Jest equivalents.

### Python Unittest Code:
```python
import unittest

class TestFloydWarshallShortestPaths(unittest.TestCase):
    def test_basic_functionality(self):
        # Basic test case with a simple graph
        matrix = [
            [0, 3, float('inf'), 7],
            [8, 0, 2, float('inf')],
            [5, float('inf'), 0, 1],
            [2, float('inf'), float('inf'), 0]
        ]
        expected = [
            [0, 3, 5, 6],
            [5, 0, 2, 3],
            [3, 6, 0, 1],
            [2, 5, 7, 0]
        ]
        result = floyd_warshall_shortest_paths(matrix)
        self.assertEqual(result, expected, "Basic functionality test failed")

    def test_single_vertex_graph(self):
        # Test case with a single vertex graph (1x1 matrix)
        matrix = [
            [0]
        ]
        expected = [
            [0]
        ]
        result = floyd_warshall_shortest_paths(matrix)
        self.assertEqual(result, expected, "Single vertex graph test failed")

    def test_two_vertices_graph(self):
        # Test case with two vertices
        matrix = [
            [0, 1],
            [1, 0]
        ]
        expected = [
            [0, 1],
            [1, 0]
        ]
        result = floyd_warshall_shortest_paths(matrix)
        self.assertEqual(result, expected, "Two vertices graph test failed")

    def test_large_infinite_weights(self):
        # Test case with infinite weights
        matrix = [
            [0, float('inf')],
            [float('inf'), 0]
        ]
        expected = [
            [0, float('inf')],
            [float('inf'), 0]
        ]
        result = floyd_warshall_shortest_paths(matrix)
        self.assertEqual(result, expected, "Large infinite weights test failed")

    def test_negative_cycle(self):
        # Test case with a negative cycle
        matrix = [
            [0, 1, float('inf')],
            [float('inf'), 0, -1],
            [-1, float('inf'), 0]
        ]
        expected = [
            [-1, 0, -1],
            [-2, -1, -2],
            [-2, -1, -2]
        ]
        result = floyd_warshall_shortest_paths(matrix)
        self.assertEqual(result, expected, "Negative cycle test failed")
```

### Equivalent Jest Test Suite:
```javascript
const floydWarshallShortestPaths = require('./floydWarshallShortestPaths'); // Import the function to test

describe('TestFloydWarshallShortestPaths', () => {
    it('should handle basic functionality with a simple graph', () => {
        const matrix = [
            [0, 3, Infinity, 7],
            [8, 0, 2, Infinity],
            [5, Infinity, 0, 1],
            [2, Infinity, Infinity, 0]
        ];
        const expected = [
            [0, 3, 5, 6],
            [5, 0, 2, 3],
            [3, 6, 0, 1],
            [2, 5, 7, 0]
        ];
        const result = floydWarshallShortestPaths(matrix);
        expect(result).toEqual(expected);
    });

    it('should handle a single vertex graph (1x1 matrix)', () => {
        const matrix = [
            [0]
        ];
        const expected = [
            [0]
        ];
        const result = floydWarshallShortestPaths(matrix);
        expect(result).toEqual(expected);
    });

    it('should handle a two vertices graph', () => {
        const matrix = [
            [0, 1],
            [1, 0]
        ];
        const expected = [
            [0, 1],
            [1, 0]
        ];
        const result = floydWarshallShortestPaths(matrix);
        expect(result).toEqual(expected);
    });

    it('should handle large infinite weights', () => {
        const matrix = [
            [0, Infinity],
            [Infinity, 0]
        ];
        const expected = [
            [0, Infinity],
            [Infinity, 0]
        ];
        const result = floydWarshallShortestPaths(matrix);
        expect(result).toEqual(expected);
    });

    it('should handle a negative cycle', () => {
        const matrix = [
            [0, 1, Infinity],
            [Infinity, 0, -1],
            [-1, Infinity, 0]
        ];
        const expected = [
            [-1, 0, -1],
            [-2, -1, -2],
            [-2, -1, -2]
        ];
        const result = floydWarshallShortestPaths(matrix);
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Importing the Function**: The `floydWarshallShortestPaths` function is imported at the beginning of the test file.
2. **Describe Block**: The `describe` block groups all the test cases under a common description.
3. **It Blocks**: Each `it` block represents a specific test case and includes a descriptive message.
4. **Assertions**: The `expect` function is used to assert the equality of the results with the expected values.
   - `Infinity` is used to represent `float('inf')` in JavaScript.
   - `expect(result).toEqual(expected)` is used to check the equality of the matrices.

This ensures that the functionality and logic of the tests are preserved, and the structure is clear and follows Jest conventions.