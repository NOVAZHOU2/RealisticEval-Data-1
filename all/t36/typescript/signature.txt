Certainly! Below is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Implements the Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices
 * in a graph represented by an adjacency matrix.
 *
 * @param adjacencyMatrix - The adjacency matrix representing the graph,
 * where adjacencyMatrix[i][j] is the weight of the edge from vertex i to vertex j. If there is
 * no edge, the weight should be represented as Infinity.
 * @returns The matrix representing the shortest paths between all pairs of vertices.
 * shortestPaths[i][j] will hold the shortest distance from vertex i to vertex j.
 */
function floydWarshallShortestPaths(adjacencyMatrix: number[][]): number[][] {
    const numVertices = adjacencyMatrix.length;

    function recursiveFloydWarshall(k: number): number[][] {
        /**
         * Recursive helper function for the Floyd-Warshall algorithm.
         *
         * @param k - The current intermediate vertex being considered.
         * @returns The updated adjacency matrix after considering the current intermediate vertex.
         */
        if (k === numVertices) {
            return adjacencyMatrix;
        }
        for (let i = 0; i < numVertices; i++) {
            for (let j = 0; j < numVertices; j++) {
                // Update the distance to the minimum of the current or via vertex k
                adjacencyMatrix[i][j] = Math.min(adjacencyMatrix[i][j], adjacencyMatrix[i][k] + adjacencyMatrix[k][j]);
            }
        }
        return recursiveFloydWarshall(k + 1);
    }

    return recursiveFloydWarshall(0);
}

// Example usage
const adjacencyMatrix: number[][] = [
    [0, 3, Infinity, 7],
    [8, 0, 2, Infinity],
    [5, Infinity, 0, 1],
    [2, Infinity, Infinity, 0]
];

console.log(floydWarshallShortestPaths(adjacencyMatrix));
```

### Explanation:
1. **Function Signature**: The function signature `floyd_warshall_shortest_paths` is converted to `floydWarshallShortestPaths` to follow TypeScript naming conventions.
2. **Type Annotations**: The type `List[List[Union[int, float]]]` is translated to `number[][]` in TypeScript.
3. **JSDoc Comments**: The Python docstring is converted to JSDoc-style comments using `/** */`.
4. **Recursive Helper Function**: The `_recursive_floyd_warshall` function is renamed to `recursiveFloydWarshall` and documented using JSDoc.
5. **Math.min**: The `min` function is replaced with `Math.min` since it is a built-in JavaScript/TypeScript function.
6. **Example Usage**: An example usage is provided at the end to demonstrate how to call the function with an adjacency matrix.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and best practices.