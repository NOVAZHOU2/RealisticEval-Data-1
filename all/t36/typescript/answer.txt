Sure! Below is the equivalent TypeScript code for the provided Python function using TypeScript's type annotations:

```typescript
type Weight = number | Infinity;

function floydWarshallShortestPaths(adjacencyMatrix: Weight[][]): Weight[][] {
    /**
     * Implements Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices
     * in a graph represented by an adjacency matrix.
     *
     * @param {Weight[][]} adjacencyMatrix - The adjacency matrix representing the graph,
     * where adjacencyMatrix[i][j] is the weight of the edge from vertex i to vertex j. If there is
     * no edge, the weight should be represented as Infinity.
     * @returns {Weight[][]} - The matrix representing the shortest paths between all pairs of vertices.
     * shortestPaths[i][j] will hold the shortest distance from vertex i to vertex j.
     */
    
    const n = adjacencyMatrix.length;
    let shortestPaths: Weight[][] = JSON.parse(JSON.stringify(adjacencyMatrix));

    for (let k = 0; k < n; k++) {
        for (let i = 0; i < n; i++) {
            for (let j = 0; j < n; j++) {
                if (shortestPaths[i][k] !== Infinity && shortestPaths[k][j] !== Infinity) {
                    shortestPaths[i][j] = Math.min(shortestPaths[i][j], shortestPaths[i][k] + shortestPaths[k][j]);
                }
            }
        }
    }

    return shortestPaths;
}
```

### Explanation:
1. **Type Definitions**: 
   - `Weight` is defined as either a `number` or `Infinity`.
   - The function `floydWarshallShortestPaths` takes an `adjacencyMatrix` of type `Weight[][]`.

2. **Initialization**:
   - The length of the adjacency matrix is stored in `n`.
   - A copy of the `adjacencyMatrix` is made and stored in `shortestPaths`.

3. **Floyd-Warshall Algorithm**:
   - Three nested loops iterate over all possible combinations of vertices `(i, j)` and intermediate vertices `k`.
   - For each combination, it updates the `shortestPaths[i][j]` with the minimum value between its current value and the sum of `shortestPaths[i][k]` and `shortestPaths[k][j]`.

4. **Return Value**:
   - The updated `shortestPaths` matrix is returned, which contains the shortest distances between all pairs of vertices.

This TypeScript implementation closely mirrors the logic of the original Python function while adhering to TypeScript's type system.