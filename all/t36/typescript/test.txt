Certainly! Below is the equivalent TypeScript test class using Jest, which preserves the functionality and logic of the provided Python unittest class. The test cases are mapped to Jest assertions, and the necessary type annotations are included.

### TypeScript Code with Jest Tests

```typescript
import { floydWarshallShortestPaths } from './path-to-your-floyd-warshall-implementation'; // Import your implementation

describe('TestFloydWarshallShortestPaths', () => {
    it('test basic functionality', () => {
        // Basic test case with a simple graph
        const matrix = [
            [0, 3, Infinity, 7],
            [8, 0, 2, Infinity],
            [5, Infinity, 0, 1],
            [2, Infinity, Infinity, 0]
        ];
        const expected = [
            [0, 3, 5, 6],
            [5, 0, 2, 3],
            [3, 6, 0, 1],
            [2, 5, 7, 0]
        ];
        const result = floydWarshallShortestPaths(matrix);
        expect(result).toEqual(expected);
    });

    it('test single vertex graph', () => {
        // Test case with a single vertex graph (1x1 matrix)
        const matrix = [
            [0]
        ];
        const expected = [
            [0]
        ];
        const result = floydWarshallShortestPaths(matrix);
        expect(result).toEqual(expected);
    });

    it('test two vertices graph', () => {
        // Test case with two vertices
        const matrix = [
            [0, 1],
            [1, 0]
        ];
        const expected = [
            [0, 1],
            [1, 0]
        ];
        const result = floydWarshallShortestPaths(matrix);
        expect(result).toEqual(expected);
    });

    it('test large infinite weights', () => {
        // Test case with infinite weights
        const matrix = [
            [0, Infinity],
            [Infinity, 0]
        ];
        const expected = [
            [0, Infinity],
            [Infinity, 0]
        ];
        const result = floydWarshallShortestPaths(matrix);
        expect(result).toEqual(expected);
    });

    it('test negative cycle', () => {
        // Test case with a negative cycle
        const matrix = [
            [0, 1, Infinity],
            [Infinity, 0, -1],
            [-1, Infinity, 0]
        ];
        const expected = [
            [-1, 0, -1],
            [-2, -1, -2],
            [-2, -1, -2]
        ];
        const result = floydWarshallShortestPaths(matrix);
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Import Statement**: The `floydWarshallShortestPaths` function is imported from the path where it is implemented.
2. **Describe Block**: The `describe` block is used to group the test cases under a common description.
3. **It Blocks**: Each `it` block represents a test case and includes a descriptive message.
4. **Test Data**: The test data (`matrix` and `expected`) is defined within each test case.
5. **Assertions**: The `expect` function is used with `toEqual` to compare the actual result with the expected result.

### Example Implementation Path
Assuming you have the `floydWarshallShortestPaths` function implemented in a separate file, you would need to import it correctly. For example, if the function is defined in `floydWarshall.ts`, you can import it like this:

```typescript
import { floydWarshallShortestPaths } from './floydWarshall';
```

This setup ensures that the tests are structured and executed correctly using Jest, maintaining the original functionality and logic of the Python unittest class.