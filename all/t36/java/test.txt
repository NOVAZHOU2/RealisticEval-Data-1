Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class is placed in the package `org.real.temp` and named `Tester`. It includes appropriate JUnit annotations and assertion methods to ensure the functionality and logic of the tests are preserved.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Test cases for the Floyd-Warshall shortest paths algorithm.
 */
public class Tester {

    @Test
    public void testBasicFunctionality() {
        // Basic test case with a simple graph
        List<List<Double>> matrix = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0.0, 3.0, Double.POSITIVE_INFINITY, 7.0)),
            new ArrayList<>(Arrays.asList(8.0, 0.0, 2.0, Double.POSITIVE_INFINITY)),
            new ArrayList<>(Arrays.asList(5.0, Double.POSITIVE_INFINITY, 0.0, 1.0)),
            new ArrayList<>(Arrays.asList(2.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0))
        ));
        List<List<Double>> expected = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0.0, 3.0, 5.0, 6.0)),
            new ArrayList<>(Arrays.asList(5.0, 0.0, 2.0, 3.0)),
            new ArrayList<>(Arrays.asList(3.0, 6.0, 0.0, 1.0)),
            new ArrayList<>(Arrays.asList(2.0, 5.0, 7.0, 0.0))
        ));
        List<List<Double>> result = floydWarshallShortestPaths(matrix);
        assertEquals(expected, result, "Basic functionality test failed");
    }

    @Test
    public void testSingleVertexGraph() {
        // Test case with a single vertex graph (1x1 matrix)
        List<List<Double>> matrix = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0.0))
        ));
        List<List<Double>> expected = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0.0))
        ));
        List<List<Double>> result = floydWarshallShortestPaths(matrix);
        assertEquals(expected, result, "Single vertex graph test failed");
    }

    @Test
    public void testTwoVerticesGraph() {
        // Test case with two vertices
        List<List<Double>> matrix = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0.0, 1.0)),
            new ArrayList<>(Arrays.asList(1.0, 0.0))
        ));
        List<List<Double>> expected = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0.0, 1.0)),
            new ArrayList<>(Arrays.asList(1.0, 0.0))
        ));
        List<List<Double>> result = floydWarshallShortestPaths(matrix);
        assertEquals(expected, result, "Two vertices graph test failed");
    }

    @Test
    public void testLargeInfiniteWeights() {
        // Test case with infinite weights
        List<List<Double>> matrix = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0.0, Double.POSITIVE_INFINITY)),
            new ArrayList<>(Arrays.asList(Double.POSITIVE_INFINITY, 0.0))
        ));
        List<List<Double>> expected = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0.0, Double.POSITIVE_INFINITY)),
            new ArrayList<>(Arrays.asList(Double.POSITIVE_INFINITY, 0.0))
        ));
        List<List<Double>> result = floydWarshallShortestPaths(matrix);
        assertEquals(expected, result, "Large infinite weights test failed");
    }

    @Test
    public void testNegativeCycle() {
        // Test case with a negative cycle
        List<List<Double>> matrix = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0.0, 1.0, Double.POSITIVE_INFINITY)),
            new ArrayList<>(Arrays.asList(Double.POSITIVE_INFINITY, 0.0, -1.0)),
            new ArrayList<>(Arrays.asList(-1.0, Double.POSITIVE_INFINITY, 0.0))
        ));
        List<List<Double>> expected = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(-1.0, 0.0, -1.0)),
            new ArrayList<>(Arrays.asList(-2.0, -1.0, -2.0)),
            new ArrayList<>(Arrays.asList(-2.0, -1.0, -2.0))
        ));
        List<List<Double>> result = floydWarshallShortestPaths(matrix);
        assertEquals(expected, result, "Negative cycle test failed");
    }

    // Method to be tested
    private List<List<Double>> floydWarshallShortestPaths(List<List<Double>> adjacencyMatrix) {
        int numVertices = adjacencyMatrix.size();

        return _recursiveFloydWarshall(adjacencyMatrix, numVertices, 0);
    }

    private List<List<Double>> _recursiveFloydWarshall(List<List<Double>> adjacencyMatrix, int numVertices, int k) {
        if (k == numVertices) {
            return adjacencyMatrix;
        }
        for (int i = 0; i < numVertices; i++) {
            for (int j = 0; j < numVertices; j++) {
                double viaK = adjacencyMatrix.get(i).get(k) + adjacencyMatrix.get(k).get(j);
                double currentDistance = adjacencyMatrix.get(i).get(j);

                if (currentDistance > viaK) {
                    adjacencyMatrix.get(i).set(j, viaK);
                }
            }
        }
        return _recursiveFloydWarshall(adjacencyMatrix, numVertices, k + 1);
    }
}
```

### Explanation:
1. **Package and Class Definition**: The Java code starts with the package declaration `package org.real.temp;` and defines the class `Tester`.

2. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.

3. **JUnit Assertions**: The `assertEquals` method is used to assert the equality of the expected and actual results.

4. **Test Methods**:
   - `testBasicFunctionality`: Tests a basic graph with a simple adjacency matrix.
   - `testSingleVertexGraph`: Tests a single vertex graph.
   - `testTwoVerticesGraph`: Tests a graph with two vertices.
   - `testLargeInfiniteWeights`: Tests a graph with infinite weights.
   - `testNegativeCycle`: Tests a graph with a negative cycle.

5. **Helper Methods**:
   - `floydWarshallShortestPaths`: The method to be tested, which implements the Floyd-Warshall algorithm.
   - `_recursiveFloydWarshall`: A private helper method that performs the recursive part of the algorithm.

6. **Data Structures**: The adjacency matrices are represented using `List<List<Double>>`, and `Double.POSITIVE_INFINITY` is used to represent infinity.

This Java code preserves the functionality and logic of the original Python unittest class while adhering to Java's syntax and best practices.