Sure, I can help you convert your Python unittest test class into a Java JUnit test case. Below is the equivalent Java code using JUnit 5:

```java
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class Tester {

    private int[][] adjacencyMatrix;
    private double[][] expectedShortestPaths;

    @BeforeEach
    public void setUp() {
        // Initialize your adjacency matrix and expected results here
        adjacencyMatrix = new int[][]{
            {0, 3, float('inf'), 7},
            {8, 0, 2, float('inf'}),
            {float('inf'), float('inf'), 0, 1},
            {4, float('inf'), float('inf'), 0}
        };

        expectedShortestPaths = new double[][]{
            {0, 3, 5, 6},
            {5, 0, 2, 3},
            {6, 8, 0, 1},
            {4, 7, 9, 0}
        };
    }

    @Test
    public void testFloydWarshallShortestPaths() {
        double[][] actualShortestPaths = floydWarshallShortestPaths(adjacencyMatrix);

        for (int i = 0; i < actualShortestPaths.length; i++) {
            for (int j = 0; j < actualShortestPaths[i].length; j++) {
                assertEquals(expectedShortestPaths[i][j], actualShortestPaths[i][j], "Mismatch at position (" + i + ", " + j + ")");
            }
        }
    }

    private double[][] floydWarshallShortestPaths(int[][] adjacencyMatrix) {
        int n = adjacencyMatrix.length;
        double[][] shortestPaths = new double[n][n];

        // Initialize the shortest path matrix with the given adjacency matrix values
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (adjacencyMatrix[i][j] == float('inf')) {
                    shortestPaths[i][j] = Double.POSITIVE_INFINITY;
                } else {
                    shortestPaths[i][j] = adjacencyMatrix[i][j];
                }
            }
        }

        // Floyd-Warshall algorithm implementation
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    shortestPaths[i][j] = Math.min(shortestPaths[i][j], shortestPaths[i][k] + shortestPaths[k][j]);
                }
            }
        }

        return shortestPaths;
    }
}
```

### Explanation:
1. **Imports**: We import necessary classes from `org.junit.jupiter.api`.
2. **Setup Method (`setUp`)**: This method initializes the adjacency matrix and the expected shortest paths before each test run.
3. **Test Method (`testFloydWarshallShortestPaths`)**: This method tests the `floydWarshallShortestPaths` function by comparing the actual output with the expected result.
4. **Floyd-Warshall Algorithm Implementation**: The `floydWarshallShortestPaths` method implements the Floyd-Warshall algorithm to compute the shortest paths between all pairs of vertices.

Make sure to adjust the adjacency matrix and expected results according to your specific use case.