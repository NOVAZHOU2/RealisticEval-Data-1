Sure! Below is the equivalent Java code with the same functionality and comments:

```java
import java.util.Arrays;

/**
 * Implements Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices
 * in a graph represented by an adjacency matrix.
 */
public class FloydWarshall {

    /**
     * Finds the shortest paths between all pairs of vertices in a graph.
     *
     * @param adjacencyMatrix The adjacency matrix representing the graph, where adjacencyMatrix[i][j]
     *                      is the weight of the edge from vertex i to vertex j. If there is no edge,
     *                      the weight should be represented as Float.POSITIVE_INFINITY.
     * @return The matrix representing the shortest paths between all pairs of vertices. shortestPaths[i][j]
     *         will hold the shortest distance from vertex i to vertex j.
     */
    public static double[][] floydWarshallShortestPaths(double[][] adjacencyMatrix) {
        int n = adjacencyMatrix.length;
        double[][] shortestPaths = new double[n][n];

        // Initialize the shortest path matrix with the given adjacency matrix
        for (int i = 0; i < n; i++) {
            System.arraycopy(adjacencyMatrix[i], 0, shortestPaths[i], 0, n);
        }

        // Apply Floyd-Warshall algorithm
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (shortestPaths[i][k] != Double.POSITIVE_INFINITY && shortestPaths[k][j] != Double.POSITIVE_INFINITY) {
                        shortestPaths[i][j] = Math.min(shortestPaths[i][j], shortestPaths[i][k] + shortestPaths[k][j]);
                    }
                }
            }
        }

        return shortestPaths;
    }

    public static void main(String[] args) {
        double[][] adjacencyMatrix = {
            {0, 3, Float.POSITIVE_INFINITY, 5},
            {2, 0, Float.POSITIVE_INFINITY, 4},
            {Float.POSITIVE_INFINITY, 1, 0, Float.POSITIVE_INFINITY},
            {Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 2, 0}
        };

        double[][] shortestPaths = floydWarshallShortestPaths(adjacencyMatrix);

        for (double[] row : shortestPaths) {
            System.out.println(Arrays.toString(row));
        }
    }
}
```

### Explanation:
- **Java Code Structure**: The Java code follows a similar structure to the Python code, including a `main` method for testing purposes.
- **Data Types**: Java uses `double` instead of `float`, and `Float.POSITIVE_INFINITY` instead of `float('inf')`.
- **Array Copying**: The `System.arraycopy` method is used to copy elements from the original adjacency matrix to the shortest path matrix.
- **Floyd-Warshall Algorithm**: The nested loops implement the Floyd-Warshall algorithm to compute the shortest paths between all pairs of vertices.

This Java code should provide the same functionality as the provided Python code.