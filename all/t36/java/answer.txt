Here is the equivalent Java code organized with the package name `org.real.temp` and the class name `Answer`. The code maintains the functionality, logic, and structure of the provided Python code while adapting to Java's syntax and language features:

```java
package org.real.temp;

import java.util.Arrays;
import java.util.List;

public class Answer {

    public static void main(String[] args) {
        // Example usage
        List<List<Double>> adjacencyMatrix = Arrays.asList(
            Arrays.asList(Double.POSITIVE_INFINITY, 3.0, Double.POSITIVE_INFINITY, 7.0),
            Arrays.asList(2.0, Double.POSITIVE_INFINITY, 5.0, 1.0),
            Arrays.asList(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY),
            Arrays.asList(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 2.0, Double.POSITIVE_INFINITY)
        );

        List<List<Double>> shortestPaths = floydWarshallShortestPaths(adjacencyMatrix);
        System.out.println(shortestPaths);
    }

    public static List<List<Double>> floydWarshallShortestPaths(List<List<Double>> adjacencyMatrix) {
        int numVertices = adjacencyMatrix.size();

        return _recursiveFloydWarshall(adjacencyMatrix, numVertices, 0);
    }

    private static List<List<Double>> _recursiveFloydWarshall(List<List<Double>> adjacencyMatrix, int numVertices, int k) {
        if (k == numVertices) {
            return adjacencyMatrix;
        }
        for (int i = 0; i < numVertices; i++) {
            for (int j = 0; j < numVertices; j++) {
                double viaK = adjacencyMatrix.get(i).get(k) + adjacencyMatrix.get(k).get(j);
                double currentDistance = adjacencyMatrix.get(i).get(j);

                if (currentDistance > viaK) {
                    adjacencyMatrix.get(i).set(j, viaK);
                }
            }
        }
        return _recursiveFloydWarshall(adjacencyMatrix, numVertices, k + 1);
    }
}
```

### Explanation:
1. **Package and Class Definition**: The Java code starts with the package declaration `package org.real.temp;` and defines the class `Answer`.

2. **Main Method**: A `main` method is included for testing purposes. It initializes an example adjacency matrix and calls the `floydWarshallShortestPaths` method.

3. **Method Definitions**:
   - `floydWarshallShortestPaths`: This method is the entry point for the Floyd-Warshall algorithm. It initializes the process and calls the recursive helper method `_recursiveFloydWarshall`.
   - `_recursiveFloydWarshall`: This is a private helper method that implements the recursive part of the Floyd-Warshall algorithm. It updates the distances based on the intermediate vertex `k`.

4. **Type Handling**: In Java, we use `List<List<Double>>` to represent the adjacency matrix. `Double.POSITIVE_INFINITY` is used to represent infinity.

5. **Recursive Logic**: The recursive logic is implemented using a nested loop to update the distances between vertices.

This Java code preserves the functionality and logic of the original Python code while adhering to Java's syntax and best practices.