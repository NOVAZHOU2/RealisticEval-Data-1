Here's how you can translate your Python code into Java:

```java
import java.util.List;

public class Answer {
    public static double[][] floydWarshallShortestPaths(List<List<Double>> adjacencyMatrix) {
        int n = adjacencyMatrix.size();
        double[][] shortestPaths = new double[n][n];

        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(i == j)
                    shortestPaths[i][j] = 0;
                else
                    shortestPaths[i][j] = adjacencyMatrix.get(i).get(j);
            }
        }

        for(int k=0; k<n; k++) {
            for(int i=0; i<n; i++) {
                for(int j=0; j<n; j++) {
                    if(shortestPaths[i][k] + shortestPaths[k][j] < shortestPaths[i][j])
                        shortestPaths[i][j] = shortestPaths[i][k] + shortestPaths[k][j];
                }
            }
        }

        return shortestPaths;
    }
}
```

This Java code implements the Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices in a graph represented by an adjacency matrix. Note that Java does not have built-in support for generic types like Python does, so we use `Double` instead of `int` or `float`. Also, Java uses 2D arrays to represent matrices, and we initialize the `shortestPaths` array with the values from the input `adjacencyMatrix`. The rest of the code follows the same logic as the original Python code.