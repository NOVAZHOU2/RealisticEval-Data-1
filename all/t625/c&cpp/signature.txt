Here’s the equivalent C++ version of the provided Python function signature, complete with comments and type annotations:

```cpp
#include <vector>
#include <string>
#include <variant>
#include <stdexcept>

/* 
 * Reads data from a specified file and determines the type of each line.
 * This function processes each line of the specified file and attempts to convert it
 * into either an integer, a floating-point number, or a string.
 *
 * Args:
 *     path (const std::string&): The path to the file to be read. The file should exist 
 *                                 and be accessible for reading.
 *
 * Returns:
 *     std::vector<std::variant<int, float, std::string>>: A vector containing the converted 
 *     values of each line in the file. Each element can be an int, float, or string, 
 *     depending on the content of the line.
 *
 * Throws:
 *     std::runtime_error: If the specified file does not exist or if there is an error reading the file.
 */
std::vector<std::variant<int, float, std::string>> read_data_from_file(const std::string& path);
```

### Explanation:

1. **Includes**: Necessary headers for vectors, strings, variants, and exceptions are included.

2. **Function Signature**: The function signature reflects the input type (`const std::string&`) and the return type, which uses `std::variant<int, float, std::string>` to capture the various possible return types.

3. **Comments**: The Python docstring is converted into a multi-line comment in C++, explaining the function’s purpose, arguments, return type, and exceptions.

This structure maintains the original purpose and clarity while adapting it to C++ syntax and conventions.