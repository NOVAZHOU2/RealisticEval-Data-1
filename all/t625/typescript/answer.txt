To convert the provided Python code to TypeScript while maintaining its functionality and logic, here's the equivalent TypeScript code:

```typescript
import * as fs from 'fs';

function readDataFromFile(path: string): (number | string)[] {
    const dataList: (number | string)[] = [];

    try {
        const data = fs.readFileSync(path, 'utf-8');
        const lines = data.split('\n');

        for (const line of lines) {
            const trimmedLine = line.trim();

            // Try to parse as an integer
            const intValue = parseInt(trimmedLine);
            if (!isNaN(intValue)) {
                dataList.push(intValue);
                continue; // Go to the next line
            }

            // Try to parse as a floating-point number
            const floatValue = parseFloat(trimmedLine);
            if (!isNaN(floatValue)) {
                dataList.push(floatValue);
                continue; // Go to the next line
            }

            // If it's not an integer or float, treat it as a string
            dataList.push(trimmedLine);
        }
    } catch (error) {
        console.error(error);
        throw new Error(`Error reading file: ${error.message}`);
    }

    return dataList;
}
```

This TypeScript version utilizes `fs` for file reading, defines types explicitly, and follows the same logical structure as the original Python code.