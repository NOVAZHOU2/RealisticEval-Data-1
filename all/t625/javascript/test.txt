Hereâ€™s the equivalent Jest test class that mirrors the functionality and logic of the provided Python `unittest` tests. I've included comments where necessary to explain changes due to language differences:

```javascript
const fs = require('fs');
const path = require('path');
const { readDataFromFile } = require('./path_to_your_function'); // Adjust the path accordingly

describe('Tester', () => {
    // Helper function to create a test file
    const createTestFile = (fileName, content) => {
        fs.writeFileSync(fileName, content);
    };

    afterEach(() => {
        // Cleanup: Remove any test files created during tests
        const testFiles = [
            "valid_integers.txt",
            "valid_floats.txt",
            "mixed_data.txt",
            "empty_file.txt",
            "invalid_data.txt"
        ];
        testFiles.forEach(file => {
            if (fs.existsSync(file)) {
                fs.unlinkSync(file);
            }
        });
    });

    test('read valid integers', () => {
        const filePath = "valid_integers.txt";
        createTestFile(filePath, "42\n-7\n0\n100\n");
        const result = readDataFromFile(filePath);
        expect(result.length).toBe(4);
        expect(result[0]).toBe(42);
        expect(result[1]).toBe(-7);
        expect(result[2]).toBe(0);
        expect(result[3]).toBe(100);
    });

    test('read valid floats', () => {
        const filePath = "valid_floats.txt";
        createTestFile(filePath, "3.14\n-0.001\n2.71828\n0.0\n");
        const result = readDataFromFile(filePath);
        expect(result.length).toBe(4);
        expect(result[0]).toBe(3.14);
        expect(result[1]).toBe(-0.001);
        expect(result[2]).toBe(2.71828);
        expect(result[3]).toBe(0.0);
    });

    test('read mixed data', () => {
        const filePath = "mixed_data.txt";
        createTestFile(filePath, "Hello\n42\n3.14\nWorld\n-19.99\n");
        const result = readDataFromFile(filePath);
        expect(result.length).toBe(5);
        expect(result[0]).toBe("Hello");
        expect(result[1]).toBe(42);
        expect(result[2]).toBe(3.14);
        expect(result[3]).toBe("World");
        expect(result[4]).toBe(-19.99);
    });

    test('read empty file', () => {
        const filePath = "empty_file.txt";
        createTestFile(filePath, "");
        const result = readDataFromFile(filePath);
        expect(result.length).toBe(0);
    });

    test('read invalid data', () => {
        const filePath = "invalid_data.txt";
        createTestFile(filePath, "Hello\n42a\n3.14.15\nWorld!\n");
        const result = readDataFromFile(filePath);
        expect(result.length).toBe(4);
        expect(result[0]).toBe("Hello");
        expect(result[1]).toBe("42a");
        expect(result[2]).toBe("3.14.15");
        expect(result[3]).toBe("World!");
    });
});
```

### Changes Explained:
1. **File System Operations**: Used Node.js's `fs` module for file operations instead of Python's built-in functions.
2. **Test Framework**: Used Jest's `describe` and `test` functions instead of `unittest.TestCase` and its methods.
3. **Assertions**: Replaced `self.assertEqual` with `expect(...).toBe(...)` for assertions, which is the Jest equivalent.
4. **Cleanup**: Added an `afterEach` block to clean up test files created during the tests, ensuring no leftover files affect subsequent tests.
5. **File Path Handling**: The path where the function is imported must be adjusted based on your project structure.

This structure maintains the logic and functionality of the original tests while adapting them to JavaScript and Jest's conventions.