Converting Python code to C/C++ can be quite complex, especially when dealing with higher-level abstractions like dictionaries and strings. However, I'll provide you with a basic implementation of the function `rdf_jsonld_to_ngsild` in C++ using the POCO library for handling JSON data. Note that this is a simplified version and may not cover all edge cases or complexities of your original Python function.

First, make sure you have the POCO library installed on your system. You can install it via package managers like apt on Ubuntu:

```sh
sudo apt-get install libpoco-dev
```

Now, here's the equivalent C++ code:

```cpp
#include <iostream>
#include <string>
#include <map>
#include <Poco/JSON/Object.h>
#include <Poco/JSON/Parser.h>

namespace Poco {
    namespace JSON {
        class Object;
    }
}

std::map<std::string, std::string> rdf_jsonld_to_ngsild(const std::string& rdf_jsonld) {
    // Parse the RDF JSON-LD string into a POCO JSON object
    Poco::JSON::Parser parser;
    auto json = parser.parse(rdf_jsonld).extract<Poco::JSON::Object::Ptr>();

    // Create an empty map to store the NGSI-LD output
    std::map<std::string, std::string> ngsi_ld;

    // Iterate through the keys in the JSON object
    for (auto it = json->begin(); it != json->end(); ++it) {
        const std::string& key = it->first;
        const Poco::Dynamic::Var& value = it->second;

        if (value.type() == typeid(std::string)) {
            ngsi_ld[key] = value.convert<std::string>();
        } else if (value.type() == typeid(Poco::JSON::Array)) {
            // Handle arrays if needed
            // For simplicity, we'll just convert each element to a string
            std::ostringstream oss;
            Poco::JSON::Array array = value.extract<Poco::JSON::Array>();
            for (const auto& elem : array) {
                if (elem.type() == typeid(std::string)) {
                    oss << elem.convert<std::string>() << ", ";
                }
            }
            ngsi_ld[key] = oss.str();
        }
        // Add more conditions for other types if necessary
    }

    return ngsi_ld;
}

int main() {
    std::string rdf_jsonld = R"({
        "@context": "http://example.com/context",
        "id": "urn:ngsi-ld:Entity:001",
        "type": "ExampleType"
    })";

    auto ngsi_ld = rdf_jsonld_to_ngsild(rdf_jsonld);

    for (const auto& pair : ngsi_ld) {
        std::cout << pair.first << ": " << pair.second << std::endl;
    }

    return 0;
}
```

### Explanation:

1. **POCO Library**: The POCO library is used for handling JSON data in C++. It provides classes for parsing and manipulating JSON objects.

2. **Parsing JSON**: The `Poco::JSON::Parser` class is used to parse the input RDF JSON-LD string into a `Poco::JSON::Object`.

3. **Iterating Through JSON Object**: We iterate through the keys and values of the JSON object. If a value is a string, we add it directly to the `ngsi_ld` map. If the value is an array, we concatenate its elements into a single string.

4. **Returning the Result**: The function returns a `std::map<std::string, std::string>` containing the NGSI-LD formatted data.

5. **Main Function**: A simple example demonstrating how to use the `rdf_jsonld_to_ngsild` function is provided.

This is a basic implementation and may need adjustments based on the specific requirements and complexity of your RDF JSON-LD to NGSI-LD conversion logic.