Sure! Below is the equivalent C++ code for the provided Python script. This code will handle the conversion of RDF JSON-LD data to NGSI-LD format using C++ and the `nlohmann/json` library for JSON handling.

First, you need to include the `nlohmann/json` library, which can be included via a header file or installed in your project.

Hereâ€™s the C++ code:

```cpp
#include <iostream>
#include <string>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

// Function to convert RDF JSON-LD to NGSI-LD format
json rdf_jsonld_to_ngsild(const json& rdf_jsonld) {
    json ngsi_ld;
    ngsi_ld["id"] = rdf_jsonld.value("@id", "urn:ngsi-ld:unknown:id");
    ngsi_ld["type"] = rdf_jsonld.value("@type", "UnknownType");
    ngsi_ld["@context"] = rdf_jsonld.value("@context", "https://schema.lab.fiware.org/ld/context");
    ngsi_ld["attributes"] = json::array();

    // Assuming simple attribute structure conversion
    for (auto it = rdf_jsonld.begin(); it != rdf_jsonld.end(); ++it) {
        std::string key = it.key();
        if (key != "@context" && key != "@id" && key != "@type") {
            json attribute;
            attribute["type"] = "Property";
            attribute["name"] = key;
            attribute["value"] = it.value();
            ngsi_ld["attributes"].push_back(attribute);
        }
    }

    return ngsi_ld;
}

int main() {
    // Example usage
    std::string input_json = R"({
        "@context": "http://example.com/context",
        "@id": "urn:ngsi-ld:example:123",
        "@type": "ExampleType",
        "attribute1": "value1",
        "attribute2": "value2"
    })";

    json rdf_jsonld = json::parse(input_json);
    json ngsi_ld = rdf_jsonld_to_ngsild(rdf_jsonld);

    std::cout << ngsi_ld.dump(4) << std::endl;  // Pretty print the result

    return 0;
}
```

### Explanation:
1. **Imports**: The necessary headers are included at the beginning, including the `nlohmann/json` library for JSON handling.
2. **Function Definition**: The function `rdf_jsonld_to_ngsild` takes a `json` object as input and returns a `json` object representing the converted data.
3. **JSON Handling**: The `json` library provides methods for parsing, accessing, and manipulating JSON objects.
4. **Attribute Conversion**: The loop iterates over the keys in the input JSON and constructs the attributes section accordingly.
5. **Example Usage**: In the `main` function, an example input JSON is provided, parsed, and then converted to NGSI-LD format. The resulting JSON is printed to the console.

Make sure you have the `nlohmann/json` library available in your project or include it via a package manager or by downloading the single-header file.