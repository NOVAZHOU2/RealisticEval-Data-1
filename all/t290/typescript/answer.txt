Certainly! Below is the equivalent TypeScript code for the provided Python function:

```typescript
import * as json from 'json';

interface RdfJsonLd {
  [key: string]: any;
  '@id'?: string;
  '@type'?: string;
  '@context'?: string | object;
}

interface NgsiLd {
  id: string;
  type: string;
  '@context': string | object;
  attributes: Attribute[];
}

interface Attribute {
  type: string;
  name: string;
  value: any;
}

function rdfJsonldToNgsild(rdfJsonld: string | RdfJsonLd): NgsiLd {
  let parsedRdfJsonld: RdfJsonLd;

  if (typeof rdfJsonld === 'string') {
    parsedRdfJsonld = JSON.parse(rdfJsonld);
  } else {
    parsedRdfJsonld = rdfJsonld;
  }

  const ngsiLd: NgsiLd = {
    id: parsedRdfJsonld['@id'] || 'urn:ngsi-ld:unknown:id',
    type: parsedRdfJsonld['@type'] || 'UnknownType',
    '@context': parsedRdfJsonld['@context'] || 'https://schema.lab.fiware.org/ld/context',
    attributes: []
  };

  // Assuming simple attribute structure conversion
  for (const key in parsedRdfJsonld) {
    if (parsedRdfJsonld.hasOwnProperty(key) && !['@context', '@id', '@type'].includes(key)) {
      ngsiLd.attributes.push({
        type: 'Property',
        name: key,
        value: parsedRdfJsonld[key]
      });
    }
  }

  return ngsiLd;
}

// Example usage
const exampleRdfJsonld = `{
  "@id": "urn:ngsi-ld:example:id",
  "@type": "ExampleType",
  "@context": "https://example.com/context",
  "attribute1": "value1",
  "attribute2": "value2"
}`;

console.log(rdfJsonldToNgsild(exampleRdfJsonld));
```

### Explanation:
1. **Types and Interfaces**:
   - Defined interfaces `RdfJsonLd`, `NgsiLd`, and `Attribute` to represent the structures of the input and output data.
   - Used `string | RdfJsonLd` for the function parameter to handle both string and object inputs.

2. **JSON Parsing**:
   - If the input is a string, it is parsed using `JSON.parse`.
   - If the input is already an object, it is used directly.

3. **NGSI-LD Object Construction**:
   - Constructed the `ngsiLd` object with default values for `id`, `type`, and `@context`.
   - Iterated over the keys of the parsed RDF JSON-LD object to construct the `attributes` array.

4. **Example Usage**:
   - Provided an example RDF JSON-LD string and demonstrated how to call the function and log the result.

This TypeScript code maintains the same functionality and logic as the original Python code while adhering to TypeScript's static type system.