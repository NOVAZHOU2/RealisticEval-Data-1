Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included to match the Python unittest framework.

### TypeScript Code

```typescript
import { expect } from '@jest/globals';
import * as json from 'json';

// Define the interfaces for the types used in the tests
interface RdfJsonLd {
  [key: string]: any;
  '@id'?: string;
  '@type'?: string;
  '@context'?: string | object;
}

interface NgsiLd {
  id: string;
  type: string;
  '@context': string | object;
  attributes: Attribute[];
}

interface Attribute {
  type: string;
  name: string;
  value: any;
}

// The function to be tested
function rdfJsonldToNgsild(rdfJsonld: string | RdfJsonLd): NgsiLd {
  let parsedRdfJsonld: RdfJsonLd;

  if (typeof rdfJsonld === 'string') {
    try {
      parsedRdfJsonld = JSON.parse(rdfJsonld);
    } catch (error) {
      throw new Error('Invalid JSON input');
    }
  } else {
    parsedRdfJsonld = rdfJsonld;
  }

  const ngsiLd: NgsiLd = {
    id: parsedRdfJsonld['@id'] || 'urn:ngsi-ld:unknown:id',
    type: parsedRdfJsonld['@type'] || 'UnknownType',
    '@context': parsedRdfJsonld['@context'] || 'https://schema.lab.fiware.org/ld/context',
    attributes: []
  };

  // Assuming simple attribute structure conversion
  for (const key in parsedRdfJsonld) {
    if (parsedRdfJsonld.hasOwnProperty(key) && !['@context', '@id', '@type'].includes(key)) {
      ngsiLd.attributes.push({
        type: 'Property',
        name: key,
        value: parsedRdfJsonld[key]
      });
    }
  }

  return ngsiLd;
}

describe('RDF JSON-LD to NGSI-LD Conversion', () => {
  /**
   * Test a basic and correct conversion from JSON-LD to NGSI-LD.
   */
  test('basic conversion', () => {
    const rdfJsonld = json.stringify({
      '@context': 'http://schema.org/',
      '@id': 'urn:ngsi-ld:Vehicle:A123',
      '@type': 'Vehicle',
      speed: { value: 60, unitCode: 'KMH' }
    });
    const expectedNgsild: NgsiLd = {
      id: 'urn:ngsi-ld:Vehicle:A123',
      type: 'Vehicle',
      '@context': 'http://schema.org/',
      attributes: [
        { type: 'Property', name: 'speed', value: { value: 60, unitCode: 'KMH' } }
      ]
    };
    const result = rdfJsonldToNgsild(rdfJsonld);
    expect(result).toEqual(expectedNgsild);
  });

  /**
   * Test conversion when @id and @type are missing.
   */
  test('missing id and type', () => {
    const rdfJsonld = json.stringify({
      '@context': 'http://schema.org/',
      speed: { value: 60, unitCode: 'KMH' }
    });
    const expectedNgsild: NgsiLd = {
      id: 'urn:ngsi-ld:unknown:id',
      type: 'UnknownType',
      '@context': 'http://schema.org/',
      attributes: [
        { type: 'Property', name: 'speed', value: { value: 60, unitCode: 'KMH' } }
      ]
    };
    const result = rdfJsonldToNgsild(rdfJsonld);
    expect(result).toEqual(expectedNgsild);
  });

  /**
   * Test conversion with nested objects.
   */
  test('with nested objects', () => {
    const rdfJsonld = json.stringify({
      '@context': 'http://schema.org/',
      '@id': 'urn:ngsi-ld:Vehicle:A123',
      '@type': 'Vehicle',
      location: { latitude: 48.8566, longitude: 2.3522 }
    });
    const expectedNgsild: NgsiLd = {
      id: 'urn:ngsi-ld:Vehicle:A123',
      type: 'Vehicle',
      '@context': 'http://schema.org/',
      attributes: [
        { type: 'Property', name: 'location', value: { latitude: 48.8566, longitude: 2.3522 } }
      ]
    };
    const result = rdfJsonldToNgsild(rdfJsonld);
    expect(result).toEqual(expectedNgsild);
  });

  /**
   * Test the function's response to invalid JSON input.
   */
  test('invalid JSON input', () => {
    const rdfJsonld = 'This is not a valid JSON';
    expect(() => rdfJsonldToNgsild(rdfJsonld)).toThrow('Invalid JSON input');
  });

  /**
   * Test the conversion of an empty JSON-LD document.
   */
  test('empty JSON-LD', () => {
    const rdfJsonld = json.stringify({});
    const expectedNgsild: NgsiLd = {
      id: 'urn:ngsi-ld:unknown:id',
      type: 'UnknownType',
      '@context': 'https://schema.lab.fiware.org/ld/context',
      attributes: []
    };
    const result = rdfJsonldToNgsild(rdfJsonld);
    expect(result).toEqual(expectedNgsild);
  });
});
```

### Explanation:
1. **Interfaces**:
   - Defined interfaces `RdfJsonLd`, `NgsiLd`, and `Attribute` to represent the structures of the input and output data.

2. **Function Definition**:
   - The `rdfJsonldToNgsild` function is defined with proper type annotations and handles JSON parsing and error handling.

3. **Jest Testing Framework**:
   - Used `describe` and `test` blocks to organize and run the tests.
   - Used `expect` assertions to verify the correctness of the function's output.

4. **Test Cases**:
   - Each test case is documented with a description and uses appropriate Jest assertions to validate the function's behavior.

5. **Error Handling**:
   - Included error handling for invalid JSON input using `toThrow`.

This TypeScript code preserves the original functionality and logic of the Python unittest tests while adhering to Jest's testing framework and TypeScript's static type system.