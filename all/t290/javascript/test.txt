Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The conversion ensures that the functionality and logic of the tests are maintained, and all assertions are mapped to appropriate Jest equivalents.

### Python Code

```python
import unittest
import json


class TestRDFJSONLDToNGSILDConversion(unittest.TestCase):
    def test_basic_conversion(self):
        """Test a basic and correct conversion from JSON-LD to NGSI-LD."""
        rdf_jsonld = json.dumps({
            "@context": "http://schema.org/",
            "@id": "urn:ngsi-ld:Vehicle:A123",
            "@type": "Vehicle",
            "speed": {"value": 60, "unitCode": "KMH"}
        })
        expected_ngsild = {
            "id": "urn:ngsi-ld:Vehicle:A123",
            "type": "Vehicle",
            "@context": "http://schema.org/",
            "attributes": [
                {"type": "Property", "name": "speed", "value": {"value": 60, "unitCode": "KMH"}}
            ]
        }
        result = rdf_jsonld_to_ngsild(rdf_jsonld)
        self.assertEqual(result, expected_ngsild)

    def test_missing_id_and_type(self):
        """Test conversion when @id and @type are missing."""
        rdf_jsonld = json.dumps({
            "@context": "http://schema.org/",
            "speed": {"value": 60, "unitCode": "KMH"}
        })
        expected_ngsild = {
            "id": "urn:ngsi-ld:unknown:id",
            "type": "UnknownType",
            "@context": "http://schema.org/",
            "attributes": [
                {"type": "Property", "name": "speed", "value": {"value": 60, "unitCode": "KMH"}}
            ]
        }
        result = rdf_jsonld_to_ngsild(rdf_jsonld)
        self.assertEqual(result, expected_ngsild)

    def test_with_nested_objects(self):
        """Test conversion with nested objects."""
        rdf_jsonld = json.dumps({
            "@context": "http://schema.org/",
            "@id": "urn:ngsi-ld:Vehicle:A123",
            "@type": "Vehicle",
            "location": {"latitude": 48.8566, "longitude": 2.3522}
        })
        expected_ngsild = {
            "id": "urn:ngsi-ld:Vehicle:A123",
            "type": "Vehicle",
            "@context": "http://schema.org/",
            "attributes": [
                {"type": "Property", "name": "location", "value": {"latitude": 48.8566, "longitude": 2.3522}}
            ]
        }
        result = rdf_jsonld_to_ngsild(rdf_jsonld)
        self.assertEqual(result, expected_ngsild)

    def test_invalid_json_input(self):
        """Test the function's response to invalid JSON input."""
        rdf_jsonld = "This is not a valid JSON"
        with self.assertRaises(json.JSONDecodeError):
            rdf_jsonld_to_ngsild(rdf_jsonld)

    def test_empty_jsonld(self):
        """Test the conversion of an empty JSON-LD document."""
        rdf_jsonld = json.dumps({})
        expected_ngsild = {
            "id": "urn:ngsi-ld:unknown:id",
            "type": "UnknownType",
            "@context": "https://schema.lab.fiware.org/ld/context",
            "attributes": []
        }
        result = rdf_jsonld_to_ngsild(rdf_jsonld)
        self.assertEqual(result, expected_ngsild)


if __name__ == '__main__':
    unittest.main()
```

### Equivalent Jest Test Suite

```javascript
const { JSONDecodeError } = require('json');
const rdfJsonldToNgSild = require('./rdfJsonldToNgSild'); // Import your function

describe('RDF JSON-LD to NGSI-LD Conversion', () => {
    describe('Basic Conversion', () => {
        it('should correctly convert a basic JSON-LD to NGSI-LD', () => {
            const rdfJsonld = JSON.stringify({
                "@context": "http://schema.org/",
                "@id": "urn:ngsi-ld:Vehicle:A123",
                "@type": "Vehicle",
                "speed": {"value": 60, "unitCode": "KMH"}
            });
            const expectedNgsild = {
                "id": "urn:ngsi-ld:Vehicle:A123",
                "type": "Vehicle",
                "@context": "http://schema.org/",
                "attributes": [
                    {"type": "Property", "name": "speed", "value": {"value": 60, "unitCode": "KMH"}}
                ]
            };
            const result = rdfJsonldToNgSild(rdfJsonld);
            expect(result).toEqual(expectedNgsild);
        });
    });

    describe('Missing ID and Type', () => {
        it('should handle missing @id and @type correctly', () => {
            const rdfJsonld = JSON.stringify({
                "@context": "http://schema.org/",
                "speed": {"value": 60, "unitCode": "KMH"}
            });
            const expectedNgsild = {
                "id": "urn:ngsi-ld:unknown:id",
                "type": "UnknownType",
                "@context": "http://schema.org/",
                "attributes": [
                    {"type": "Property", "name": "speed", "value": {"value": 60, "unitCode": "KMH"}}
                ]
            };
            const result = rdfJsonldToNgSild(rdfJsonld);
            expect(result).toEqual(expectedNgsild);
        });
    });

    describe('Nested Objects', () => {
        it('should correctly convert JSON-LD with nested objects', () => {
            const rdfJsonld = JSON.stringify({
                "@context": "http://schema.org/",
                "@id": "urn:ngsi-ld:Vehicle:A123",
                "@type": "Vehicle",
                "location": {"latitude": 48.8566, "longitude": 2.3522}
            });
            const expectedNgsild = {
                "id": "urn:ngsi-ld:Vehicle:A123",
                "type": "Vehicle",
                "@context": "http://schema.org/",
                "attributes": [
                    {"type": "Property", "name": "location", "value": {"latitude": 48.8566, "longitude": 2.3522}}
                ]
            };
            const result = rdfJsonldToNgSild(rdfJsonld);
            expect(result).toEqual(expectedNgsild);
        });
    });

    describe('Invalid JSON Input', () => {
        it('should throw an error for invalid JSON input', () => {
            const rdfJsonld = "This is not a valid JSON";
            expect(() => rdfJsonldToNgSild(rdfJsonld)).toThrow(JSONDecodeError);
        });
    });

    describe('Empty JSON-LD Document', () => {
        it('should correctly convert an empty JSON-LD document', () => {
            const rdfJsonld = JSON.stringify({});
            const expectedNgsild = {
                "id": "urn:ngsi-ld:unknown:id",
                "type": "UnknownType",
                "@context": "https://schema.lab.fiware.org/ld/context",
                "attributes": []
            };
            const result = rdfJsonldToNgSild(rdfJsonld);
            expect(result).toEqual(expectedNgsild);
        });
    });
});
```

### Explanation:
1. **Import Statements**:
   - Import the `JSONDecodeError` from the `json` module if needed. This is typically not required in Jest, but you can simulate it using a custom error class if necessary.
   - Import the `rdfJsonldToNgSild` function from the relevant file.

2. **Describe Blocks**:
   - Each `unittest.TestCase` method is converted to a `describe` block in Jest.
   - Each test case within a `describe` block is defined using `it`.

3. **Assertions**:
   - The `assertEqual` method from Python's `unittest` is replaced with Jest's `expect` and `toEqual` methods.

4. **JSON Stringification**:
   - Use `JSON.stringify` to create JSON strings in JavaScript, similar to `json.dumps` in Python.

5. **Error Handling**:
   - Use `toThrow` to check for errors thrown by the function.

This conversion ensures that the tests maintain the same functionality and logic as the original Python unittest class.