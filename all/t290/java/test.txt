Here's how you can translate your Python unittest test class into a Java JUnit test case:

```java
import static org.junit.Assert.assertEquals;
import org.json.JSONObject;
import org.junit.Test;

public class Tester {
    
    @Test
    public void testRDFJSONLDToNGSILD() throws Exception {
        // Arrange
        String rdfJsonLd = "{\"@context\": \"http://example.com\", \"name\": \"John\"}";
        
        // Act
        JSONObject ngsiLdResult = rdfJsonLdToNgSILDRdfJsonLd(rdfJsonLd);
        
        // Assert
        assertEquals("John", ngsiLdResult.getString("name"));
    }
    
    private JSONObject rdfJsonLdToNgSILDRdfJsonLd(String rdfJsonLd) {
        // Implement the conversion logic here and return a JSONObject
        // This is just a placeholder for demonstration purposes
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("name", "John");
        return jsonObject;
    }
}
```

Please note that I've made some assumptions about what `rdfJsonLdToNgSILDRdfJsonLd` method should do. You need to replace the implementation of this method with actual conversion logic.

Also, make sure you have the necessary dependencies for using JUnit in your project. If you're using Maven, add the following dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.13.2</version>
    <scope>test</scope>
</dependency>
```

If you're using Gradle, add the following line to your `build.gradle` file:

```groovy
testImplementation 'junit:junit:4.13.2'
```