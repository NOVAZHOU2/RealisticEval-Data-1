Sure! Below is the equivalent Python unit test case using the `unittest` framework:

```python
import unittest

def get_array_average(array):
    if not array:
        return float('NaN')
    return sum(array) / len(array)

class TestGetArrayAverage(unittest.TestCase):

    def test_empty_array(self):
        self.assertTrue(isinstance(get_array_average([]), float))
        self.assertTrue(float('nan') == get_array_average([]))

    def test_single_element_array(self):
        self.assertEqual(get_array_average([5]), 5)

    def test_multiple_elements_array(self):
        self.assertEqual(get_array_average([1, 2, 3, 4, 5]), 3)
        self.assertEqual(get_array_average([-10, 0, 10]), 0)
        self.assertEqual(get_array_average([2.5, 3.5, 4.5]), 3.5)

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
- **Function Definition**: The function `get_array_average` remains the same in both JavaScript and Python.
- **Unit Test Class**: We create a class `TestGetArrayAverage` that inherits from `unittest.TestCase`.
- **Test Methods**:
  - `test_empty_array`: Checks if the function returns `NaN` when given an empty array.
  - `test_single_element_array`: Checks if the function correctly calculates the average for a single-element array.
  - `test_multiple_elements_array`: Checks if the function correctly calculates the average for arrays with multiple elements.

This Python script can be run directly to execute the tests. If all tests pass, it will print "OK". If any test fails, it will provide details on the failure.