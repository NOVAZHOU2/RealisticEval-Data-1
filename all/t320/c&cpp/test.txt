Certainly! Below is how you can convert the given JavaScript Jest test case into a C++ Catch2 test case.

First, let's define the `getArrayAverage` function in C++. Then, we'll write the corresponding Catch2 test cases.

### C++ Code

```cpp
#include <vector>
#include <numeric> // For std::accumulate
#include <stdexcept> // For std::invalid_argument

double getArrayAverage(const std::vector<double>& array) {
    if (array.empty()) {
        throw std::invalid_argument("Cannot compute average of an empty array");
    }
    
    double sum = std::accumulate(array.begin(), array.end(), 0.0);
    return sum / array.size();
}
```

### Catch2 Test Cases

```cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

TEST_CASE("Calculate average of an array of numbers", "[average]") {
    SECTION("Empty array") {
        REQUIRE_THROWS_AS(getArrayAverage({}), std::invalid_argument);
    }

    SECTION("Single element array") {
        REQUIRE(getArrayAverage({42}) == 42);
    }

    SECTION("Multiple elements array") {
        REQUIRE(getArrayAverage({1, 2, 3, 4, 5}) == 3);
        REQUIRE(getArrayAverage({-1, 0, 1}) == 0);
        REQUIRE(getArrayAverage({10, 20, 30, 40, 50}) == 30);
    }
}
```

### Explanation

1. **Function Definition**:
   - The `getArrayAverage` function takes a vector of doubles and returns the average.
   - If the array is empty, it throws an `std::invalid_argument`.

2. **Catch2 Test Cases**:
   - `SECTION("Empty array")`: Tests that calling `getArrayAverage` with an empty array throws an exception.
   - `SECTION("Single element array")`: Tests that the average of a single-element array is the element itself.
   - `SECTION("Multiple elements array")`: Tests the average calculation for arrays with multiple elements.

This setup ensures that your C++ function behaves correctly under various conditions, similar to how the Jest test cases would work in JavaScript.