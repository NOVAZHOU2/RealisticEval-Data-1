Sure! Here's how you can convert the JavaScript function `getArrayAverage` to Java:

```java
import java.util.List;

/**
 * Calculate the average of an array of numbers
 *
 * @param array - An array of numbers for which the average is to be calculated.
 * @return The average (mean) of the array's elements, or Double.NaN if the array is empty.
 */
public class ArrayAverageCalculator {

    public static double getArrayAverage(List<Double> array) {
        if (array == null || array.isEmpty()) {
            return Double.NaN;
        }

        double sum = 0;
        for (double num : array) {
            sum += num;
        }

        return sum / array.size();
    }

    public static void main(String[] args) {
        List<Double> numbers = List.of(1.5, 2.5, 3.5);
        double average = getArrayAverage(numbers);
        System.out.println("The average is: " + average);
    }
}
```

### Explanation:
1. **Class and Method Declaration**: 
   - The Java code defines a class `ArrayAverageCalculator` with a static method `getArrayAverage`.
   
2. **Parameter Type**:
   - The method takes a `List<Double>` instead of a simple array because Java doesn't have a built-in dynamic array type like JavaScript.

3. **Null Check**:
   - Before calculating the average, the method checks if the list is null or empty and returns `Double.NaN` in such cases.

4. **Sum Calculation**:
   - It iterates through the list using a for-each loop to calculate the sum of the elements.

5. **Return Value**:
   - The method returns the average as a `double`.

6. **Main Method**:
   - A `main` method is provided to demonstrate how to use the `getArrayAverage` method.

This Java code should work similarly to your original JavaScript function.