Sure! Below is the equivalent Java JUnit test case for the provided JavaScript Jest test case. This Java code uses JUnit 5 and is placed in the `org.real.temp` package.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Test;

public class Tester {

    /**
     * Calculate the average of an array of numbers
     *
     * @param array - An array of numbers for which the average is to be calculated.
     * @return The average (mean) of the array's elements, or NaN if the array is empty.
     */
    public double getArrayAverage(int[] array) {
        if (array == null || array.length == 0) {
            return Double.NaN;
        }
        
        int sum = 0;
        for (int num : array) {
            sum += num;
        }
        
        return (double) sum / array.length;
    }

    @Test
    public void testGetArrayAverage() {
        // Test with a non-empty array
        int[] nonEmptyArray = {1, 2, 3, 4, 5};
        assertEquals(3.0, getArrayAverage(nonEmptyArray), "The average should be 3.0");

        // Test with an empty array
        int[] emptyArray = {};
        assertTrue(Double.isNaN(getArrayAverage(emptyArray)), "The average should be NaN for an empty array");

        // Test with an array containing negative numbers
        int[] negativeArray = {-1, -2, -3, -4, -5};
        assertEquals(-3.0, getArrayAverage(negativeArray), "The average should be -3.0");

        // Test with an array containing a single element
        int[] singleElementArray = {7};
        assertEquals(7.0, getArrayAverage(singleElementArray), "The average should be 7.0");
    }
}
```

### Explanation:
1. **Package Declaration**: The Java class is placed in the `org.real.temp` package.
2. **Method Implementation**: The `getArrayAverage` method calculates the average of an array of integers. It returns `Double.NaN` if the array is empty.
3. **JUnit Tests**:
   - `testGetArrayAverage`: Contains several test cases to verify the correctness of the `getArrayAverage` method.
     - Tests with a non-empty array.
     - Tests with an empty array.
     - Tests with an array containing negative numbers.
     - Tests with an array containing a single element.

This Java JUnit test case ensures that the `getArrayAverage` method behaves as expected under various conditions.