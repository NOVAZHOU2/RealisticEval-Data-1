Sure! Below is the equivalent TypeScript Jest test case using `describe`:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * calculate the average of an array of numbers
 *
 * @param {number[]} array - An array of numbers for which the average is to be calculated.
 * @returns {number} - The average (mean) of the array's elements, or NaN if the array is empty.
 */
function getArrayAverage(array: number[]): number {
  if (array.length === 0) {
    return NaN;
  }
  const sum = array.reduce((acc, curr) => acc + curr, 0);
  return sum / array.length;
}

describe('getArrayAverage', () => {
  it('should return NaN for an empty array', () => {
    expect(getArrayAverage([])).toBeNaN();
  });

  it('should return the correct average for a non-empty array', () => {
    expect(getArrayAverage([1, 2, 3, 4, 5])).toBe(3);
    expect(getArrayAverage([-1, 0, 1])).toBe(0);
    expect(getArrayAverage([100, 200, 300])).toBe(200);
  });
});
```

In this TypeScript version:
- I've added type annotations to the function and its parameters.
- I've used the `expect` function from Jest to write assertions.
- I've wrapped the tests in a `describe` block for better organization.