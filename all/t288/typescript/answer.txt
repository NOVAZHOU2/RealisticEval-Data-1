Certainly! Below is the equivalent TypeScript code for the provided Python function. The TypeScript version will include proper type definitions and adhere to TypeScript's static type system:

```typescript
function bresenhamLine(x1: number, y1: number, x2: number, y2: number): [number, number][] {
    let points: [number, number][] = [];
    let dx = Math.abs(x2 - x1);
    let dy = -Math.abs(y2 - y1);
    let sx = x1 < x2 ? 1 : -1;
    let sy = y1 < y2 ? 1 : -1;
    let err = dx + dy; // error value e_xy

    while (true) {
        points.push([x1, y1]);
        if (x1 === x2 && y1 === y2) {
            break;
        }
        let e2 = 2 * err;
        // horizontal step
        if (e2 >= dy) {
            if (x1 === x2) {
                break;
            }
            err += dy;
            x1 += sx;
        }
        // vertical step
        if (e2 <= dx) {
            if (y1 === y2) {
                break;
            }
            err += dx;
            y1 += sy;
        }
    }

    return points;
}

// Example usage
const linePoints = bresenhamLine(0, 0, 5, 3);
console.log(linePoints);
```

### Explanation:
- **Type Definitions**: The function `bresenhamLine` takes four numbers as arguments (`x1`, `y1`, `x2`, `y2`) and returns an array of tuples representing the points.
- **Variables**: The variables `dx`, `dy`, `sx`, `sy`, and `err` are defined with appropriate types.
- **Logic**: The logic remains the same, including the loop and conditional checks.
- **Array of Tuples**: The `points` array stores tuples of `[number, number]` to represent each point.

This TypeScript code follows the same structure and logic as the original Python code, ensuring consistency in functionality.