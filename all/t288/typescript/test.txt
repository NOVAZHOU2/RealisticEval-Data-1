Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The Python unittest assertions are mapped to the appropriate Jest assertions.

### TypeScript Code with Jest Testing

First, ensure you have Jest installed in your project:
```sh
npm install --save-dev jest ts-jest @types/jest
```

Then, configure Jest in your `tsconfig.json` and `jest.config.js` files if necessary.

#### TypeScript Test Class

```typescript
import { bresenhamLine } from './path/to/bresenhamLine'; // Import the bresenhamLine function

describe('Bresenham Line Algorithm', () => {
    it('test horizontal line from left to right', () => {
        const result = bresenhamLine(1, 5, 10, 5);
        const expected = [
            [1, 5], [2, 5], [3, 5], [4, 5], [5, 5],
            [6, 5], [7, 5], [8, 5], [9, 5], [10, 5]
        ];
        expect(result).toEqual(expected);
    });

    it('test vertical line from top to bottom', () => {
        const result = bresenhamLine(7, 2, 7, 10);
        const expected = [
            [7, 2], [7, 3], [7, 4], [7, 5], [7, 6],
            [7, 7], [7, 8], [7, 9], [7, 10]
        ];
        expect(result).toEqual(expected);
    });

    it('test diagonal line', () => {
        const result = bresenhamLine(0, 0, 5, 5);
        const expected = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]];
        expect(result).toEqual(expected);
    });

    it('test line with a negative slope', () => {
        const result = bresenhamLine(6, 8, 1, 3);
        const expected = [[6, 8], [5, 7], [4, 6], [3, 5], [2, 4], [1, 3]];
        expect(result).toEqual(expected);
    });

    it('test line that is steeper than it is wide', () => {
        const result = bresenhamLine(2, 2, 3, 7);
        const expected = [[2, 2], [2, 3], [2, 4], [3, 5], [3, 6], [3, 7]];
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Import Statement**: Import the `bresenhamLine` function from the appropriate module.
2. **Describe Block**: Use `describe` to group the tests under a descriptive name.
3. **It Blocks**: Each test case is defined using `it` blocks, which describe the test scenario.
4. **Expect Assertions**: Use `expect` with `toEqual` to compare the results with the expected values.
5. **Data Types**: The expected arrays are defined as arrays of tuples `[number, number][]`.

### Configuration Files
Ensure you have the necessary configuration files set up:

#### `tsconfig.json`
```json
{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true
  },
  "include": ["src/**/*"]
}
```

#### `jest.config.js`
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest'
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
};
```

By following these steps, you can ensure that the TypeScript test class using Jest accurately replicates the functionality and logic of the Python unittest test class.