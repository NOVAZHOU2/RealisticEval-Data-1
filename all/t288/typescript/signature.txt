Certainly! Here is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Generates a straight line between two points using Bresenham's line algorithm,
 * returning all the points that the line passes through.
 * 
 * @param x1 - The x-coordinate of the start point.
 * @param y1 - The y-coordinate of the start point.
 * @param x2 - The x-coordinate of the end point.
 * @param y2 - The y-coordinate of the end point.
 * @returns An array of tuples representing the points (x, y coordinates) that the line passes through.
 */
function bresenhamLine(x1: number, y1: number, x2: number, y2: number): [number, number][] {
    let points: [number, number][] = [];
    let dx = Math.abs(x2 - x1);
    let dy = -Math.abs(y2 - y1);
    let sx = x1 < x2 ? 1 : -1;
    let sy = y1 < y2 ? 1 : -1;
    let err = dx + dy; // error value e_xy

    while (true) {
        points.push([x1, y1]);
        if (x1 === x2 && y1 === y2) {
            break;
        }
        let e2 = 2 * err;

        // Horizontal step
        if (e2 >= dy) {
            if (x1 === x2) {
                break;
            }
            err += dy;
            x1 += sx;
        }

        // Vertical step
        if (e2 <= dx) {
            if (y1 === y2) {
                break;
            }
            err += dx;
            y1 += sy;
        }
    }

    return points;
}
```

### Explanation:
1. **Function Signature**: The function `bresenhamLine` is defined with explicit types for the parameters and return type.
2. **JSDoc Documentation**: The Python docstring is converted to JSDoc-style comments, providing clear documentation for the function.
3. **Type Annotations**: The parameter types (`x1`, `y1`, `x2`, `y2`) and the return type (`[number, number][]`) are properly annotated.
4. **Logic**: The logic remains the same as the Python version, including the use of `Math.abs` for absolute values.
5. **Array Type**: The `points` array is defined as an array of tuples `[number, number][]`.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and documentation standards.