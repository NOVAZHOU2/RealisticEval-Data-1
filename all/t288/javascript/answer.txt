Sure! Below is the JavaScript equivalent of your Python code using the Bresenham line algorithm:

```javascript
function bresenhamLine(x1, y1, x2, y2) {
    const points = [];
    
    let dx = Math.abs(x2 - x1);
    let dy = Math.abs(y2 - y1);
    let sx = (x1 < x2) ? 1 : -1;
    let sy = (y1 < y2) ? 1 : -1;
    let err = dx - dy;

    while(true) {
        points.push([x1, y1]);
        
        if ((x1 === x2) && (y1 === y2)) break;
        
        const e2 = 2 * err;
        if (e2 > -dy) { err -= dy; x1 += sx; }
        if (e2 < dx) { err += dx; y1 += sy; }
    }

    return points;
}

// Example usage:
const linePoints = bresenhamLine(0, 0, 4, 3);
console.log(linePoints); // Output: [[0, 0], [1, 1], [2, 1], [3, 2], [4, 3]]
```

### Explanation:
- The function `bresenhamLine` takes four arguments (`x1`, `y1`, `x2`, `y2`) which represent the starting and ending coordinates of the line.
- It initializes an empty array `points` to store the coordinates of the points the line passes through.
- The variables `dx`, `dy`, `sx`, `sy`, and `err` are used to calculate the steps and errors in the Bresenham algorithm.
- The `while` loop continues until the current point `(x1, y1)` reaches the target point `(x2, y2)`.
- Inside the loop, it pushes the current point into the `points` array and updates the coordinates based on the decision parameter `err`.

This JavaScript function will produce the same output as the provided Python function for generating a line using the Bresenham algorithm.