Sure! Below is the equivalent JavaScript code that implements Bresenham's line algorithm with the same functionality, logic, and structure as the provided Python code:

```javascript
function bresenhamLine(x1, y1, x2, y2) {
    /**
     * Generate points of a line using Bresenham's line algorithm between two points.
     *
     * @param {number} x1 - Coordinate of the start point's x.
     * @param {number} y1 - Coordinate of the start point's y.
     * @param {number} x2 - Coordinate of the end point's x.
     * @param {number} y2 - Coordinate of the end point's y.
     * @returns {Array.<[number, number]>} An array of points (arrays of x and y coordinates) that the line passes through.
     */
    let points = [];
    let dx = Math.abs(x2 - x1);
    let dy = -Math.abs(y2 - y1);
    let sx = x1 < x2 ? 1 : -1;
    let sy = y1 < y2 ? 1 : -1;
    let err = dx + dy;  // error value e_xy

    while (true) {
        points.push([x1, y1]);
        if (x1 === x2 && y1 === y2) {
            break;
        }
        let e2 = 2 * err;

        // horizontal step
        if (e2 >= dy) {
            if (x1 === x2) {
                break;
            }
            err += dy;
            x1 += sx;
        }

        // vertical step
        if (e2 <= dx) {
            if (y1 === y2) {
                break;
            }
            err += dx;
            y1 += sy;
        }
    }

    return points;
}
```

### Explanation:
1. **Function Definition**: The function `bresenhamLine` is defined with four parameters: `x1`, `y1`, `x2`, and `y2`.
2. **Initialization**:
   - `points`: An empty array to store the points on the line.
   - `dx`: Absolute difference in x-coordinates.
   - `dy`: Negative absolute difference in y-coordinates.
   - `sx`: Sign of the x-coordinate change.
   - `sy`: Sign of the y-coordinate change.
   - `err`: Initial error value.
3. **Main Loop**:
   - Continuously updates the coordinates and error values until the end point is reached.
   - `e2` is used to determine the next step (horizontal or vertical).
   - Breaks the loop when the end point is reached.
4. **Return Value**: Returns an array of points representing the line.

This JavaScript code closely mirrors the functionality and logic of the given Python code.