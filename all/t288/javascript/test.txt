Sure, let's convert the given Python unittest test class to a Jest test class. First, we need to implement the `bresenham_line` function in JavaScript, and then we'll write the Jest tests for it.

### Step 1: Implement the `bresenham_line` function in JavaScript

Here's the JavaScript implementation of the `bresenham_line` function:

```javascript
function bresenhamLine(x1, y1, x2, y2) {
    const points = [];
    const dx = Math.abs(x2 - x1);
    const dy = Math.abs(y2 - y1);
    let sx = (x1 < x2) ? 1 : -1;
    let sy = (y1 < y2) ? 1 : -1;
    let err = dx - dy;

    while (true) {
        points.push([x1, y1]);
        if (x1 === x2 && y1 === y2) break;
        let e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x1 += sx;
        }
        if (e2 < dx) {
            err += dx;
            y1 += sy;
        }
    }

    return points;
}
```

### Step 2: Write the Jest test class

Now, let's write the Jest test class to verify the correctness of the `bresenhamLine` function. We will create a test file named `bresenhamLine.test.js`.

```javascript
const { expect } = require('@jest/globals');
const bresenhamLine = require('./bresenhamLine');

describe('Bresenham Line Algorithm', () => {
    test('should draw a horizontal line', () => {
        const result = bresenhamLine(0, 0, 3, 0);
        expect(result).toEqual([
            [0, 0],
            [1, 0],
            [2, 0],
            [3, 0]
        ]);
    });

    test('should draw a vertical line', () => {
        const result = bresenhamLine(0, 0, 0, 3);
        expect(result).toEqual([
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3]
        ]);
    });

    test('should draw a diagonal line from bottom-left to top-right', () => {
        const result = bresenhamLine(0, 0, 3, 3);
        expect(result).toEqual([
            [0, 0],
            [1, 1],
            [2, 2],
            [3, 3]
        ]);
    });

    test('should draw a diagonal line from top-left to bottom-right', () => {
        const result = bresenhamLine(0, 3, 3, 0);
        expect(result).toEqual([
            [0, 3],
            [1, 2],
            [2, 1],
            [3, 0]
        ]);
    });
});
```

### Explanation of Changes

1. **Function Definition**: The Python function `bresenham_line` has been converted to a JavaScript function `bresenhamLine`. The function signature and logic have been adapted to JavaScript syntax.
   
2. **Test Structure**: The Python unittest structure has been converted to Jest's `describe` and `test` blocks. Each test case is defined within the `describe` block.

3. **Assertions**: The `assertEqual` method used in Python unittest has been replaced with Jest's `expect` and `toEqual` methods to assert the expected results.

4. **Imports**: The `@jest/globals` package is imported to use Jest's global functions like `expect`.

5. **File Structure**: The test file is structured as `bresenhamLine.test.js`, and the `bresenhamLine` function is imported from another file (`bresenhamLine.js`).

This conversion maintains the functionality and logic of the original Python tests while adapting them to Jest's syntax and conventions.