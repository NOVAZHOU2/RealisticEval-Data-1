Sure, here's how you can convert the given Python unittest test class into a JavaScript test case using Jest:

```javascript
const { bresenhamLine } = require('./path-to-your-bresenham-line-function'); // Adjust the path accordingly

describe('Bresenham Line Algorithm', () => {
  it('should return an empty array for equal start and end points', () => {
    const result = bresenhamLine(0, 0, 0, 0);
    expect(result).toEqual([]);
  });

  it('should return the start and end points when they are different', () => {
    const result = bresenhamLine(0, 0, 3, 4);
    expect(result).toEqual([[0, 0], [1, 1], [2, 2], [3, 3]]);
  });

  it('should handle vertical lines correctly', () => {
    const result = bresenhamLine(2, 1, 2, 5);
    expect(result).toEqual([[2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]);
  });

  it('should handle horizontal lines correctly', () => {
    const result = bresenhamLine(1, 3, 5, 3);
    expect(result).toEqual([[1, 3], [2, 3], [3, 3], [4, 3], [5, 3]]);
  });

  it('should handle diagonal lines correctly', () => {
    const result = bresenhamLine(0, 0, 3, 3);
    expect(result).toEqual([[0, 0], [1, 1], [2, 2], [3, 3]]);
  });
});
```

In this example:
- We're importing the `bresenhamLine` function from your file. Make sure to adjust the path accordingly.
- We're using Jest's `describe` and `it` functions to organize our tests.
- Each `it` block represents a single test case, and we're using Jest's `expect` function to assert the expected outcomes.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```bash
npm install --save-dev jest
```

or

```bash
yarn add --dev jest
```

Then, you can run your tests using the following command:

```bash
npx jest
```

or

```bash
yarn jest
```