Sure! Below is the equivalent C++ implementation of the Bresenham line algorithm. This function takes four integer parameters representing the coordinates of the start and end points of the line and returns a vector of pairs, each pair representing a point on the line.

```cpp
#include <vector>
#include <utility> // for std::pair

std::vector<std::pair<int, int>> bresenhamLine(int x1, int y1, int x2, int y2) {
    std::vector<std::pair<int, int>> linePoints;
    
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int sx = (x1 < x2) ? 1 : -1;
    int sy = (y1 < y2) ? 1 : -1;
    int err = dx - dy;

    while (true) {
        linePoints.push_back({x1, y1});

        if (x1 == x2 && y1 == y2)
            break;

        int e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x1 += sx;
        }
        if (e2 < dx) {
            err += dx;
            y1 += sy;
        }
    }

    return linePoints;
}
```

### Explanation:
- **dx** and **dy**: These represent the absolute differences in x and y coordinates between the start and end points.
- **sx** and **sy**: These determine the direction of movement along the x and y axes. They are set to 1 or -1 based on whether `x2` is greater than `x1` and `y2` is greater than `y1`, respectively.
- **err**: This variable helps decide when to move along the x-axis (`err -= dy`) or the y-axis (`err += dx`). It starts at `dx - dy`.

The loop continues until both `x1` and `y1` reach `x2` and `y2`. At each step, the current point `(x1, y1)` is added to the `linePoints` vector.

### Usage Example:
Here's how you might call this function and print the resulting points:

```cpp
#include <iostream>

int main() {
    auto points = bresenhamLine(0, 0, 3, 4);

    for (const auto& point : points) {
        std::cout << "(" << point.first << ", " << point.second << ") ";
    }

    return 0;
}
```

This will output the points on the line segment from `(0, 0)` to `(3, 4)`.