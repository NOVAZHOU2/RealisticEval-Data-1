Certainly! Below is the equivalent C++ code for the given Python function, which implements Bresenham’s line algorithm:

```cpp
#include <vector>
#include <utility> // For std::pair
#include <cmath>   // For std::abs

// Function to generate points of a line using Bresenham's line algorithm between two points.
std::vector<std::pair<int, int>> bresenham_line(int x1, int y1, int x2, int y2) {
    std::vector<std::pair<int, int>> points;
    int dx = std::abs(x2 - x1);
    int dy = -std::abs(y2 - y1);
    int sx = (x1 < x2) ? 1 : -1;
    int sy = (y1 < y2) ? 1 : -1;
    int err = dx + dy;  // error value e_xy

    while (true) {
        points.emplace_back(x1, y1);
        if (x1 == x2 && y1 == y2) {
            break;
        }
        int e2 = 2 * err;

        // Horizontal step
        if (e2 >= dy) {
            if (x1 == x2) {
                break;
            }
            err += dy;
            x1 += sx;
        }

        // Vertical step
        if (e2 <= dx) {
            if (y1 == y2) {
                break;
            }
            err += dx;
            y1 += sy;
        }
    }

    return points;
}

// Example usage:
int main() {
    auto points = bresenham_line(0, 0, 5, 3);
    for (const auto& point : points) {
        std::cout << "(" << point.first << ", " << point.second << ")" << std::endl;
    }
    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `<vector>`: Used for storing the points.
   - `<utility>`: Provides `std::pair` for storing pairs of coordinates.
   - `<cmath>`: Provides `std::abs` for absolute values.

2. **Function Definition**:
   - The function `bresenham_line` takes four integers (`x1`, `y1`, `x2`, `y2`) as input and returns a vector of pairs representing the points on the line.

3. **Initialization**:
   - `dx`: Absolute difference in x-coordinates.
   - `dy`: Absolute difference in y-coordinates (negated for consistency with the Python code).
   - `sx`: Sign of the x-direction.
   - `sy`: Sign of the y-direction.
   - `err`: Initial error value.

4. **Loop**:
   - Continues until the current point matches the end point.
   - Appends the current point to the `points` vector.
   - Updates the error and coordinates based on the conditions for horizontal and vertical steps.

5. **Example Usage**:
   - Demonstrates how to call the function and print the resulting points.

This C++ code should provide the same functionality as the Python code, generating points along the line using Bresenham’s algorithm.