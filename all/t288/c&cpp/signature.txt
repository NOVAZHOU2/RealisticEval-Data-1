Certainly! Below is the equivalent C++ code for the given Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <vector>
#include <utility> // For std::pair
#include <cmath>   // For std::abs

/**
 * Use Bresenham's line algorithm to generate a straight line between two points,
 * returning all the points that the line passes through.
 *
 * @param x1 Coordinates of the start point x.
 * @param y1 Coordinates of the start point y.
 * @param x2 Coordinates of the end point x.
 * @param y2 Coordinates of the end point y.
 * @return A vector of pairs (x and y coordinates) that the line passes through.
 */
std::vector<std::pair<int, int>> bresenham_line(int x1, int y1, int x2, int y2) {
    std::vector<std::pair<int, int>> points;
    int dx = std::abs(x2 - x1);
    int dy = -std::abs(y2 - y1);
    int sx = (x1 < x2) ? 1 : -1;
    int sy = (y1 < y2) ? 1 : -1;
    int err = dx + dy;  // error value e_xy

    while (true) {
        points.emplace_back(x1, y1);
        if (x1 == x2 && y1 == y2) {
            break;
        }
        int e2 = 2 * err;

        // Horizontal step
        if (e2 >= dy) {
            if (x1 == x2) {
                break;
            }
            err += dy;
            x1 += sx;
        }

        // Vertical step
        if (e2 <= dx) {
            if (y1 == y2) {
                break;
            }
            err += dx;
            y1 += sy;
        }
    }

    return points;
}
```

### Explanation:
1. **Header Files**:
   - `#include <vector>`: Used for the `std::vector` container to store the points.
   - `#include <utility>`: Used for `std::pair` to represent the points.
   - `#include <cmath>`: Used for `std::abs` to calculate absolute values.

2. **Function Documentation**:
   - The Python docstring is translated into a multi-line comment block (`/* ... */`) in C++.
   - The parameters and return type are documented using standard C++ documentation style.

3. **Function Signature**:
   - The function `bresenham_line` takes four integer arguments representing the start and end points of the line.
   - It returns a `std::vector<std::pair<int, int>>` containing the points on the line.

4. **Variables**:
   - `dx` and `dy` are calculated as the absolute differences in the x and y coordinates.
   - `sx` and `sy` determine the direction of movement along the x and y axes.
   - `err` is initialized as the sum of `dx` and `dy`.

5. **Loop**:
   - The loop continues until the current point matches the end point.
   - Inside the loop, the current point `(x1, y1)` is added to the `points` vector.
   - The error value `e2` is calculated as twice the current error.
   - Depending on the values of `e2`, the algorithm updates `x1` and `y1` accordingly.

6. **Return Statement**:
   - The function returns the `points` vector containing all the points on the line.

This C++ code preserves the original functionality and structure of the Python code, with appropriate translations for C++ syntax and documentation standards.