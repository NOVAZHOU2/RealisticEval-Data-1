Here is the C++ version of your Python function with the same functionality and comments:

```cpp
#include <vector>
#include <utility>

/**
 * Use Bresenham line algorithm to generate a straight line between two points,
 * returning all the points that the line passes through.
 *
 * @param x1 Coordinates of the start point x.
 * @param y1 Coordinates of the start point y.
 * @param x2 Coordinates of the end point x.
 * @param y2 Coordinates of the end point y.
 * @return A vector of pairs representing the points that the line passes through.
 */
std::vector<std::pair<int, int>> bresenham_line(int x1, int y1, int x2, int y2) {
    std::vector<std::pair<int, int>> points;
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int sx = (x1 < x2) ? 1 : -1;
    int sy = (y1 < y2) ? 1 : -1;
    int err = dx - dy;

    while(true){
        points.push_back(std::make_pair(x1, y1));
        if ((x1 == x2) && (y1 == y2)) break;
        int e2 = 2 * err;
        if (e2 > -dy){err -= dy; x1 += sx;}
        if (e2 < dx){err += dx; y1 += sy;}
    }

    return points;
}
```

This C++ code defines a `bresenham_line` function which takes four integer parameters (`x1`, `y1`, `x2`, `y2`) representing the coordinates of the start and end points of a line. It returns a vector of pairs, where each pair represents a point on the line. The function uses the Bresenham line drawing algorithm to calculate these points.