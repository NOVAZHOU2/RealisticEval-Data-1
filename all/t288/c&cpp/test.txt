Sure! Below is the equivalent C++ test class using the Catch2 testing framework. This includes the implementation of the `bresenham_line` function and the corresponding test cases.

First, make sure you have Catch2 installed and included in your project. You can install Catch2 via vcpkg or include it directly as a submodule.

Here's the complete C++ code:

```cpp
#include <catch2/catch.hpp>
#include <vector>
#include <utility>

// Function to generate a straight line between two points
std::vector<std::pair<int, int>> bresenham_line(int x1, int y1, int x2, int y2) {
    std::vector<std::pair<int, int>> points;

    bool steep = false;
    if (std::abs(y2 - y1) > std::abs(x2 - x1)) {
        std::swap(x1, y1);
        std::swap(x2, y2);
        steep = true;
    }

    if (x1 > x2) {
        std::swap(x1, x2);
        std::swap(y1, y2);
    }

    int dx = x2 - x1;
    int dy = std::abs(y2 - y1);

    int error = dx / 2;
    int ystep = (y1 < y2) ? 1 : -1;
    int y = y1;

    for (int x = x1; x <= x2; ++x) {
        if (steep) {
            points.emplace_back(y, x);
        } else {
            points.emplace_back(x, y);
        }
        error -= dy;
        if (error < 0) {
            y += ystep;
            error += dx;
        }
    }

    return points;
}

TEST_CASE("Bresenham Line Algorithm") {
    SECTION("Line from (1, 1) to (4, 5)") {
        auto result = bresenham_line(1, 1, 4, 5);
        REQUIRE(result == std::vector<std::pair<int, int>>{{1, 1}, {2, 2}, {3, 3}, {4, 4}});
    }

    SECTION("Line from (1, 1) to (5, 1)") {
        auto result = bresenham_line(1, 1, 5, 1);
        REQUIRE(result == std::vector<std::pair<int, int>>{{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}});
    }

    SECTION("Line from (1, 1) to (1, 5)") {
        auto result = bresenham_line(1, 1, 1, 5);
        REQUIRE(result == std::vector<std::pair<int, int>>{{1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}});
    }

    SECTION("Line from (5, 1) to (1, 1)") {
        auto result = bresenham_line(5, 1, 1, 1);
        REQUIRE(result == std::vector<std::pair<int, int>>{{5, 1}, {4, 1}, {3, 1}, {2, 1}, {1, 1}});
    }

    SECTION("Line from (1, 5) to (1, 1)") {
        auto result = bresenham_line(1, 5, 1, 1);
        REQUIRE(result == std::vector<std::pair<int, int>>{{1, 5}, {1, 4}, {1, 3}, {1, 2}, {1, 1}});
    }
}
```

### Explanation:

1. **Function Definition**:
   - The `bresenham_line` function generates a straight line between two points using the Bresenham line algorithm.
   - It handles the cases where the line is steep (more vertical than horizontal) by swapping the x and y coordinates.
   - It ensures that the starting point is always the one with the smaller x-coordinate.

2. **Test Cases**:
   - Each `SECTION` in the `TEST_CASE` defines a specific test scenario.
   - The `REQUIRE` macro is used to assert that the output of the `bresenham_line` function matches the expected result.

Make sure you compile this code with Catch2 support. For example, you can use the following command with g++:

```sh
g++ -std=c++17 -o test test.cpp -I/path/to/catch2/include
```

And then run the test executable:

```sh
./test
```

This will execute the tests and report any failures.