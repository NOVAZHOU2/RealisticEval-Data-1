Sure! Below is an equivalent C++ test case using Catch2 for the given Python unittest test class. Note that I'll assume you want to test a function named `bresenham_line` which takes four integer parameters and returns a vector of pairs representing the points on the line generated by the Bresenham algorithm.

First, let's define the `bresenham_line` function in C++:

```cpp
#include <vector>
#include <utility>

std::vector<std::pair<int, int>> bresenham_line(int x1, int y1, int x2, int y2) {
    std::vector<std::pair<int, int>> points;
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int sx = (x1 < x2) ? 1 : -1;
    int sy = (y1 < y2) ? 1 : -1;
    int err = dx - dy;

    while (true) {
        points.emplace_back(x1, y1);
        if (x1 == x2 && y1 == y2)
            break;
        int e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x1 += sx;
        }
        if (e2 < dx) {
            err += dx;
            y1 += sy;
        }
    }

    return points;
}
```

Next, let's write the Catch2 test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

#include <vector>
#include <utility>

// Function declaration
std::vector<std::pair<int, int>> bresenham_line(int x1, int y1, int x2, int y2);

TEST_CASE("Bresenham Line Algorithm", "[bresenham]") {
    SECTION("Line from (0, 0) to (3, 3)") {
        auto result = bresenham_line(0, 0, 3, 3);
        REQUIRE(result.size() == 4);
        CHECK(result[0] == std::make_pair(0, 0));
        CHECK(result[1] == std::make_pair(1, 1));
        CHECK(result[2] == std::make_pair(2, 2));
        CHECK(result[3] == std::make_pair(3, 3));
    }

    SECTION("Line from (0, 0) to (3, -3)") {
        auto result = bresenham_line(0, 0, 3, -3);
        REQUIRE(result.size() == 4);
        CHECK(result[0] == std::make_pair(0, 0));
        CHECK(result[1] == std::make_pair(1, -1));
        CHECK(result[2] == std::make_pair(2, -2));
        CHECK(result[3] == std::make_pair(3, -3));
    }

    SECTION("Line from (0, 0) to (-3, 3)") {
        auto result = bresenham_line(0, 0, -3, 3);
        REQUIRE(result.size() == 4);
        CHECK(result[0] == std::make_pair(0, 0));
        CHECK(result[1] == std::make_pair(-1, 1));
        CHECK(result[2] == std::make_pair(-2, 2));
        CHECK(result[3] == std::make_pair(-3, 3));
    }

    SECTION("Line from (0, 0) to (-3, -3)") {
        auto result = bresenham_line(0, 0, -3, -3);
        REQUIRE(result.size() == 4);
        CHECK(result[0] == std::make_pair(0, 0));
        CHECK(result[1] == std::make_pair(-1, -1));
        CHECK(result[2] == std::make_pair(-2, -2));
        CHECK(result[3] == std::make_pair(-3, -3));
    }

    SECTION("Horizontal line") {
        auto result = bresenham_line(0, 0, 5, 0);
        REQUIRE(result.size() == 6);
        for (int i = 0; i <= 5; ++i) {
            CHECK(result[i] == std::make_pair(i, 0));
        }
    }

    SECTION("Vertical line") {
        auto result = bresenham_line(0, 0, 0, 5);
        REQUIRE(result.size() == 6);
        for (int i = 0; i <= 5; ++i) {
            CHECK(result[i] == std::make_pair(0, i));
        }
    }
}
```

This C++ code includes the `bresenham_line` function and several test cases using Catch2. Each test case checks different scenarios, such as lines with positive and negative slopes, horizontal, and vertical lines.