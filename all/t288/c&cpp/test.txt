Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. This conversion ensures that the functionality and logic of the tests are preserved, with appropriate assertions and adjustments for the C++ language and Catch2 framework.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <utility>

// Function to generate points of a line using Bresenham's line algorithm between two points.
std::vector<std::pair<int, int>> bresenham_line(int x1, int y1, int x2, int y2) {
    std::vector<std::pair<int, int>> points;
    int dx = std::abs(x2 - x1);
    int dy = -std::abs(y2 - y1);
    int sx = (x1 < x2) ? 1 : -1;
    int sy = (y1 < y2) ? 1 : -1;
    int err = dx + dy;  // error value e_xy

    while (true) {
        points.emplace_back(x1, y1);
        if (x1 == x2 && y1 == y2) {
            break;
        }
        int e2 = 2 * err;

        // Horizontal step
        if (e2 >= dy) {
            if (x1 == x2) {
                break;
            }
            err += dy;
            x1 += sx;
        }

        // Vertical step
        if (e2 <= dx) {
            if (y1 == y2) {
                break;
            }
            err += dx;
            y1 += sy;
        }
    }

    return points;
}

TEST_CASE("Test Bresenham Line Algorithm") {
    SECTION("Test a horizontal line from left to right") {
        auto result = bresenham_line(1, 5, 10, 5);
        std::vector<std::pair<int, int>> expected = {
            {1, 5}, {2, 5}, {3, 5}, {4, 5}, {5, 5}, {6, 5}, {7, 5}, {8, 5}, {9, 5}, {10, 5}
        };
        REQUIRE(result == expected);
    }

    SECTION("Test a vertical line from top to bottom") {
        auto result = bresenham_line(7, 2, 7, 10);
        std::vector<std::pair<int, int>> expected = {
            {7, 2}, {7, 3}, {7, 4}, {7, 5}, {7, 6}, {7, 7}, {7, 8}, {7, 9}, {7, 10}
        };
        REQUIRE(result == expected);
    }

    SECTION("Test a diagonal line") {
        auto result = bresenham_line(0, 0, 5, 5);
        std::vector<std::pair<int, int>> expected = {
            {0, 0}, {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}
        };
        REQUIRE(result == expected);
    }

    SECTION("Test a line with a negative slope") {
        auto result = bresenham_line(6, 8, 1, 3);
        std::vector<std::pair<int, int>> expected = {
            {6, 8}, {5, 7}, {4, 6}, {3, 5}, {2, 4}, {1, 3}
        };
        REQUIRE(result == expected);
    }

    SECTION("Test a line that is steeper than it is wide") {
        auto result = bresenham_line(2, 2, 3, 7);
        std::vector<std::pair<int, int>> expected = {
            {2, 2}, {2, 3}, {2, 4}, {3, 5}, {3, 6}, {3, 7}
        };
        REQUIRE(result == expected);
    }
}
```

### Explanation:
1. **Header Files**:
   - `#include <catch2/catch_test_macros.hpp>`: Required for Catch2 testing macros.
   - `#include <vector>`: Used for the `std::vector` container to store the points.
   - `#include <utility>`: Used for `std::pair` to represent the points.
   - `#include <cmath>`: Used for `std::abs` to calculate absolute values.

2. **Function Definition**:
   - The `bresenham_line` function is defined as before, implementing Bresenham's line algorithm.

3. **Test Class**:
   - The `TEST_CASE` macro is used to define a test case named "Test Bresenham Line Algorithm".
   - Each test case is defined within a `SECTION` macro, providing a clear description of what each section tests.

4. **Assertions**:
   - The `REQUIRE` macro is used to assert that the result of the `bresenham_line` function matches the expected result.
   - Each test case initializes the expected result as a `std::vector<std::pair<int, int>>` and compares it with the actual result.

This C++ code preserves the original functionality and logic of the Python tests, with appropriate translations for C++ syntax and the Catch2 testing framework.