Sure, let's convert the Python unittest code into a JUnit test class in Java. First, we need to implement the `bresenham_line` function in Java. Then, we'll create a JUnit test class to verify its correctness.

Here's the Java implementation of the `bresenham_line` method and the JUnit test class:

### Java Implementation of `bresenham_line`

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class LineGenerator {

    /**
     * Generates a straight line between two points using Bresenham's line algorithm.
     * 
     * @param x1 The x-coordinate of the start point.
     * @param y1 The y-coordinate of the start point.
     * @param x2 The x-coordinate of the end point.
     * @param y2 The y-coordinate of the end point.
     * @return A list of points (tuples of x and y coordinates) that the line passes through.
     */
    public static List<int[]> bresenhamLine(int x1, int y1, int x2, int y2) {
        List<int[]> points = new ArrayList<>();

        // Handle vertical or horizontal lines first
        if (x1 == x2) {
            for (int i = Math.min(y1, y2); i <= Math.max(y1, y2); i++) {
                points.add(new int[]{x1, i});
            }
        } else if (y1 == y2) {
            for (int i = Math.min(x1, x2); i <= Math.max(x1, x2); i++) {
                points.add(new int[]{i, y1});
            }
        } else {
            int dx = Math.abs(x2 - x1);
            int dy = Math.abs(y2 - y1);

            boolean xIncrement = x1 < x2;
            boolean yIncrement = y1 < y2;

            int x = x1;
            int y = y1;

            if (dx > dy) {
                double error = 0;
                double dErr = 2 * dy;

                while (x != x2) {
                    points.add(new int[]{x, y});

                    error += dErr;
                    if (error > dx) {
                        y += (yIncrement ? 1 : -1);
                        error -= 2 * dx;
                    }
                    x += (xIncrement ? 1 : -1);
                }

                points.add(new int[]{x, y});
            } else {
                double error = 0;
                double dErr = 2 * dx;

                while (y != y2) {
                    points.add(new int[]{x, y});

                    error += dErr;
                    if (error > dy) {
                        x += (xIncrement ? 1 : -1);
                        error -= 2 * dy;
                    }
                    y += (yIncrement ? 1 : -1);
                }

                points.add(new int[]{x, y});
            }
        }

        return points;
    }
}
```

### JUnit Test Class

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.List;

public class Tester {

    @Test
    public void testBresenhamLine() {
        // Test case 1: Horizontal line
        List<int[]> expectedHorizontal = Arrays.asList(
            new int[]{1, 2},
            new int[]{2, 2},
            new int[]{3, 2}
        );
        List<int[]> actualHorizontal = LineGenerator.bresenhamLine(1, 2, 3, 2);
        assertEquals(expectedHorizontal.size(), actualHorizontal.size());
        assertTrue(Arrays.deepEquals(expectedHorizontal.toArray(), actualHorizontal.toArray()));

        // Test case 2: Vertical line
        List<int[]> expectedVertical = Arrays.asList(
            new int[]{2, 1},
            new int[]{2, 2},
            new int[]{2, 3}
        );
        List<int[]> actualVertical = LineGenerator.bresenhamLine(2, 1, 2, 3);
        assertEquals(expectedVertical.size(), actualVertical.size());
        assertTrue(Arrays.deepEquals(expectedVertical.toArray(), actualVertical.toArray()));

        // Test case 3: Diagonal line
        List<int[]> expectedDiagonal = Arrays.asList(
            new int[]{1, 1},
            new int[]{2, 2},
            new int[]{3, 3}
        );
        List<int[]> actualDiagonal = LineGenerator.bresenhamLine(1, 1, 3, 3);
        assertEquals(expectedDiagonal.size(), actualDiagonal.size());
        assertTrue(Arrays.deepEquals(expectedDiagonal.toArray(), actualDiagonal.toArray()));
    }
}
```

### Explanation:
1. **Java Class `LineGenerator`:**
   - This class contains the `bresenhamLine` method which generates the line using Bresenham's algorithm.
   - It handles vertical and horizontal lines separately for simplicity.

2. **JUnit Test Class `Tester`:**
   - The test class is annotated with `@Test` to indicate that it is a test method.
   - We use `assertEquals` to check the size of the lists and `assertTrue` with `Arrays.deepEquals` to compare the contents of the lists.
   - Three test cases are included: one for horizontal, one for vertical, and one for diagonal lines.

This setup ensures that the functionality and logic of the tests are preserved while adapting to the differences in syntax and structure between Python and Java.