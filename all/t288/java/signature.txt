Sure, here is the equivalent Java code for the given Python function:

```java
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

public class BresenhamLine {

    /**
     * Uses the Bresenham line algorithm to generate a straight line between two points,
     * returning all the points that the line passes through.
     *
     * @param x1 Coordinates of the start point x.
     * @param y1 Coordinates of the start point y.
     * @param x2 Coordinates of the end point x.
     * @param y2 Coordinates of the end point y.
     * @return A list of points (pairs of x and y coordinates) that the line passes through.
     */
    public static List<int[]> bresenhamLine(int x1, int y1, int x2, int y2) {
        // Implementation of the Bresenham line algorithm goes here
        List<int[]> points = new ArrayList<>();

        // Example implementation (pseudo-code):
        // Bresenham's line algorithm steps...
        // Add each point to the list

        return points;
    }

    public static void main(String[] args) {
        List<int[]> points = bresenhamLine(0, 0, 5, 5);
        for (int[] point : points) {
            System.out.println(Arrays.toString(point));
        }
    }
}
```

### Explanation:
1. **Class Definition**: The Python function is converted into a static method within a Java class named `BresenhamLine`.
2. **Type Annotations**: The Python `List[Tuple[int, int]]` is converted to a Java `List<int[]>`, where each `int[]` represents a tuple of `(x, y)` coordinates.
3. **Javadoc Comments**: The Python docstring is converted to Java-style Javadoc comments.
4. **Method Signature**: The method signature is adjusted to match Java syntax and conventions.

This conversion preserves the original functionality and structure while adapting it to Java's syntax and conventions.