Here's how you can convert your JavaScript function into TypeScript:

```typescript
/**
 * Calculates the time difference between a given date and the current date.
 *
 * @param {Date | string} givenDate - The date to compare against the current date.
 * @returns {{days: number, hours: number, minutes: number}} - An object containing days, hours, and minutes elapsed.
 */
function calculateTimeDifference(givenDate: Date | string): {days: number, hours: number, minutes: number} {
    let currentDate = new Date();
    let targetDate = typeof givenDate === 'string' ? new Date(givenDate) : givenDate;

    if (isNaN(targetDate.getTime())) {
        throw new Error('Invalid date provided');
    }

    let timeDifference = Math.abs(currentDate.getTime() - targetDate.getTime());
    let seconds = Math.floor(timeDifference / 1000);
    let minutes = Math.floor(seconds / 60);
    let hours = Math.floor(minutes / 60);
    let days = Math.floor(hours / 24);

    hours %= 24;
    minutes %= 60;
    seconds %= 60;

    return {days, hours, minutes};
}
```

In the TypeScript version, I've added type annotations for the parameters and the return value of the `calculateTimeDifference` function. This includes specifying that the parameter `givenDate` can be either a `Date` or a `string`, and that the return value is an object with properties `days`, `hours`, and `minutes`. Additionally, error handling has been added to check if the provided date is valid.