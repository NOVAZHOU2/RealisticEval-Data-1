Sure! Here's how you can convert the JavaScript Jest test case to TypeScript using `describe` blocks:

```typescript
import { calculateTimeDifference } from './yourFilePath'; // Adjust the import path accordingly

describe('calculateTimeDifference', () => {
  it('should calculate the time difference correctly for a future date', () => {
    const givenDate = new Date(Date.now() + (24 * 60 * 60 * 1000)); // Future date
    const result = calculateTimeDifference(givenDate);

    expect(result.days).toBe(1);
    expect(result.hours).toBe(0);
    expect(result.minutes).toBe(0);
  });

  it('should calculate the time difference correctly for a past date', () => {
    const givenDate = new Date(Date.now() - (24 * 60 * 60 * 1000)); // Past date
    const result = calculateTimeDifference(givenDate);

    expect(result.days).toBe(-1);
    expect(result.hours).toBe(0);
    expect(result.minutes).toBe(0);
  });

  it('should calculate the time difference correctly for the current date', () => {
    const givenDate = new Date(); // Current date
    const result = calculateTimeDifference(givenDate);

    expect(result.days).toBe(0);
    expect(result.hours).toBe(0);
    expect(result.minutes).toBe(0);
  });
});
```

Make sure that your `calculateTimeDifference` function is properly typed in TypeScript. For example:

```typescript
/**
 * Calculates the time difference between a given date and the current date.
 *
 * @param {Date | string} givenDate - The date to compare against the current date.
 * @returns {Object} - An object containing days, hours, and minutes elapsed.
 * {
 *         days: number,
 *         hours: number,
 *         minutes: number,
 * }
 */
export function calculateTimeDifference(givenDate: Date | string): { days: number; hours: number; minutes: number } {
  const currentDate = new Date();
  let diffInMs: number;

  if (typeof givenDate === 'string') {
    diffInMs = new Date(givenDate).getTime() - currentDate.getTime();
  } else {
    diffInMs = givenDate.getTime() - currentDate.getTime();
  }

  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));
  const diffInHours = Math.floor((diffInMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const diffInMinutes = Math.floor((diffInMs % (1000 * 60 * 60)) / (1000 * 60));

  return {
    days: diffInDays,
    hours: diffInHours,
    minutes: diffInMinutes,
  };
}
```

This ensures that your function and tests are both type-safe and work as expected.