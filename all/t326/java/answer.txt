Certainly! Below is the equivalent Java code for the JavaScript function `calculateTimeDifference`.

```java
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class TimeDifferenceCalculator {

    /**
     * Calculates the time difference between a given date and the current date.
     *
     * @param givenDate - The date to compare against the current date in ISO format (e.g., "yyyy-MM-ddTHH:mm:ss").
     * @return An object containing days, hours, and minutes elapsed.
     */
    public static TimeDifferenceResult calculateTimeDifference(String givenDate) {
        // Parse the given date string into a LocalDateTime object
        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        LocalDateTime givenDateTime = LocalDateTime.parse(givenDate, formatter);

        // Get the current date and time
        LocalDateTime now = LocalDateTime.now();

        // Calculate the duration between the two dates
        Duration duration = Duration.between(now, givenDateTime);

        // Extract days, hours, and minutes from the duration
        long days = duration.toDays();
        long hours = duration.toHours() % 24; // Ensure hours are within 0-23
        long minutes = duration.toMinutes() % 60; // Ensure minutes are within 0-59

        return new TimeDifferenceResult(days, hours, minutes);
    }

    public static void main(String[] args) {
        String givenDate = "2023-10-01T12:00:00"; // Example date in ISO format
        TimeDifferenceResult result = calculateTimeDifference(givenDate);
        System.out.println("Days: " + result.getDays());
        System.out.println("Hours: " + result.getHours());
        System.out.println("Minutes: " + result.getMinutes());
    }
}

class TimeDifferenceResult {
    private final long days;
    private final long hours;
    private final long minutes;

    public TimeDifferenceResult(long days, long hours, long minutes) {
        this.days = days;
        this.hours = hours;
        this.minutes = minutes;
    }

    public long getDays() {
        return days;
    }

    public long getHours() {
        return hours;
    }

    public long getMinutes() {
        return minutes;
    }
}
```

### Explanation:
1. **Parsing the Date**: The `givenDate` string is parsed into a `LocalDateTime` object using `DateTimeFormatter.ISO_LOCAL_DATE_TIME`.
2. **Current Date and Time**: The current date and time are obtained using `LocalDateTime.now()`.
3. **Duration Calculation**: The `Duration.between` method calculates the duration between the current date and the given date.
4. **Extracting Components**: The duration is then broken down into days, hours, and minutes.
5. **Returning Result**: The result is encapsulated in a custom `TimeDifferenceResult` class.

This Java code should provide similar functionality to the original JavaScript function.