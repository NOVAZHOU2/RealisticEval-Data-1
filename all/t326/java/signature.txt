Sure, here is the equivalent Java method with the same functionality and comments:

```java
import java.time.LocalDateTime;
import java.time.Duration;

/**
 * Calculates the time difference between a given date and the current date.
 *
 * @param givenDate - The date to compare against the current date.
 * @return A TimeDifference object containing days, hours, and minutes elapsed.
 */
public class DateUtils {

    public static TimeDifference calculateTimeDifference(String givenDate) {
        LocalDateTime currentDate = LocalDateTime.now();
        LocalDateTime dateTimeToCompare = LocalDateTime.parse(givenDate);
        
        Duration duration = Duration.between(currentDate, dateTimeToCompare);

        long days = duration.toDays();
        long hours = duration.toHours() % 24;
        long minutes = duration.toMinutes() % 60;

        return new TimeDifference(days, hours, minutes);
    }

    // Helper class to hold the result
    public static class TimeDifference {
        private final long days;
        private final long hours;
        private final long minutes;

        public TimeDifference(long days, long hours, long minutes) {
            this.days = days;
            this.hours = hours;
            this.minutes = minutes;
        }

        public long getDays() {
            return days;
        }

        public long getHours() {
            return hours;
        }

        public long getMinutes() {
            return minutes;
        }
    }
}
```

### Explanation:
- **Java Method**: `calculateTimeDifference` takes a `String` parameter representing the date in ISO format (e.g., "yyyy-MM-ddTHH:mm:ss").
- **LocalDateTime**: Used to represent both the current date and the provided date.
- **Duration**: Used to calculate the difference between the two dates.
- **TimeDifference Class**: A helper class to encapsulate the results of the calculation.

This Java code should provide the same functionality as your original JavaScript function.