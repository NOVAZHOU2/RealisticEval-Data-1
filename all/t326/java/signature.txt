Sure, here is the equivalent Java method signature with the same comments:

```java
/**
 * Calculates the time difference between a given date and the current date.
 *
 * @param givenDate The date to compare against the current date. Can be either a Date object or a String in ISO 8601 format.
 * @return An object containing days, hours, and minutes elapsed.
 * {
 *     days: days,
 *     hours: remainingHours,
 *     minutes: remainingMinutes,
 * }
 */
public TimeDifference calculateTimeDifference(Object givenDate) {
}
```

In this Java version:
- I've used `Object` for the parameter `givenDate` because it can accept either a `Date` object or a `String`.
- I've assumed you have a class named `TimeDifference` that holds the fields `days`, `hours`, and `minutes`.

Here's an example of how you might implement this method:

```java
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class DateUtils {

    /**
     * Calculates the time difference between a given date and the current date.
     *
     * @param givenDate The date to compare against the current date. Can be either a Date object or a String in ISO 8601 format.
     * @return An object containing days, hours, and minutes elapsed.
     */
    public static TimeDifference calculateTimeDifference(Object givenDate) {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime targetDateTime;

        if (givenDate instanceof Date) {
            targetDateTime = ((Date) givenDate).toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
        } else if (givenDate instanceof String) {
            DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;
            targetDateTime = LocalDateTime.parse((String) givenDate, formatter);
        } else {
            throw new IllegalArgumentException("Invalid date type");
        }

        Duration duration = Duration.between(now, targetDateTime);
        long days = duration.toDays();
        long hours = duration.toHours() % 24;
        long minutes = duration.toMinutes() % 60;

        return new TimeDifference(days, hours, minutes);
    }

    // Helper class to hold the result
    public static class TimeDifference {
        private final long days;
        private final long hours;
        private final long minutes;

        public TimeDifference(long days, long hours, long minutes) {
            this.days = days;
            this.hours = hours;
            this.minutes = minutes;
        }

        // Getters and toString method
        public long getDays() {
            return days;
        }

        public long getHours() {
            return hours;
        }

        public long getMinutes() {
            return minutes;
        }

        @Override
        public String toString() {
            return "TimeDifference{" +
                    "days=" + days +
                    ", hours=" + hours +
                    ", minutes=" + minutes +
                    '}';
        }
    }
}
```

This implementation uses Java 8's `java.time` package to handle dates and times more robustly than the old `java.util.Date` and `java.util.Calendar`.