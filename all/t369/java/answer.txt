Here is the equivalent Java code for the provided Python code:

```java
package org.real.temp;

import java.util.Arrays;

public class Answer {

    private static void printBoard(char[][] board) {
        for (char[] row : board) {
            System.out.println(new String(row).replace(".", " "));
        }
        System.out.println();
    }

    private static boolean isSafe(char[][] board, int row, int col) {
        // Check this row on the left side
        for (int i = 0; i < col; i++) {
            if (board[row][i] == 'Q') {
                return false;
            }
        }

        // Check upper diagonal on the left side
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        // Check lower diagonal on the left side
        for (int i = row, j = col; i < board.length && j >= 0; i++, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }

    private static boolean solveQueens(char[][] board, int col) {
        // Base case: If all queens are placed
        if (col >= board.length) {
            printBoard(board);
            return true;
        }

        // Consider this column and try placing this queen in all rows one by one
        boolean solutionFound = false;
        for (int i = 0; i < board.length; i++) {
            if (isSafe(board, i, col)) {
                board[i][col] = 'Q';
                if (solveQueens(board, col + 1)) {
                    solutionFound = true;
                }
                board[i][col] = '.';  // Backtrack
            }
        }

        return solutionFound;
    }

    private static void eightQueens() {
        char[][] board = new char[8][8];
        for (char[] row : board) {
            Arrays.fill(row, '.');
        }
        if (!solveQueens(board, 0)) {
            System.out.println("No solution");
        }
    }

    public static void main(String[] args) {
        eightQueens();
    }
}
```

### Explanation:
1. **Method Definitions**:
   - `printBoard`: This method prints the board with spaces between characters.
   - `isSafe`: This method checks if it is safe to place a queen at a given position.
   - `solveQueens`: This method solves the N-Queens problem recursively.
   - `eightQueens`: This method initializes the board and calls `solveQueens` to find solutions.

2. **Initialization**:
   - The board is initialized as a 2D array of characters, where each cell is initially set to `'.'`.

3. **Recursion and Backtracking**:
   - The `solveQueens` method uses recursion and backtracking to find all possible solutions.
   - The base case is when all queens are placed (`col >= board.length`).

4. **Main Method**:
   - The `main` method calls `eightQueens` to start the program execution.

This Java code maintains the same functionality and logic as the original Python code but adapts to Java's syntax and conventions.