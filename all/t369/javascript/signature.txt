Sure! Below is the JavaScript version of the Python function `eight_queens` with the same functionality and comments preserved.

```javascript
/**
 * Solve the Eight Queens problem.
 * If a solution is found, it will print out the configuration of the chessboard.
 * If all queens cannot be placed, it will print "No solution".
 *
 * Example output:
 * . . Q . . . . .
 * . . . . Q . . .
 * . Q . . . . . .
 * . . . . . . . Q
 * . . . . . Q . .
 * . . . Q . . . .
 * . . . . . . Q .
 * Q . . . . . . .
 */
function eightQueens() {
    const n = 8;
    let board = Array.from({ length: n }, () => Array(n).fill('.'));
    let solutions = [];

    function canPlace(row, col) {
        for (let i = 0; i < row; i++) {
            if (board[i][col] === 'Q') return false;
            if (col - (row - i) >= 0 && board[i][col - (row - i)] === 'Q') return false;
            if (col + (row - i) < n && board[i][col + (row - i)] === 'Q') return false;
        }
        return true;
    }

    function solve(row) {
        if (row === n) {
            solutions.push(board.map(row => row.join('')));
            return;
        }
        for (let col = 0; col < n; col++) {
            if (canPlace(row, col)) {
                board[row][col] = 'Q';
                solve(row + 1);
                board[row][col] = '.';
            }
        }
    }

    solve(0);

    if (solutions.length > 0) {
        solutions.forEach(solution => {
            console.log(solution.join('\n'));
        });
    } else {
        console.log("No solution");
    }
}

// Call the function to solve the Eight Queens problem
eightQueens();
```

This JavaScript function uses recursion to place queens on the chessboard and checks for conflicts using the `canPlace` function. If a valid solution is found, it prints the board configuration. If no solution exists, it prints "No solution".