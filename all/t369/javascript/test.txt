Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and features.

### Python Code:
```python
import unittest
from unittest.mock import patch
from io import StringIO

class TestEightQueens(unittest.TestCase):
    def setUp(self):
        self.board = [['.' for _ in range(8)] for _ in range(8)]

    def test_solution_exists(self):
        with patch('sys.stdout', new_callable=StringIO) as fake_out:
            eight_queens()
            self.assertTrue("Q" in fake_out.getvalue(), "The board should contain at least one queen.")

    def test_correct_number_of_queens(self):
        with patch('sys.stdout', new_callable=StringIO) as fake_out:
            eight_queens()
            output = fake_out.getvalue().strip().split('\n\n')  # Split the output into blocks for each board
            for board in output:
                # Count number of 'Q's in each board
                num_queens = board.count('Q')
                self.assertEqual(num_queens, 8, "Each board should contain exactly 8 queens.")

    def test_no_solution_scenario(self):
        # As the Eight Queens always has a solution for an 8x8 board,
        # to test the 'No solution' output we need a scenario where no solution exists.
        # We will manipulate the board to a smaller size where no solution is possible.
        # Here we consider a 3x3 board for simplicity.
        def no_solution_queens():
            board = [['.' for _ in range(3)] for _ in range(3)]
            if not solve_queens(board, 0):
                print("No solution")

        with patch('sys.stdout', new_callable=StringIO) as fake_out:
            no_solution_queens()
            self.assertIn("No solution", fake_out.getvalue(), "Should print 'No solution' when no solution exists.")
```

### Equivalent Jest Test Suite:

```javascript
const { eightQueens, solveQueens } = require('./eightQueens'); // Import the functions from your implementation file

describe('TestEightQueens', () => {
    beforeEach(() => {
        // Setup any common state here if needed
    });

    describe('test_solution_exists', () => {
        it('should contain at least one queen', () => {
            const fakeOut = { data: '' };
            const writeMock = (chunk) => {
                fakeOut.data += chunk;
            };

            const originalConsoleLog = console.log;
            console.log = writeMock;

            eightQueens();

            expect(fakeOut.data.includes('Q')).toBe(true);

            console.log = originalConsoleLog;
        });
    });

    describe('test_correct_number_of_queens', () => {
        it('each board should contain exactly 8 queens', () => {
            const fakeOut = { data: '' };
            const writeMock = (chunk) => {
                fakeOut.data += chunk;
            };

            const originalConsoleLog = console.log;
            console.log = writeMock;

            eightQueens();

            const output = fakeOut.data.trim().split('\n\n');
            for (const board of output) {
                const numQueens = (board.match(/Q/g) || []).length;
                expect(numQueens).toEqual(8);
            }

            console.log = originalConsoleLog;
        });
    });

    describe('test_no_solution_scenario', () => {
        it('should print "No solution" when no solution exists', () => {
            const fakeOut = { data: '' };
            const writeMock = (chunk) => {
                fakeOut.data += chunk;
            };

            const originalConsoleLog = console.log;
            console.log = writeMock;

            function noSolutionQueens() {
                const board = Array.from({ length: 3 }, () => Array(3).fill('.'));
                if (!solveQueens(board, 0)) {
                    console.log("No solution");
                }
            }

            noSolutionQueens();

            expect(fakeOut.data.includes('No solution')).toBe(true);

            console.log = originalConsoleLog;
        });
    });
});
```

### Explanation:
1. **Imports**:
   - Import the necessary functions (`eightQueens` and `solveQueens`) from the implementation file.

2. **describe Blocks**:
   - Use `describe` blocks to group related tests.
   - Use `it` blocks to define individual test cases.

3. **Mocking Console Output**:
   - In Jest, we can mock `console.log` to capture the output.
   - Use a custom `writeMock` function to accumulate the output.

4. **Assertions**:
   - Use `expect` to perform assertions.
   - Ensure that the captured output contains the expected values.

5. **Test Scenarios**:
   - `test_solution_exists`: Checks if the board contains at least one queen.
   - `test_correct_number_of_queens`: Ensures each board contains exactly 8 queens.
   - `test_no_solution_scenario`: Tests the scenario where no solution exists.

This Jest test suite maintains the same functionality and logic as the original Python unittest class, with appropriate adaptations for Jest's syntax and features.