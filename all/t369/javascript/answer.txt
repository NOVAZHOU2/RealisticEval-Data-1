Here's the JavaScript version of your Python code:

```javascript
function eightQueens() {
    const board = Array.from({ length: 8 }, () => Array(8).fill('.'));
    
    function isValid(row, col) {
        for (let i = 0; i < row; i++) {
            if (board[i][col] === 'Q') return false;
            if (col - (row - i) >= 0 && board[i][col - (row - i)] === 'Q') return false;
            if (col + (row - i) < 8 && board[i][col + (row - i)] === 'Q') return false;
        }
        return true;
    }

    function placeQueen(row) {
        if (row === 8) {
            console.log(board.map(row => row.join(' ')).join('\n'));
            return true;
        }

        for (let col = 0; col < 8; col++) {
            if (isValid(row, col)) {
                board[row][col] = 'Q';
                if (placeQueen(row + 1)) return true;
                board[row][col] = '.';
            }
        }
        return false;
    }

    if (!placeQueen(0)) {
        console.log("No solution");
    }
}

eightQueens();
```

This JavaScript function `eightQueens` solves the Eight Queens problem using backtracking. It uses a 2D array `board` to represent the chessboard and places queens one by one in different rows. The `isValid` function checks if placing a queen at a given position `(row, col)` is valid or not. If a valid position is found, it recursively tries to place the next queen in the next row. If no valid position is found after trying all columns, it backtracks to the previous row and tries another column. If all queens are successfully placed, it prints the board configuration. If no solution is found, it prints "No solution".