To convert the provided Python unittest test class into an equivalent test class using Catch2 in C++, we need to create a similar setup for solving the Eight Queens problem and then write tests to verify its correctness. Below is the equivalent C++ code using the Catch2 testing framework.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <iostream>

// Define the function to solve the Eight Queens problem
bool isSafe(const std::vector<int>& board, int row, int col) {
    // Check this row on left side
    for (int i = 0; i < col; ++i)
        if (board[i] == row || board[i] - i == row - col || board[i] + i == row + col)
            return false;
    return true;
}

bool solveNQueens(std::vector<int>& board, int col) {
    if (col >= 8) {
        // A solution is found, print the configuration
        for (int i = 0; i < 8; ++i) {
            for (int j = 0; j < 8; ++j)
                std::cout << (board[j] == i ? "Q " : ". ");
            std::cout << "\n";
        }
        std::cout << "\n";
        return true;
    }

    bool res = false;
    for (int i = 0; i < 8; ++i) {
        if (isSafe(board, i, col)) {
            board[col] = i;
            res = solveNQueens(board, col + 1) || res;
        }
    }
    return res;
}

void eightQueens() {
    std::vector<int> board(8);
    if (!solveNQueens(board, 0))
        std::cout << "No solution\n";
}

TEST_CASE("Eight Queens Problem") {
    SECTION("Solution Exists") {
        std::ostringstream oss;
        std::streambuf* prevcoutbuf = std::cout.rdbuf(oss.rdbuf());
        
        eightQueens();
        
        std::cout.rdbuf(prevcoutbuf); // Restore cout
        
        REQUIRE(oss.str().find("No solution") == std::string::npos);
        // Additional checks can be added here to verify the printed solution
    }

    SECTION("No Solution for Invalid Configuration") {
        // This section is not applicable since the eightQueens function always finds a valid solution
        // or prints "No solution" if none exists. There's no invalid configuration check needed.
    }
}
```

### Explanation:
1. **Function Definitions**:
   - `isSafe`: Checks if placing a queen at a given position is safe.
   - `solveNQueens`: Recursively solves the N-Queens problem.
   - `eightQueens`: Calls `solveNQueens` and prints the solution or "No solution".

2. **Test Sections**:
   - `Solution Exists`: Verifies that a solution is found by checking that "No solution" is not printed.
   - `No Solution for Invalid Configuration`: This section is not directly applicable since the `eightQueens` function always finds a valid solution or prints "No solution". However, you can add additional checks if needed.

This conversion ensures that the functionality and logic of the original Python test are preserved in C++ using Catch2.