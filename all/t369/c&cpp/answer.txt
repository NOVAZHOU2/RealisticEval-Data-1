Certainly! Below is the equivalent C++ code for the provided Python code. The main functionalities include printing the chessboard, checking if it's safe to place a queen, solving the N-Queens problem using backtracking, and initializing an 8x8 board.

```cpp
#include <iostream>
#include <vector>
#include <string>

using namespace std;

void printBoard(const vector<vector<char>>& board) {
    for (const auto& row : board) {
        for (char cell : row) {
            cout << cell << " ";
        }
        cout << endl;
    }
    cout << endl;
}

bool isSafe(const vector<vector<char>>& board, int row, int col) {
    // Check this row on the left side
    for (int i = 0; i < col; ++i) {
        if (board[row][i] == 'Q') {
            return false;
        }
    }

    // Check upper diagonal on the left side
    for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) {
        if (board[i][j] == 'Q') {
            return false;
        }
    }

    // Check lower diagonal on the left side
    for (int i = row, j = col; i < board.size() && j >= 0; ++i, --j) {
        if (board[i][j] == 'Q') {
            return false;
        }
    }

    return true;
}

bool solveQueens(vector<vector<char>>& board, int col) {
    // Base case: If all queens are placed
    if (col >= board.size()) {
        printBoard(board);
        return true;
    }

    // Consider this column and try placing this queen in all rows one by one
    bool solutionFound = false;
    for (int i = 0; i < board.size(); ++i) {
        if (isSafe(board, i, col)) {
            board[i][col] = 'Q';
            if (solveQueens(board, col + 1)) {
                solutionFound = true;
            }
            board[i][col] = '.';  // Backtrack
        }
    }

    return solutionFound;
}

void eightQueens() {
    int size = 8;
    vector<vector<char>> board(size, vector<char>(size, '.'));
    if (!solveQueens(board, 0)) {
        cout << "No solution" << endl;
    }
}

int main() {
    eightQueens();
    return 0;
}
```

### Explanation:
1. **printBoard**: This function prints the current state of the board.
2. **isSafe**: This function checks if it is safe to place a queen at a given position.
3. **solveQueens**: This function uses backtracking to solve the N-Queens problem.
4. **eightQueens**: This function initializes an 8x8 board and calls `solveQueens` to find solutions.
5. **main**: This is the entry point of the program where `eightQueens` is called.

This code should produce the same output as the Python version when executed.