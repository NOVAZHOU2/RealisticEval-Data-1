Sure, here's how you can translate the Python code for solving the Eight Queens problem into C and C++ code.

### Python Code:
```python
def eight_queens():
    def is_safe(board, row, col):
        # Check this row on left side
        for i in range(col):
            if board[row][i] == 1:
                return False

        # Check upper diagonal on left side
        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
            if board[i][j] == 1:
                return False

        # Check lower diagonal on left side
        for i, j in zip(range(row, len(board), 1), range(col, -1, -1)):
            if board[i][j] == 1:
                return False

        return True

    def solve_n_queens_util(board, col):
        if col >= len(board):
            return True

        for i in range(len(board)):
            if is_safe(board, i, col):
                board[i][col] = 1

                if solve_n_queens_util(board, col + 1) == True:
                    return True

                board[i][col] = 0

        return False

    def print_board(board):
        for row in board:
            print(" ".join(".Q" if x else ".." for x in row))

    board = [[0 for _ in range(8)] for _ in range(8)]
    if not solve_n_queens_util(board, 0):
        print("No solution")
        return

    print_board(board)

if __name__ == "__main__":
    eight_queens()
```

### C Code:
```c
#include <stdio.h>
#include <stdbool.h>

#define N 8

bool isSafe(int board[N][N], int row, int col) {
    int i, j;

    // Check this row on left side
    for (i = 0; i < col; i++)
        if (board[row][i])
            return false;

    // Check upper diagonal on left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    // Check lower diagonal on left side
    for (i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

bool solveNQueensUtil(int board[N][N], int col) {
    if (col >= N)
        return true;

    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1;

            if (solveNQueensUtil(board, col + 1))
                return true;

            board[i][col] = 0; // backtrack
        }
    }

    return false;
}

void printSolution(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%2d", board[i][j]);
        printf("\n");
    }
}

bool solveNQueens() {
    int board[N][N];
    memset(board, 0, sizeof(board));

    if (!solveNQueensUtil(board, 0)) {
        printf("No solution exists\n");
        return false;
    }

    printSolution(board);
    return true;
}

int main() {
    solveNQueens();
    return 0;
}
```

### C++ Code:
```cpp
#include <iostream>
using namespace std;

const int N = 8;

bool isSafe(int board[N][N], int row, int col) {
    for (int i = 0; i < col; i++)
        if (board[row][i])
            return false;

    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    for (int i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

bool solveNQueensUtil(int board[N][N], int col) {
    if (col >= N)
        return true;

    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1;

            if (solveNQueensUtil(board, col + 1))
                return true;

            board[i][col] = 0;
        }
    }

    return false;
}

void printSolution(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            cout << (board[i][j] ? 'Q' : '.');
        cout << endl;
    }
}

bool solveNQueens() {
    int board[N][N];
    memset(board, 0, sizeof(board));

    if (!solveNQueensUtil(board, 0)) {
        cout << "No solution exists" << endl;
        return false;
    }

    printSolution(board);
    return true;
}

int main() {
    solveNQueens();
    return 0;
}
```

These codes implement the same logic as your original Python function but in C and C++. The `solveNQueens` function attempts to place queens on an 8x8 chessboard such that no two queens threaten each other. If a solution is found, it prints the board configuration; otherwise, it outputs "No solution".