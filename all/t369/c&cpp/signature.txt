Certainly! Below is the equivalent C++ code for the given Python function, including the conversion of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Function to print the current state of the board
void printBoard(const vector<vector<char>>& board) {
    for (const auto& row : board) {
        for (char cell : row) {
            cout << cell << " ";
        }
        cout << endl;
    }
    cout << endl;
}

// Function to check if it's safe to place a queen at a specific position
bool isSafe(const vector<vector<char>>& board, int row, int col) {
    // Check this row on the left side
    for (int i = 0; i < col; ++i) {
        if (board[row][i] == 'Q') {
            return false;
        }
    }

    // Check upper diagonal on the left side
    for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) {
        if (board[i][j] == 'Q') {
            return false;
        }
    }

    // Check lower diagonal on the left side
    for (int i = row, j = col; i < board.size() && j >= 0; ++i, --j) {
        if (board[i][j] == 'Q') {
            return false;
        }
    }

    return true;
}

// Recursive function to solve the N-Queens problem
bool solveQueens(vector<vector<char>>& board, int col) {
    // Base case: If all queens are placed
    if (col >= board.size()) {
        printBoard(board);
        return true;
    }

    // Consider this column and try placing this queen in all rows one by one
    bool solutionFound = false;
    for (int i = 0; i < board.size(); ++i) {
        if (isSafe(board, i, col)) {
            board[i][col] = 'Q';
            if (solveQueens(board, col + 1)) {
                solutionFound = true;
            }
            board[i][col] = '.';  // Backtrack
        }
    }

    return solutionFound;
}

// Function to solve the Eight Queens problem
void eightQueens() {
    /*
    Solve the Eight Queens problem. If a solution is found, it will print out the configuration of the chessboard.
    If all queens cannot be placed, print "No solution".
    
    Print example as below:
    . . Q . . . . .
    . . . . Q . . .
    . Q . . . . . .
    . . . . . . . Q
    . . . . . Q . .
    . . . Q . . . .
    . . . . . . Q .
    Q . . . . . . .
    */
    vector<vector<char>> board(8, vector<char>(8, '.'));
    if (!solveQueens(board, 0)) {
        cout << "No solution" << endl;
    }
}

int main() {
    eightQueens();
    return 0;
}
```

### Explanation:
1. **Function Definitions**:
   - `printBoard`: Prints the current state of the board.
   - `isSafe`: Checks if it's safe to place a queen at a specific position.
   - `solveQueens`: Recursively solves the N-Queens problem.
   - `eightQueens`: Initializes the board and calls `solveQueens`.

2. **Comments and Documentation**:
   - Single-line comments are prefixed with `//`.
   - Multi-line comments are enclosed within `/* ... */`.
   - The docstring for `eightQueens` is converted into a multi-line comment.

3. **Data Structures**:
   - The board is represented as a 2D vector of characters (`vector<vector<char>>`).

4. **Output**:
   - The output is handled using `cout` for printing the board and solutions.

This C++ code preserves the original functionality and structure of the Python code, including the comments and documentation.