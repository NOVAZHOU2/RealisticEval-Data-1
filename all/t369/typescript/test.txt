Certainly! Below is the TypeScript code that converts the provided Python unittest test class into an equivalent test class using Jest. The functionality and logic of the tests are preserved, and the necessary type annotations are included. The assert methods from `unittest` are mapped to the appropriate Jest assertions.

### TypeScript Code with Jest Testing

```typescript
import { eightQueens, printBoard, isSafe, solveQueens } from './eightQueens'; // Import the functions from your eightQueens module

describe('TestEightQueens', () => {
    beforeEach(() => {
        // Setup can be done here if needed
    });

    it('should contain at least one queen', () => {
        const originalConsoleLog = console.log;
        let fakeOut = '';

        // Mock console.log to capture output
        console.log = jest.fn((output) => {
            fakeOut += output;
        });

        eightQueens();

        // Restore original console.log
        console.log = originalConsoleLog;

        expect(fakeOut.includes('Q')).toBe(true, 'The board should contain at least one queen.');
    });

    it('should contain exactly 8 queens', () => {
        const originalConsoleLog = console.log;
        let fakeOut = '';

        // Mock console.log to capture output
        console.log = jest.fn((output) => {
            fakeOut += output;
        });

        eightQueens();

        // Restore original console.log
        console.log = originalConsoleLog;

        const boards = fakeOut.trim().split('\n\n'); // Split the output into blocks for each board
        for (const board of boards) {
            const numQueens = (board.match(/Q/g) || []).length;
            expect(numQueens).toBe(8, 'Each board should contain exactly 8 queens.');
        }
    });

    it('should print "No solution" when no solution exists', () => {
        const originalConsoleLog = console.log;
        let fakeOut = '';

        // Define a function that simulates a scenario with no solution
        function noSolutionQueens() {
            const board: string[][] = Array.from({ length: 3 }, () => Array(3).fill('.'));
            if (!solveQueens(board, 0)) {
                console.log("No solution");
            }
        }

        // Mock console.log to capture output
        console.log = jest.fn((output) => {
            fakeOut += output;
        });

        noSolutionQueens();

        // Restore original console.log
        console.log = originalConsoleLog;

        expect(fakeOut.includes('No solution')).toBe(true, 'Should print "No solution" when no solution exists.');
    });
});
```

### Explanation:
1. **Imports**:
   - Import the necessary functions (`eightQueens`, `printBoard`, `isSafe`, `solveQueens`) from the `eightQueens` module.

2. **Describe Block**:
   - Use `describe` to group the test cases under `TestEightQueens`.

3. **Before Each Hook**:
   - Use `beforeEach` to set up any common setup logic if needed.

4. **Test Cases**:
   - **`it('should contain at least one queen')`**:
     - Mock `console.log` to capture the output.
     - Call `eightQueens` and check if the output contains at least one 'Q'.
   - **`it('should contain exactly 8 queens')`**:
     - Mock `console.log` to capture the output.
     - Call `eightQueens` and split the output into boards.
     - Count the number of 'Q's in each board and verify that it is exactly 8.
   - **`it('should print "No solution" when no solution exists')`**:
     - Define a function `noSolutionQueens` that simulates a scenario with no solution.
     - Mock `console.log` to capture the output.
     - Call `noSolutionQueens` and verify that the output contains "No solution".

5. **Mocking Console Log**:
   - Use Jest's `jest.fn` to mock `console.log` and capture the output.
   - Restore the original `console.log` after the test.

6. **Assertions**:
   - Use Jest's `expect` to perform assertions.

This TypeScript code preserves the original functionality and logic of the Python unittest test class while adapting it to Jest's testing framework.