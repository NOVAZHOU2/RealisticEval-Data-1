Certainly! Below is the TypeScript code that converts the provided Python function signature and docstring into equivalent TypeScript code, including appropriate JSDoc comments:

```typescript
/**
 * Solves the Eight Queens problem. If a solution is found, it will print out the configuration of the chessboard.
 * If all queens cannot be placed, it prints "No solution".
 * 
 * Example output:
 * 
 * . . Q . . . . .
 * . . . . Q . . .
 * . Q . . . . . .
 * . . . . . . . Q
 * . . . . . Q . .
 * . . . Q . . . .
 * . . . . . . Q .
 * Q . . . . . . .
 */
function eightQueens(): void {
    const board: string[][] = Array.from({ length: 8 }, () => Array(8).fill('.'));
    if (!solveQueens(board, 0)) {
        console.log("No solution");
    }
}

function printBoard(board: string[][]): void {
    for (const row of board) {
        console.log(row.join(" "));
    }
    console.log();
}

function isSafe(board: string[][], row: number, col: number): boolean {
    // Check this row on the left side
    for (let i = 0; i < col; i++) {
        if (board[row][i] === 'Q') {
            return false;
        }
    }

    // Check upper diagonal on the left side
    for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] === 'Q') {
            return false;
        }
    }

    // Check lower diagonal on the left side
    for (let i = row, j = col; i < board.length && j >= 0; i++, j--) {
        if (board[i][j] === 'Q') {
            return false;
        }
    }

    return true;
}

function solveQueens(board: string[][], col: number): boolean {
    // Base case: If all queens are placed
    if (col >= board.length) {
        printBoard(board);
        return true;
    }

    // Consider this column and try placing this queen in all rows one by one
    let solutionFound = false;
    for (let i = 0; i < board.length; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 'Q';
            if (solveQueens(board, col + 1)) {
                solutionFound = true;
            }
            board[i][col] = '.'; // Backtrack
        }
    }

    return solutionFound;
}

// Call the function to solve the Eight Queens problem
eightQueens();
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block is added above the `eightQueens` function to provide detailed documentation.
   - The example output is included within the JSDoc comment.

2. **Function Definitions**:
   - `eightQueens`: Initializes the board and calls `solveQueens` to find solutions.
   - `printBoard`: Prints the chessboard.
   - `isSafe`: Checks if it is safe to place a queen at a given position.
   - `solveQueens`: Recursively solves the N-Queens problem.

3. **Type Annotations**:
   - All function parameters and variables have explicit type annotations.
   - The board is defined as `string[][]`.

4. **Console Output**:
   - `console.log` is used for printing output.

5. **Array Initialization**:
   - The board is initialized using `Array.from` and `Array.fill` methods.

This TypeScript code preserves the original functionality and structure of the Python code while providing clear documentation through JSDoc comments.