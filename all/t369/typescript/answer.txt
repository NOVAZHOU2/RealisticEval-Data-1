To convert the given Python code to TypeScript, we need to define types for the functions and variables, and adapt the logic to TypeScript syntax. Hereâ€™s the equivalent TypeScript code:

```typescript
function printBoard(board: string[][]): void {
    for (const row of board) {
        console.log(row.join(" "));
    }
    console.log();
}

function isSafe(board: string[][], row: number, col: number): boolean {
    // Check this row on the left side
    for (let i = 0; i < col; i++) {
        if (board[row][i] === 'Q') {
            return false;
        }
    }

    // Check upper diagonal on the left side
    for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] === 'Q') {
            return false;
        }
    }

    // Check lower diagonal on the left side
    for (let i = row, j = col; i < board.length && j >= 0; i++, j--) {
        if (board[i][j] === 'Q') {
            return false;
        }
    }

    return true;
}

function solveQueens(board: string[][], col: number): boolean {
    // Base case: If all queens are placed
    if (col >= board.length) {
        printBoard(board);
        return true;
    }

    // Consider this column and try placing this queen in all rows one by one
    let solutionFound = false;
    for (let i = 0; i < board.length; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 'Q';
            if (solveQueens(board, col + 1)) {
                solutionFound = true;
            }
            board[i][col] = '.'; // Backtrack
        }
    }

    return solutionFound;
}

function eightQueens(): void {
    const board: string[][] = Array.from({ length: 8 }, () => Array(8).fill('.'));
    if (!solveQueens(board, 0)) {
        console.log("No solution");
    }
}

eightQueens();
```

### Explanation:
1. **Function Definitions**:
   - `printBoard` prints the board.
   - `isSafe` checks if it's safe to place a queen at a given position.
   - `solveQueens` recursively solves the N-Queens problem.
   - `eightQueens` initializes the board and calls `solveQueens`.

2. **Type Annotations**:
   - All function parameters and local variables have explicit type annotations.
   - The `board` is defined as a 2D array of strings (`string[][]`).

3. **Loop and Conditional Logic**:
   - The loops and conditional statements are adapted to TypeScript syntax.

4. **Console Output**:
   - `console.log` is used for printing output, which is the equivalent of `print` in Python.

5. **Initialization**:
   - The `board` is initialized using `Array.from` and `Array.fill` to create an 8x8 grid filled with `'.'`.

This TypeScript code maintains the same functionality and logic as the original Python code.