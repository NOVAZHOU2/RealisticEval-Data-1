Hereâ€™s the equivalent JUnit 4 test case for your Java `getCookie` method in the `Tester` class, with similar logic to your Jest test case:

```java
package org.real.temp;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.mockito.Mockito.when;

public class Tester {

    private HttpServletRequest request;
    
    @Before
    public void setUp() {
        // Mock the HttpServletRequest before each test
        request = Mockito.mock(HttpServletRequest.class);
    }

    @Test
    public void testReturnsCorrectCookieValueForExistingCookie() {
        Cookie[] cookies = new Cookie[] {
            new Cookie("username", "JohnDoe")
        };
        when(request.getCookies()).thenReturn(cookies);

        assertEquals("JohnDoe", getCookie("username", request));
    }

    @Test
    public void testReturnsNullIfCookieDoesNotExist() {
        Cookie[] cookies = new Cookie[] {
            new Cookie("username", "JohnDoe")
        };
        when(request.getCookies()).thenReturn(cookies);

        assertNull(getCookie("user", request));
    }

    @Test
    public void testReturnsNullWhenNoCookiesAreSet() {
        when(request.getCookies()).thenReturn(null);

        assertNull(getCookie("username", request));
    }

    @Test
    public void testHandlesMultipleCookiesAndRetrievesCorrectOne() {
        Cookie[] cookies = new Cookie[] {
            new Cookie("user", "JaneDoe"),
            new Cookie("username", "JohnDoe")
        };
        when(request.getCookies()).thenReturn(cookies);

        assertEquals("JohnDoe", getCookie("username", request));
    }

    // Include the getCookie method here or import it if it's in another class
    public String getCookie(String name, HttpServletRequest request) {
        String cookieName = name + "=";
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals(name)) {
                    return cookie.getValue();
                }
            }
        }
        return null; // Return null if the cookie is not found
    }
}
```

### Key Points:
- **Mockito** is used to mock the `HttpServletRequest` and simulate cookie retrieval.
- **JUnit 4** annotations (`@Before`, `@Test`) are used for setup and test methods.
- The assertions (`assertEquals`, `assertNull`) check expected values against the results from the `getCookie` method. 

Make sure you have Mockito included in your project dependencies to use it effectively!