Hereâ€™s the equivalent Catch2 test case in C++ for the provided Jest test case:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>

// Function declaration (assume the getCookie function is implemented)
std::string getCookie(const std::string& cookieString, const std::string& name);

// Test suite for getCookie function
TEST_CASE("getCookie function tests") {
    std::string cookieString;

    // Clear cookies before each test
    auto clearCookies = [&]() { cookieString.clear(); };

    SECTION("returns correct cookie value for existing cookie") {
        cookieString = "username=JohnDoe; expires=Thu, 18 Dec 2023 12:00:00 UTC; path=/";
        REQUIRE(getCookie(cookieString, "username") == "JohnDoe");
    }

    SECTION("returns empty string if cookie does not exist") {
        cookieString = "username=JohnDoe; expires=Thu, 18 Dec 2023 12:00:00 UTC; path=/";
        REQUIRE(getCookie(cookieString, "user").empty());
    }

    SECTION("returns empty string when no cookies are set") {
        REQUIRE(getCookie(cookieString, "username").empty());
    }

    SECTION("handles multiple cookies and retrieves the correct one") {
        cookieString = "user=JaneDoe; expires=Thu, 18 Dec 2023 12:00:00 UTC; path=/; "
                       "username=JohnDoe; expires=Thu, 18 Dec 2023 12:00:00 UTC; path=/";
        REQUIRE(getCookie(cookieString, "username") == "JohnDoe");
    }
}
```

### Explanation:
- The `CATCH_CONFIG_MAIN` macro includes the main function for Catch2.
- Each test case is enclosed in a `SECTION` that resembles the structure of the Jest tests.
- The `REQUIRE` macro is used to assert expected outcomes, similar to Jest's `expect` function.
- The `clearCookies` lambda is defined but not used since `cookieString` is reset in each section automatically by local scoping.