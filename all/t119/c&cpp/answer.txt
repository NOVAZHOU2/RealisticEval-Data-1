Here's the equivalent C++ code for the provided JavaScript function `getCookie`. This version assumes that you will provide the cookie string directly as input, as C++ does not have direct access to browser cookies.

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <sstream>

std::string getCookie(const std::string& cookieString, const std::string& name) {
    std::string cookieName = name + "=";
    std::istringstream stream(cookieString);
    std::string cookie;

    while (std::getline(stream, cookie, ';')) {
        // Trim whitespace
        cookie.erase(0, cookie.find_first_not_of(' ')); // Left trim
        cookie.erase(cookie.find_last_not_of(' ') + 1); // Right trim

        if (cookie.find(cookieName) == 0) {
            return cookie.substr(cookieName.length());
        }
    }
    
    return ""; // Return an empty string if not found
}

int main() {
    std::string cookieString = "user=John; session=abc123; theme=dark"; // Example cookie string
    std::string cookieValue = getCookie(cookieString, "session");

    if (!cookieValue.empty()) {
        std::cout << "Cookie value: " << cookieValue << std::endl;
    } else {
        std::cout << "Cookie not found." << std::endl;
    }

    return 0;
}
```

### Explanation:
- The function `getCookie` takes a cookie string and the cookie name as parameters.
- It splits the cookie string by semicolons (`;`), trims whitespace, and checks if each cookie starts with the specified name.
- If found, it returns the cookie value; if not, it returns an empty string. 
- The `main` function demonstrates how to call `getCookie` with an example cookie string.