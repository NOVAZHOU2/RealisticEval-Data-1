Here’s the Java class you provided, converted into Python code. The Python version maintains the same logic and functionality as the original Java code.
Converted Python Code
python
class Answer:
    def two_sum(self, nums, target):
        """
        Finds two indices of numbers in the array that sum up to the target value.

        Args:
            nums (list[int]): The input array of integers.
            target (int): The target sum value.

        Returns:
            list[int]: A list containing the indices of the two numbers.

        Raises:
            ValueError: If no such indices are found.
        """
        # Create a dictionary to store numbers and their corresponding indices
        nums_map = {}
        
        # First loop to populate the dictionary
        for i in range(len(nums)):
            nums_map[nums[i]] = i

        # Second loop to find the two indices
        for i in range(len(nums)):
            complement = target - nums[i]  # Calculate the complement
            
            # Check if the complement exists and is not the same index
            if complement in nums_map and nums_map[complement] != i:
                return [i, nums_map[complement]]  # Return the indices
        
        # If no solution is found, raise an exception
        raise ValueError("No two sum solution")
Breakdown of the Conversion
Class Declaration: The Java class Answer is directly converted to a Python class.
Method Definition:
The method twoSum in Java is converted to two_sum in Python, following the naming convention of using snake_case.
The method is defined with self as the first parameter in Python.
Docstring:
The Javadoc comment is replaced with a Python docstring, explaining the method's parameters, return type, and exceptions raised.
Data Structure:
Java's HashMap is replaced with a Python dictionary, which serves the same purpose of storing key-value pairs.
Looping and Logic:
The for loops and logic remain almost identical, using range(len(nums)) for indexing in Python.
The check for the existence of the complement is done using the in keyword in Python.
Exception Handling:
Java’s IllegalArgumentException is replaced with Python’s ValueError to indicate that no valid indices were found.
Example Usage
You can use the Answer class and two_sum method like this:
python
if __name__ == "__main__":
    answer = Answer()
    nums = [2, 7, 11, 15]
    target = 9
    try:
        result = answer.two_sum(nums, target)
        print("Indices of the two numbers that add up to the target:", result)
    except ValueError as e:
        print(e)
Summary
This Python code performs the same functionality as your original Java class, providing a clear and efficient implementation for finding two indices in an array that sum to a specified target value.