Hereâ€™s the equivalent C++ code for the provided Python function `two_sum`. This version maintains the same functionality and logic while adapting to C++ syntax and features.

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <stdexcept>

std::vector<int> two_sum(const std::vector<int>& nums, int target) {
    /**
     * Finds two indices of numbers in the array that sum up to the target value.
     *
     * Args:
     *     nums (std::vector<int>): The input array of integers.
     *     target (int): The target sum value.
     *
     * Returns:
     *     std::vector<int>: A vector containing the indices of the two numbers.
     *
     * Throws:
     *     std::invalid_argument: If no such indices are found.
     */
    
    // Create a map to store numbers and their corresponding indices
    std::unordered_map<int, int> nums_map;

    // First loop to populate the map
    for (size_t i = 0; i < nums.size(); ++i) {
        nums_map[nums[i]] = i;
    }

    // Second loop to find the two indices
    for (size_t i = 0; i < nums.size(); ++i) {
        int complement = target - nums[i];  // Calculate the complement

        // Check if the complement exists and is not the same index
        if (nums_map.find(complement) != nums_map.end() && nums_map[complement] != i) {
            return {static_cast<int>(i), nums_map[complement]};  // Return the indices
        }
    }

    // If no solution is found, throw an exception
    throw std::invalid_argument("No two sum solution");
}

int main() {
    // Example usage
    std::vector<int> nums = {2, 7, 11, 15};
    int target = 9;

    try {
        std::vector<int> result = two_sum(nums, target);
        std::cout << "Indices: " << result[0] << ", " << result[1] << std::endl;
    } catch (const std::invalid_argument& e) {
        std::cerr << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Headers**: Included necessary headers for input/output and data structures (`<iostream>`, `<vector>`, `<unordered_map>`, `<stdexcept>`).
2. **Function Declaration**: The `two_sum` function takes a vector of integers and an integer target, returning a vector of indices.
3. **Data Structure**: Used `std::unordered_map` for efficient key-value storage (like Python's dictionary).
4. **Loops**: Replaced Python's `for i in range(...)` with C++ style `for (size_t i = 0; i < nums.size(); ++i)`.
5. **Exception Handling**: Used `std::invalid_argument` to throw an error if no solution is found.
6. **Main Function**: Added a `main` function to demonstrate usage and catch exceptions. 

This C++ code mirrors the logic and structure of the original Python code while adhering to C++ syntax and conventions.