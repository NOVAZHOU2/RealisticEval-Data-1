Here's the equivalent C++ function signature for the provided Python function, along with the converted comments and type annotations:

```cpp
#include <vector>

// Function to find two indices of numbers in the array that sum up to the target value.
/*
 * Args:
 *     nums (std::vector<int>): The input array of integers.
 *     target (int): The target sum value.
 *
 * Returns:
 *     std::vector<int>: A vector containing the indices of the two numbers.
 *
 * Throws:
 *     std::invalid_argument: If no such indices are found.
 */
std::vector<int> two_sum(const std::vector<int>& nums, int target);
```

### Explanation of Changes:
1. **Include Directive**: Added `#include <vector>` to use the `std::vector` type.
2. **Function Signature**: 
   - Changed the return type from `int` in Python to `std::vector<int>` in C++ to reflect that it returns a list of indices.
   - Used `const std::vector<int>&` for the `nums` parameter to ensure it is passed by reference, improving efficiency.
3. **Comments**: 
   - Converted the Python docstring to a C++ style comment block using `/* ... */`.
   - Used `//` for single-line comments, if needed for inline explanations.
4. **Type Annotations**: 
   - Translated Python type annotations to their C++ counterparts.

This maintains the original purpose and structure while conforming to C++ standards.