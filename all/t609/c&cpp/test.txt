Hereâ€™s the equivalent test class using the Catch2 testing framework in C++, preserving the functionality and logic of the original Python unittest code:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>
#include <stdexcept>

// Function prototype for two_sum (assumed to be implemented elsewhere)
std::vector<int> two_sum(const std::vector<int>& nums, int target);

TEST_CASE("TestAnswer") {
    SECTION("Valid pair") {
        std::vector<int> nums = {2, 7, 11, 15};
        int target = 9;
        std::vector<int> expected = {0, 1};  // 2 + 7 = 9
        REQUIRE(two_sum(nums, target) == expected);
    }

    SECTION("Negative numbers") {
        std::vector<int> nums = {-1, -2, -3, -4, -5};
        int target = -8;
        std::vector<int> expected = {2, 4};  // -3 + -5 = -8
        REQUIRE(two_sum(nums, target) == expected);
    }

    SECTION("Zero sum") {
        std::vector<int> nums = {0, 4, 3, 0};
        int target = 0;
        std::vector<int> expected = {0, 3};  // 0 + 0 = 0
        REQUIRE(two_sum(nums, target) == expected);
    }

    SECTION("No solution") {
        std::vector<int> nums = {1, 2, 3, 4, 5};
        int target = 10;
        REQUIRE_THROWS_AS(two_sum(nums, target), std::invalid_argument);
    }

    SECTION("Same number twice") {
        std::vector<int> nums = {3, 3};
        int target = 6;
        std::vector<int> expected = {0, 1};  // 3 + 3 = 6
        REQUIRE(two_sum(nums, target) == expected);
    }

    SECTION("Large numbers") {
        std::vector<int> nums = {2147483647, -2147483648, 0, 1};
        int target = 1;
        std::vector<int> expected = {2, 3};  // 0 + 1 = 1
        REQUIRE(two_sum(nums, target) == expected);
    }
}
```

### Explanation of Changes:
1. **Catch2 Setup**: 
   - Included `#define CATCH_CONFIG_MAIN` to set up Catch2 and included the necessary header.
   
2. **Test Case Structure**:
   - Used `TEST_CASE` to define a group of tests.
   - Each individual test was encapsulated in `SECTION`, allowing for modular testing of each scenario.

3. **Assertions**:
   - Used `REQUIRE` for checking equality of results.
   - Used `REQUIRE_THROWS_AS` to check for exceptions, matching the Python behavior of asserting that an exception is raised.

4. **Type Adjustments**:
   - Changed the syntax for creating vectors and integers to C++ standards.

This C++ code will function similarly to the original Python tests, ensuring comprehensive coverage of the `two_sum` function.