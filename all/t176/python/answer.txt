Here's a Python implementation of the Java code you provided, including the Point class and the find_k_nearest_neighbors function. In Python, we can utilize a min-heap from the heapq module and some list comprehensions for more concise code.
Python Code
python
import math
import heapq

class Point:
    def __init__(self, x: float, y: float):
        self.x = x
        self.y = y

    def distance_to(self, other: 'Point') -> float:
        """Calculate the Euclidean distance to another point."""
        return math.sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2)

def find_k_nearest_neighbors(points: list[Point], query_point: Point, k: int) -> list[Point]:
    """Find the k nearest neighbors to the query_point."""
    # Max-heap to store the k closest points
    max_heap = []
    
    for point in points:
        distance = point.distance_to(query_point)
        if len(max_heap) < k:
            heapq.heappush(max_heap, (-distance, point))  # Push negative distance for max-heap behavior
        elif distance < -max_heap[0][0]:  # Compare with the max distance in the heap
            heapq.heappop(max_heap)  # Remove the farthest point
            heapq.heappush(max_heap, (-distance, point))
    
    # Extract the points from the heap and return them
    return [point for (_, point) in max_heap]

# Example usage:
if __name__ == "__main__":
    # Sample points
    points = [Point(1, 2), Point(3, 4), Point(5, 6), Point(7, 8)]
    query_point = Point(4, 5)
    k = 2
    nearest_neighbors = find_k_nearest_neighbors(points, query_point, k)
    
    for neighbor in nearest_neighbors:
        print(f"Neighbor: ({neighbor.x}, {neighbor.y})")
Explanation of the Code
Point Class:
The Point class has an initializer (__init__) to set x and y coordinates.
The method distance_to computes the Euclidean distance between the current point and another point.
find_k_nearest_neighbors Function:
Uses a list max_heap to maintain the k nearest points.
heapq.heappush is used to add points to the heap, storing the negative distance to simulate a max-heap (as heapq implements a min-heap).
It checks if the current point's distance is smaller than the largest distance in the heap and maintains the size of the heap to k.
Finally, it returns a list of the k nearest points by extracting them from the heap.
Example Usage:
A sample list of points and a query point are provided.
The nearest neighbors are calculated and printed.
This code follows the same logic as the original Java code while adapting it to Python's idiomatic style.