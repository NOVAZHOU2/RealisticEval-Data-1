Here's the equivalent C++ code with function signatures, class definitions, comments, and docstrings translated appropriately:

```cpp
#include <vector>
#include <cmath>

/* 
 * Class representing a point in 2D space.
 */
class Point {
public:
    double x; // X-coordinate of the point
    double y; // Y-coordinate of the point

    // Constructor for the Point class
    Point(double x, double y) : x(x), y(y) {}

    // Calculate the Euclidean distance to another point
    double distance_to(const Point& other) const;
};

/* 
 * Calculate the Euclidean distance to another point.
 */
double Point::distance_to(const Point& other) const {
    return std::sqrt((x - other.x) * (x - other.x) + (y - other.y) * (y - other.y));
}

/* 
 * Find the k nearest neighbors to the query_point.
 * 
 * Args:
 *     points (std::vector<Point>): A list of Point objects representing the available points in the space.
 *     query_point (Point): The Point object for which we want to find the nearest neighbors.
 *     k (int): The number of nearest neighbors to find.
 * 
 * Returns:
 *     std::vector<Point>: A list of the k nearest Point objects to the query_point.
 */
std::vector<Point> find_k_nearest_neighbors(const std::vector<Point>& points, const Point& query_point, int k);
```

### Key Changes and Explanations:
1. **Class Documentation**: A multi-line comment introduces the `Point` class, describing its purpose.

2. **Member Variables**: Member variables `x` and `y` are documented with single-line comments.

3. **Constructor and Method Signatures**: The constructor and `distance_to` method signatures are translated to C++ syntax.

4. **Function Documentation**: The `find_k_nearest_neighbors` function is documented with multi-line comments detailing the arguments and return type, mimicking the original Python docstring format.

5. **Type Annotations**: Python type annotations such as `float`, `List[Point]`, and `int` are converted to their C++ equivalents (`double`, `std::vector<Point>`, and `int`, respectively).

This C++ version maintains the original purpose and structure of the Python code while adapting to C++ conventions.