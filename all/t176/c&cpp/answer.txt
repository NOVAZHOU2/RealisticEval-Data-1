Here's the equivalent C++ code for your provided Python code. The structure and functionality remain consistent, adapting to C++ syntax and conventions:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <cmath>

class Point {
public:
    double x;
    double y;

    Point(double x, double y) : x(x), y(y) {}

    double distance_to(const Point& other) const {
        // Calculate the Euclidean distance to another point.
        return std::sqrt((x - other.x) * (x - other.x) + (y - other.y) * (y - other.y));
    }
};

std::vector<Point> find_k_nearest_neighbors(const std::vector<Point>& points, const Point& query_point, int k) {
    // Max-heap to store the k closest points
    using Pair = std::pair<double, Point>;
    std::priority_queue<Pair> max_heap;

    for (const auto& point : points) {
        double distance = point.distance_to(query_point);
        if (max_heap.size() < k) {
            max_heap.push({-distance, point}); // Push negative distance for max-heap behavior
        } else if (distance < -max_heap.top().first) { // Compare with the max distance in the heap
            max_heap.pop(); // Remove the farthest point
            max_heap.push({-distance, point});
        }
    }

    // Extract the points from the heap and return them
    std::vector<Point> result;
    while (!max_heap.empty()) {
        result.push_back(max_heap.top().second);
        max_heap.pop();
    }

    return result;
}

int main() {
    std::vector<Point> points = { Point(1.0, 2.0), Point(3.0, 4.0), Point(5.0, 6.0) };
    Point query_point(2.0, 3.0);
    int k = 2;

    std::vector<Point> nearest_neighbors = find_k_nearest_neighbors(points, query_point, k);

    for (const auto& neighbor : nearest_neighbors) {
        std::cout << "Neighbor: (" << neighbor.x << ", " << neighbor.y << ")\n";
    }

    return 0;
}
```

### Key Changes and Explanations:
1. **Class Definition**: The `Point` class in C++ has public member variables and a constructor similar to the Python `__init__` method.

2. **Distance Calculation**: The `distance_to` method uses the `const` keyword to indicate that it does not modify the object.

3. **Heap Implementation**: In C++, a `std::priority_queue` is used to simulate the max-heap behavior. The pair consists of a negative distance and a `Point`.

4. **Result Extraction**: The results are collected in a `std::vector<Point>` by popping elements from the heap.

5. **Main Function**: The `main()` function demonstrates usage, creating a vector of `Point` objects and finding the `k` nearest neighbors, followed by printing them.

This code provides the same functionality as the original Python code while adhering to C++ syntax and conventions.