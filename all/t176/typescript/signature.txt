Hereâ€™s the equivalent TypeScript code with the requested changes:

```typescript
import * as math from 'mathjs';

class Point {
    x: number;
    y: number;

    constructor(x: number, y: number) {
        this.x = x;
        this.y = y;
    }

    /**
     * Calculate the Euclidean distance to another point.
     * @param other - The other Point object.
     * @returns The distance to the other point.
     */
    distanceTo(other: Point): number {
        return math.sqrt((this.x - other.x) ** 2 + (this.y - other.y) ** 2);
    }
}

/**
 * Find the k nearest neighbors to the query_point.
 * @param points - A list of Point objects representing the available points in the space.
 * @param queryPoint - The Point object for which we want to find the nearest neighbors.
 * @param k - The number of nearest neighbors to find.
 * @returns A list of the k nearest Point objects to the queryPoint.
 */
function findKNearestNeighbors(points: Point[], queryPoint: Point, k: number): Point[] {
    const maxHeap: [number, Point][] = [];

    for (const point of points) {
        const distance = point.distanceTo(queryPoint);
        if (maxHeap.length < k) {
            maxHeap.push([-distance, point]); // Push negative distance for max-heap behavior
        } else if (distance < -maxHeap[0][0]) { // Compare with the max distance in the heap
            maxHeap.shift(); // Remove the farthest point
            maxHeap.push([-distance, point]);
        }
    }

    // Extract the points from the heap and return them
    return maxHeap.map(([, point]) => point);
}
```

This TypeScript code retains the functionality and structure of the original Python code while adapting to TypeScript's type system and documentation style.