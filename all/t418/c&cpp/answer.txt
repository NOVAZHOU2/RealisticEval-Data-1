Sure, here is a C++ implementation of the function `length_of_LIS`:

```cpp
#include <vector>
#include <algorithm>

int length_of_LIS(const std::vector<int>& nums) {
    if (nums.empty()) return 0;

    std::vector<int> dp(nums.size(), 1);

    for (size_t i = 1; i < nums.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[i] > nums[j]) {
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
    }

    return *std::max_element(dp.begin(), dp.end());
}
```

And here is the corresponding C implementation:

```c
#include <stdio.h>
#include <stdlib.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

int length_of_LIS(const int* nums, size_t size) {
    if (size == 0) return 0;

    int* dp = (int*)malloc(size * sizeof(int));
    for (size_t i = 0; i < size; ++i) {
        dp[i] = 1;
    }

    for (size_t i = 1; i < size; ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[i] > nums[j]) {
                dp[i] = max(dp[i], dp[j] + 1);
            }
        }
    }

    int maxLength = 0;
    for (size_t i = 0; i < size; ++i) {
        maxLength = max(maxLength, dp[i]);
    }

    free(dp);
    return maxLength;
}

int main() {
    int nums[] = {10, 9, 2, 5, 3, 7, 101, 18};
    size_t size = sizeof(nums) / sizeof(nums[0]);

    printf("The length of the longest strictly increasing subsequence is %d\n", length_of_LIS(nums, size));

    return 0;
}
```

In both implementations, we use dynamic programming to solve the problem. The `dp` array keeps track of the length of the longest increasing subsequence ending at each index. We iterate through the array and update the `dp` values accordingly. Finally, we return the maximum value in the `dp` array, which represents the length of the longest increasing subsequence.