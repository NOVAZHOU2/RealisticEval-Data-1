Hereâ€™s the equivalent C++ code for the provided Python function, maintaining the same functionality and logic:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int length_of_LIS(const std::vector<int>& nums) {
    if (nums.empty()) return 0;
    std::vector<int> dp(nums.size(), 1);
    for (size_t i = 0; i < nums.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[j] < nums[i]) {
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
    }
    return *std::max_element(dp.begin(), dp.end());
}

int main() {
    std::vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
    std::cout << "Length of LIS: " << length_of_LIS(nums) << std::endl;
    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<iostream>`, `<vector>`, `<algorithm>`) are included.
2. **Function Definition**: The function `length_of_LIS` takes a vector of integers as input and returns an integer.
3. **Empty Check**: If the input vector is empty, it returns 0.
4. **Dynamic Programming Array**: A vector `dp` is initialized with all elements set to 1.
5. **Nested Loops**: Two nested loops iterate over the vector to update the `dp` array based on the condition `nums[j] < nums[i]`.
6. **Max Element**: The maximum value in the `dp` vector is found using `std::max_element`.

This C++ code performs the same functionality as the given Python code, finding the length of the longest increasing subsequence in the input vector.