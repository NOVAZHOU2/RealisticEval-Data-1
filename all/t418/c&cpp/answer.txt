Hereâ€™s the equivalent C++ code for the provided Python function:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int length_of_LIS(const std::vector<int>& nums) {
    if (nums.empty()) return 0;
    std::vector<int> dp(nums.size(), 1);
    for (size_t i = 0; i < nums.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[j] < nums[i]) {
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
    }
    return *std::max_element(dp.begin(), dp.end());
}

int main() {
    std::vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
    std::cout << "Length of LIS: " << length_of_LIS(nums) << std::endl;
    return 0;
}
```

### Explanation:
- The `length_of_LIS` function takes a vector of integers as input.
- It initializes a dynamic programming array `dp` with all elements set to 1.
- The nested loops iterate over the input vector to calculate the length of the longest increasing subsequence ending at each index.
- The `std::max_element` function is used to find the maximum value in the `dp` vector.
- The `main` function demonstrates how to call the `length_of_LIS` function with a sample input vector and prints the result.