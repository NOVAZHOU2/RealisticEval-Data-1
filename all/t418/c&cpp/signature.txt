Here is the equivalent C++ code for the given Python function:

```cpp
#include <vector>
#include <algorithm>

// Function to find the length of the longest strictly increasing subsequence in an integer array
// Example:
//     Input: [10, 9, 2, 5, 3, 7, 101, 18]
//     Output: 4
int length_of_LIS(const std::vector<int>& nums) {
    /*
    Given an integer array nums, find the length of the longest strictly increasing subsequence in it.

    Args:
        nums (std::vector<int>): integer array

    Returns:
        int: the length of the longest strictly increasing subsequence
    */

    if (nums.empty()) return 0;

    std::vector<int> dp(nums.size(), 1);

    for (size_t i = 1; i < nums.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[i] > nums[j]) {
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
    }

    return *std::max_element(dp.begin(), dp.end());
}
```

This C++ function `length_of_LIS` takes a `std::vector<int>` as input and returns an `int` representing the length of the longest strictly increasing subsequence. The comments and documentation have been adapted to fit C++ standards.