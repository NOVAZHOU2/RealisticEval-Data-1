Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. I will ensure that the functionality and logic of the tests are preserved, and use appropriate assertions in Catch2.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the following headers and ensuring you have the Catch2 library available.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <algorithm>

// Function to find the length of the longest strictly increasing subsequence in an integer array.
// Example:
//     Input: [10, 9, 2, 5, 3, 7, 101, 18]
//     Output: 4

int length_of_LIS(const std::vector<int>& nums) {
    if (nums.empty()) return 0;

    std::vector<int> dp(nums.size(), 1);

    for (size_t i = 0; i < nums.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[j] < nums[i]) {
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
    }

    return *std::max_element(dp.begin(), dp.end());
}

TEST_CASE("Test Length of LIS") {
    SECTION("Test Case 1") {
        std::vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
        int expected = 4;
        REQUIRE(length_of_LIS(nums) == expected);
    }

    SECTION("Test Case 2") {
        std::vector<int> nums = {0, 1, 0, 3, 2, 3};
        int expected = 4;
        REQUIRE(length_of_LIS(nums) == expected);
    }

    SECTION("Test Case 3") {
        std::vector<int> nums = {7, 7, 7, 7, 7, 7, 7};
        int expected = 1;
        REQUIRE(length_of_LIS(nums) == expected);
    }
}
```

### Explanation:
1. **Header Files**: Include the necessary header files (`<catch2/catch_test_macros.hpp>`, `<vector>`, `<algorithm>`).
2. **Function Definition**: The `length_of_LIS` function is defined as before.
3. **Test Class**: The `TEST_CASE` macro is used to define a test case named "Test Length of LIS".
4. **Sections**: Each test case is defined within a `SECTION` block.
5. **Assertions**: The `REQUIRE` macro is used to assert the expected results.

### Running the Tests
To run the tests, you need to link against the Catch2 library. Here is an example of how to compile and run the tests using g++:

```sh
g++ -o test_length_of_lis test_length_of_lis.cpp -lcatch2
./test_length_of_lis
```

Make sure you have the Catch2 library installed and properly linked. This setup ensures that the tests are executed and the results are displayed.

This C++ code preserves the functionality and logic of the original Python unittests and uses appropriate assertions in Catch2.