Sure! Below is the conversion of the given Python code into a C++ test class using Catch2. First, we'll define the function `length_of_LIS` in C++, then write the test cases using Catch2.

Here's the C++ implementation:

```cpp
#include <catch2/catch.hpp>
#include <vector>
#include <algorithm>

// Function to find the length of the longest strictly increasing subsequence
int length_of_LIS(const std::vector<int>& nums) {
    if (nums.empty()) return 0;

    std::vector<int> dp(nums.size(), 1);

    for (size_t i = 1; i < nums.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            if (nums[i] > nums[j]) {
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
    }

    return *std::max_element(dp.begin(), dp.end());
}

TEST_CASE("Test Length of Longest Increasing Subsequence") {
    SECTION("Example Test Case") {
        std::vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
        REQUIRE(length_of_LIS(nums) == 4);
    }

    SECTION("Empty Array") {
        std::vector<int> nums = {};
        REQUIRE(length_of_LIS(nums) == 0);
    }

    SECTION("Single Element") {
        std::vector<int> nums = {5};
        REQUIRE(length_of_LIS(nums) == 1);
    }

    SECTION("Strictly Decreasing") {
        std::vector<int> nums = {10, 5, 4, 3, 2, 1};
        REQUIRE(length_of_LIS(nums) == 1);
    }

    SECTION("Strictly Increasing") {
        std::vector<int> nums = {1, 2, 3, 4, 5, 6};
        REQUIRE(length_of_LIS(nums) == 6);
    }

    SECTION("Multiple Elements") {
        std::vector<int> nums = {10, 22, 9, 33, 21, 50, 41, 60, 80};
        REQUIRE(length_of_LIS(nums) == 6);
    }
}
```

### Explanation:
1. **Function Definition**: The `length_of_LIS` function takes a vector of integers as input and returns the length of the longest strictly increasing subsequence.
2. **Dynamic Programming Approach**: We use a dynamic programming approach to solve this problem. We initialize a vector `dp` with all elements set to 1, indicating that each element can be considered as a subsequence of length 1.
3. **Nested Loops**: We iterate through the vector and update the `dp` vector based on whether the current element is greater than the previous elements.
4. **Max Element**: Finally, we find the maximum value in the `dp` vector, which represents the length of the longest strictly increasing subsequence.
5. **Test Cases**: We use Catch2's `SECTION` to define different test cases, ensuring that the function behaves correctly for various inputs.

This setup should provide a comprehensive test suite for the `length_of_LIS` function, ensuring its correctness across multiple scenarios.