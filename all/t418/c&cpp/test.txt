Sure! Below is the equivalent C++ unit test case using Catch2 for the provided Python `unittest` test class.

```cpp
#include <catch2/catch.hpp>
#include <vector>

int length_of_LIS(const std::vector<int>& nums) {
    // Implementation of the function goes here
}

TEST_CASE("Test Length of Longest Increasing Subsequence", "[length_of_LIS]") {
    SECTION("Example 1") {
        std::vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
        REQUIRE(length_of_LIS(nums) == 4);
    }

    SECTION("Example 2") {
        std::vector<int> nums = {0, 1, 0, 3, 2, 3};
        REQUIRE(length_of_LIS(nums) == 4);
    }

    SECTION("Example 3") {
        std::vector<int> nums = {7, 7, 7, 7, 7, 7, 7};
        REQUIRE(length_of_LIS(nums) == 1);
    }

    SECTION("Empty Input") {
        std::vector<int> nums = {};
        REQUIRE(length_of_LIS(nums) == 0);
    }
}
```

In this C++ code:

1. We include the Catch2 header file.
2. We define the `length_of_LIS` function, which should contain the implementation of the function you want to test.
3. We create a test suite named "Test Length of Longest Increasing Subsequence" using the `TEST_CASE` macro.
4. Inside the test suite, we define multiple sections (test cases) using the `SECTION` macro.
5. We use the `REQUIRE` macro to assert that the function returns the expected result.

Make sure to link your project with the Catch2 library when compiling your C++ code.