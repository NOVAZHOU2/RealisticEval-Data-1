Sure, letâ€™s convert the provided Python function into a JavaScript function and then write Jest tests for it. Since the Python function is not provided with an existing unittest class, I will create a Jest test suite based on the problem description.

### Python Function:
```python
from typing import List


def length_of_LIS(nums: List[int]) -> int:
    """
    Find the length of the longest strictly increasing subsequence in an integer array.

    Args:
        nums (List[int]): The input integer array.

    Returns:
        int: The length of the longest strictly increasing subsequence.
    """
    if not nums:
        return 0
    
    dp = [1] * len(nums)
    
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)
```

### JavaScript Function:
We need to translate the Python function into JavaScript:

```javascript
/**
 * Finds the length of the longest strictly increasing subsequence in an integer array.
 *
 * @param {number[]} nums - The input integer array.
 * @returns {number} The length of the longest strictly increasing subsequence.
 */
function lengthOfLIS(nums) {
    if (!nums.length) {
        return 0;
    }

    const dp = new Array(nums.length).fill(1);

    for (let i = 0; i < nums.length; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }

    return Math.max(...dp);
}
```

### Jest Test Suite:
Now, we can write Jest tests to validate the correctness of the JavaScript function:

```javascript
describe('lengthOfLIS', () => {
    test('should handle empty array', () => {
        expect(lengthOfLIS([])).toBe(0);
    });

    test('should handle single element array', () => {
        expect(lengthOfLIS([1])).toBe(1);
    });

    test('should handle non-increasing sequences', () => {
        expect(lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18])).toBe(4);
    });

    test('should handle strictly increasing sequences', () => {
        expect(lengthOfLIS([1, 2, 3, 4, 5, 6, 7, 8, 9])).toBe(9);
    });

    test('should handle sequences with duplicates', () => {
        expect(lengthOfLIS([3, 1, 2, 2, 4, 5, 5, 6, 6, 7, 8])).toBe(6);
    });

    test('should handle sequences with all elements being the same', () => {
        expect(lengthOfLIS([1, 1, 1, 1, 1, 1, 1, 1, 1])).toBe(1);
    });
});
```

### Explanation:
- **Test Cases**:
  - `test('should handle empty array')`: Ensures the function returns `0` when the input array is empty.
  - `test('should handle single element array')`: Ensures the function returns `1` for a single-element array.
  - `test('should handle non-increasing sequences')`: Validates the function works correctly with non-increasing sequences.
  - `test('should handle strictly increasing sequences')`: Validates the function works correctly with strictly increasing sequences.
  - `test('should handle sequences with duplicates')`: Ensures the function handles sequences with duplicate values correctly.
  - `test('should handle sequences with all elements being the same')`: Ensures the function works correctly when all elements are the same.

These tests cover various edge cases and typical scenarios, ensuring the JavaScript function behaves as expected.