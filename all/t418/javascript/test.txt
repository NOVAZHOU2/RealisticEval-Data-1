Certainly! I will convert the given Python unittest test class into an equivalent Jest test suite, ensuring that the functionality and logic of the tests are maintained. I will also document any necessary changes due to language differences between Python and JavaScript.

Here is the converted Jest test suite:

```javascript
const lengthOfLIS = require('./lengthOfLIS'); // Assuming the function is defined in a separate file

describe('TestLengthOfLIS', () => {
  it('test_case_1', () => {
    const nums = [10, 9, 2, 5, 3, 7, 101, 18];
    const expected = 4;
    expect(lengthOfLIS(nums)).toEqual(expected);
  });

  it('test_case_2', () => {
    const nums = [0, 1, 0, 3, 2, 3];
    const expected = 4;
    expect(lengthOfLIS(nums)).toEqual(expected);
  });

  it('test_case_3', () => {
    const nums = [7, 7, 7, 7, 7, 7, 7];
    const expected = 1;
    expect(lengthOfLIS(nums)).toEqual(expected);
  });
});
```

### Explanation:
1. **Importing the Function**:
   - In JavaScript, we need to import the `lengthOfLIS` function from the file where it is defined. This is done using `require` or `import` depending on the module system being used.

2. **Test Suite**:
   - The `describe` function is used to group related tests together. It takes a string describing the test suite and a callback function containing the tests.

3. **Test Cases**:
   - Each test case is defined using the `it` function, which takes a description and a callback function containing the assertions.
   - The `expect` function is used to make assertions. In this case, `toEqual` is used to check equality.

4. **Data and Assertions**:
   - The test cases are structured similarly to the Python unittest cases, with arrays and expected values.
   - The `expect` function is used to assert that the result of `lengthOfLIS(nums)` matches the expected value.

### File Structure:
- Assume that the `lengthOfLIS` function is defined in a separate file named `lengthOfLIS.js`. You would import it in your test file.

#### `lengthOfLIS.js`
```javascript
function lengthOfLIS(nums) {
    if (nums.length === 0) return 0;
    const dp = new Array(nums.length).fill(1);

    for (let i = 0; i < nums.length; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[j] < nums[i]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }
    return Math.max(...dp);
}

module.exports = lengthOfLIS;
```

#### `testLengthOfLIS.js`
```javascript
const lengthOfLIS = require('./lengthOfLIS');

describe('TestLengthOfLIS', () => {
  it('test_case_1', () => {
    const nums = [10, 9, 2, 5, 3, 7, 101, 18];
    const expected = 4;
    expect(lengthOfLIS(nums)).toEqual(expected);
  });

  it('test_case_2', () => {
    const nums = [0, 1, 0, 3, 2, 3];
    const expected = 4;
    expect(lengthOfLIS(nums)).toEqual(expected);
  });

  it('test_case_3', () => {
    const nums = [7, 7, 7, 7, 7, 7, 7];
    const expected = 1;
    expect(lengthOfLIS(nums)).toEqual(expected);
  });
});
```

This setup ensures that the functionality and logic of the tests are preserved, and the structure is clear and follows Jest conventions.