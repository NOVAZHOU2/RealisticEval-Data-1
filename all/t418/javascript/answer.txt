Sure, I can help you convert the given Python code into JavaScript while maintaining the same functionality, logic, and structure. Hereâ€™s how the equivalent JavaScript code would look:

```javascript
function lengthOfLIS(nums) {
    if (nums.length === 0) return 0;
    const dp = new Array(nums.length).fill(1);
    for (let i = 0; i < nums.length; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[j] < nums[i]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }
    return Math.max(...dp);
}
```

### Explanation:
1. **Function Definition**: The function `lengthOfLIS` is defined with a single parameter `nums`.
2. **Edge Case Handling**: If `nums` is an empty array, the function returns `0`.
3. **Initialization of DP Array**: An array `dp` is initialized with `1`s using `new Array(nums.length).fill(1)`.
4. **Nested Loops**:
   - The outer loop iterates over the indices of `nums`.
   - The inner loop iterates up to the current index `i`.
   - If `nums[j] < nums[i]`, then `dp[i]` is updated to be the maximum between its current value and `dp[j] + 1`.
5. **Return Statement**: Finally, the maximum value in `dp` is returned using `Math.max(...dp)`.

This JavaScript code mirrors the behavior of the original Python code, providing the length of the longest increasing subsequence in the given list of numbers.