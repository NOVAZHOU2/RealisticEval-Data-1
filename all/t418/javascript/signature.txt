Certainly! I will convert the given Python function signature and comments into equivalent JavaScript syntax, including JSDoc comments for documentation.

Here is the converted JavaScript code:

```javascript
/**
 * Finds the length of the longest strictly increasing subsequence in an integer array.
 * 
 * Example:
 *   Input: [10, 9, 2, 5, 3, 7, 101, 18]
 *   Output: 4
 *
 * @param {number[]} nums - The integer array.
 * @returns {number} The length of the longest strictly increasing subsequence.
 */
function lengthOfLIS(nums) {
    if (nums.length === 0) return 0;
    const dp = new Array(nums.length).fill(1);

    for (let i = 0; i < nums.length; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[j] < nums[i]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }
    return Math.max(...dp);
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block provides a description of the function, an example, and details about the parameters and return type.
   - The `@param` tag specifies the parameter `nums` and its type.
   - The `@returns` tag specifies the return type of the function.

2. **Function Definition**:
   - The function `lengthOfLIS` takes an array `nums` as input.
   
3. **Initialization**:
   - If `nums` is empty, it returns `0`.
   - Initialize the `dp` array with `1`s using `new Array(nums.length).fill(1)`.

4. **Dynamic Programming Loop**:
   - Two nested loops iterate over the `nums` array.
   - For each element at index `i`, it checks all previous elements (`j`).
   - If `nums[j] < nums[i]`, it updates `dp[i]` by taking the maximum value between the current `dp[i]` and `dp[j] + 1`.

5. **Result**:
   - Finally, it returns the maximum value in the `dp` array using `Math.max(...dp)`.

This JavaScript code preserves the functionality, logic, and structure of the original Python code, and includes appropriate JSDoc comments for documentation.