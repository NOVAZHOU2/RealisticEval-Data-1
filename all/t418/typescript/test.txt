Sure! Below is the equivalent TypeScript test case using Jest for the provided Python function `length_of_LIS`.

```typescript
import { describe, expect, test } from '@jest/globals';

function lengthOfLIS(nums: number[]): number {
    /**
     * Given an integer array nums and find the length of the longest strictly increasing subsequence in it.
     * For example:
     *     input: [10, 9, 2, 5, 3, 7, 101, 18]
     *     output: 4
     *
     * Args:
     *     nums(number[]): integer array
     *
     * Returns:
     *     number: the length of the longest strictly increasing subsequence
     */
    if (nums.length === 0) return 0;

    const dp = new Array(nums.length).fill(1);

    for (let i = 1; i < nums.length; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }

    return Math.max(...dp);
}

describe('lengthOfLIS', () => {
    test('should return 4 for input [10, 9, 2, 5, 3, 7, 101, 18]', () => {
        expect(lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18])).toBe(4);
    });

    test('should return 1 for input [1]', () => {
        expect(lengthOfLIS([1])).toBe(1);
    });

    test('should return 0 for input []', () => {
        expect(lengthOfLIS([])).toBe(0);
    });

    test('should return 5 for input [0, 1, 0, 3, 2, 3]', () => {
        expect(lengthOfLIS([0, 1, 0, 3, 2, 3])).toBe(4);
    });
});
```

### Explanation:
- **Importing Jest**: We import `describe`, `expect`, and `test` from `@jest/globals`.
- **Function Definition**: The `lengthOfLIS` function remains unchanged from the original Python code.
- **Test Suite**:
  - We create a `describe` block named 'lengthOfLIS' to group related tests.
  - Each `test` block contains a description of the test case and uses `expect` to assert the expected outcome.

This TypeScript test case ensures that the `lengthOfLIS` function works correctly for various inputs, including edge cases like empty arrays or arrays with a single element.