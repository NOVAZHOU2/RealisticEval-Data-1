Certainly! Here is the equivalent Jest test suite in TypeScript for the provided Python unittest class. The test cases will use Jest's assertion methods to ensure the functionality and logic are preserved.

### TypeScript Code with Jest Testing

First, ensure you have Jest and TypeScript set up in your project. You can install them using npm:

```sh
npm install --save-dev jest @types/jest ts-jest
```

Add Jest configuration to your `tsconfig.json` and `jest.config.js` files:

**tsconfig.json**

```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "skipLibCheck": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}
```

**jest.config.js**

```js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest'
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
};
```

### TypeScript Test Class

Here is the TypeScript code for the test class:

**lengthOfLIS.ts**

```typescript
/**
 * Finds the length of the longest strictly increasing subsequence in an integer array.
 *
 * Example:
 *   Input: [10, 9, 2, 5, 3, 7, 101, 18]
 *   Output: 4
 *
 * @param nums - An array of integers.
 * @returns The length of the longest strictly increasing subsequence.
 */
function lengthOfLIS(nums: number[]): number {
  if (nums.length === 0) return 0;
  const dp: number[] = new Array(nums.length).fill(1);
  for (let i = 0; i < nums.length; i++) {
    for (let j = 0; j < i; j++) {
      if (nums[j] < nums[i]) {
        dp[i] = Math.max(dp[i], dp[j] + 1);
      }
    }
  }
  return Math.max(...dp);
}

export default lengthOfLIS;
```

### Jest Test Suite

**lengthOfLIS.test.ts**

```typescript
import lengthOfLIS from './lengthOfLIS';

describe('TestLengthOFLIS', () => {
  it('test_case_1', () => {
    const nums = [10, 9, 2, 5, 3, 7, 101, 18];
    const expected = 4;
    expect(lengthOfLIS(nums)).toBe(expected);
  });

  it('test_case_2', () => {
    const nums = [0, 1, 0, 3, 2, 3];
    const expected = 4;
    expect(lengthOfLIS(nums)).toBe(expected);
  });

  it('test_case_3', () => {
    const nums = [7, 7, 7, 7, 7, 7, 7];
    const expected = 1;
    expect(lengthOfLIS(nums)).toBe(expected);
  });
});
```

### Explanation:
1. **Import Function**: Import the `lengthOfLIS` function from the `lengthOfLIS.ts` file.
2. **Describe Block**: Use Jest's `describe` block to group the test cases.
3. **Test Cases**: Each test case uses `it` to describe the test and `expect` to assert the expected result.
4. **Assertion Methods**: The `toBe` method is used to check equality, which is equivalent to `assertEqual` in Python's `unittest`.

This setup ensures that the functionality and logic of the tests are preserved, and the code is properly annotated and structured for TypeScript and Jest.