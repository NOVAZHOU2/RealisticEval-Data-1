Sure! Here is the equivalent TypeScript code for the given Python function:

```typescript
function lengthOfLIS(nums: number[]): number {
    if (nums.length === 0) return 0;
    const dp: number[] = new Array(nums.length).fill(1);
    for (let i = 0; i < nums.length; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[j] < nums[i]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }
    return Math.max(...dp);
}
```

### Explanation:
1. **Function Definition**: The function `lengthOfLIS` takes an array of numbers (`nums`) and returns a number.
2. **Empty Array Check**: If `nums` is empty, it returns 0.
3. **Initialization of DP Array**: Initializes the dynamic programming array `dp` with all elements set to 1 using `new Array(nums.length).fill(1)`.
4. **Nested Loops**: Two nested loops iterate over the `nums` array to update the `dp` array based on the condition `nums[j] < nums[i]`.
5. **Maximum Value Calculation**: Updates each element in `dp` by taking the maximum value between its current value and the value `dp[j] + 1`.
6. **Return Maximum Value**: Returns the maximum value found in the `dp` array using `Math.max(...dp)`.

This code maintains the same functionality and logic as the Python code, but adapts it to TypeScript's syntax and type system.