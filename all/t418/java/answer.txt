Here’s the Java version of the given Python code, organized within the package `org.real.temp` and the class `Answer`. I’ve made sure to handle type declarations, method signatures, and object-oriented principles in Java:

```java
package org.real.temp;

public class Answer {

    /**
     * Calculates the length of the longest increasing subsequence in an array of integers.
     * 
     * @param nums The input array of integers.
     * @return The length of the longest increasing subsequence.
     */
    public static int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int[] dp = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            dp[i] = 1;
        }
        
        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        
        int maxLength = 0;
        for (int length : dp) {
            maxLength = Math.max(maxLength, length);
        }
        
        return maxLength;
    }

    public static void main(String[] args) {
        int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};
        System.out.println("Length of Longest Increasing Subsequence: " + lengthOfLIS(nums));
    }
}
```

### Explanation:
- **Package Declaration**: The code starts with the package declaration `package org.real.temp;`.
- **Class Definition**: The class `Answer` is defined within the package.
- **Method Signature**: The method `lengthOfLIS` takes an array of integers `nums` and returns an integer representing the length of the longest increasing subsequence.
- **Initialization**: The dynamic programming array `dp` is initialized with all elements set to 1.
- **Dynamic Programming Loop**: Two nested loops iterate over the array to fill the `dp` array based on the condition `nums[j] < nums[i]`.
- **Finding Maximum Length**: After filling the `dp` array, the maximum value in `dp` is found and returned.

This Java code maintains the same functionality and logic as the provided Python code, adhering to Java's syntax and conventions.