Hereâ€™s the Java version of the provided Python code. The code is placed within the package `org.real.temp` and the class named `Answer`. It maintains the same functionality and logic but adapts to Java's syntax and conventions:

```java
package org.real.temp;

public class Answer {

    /**
     * Calculates the length of the longest increasing subsequence (LIS) in the given array.
     *
     * @param nums The input array of integers.
     * @return The length of the LIS.
     */
    public static int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int[] dp = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            dp[i] = 1;
        }
        
        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        
        int maxLength = 0;
        for (int length : dp) {
            maxLength = Math.max(maxLength, length);
        }
        
        return maxLength;
    }

    public static void main(String[] args) {
        int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};
        System.out.println("Length of the Longest Increasing Subsequence: " + lengthOfLIS(nums));
    }
}
```

### Explanation:
1. **Package and Class Declaration**: The Java code starts with the package declaration `package org.real.temp;` followed by the class declaration `public class Answer`.

2. **Method Definition**: The method `lengthOfLIS` is defined as a static method that takes an array of integers (`int[] nums`) and returns an integer.

3. **Null or Empty Check**: The method checks if the input array is `null` or empty using `if (nums == null || nums.length == 0)`.

4. **Dynamic Programming Array**: An array `dp` is initialized with all elements set to 1. This array will store the length of the longest increasing subsequence ending at each index.

5. **Nested Loops**: Two nested loops iterate over the array. The outer loop iterates from the second element to the last element, and the inner loop iterates from the first element up to the current index of the outer loop.

6. **Update DP Array**: If the current element is greater than the previous element, update the `dp` array to reflect the longest increasing subsequence ending at the current index.

7. **Find Maximum Length**: After populating the `dp` array, the maximum value in the `dp` array is found and returned as the result.

8. **Main Method**: A simple `main` method is included to demonstrate the usage of the `lengthOfLIS` method with a sample array.

This Java code preserves the logic and functionality of the original Python code while adhering to Java's syntax and conventions.