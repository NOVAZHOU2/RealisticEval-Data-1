To solve the given task, we will create a Java class named `Tester` within the package `org.real.temp`. We will use JUnit 5 annotations and assertions for this conversion. The method `lengthOfLIS` will be implemented to match the functionality of the Python function `length_of_LIS`.

Here is the Java code:

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;
import java.util.List;

public class Tester {

    /**
     * Finds the length of the longest strictly increasing subsequence in an array.
     *
     * @param nums the integer array
     * @return the length of the longest strictly increasing subsequence
     */
    public int lengthOfLIS(List<Integer> nums) {
        if (nums == null || nums.isEmpty()) {
            return 0;
        }

        int[] dp = new int[nums.size()];
        Arrays.fill(dp, 1);

        int maxLength = 1;

        for (int i = 1; i < nums.size(); i++) {
            for (int j = 0; j < i; j++) {
                if (nums.get(i) > nums.get(j)) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            maxLength = Math.max(maxLength, dp[i]);
        }

        return maxLength;
    }

    @Test
    public void testLengthOfLIS() {
        // Test case 1
        assertEquals(4, lengthOfLIS(Arrays.asList(10, 9, 2, 5, 3, 7, 101, 18)));

        // Test case 2
        assertEquals(1, lengthOfLIS(Arrays.asList(1)));

        // Test case 3
        assertEquals(0, lengthOfLIS(Arrays.asList()));

        // Test case 4
        assertEquals(3, lengthOfLIS(Arrays.asList(4, 10, 4, 3, 8, 9)));
    }
}
```

### Explanation:
1. **Package Declaration**: The class is declared within the package `org.real.temp`.
2. **JUnit Assertions**: The `assertEquals` method is used to assert the expected outcome.
3. **Method Implementation**: The method `lengthOfLIS` implements the logic to find the length of the longest strictly increasing subsequence in an array.
4. **Test Cases**: The `testLengthOfLIS` method contains several test cases to verify the correctness of the implementation.

This Java code provides equivalent functionality to the original Python code using JUnit for testing.