Here's the equivalent JavaScript code for the provided Python functionality. This JavaScript version uses Node.js modules to handle filesystem operations, mirroring the logic and structure of the original Python code.

```javascript
const fs = require('fs');
const path = require('path');

function copyDirectory(sourceDir, targetDir) {
    /**
     * Copies all files and subdirectories from the source directory to the target directory.
     *
     * @param {string} sourceDir - The source directory from which files and subdirectories will be copied.
     * @param {string} targetDir - The target directory to which files and subdirectories will be copied.
     * @throws {Error} - If the source directory does not exist or is not a directory.
     */
    if (!fs.existsSync(sourceDir)) {
        throw new Error(`Source directory does not exist: ${sourceDir}`);
    }
    if (!fs.statSync(sourceDir).isDirectory()) {
        throw new Error(`Source is not a directory: ${sourceDir}`);
    }

    // Create target directory if it doesn't exist
    fs.mkdirSync(targetDir, { recursive: true });

    // Copy each file and directory in the source directory
    const items = fs.readdirSync(sourceDir);
    for (const item of items) {
        const sourcePath = path.join(sourceDir, item);
        const targetPath = path.join(targetDir, item);

        if (fs.statSync(sourcePath).isDirectory()) {
            // Recursively copy the subdirectory
            copyDirectory(sourcePath, targetPath);
        } else {
            // Copy the file
            copyFile(sourcePath, targetPath);
        }
    }
}

function copyFile(source, target) {
    /**
     * Copies a single file from the source path to the target path.
     *
     * @param {string} source - The source file path.
     * @param {string} target - The target file path.
     * @throws {Error} - If an I/O error occurs during file copy.
     */
    fs.copyFileSync(source, target);  // Copy the file
}

// Example usage:
// copyDirectory('path/to/source', 'path/to/target');
```

### Key Points:
- **Modules**: The code uses `fs` for file system operations and `path` for handling file paths, similar to Python's `os` and `shutil`.
- **Error Handling**: Errors are thrown as exceptions when the source directory does not exist or is not a directory, similar to Python's `ValueError`.
- **Recursive Function**: The function `copyDirectory` is recursive, allowing it to copy subdirectories as well.
- **Sync Methods**: The synchronous methods (like `copyFileSync` and `mkdirSync`) are used to maintain simplicity, though asynchronous alternatives could be used for larger applications.