Here’s how to convert the provided Java code for directory and file copying into Python. In this conversion, we will use the os and shutil modules, which are commonly used for file and directory operations in Python.
Here’s the converted Python code:
python
import os
import shutil

class Answer:
    @staticmethod
    def copy_directory(source_dir: str, target_dir: str) -> None:
        """
        Copies all files and subdirectories from the source directory to the target directory.

        :param source_dir: The source directory from which files and subdirectories will be copied.
        :param target_dir: The target directory to which files and subdirectories will be copied.
        :raises ValueError: If the source directory does not exist or is not a directory.
        """
        if not os.path.exists(source_dir):
            raise ValueError(f"Source directory does not exist: {source_dir}")
        if not os.path.isdir(source_dir):
            raise ValueError(f"Source is not a directory: {source_dir}")
        
        os.makedirs(target_dir, exist_ok=True)  # Create target directory if it doesn't exist

        # Copy each file and directory in the source directory
        for item in os.listdir(source_dir):
            source_path = os.path.join(source_dir, item)
            target_path = os.path.join(target_dir, item)

            if os.path.isdir(source_path):
                # Recursively copy the subdirectory
                Answer.copy_directory(source_path, target_path)
            else:
                # Copy the file
                Answer.copy_file(source_path, target_path)

    @staticmethod
    def copy_file(source: str, target: str) -> None:
        """
        Copies a single file from the source path to the target path.

        :param source: The source file path.
        :param target: The target file path.
        :raises IOError: If an I/O error occurs during file copy.
        """
        shutil.copy2(source, target)  # Copy the file and preserve metadata

    @staticmethod
    def main():
        """
        Main method for testing the copy_directory function.
        """
        source_dir = "path/to/source/directory"
        target_dir = "path/to/target/directory"
        try:
            Answer.copy_directory(source_dir, target_dir)
            print("Directory copied successfully.")
        except Exception as e:
            print(f"Error: {e}")

# Run the main function if this script is executed
if __name__ == "__main__":
    Answer.main()
Breakdown of the Python Code:
Imports:
os: To interact with the operating system for file and directory operations.
shutil: For high-level file operations like copying files and directories.
Class Definition:
Answer: This class contains static methods for copying directories and files.
Method: copy_directory:
Takes source_dir and target_dir as strings.
Checks if the source directory exists and is a directory.
Uses os.makedirs to create the target directory if it doesn’t exist.
Iterates over items in the source directory, copying files and recursively copying subdirectories.
Method: copy_file:
Takes source and target paths as strings.
Uses shutil.copy2 to copy the file, which preserves file metadata.
Method: main:
This method demonstrates how to use the copy_directory function.
It sets example paths for the source and target directories.
Calls the copy method and handles exceptions.
Execution Block:
The if __name__ == "__main__": block ensures that the main method runs when the script is executed directly.
Usage:
To use the above Python code:
Replace "path/to/source/directory" and "path/to/target/directory" with actual paths on your system.
Run the script, and it will copy the specified directory structure.