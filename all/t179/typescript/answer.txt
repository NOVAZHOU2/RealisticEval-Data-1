Here's the equivalent TypeScript code for your provided Python code:

```typescript
import * as fs from 'fs';
import * as path from 'path';

function copyDirectory(sourceDir: string, targetDir: string): void {
    // Check if source directory exists
    if (!fs.existsSync(sourceDir)) {
        throw new Error(`Source directory does not exist: ${sourceDir}`);
    }
    if (!fs.statSync(sourceDir).isDirectory()) {
        throw new Error(`Source is not a directory: ${sourceDir}`);
    }

    // Create target directory if it doesn't exist
    fs.mkdirSync(targetDir, { recursive: true });

    // Copy each file and directory in the source directory
    const items = fs.readdirSync(sourceDir);
    for (const item of items) {
        const sourcePath = path.join(sourceDir, item);
        const targetPath = path.join(targetDir, item);

        if (fs.statSync(sourcePath).isDirectory()) {
            // Recursively copy the subdirectory
            copyDirectory(sourcePath, targetPath);
        } else {
            // Copy the file
            copyFile(sourcePath, targetPath);
        }
    }
}

function copyFile(source: string, target: string): void {
    // Copy the file and preserve metadata
    fs.copyFileSync(source, target);
}
```

This TypeScript version maintains the structure and logic of the original Python code while adapting to TypeScript's type system and idioms. If you want to delve deeper into specific parts, let me know!