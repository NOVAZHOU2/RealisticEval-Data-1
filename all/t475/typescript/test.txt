Sure! Below is the equivalent TypeScript test case using Jest for the `safeFormat` function:

```typescript
import { describe, it, expect } from '@jest/globals';

function safeFormat(template: string, ...args: any[]): string {
    return template.replace(/{(\w+)}/g, (match, key) => args[key] || match);
}

describe('safeFormat', () => {
    it('replaces placeholders with corresponding values', () => {
        const result = safeFormat('Hello, {name}!', { name: 'Alice' });
        expect(result).toBe('Hello, Alice!');
    });

    it('leaves unpaired placeholders unchanged', () => {
        const result = safeFormat('Hello, {name}!', { age: 25 });
        expect(result).toBe('Hello, {name}!');
    });

    it('handles multiple placeholders', () => {
        const result = safeFormat('Hello, {name}! You are {age} years old.', { name: 'Bob', age: 30 });
        expect(result).toBe('Hello, Bob! You are 30 years old.');
    });

    it('returns the original string if no placeholders are found', () => {
        const result = safeFormat('Hello, world!', {});
        expect(result).toBe('Hello, world!');
    });
});
```

In this TypeScript code:
- We import the necessary functions (`describe`, `it`, and `expect`) from the `@jest/globals` module.
- We define the `safeFormat` function, which replaces placeholders in a string with corresponding values from an object.
- We create a `describe` block to group our test cases together.
- Each `it` block contains a specific test case, and we use the `expect` function to assert that the output of `safeFormat` matches the expected result.