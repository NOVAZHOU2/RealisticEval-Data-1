Certainly! Below is the equivalent TypeScript code that maintains the same functionality, structure, and logic as the provided Python code:

```typescript
import * as regex from 'xregexp';

function safeFormat(template: string, ...kwargs: [string, any][]): string {
    /**
     * Safely formats a template string by replacing placeholders with corresponding values
     * from the provided keyword arguments. If a placeholder does not have a corresponding
     * value in kwargs, it remains unchanged.
     *
     * @param template - The string template containing placeholders in the form {key}.
     * @param kwargs - An array of tuples representing key-value pairs for the replacements.
     * 
     * @returns The formatted string with placeholders replaced by values.
     */

    // Compile a regex pattern to match placeholders in the form {key}
    const pattern = regex('\\{([\\w]+)\\}', 'g');

    const replacer = (match: string, key: string): string => {
        /**
         * Replacement function for the regex replace method.
         *
         * @param match - The full matched string.
         * @param key - The placeholder key extracted from the match.
         * 
         * @returns The replacement value if the key exists in kwargs, otherwise the original placeholder.
         */
        // Find the corresponding value from kwargs, or the original placeholder if not found
        const keyValuePairs = new Map(kwargs);
        return keyValuePairs.has(key) ? String(keyValuePairs.get(key)) : match;
    };

    // Replace placeholders in the template using the replacer function
    return template.replace(pattern, replacer);
}

// Example usage
const formattedString = safeFormat("Hello, {name}! Today is {day}.", ["name", "Alice"], ["day", "Monday"]);
console.log(formattedString);  // Output: "Hello, Alice! Today is Monday."
```

### Explanation:
1. **Import**: TypeScript does not have built-in regex support similar to Python's `re` module, so we use `xregexp` which provides advanced regex capabilities.
2. **Function Definition**: The `safeFormat` function is defined with a type signature for the `template` parameter and variadic `kwargs` parameter. The `kwargs` parameter is an array of tuples representing key-value pairs.
3. **Regex Pattern**: The regex pattern is compiled to match placeholders in the form `{key}`.
4. **Replacer Function**: The `replacer` function is defined to handle the replacement logic. It uses a `Map` to efficiently look up the values based on keys.
5. **String Replacement**: The `replace` method is used with the compiled pattern and the replacer function to perform the replacements.
6. **Example Usage**: An example usage is provided to demonstrate how to call the `safeFormat` function.

This TypeScript code closely mirrors the functionality of the provided Python code while adapting to TypeScript's static type system and idioms.