Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while converting the tests to Jest.

### Python Code:
```python
import unittest

class TestSafeFormat(unittest.TestCase):

    def test_full_replacement(self):
        """Test with all placeholders having corresponding values."""
        template = "Hello, {name}! Welcome to {place}."
        result = safe_format(template, name="Alice", place="Wonderland")
        expected = "Hello, Alice! Welcome to Wonderland."
        self.assertEqual(result, expected)

    def test_partial_replacement(self):
        """Test with some placeholders missing corresponding values."""
        template = "Hello, {name}! Welcome to {place}."
        result = safe_format(template, name="Alice")
        expected = "Hello, Alice! Welcome to {place}."
        self.assertEqual(result, expected)

    def test_no_replacement(self):
        """Test when no placeholders are provided."""
        template = "Hello, world!"
        result = safe_format(template)
        expected = "Hello, world!"
        self.assertEqual(result, expected)

    def test_missing_placeholder(self):
        """Test with a placeholder that has no corresponding value."""
        template = "My name is {name}, and I live in {city}."
        result = safe_format(template, name="Alice")
        expected = "My name is Alice, and I live in {city}."
        self.assertEqual(result, expected)

    def test_numeric_values(self):
        """Test with numeric values as replacements."""
        template = "Your score is {score} out of {total}."
        result = safe_format(template, score=85, total=100)
        expected = "Your score is 85 out of 100."
        self.assertEqual(result, expected)
```

### Equivalent Jest Test Suite:

```javascript
const safeFormat = require('./safeFormat'); // Assuming safeFormat is exported from another file

describe('TestSafeFormat', () => {
    describe('test_full_replacement', () => {
        it('should fully replace all placeholders with corresponding values', () => {
            const template = "Hello, {name}! Welcome to {place}.";
            const result = safeFormat(template, { name: "Alice", place: "Wonderland" });
            const expected = "Hello, Alice! Welcome to Wonderland.";
            expect(result).toEqual(expected);
        });
    });

    describe('test_partial_replacement', () => {
        it('should partially replace placeholders with corresponding values', () => {
            const template = "Hello, {name}! Welcome to {place}.";
            const result = safeFormat(template, { name: "Alice" });
            const expected = "Hello, Alice! Welcome to {place}.";
            expect(result).toEqual(expected);
        });
    });

    describe('test_no_replacement', () => {
        it('should not replace any placeholders when none are provided', () => {
            const template = "Hello, world!";
            const result = safeFormat(template);
            const expected = "Hello, world!";
            expect(result).toEqual(expected);
        });
    });

    describe('test_missing_placeholder', () => {
        it('should leave placeholders unchanged when a value is missing', () => {
            const template = "My name is {name}, and I live in {city}.";
            const result = safeFormat(template, { name: "Alice" });
            const expected = "My name is Alice, and I live in {city}.";
            expect(result).toEqual(expected);
        });
    });

    describe('test_numeric_values', () => {
        it('should handle numeric values correctly', () => {
            const template = "Your score is {score} out of {total}.";
            const result = safeFormat(template, { score: 85, total: 100 });
            const expected = "Your score is 85 out of 100.";
            expect(result).toEqual(expected);
        });
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `safeFormat` function is imported from another file using `require`. This assumes that `safeFormat` is defined and exported in a separate module.

2. **Describe Blocks**:
   - Each test case is wrapped in a `describe` block to provide a clear description of the test scenario.
   - Each `describe` block contains an `it` block that defines the specific test case.

3. **Assertions**:
   - The `expect` function is used with `toEqual` to assert that the result matches the expected value.

4. **Test Data**:
   - The test data and expected results are clearly defined within each test case.

5. **Function Call**:
   - The `safeFormat` function is called with the appropriate arguments, and the result is compared against the expected value.

This conversion ensures that the functionality and logic of the tests are preserved, and the structure is clear and follows Jest conventions.