Hereâ€™s the equivalent C++ code that implements the same functionality as the provided Python code:

```cpp
#include <iostream>
#include <string>
#include <regex>
#include <unordered_map>

// Function to safely format a template string
std::string safe_format(const std::string& template_str, const std::unordered_map<std::string, std::string>& kwargs) {
    // Compile a regex pattern to match placeholders in the form {key}
    std::regex pattern(R"(\{(\w+)\})");

    // Lambda function to replace placeholders
    auto replacer = [&kwargs](const std::smatch& match) -> std::string {
        // Extract the placeholder key
        std::string key = match[1];

        // Find the key in the kwargs map
        auto it = kwargs.find(key);
        if (it != kwargs.end()) {
            // If the key exists, return the corresponding value
            return it->second;
        } else {
            // Otherwise, return the original placeholder
            return "{" + key + "}";
        }
    };

    // Replace placeholders in the template using the replacer lambda function
    return std::regex_replace(template_str, pattern, replacer);
}

int main() {
    // Example usage
    std::unordered_map<std::string, std::string> kwargs = {
        {"name", "Alice"},
        {"age", "30"}
    };

    std::string template_str = "Hello, my name is {name} and I am {age} years old.";

    std::string formatted = safe_format(template_str, kwargs);

    std::cout << formatted << std::endl;

    return 0;
}
```

### Explanation:
1. **Regex Pattern**: The regex pattern `\{(\w+)\}` is used to match placeholders in the form `{key}`.
2. **Lambda Function**: A lambda function `replacer` is defined to handle the replacement logic. It checks if the key exists in the `kwargs` map and returns the corresponding value or the original placeholder.
3. **Regex Replacement**: The `std::regex_replace` function is used to perform the replacements using the `replacer` lambda function.
4. **Example Usage**: The `main` function demonstrates how to use the `safe_format` function with a sample template string and keyword arguments.

This C++ code maintains the same functionality and logic as the Python code but adapts to C++ syntax and features.