Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <filesystem>
#include <fstream>
#include <stdexcept>

namespace fs = std::filesystem;

// Function to empty a directory
void empty_directory(const std::string& directory_path) {
    // Check if the path exists and is a directory
    if (!fs::exists(directory_path)) {
        throw std::invalid_argument("The specified directory does not exist.");
    }
    if (!fs::is_directory(directory_path)) {
        throw std::invalid_argument("The specified path is not a directory.");
    }

    // Iterate over all items in the directory
    for (const auto& entry : fs::directory_iterator(directory_path)) {
        const std::string item_path = entry.path().string();

        // Check if the item is a file or directory and delete accordingly
        if (fs::is_regular_file(item_path) || fs::is_symlink(item_path)) {
            fs::remove(item_path);  // Remove the file or link
        } else if (fs::is_directory(item_path)) {
            fs::remove_all(item_path);  // Remove the directory and all its contents
        }
    }
}

TEST_CASE("TestEmptyDirectory", "[empty_directory]") {
    // Set up a temporary directory with some files and directories
    std::string test_dir = fs::temp_directory_path().string();
    fs::create_directory(test_dir);

    // Create some files and directories
    fs::create_directory(test_dir + "/subdir");
    std::ofstream file1(test_dir + "/file1.txt");
    file1 << "Hello";
    file1.close();
    std::ofstream file2(test_dir + "/subdir/file2.txt");
    file2 << "World";
    file2.close();

    SECTION("test_empty_directory_success") {
        // Test that the directory is emptied successfully
        empty_directory(test_dir);
        REQUIRE(fs::directory_iterator(test_dir) == fs::directory_iterator());
    }

    SECTION("test_empty_directory_with_subdirectories") {
        // Test emptying a directory that includes subdirectories
        empty_directory(test_dir);
        REQUIRE(fs::directory_iterator(test_dir) == fs::directory_iterator());
    }

    SECTION("test_empty_already_empty_directory") {
        // Test emptying a directory that is already empty
        empty_directory(test_dir);  // First emptying
        empty_directory(test_dir);  // Empty again
        REQUIRE(fs::directory_iterator(test_dir) == fs::directory_iterator());
    }

    // Clean up the temporary directory after each test
    fs::remove_all(test_dir);
}
```

### Explanation:
1. **Headers**: The Catch2 headers are included to provide testing functionality.
2. **Function Definition**: The `empty_directory` function is defined to empty the directory.
3. **Test Case**: The `TEST_CASE` macro defines the test case named `TestEmptyDirectory`.
4. **Setup**: A temporary directory is created using `fs::temp_directory_path()` and some files and directories are created within it.
5. **Sections**:
   - `test_empty_directory_success`: Tests that the directory is emptied successfully.
   - `test_empty_directory_with_subdirectories`: Tests emptying a directory that includes subdirectories.
   - `test_empty_already_empty_directory`: Tests emptying a directory that is already empty.
6. **Assertions**: `REQUIRE` is used to assert that the directory is empty after the `empty_directory` function is called.
7. **Cleanup**: The temporary directory is removed after each test section using `fs::remove_all`.

This C++ code preserves the functionality and logic of the original Python unittest class, ensuring that the directory is emptied correctly and thoroughly tested using the Catch2 framework.