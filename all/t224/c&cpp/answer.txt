Here's how you might translate that Python function into C++ using standard libraries:

```c++
#include <iostream>
#include <filesystem>

void emptyDirectory(const std::string &directoryPath) {
    try {
        for(auto &entry : std::filesystem::directory_iterator(directoryPath)) {
            if(entry.is_regular_file()) {
                std::filesystem::remove(entry.path());
            } else if(entry.is_directory()) {
                emptyDirectory(entry.path().string()); // Recursive call
                std::filesystem::remove_all(entry.path());
            }
        }
    } catch(std::filesystem::filesystem_error &e) {
        std::cerr << "Error occurred while processing directory: " << e.what() << '\n';
    }
}

int main() {
    std::string dirPath = "/path/to/directory"; // replace with your directory path
    emptyDirectory(dirPath);
    return 0;
}
```

Note: The above C++ code uses the `<filesystem>` library which is available from C++17 onwards. This code will remove all files and directories within the specified directory recursively. Also, it doesn't check whether the given path exists or not before attempting to empty the directory. Make sure to include error handling according to your needs.