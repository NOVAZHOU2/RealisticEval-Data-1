Sure! Below is the equivalent Java code for the provided Python function `empty_directory`. The Java code will be placed within a class named `Answer` in the package `org.real.temp`.

```java
package org.real.temp;

import java.io.File;
import java.io.IOException;

public class Answer {

    /**
     * Empty all files and subdirectories in the specified directory.
     *
     * @param directoryPath Path to the directory whose contents are to be emptied.
     * @throws IOException If an I/O error occurs while deleting files or directories.
     */
    public static void emptyDirectory(String directoryPath) throws IOException {
        File directory = new File(directoryPath);

        if (!directory.exists() || !directory.isDirectory()) {
            throw new IllegalArgumentException("The specified path does not exist or is not a directory.");
        }

        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    emptyDirectory(file.getAbsolutePath()); // Recursively delete subdirectories
                } else {
                    if (!file.delete()) {
                        throw new IOException("Failed to delete file: " + file.getAbsolutePath());
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        try {
            emptyDirectory("/path/to/directory"); // Replace with your directory path
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Class Definition**: The class `Answer` is defined within the package.
3. **Method Signature**: The method `emptyDirectory` is declared as `static` so it can be called without creating an instance of the class. It takes a single parameter `directoryPath` of type `String` and throws an `IOException` to handle any I/O errors that might occur during the deletion process.
4. **Directory Check**: The method first checks if the specified path exists and is indeed a directory. If not, it throws an `IllegalArgumentException`.
5. **File Deletion**: The method uses `listFiles()` to get an array of files and directories within the specified directory. It then iterates over each file or directory:
   - If it's a directory, it calls itself recursively to delete its contents.
   - If it's a file, it attempts to delete it using `delete()`. If the deletion fails, it throws an `IOException`.
6. **Main Method**: A `main` method is included to demonstrate how you can call the `emptyDirectory` method. You need to replace `"/path/to/directory"` with the actual path you want to empty.

This Java code should perform the same functionality as the provided Python function.