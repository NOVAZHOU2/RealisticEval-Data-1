Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

```java
package org.real.temp;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class Tester {

    private File testDir;

    @Before
    public void setUp() throws IOException {
        // Set up a temporary directory with some files and directories
        testDir = Files.createTempDirectory("testDir").toFile();
        // Create some files and directories
        new File(testDir, "subdir").mkdir();
        writeToFile(new File(testDir, "file1.txt"), "Hello");
        writeToFile(new File(testDir, "subdir/file2.txt"), "World");
    }

    @After
    public void tearDown() {
        // Remove the temporary directory after each test
        deleteDirectoryRecursively(testDir);
    }

    @Test
    public void testEmptyDirectorySuccess() throws Exception {
        // Test that the directory is emptied successfully
        emptyDirectory(testDir.getAbsolutePath());
        assertEquals(0, testDir.list().length);  // Directory should be empty
    }

    @Test
    public void testEmptyDirectoryWithSubdirectories() throws Exception {
        // Test emptying a directory that includes subdirectories
        emptyDirectory(testDir.getAbsolutePath());
        assertFalse(testDir.list().length > 0);  // Directory and subdirectory should be empty
    }

    @Test
    public void testEmptyAlreadyEmptyDirectory() throws Exception {
        // Test emptying a directory that is already empty
        emptyDirectory(testDir.getAbsolutePath());  // First emptying
        emptyDirectory(testDir.getAbsolutePath());  // Empty again
        assertEquals(0, testDir.list().length);  // Still should be empty
    }

    private void writeToFile(File file, String content) throws IOException {
        Files.write(file.toPath(), content.getBytes());
    }

    private void deleteDirectoryRecursively(File directory) throws Exception {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    deleteDirectoryRecursively(file);
                } else {
                    Files.delete(file.toPath());
                }
            }
        }
        Files.delete(directory.toPath());
    }

    private void emptyDirectory(String directoryPath) throws Exception {
        Path path = Paths.get(directoryPath);
        if (!Files.exists(path)) {
            throw new IllegalArgumentException("The specified directory does not exist.");
        }
        if (!Files.isDirectory(path)) {
            throw new IllegalArgumentException("The specified path is not a directory.");
        }

        File dir = new File(directoryPath);
        File[] items = dir.listFiles();
        if (items != null) {
            for (File item : items) {
                if (item.isFile() || item.isDirectory()) {
                    if (item.isFile() || item.isSymbolicLink()) {
                        Files.delete(item.toPath());  // Remove the file or link
                    } else if (item.isDirectory()) {
                        deleteDirectoryRecursively(item);  // Remove the directory and all its contents
                    }
                }
            }
        }
    }
}
```

### Explanation:
1. **Package and Class Declaration**:
   - The Java test class is placed within the package `org.real.temp`.
   - The class name is `Tester`.

2. **JUnit Annotations**:
   - `@Before`: Used to set up the test environment before each test.
   - `@After`: Used to clean up the test environment after each test.
   - `@Test`: Used to define individual test methods.

3. **Setup and Teardown Methods**:
   - `setUp`: Creates a temporary directory and populates it with files and subdirectories.
   - `tearDown`: Deletes the temporary directory after each test.

4. **Test Methods**:
   - `testEmptyDirectorySuccess`: Tests that the directory is emptied successfully.
   - `testEmptyDirectoryWithSubdirectories`: Tests emptying a directory that includes subdirectories.
   - `testEmptyAlreadyEmptyDirectory`: Tests emptying a directory that is already empty.

5. **Helper Methods**:
   - `writeToFile`: Writes content to a file.
   - `deleteDirectoryRecursively`: Recursively deletes a directory and its contents.
   - `emptyDirectory`: Empties the contents of a directory.

6. **Assertions**:
   - `assertEquals`: Used to check if the directory is empty.
   - `assertFalse`: Used to check if the directory and subdirectory are empty.

This Java code closely mirrors the functionality and logic of the original Python unittest code while adhering to Java's syntax and JUnit conventions.