Certainly! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` function:

```typescript
import { emptyDirectory } from './path-to-your-empty-directory-function'; // Adjust the import path accordingly

describe('emptyDirectory', () => {
  it('should throw an error if the specified path does not exist', async () => {
    const nonExistentPath = '/non-existent-path';
    await expect(emptyDirectory(nonExistentPath)).rejects.toThrowError(/specified path does not exist/);
  });

  it('should throw an error if the specified path is not a directory', async () => {
    const nonDirectoryPath = '/path/to/a/file.txt'; // Assuming there's a file at this path
    await expect(emptyDirectory(nonDirectoryPath)).rejects.toThrowError(/is not a directory/);
  });

  it('should empty all files and subdirectories in the specified directory', async () => {
    const tempDir = '/path/to/temp/directory'; // Create a temporary directory for testing
    // Populate the temporary directory with files and subdirectories
    // For example, you can use fs-extra to create directories and files

    await emptyDirectory(tempDir);

    // Verify that the directory is now empty
    // For example, you can check if the directory exists and if it contains any files/subdirectories
  });
});
```

### Explanation:
1. **Importing the Function**: The `emptyDirectory` function is imported from the appropriate module. Adjust the import path according to your project structure.

2. **Describe Block**: The `describe` block groups related tests together. In this case, it groups all tests for the `emptyDirectory` function.

3. **It Blocks**:
   - **Non-Existent Path Test**: This test checks if the function throws an error when the specified path does not exist.
   - **Non-Directory Path Test**: This test checks if the function throws an error when the specified path is not a directory.
   - **Empty Directory Test**: This test verifies that the function empties all files and subdirectories in the specified directory. You will need to create a temporary directory for testing and populate it with files and subdirectories before running this test.

4. **Expectations**: The `expect` function along with `rejects.toThrowError` is used to assert that the function throws the expected error messages.

Make sure to adjust the paths and logic according to your specific requirements and project setup.