Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included.

### TypeScript Code with Jest Testing

```typescript
import * as os from 'os';
import * as fs from 'fs';
import * as path from 'path';
import * as fsExtra from 'fs-extra';
import * as tmp from 'tmp';

/**
 * Empties all files and subdirectories in the specified directory, but keeps the directory itself.
 * 
 * @param directoryPath - Path to the directory whose contents are to be emptied.
 * @throws {Error} If the specified path does not exist or is not a directory.
 */
function emptyDirectory(directoryPath: string): void {
    // Check if the path exists and is a directory
    if (!fs.existsSync(directoryPath)) {
        throw new Error("The specified directory does not exist.");
    }
    if (!fs.lstatSync(directoryPath).isDirectory()) {
        throw new Error("The specified path is not a directory.");
    }

    // Iterate over all items in the directory
    const items = fs.readdirSync(directoryPath);
    for (const item of items) {
        const itemPath = path.join(directoryPath, item);

        // Check if the item is a file or directory and delete accordingly
        if (fs.lstatSync(itemPath).isFile() || fs.lstatSync(itemPath).isSymbolicLink()) {
            fs.unlinkSync(itemPath);  // Remove the file or link
        } else if (fs.lstatSync(itemPath).isDirectory()) {
            fsExtra.removeSync(itemPath);  // Remove the directory and all its contents
        }
    }
}

describe('TestEmptyDirectory', () => {
    let testDir: string;

    beforeAll(() => {
        // Set up a temporary directory with some files and directories
        testDir = tmp.dirSync().name;
        fs.mkdirSync(path.join(testDir, 'subdir'));
        fs.writeFileSync(path.join(testDir, 'file1.txt'), "Hello");
        fs.writeFileSync(path.join(testDir, 'subdir', 'file2.txt'), "World");
    });

    afterAll(() => {
        // Remove the temporary directory after all tests
        fsExtra.removeSync(testDir);
    });

    it('should empty the directory successfully', () => {
        emptyDirectory(testDir);
        expect(fs.readdirSync(testDir)).toEqual([]);
    });

    it('should empty a directory that includes subdirectories', () => {
        emptyDirectory(testDir);
        expect(fs.readdirSync(testDir)).toEqual([]);
    });

    it('should handle an already empty directory', () => {
        emptyDirectory(testDir);  // First emptying
        emptyDirectory(testDir);  // Empty again
        expect(fs.readdirSync(testDir)).toEqual([]);
    });
});
```

### Explanation:
1. **Imports**:
   - `os`, `fs`, `path`, `fs-extra`, and `tmp` are imported for file operations and temporary directory creation.
   - `tmp` is used to create a temporary directory.

2. **Function Definition**:
   - The `emptyDirectory` function is defined with proper type annotations and throws an error if the directory does not exist or is not a directory.

3. **Jest Test Suite**:
   - The `describe` block sets up the test suite.
   - `beforeAll` is used to set up the temporary directory and create some files and directories.
   - `afterAll` is used to clean up the temporary directory after all tests.

4. **Test Cases**:
   - Each `it` block defines a test case.
   - The `expect` statements use Jest assertions to verify the expected behavior.

5. **Example Usage**:
   - The test cases ensure that the directory is emptied correctly, including handling subdirectories and already empty directories.

This TypeScript code preserves the original functionality and logic of the Python unittest code, with appropriate translations for Jest and TypeScript.