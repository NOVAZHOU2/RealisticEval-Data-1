Sure! Below is the equivalent TypeScript code for your Python function:

```typescript
import fs from 'fs';
import path from 'path';

function emptyDirectory(directoryPath: string): void | Error {
    /**
     * Empties all files and subdirectories in the specified directory.
     * 
     * @param {string} directoryPath - The path to the directory whose contents are to be emptied.
     * @returns {void | Error} - Returns nothing if successful, otherwise returns an Error.
     */
    
    try {
        // Check if the directory exists
        if (!fs.existsSync(directoryPath)) {
            throw new Error(`The specified path ${directoryPath} does not exist.`);
        }

        // Read the directory contents
        const files = fs.readdirSync(directoryPath);

        // Loop through each file and remove it
        for (const file of files) {
            const filePath = path.join(directoryPath, file);
            
            // Check if the item is a file or directory and remove accordingly
            if (fs.lstatSync(filePath).isFile()) {
                fs.unlinkSync(filePath);
            } else if (fs.lstatSync(filePath).isDirectory()) {
                emptyDirectory(filePath); // Recursively empty subdirectories
                fs.rmdirSync(filePath);
            }
        }
        
        console.log('Directory has been emptied successfully.');
    } catch (error) {
        return error;
    }
}

// Example usage:
const dirPath = './your-directory-path';
const result = emptyDirectory(dirPath);

if (result instanceof Error) {
    console.error(result.message);
} else {
    console.log('Directory emptied successfully.');
}
```

### Explanation:
1. **Imports**: The `fs` module provides file system operations and the `path` module provides utilities for working with file and directory paths.
2. **Function Definition**: The `emptyDirectory` function takes a single argument `directoryPath` which is a string representing the path to the directory.
3. **Error Handling**:
   - Checks if the directory exists using `fs.existsSync`.
   - Reads the directory contents using `fs.readdirSync`.
   - Iterates over each file and removes it using `fs.unlinkSync` for files and recursively calls `emptyDirectory` for directories followed by removing them using `fs.rmdirSync`.
4. **Example Usage**: Demonstrates how to call the `emptyDirectory` function and handle its output.

This TypeScript code should work similarly to your original Python function.