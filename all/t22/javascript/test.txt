Sure! Below is the equivalent JavaScript test case using Jest for the provided Python function `calculate_euclidean_distance`.

First, let's assume you have the function implementation in a file named `distance.js`:

```javascript
// distance.js
function calculateEuclideanDistance(point1, point2) {
    const [x1, y1] = point1;
    const [x2, y2] = point2;
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
}

module.exports = calculateEuclideanDistance;
```

Now, create a test file named `distance.test.js`:

```javascript
// distance.test.js
const calculateEuclideanDistance = require('./distance');

describe('calculateEuclideanDistance', () => {
    test('should calculate the Euclidean distance between two points correctly', () => {
        const point1 = [3, 4];
        const point2 = [6, 8];
        const expectedDistance = 5;

        expect(calculateEuclideanDistance(point1, point2)).toBe(expectedDistance);
    });

    test('should handle floating-point coordinates correctly', () => {
        const point1 = [0.5, 0.5];
        const point2 = [1.5, 2.5];
        const expectedDistance = Math.sqrt(2);

        expect(calculateEuclideanDistance(point1, point2)).toBeCloseTo(expectedDistance, 6);
    });

    test('should handle points with negative coordinates correctly', () => {
        const point1 = [-1, -1];
        const point2 = [1, 1];
        const expectedDistance = 2 * Math.sqrt(2);

        expect(calculateEuclideanDistance(point1, point2)).toBe(expectedDistance);
    });
});
```

In this Jest test file:

- We import the `calculateEuclideanDistance` function.
- We use the `describe` function to group related tests.
- Each `test` function contains a specific scenario and uses `expect` to assert the expected behavior of the function.
- `toBe` is used for exact equality checks.
- `toBeCloseTo` is used for floating-point comparisons with a specified precision.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest
```

Or

```sh
yarn add --dev jest
```

Then, you can run the tests using:

```sh
npx jest
```

or

```sh
yarn jest
```

This will execute all the tests in your `distance.test.js` file and provide you with the results.