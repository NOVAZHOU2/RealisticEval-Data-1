Sure! Here is the equivalent C++ code for calculating the Euclidean distance between two points in a 2D space:

```cpp
#include <cmath>
#include <tuple>

double calculateEuclideanDistance(const std::tuple<double, double>& point1, const std::tuple<double, double>& point2) {
    double x1 = std::get<0>(point1);
    double y1 = std::get<1>(point1);
    double x2 = std::get<0>(point2);
    double y2 = std::get<1>(point2);

    return std::sqrt(std::pow(x2 - x1, 2) + std::pow(y2 - y1, 2));
}
```

### Explanation:
- **Headers**: 
  - `#include <cmath>`: For mathematical functions like `std::sqrt` and `std::pow`.
  - `#include <tuple>`: To use the `std::tuple` data structure.
  
- **Function Signature**:
  - `double calculateEuclideanDistance(const std::tuple<double, double>& point1, const std::tuple<double, double>& point2)`: This function takes two tuples of doubles representing the coordinates of the two points and returns a double representing the Euclidean distance between them.

- **Accessing Tuple Elements**:
  - `std::get<0>(point1)`: Extracts the first element (x-coordinate) from the first tuple.
  - `std::get<1>(point1)`: Extracts the second element (y-coordinate) from the first tuple.
  - Similarly for `point2`.

- **Euclidean Distance Calculation**:
  - Uses the formula \( \text{distance} = \sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2} \).

This C++ code should work similarly to your Python function.