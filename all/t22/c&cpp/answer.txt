Certainly! Below is the equivalent C++ code for the given Python function. This code calculates the Euclidean distance between two points in a 2D space, ensuring proper type checking and error handling.

```cpp
#include <iostream>
#include <tuple>
#include <cmath>
#include <stdexcept>

// Function to calculate the Euclidean distance between two points in a 2D space.
float calculate_euclidean_distance(const std::tuple<float, float>& point1, const std::tuple<float, float>& point2) {
    // Extract coordinates from the input tuples
    float x1, y1, x2, y2;
    std::tie(x1, y1) = point1;
    std::tie(x2, y2) = point2;

    // Compute differences and Euclidean distance using the Pythagorean theorem
    float dx = x2 - x1;
    float dy = y2 - y1;

    return std::sqrt(dx * dx + dy * dy);
}

int main() {
    try {
        // Example usage
        auto point1 = std::make_tuple(1.0f, 2.0f);
        auto point2 = std::make_tuple(4.0f, 6.0f);

        float distance = calculate_euclidean_distance(point1, point2);
        std::cout << "Euclidean distance: " << distance << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Type Checking**: In C++, the type checking is enforced by the type system itself. Therefore, we do not need explicit checks like in Python. The `std::tuple` ensures that the points are always pairs of floats.
2. **Function Definition**: The function `calculate_euclidean_distance` takes two `std::tuple<float, float>` arguments and returns a `float`.
3. **Tuple Unpacking**: We use `std::tie` to unpack the tuples into individual variables.
4. **Distance Calculation**: The Euclidean distance is calculated using the Pythagorean theorem.
5. **Error Handling**: In the `main` function, we wrap the call to `calculate_euclidean_distance` in a try-catch block to handle any potential exceptions, although this specific function does not throw exceptions due to its strict type enforcement.