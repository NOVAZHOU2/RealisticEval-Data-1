Here is an equivalent C++ Catch2 test case for your Python unittest:

```cpp
#include <catch2/catch.hpp>
#include <cmath>

float calculateEuclideanDistance(std::pair<float, float> point1, std::pair<float, float> point2) {
    return std::sqrt(std::pow(point2.first - point1.first, 2) + std::pow(point2.second - point1.second, 2));
}

TEST_CASE("Calculate Euclidean Distance", "[calculateEuclideanDistance]") {
    SECTION("Two points with equal coordinates") {
        auto result = calculateEuclideanDistance({0.0f, 0.0f}, {0.0f, 0.0f});
        REQUIRE(result == Approx(0.0f));
    }

    SECTION("Two points on the x-axis") {
        auto result = calculateEuclideanDistance({1.0f, 0.0f}, {4.0f, 0.0f});
        REQUIRE(result == Approx(3.0f));
    }

    SECTION("Two points on the y-axis") {
        auto result = calculateEuclideanDistance({0.0f, 5.0f}, {0.0f, 8.0f});
        REQUIRE(result == Approx(3.0f));
    }

    SECTION("Two points in general position") {
        auto result = calculateEuclideanDistance({-2.0f, 3.0f}, {4.0f, -6.0f});
        REQUIRE(result == Approx(std::sqrt(77)).epsilon(0.01f));
    }
}
```

In this C++ version, I used `std::pair` instead of `Tuple`, and `std::sqrt` and `std::pow` functions from `<cmath>` library to calculate the Euclidean distance. Also, I used Catch2's `REQUIRE` macro to check if the calculated distance is approximately equal to expected values using `Approx`.