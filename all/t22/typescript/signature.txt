Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Calculates the Euclidean distance between two points in a 2D space.
 *
 * @param point1 - The first point as a tuple of coordinates (x1, y1).
 * @param point2 - The second point as a tuple of coordinates (x2, y2).
 * @returns The Euclidean distance between the two points.
 */
function calculateEuclideanDistance(point1: [number, number], point2: [number, number]): number {
    // Check if the points are valid tuples
    if (!Array.isArray(point1) || !Array.isArray(point2)) {
        throw new TypeError("Both points must be arrays");
    }

    if (point1.length !== 2 || point2.length !== 2) {
        throw new TypeError("Both points must be arrays of two elements");
    }

    if (!point1.every(coord => typeof coord === 'number') || !point2.every(coord => typeof coord === 'number')) {
        throw new TypeError("All coordinates must be numbers");
    }

    // Extract coordinates from the input tuples
    const [x1, y1] = point1;
    const [x2, y2] = point2;

    // Compute differences and Euclidean distance using the Pythagorean theorem
    const dx = x2 - x1;
    const dy = y2 - y1;

    return Math.sqrt(dx ** 2 + dy ** 2);
}
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc-style comments are used to document the function, parameters, and return type.

2. **Type Annotations**:
   - The type `[number, number]` is used to represent a tuple of two numbers in TypeScript.

3. **Error Handling**:
   - Checks are performed to ensure that `point1` and `point2` are arrays and contain exactly two numeric elements.

4. **Computation**:
   - The Euclidean distance is calculated using the Pythagorean theorem, just as in the Python code.

This TypeScript function preserves the original functionality and structure of the Python function, with appropriate documentation and type annotations.