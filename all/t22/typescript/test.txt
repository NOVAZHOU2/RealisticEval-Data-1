Sure! Below is the equivalent TypeScript test case using Jest for the given Python unittest test class:

```typescript
import { describe, it, expect } from '@jest/globals';

function calculateEuclideanDistance(point1: [number, number], point2: [number, number]): number {
    const [x1, y1] = point1;
    const [x2, y2] = point2;
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
}

describe('calculateEuclideanDistance', () => {
    it('should calculate the Euclidean distance between two points correctly', () => {
        const point1: [number, number] = [0, 0];
        const point2: [number, number] = [3, 4];
        const expectedDistance = 5;

        const result = calculateEuclideanDistance(point1, point2);

        expect(result).toBe(expectedDistance);
    });

    it('should handle different coordinates', () => {
        const point1: [number, number] = [1, 2];
        const point2: [number, number] = [-1, -2];
        const expectedDistance = Math.sqrt(8); // sqrt((2-(-1))^2 + (2-(-2))^2)

        const result = calculateEuclideanDistance(point1, point2);

        expect(result).toBeCloseTo(expectedDistance);
    });
});
```

### Explanation:
1. **Function Definition**: The `calculateEuclideanDistance` function is defined in TypeScript with type annotations.
2. **Describe Block**: The `describe` block groups related tests together.
3. **It Blocks**: Each `it` block contains a specific test case.
4. **Expectations**: The `expect` function is used to assert that the result matches the expected value. For floating-point comparisons, `toBeCloseTo` is used instead of `toBe`.

Make sure you have Jest installed in your project. You can install it using npm or yarn:

```sh
npm install --save-dev jest
```

or

```sh
yarn add --dev jest
```

Then, you can run the tests using:

```sh
npx jest
```

or

```sh
yarn jest
```