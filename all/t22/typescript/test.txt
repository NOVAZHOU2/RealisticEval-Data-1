Certainly! Below is the equivalent TypeScript test class using Jest. The provided Python unittest test cases are converted to Jest test cases, ensuring that the functionality and logic are preserved. The necessary type annotations and Jest assertions are included.

### TypeScript Code

First, let's define the `calculateEuclideanDistance` function in TypeScript:

```typescript
/**
 * Calculates the Euclidean distance between two points in a 2D space.
 *
 * @param point1 - The first point as a tuple of coordinates (x1, y1).
 * @param point2 - The second point as a tuple of coordinates (x2, y2).
 * @returns The Euclidean distance between the two points.
 */
function calculateEuclideanDistance(point1: [number, number], point2: [number, number]): number {
    // Check if the points are valid tuples
    if (!Array.isArray(point1) || !Array.isArray(point2)) {
        throw new TypeError("Both points must be arrays");
    }

    if (point1.length !== 2 || point2.length !== 2) {
        throw new TypeError("Both points must be arrays of two elements");
    }

    if (!point1.every(coord => typeof coord === 'number') || !point2.every(coord => typeof coord === 'number')) {
        throw new TypeError("All coordinates must be numbers");
    }

    // Extract coordinates from the input tuples
    const [x1, y1] = point1;
    const [x2, y2] = point2;

    // Compute differences and Euclidean distance using the Pythagorean theorem
    const dx = x2 - x1;
    const dy = y2 - y1;

    return Math.sqrt(dx ** 2 + dy ** 2);
}

export { calculateEuclideanDistance };
```

### Jest Test Class

Now, let's define the Jest test class:

```typescript
import { calculateEuclideanDistance } from './path-to-your-function'; // Replace with the actual path

describe('calculateEuclideanDistance', () => {
    it('should calculate the distance correctly', () => {
        const point1: [number, number] = [0, 0];
        const point2: [number, number] = [3, 4];
        const expectedDistance = 5.0;
        expect(calculateEuclideanDistance(point1, point2)).toBe(expectedDistance);
    });

    it('should handle negative coordinates correctly', () => {
        const point1: [number, number] = [-1, -1];
        const point2: [number, number] = [-4, -5];
        const expectedDistance = 5.0;
        expect(calculateEuclideanDistance(point1, point2)).toBe(expectedDistance);
    });

    it('should return 0 when both points are the same', () => {
        const point1: [number, number] = [2, 3];
        const point2: [number, number] = [2, 3];
        const expectedDistance = 0.0;
        expect(calculateEuclideanDistance(point1, point2)).toBe(expectedDistance);
    });

    it('should handle large coordinates correctly', () => {
        const point1: [number, number] = [1e6, 1e6];
        const point2: [number, number] = [1e6 + 3, 1e6 + 4];
        const expectedDistance = 5.0;
        expect(calculateEuclideanDistance(point1, point2)).toBe(expectedDistance);
    });

    it('should throw an error for invalid input (non-tuple)', () => {
        expect(() => calculateEuclideanDistance("invalid" as any, [0, 0])).toThrow(TypeError);
    });
});
```

### Explanation:
1. **Import Function**:
   - Import the `calculateEuclideanDistance` function from the file where it is defined.

2. **Describe Block**:
   - Use the `describe` block to group the test cases under the `calculateEuclideanDistance` function.

3. **Test Cases**:
   - Each `it` block represents a specific test case.
   - Use `expect` to assert the expected behavior of the function.
   - For the exception test, use `toThrow` to check if the function throws a `TypeError`.

This Jest test class ensures that the functionality and logic of the Python unittest test cases are preserved in TypeScript.