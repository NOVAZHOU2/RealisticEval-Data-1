Hereâ€™s how you can convert the provided TypeScript function into C++:

```cpp
#include <iostream>
#include <vector>
#include <bitset>
#include <string>

/**
 * Stores a binary string in a vector of 8-bit integers (uint8_t) and returns it.
 *
 * @param binaryStr - The binary string to be converted.
 * @returns std::vector<uint8_t> - The resulting vector containing the binary data.
 */
std::vector<uint8_t> binaryStringToUint8Array(const std::string& binaryStr) {
    // Calculate the number of bytes needed to represent the binary string
    size_t byteCount = (binaryStr.length() + 7) / 8;  // Use (length + 7) / 8 for ceiling division
    std::vector<uint8_t> byteArray(byteCount);

    // Convert each 8-character segment of the binary string into a byte and store in byteArray
    for (size_t i = 0; i < byteCount; ++i) {
        std::string byteSegment = binaryStr.substr(i * 8, 8);  // Extract 8 characters
        byteArray[i] = static_cast<uint8_t>(std::bitset<8>(byteSegment).to_ulong());  // Convert binary segment to byte
    }

    return byteArray;
}

int main() {
    std::string binaryStr = "110101010011010100110101";  // Example binary string
    std::vector<uint8_t> byteArray = binaryStringToUint8Array(binaryStr);

    // Output the resulting byte array
    for (uint8_t byte : byteArray) {
        std::cout << static_cast<int>(byte) << " ";
    }
    return 0;
}
```

### Key Points:
1. **`std::vector<uint8_t>`**: This is used instead of `Uint8Array`. The `uint8_t` type is an alias for an 8-bit unsigned integer.
2. **Bit Manipulation**: We use `std::bitset<8>` to handle the binary string conversion to an integer.
3. **Ceiling Division**: `(length + 7) / 8` is used to ensure we round up when calculating the number of bytes needed.
4. **`main` function**: An example usage is provided to demonstrate how to call the function and print the results.