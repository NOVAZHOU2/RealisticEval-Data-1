Hereâ€™s how you can convert the TypeScript Jest test cases to C++ test cases using the Catch2 framework:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>
#include <bitset>
#include <string>

std::vector<uint8_t> binaryStringToUint8Array(const std::string& binaryStr) {
    size_t byteCount = (binaryStr.length() + 7) / 8;
    std::vector<uint8_t> byteArray(byteCount);

    for (size_t i = 0; i < byteCount; ++i) {
        std::string byteSegment = binaryStr.substr(i * 8, 8);
        byteArray[i] = static_cast<uint8_t>(std::bitset<8>(byteSegment).to_ulong());
    }

    return byteArray;
}

TEST_CASE("binaryStringToUint8Array") {
    SECTION("should convert a full byte binary string") {
        std::string binaryStr = "11001010";
        auto result = binaryStringToUint8Array(binaryStr);
        REQUIRE(result == std::vector<uint8_t>{202});
    }

    SECTION("should convert multiple full byte binary strings") {
        std::string binaryStr = "1100101011110000";
        auto result = binaryStringToUint8Array(binaryStr);
        REQUIRE(result == std::vector<uint8_t>{202, 240});
    }

    SECTION("should handle an empty binary string") {
        std::string binaryStr = "";
        auto result = binaryStringToUint8Array(binaryStr);
        REQUIRE(result == std::vector<uint8_t>{});
    }

    SECTION("should correctly convert binary string with leading zeros") {
        std::string binaryStr = "00101101";
        auto result = binaryStringToUint8Array(binaryStr);
        REQUIRE(result == std::vector<uint8_t>{45});
    }

    SECTION("should handle binary string with end padding of zeros") {
        std::string binaryStr = "11001010000"; // should be treated as '11001010 00000000'
        auto result = binaryStringToUint8Array(binaryStr);
        REQUIRE(result == std::vector<uint8_t>{202, 0});
    }
}
```

### Key Points:
1. **Catch2 Setup**: The `#define CATCH_CONFIG_MAIN` directive is used to create a main function for the test runner.
2. **TEST_CASE and SECTION**: These macros are used to define test cases and subsections for organization, similar to `describe` and `test` in Jest.
3. **REQUIRE**: This is used for assertions, similar to `expect` in Jest.
4. **Vector Comparison**: We compare the resulting vectors using `REQUIRE`, which allows for easy checking of equality between the expected and actual results.