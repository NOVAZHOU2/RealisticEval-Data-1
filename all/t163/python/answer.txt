Here’s the Python equivalent of the provided TypeScript code. The function will convert a binary string into a list of integers, similar to how the TypeScript function uses Uint8Array.
TypeScript Code
typescript
/**
 * Stores a second-level string in a set of 8-bit conversion integers in a Unit8Array and returns
 *
 * @param {string} binaryStr - The binary string to be converted.
 * @returns {Uint8Array} - The resulting Uint8Array containing the binary question.
 */
function binaryStringToUint8Array(binaryStr: string): Uint8Array {
    // Calculate the number of bytes needed to represent the binary string
    const byteCount = Math.ceil(binaryStr.length / 8);
    const byteArray = new Uint8Array(byteCount);
    // Convert each 8-character segment of the binary string into a byte and store in byteArray
    for (let i = 0; i < byteCount; i++) {
        const byteSegment = binaryStr.substr(i * 8, 8);  // Extract 8 characters
        byteArray[i] = parseInt(byteSegment, 2);  // Convert binary segment to byte
    }
    return byteArray;
}
Python Equivalent Code
python
def binary_string_to_uint8_array(binary_str: str) -> bytearray:
    """
    Stores a second-level string in a set of 8-bit conversion integers in a bytearray and returns.

    Args:
        binary_str (str): The binary string to be converted.

    Returns:
        bytearray: The resulting bytearray containing the binary data.
    """
    # Calculate the number of bytes needed to represent the binary string
    byte_count = (len(binary_str) + 7) // 8  # Equivalent to Math.ceil(len(binary_str) / 8)
    byte_array = bytearray(byte_count)

    # Convert each 8-character segment of the binary string into a byte and store in byte_array
    for i in range(byte_count):
        byte_segment = binary_str[i * 8:(i + 1) * 8]  # Extract 8 characters
        byte_array[i] = int(byte_segment, 2)  # Convert binary segment to byte

    return byte_array
Explanation of Changes:
Function Definition:
The TypeScript function binaryStringToUint8Array is translated to a Python function binary_string_to_uint8_array.
Type Annotations:
The parameter binary_str is annotated with str, and the return type is annotated with bytearray, which is a mutable sequence of bytes in Python.
Byte Count Calculation:
In TypeScript, Math.ceil(binaryStr.length / 8) is used to calculate the number of bytes. In Python, the equivalent is (len(binary_str) + 7) // 8, which ensures the ceiling behavior without importing additional libraries.
Byte Array Initialization:
In TypeScript, new Uint8Array(byteCount) is used to create a byte array. In Python, bytearray(byte_count) serves a similar purpose.
Byte Segment Extraction:
The substr method is replaced with Python’s string slicing (binary_str[i * 8:(i + 1) * 8]).
Integer Conversion:
The parseInt(byteSegment, 2) in TypeScript is equivalent to int(byte_segment, 2) in Python, converting a binary string to an integer.
Documentation:
The comments are preserved and reformatted to follow Python’s docstring conventions.
This Python code now performs the same functionality as the TypeScript code, converting a binary string into a bytearray. Let me know if you need any further assistance!