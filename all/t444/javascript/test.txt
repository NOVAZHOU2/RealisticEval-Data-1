Certainly! Below is the equivalent JavaScript test case using Jest for the provided Python `unittest` test class:

```javascript
const formatComment = require('./formatComment'); // Adjust the import path accordingly

describe('formatComment', () => {
  it('formats a string into a commented block with specified maximum line length', () => {
    const inputString = "This is a long string that needs to be formatted into multiple lines.";
    const maxLength = 60;
    const expectedOutput = "# This is a long string that\n# needs to be formatted into\n# multiple lines.";

    expect(formatComment(inputString, maxLength)).toBe(expectedOutput);
  });

  it('handles strings shorter than the max_length without adding extra lines', () => {
    const inputString = "Short string";
    const maxLength = 10;
    const expectedOutput = "# Short string";

    expect(formatComment(inputString, maxLength)).toBe(expectedOutput);
  });

  it('handles empty strings gracefully', () => {
    const inputString = "";
    const maxLength = 50;
    const expectedOutput = "";

    expect(formatComment(inputString, maxLength)).toBe(expectedOutput);
  });
});
```

In this example, I've assumed that the `formatComment` function is located in a file named `formatComment.js`. You'll need to adjust the import path according to your project structure.

The `describe` function groups related tests together, and the `it` function defines individual test cases. Each test case uses the `expect` function to assert that the output of `formatComment` matches the expected result.