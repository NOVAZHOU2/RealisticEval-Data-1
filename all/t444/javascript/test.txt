Certainly! Below is the equivalent Jest test suite for the `format_comment` function. I'll convert the Python unittest test class into a Jest test suite, ensuring that the functionality and logic of the tests are maintained.

### Python Unittest Code

```python
import unittest

def format_comment(string, max_length=60):
    """
    Formats a string into a commented block with specified maximum line length.

    Args:
        string (str): The input string to format.
        max_length (int): Maximum length of each line in the output.

    Returns:
        str: A formatted string with each line prefixed by '# ' and not exceeding the specified max_length.
    """
    # Split the string into lines
    lines = string.split('\n')

    # Initialize a list to store the formatted lines
    formatted_lines = []

    # Iterate through the lines
    for line in lines:
        # Split the line into words
        words = line.split()

        # Initialize a variable to keep track of the current line
        current_line = ''

        # Iterate through the words
        for word in words:
            # If the current line plus the next word would be too long,
            # append the current line to the list of formatted lines and start a new line
            if len(current_line) + len(word) > max_length:
                formatted_lines.append(current_line)
                current_line = ''

            # If the current line is empty, add the word to the line
            # Otherwise, add a space and the word to the line
            if current_line == '':
                current_line = word
            else:
                current_line += ' ' + word

        # Add the remaining line to the list of formatted lines
        formatted_lines.append(current_line)

    # Return the formatted comment
    return '\n'.join(['# ' + line for line in formatted_lines])

class TestFormatComment(unittest.TestCase):

    def test_format_comment(self):
        input_string = "This is a very long string that needs to be broken into multiple lines to ensure it does not exceed the specified maximum length."
        expected_output = """# This is a very long string that needs to be broken
# into multiple lines to ensure it does not exceed the
# specified maximum length."""
        self.assertEqual(format_comment(input_string, 30), expected_output)

if __name__ == '__main__':
    unittest.main()
```

### Equivalent Jest Test Suite

```javascript
// Import the function to be tested
const formatComment = require('./formatComment');

describe('formatComment', () => {
    it('formats the string correctly', () => {
        const inputString = "This is a very long string that needs to be broken into multiple lines to ensure it does not exceed the specified maximum length.";
        const expectedOutput = `# This is a very long string that needs to be broken
# into multiple lines to ensure it does not exceed the
# specified maximum length.`;

        expect(formatComment(inputString, 30)).toBe(expectedOutput);
    });
});

// The formatComment function itself
function formatComment(string, maxLength = 60) {
    // Split the string into lines
    const lines = string.split('\n');

    // Initialize an array to store the formatted lines
    const formattedLines = [];

    // Iterate through the lines
    for (const line of lines) {
        // Split the line into words
        const words = line.split(' ');

        // Initialize a variable to keep track of the current line
        let currentLine = '';

        // Iterate through the words
        for (const word of words) {
            // If the current line plus the next word would be too long,
            // append the current line to the list of formatted lines and start a new line
            if (currentLine.length + word.length + (currentLine ? 1 : 0) > maxLength) {
                formattedLines.push(currentLine);
                currentLine = '';
            }

            // If the current line is empty, add the word to the line
            // Otherwise, add a space and the word to the line
            if (currentLine === '') {
                currentLine = word;
            } else {
                currentLine += ' ' + word;
            }
        }

        // Add the remaining line to the list of formatted lines
        formattedLines.push(currentLine);
    }

    // Return the formatted comment
    return formattedLines.map(line => '# ' + line).join('\n');
}

module.exports = formatComment;
```

### Explanation:
1. **Import the Function**: In Jest, we import the function to be tested from a separate module.
2. **Test Suite Description**: We use `describe` to group the tests under a descriptive name.
3. **Test Case**: The `it` block defines a specific test case with a description and an assertion.
4. **Assertion**: We use `expect` and `toBe` to check that the output matches the expected result.
5. **Function Implementation**: The `formatComment` function is implemented in JavaScript, maintaining the same logic and structure as the Python version.

By following these steps, the Jest test suite ensures that the functionality and logic of the `format_comment` function are preserved and tested correctly.