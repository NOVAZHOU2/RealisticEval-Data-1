Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Formats a string into a commented block with a specified maximum line length.
 *
 * @param {string} string - The input string to format.
 * @param {number} [max_length=60] - Maximum length of each line in the output.
 * @returns {string} A formatted string with each line prefixed by '# ' and not exceeding the specified max_length.
 */
function formatComment(string, max_length = 60) {
    // Split the string into lines
    const lines = string.split('\n');

    // Initialize an array to store the formatted lines
    const formattedLines = [];

    // Iterate through the lines
    for (const line of lines) {
        // Split the line into words
        const words = line.split(' ');

        // Initialize a variable to keep track of the current line
        let currentLine = '';

        // Iterate through the words
        for (const word of words) {
            // If the current line plus the next word would be too long,
            // append the current line to the list of formatted lines and start a new line
            if (currentLine.length + word.length + (currentLine ? 1 : 0) > max_length) {
                formattedLines.push(currentLine);
                currentLine = '';
            }

            // If the current line is empty, add the word to the line
            // Otherwise, add a space and the word to the line
            if (currentLine === '') {
                currentLine = word;
            } else {
                currentLine += ' ' + word;
            }
        }

        // Add the remaining line to the list of formatted lines
        formattedLines.push(currentLine);
    }

    // Return the formatted comment
    return formattedLines.map(line => '# ' + line).join('\n');
}
```

### Explanation:
1. **JSDoc Comments**: The Python docstring is converted to JSDoc comments at the beginning of the function.
   - `@param` tags describe the parameters and their types.
   - `@returns` tag describes the return type and value.
2. **Function Signature**: The function `formatComment` is defined with the same parameters and default values as in the Python code.
3. **Implementation**: The logic inside the function remains the same, including splitting the string into lines, splitting lines into words, and formatting them according to the specified maximum length.
4. **Formatted Output**: The final formatted lines are prefixed with `# ` and joined into a single string separated by newline characters.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JSDoc standards for documentation.