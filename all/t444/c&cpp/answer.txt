Sure! Below is the equivalent C++ code for the given Python function `format_comment`.

```cpp
#include <iostream>
#include <string>
#include <vector>

std::string formatComment(const std::string& input, int maxLength = 60) {
    std::string result;
    std::string currentLine;

    for (char ch : input) {
        if (currentLine.length() + 2 > maxLength) { // Add 2 for "# " prefix
            result += "# " + currentLine + "\n";
            currentLine.clear();
        }
        currentLine += ch;
    }

    if (!currentLine.empty()) {
        result += "# " + currentLine + "\n";
    }

    return result;
}

int main() {
    std::string input = "This is an example string that will be formatted into a commented block.";
    int maxLength = 60;
    std::string formatted = formatComment(input, maxLength);
    std::cout << formatted;
    return 0;
}
```

### Explanation:
1. **Function Definition**: The `formatComment` function takes a `const std::string&` as input and an optional `int` parameter `maxLength` with a default value of 60.
2. **String Processing**: The function iterates through each character of the input string. If adding another character would exceed the `maxLength`, it appends the current line to the result with a `# ` prefix and starts a new line.
3. **Edge Case Handling**: After the loop, any remaining characters in `currentLine` are appended to the result.
4. **Main Function**: The `main` function demonstrates how to use the `formatComment` function with a sample input string and prints the formatted result.

This C++ code should produce the same output as the provided Python function.