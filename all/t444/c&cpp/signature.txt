Certainly! Here is the equivalent C++ code for the provided Python function `format_comment`, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <sstream>

/**
 * Formats a string into a commented block with a specified maximum line length.
 *
 * @param string The input string to format.
 * @param max_length Maximum length of each line in the output (default is 60).
 * @return A formatted string with each line prefixed by '# ' and not exceeding the specified max_length.
 */
std::string format_comment(const std::string& string, int max_length = 60) {
    // Split the string into lines
    std::istringstream iss(string);
    std::vector<std::string> lines;
    std::string line;
    while (std::getline(iss, line, '\n')) {
        lines.push_back(line);
    }

    // Initialize a vector to store the formatted lines
    std::vector<std::string> formatted_lines;

    // Iterate through the lines
    for (const auto& line : lines) {
        // Split the line into words
        std::istringstream word_stream(line);
        std::string word;
        std::string current_line;

        while (word_stream >> word) {
            // If the current line plus the next word would be too long,
            // append the current line to the list of formatted lines and start a new line
            if (!current_line.empty() && current_line.length() + word.length() + 1 > max_length) {
                formatted_lines.push_back(current_line);
                current_line.clear();
            }

            // If the current line is empty, add the word to the line
            // Otherwise, add a space and the word to the line
            if (current_line.empty()) {
                current_line = word;
            } else {
                current_line += " " + word;
            }
        }

        // Add the remaining line to the list of formatted lines
        if (!current_line.empty()) {
            formatted_lines.push_back(current_line);
        }
    }

    // Join the formatted lines with newline characters and prefix each line with "# "
    std::ostringstream oss;
    for (const auto& formatted_line : formatted_lines) {
        oss << "# " << formatted_line << "\n";
    }

    return oss.str();
}

int main() {
    std::string input = "This is a sample string that needs to be formatted into multiple lines with a maximum length of 60 characters per line.";
    std::string result = format_comment(input, 60);
    std::cout << result << std::endl;
    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The function `format_comment` is defined with a default parameter `max_length = 60`.
   - The function takes a `const std::string&` for the input string and an `int` for the maximum length.

2. **Documentation Comments**:
   - Multi-line comments (`/* ... */`) are used for the function documentation.
   - Single-line comments (`//`) are used for inline comments within the function.

3. **Splitting the Input String into Lines**:
   - We use `std::istringstream` to read the input string and split it into lines using `std::getline`.

4. **Processing Each Line**:
   - For each line, we split it into words using another `std::istringstream`.
   - We iterate through the words and build the current line, ensuring it does not exceed the maximum length.

5. **Appending Formatted Lines**:
   - We append the formatted lines to a vector of strings.

6. **Joining the Formatted Lines**:
   - We use `std::ostringstream` to concatenate the formatted lines with newline characters and prefix each line with `# `.

7. **Returning the Result**:
   - The final formatted string is returned from the function.

8. **Main Function**:
   - A simple `main` function demonstrates the usage of `format_comment`.

This C++ code preserves the original functionality and structure of the Python code while adhering to C++ standards and practices.