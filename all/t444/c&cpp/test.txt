Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <vector>
#include <sstream>

// The format_comment function definition
std::string format_comment(const std::string& string, int max_length = 60);

TEST_CASE("Test format_comment function", "[format_comment]") {
    SECTION("Test with a short string that fits within max_length") {
        std::string input_string = "This is a test.";
        std::string expected_output = "# This is a test.";
        REQUIRE(format_comment(input_string) == expected_output);
    }

    SECTION("Test with a longer string that exceeds max_length") {
        std::string input_string = "This is a test of the format_comment function which should wrap long lines correctly.";
        std::string expected_output =
            "# This is a test of the format_comment function which should\n"
            "# wrap long lines correctly.";
        REQUIRE(format_comment(input_string, 60) == expected_output);
    }

    SECTION("Test with multiple lines of input") {
        std::string input_string = "First line.\nSecond line that is quite long and needs to be wrapped.";
        std::string expected_output =
            "# First line.\n"
            "# Second line that is quite long and needs to be wrapped.";
        REQUIRE(format_comment(input_string, 60) == expected_output);
    }

    SECTION("Test with a line that is exactly max_length characters long") {
        std::string input_string(60, 'A');  // 60 characters long
        std::string expected_output = "# " + std::string(60, 'A');
        REQUIRE(format_comment(input_string, 60) == expected_output);
    }

    SECTION("Test with an empty string") {
        std::string input_string = "";
        std::string expected_output = "# ";
        REQUIRE(format_comment(input_string) == expected_output);
    }
}

// Implementation of the format_comment function
std::string format_comment(const std::string& string, int max_length = 60) {
    // Split the string into lines
    std::istringstream iss(string);
    std::vector<std::string> lines;
    std::string line;
    while (std::getline(iss, line, '\n')) {
        lines.push_back(line);
    }

    // Initialize a vector to store the formatted lines
    std::vector<std::string> formatted_lines;

    // Iterate through the lines
    for (const auto& line : lines) {
        // Split the line into words
        std::istringstream word_stream(line);
        std::string word;
        std::string current_line;

        while (word_stream >> word) {
            // If the current line plus the next word would be too long,
            // append the current line to the list of formatted lines and start a new line
            if (!current_line.empty() && current_line.length() + word.length() + 1 > max_length) {
                formatted_lines.push_back(current_line);
                current_line.clear();
            }

            // If the current line is empty, add the word to the line
            // Otherwise, add a space and the word to the line
            if (current_line.empty()) {
                current_line = word;
            } else {
                current_line += " " + word;
            }
        }

        // Add the remaining line to the list of formatted lines
        if (!current_line.empty()) {
            formatted_lines.push_back(current_line);
        }
    }

    // Join the formatted lines with newline characters and prefix each line with "# "
    std::ostringstream oss;
    for (const auto& formatted_line : formatted_lines) {
        oss << "# " << formatted_line << "\n";
    }

    return oss.str();
}

// Example main function to run the tests
int main(int argc, char* argv[]) {
    Catch::Session().run(argc, argv);
    return 0;
}
```

### Explanation:
1. **Catch2 Test Class**:
   - The `TEST_CASE` macro defines a test case named "Test format_comment function".
   - Each `SECTION` macro defines a separate test section within the test case.

2. **Test Sections**:
   - Each section corresponds to a specific test case from the Python unittest class.
   - Assertions are made using `REQUIRE` to check the equality of the expected and actual outputs.

3. **Function Implementation**:
   - The `format_comment` function is implemented to format the input string according to the specified maximum length.
   - It splits the input string into lines, processes each line, and formats the output accordingly.

4. **Main Function**:
   - The `main` function runs the Catch2 test suite using `Catch::Session().run(argc, argv)`.

This C++ code preserves the functionality and logic of the original Python unittest class while adhering to the Catch2 testing framework conventions.