Certainly! Below is the equivalent C++ code using the Catch2 testing framework to test the `format_comment` function. I'll include the necessary setup, the function itself, and the test cases.

### C++ Code with Catch2 Testing Framework

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <catch2/catch_test_macros.hpp>

// Function to format a string into a commented block with specified maximum line length
std::string format_comment(const std::string& string, int max_length = 60) {
    // Split the string into lines
    std::istringstream iss(string);
    std::vector<std::string> lines;
    std::string line;
    while (std::getline(iss, line, '\n')) {
        lines.push_back(line);
    }

    // Initialize a vector to store the formatted lines
    std::vector<std::string> formatted_lines;

    // Iterate through the lines
    for (const auto& current_line : lines) {
        // Split the line into words
        std::istringstream word_stream(current_line);
        std::string word;
        std::string current_formatted_line = "";

        // Iterate through the words
        while (word_stream >> word) {
            // If the current formatted line plus the next word would be too long,
            // append the current formatted line to the list of formatted lines and start a new line
            if (current_formatted_line.length() + word.length() + 2 > max_length) {
                formatted_lines.push_back(current_formatted_line);
                current_formatted_line = "";
            }

            // If the current formatted line is empty, add the word to the line
            // Otherwise, add a space and the word to the line
            if (!current_formatted_line.empty()) {
                current_formatted_line += " " + word;
            } else {
                current_formatted_line = word;
            }
        }

        // Add the remaining line to the list of formatted lines
        formatted_lines.push_back(current_formatted_line);
    }

    // Return the formatted comment
    std::ostringstream oss;
    for (const auto& formatted_line : formatted_lines) {
        oss << "# " << formatted_line << "\n";
    }

    return oss.str();
}

TEST_CASE("Test format_comment function") {
    SECTION("Empty string") {
        std::string input = "";
        std::string expected = "\n";
        REQUIRE(format_comment(input) == expected);
    }

    SECTION("Single line") {
        std::string input = "This is a short string.";
        std::string expected = "# This is a short string.\n";
        REQUIRE(format_comment(input) == expected);
    }

    SECTION("Multiple lines") {
        std::string input = "This is a very long string that needs to be split into multiple lines.\n"
                            "Each line should be prefixed with '# ' and should not exceed the specified maximum length.";
        std::string expected = "# This is a very long string that needs to be split into multiple\n"
                               "# lines.\n"
                               "# Each line should be prefixed with '# ' and should not exceed\n"
                               "# the specified maximum length.\n";
        REQUIRE(format_comment(input) == expected);
    }

    SECTION("Max length") {
        std::string input = "A very long string that will be split into multiple lines because it exceeds the maximum length.";
        std::string expected = "# A very long string that will be split into multiple\n"
                               "# lines because it exceeds the maximum\n"
                               "# length.\n";
        REQUIRE(format_comment(input, 50) == expected);
    }

    SECTION("Single word exceeding max length") {
        std::string input = "ThisIsAVeryLongWordThatExceedsTheMaximumLength";
        std::string expected = "# ThisIsAVeryLongWordThatExceedsTheMaximum\n"
                               "# Length\n";
        REQUIRE(format_comment(input, 30) == expected);
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Function Definition**:
   - The `format_comment` function is defined to format the input string into a commented block with a specified maximum line length.

2. **Catch2 Test Class**:
   - The `TEST_CASE` macro is used to define a test case for the `format_comment` function.
   - Each `SECTION` defines a specific test scenario with input and expected output.

3. **Assertions**:
   - `REQUIRE` is used to assert that the actual output matches the expected output for each test case.

4. **Main Function**:
   - The `main` function initializes and runs the Catch2 test suite.

This setup ensures that the functionality and logic of the tests are preserved, and the tests are executed using the Catch2 testing framework.