Certainly! Below is the conversion of the provided Python unittest test class into an equivalent test class using Jest in TypeScript. I will include the necessary type annotations and map the Python assert methods to their Jest equivalents.

### Python Test Class

```python
import unittest

class TestFormatComment(unittest.TestCase):

    def test_format_comment(self):
        string = "This is a very long string that needs to be formatted into multiple lines to ensure it does not exceed the maximum length."
        formatted_string = format_comment(string, 30)
        expected_output = """# This is a very long
# string that needs to
# be formatted into
# multiple lines to
# ensure it does not
# exceed the maximum
# length."""
        self.assertEqual(formatted_string, expected_output)

if __name__ == '__main__':
    unittest.main()
```

### TypeScript Test Class Using Jest

First, ensure you have Jest and its dependencies installed:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Add Jest configuration to your `tsconfig.json`:

```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"],
  "jest": {
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    },
    "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.tsx?$",
    "moduleFileExtensions": ["ts", "tsx", "js", "jsx", "json", "node"]
  }
}
```

Now, here is the TypeScript test class using Jest:

```typescript
import { formatComment } from './path/to/formatComment'; // Adjust the import path as needed

describe('formatComment', () => {
  it('formats the string correctly', () => {
    const string = "This is a very long string that needs to be formatted into multiple lines to ensure it does not exceed the maximum length.";
    const formattedString = formatComment(string, 30);
    const expectedOutput = `# This is a very long\n# string that needs to\n# be formatted into\n# multiple lines to\n# ensure it does not\n# exceed the maximum\n# length.`;

    expect(formattedString).toEqual(expectedOutput);
  });
});
```

### Explanation:
1. **Import Statements**: Import the `formatComment` function from the appropriate module.
2. **Jest Describe Block**: Use `describe` to group the tests under a logical heading.
3. **Test Case**: Use `it` to define a specific test case.
4. **Assertion**: Map the Python `assertEqual` method to Jest's `expect` with `toEqual` for deep equality checking.
5. **Expected Output**: Define the expected output as a multi-line string for readability.

### Running the Tests
To run the Jest tests, add the following script to your `package.json`:

```json
"scripts": {
  "test": "jest"
}
```

Then run the tests:

```sh
npm test
```

This setup ensures that the TypeScript test class is equivalent to the Python unittest class and uses Jest for testing.