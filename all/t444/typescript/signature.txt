Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Formats a string into a commented block with a specified maximum line length.
 * 
 * @param string - The input string to format.
 * @param maxLength - The maximum length of each line in the output (default is 60).
 * @returns A formatted string with each line prefixed by '# ' and not exceeding the specified maxLength.
 */
function formatComment(string: string, maxLength: number = 60): string {
    // Split the string into lines
    const lines = string.split('\n');

    // Initialize an array to store the formatted lines
    let formattedLines: string[] = [];

    // Iterate through the lines
    for (let line of lines) {
        // Split the line into words
        const words = line.split(' ');

        // Initialize a variable to keep track of the current line
        let currentLine = '';

        // Iterate through the words
        for (let word of words) {
            // If the current line plus the next word would be too long,
            // append the current line to the list of formatted lines and start a new line
            if (currentLine.length + word.length + (currentLine ? 1 : 0) > maxLength) {
                formattedLines.push(currentLine);
                currentLine = '';
            }

            // If the current line is empty, add the word to the line
            // Otherwise, add a space and the word to the line
            if (currentLine === '') {
                currentLine = word;
            } else {
                currentLine += ' ' + word;
            }
        }

        // Add the remaining line to the list of formatted lines
        formattedLines.push(currentLine);
    }

    // Return the formatted comment
    return formattedLines.map(line => '# ' + line).join('\n');
}

// Example usage
const exampleString = "This is a very long string that needs to be formatted into multiple lines to ensure it does not exceed the maximum length.";
console.log(formatComment(exampleString, 30));
```

### Explanation:
1. **JSDoc Documentation**: The JSDoc-style documentation comments are added at the beginning of the function, providing details about the function's purpose, parameters, and return type.
2. **Type Annotations**: The parameter types `string` and `maxLength` are properly annotated.
3. **Default Parameter Value**: The default value for `maxLength` is set to `60`, which matches the Python code.
4. **Function Logic**: The logic inside the function remains the same, ensuring that the functionality is preserved.
5. **Formatting and Joining Lines**: The final formatted lines are prefixed with `# ` and joined together to form the final string.

This TypeScript code maintains the same functionality and structure as the Python code while adhering to TypeScript conventions and best practices.