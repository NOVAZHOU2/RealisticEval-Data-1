Certainly! Below is the equivalent Java code for the given Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

/**
 * Formats a string into a commented block with a specified maximum line length.
 */
public class Answer {

    /**
     * Formats a string into a commented block with a specified maximum line length.
     *
     * @param string      The input string to format.
     * @param maxLength   Maximum length of each line in the output.
     * @return            A formatted string with each line prefixed by "# " and not exceeding the specified maxLength.
     */
    public static String formatComment(String string, int maxLength) {
        // Split the string into lines
        String[] lines = string.split("\n");

        // Initialize a list to store the formatted lines
        List<String> formattedLines = new ArrayList<>();

        // Iterate through the lines
        for (String line : lines) {
            // Split the line into words
            String[] words = line.split(" ");

            // Initialize a variable to keep track of the current line
            StringBuilder currentLine = new StringBuilder();

            // Iterate through the words
            for (String word : words) {
                // If the current line plus the next word would be too long,
                // append the current line to the list of formatted lines and start a new line
                if (currentLine.length() + word.length() + 1 > maxLength) {
                    formattedLines.add(currentLine.toString());
                    currentLine = new StringBuilder(word);
                } else {
                    // If the current line is empty, add the word to the line
                    // Otherwise, add a space and the word to the line
                    if (currentLine.length() == 0) {
                        currentLine.append(word);
                    } else {
                        currentLine.append(" ").append(word);
                    }
                }
            }

            // Add the remaining line to the list of formatted lines
            formattedLines.add(currentLine.toString());
        }

        // Return the formatted comment
        StringBuilder result = new StringBuilder();
        for (String line : formattedLines) {
            result.append("# ").append(line).append("\n");
        }

        return result.toString();
    }

    /**
     * Main method for testing the formatComment function.
     *
     * @param args Command-line arguments.
     */
    public static void main(String[] args) {
        String testString = "This is a very long string that needs to be split into multiple lines to ensure it does not exceed the maximum length.";
        System.out.println(formatComment(testString, 30));
    }
}
```

### Explanation:
1. **Package and Class Declaration**:
   - The Java code starts with the package declaration `package org.real.temp;`.
   - The class declaration `public class Answer {` follows.

2. **Javadoc Comments**:
   - The method `formatComment` is documented using Javadoc comments.
   - The `@param` tags describe the parameters, and the `@return` tag describes the return value.

3. **Method Signature**:
   - The method `formatComment` is declared with the signature `public static String formatComment(String string, int maxLength)`.

4. **String Splitting**:
   - The input string is split into lines using `string.split("\n")`.

5. **Formatted Lines List**:
   - An `ArrayList<String>` named `formattedLines` is used to store the formatted lines.

6. **StringBuilder**:
   - A `StringBuilder` named `currentLine` is used to build the current line dynamically.

7. **Word Iteration**:
   - The method iterates over each word in the input string, checking if adding the next word would exceed the maximum length.

8. **Appending Lines**:
   - The method appends the current line to `formattedLines` when necessary and starts a new line.

9. **Final Result**:
   - The final formatted string is constructed by appending each line with the prefix `"# "` and returned as a single string.

10. **Main Method**:
    - A `main` method is included for testing the `formatComment` function.

This Java code preserves the original functionality and structure of the Python code while adhering to Java's syntax and conventions.