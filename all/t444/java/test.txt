Sure, here's how you can convert your Python unittest test class to a Java JUnit test case:

```java
package org.real.temp;

import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class Tester {

    @Test
    public void testFormatComment() {
        String input = "This is a long string that needs to be formatted into multiple lines.";
        int maxLength = 60;
        String expectedOutput = "# This is a long string that\n# needs to be formatted into\n# multiple lines.";

        String actualOutput = formatComment(input, maxLength);

        assertEquals(expectedOutput, actualOutput);
    }

    private String formatComment(String string, int maxLength) {
        StringBuilder result = new StringBuilder();
        String[] words = string.split(" ");
        StringBuilder currentLine = new StringBuilder("# ");

        for (String word : words) {
            if ((currentLine.length() + word.length()) > maxLength) {
                result.append(currentLine).append("\n");
                currentLine = new StringBuilder("# ").append(word);
            } else {
                currentLine.append(word).append(" ");
            }
        }

        result.append(currentLine);
        return result.toString().trim();
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration `package org.real.temp;` is added at the top of the file.
2. **Class Declaration**: The class `Tester` is declared.
3. **JUnit Test Method**: The method `testFormatComment` is annotated with `@Test`, indicating it is a JUnit test method.
4. **AssertEquals**: The `assertEquals` method from JUnit is used to compare the expected output with the actual output of the `formatComment` method.
5. **Private Helper Method**: The `formatComment` method remains the same as in the original Python code but is made private since it's an internal utility method.

This Java code should work similarly to your original Python unittest code using JUnit.