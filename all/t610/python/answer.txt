Here’s the conversion of the provided Java class Answer into Python. The Python class retains the same functionality and structure as the original Java code, with appropriate adjustments for Python conventions.
Converted Python Code
python
class Answer:
    def __init__(self, name: str, age: int):
        """
        Constructor to initialize name and age.

        Args:
            name (str): The name of the person.
            age (int): The age of the person.
        """
        self.name = name
        self.age = age

    def get_name(self) -> str:
        """Get the name of the person."""
        return self.name

    def get_age(self) -> int:
        """Get the age of the person."""
        return self.age

    def __hash__(self) -> int:
        """
        Override the hash function.

        Returns:
            int: The hash value of the Answer object.
        """
        prime = 31
        result = 1
        # Calculate hash code based on name
        result = prime * result + (hash(self.name) if self.name is not None else 0)
        # Calculate hash code based on age
        result = prime * result + self.age
        return result

    def __eq__(self, other) -> bool:
        """
        Override the equality operator.

        Args:
            other (Any): The object to compare with.

        Returns:
            bool: True if equal, False otherwise.
        """
        if self is other:
            return True  # Check if the same reference
        if other is None or not isinstance(other, Answer):
            return False  # Check null and class type

        # Compare name and age for equality
        return self.name == other.name and self.age == other.age
Breakdown of Changes
Class Definition:
The class name Answer remains the same.
Constructor:
The Java constructor is translated to the __init__ method in Python, where parameters name and age are initialized.
Getters:
The getter methods getName and getAge are converted to get_name and get_age, following Python naming conventions.
Hash Function:
The hashCode method in Java is replaced with the __hash__ method in Python.
The hash function in Python is used to get the hash value of name, and a default of 0 is provided if name is None.
Equality Method:
The equals method is replaced with the __eq__ method in Python, which defines how instances of the class should be compared for equality.
Type checking is done using isinstance to ensure other is an instance of the Answer class.
Docstrings:
Python docstrings are added to the constructor and methods to provide descriptions and argument information.
Usage Example
Here’s how you might use the Answer class in Python:
python
# Example usage
answer1 = Answer("Alice", 30)
answer2 = Answer("Alice", 30)

print(answer1.get_name())  # Output: Alice
print(answer1.get_age())   # Output: 30

# Check equality
print(answer1 == answer2)  # Output: True

# Check hash
print(hash(answer1))       # Output: Hash value of answer1
print(hash(answer2))       # Output: Hash value of answer2
This Python implementation mirrors the functionality of the original Java class, ensuring that it behaves similarly in terms of object creation, property access, equality checks, and hash value generation.