Certainly! Below is the TypeScript version of your JavaScript function:

```typescript
/**
 * Compresses an HTML string by removing unnecessary whitespace,
 * including newlines, tabs, and extra spaces,
 * while preserving the structure of the HTML.
 *
 * @param {string} html - The input HTML string to be compressed.
 * @returns {string} - The compressed HTML string with reduced whitespace.
 */
function compressHtml(html: string): string {
    // Remove all whitespaces between tags and preserve the content within tags
    const tagWhitespaceRegex = />\s+</g;
    let compressedHtml = html.replace(tagWhitespaceRegex, '><');

    // Remove all leading and trailing whitespaces from the HTML string
    compressedHtml = compressedHtml.trim();

    return compressedHtml;
}
```

### Explanation:
1. **Function Signature**: 
   - `compressHtml` function now has a type signature indicating that it takes a `string` parameter (`html`) and returns a `string`.

2. **Regular Expression**:
   - The regular expression `/>\s+</g` matches any sequence of one or more whitespace characters (spaces, tabs, newlines) that appear between HTML tags.
   - `html.replace(tagWhitespaceRegex, '><')` replaces these sequences with just `><`, effectively removing all unnecessary whitespace between tags.

3. **Trimming**:
   - `compressedHtml.trim()` removes any leading or trailing whitespace from the final result.

This TypeScript code maintains the functionality of your original JavaScript function while adding type safety.