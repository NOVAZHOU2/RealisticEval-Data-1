Sure! Below is the TypeScript version of your JavaScript function:

```typescript
/**
 * Compresses an HTML string by removing unnecessary whitespace,
 * including newlines, tabs, and extra spaces,
 * while preserving the structure of the HTML.
 *
 * @param {string} html - The input HTML string to be compressed.
 * @returns {string} - The compressed HTML string with reduced whitespace.
 */
function compressHtml(html: string): string {
    // Remove all whitespaces including newlines, tabs, and extra spaces
    let compressed = html.replace(/\s+/g, ' ');

    // Remove leading and trailing whitespaces from tags
    compressed = compressed.replace(/>\s+</g, "><");

    return compressed;
}
```

### Explanation:
1. **Type Annotations**: I added type annotations for the `html` parameter and the return value.
2. **Regular Expressions**:
   - `/\s+/g`: This regular expression matches one or more whitespace characters globally.
   - `replace(/\s+/g, ' ')`: Replaces all occurrences of one or more whitespace characters with a single space.
   - `/> \s+</g`: This regular expression matches any occurrence of a `>` followed by one or more whitespace characters followed by `<`.
   - `replace(/> \s+</g, "><")`: Replaces such occurrences with just `><`, effectively removing the whitespace between tags.

This should give you a well-typed TypeScript function that behaves similarly to your original JavaScript function.