Sure! Below is the TypeScript version of your Jest test case using `describe`:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Compresses an HTML string by removing unnecessary whitespace,
 * including newlines, tabs, and extra spaces,
 * while preserving the structure of the HTML.
 *
 * @param {string} html - The input HTML string to be compressed.
 * @returns {string} - The compressed HTML string with reduced whitespace.
 */
function compressHtml(html: string): string {
    return html.replace(/\s+/g, ' ').trim();
}

describe('compressHtml', () => {
    it('should remove unnecessary whitespace', () => {
        const input = `
            <div>
                <p>  This is a   test </p>
            </div>
        `;
        const expectedOutput = '<div><p>This is a test</p></div>';
        expect(compressHtml(input)).toBe(expectedOutput);
    });

    it('should preserve the structure of the HTML', () => {
        const input = `
            <ul>
                <li>Item 1</li>
                <li>Item 2</li>
            </ul>
        `;
        const expectedOutput = '<ul><li>Item 1</li><li>Item 2</li></ul>';
        expect(compressHtml(input)).toBe(expectedOutput);
    });
});
```

In this TypeScript version:
- I added type annotations to the `compressHtml` function to specify that it takes a `string` parameter and returns a `string`.
- I used the `@jest/globals` import to bring in the necessary Jest globals (`describe`, `it`, `expect`).
- I wrote two test cases within a `describe` block to verify that the `compressHtml` function removes unnecessary whitespace while preserving the structure of the HTML.