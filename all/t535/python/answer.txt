Certainly! Below is the equivalent Python code for the provided JavaScript function `compressHtml`. This Python function will remove unnecessary whitespace from an HTML string while preserving its structure.

```python
import re

def compress_html(html):
    """
    Compresses an HTML string by removing unnecessary whitespace,
    including newlines, tabs, and extra spaces,
    while preserving the structure of the HTML.

    :param html: The input HTML string to be compressed.
    :return: The compressed HTML string with reduced whitespace.
    """
    # Remove comments (optional)
    html = re.sub(r'<!--.*?-->', '', html, flags=re.DOTALL)
    
    # Remove all white spaces between tags
    html = re.sub(r'>\s+<', '><', html)
    
    # Remove leading/trailing white spaces within tags
    html = re.sub(r'\s+', ' ', html)
    
    return html.strip()

# Example usage:
html_string = """
<html>
    <head>
        <title>Example</title>
    </head>
    <body>
        <h1>Hello, World!</h1>
    </body>
</html>
"""

compressed_html = compress_html(html_string)
print(compressed_html)
```

### Explanation:
1. **Removing Comments**: The `re.sub(r'<!--.*?-->', '', html, flags=re.DOTALL)` line removes any HTML comments from the string.
2. **Whitespace Between Tags**: The `re.sub(r'>\s+<', '><', html)` line ensures that there is no whitespace between HTML tags.
3. **Whitespace Within Tags**: The `re.sub(r'\s+', ' ', html)` line replaces multiple consecutive spaces within tags with a single space.
4. **Trimming Leading/Trailing Whitespace**: The `html.strip()` call removes any leading or trailing whitespace from the final result.

This Python function should work similarly to the original JavaScript function in terms of compressing HTML strings.