Here’s how you can convert the provided JavaScript Jest test cases into Python unit tests using the unittest framework. The structure and assertions will be adapted accordingly to match Python's syntax and testing conventions.
JavaScript Jest Test Cases
javascript
describe('compressHtml', () => {
    it('should remove newlines and tabs', () => {
        const input = `            <div>                <p>Test paragraph.</p>            </div>        `;
        const expectedOutput = '<div><p>Test paragraph.</p></div>';
        expect(compressHtml(input)).toBe(expectedOutput);
    });

    it('should replace multiple spaces with a single space', () => {
        const input = '<div>    <p>     Test with     multiple spaces.   </p></div>';
        const expectedOutput = '<div><p> Test with multiple spaces. </p></div>';
        expect(compressHtml(input)).toBe(expectedOutput);
    });

    it('should remove spaces between HTML tags', () => {
        const input = '<div> <p>Test</p> </div>';
        const expectedOutput = '<div><p>Test</p></div>';
        expect(compressHtml(input)).toBe(expectedOutput);
    });

    it('should handle empty input', () => {
        const input = '';
        const expectedOutput = '';
        expect(compressHtml(input)).toBe(expectedOutput);
    });

    it('should handle HTML with only spaces and newlines', () => {
        const input = `            <div>                  </div>        `;
        const expectedOutput = '<div></div>';
        expect(compressHtml(input)).toBe(expectedOutput);
    });
});
Python unittest Test Cases
Here’s the equivalent Python code using the unittest framework:
python
import unittest
import re

def compress_html(html: str) -> str:
    """
    Compresses an HTML string by removing unnecessary whitespace,
    including newlines, tabs, and extra spaces,
    while preserving the structure of the HTML.

    Args:
        html (str): The input HTML string to be compressed.

    Returns:
        str: The compressed HTML string with reduced whitespace.
    """
    return (re.sub(r'[\r\n\t]+', '', html)      # Remove all newline and tab characters
            .replace('> <', '><')              # Remove spaces between HTML tags
            .strip()                           # Trim any leading and trailing whitespace
            .replace('  ', ' ')                # Replace multiple consecutive spaces with a single space
            .replace('  ', ' '))               # Repeat until all multiple spaces are reduced.

class TestCompressHtml(unittest.TestCase):

    def test_remove_newlines_and_tabs(self):
        input_html = """            <div>                <p>Test paragraph.</p>            </div>        """
        expected_output = '<div><p>Test paragraph.</p></div>'
        self.assertEqual(compress_html(input_html), expected_output)

    def test_replace_multiple_spaces(self):
        input_html = '<div>    <p>     Test with     multiple spaces.   </p></div>'
        expected_output = '<div><p> Test with multiple spaces. </p></div>'
        self.assertEqual(compress_html(input_html), expected_output)

    def test_remove_spaces_between_tags(self):
        input_html = '<div> <p>Test</p> </div>'
        expected_output = '<div><p>Test</p></div>'
        self.assertEqual(compress_html(input_html), expected_output)

    def test_handle_empty_input(self):
        input_html = ''
        expected_output = ''
        self.assertEqual(compress_html(input_html), expected_output)

    def test_handle_html_with_only_spaces_and_newlines(self):
        input_html = """            <div>                  </div>        """
        expected_output = '<div></div>'
        self.assertEqual(compress_html(input_html), expected_output)

if __name__ == '__main__':
    unittest.main()
Explanation of the Python Code:
Import Statements: The unittest module is imported for testing, and the re module is imported for regular expressions.
compress_html Function: This is the implementation of the compress_html function that compresses the HTML string, similar to the JavaScript function provided.
Test Class:
TestCompressHtml is defined as a subclass of unittest.TestCase.
Each method within this class is a separate test case corresponding to each test in the original JavaScript code.
Test Methods:
Each test method uses self.assertEqual() to check if the output of compress_html matches the expected output.
The methods cover the same scenarios as in the Jest test cases, including handling newlines, multiple spaces, empty input, and spaces between tags.
Main Block: The if __name__ == '__main__': block runs the tests when the script is executed directly.
This structure allows you to run the tests and verify the functionality of the compress_html function in Python effectively.