Sure! Below is the equivalent Python unittest test case for the JavaScript Jest function `compressHtml`. This example assumes that the `compressHtml` function is implemented in a file named `html_compressor.py`.

```python
import unittest
from html_compressor import compressHtml

class TestCompressHtml(unittest.TestCase):
    def test_compress_html(self):
        # Test case 1: Basic HTML structure
        input_html = "<div>   <p>Hello World</p>\n</div>"
        expected_output = "<div><p>Hello World</p></div>"
        self.assertEqual(compressHtml(input_html), expected_output)

        # Test case 2: Multiple consecutive spaces and newlines
        input_html = "  <div>     \n<p>   Hello   World\n\n </p>   </div>  "
        expected_output = "<div><p>Hello World</p></div>"
        self.assertEqual(compressHtml(input_html), expected_output)

        # Test case 3: No whitespace
        input_html = "<div><p>HelloWorld</p></div>"
        expected_output = "<div><p>HelloWorld</p></div>"
        self.assertEqual(compressHtml(input_html), expected_output)

        # Test case 4: Empty string
        input_html = ""
        expected_output = ""
        self.assertEqual(compressHtml(input_html), expected_output)

        # Test case 5: Whitespace only
        input_html = "\n\t  \n  "
        expected_output = ""
        self.assertEqual(compressHtml(input_html), expected_output)

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
1. **Importing `unittest`**: This is the standard Python testing framework.
2. **Importing `compressHtml`**: Assuming the function is defined in a file named `html_compressor.py`.
3. **Creating a Test Class**: `TestCompressHtml` inherits from `unittest.TestCase`.
4. **Writing Test Methods**: Each method starts with `test_` and contains assertions to check the correctness of the `compressHtml` function.

### Running the Tests:
To run these tests, save them in a file (e.g., `test_html_compressor.py`) and execute it using the following command:

```sh
python -m unittest test_html_compressor.py
```

This will run all the test methods and output the results.