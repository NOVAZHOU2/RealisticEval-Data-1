Certainly! Below is the equivalent Java code for the provided JavaScript function `compressHtml`. This Java method will remove unnecessary whitespace from an HTML string while preserving the structure.

```java
import java.util.regex.Pattern;

public class HtmlCompressor {

    /**
     * Compresses an HTML string by removing unnecessary whitespace,
     * including newlines, tabs, and extra spaces,
     * while preserving the structure of the HTML.
     *
     * @param html - The input HTML string to be compressed.
     * @return The compressed HTML string with reduced whitespace.
     */
    public static String compressHtml(String html) {
        if (html == null || html.isEmpty()) {
            return html;
        }

        // Remove all whitespace characters except those within tags
        String compressedHtml = html.replaceAll("\\s+", " ").replaceAll("<[^>]*>", matcher -> 
            matcher.group().replaceAll("\\s+", " ")
        );

        return compressedHtml.trim();
    }

    public static void main(String[] args) {
        String inputHtml = "<div>\n  <p>Hello World!</p>\n</div>";
        String outputHtml = compressHtml(inputHtml);
        System.out.println(outputHtml); // Output: <div><p>Hello World!</p></div>
    }
}
```

### Explanation:
1. **Pattern Matching**: The `replaceAll` method is used to replace multiple whitespace characters (`\\s+`) with a single space outside of HTML tags.
2. **Tag Handling**: Inside the lambda expression in `replaceAll`, another `replaceAll` is used to ensure that whitespace within HTML tags is preserved.
3. **Trimming**: The final `trim()` call removes any leading or trailing whitespace that might have been introduced during the process.

This Java method should work similarly to the original JavaScript function, compressing the HTML string while maintaining its structural integrity.