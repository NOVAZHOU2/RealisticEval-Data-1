Certainly! Below is the equivalent Java JUnit test case for the given JavaScript Jest test case. The package is `org.real.temp` and the class is `Tester`.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    /**
     * Compresses an HTML string by removing unnecessary whitespace,
     * including newlines, tabs, and extra spaces,
     * while preserving the structure of the HTML.
     *
     * @param html - The input HTML string to be compressed.
     * @return - The compressed HTML string with reduced whitespace.
     */
    public String compressHtml(String html) {
        // Implement the logic here to compress the HTML string
        return html.replaceAll("\\s+", " ").trim();
    }

    @Test
    public void testCompressHtml() {
        Tester tester = new Tester();

        // Test case 1: Empty string
        assertEquals("", tester.compressHtml(""));

        // Test case 2: String with no extra whitespace
        assertEquals("<div>Hello World</div>", tester.compressHtml("<div>Hello World</div>"));

        // Test case 3: String with extra whitespace
        assertEquals("<div>Hello World</div>", tester.compressHtml("\n<div>\tHello \tWorld\n</div>\n\t"));

        // Test case 4: String with multiple consecutive spaces
        assertEquals("<div>Hello World</div>", tester.compressHtml("<div>Hello   World</div>"));

        // Add more test cases as needed
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration is set to `org.real.temp`.
2. **Class Declaration**: The class `Tester` is declared within the specified package.
3. **compressHtml Method**: This method is implemented to remove unnecessary whitespace from the input HTML string. It uses regular expressions to replace one or more whitespace characters (`\\s+`) with a single space and then trims any leading or trailing spaces.
4. **JUnit Test Case**: A JUnit test case `testCompressHtml` is provided to verify the functionality of the `compressHtml` method. Several test cases are included to ensure that the method works correctly under different scenarios.

Make sure you have the necessary dependencies for JUnit in your project (e.g., via Maven or Gradle). Here's an example of how you might include JUnit in a Maven `pom.xml` file:

```xml
<dependencies>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>5.8.1</version>
        <scope>test</scope>
    </dependency>
</dependencies>
```

This setup should allow you to run the JUnit tests and verify the correctness of the `compressHtml` method.