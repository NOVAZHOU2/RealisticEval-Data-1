Hereâ€™s how you can convert the provided JavaScript Jest test cases into JUnit 4 test cases for the `Tester` class in Java:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Tester {

    @Test
    public void testRemoveNewlinesAndTabs() {
        String input = "\n            <div>\n                <p>Test paragraph.</p>\n            </div>\n        ";
        String expectedOutput = "<div><p>Test paragraph.</p></div>";
        assertEquals(expectedOutput, HtmlCompressor.compressHtml(input));
    }

    @Test
    public void testReplaceMultipleSpaces() {
        String input = "<div>    <p>     Test with     multiple spaces.   </p></div>";
        String expectedOutput = "<div><p> Test with multiple spaces. </p></div>";
        assertEquals(expectedOutput, HtmlCompressor.compressHtml(input));
    }

    @Test
    public void testRemoveSpacesBetweenTags() {
        String input = "<div> <p>Test</p> </div>";
        String expectedOutput = "<div><p>Test</p></div>";
        assertEquals(expectedOutput, HtmlCompressor.compressHtml(input));
    }

    @Test
    public void testHandleEmptyInput() {
        String input = "";
        String expectedOutput = "";
        assertEquals(expectedOutput, HtmlCompressor.compressHtml(input));
    }

    @Test
    public void testHandleSpacesAndNewlines() {
        String input = "\n            <div>      \n            </div>\n        ";
        String expectedOutput = "<div></div>";
        assertEquals(expectedOutput, HtmlCompressor.compressHtml(input));
    }
}
```

### Key Points:
1. **JUnit Annotations**: Used `@Test` to denote test methods.
2. **Assertions**: Used `assertEquals` for comparison, similar to Jest's `expect(...).toBe(...)`.
3. **Method Calls**: Assumed the `compressHtml` method belongs to the `HtmlCompressor` class, which you should adjust according to your actual class structure.