Hereâ€™s how you can convert the provided JavaScript Jest test cases to C++ using the Catch2 testing framework:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>

// Function declaration (assuming compressHtml is defined elsewhere)
std::string compressHtml(const std::string& html);

TEST_CASE("compressHtml", "[html]") {
    SECTION("should remove newlines and tabs") {
        std::string input = R"(
            <div>
                <p>Test paragraph.</p>
            </div>
        )";
        std::string expectedOutput = "<div><p>Test paragraph.</p></div>";
        REQUIRE(compressHtml(input) == expectedOutput);
    }

    SECTION("should replace multiple spaces with a single space") {
        std::string input = "<div>    <p>     Test with     multiple spaces.   </p></div>";
        std::string expectedOutput = "<div><p> Test with multiple spaces. </p></div>";
        REQUIRE(compressHtml(input) == expectedOutput);
    }

    SECTION("should remove spaces between HTML tags") {
        std::string input = "<div> <p>Test</p> </div>";
        std::string expectedOutput = "<div><p>Test</p></div>";
        REQUIRE(compressHtml(input) == expectedOutput);
    }

    SECTION("should handle empty input") {
        std::string input = "";
        std::string expectedOutput = "";
        REQUIRE(compressHtml(input) == expectedOutput);
    }

    SECTION("should handle HTML with only spaces and newlines") {
        std::string input = R"(
            <div>      
            </div>
        )";
        std::string expectedOutput = "<div></div>";
        REQUIRE(compressHtml(input) == expectedOutput);
    }
}
```

### Explanation:
1. **Catch2 Setup**: The `#define CATCH_CONFIG_MAIN` directive defines the main function for Catch2.
2. **Function Declaration**: Assumes `compressHtml` is defined elsewhere.
3. **TEST_CASE and SECTION**: Each `SECTION` corresponds to a test case, maintaining the original logic from the Jest tests.
4. **REQUIRE**: This assertion checks if the output matches the expected value.

You can compile and run this C++ code with Catch2 to test the `compressHtml` function.