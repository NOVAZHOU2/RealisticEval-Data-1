Sure! Below is the equivalent C++ Catch2 test case for the JavaScript Jest test case you provided. Note that in C++, we typically don't have built-in support for HTML parsing and compression like in JavaScript, so I'll assume you have a function `compressHtml` that performs the desired operation.

```cpp
#include <catch2/catch.hpp>
#include <string>

// Assuming compressHtml is defined somewhere in your project
std::string compressHtml(const std::string& html);

TEST_CASE("Compresses an HTML string by removing unnecessary whitespace", "[html]") {
    SECTION("Input with multiple spaces") {
        REQUIRE(compressHtml("  <div>   Hello World   </div>") == "<div>HelloWorld</div>");
    }

    SECTION("Input with newlines") {
        REQUIRE(compressHtml("<div>\nHello\nWorld\n</div>") == "<div>HelloWorld</div>");
    }

    SECTION("Input with tabs") {
        REQUIRE(compressHtml("<div>\tHello\tWorld\t</div>") == "<div>HelloWorld</div>");
    }

    SECTION("Input with mixed whitespace") {
        REQUIRE(compressHtml("  <div>\n\t  Hello World  \n\t</div>  ") == "<div>HelloWorld</div>");
    }

    SECTION("Input without any whitespace") {
        REQUIRE(compressHtml("<div>HelloWorld</div>") == "<div>HelloWorld</div>");
    }
}
```

In this example:
- We include the Catch2 header file.
- We define a placeholder function `compressHtml` that you should replace with your actual implementation.
- We create several test cases using `SECTION` to cover different scenarios, such as multiple spaces, newlines, tabs, mixed whitespace, and no whitespace at all.

Make sure to link against the Catch2 library when compiling your tests. If you're using a build system like CMake, you can add the following lines to your `CMakeLists.txt`:

```cmake
find_package(Catch2 REQUIRED)
add_executable(your_test_executable your_test_file.cpp)
target_link_libraries(your_test_executable PRIVATE Catch2::Catch2)
```

Replace `your_test_executable` and `your_test_file.cpp` with the appropriate names for your test executable and source file.