Certainly! Below is the equivalent C++ code for the JavaScript function `compressHtml`. This implementation uses regular expressions to remove unnecessary whitespace from the HTML string while preserving its structure.

```cpp
#include <iostream>
#include <regex>
#include <string>

std::string compressHtml(const std::string& html) {
    // Remove all whitespace characters (spaces, tabs, newlines)
    std::string result = std::regex_replace(html, std::regex("\\s+"), " ");

    // Remove multiple consecutive spaces
    result = std::regex_replace(result, std::regex(" +"), " ");

    return result;
}

int main() {
    std::string html = "<html>\n  <body>\n    <div>Hello, World!</div>\n  </body>\n</html>";
    std::string compressedHtml = compressHtml(html);
    std::cout << compressedHtml << std::endl;

    return 0;
}
```

### Explanation:
1. **Remove all whitespace characters**: The first `std::regex_replace` call removes all whitespace characters (spaces, tabs, newlines) in the HTML string. It replaces them with a single space.
2. **Remove multiple consecutive spaces**: The second `std::regex_replace` call ensures that there are no multiple consecutive spaces left in the string. It replaces sequences of one or more spaces with a single space.

This approach should give you a compressed HTML string with reduced whitespace while preserving the overall structure.