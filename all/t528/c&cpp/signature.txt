```cpp
#include <iostream>
#include <filesystem>

namespace fs = std::filesystem;

/**
 * Searches for Markdown files in the specified directory and returns the path of the files as a vector
 *
 * @param {std::string} dir - The directory path to search in.
 * @return {std::vector<std::string>} - A vector of paths to Markdown files.
 */
std::vector<std::string> findMarkdownFiles(const std::string& dir) {
    std::vector<std::string> markdown_files;
    
    // Iterate over each entry in the directory
    for (const auto &entry : fs::directory_iterator(dir)) {
        if (entry.is_regular_file()) {
            // Check if the file extension is .md or .markdown
            if (entry.path().extension() == ".md" || entry.path().extension() == ".markdown") {
                markdown_files.push_back(entry.path().string());
            }
        } else if (entry.is_directory()) {
            // Recursively search in subdirectories
            auto sub_dir_markdowns = findMarkdownFiles(entry.path().string());
            markdown_files.insert(markdown_files.end(), sub_dir_markdowns.begin(), sub_dir_markdowns.end());
        }
    }

    return markdown_files;
}
```

This C++ code uses the `<filesystem>` library from C++17 to handle file system operations, similar to how Node.js handles directories with `require('fs')`. The function `findMarkdownFiles` searches through a given directory recursively and collects all files with `.md` or `.markdown` extensions into a vector of strings representing their paths.