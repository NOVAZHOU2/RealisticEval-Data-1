Sure! Here is how you can convert your JavaScript Jest test case into a C++ Catch2 test case:

Firstly, let's assume that `findMarkdownFiles` function is implemented in a file named `find_markdown_files.cpp`.

Here is a sample implementation of `findMarkdownFiles` function:
```cpp
#include <iostream>
#include <vector>
#include <filesystem>

std::vector<std::string> findMarkdownFiles(const std::string& dir)
{
    std::vector<std::string> markdownFiles;
    std::filesystem::directory_iterator di(dir);
    
    for (auto &entry : di)
    {
        if (entry.is_regular_file() && entry.path().extension() == ".md")
            markdownFiles.push_back(entry.path().string());
    }

    return markdownFiles;
}
```

Now, here is how you can write a Catch2 test case for this function:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file

#include "catch.hpp"
#include "find_markdown_files.h"

TEST_CASE("Find Markdown Files", "[findMarkdownFiles]")
{
    SECTION("Empty Directory")
    {
        std::vector<std::string> result = findMarkdownFiles("/tmp/empty_directory");
        REQUIRE(result.empty());
    }
    
    SECTION("Directory with Markdown File")
    {
        std::vector<std::string> result = findMarkdownFiles("/tmp/markdown_dir");
        REQUIRE(!result.empty());
        REQUIRE(result[0] == "/tmp/markdown_dir/test.md");
    }
}
```

In this test case, we're assuming that there are two directories: `/tmp/empty_directory` which doesn't contain any files, and `/tmp/markdown_dir` which contains a single Markdown file named `test.md`. Please replace these paths with actual paths on your machine where you have some test data.

Please note that you need to install Catch2 library before running this code. If you don't have it installed, you can add it using your package manager or download it from its GitHub repository: https://github.com/catchorg/Catch2

Also, make sure that you have a proper build system set up to compile and run your C++ code with Catch2.