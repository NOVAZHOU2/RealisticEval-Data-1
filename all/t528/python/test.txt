Sure! Below is the equivalent Python unit test case using the `unittest` framework for your JavaScript Jest test case.

```python
import os

def find_markdown_files(directory):
    markdown_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith('.md'):
                markdown_files.append(os.path.join(root, file))
    return markdown_files

class TestFindMarkdownFiles(unittest.TestCase):

    def setUp(self):
        # Create a temporary directory with some Markdown files for testing
        self.test_dir = tempfile.mkdtemp()
        self.markdown_file1 = os.path.join(self.test_dir, 'file1.md')
        self.markdown_file2 = os.path.join(self.test_dir, 'subdir', 'file2.md')
        open(self.markdown_file1, 'w').close()  # Create empty file
        os.makedirs(os.path.dirname(self.markdown_file2), exist_ok=True)
        open(self.markdown_file2, 'w').close()  # Create empty file

    def tearDown(self):
        # Clean up the temporary directory after tests
        shutil.rmtree(self.test_dir)

    def test_find_markdown_files(self):
        result = find_markdown_files(self.test_dir)
        expected_result = [self.markdown_file1, self.markdown_file2]
        self.assertEqual(sorted(result), sorted(expected_result))

if __name__ == '__main__':
    unittest.main()
```

### Explanation:

1. **Function Definition**: 
   - The `find_markdown_files` function is defined to mimic the behavior of the JavaScript function. It walks through the directory tree and collects all `.md` files.

2. **Test Class**:
   - A `unittest.TestCase` class named `TestFindMarkdownFiles` is created to hold the test cases.

3. **Setup Method (`setUp`)**:
   - This method sets up a temporary directory for testing purposes. It creates two Markdown files inside the temporary directory.

4. **Teardown Method (`tearDown`)**:
   - This method cleans up the temporary directory after each test case has run.

5. **Test Case (`test_find_markdown_files`)**:
   - This method calls the `find_markdown_files` function with the temporary directory as the argument and checks if the returned list matches the expected list of Markdown file paths.

6. **Running Tests**:
   - The `unittest.main()` call runs the tests when the script is executed directly.

This setup ensures that the Python test case is equivalent to your original JavaScript Jest test case.