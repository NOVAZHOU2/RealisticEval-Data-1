Sure! Below is the equivalent Python unit test case using the `unittest` framework for your JavaScript Jest test case. This assumes that the `findMarkdownFiles` function is implemented in a file named `markdown_utils.py`.

First, let's create the `markdown_utils.py` file:

```python
import os

def find_markdown_files(directory):
    markdown_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith('.md'):
                markdown_files.append(os.path.join(root, file))
    return markdown_files
```

Next, we'll create the unit test case using `unittest`:

```python
import unittest
from markdown_utils import find_markdown_files

class TestFindMarkdownFiles(unittest.TestCase):

    def setUp(self):
        # Create a temporary directory with some Markdown files for testing
        self.temp_dir = 'temp_test_dir'
        os.makedirs(self.temp_dir)
        
        # Create some Markdown files
        with open(os.path.join(self.temp_dir, 'file1.md'), 'w') as f:
            f.write('# Title 1')
        with open(os.path.join(self.temp_dir, 'file2.txt'), 'w') as f:
            f.write('Some text')
        with open(os.path.join(self.temp_dir, 'subdir', 'file3.md'), 'w') as f:
            f.write('# Title 3')

    def tearDown(self):
        # Clean up the temporary directory after tests
        import shutil
        shutil.rmtree(self.temp_dir)

    def test_find_markdown_files(self):
        result = find_markdown_files(self.temp_dir)
        expected_result = [
            os.path.join(self.temp_dir, 'file1.md'),
            os.path.join(self.temp_dir, 'subdir', 'file3.md')
        ]
        self.assertEqual(sorted(result), sorted(expected_result))

if __name__ == '__main__':
    unittest.main()
```

This Python test case does the following:
1. Creates a temporary directory with some Markdown files for testing.
2. Defines a test method `test_find_markdown_files` that calls the `find_markdown_files` function and checks if it returns the correct list of Markdown file paths.
3. Cleans up the temporary directory after all tests are run.

To run the test, save the above code in a file named `test_markdown_utils.py` and execute it using the command:

```sh
python -m unittest test_markdown_utils.py
```

This will run the test and output the results.