Sure! Here's how you can convert your JavaScript Jest test case into TypeScript using `describe` blocks:

```typescript
import * as fs from 'fs';
import * as path from 'path';

/**
 * Searches for Markdown files in the specified directory and returns the path of the files as an array
 *
 * @param {string} dir - The directory path to search in.
 * @returns {string[]} - An array of paths to Markdown files.
 */
function findMarkdownFiles(dir: string): string[] {
    let markdownFiles: string[] = [];
    fs.readdirSync(dir).forEach(file => {
        const filePath = path.join(dir, file);
        if (fs.statSync(filePath).isDirectory()) {
            markdownFiles = markdownFiles.concat(findMarkdownFiles(filePath));
        } else if (path.extname(file).toLowerCase() === '.md') {
            markdownFiles.push(filePath);
        }
    });
    return markdownFiles;
}

// Test cases using Jest
describe('findMarkdownFiles function', () => {
    it('should return an empty array when no Markdown files are found', () => {
        const mockDir = '/some/mock/directory';
        jest.spyOn(fs, 'readdirSync').mockReturnValue([]);
        expect(findMarkdownFiles(mockDir)).toEqual([]);
    });

    it('should return an array with one Markdown file path when one is found', () => {
        const mockDir = '/some/mock/directory';
        const mockFile = '/some/mock/directory/file.md';
        jest.spyOn(fs, 'readdirSync').mockReturnValue(['file.md']);
        jest.spyOn(fs, 'statSync').mockImplementation((filePath) => ({
            isDirectory: () => false,
            extname: () => path.extname(filePath)
        }));
        expect(findMarkdownFiles(mockDir)).toEqual([mockFile]);
    });

    it('should recursively search subdirectories for Markdown files', () => {
        const mockRootDir = '/some/mock/root';
        const mockSubDir1 = '/some/mock/root/subdir1';
        const mockSubDir2 = '/some/mock/root/subdir1/subdir2';
        const mockFile1 = '/some/mock/root/subdir1/file1.md';
        const mockFile2 = '/some/mock/root/subdir1/subdir2/file2.md';

        jest.spyOn(fs, 'readdirSync')
            .mockReturnValueOnce(['subdir1'])
            .mockReturnValueOnce(['file1.md', 'subdir2'])
            .mockReturnValueOnce(['file2.md']);

        jest.spyOn(fs, 'statSync').mockImplementation((filePath) => ({
            isDirectory: () => filePath.includes('/subdir'),
            extname: () => path.extname(filePath)
        }));

        expect(findMarkdownFiles(mockRootDir)).toEqual([
            mockFile1,
            mockFile2
        ]);
    });
});
```

In this TypeScript version, I've added type annotations to the `findMarkdownFiles` function and used Jest's `describe` and `it` functions to organize the test cases. Additionally, I've used Jest's `spyOn` method to mock the `fs.readdirSync` and `fs.statSync` methods so that we can control their behavior during testing without accessing the actual filesystem.