Sure! Here's how you can convert your JavaScript code into TypeScript:

```typescript
import * as fs from 'fs';
import * as path from 'path';

/**
 * Searches for Markdown files in the specified directory and returns the path of the files as an array
 *
 * @param {string} dir - The directory path to search in.
 * @returns {Promise<string[]>} - A promise that resolves to an array of paths to Markdown files.
 */
async function findMarkdownFiles(dir: string): Promise<string[]> {
  return new Promise((resolve, reject) => {
    fs.readdir(dir, (err, files) => {
      if (err) {
        return reject(err);
      }

      const markdownFiles: string[] = [];

      files.forEach(file => {
        const filePath = path.join(dir, file);
        const extname = path.extname(filePath).toLowerCase();

        if (extname === '.md') {
          markdownFiles.push(filePath);
        }
      });

      resolve(markdownFiles);
    });
  });
}
```

### Explanation:
1. **Imports**: We use `import * as fs` and `import * as path` to import the necessary modules from Node.js.
2. **Type Annotations**: We add type annotations to the parameters and return type of the `findMarkdownFiles` function. Since we're dealing with asynchronous operations, the function now returns a `Promise`.
3. **Async/Await**: We use `async/await` inside the function to handle the asynchronous nature of reading directories and checking file extensions.

This TypeScript version should work similarly to your original JavaScript code but with added type safety.