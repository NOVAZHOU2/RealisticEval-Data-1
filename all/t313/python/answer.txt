Here's the equivalent Python code for your JavaScript function that detects the brightness of the background color of a main element. Since Python does not have direct access to a DOM like JavaScript does, I’ll provide a structure that simulates the functionality you described:
Python Code
python
import re

def is_background_too_dark_or_bright(computed_style):
    """Detecting the light or dark state of the background element and returning the corresponding description string.

    Args:
        computed_style (str): The computed background color in 'rgb(r, g, b)' format.

    Returns:
        str: "dark" if the background is too dark, "bright" if it is too bright, or "normal" if it is neither.
    """
    # Extract the background color as a string (assumed to be in 'rgb(r, g, b)' format)
    background_color = computed_style

    # Convert the background color to RGB components
    rgb = list(map(int, re.findall(r'\d+', background_color)))
    r, g, b = rgb

    # Calculate the perceived brightness using the formula
    brightness = (r * 299 + g * 587 + b * 114) / 1000

    # Define thresholds for darkness and brightness
    dark_threshold = 125
    bright_threshold = 200

    # Determine and return the background brightness level
    if brightness < dark_threshold:
        return "dark"
    elif brightness > bright_threshold:
        return "bright"
    else:
        return "normal"

# Example usage
# Assuming the computed style is passed in the form of an RGB string
computed_style_example = "rgb(34, 34, 34)"  # Dark background example
print(is_background_too_dark_or_bright(computed_style_example))  # Output: "dark"
Explanation:
Function Definition:
The function is_background_too_dark_or_bright takes one argument, computed_style, which represents the computed background color in the format 'rgb(r, g, b)'.
Extracting RGB Values:
The regular expression re.findall(r'\d+', background_color) is used to extract the RGB values from the string. This assumes that the input string is formatted as rgb(r, g, b).
Calculating Brightness:
The brightness is calculated using the formula:
(r×299+g×587+b×114)/1000.
Thresholds:
Thresholds for darkness and brightness are defined as dark_threshold = 125 and bright_threshold = 200.
Return Values:
The function checks the calculated brightness against the defined thresholds and returns "dark", "bright", or "normal".
Example Usage:
An example usage demonstrates how to call the function with a sample RGB string.
Note:
In a real-world scenario where this function interacts with web elements, you would need a way to retrieve the computed styles. In Python, this could be done using web frameworks like Flask or Django with JavaScript, but direct access to the DOM as in JavaScript is not possible in standard Python scripts.