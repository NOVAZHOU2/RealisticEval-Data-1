Hereâ€™s how you can convert the provided JavaScript Jest test cases into Python unit tests using the unittest framework. The Python tests will simulate the functionality of your is_background_too_dark_or_bright function and use the RGB values directly instead of manipulating DOM elements.
Python Unit Test Code
python
import unittest
import re

def is_background_too_dark_or_bright(background_color: str) -> str:
    """Detect the light or dark state of a given background color and return the corresponding description string.

    Args:
        background_color (str): The background color in 'rgb(r, g, b)' format.

    Returns:
        str: "dark" if the background is too dark, 
             "bright" if it is too bright, 
             or "normal" if it is neither.
    """
    rgb = list(map(int, re.findall(r'\d+', background_color)))
    r, g, b = rgb
    brightness = (r * 299 + g * 587 + b * 114) / 1000
    dark_threshold = 125
    bright_threshold = 200

    if brightness < dark_threshold:
        return "dark"
    elif brightness > bright_threshold:
        return "bright"
    else:
        return "normal"


class TestBackgroundBrightness(unittest.TestCase):
    def test_dark_background(self):
        """Test for a dark background color."""
        background_color = 'rgb(30, 30, 30)'
        result = is_background_too_dark_or_bright(background_color)
        self.assertEqual(result, 'dark')

    def test_bright_background(self):
        """Test for a bright background color."""
        background_color = 'rgb(250, 250, 250)'
        result = is_background_too_dark_or_bright(background_color)
        self.assertEqual(result, 'bright')

    def test_normal_background(self):
        """Test for a background color with normal brightness."""
        background_color = 'rgb(150, 150, 150)'
        result = is_background_too_dark_or_bright(background_color)
        self.assertEqual(result, 'normal')

    def test_high_red_component(self):
        """Test for a bright color with a high red component."""
        background_color = 'rgb(255, 100, 100)'
        result = is_background_too_dark_or_bright(background_color)
        self.assertEqual(result, 'normal')

    def test_low_green_and_blue(self):
        """Test for a dark color with low green and blue components."""
        background_color = 'rgb(10, 10, 100)'
        result = is_background_too_dark_or_bright(background_color)
        self.assertEqual(result, 'dark')


if __name__ == '__main__':
    unittest.main()
Explanation of the Code:
Function Definition:
The is_background_too_dark_or_bright function takes a string representing the background color in rgb(r, g, b) format and calculates its brightness.
Unit Test Class:
The TestBackgroundBrightness class extends unittest.TestCase and contains individual test methods.
Test Methods:
Each test method checks a specific condition by calling the is_background_too_dark_or_bright function with a specific RGB value and asserting the expected output.
Each test is annotated with a docstring explaining what it is testing.
Running the Tests:
The if __name__ == '__main__': block allows the script to run the tests when executed directly.
Key Differences:
No DOM Manipulation: Unlike the JavaScript tests, which manipulate the DOM, the Python tests pass RGB values directly to the function.
Assertions: The self.assertEqual method is used to compare the function output with the expected result.
You can run this test file in your Python environment, and it should behave similarly to the original JavaScript Jest tests.