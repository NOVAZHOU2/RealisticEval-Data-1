Here's how you can convert the Jest test case to a Catch2 test case in C++. The example assumes you have a function `setBackgroundColor` to simulate setting a background color and `isBackgroundTooDarkOrBright` as defined previously.

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>

// Mock function to simulate setting a background color (adjust as needed)
void setBackgroundColor(const std::string& color) {
    // Normally, this would set a background color for your element
}

TEST_CASE("isBackgroundTooDarkOrBright", "[brightness]") {
    
    SECTION("should return 'dark' for a dark background color") {
        setBackgroundColor("rgb(30, 30, 30)");
        REQUIRE(isBackgroundTooDarkOrBright() == "dark");
    }

    SECTION("should return 'bright' for a bright background color") {
        setBackgroundColor("rgb(250, 250, 250)");
        REQUIRE(isBackgroundTooDarkOrBright() == "bright");
    }

    SECTION("should return 'normal' for a background color with normal brightness") {
        setBackgroundColor("rgb(150, 150, 150)");
        REQUIRE(isBackgroundTooDarkOrBright() == "normal");
    }

    SECTION("should correctly handle a bright color with high red component") {
        setBackgroundColor("rgb(255, 100, 100)");
        REQUIRE(isBackgroundTooDarkOrBright() == "normal");
    }

    SECTION("should correctly handle a dark color with low green and blue components") {
        setBackgroundColor("rgb(10, 10, 100)");
        REQUIRE(isBackgroundTooDarkOrBright() == "dark");
    }
}
```

In this Catch2 test case, each test is contained within a `SECTION`, and we use `REQUIRE` to check the output of `isBackgroundTooDarkOrBright` against expected values. Adjust the `setBackgroundColor` function as needed for your implementation.