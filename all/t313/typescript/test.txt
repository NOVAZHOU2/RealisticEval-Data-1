Sure! Below is the equivalent TypeScript Jest test case using `describe`:

```typescript
import { isBackgroundTooDarkOrBright } from './path-to-your-function'; // Adjust the import path accordingly

describe('isBackgroundTooDarkOrBright function', () => {
  test('should return "dark" if the background is too dark', () => {
    // Mock the necessary environment or dependencies here
    // For example, you can mock the DOM properties or methods if needed

    const result = isBackgroundTooDarkOrBright();
    expect(result).toBe('dark');
  });

  test('should return "bright" if the background is too bright', () => {
    // Mock the necessary environment or dependencies here

    const result = isBackgroundTooDarkOrBright();
    expect(result).toBe('bright');
  });

  test('should return "normal" if the background is neither too dark nor too bright', () => {
    // Mock the necessary environment or dependencies here

    const result = isBackgroundTooDarkOrBright();
    expect(result).toBe('normal');
  });
});
```

In this TypeScript test case:
- We use `describe` to group related tests together.
- Each `test` block contains a specific scenario and its expected outcome.
- The `expect` function is used to assert the returned value against the expected result.

Make sure to adjust the import path to where your `isBackgroundTooDarkOrBright` function is located. If there are any specific DOM manipulations or external dependencies required for the function to work, you may need to mock those in the respective test cases.