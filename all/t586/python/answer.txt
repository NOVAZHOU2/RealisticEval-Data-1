Hereâ€™s how to convert the provided TypeScript code to Python code while retaining the original comments:
TypeScript Code
typescript
/**
 * Detects whether the string is in SNAKE_CASE.
 *
 * @param {string} input - The string to check.
 * @returns {boolean} - True if the string is in SNAKE_CASE, otherwise false.
 */
function isSnakeCase(input: string): boolean {
    // Regular expression to match SNAKE_CASE
    const snakeCaseRegex = /^[a-z]+(_[a-z]+)*$/;
    return snakeCaseRegex.test(input);
}
Converted Python Code
python
import re

def is_snake_case(input: str) -> bool:
    """
    Detects whether the string is in SNAKE_CASE.

    :param input: The string to check.
    :return: True if the string is in SNAKE_CASE, otherwise False.
    """
    # Regular expression to match SNAKE_CASE
    snake_case_regex = r'^[a-z]+(_[a-z]+)*$'
    return bool(re.match(snake_case_regex, input))
Explanation:
Function Definition:
The function name is changed from isSnakeCase (CamelCase) to is_snake_case (snake_case) to follow Python naming conventions.
The parameter input is typed as str, and the return type is specified as bool.
Docstring:
The comments from the TypeScript code are transformed into a docstring format, which is the standard way to document functions in Python.
The @param and @returns annotations are converted to :param and :return, which is the convention in Python docstrings.
Regular Expression:
The TypeScript regex is directly translated into a Python-compatible regex string. The re module is imported to provide regular expression functionality.
Matching the Regex:
The test method in TypeScript is replaced with re.match in Python. The result is wrapped in bool() to return a boolean value.
This Python code accurately reflects the original TypeScript code while adhering to Python's syntax and conventions.