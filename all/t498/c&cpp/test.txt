Sure! Below is the equivalent C++ unit test using Catch2 for the provided Python unittest function `compute_md5`.

First, ensure you have Catch2 installed. If not, you can install it via your package manager or download it from its [official GitHub repository](https://github.com/catchorg/Catch2).

Here's how you can write the C++ unit test:

```cpp
#include <catch2/catch.hpp>
#include <iostream>
#include <string>
#include <openssl/md5.h> // Make sure you link against OpenSSL

std::string compute_md5(const std::string& input_string) {
    unsigned char digest[MD5_DIGEST_LENGTH];
    MD5_CTX md5;
    MD5_Init(&md5);
    MD5_Update(&md5, input_string.c_str(), input_string.size());
    MD5_Final(digest, &md5);

    char mdString[33];
    for(int i = 0; i < 16; ++i)
        sprintf(&mdString[i*2], "%02x", (unsigned int)digest[i]);

    return std::string(mdString);
}

TEST_CASE("Compute MD5 Hash") {
    REQUIRE(compute_md5("Hello world") == "fc3ff98e8c6a0d3087d515c0473f8677");
    REQUIRE(compute_md5("") == "d41d8cd98f00b204e9800998ecf8427e");
    REQUIRE(compute_md5("OpenSSL rocks!") == "c6d2d2c9e16c8f7d4756a642808485e2");
}
```

### Explanation:

1. **Include Catch2 Header**: We include the Catch2 header file at the top.
2. **Function Implementation**: The `compute_md5` function is implemented similarly to the Python version. It uses OpenSSL's MD5 functions to compute the hash.
3. **Test Case**: We define a test case named "Compute MD5 Hash" using the `TEST_CASE` macro.
4. **Assertions**: Inside the test case, we use the `REQUIRE` macro to assert that the computed MD5 hashes match the expected values.

### Compilation:

To compile this C++ code with Catch2, you need to link against the OpenSSL library. Hereâ€™s an example command using g++:

```sh
g++ -o test_md5 test_md5.cpp -lcrypto -lCatch2
```

Make sure to replace `test_md5.cpp` with the name of your source file and adjust the library paths if necessary.

This should give you a basic C++ unit test for the `compute_md5` function using Catch2.