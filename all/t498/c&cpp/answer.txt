Here is the equivalent C++ code that computes the MD5 hash of an input string and returns it in hexadecimal format:

```cpp
#include <iostream>
#include <string>
#include <openssl/md5.h> // Make sure to link against OpenSSL

// Function to compute and return the MD5 hash of the input string
std::string compute_md5(const std::string& input_string) {
    unsigned char digest[MD5_DIGEST_LENGTH];
    MD5((unsigned char*)input_string.c_str(), input_string.length(), (unsigned char*)&digest);    

    char mdString[33];
    for(int i = 0; i < 16; ++i)
        sprintf(&mdString[i*2], "%02x", (unsigned int)digest[i]);

    return std::string(mdString);
}

int main() {
    std::string test_string = "Hello, World!";
    std::string md5_hash = compute_md5(test_string);

    std::cout << "MD5 hash of \"" << test_string << "\": " << md5_hash << std::endl;

    return 0;
}
```

### Notes:
1. **OpenSSL Library**: The `#include <openssl/md5.h>` directive is used to include the necessary header file for computing MD5 hashes. You need to link your program against the OpenSSL library.
2. **MD5 Function**: The `MD5` function from OpenSSL is used to compute the hash of the input string.
3. **Hexadecimal Conversion**: A loop is used to convert the computed hash (in binary form) to its hexadecimal representation.
4. **Main Function**: A simple example is provided in the `main` function to demonstrate how to use the `compute_md5` function.

Make sure you have the OpenSSL library installed and linked correctly when compiling this C++ code.