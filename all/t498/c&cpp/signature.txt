Certainly! Here is the equivalent C++ code for the provided Python function, including appropriate comments and documentation:

```cpp
#include <iostream>
#include <string>
#include <openssl/md5.h> // Make sure to link against OpenSSL

/**
 * Computes and returns the MD5 hash of the input string.
 *
 * @param input_string The string to be hashed
 * @return The MD5 hash of the input string in hexadecimal format
 */
std::string compute_md5(const std::string& input_string) {
    unsigned char digest[MD5_DIGEST_LENGTH];
    MD5((unsigned char*)input_string.c_str(), input_string.length(), (unsigned char*)&digest);

    char mdString[33];
    for (int i = 0; i < 16; ++i) {
        sprintf(&mdString[i * 2], "%02x", (unsigned int)digest[i]);
    }

    return std::string(mdString);
}

int main() {
    std::string test_string = "Hello, World!";
    std::string md5_hash = compute_md5(test_string);

    std::cout << "MD5 hash of \"" << test_string << "\": " << md5_hash << std::endl;

    return 0;
}
```

### Notes:
1. **Documentation Comments**:
   - The Python docstring has been converted to a multi-line comment block (`/* ... */`) in C++.
   - The `Args` and `Returns` sections are included within the comment block.

2. **Function Signature**:
   - The Python function signature `def compute_md5(input_string: str) -> str:` is translated to `std::string compute_md5(const std::string& input_string)` in C++.
   - The `const std::string&` parameter type ensures that the input string is passed by reference, which is more efficient.

3. **MD5 Hash Computation**:
   - The `MD5` function from OpenSSL is used to compute the hash of the input string.
   - The computed hash is then converted to its hexadecimal representation using a loop and `sprintf`.

4. **Main Function**:
   - A simple example is provided in the `main` function to demonstrate how to use the `compute_md5` function.

### Compilation and Linking:
Ensure that you link against the OpenSSL library when compiling the C++ code. For example, if you are using g++:

```sh
g++ -o md5_example md5_example.cpp -lcrypto
```

This command compiles the code and links it against the OpenSSL library (`-lcrypto`).