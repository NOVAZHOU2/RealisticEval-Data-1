Certainly! I’ll convert the given Python function signature and comments into equivalent JavaScript syntax, ensuring that the purpose and structure are preserved, and the comments are rewritten to conform to JSDoc format.

Here’s the equivalent JavaScript code:

```javascript
const crypto = require('crypto');

/**
 * Computes and returns the MD5 hash of the input string.
 *
 * @param {string} inputString - The string to be hashed
 * @return {string} The MD5 hash of the input string in hexadecimal format
 */
function computeMD5(inputString) {
    // Create an MD5 hash object
    const md5Hash = crypto.createHash('md5');

    // Update the hash object with the bytes of the input string
    md5Hash.update(inputString, 'utf-8');

    // Return the hexadecimal representation of the hash
    return md5Hash.digest('hex');
}

// Example usage
console.log(computeMD5("Hello, World!"));
```

### Explanation:
1. **Importing the `crypto` module**: The `crypto` module is required to perform cryptographic operations.

2. **Function Signature**:
   - The function `computeMD5` takes a single parameter `inputString`.
   - The parameter type is documented using JSDoc `@param` tag.
   - The return type is documented using the `@return` tag.

3. **JSDoc Comments**:
   - The JSDoc comment block at the beginning of the function describes the purpose of the function, the parameters it accepts, and the value it returns.

4. **Implementation**:
   - The `crypto.createHash('md5')` function creates an MD5 hash object.
   - The `update` method updates the hash object with the input string encoded in UTF-8.
   - The `digest('hex')` method returns the hexadecimal representation of the hash.

This JavaScript code preserves the functionality, structure, and documentation style of the original Python code.