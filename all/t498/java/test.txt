Sure! Below is the equivalent Java JUnit test case for your Python `unittest` class. The package is `org.real.temp`, and the class is `Tester`.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    @Test
    public void testComputeMD5() {
        String inputString = "example";
        String expectedOutput = "fa4c6baa0bf162b384d1282bf7f1d29e"; // Replace with the actual expected output

        String result = computeMD5(inputString);
        assertEquals(expectedOutput, result);
    }

    private String computeMD5(String inputString) {
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] messageDigest = md.digest(inputString.getBytes());
            BigInteger no = new BigInteger(1, messageDigest);
            StringBuilder hashtext = new StringBuilder(no.toString(16));

            while (hashtext.length() < 32) {
                hashtext.insert(0, "0");
            }
            return hashtext.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration at the top specifies the package name `org.real.temp`.
2. **Class Declaration**: The class `Tester` contains a single test method.
3. **Test Method**: The `testComputeMD5` method uses JUnit's `@Test` annotation to mark it as a test method. It calls the `computeMD5` method and asserts that the result matches the expected output.
4. **computeMD5 Method**: This method computes the MD5 hash of the input string using Java's built-in `MessageDigest` class. It handles exceptions and ensures the resulting hash string is always 32 characters long by padding with zeros if necessary.

Make sure you replace the placeholder `expectedOutput` with the actual expected MD5 hash value for the input string `"example"`.