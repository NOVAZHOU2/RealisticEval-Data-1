Certainly! Hereâ€™s the equivalent Java code for the given Python function, including proper Javadoc comments and type annotations:

```java
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Answer {

    /**
     * Computes and returns the MD5 hash of the input string.
     *
     * @param inputString The string to be hashed
     * @return The MD5 hash of the input string in hexadecimal format
     */
    public static String computeMD5(String inputString) {
        try {
            // Create an MD5 MessageDigest instance
            MessageDigest md = MessageDigest.getInstance("MD5");

            // Update the digest using the specified array of bytes
            md.update(inputString.getBytes());

            // Complete the hash computation
            byte[] digest = md.digest();

            // Convert the byte array to a hex string
            StringBuilder hexString = new StringBuilder();
            for (byte b : digest) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }

            // Return the hexadecimal representation of the hash
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("MD5 algorithm not found", e);
        }
    }

    // Example usage
    public static void main(String[] args) {
        String input = "Hello, World!";
        System.out.println("MD5 hash of '" + input + "': " + computeMD5(input));
    }
}
```

### Explanation:
1. **Javadoc Comments**:
   - The Javadoc comments provide a clear description of the method, its parameters, and its return value.
   - The `@param` tag is used to describe the parameter `inputString`.
   - The `@return` tag is used to describe the return value.

2. **Method Signature**:
   - The method signature `public static String computeMD5(String inputString)` matches the Python function signature `def compute_md5(input_string: str) -> str`.

3. **Exception Handling**:
   - The `NoSuchAlgorithmException` is caught and rethrown as a `RuntimeException` to maintain simplicity and consistency with the Python code.

4. **Byte Array Handling**:
   - The input string is converted to a byte array using `getBytes()` before updating the digest.

5. **Hex Conversion**:
   - The byte array is converted to a hexadecimal string using a `StringBuilder`.

6. **Example Usage**:
   - The `main` method demonstrates how to use the `computeMD5` method.

This Java code preserves the original functionality and structure of the Python code while adhering to Java conventions and best practices.