Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest test cases will be converted to Jest test cases, and the necessary type annotations and Jest assertions will be included.

### TypeScript Code with Jest Testing

```typescript
import { createHash } from 'crypto';

/**
 * Computes and returns the MD5 hash of the input string.
 * 
 * @param inputString - The string to be hashed
 * @returns The MD5 hash of the input string in hexadecimal format
 */
function computeMD5(inputString: string): string {
  // Create an MD5 hash object
  const md5Hash = createHash('md5');

  // Update the hash object with the bytes of the input string
  md5Hash.update(inputString, 'utf-8');

  // Return the hexadecimal representation of the hash
  return md5Hash.digest('hex');
}

describe('TestComputeMD5', () => {
  it('test_empty_string', () => {
    // Test the MD5 hash of an empty string
    expect(computeMD5('')).toBe('d41d8cd98f00b204e9800998ecf8427e');
  });

  it('test_simple_string', () => {
    // Test the MD5 hash of a simple string
    expect(computeMD5('Hello, World!')).toBe('65a8e27d8879283831b664bd8b7f0ad4');
  });

  it('test_numeric_string', () => {
    // Test the MD5 hash of a numeric string
    expect(computeMD5('123456')).toBe('e10adc3949ba59abbe56e057f20f883e');
  });

  it('test_special_characters', () => {
    // Test the MD5 hash of a string with special characters
    expect(computeMD5('!@#$%^&*()')).toBe('05b28d17a7b6e7024b6e5d8cc43a8bf7');
  });

  it('test_long_string', () => {
    // Test the MD5 hash of a long string
    const longString = 'a'.repeat(1000);  // A string of 1000 'a' characters
    const expectedHash = 'cabe45dcc9ae5b66ba86600cca6b8ba8';  // MD5 of 'aaaa....' (1000 'a's)
    expect(computeMD5(longString)).toBe(expectedHash);
  });
});
```

### Explanation:
1. **Import Statements**: The `crypto` module is imported to provide cryptographic functionalities.
2. **Function Definition**: The `computeMD5` function is defined with a single parameter `inputString` of type `string`. It returns a `string` representing the MD5 hash in hexadecimal format.
3. **Jest Test Suite**: The `describe` block defines the test suite named `TestComputeMD5`.
4. **Test Cases**:
   - Each test case is defined using the `it` function.
   - The `expect` function is used to assert the expected behavior of the `computeMD5` function.
   - The `toBe` matcher is used to check if the computed MD5 hash matches the expected hash value.
5. **Long String Test Case**: The `longString` is created using the `repeat` method to generate a string of 1000 'a' characters.

This TypeScript code preserves the original functionality and logic of the Python unittest test cases while adapting them to Jest's syntax and conventions.