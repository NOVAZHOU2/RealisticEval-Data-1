Certainly! Below is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments:

```typescript
import { createHash } from 'crypto';

/**
 * Computes and returns the MD5 hash of the input string.
 * 
 * @param inputString - The string to be hashed
 * @returns The MD5 hash of the input string in hexadecimal format
 */
function computeMD5(inputString: string): string {
  // Create an MD5 hash object
  const md5Hash = createHash('md5');

  // Update the hash object with the bytes of the input string
  md5Hash.update(inputString, 'utf-8');

  // Return the hexadecimal representation of the hash
  return md5Hash.digest('hex');
}

// Example usage
const inputString = 'Hello, world!';
console.log(computeMD5(inputString));
```

### Explanation:
1. **Import Statement**: The `crypto` module is imported to provide cryptographic functionalities.
2. **Function Definition**: The `computeMD5` function is defined with a single parameter `inputString` of type `string`. It returns a `string` representing the MD5 hash in hexadecimal format.
3. **Documentation Comments**: The JSDoc-style comments are used to document the function, its parameters, and its return value.
4. **Creating the Hash Object**: The `createHash('md5')` function creates an MD5 hash object.
5. **Updating the Hash Object**: The `update` method is called on the hash object with the input string encoded as UTF-8.
6. **Generating the Hexadecimal Representation**: The `digest` method with the `'hex'` encoding is used to get the hexadecimal representation of the hash.

### JSDoc Comments:
- The `/** */` style comments are used to provide detailed documentation for the function.
- The `@param` tag is used to describe the parameter `inputString`.
- The `@returns` tag is used to describe the return value of the function.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and providing clear documentation.