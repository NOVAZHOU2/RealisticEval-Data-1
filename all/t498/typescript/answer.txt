Certainly! Below is the equivalent TypeScript code for the provided Python function:

```typescript
import { createHash } from 'crypto';

/**
 * Computes and returns the MD5 hash of the input string.
 *
 * @param inputString - The string to be hashed
 * @returns The MD5 hash of the input string in hexadecimal format
 */
function computeMD5(inputString: string): string {
  // Create an MD5 hash object
  const md5Hash = createHash('md5');

  // Update the hash object with the bytes of the input string
  md5Hash.update(inputString, 'utf-8');

  // Return the hexadecimal representation of the hash
  return md5Hash.digest('hex');
}

// Example usage
const inputString = 'Hello, world!';
console.log(computeMD5(inputString));
```

### Explanation:
1. **Import Statement**: In TypeScript (and JavaScript), the `crypto` module is used for cryptographic functionalities. We import the `createHash` function from the `crypto` module.
2. **Function Definition**: The `computeMD5` function is defined with a single parameter `inputString` of type `string`. It returns a `string` which represents the MD5 hash in hexadecimal format.
3. **Creating the Hash Object**: We use `createHash('md5')` to create an MD5 hash object.
4. **Updating the Hash Object**: The `update` method is called on the hash object with the input string encoded as UTF-8.
5. **Generating the Hexadecimal Representation**: The `digest` method with the `'hex'` encoding is used to get the hexadecimal representation of the hash.

This TypeScript code maintains the same functionality and logic as the original Python code.