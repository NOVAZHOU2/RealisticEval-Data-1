Sure! Below is the JavaScript test case using Jest that corresponds to your Python unittest test class.

```python
import unittest

class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

if __name__ == '__main__':
    unittest.main()
```

The equivalent JavaScript test case using Jest would look like this:

```javascript
const expect = require('@jest/globals');

describe('Test String Methods', () => {
  it('should convert string to uppercase', () => {
    expect('foo'.toUpperCase()).toBe('FOO');
  });

  it('should check if string is uppercase', () => {
    expect('FOO'.toUpperCase()).toBe('FOO');
    expect('Foo'.toUpperCase()).not.toBe('FOO');
  });

  it('should split string into array of words', () => {
    const s = 'hello world';
    expect(s.split(' ')).toEqual(['hello', 'world']);
  });

  it('should throw TypeError when splitting with non-string separator', () => {
    const s = 'hello world';
    expect(() => s.split(2)).toThrow(TypeError);
  });
});
```

To run these tests, make sure you have Jest installed in your project. You can install it using npm or yarn:

```sh
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run the tests using the following command:

```sh
npx jest
# or
yarn jest
```

This will execute all the tests defined in your JavaScript files.