Certainly! I'll convert the Python function signature and comments into equivalent JavaScript syntax, including JSDoc comments for documentation. Here is the Python code you provided:

```python
from typing import List


def parse_markdown_table(md_table: str) -> List[tuple]:
    """
    Parses a Markdown formatted table into a list of tuples, each tuple representing a row.

    Args:
        md_table (str): A string representing a Markdown table.

    Returns:
        list of tuples: A list where each tuple represents a row in the table.
    """
    # Split the input string into lines and strip whitespace
    lines = md_table.strip().split('\n')

    # Filter out the separator line for the header (which usually contains "---")
    lines = [line for line in lines if not '---' in line.strip()]

    # Initialize the list to store each row as a tuple
    table_data = []

    # Process each line
    for line in lines:
        # Strip leading and trailing spaces and pipes, then split by "|"
        row = line.strip().strip('|').split('|')
        # Process each cell, strip spaces, handle empty cells, and create a tuple
        tuple_row = tuple(cell.strip() if cell.strip() != '' else '' for cell in row)
        # Add the tuple to the list
        table_data.append(tuple_row)

    return table_data
```

Here is the equivalent JavaScript code with JSDoc comments:

```javascript
/**
 * Parses a Markdown formatted table into an array of tuples, each tuple representing a row.
 *
 * @param {string} mdTable - A string representing a Markdown table.
 * @returns {Array<Array<string>>} An array where each sub-array represents a row in the table.
 */
function parseMarkdownTable(mdTable) {
    // Split the input string into lines and trim whitespace
    const lines = mdTable.trim().split('\n');

    // Filter out the separator line for the header (which usually contains "---")
    const filteredLines = lines.filter(line => !line.trim().includes('---'));

    // Initialize the array to store each row as a tuple (sub-array)
    const tableData = [];

    // Process each line
    for (const line of filteredLines) {
        // Trim leading and trailing spaces and pipes, then split by "|"
        const row = line.trim().replace(/^\|+|\|+$/g, '').split('|');
        
        // Process each cell, trim spaces, handle empty cells, and create a tuple (sub-array)
        const tupleRow = row.map(cell => cell.trim() || '');
        
        // Add the tuple (sub-array) to the array
        tableData.push(tupleRow);
    }

    return tableData;
}

// Example usage
const markdownTable = `
| Column1 | Column2 | Column3 |
| --- | --- | --- |
| Value1 | Value2 | Value3 |
| Value4 | Value5 | Value6 |
`;

console.log(parseMarkdownTable(markdownTable));
```

### Explanation:
1. **Function Signature**: The Python function `parse_markdown_table` is converted to a JavaScript function with the same name and parameters.
2. **JSDoc Comments**: The Python docstring is converted to JSDoc comments, providing clear documentation for the function's arguments and return type.
3. **Logic Preservation**: The core logic remains the same, including splitting lines, filtering out separator lines, processing each row, and creating tuples (sub-arrays).

This JavaScript code should maintain the same functionality and structure as the original Python code.