Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function parseMarkdownTable(mdTable) {
    /**
     * Parses a Markdown formatted table into an array of tuples, each tuple representing a row.
     *
     * @param {string} mdTable - A string representing a Markdown table.
     * @returns {Array<Array<string>>} An array where each sub-array represents a row in the table.
     */
    
    // Split the input string into lines and trim whitespace
    const lines = mdTable.trim().split('\n');

    // Filter out the separator line for the header (which usually contains "---")
    const filteredLines = lines.filter(line => !line.trim().includes('---'));

    // Initialize the array to store each row as a tuple (sub-array)
    const tableData = [];

    // Process each line
    for (const line of filteredLines) {
        // Trim leading and trailing spaces and pipes, then split by "|"
        const row = line.trim().replace(/^\|+|\|+$/g, '').split('|');
        
        // Process each cell, trim spaces, handle empty cells, and create a tuple (sub-array)
        const tupleRow = row.map(cell => cell.trim() || '');
        
        // Add the tuple (sub-array) to the array
        tableData.push(tupleRow);
    }

    return tableData;
}

// Example usage
const markdownTable = `
| Column1 | Column2 | Column3 |
| --- | --- | --- |
| Value1 | Value2 | Value3 |
| Value4 | Value5 | Value6 |
`;

console.log(parseMarkdownTable(markdownTable));
```

### Explanation:
1. **Splitting Lines**: The `mdTable` string is first trimmed and split into lines using `\n`.
2. **Filtering Lines**: Lines containing `---` are filtered out.
3. **Processing Rows**: Each line is trimmed and split by `|`, handling leading and trailing pipes.
4. **Creating Tuples (Sub-arrays)**: Each cell is trimmed and converted to a tuple (sub-array).
5. **Appending Rows**: The processed rows are appended to the `tableData` array.

This JavaScript function should behave similarly to the original Python function.