Certainly! Below is an equivalent C++ test case using Catch2 for the provided Python unittest test class.

Python unittest test class:
```python
import unittest

class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        with self.assertRaises(TypeError):
            s.split(2)

if __name__ == '__main__':
    unittest.main()
```

Equivalent C++ test case using Catch2:

First, make sure you have Catch2 installed. If not, you can install it via your package manager or download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2).

Then, create a new C++ file (e.g., `test_string_methods.cpp`) and add the following code:

```cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

TEST_CASE("string methods", "[strings]") {
    SECTION("test_upper") {
        REQUIRE("foo" == "FOO");
    }

    SECTION("test_isupper") {
        REQUIRE("FOO" == "FOO");
        REQUIRE_FALSE("Foo" == "FOO");
    }

    SECTION("test_split") {
        std::string s = "hello world";
        REQUIRE((s == "hello world"));
        REQUIRE_THROWS_AS(s.split(2), std::exception);
    }
}
```

To compile and run the tests, you need a C++ compiler that supports C++11 or later. For example, using g++, you can compile and run the tests like this:

```sh
g++ -std=c++11 -o test_string_methods test_string_methods.cpp
./test_string_methods
```

This will execute the tests and provide output similar to what you would get from running a Python unittest script.