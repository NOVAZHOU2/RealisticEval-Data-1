Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class is placed in the package `org.real.temp` and named `Tester`. It includes appropriate JUnit annotations and assertions.

### Java Code

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.List;

public class Tester {

    @Test
    public void testStandardTable() {
        String mdTable = "| Header 1 | Header 2 | Header 3 |\n" +
                         "|----------|----------|----------|\n" +
                         "| Row1Col1 | Row1Col2 | Row1Col3 |\n" +
                         "| Row2Col1 | Row2Col2 | Row2Col3 |";

        List<String[]> expected = Arrays.asList(
            new String[]{"Header 1", "Header 2", "Header 3"},
            new String[]{"Row1Col1", "Row1Col2", "Row1Col3"},
            new String[]{"Row2Col1", "Row2Col2", "Row2Col3"}
        );

        List<String[]> result = parseMarkdownTable(mdTable);

        assertEquals(expected.size(), result.size());
        for (int i = 0; i < expected.size(); i++) {
            assertEquals(Arrays.asList(expected.get(i)), Arrays.asList(result.get(i)));
        }
    }

    @Test
    public void testInconsistentColumns() {
        String mdTable = "| Header 1 | Header 2 |\n" +
                         "|----------|----------|\n" +
                         "| Row1     | Row1Col2 | ExtraCol |\n" +
                         "| Row2     |";

        List<String[]> expected = Arrays.asList(
            new String[]{"Header 1", "Header 2"},
            new String[]{"Row1", "Row1Col2", "ExtraCol"},
            new String[]{"Row2"}
        );

        List<String[]> result = parseMarkdownTable(mdTable);

        assertEquals(expected.size(), result.size());
        for (int i = 0; i < expected.size(); i++) {
            assertEquals(Arrays.asList(expected.get(i)), Arrays.asList(result.get(i)));
        }
    }

    @Test
    public void testEmptyCells() {
        String mdTable = "| Header 1 | Header 2 | Header 3 |\n" +
                         "|----------|----------|----------|\n" +
                         "|          | Row1Col2 |          |\n" +
                         "| Row2Col1 |          | Row2Col3 |";

        List<String[]> expected = Arrays.asList(
            new String[]{"Header 1", "Header 2", "Header 3"},
            new String[]{"", "Row1Col2", ""},
            new String[]{"Row2Col1", "", "Row2Col3"}
        );

        List<String[]> result = parseMarkdownTable(mdTable);

        assertEquals(expected.size(), result.size());
        for (int i = 0; i < expected.size(); i++) {
            assertEquals(Arrays.asList(expected.get(i)), Arrays.asList(result.get(i)));
        }
    }

    @Test
    public void testAllEmptyRows() {
        String mdTable = "| Header 1 | Header 2 | Header 3 |\n" +
                         "|----------|----------|----------|\n" +
                         "|          |          |          |\n" +
                         "|          |          |          |";

        List<String[]> expected = Arrays.asList(
            new String[]{"Header 1", "Header 2", "Header 3"},
            new String[]{"", "", ""},
            new String[]{"", "", ""}
        );

        List<String[]> result = parseMarkdownTable(mdTable);

        assertEquals(expected.size(), result.size());
        for (int i = 0; i < expected.size(); i++) {
            assertEquals(Arrays.asList(expected.get(i)), Arrays.asList(result.get(i)));
        }
    }

    @Test
    public void testExcessiveWhitespace() {
        String mdTable = "|  Header 1  |  Header 2  |  Header 3  |\n" +
                         "|------------|------------|------------|\n" +
                         "|  Row1Col1  |  Row1Col2  |  Row1Col3  |\n" +
                         "|  Row2Col1  |  Row2Col2  |  Row2Col3  |";

        List<String[]> expected = Arrays.asList(
            new String[]{"Header 1", "Header 2", "Header 3"},
            new String[]{"Row1Col1", "Row1Col2", "Row1Col3"},
            new String[]{"Row2Col1", "Row2Col2", "Row2Col3"}
        );

        List<String[]> result = parseMarkdownTable(mdTable);

        assertEquals(expected.size(), result.size());
        for (int i = 0; i < expected.size(); i++) {
            assertEquals(Arrays.asList(expected.get(i)), Arrays.asList(result.get(i)));
        }
    }

    /**
     * Parses a Markdown formatted table into a list of arrays, each array representing a row.
     *
     * @param mdTable A string representing a Markdown table.
     * @return A list where each array represents a row in the table.
     */
    public static List<String[]> parseMarkdownTable(String mdTable) {
        // Split the input string into lines and strip whitespace
        String[] lines = mdTable.trim().split("\n");

        // Filter out the separator line for the header (which usually contains "---")
        List<String> filteredLines = new ArrayList<>();
        for (String line : lines) {
            if (!line.trim().startsWith("|---")) {
                filteredLines.add(line);
            }
        }

        // Initialize the list to store each row as an array
        List<String[]> tableData = new ArrayList<>();

        // Process each line
        for (String line : filteredLines) {
            // Strip leading and trailing spaces and pipes, then split by "|"
            String[] row = line.trim().replaceAll("^\\|+|\\|+$", "").split("\\|");
            
            // Strip spaces from each cell, handle empty cells, and add to the list
            List<String> tupleRow = new ArrayList<>();
            for (String cell : row) {
                String trimmedCell = cell.trim();
                tupleRow.add(trimmedCell.isEmpty() ? "" : trimmedCell);
            }
            
            // Add the array to the list
            tableData.add(tupleRow.toArray(new String[0]));
        }

        return tableData;
    }
}
```

### Explanation:
1. **JUnit Annotations**: The `@Test` annotation is used to mark each test method.
2. **Assertions**: The `assertEquals` method is used to compare the expected and actual results.
3. **Test Data**: The test data is provided as strings and compared against the expected results.
4. **Method `parseMarkdownTable`**: The method `parseMarkdownTable` is implemented to parse the Markdown table and return a list of arrays representing the rows.
5. **Javadoc Comments**: The method `parseMarkdownTable` includes Javadoc comments to describe its functionality and parameters.

This conversion preserves the original functionality and structure of the Python unittest class while adapting it to Java's JUnit framework.