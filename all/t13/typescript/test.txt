Sure! Here is how you can convert your Python `unittest` test class to a TypeScript test case using Jest:

### Python `unittest` Test Class

```python
import unittest

class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

if __name__ == '__main__':
    unittest.main()
```

### TypeScript Test Case Using Jest

```typescript
import { describe, it, expect } from '@jest/globals';

describe('Test String Methods', () => {
    
    it('should convert string to uppercase', () => {
        expect('foo'.toUpperCase()).toBe('FOO');
    });

    it('should check if string is uppercase', () => {
        expect('FOO'.toUpperCase()).toBe('FOO');
        expect('Foo'.toUpperCase()).not.toBe('FOO');
    });

    it('should split string correctly', () => {
        const s = 'hello world';
        expect(s.split(' ')).toEqual(['hello', 'world']);
        
        // Check that s.split fails when the separator is not a string
        expect(() => s.split(2)).toThrow(TypeError);
    });
});
```

### Explanation:
1. **Importing Jest Functions**: We import `describe`, `it`, and `expect` from `@jest/globals`.
2. **Describing the Suite**: We use `describe` to group related tests together.
3. **Writing Individual Tests**: Each method in the original Python class becomes an `it` block in the TypeScript test file.
4. **Assertions**: We use `expect` for assertions, similar to `self.assertEqual` or `self.assertTrue`.

This should give you a good starting point for converting your existing Python `unittest` tests to TypeScript using Jest.