Certainly! Below is the equivalent TypeScript code using Jest for testing the `parseMarkdownTable` function. The provided Python unittest class will be converted into a Jest test suite, ensuring that the functionality and logic of the tests are preserved.

### TypeScript Code with Jest Tests

First, let's define the `parseMarkdownTable` function in TypeScript:

```typescript
/**
 * Parses a Markdown formatted table into an array of tuples, each tuple representing a row.
 *
 * @param mdTable - A string representing a Markdown table.
 * @returns An array where each tuple represents a row in the table.
 */
function parseMarkdownTable(mdTable: string): Array<[string]> {
    // Split the input string into lines and strip whitespace
    const lines = mdTable.trim().split('\n');

    // Filter out the separator line for the header (which usually contains "---")
    const filteredLines = lines.filter(line => !line.trim().startsWith('|---'));

    // Initialize the array to store each row as a tuple
    const tableData: Array<[string]> = [];

    // Process each line
    for (const line of filteredLines) {
        // Strip leading and trailing spaces and pipes, then split by "|"
        const row = line.trim().replace(/^\|+|\|+$/g, '').split('|');
        // Strip spaces from each cell, handle empty cells, and create a tuple
        const tupleRow: [string] = row.map(cell => cell.trim()).filter(cell => cell !== '');
        // Add the tuple to the array
        tableData.push(tupleRow);
    }

    return tableData;
}
```

Next, let's define the Jest test suite:

```typescript
import { parseMarkdownTable } from './path/to/parseMarkdownTable'; // Adjust the import path as needed

describe('parseMarkdownTable', () => {
    it('should correctly parse a standard table', () => {
        const mdTable = `
        | Header 1 | Header 2 | Header 3 |
        |----------|----------|----------|
        | Row1Col1 | Row1Col2 | Row1Col3 |
        | Row2Col1 | Row2Col2 | Row2Col3 |
        `;
        const expected = [
            ['Header 1', 'Header 2', 'Header 3'],
            ['Row1Col1', 'Row1Col2', 'Row1Col3'],
            ['Row2Col1', 'Row2Col2', 'Row2Col3']
        ];
        const result = parseMarkdownTable(mdTable);
        expect(result).toEqual(expected);
    });

    it('should correctly parse a table with inconsistent columns', () => {
        const mdTable = `
        | Header 1 | Header 2 |
        |----------|----------|
        | Row1     | Row1Col2 | ExtraCol |
        | Row2     |
        `;
        const expected = [
            ['Header 1', 'Header 2'],
            ['Row1', 'Row1Col2', 'ExtraCol'],
            ['Row2']
        ];
        const result = parseMarkdownTable(mdTable);
        expect(result).toEqual(expected);
    });

    it('should correctly parse a table with empty cells', () => {
        const mdTable = `
        | Header 1 | Header 2 | Header 3 |
        |----------|----------|----------|
        |          | Row1Col2 |          |
        | Row2Col1 |          | Row2Col3 |
        `;
        const expected = [
            ['Header 1', 'Header 2', 'Header 3'],
            ['', 'Row1Col2', ''],
            ['Row2Col1', '', 'Row2Col3']
        ];
        const result = parseMarkdownTable(mdTable);
        expect(result).toEqual(expected);
    });

    it('should correctly parse a table with all empty rows', () => {
        const mdTable = `
        | Header 1 | Header 2 | Header 3 |
        |----------|----------|----------|
        |          |          |          |
        |          |          |          |
        `;
        const expected = [
            ['Header 1', 'Header 2', 'Header 3'],
            ['', '', ''],
            ['', '', '']
        ];
        const result = parseMarkdownTable(mdTable);
        expect(result).toEqual(expected);
    });

    it('should correctly parse a table with excessive whitespace', () => {
        const mdTable = `
        |  Header 1  |  Header 2  |  Header 3  |
        |------------|------------|------------|
        |  Row1Col1  |  Row1Col2  |  Row1Col3  |
        |  Row2Col1  |  Row2Col2  |  Row2Col3  |
        `;
        const expected = [
            ['Header 1', 'Header 2', 'Header 3'],
            ['Row1Col1', 'Row1Col2', 'Row1Col3'],
            ['Row2Col1', 'Row2Col2', 'Row2Col3']
        ];
        const result = parseMarkdownTable(mdTable);
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Function Definition**:
   - The `parseMarkdownTable` function is defined with proper type annotations and logic.

2. **Jest Test Suite**:
   - The `describe` block defines the test suite for `parseMarkdownTable`.
   - Each `it` block represents a specific test case.
   - The `expect` method is used to assert the equality of the results.

3. **Test Cases**:
   - Each test case includes a Markdown table, an expected result, and a call to `parseMarkdownTable` followed by an assertion using `expect(result).toEqual(expected)`.

This TypeScript code with Jest tests preserves the original functionality and logic of the Python unittests while adapting to TypeScript and Jest conventions.