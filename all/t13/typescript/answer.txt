Certainly! Below is the equivalent TypeScript code for the provided Python function:

```typescript
function parseMarkdownTable(mdTable: string): Array<[string]> {
    /**
     * Parses a Markdown formatted table into an array of tuples, each tuple representing a row.
     *
     * @param mdTable - A string representing a Markdown table.
     * @returns An array where each tuple represents a row in the table.
     */
    // Split the input string into lines and strip whitespace
    const lines = mdTable.trim().split('\n');

    // Filter out the separator line for the header (which usually contains "---")
    const filteredLines = lines.filter(line => !line.trim().includes('---'));

    // Initialize the array to store each row as a tuple
    const tableData: Array<[string]> = [];

    // Process each line
    for (const line of filteredLines) {
        // Strip leading and trailing spaces and pipes, then split by "|"
        const row = line.trim().replace(/^\|+|\|+$/g, '').split('|');
        // Process each cell, strip spaces, handle empty cells, and create a tuple
        const tupleRow: [string] = row.map(cell => cell.trim() || '').filter(cell => cell !== '') as [string];
        // Add the tuple to the array
        tableData.push(tupleRow);
    }

    return tableData;
}

// Example usage
const markdownTable = `
| Column 1 | Column 2 | Column 3 |
| --- | --- | --- |
| Value 1 | Value 2 | Value 3 |
| Value 4 | Value 5 | Value 6 |
`;

console.log(parseMarkdownTable(markdownTable));
```

### Explanation:
1. **Type Definitions**:
   - The function `parseMarkdownTable` returns an `Array<[string]>`, which is an array of tuples where each tuple contains strings.

2. **String Manipulation**:
   - The `trim()` method is used to remove leading and trailing whitespace.
   - The `split('\n')` method splits the input string into lines.
   - The `filter` method removes lines containing `"---"`.

3. **Processing Rows**:
   - Each line is trimmed and stripped of leading and trailing pipes using a regular expression.
   - The `split('|')` method splits the line into cells.
   - Each cell is trimmed and converted to a tuple if it is not empty.

4. **Tuple Creation**:
   - The `map` method processes each cell, trims it, and handles empty cells.
   - The `filter` method ensures that only non-empty cells are included in the tuple.
   - The `as [string]` assertion ensures the correct tuple type.

This TypeScript code maintains the same functionality and logic as the original Python code while adapting to TypeScript's static type system and idiomatic practices.