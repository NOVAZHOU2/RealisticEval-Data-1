Sure! Here is the Java version of the Python function `remove_parts_of_string` with the same comments kept intact:

```java
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Removes the part before the first uppercase letter and the first lowercase letter from the string.
 *
 * For example:
 *     Input: 1234AbCde5678
 *     Output: AbCde5678
 *
 * @param strings Accepts one or more strings as variable arguments.
 */
public class StringManipulator {

    public static void main(String[] args) {
        // Example usage
        System.out.println(removePartsOfString("1234AbCde5678")); // Output: AbCde5678
    }

    /**
     * Removes the part before the first uppercase letter and the first lowercase letter from the string.
     *
     * @param strings Variable number of strings to process.
     * @return The modified string.
     */
    public static String removePartsOfString(String... strings) {
        for (String str : strings) {
            Pattern pattern = Pattern.compile("[^A-Z]*[A-Z][^a-z]*");
            Matcher matcher = pattern.matcher(str);
            if (matcher.find()) {
                return matcher.group();
            }
        }
        return ""; // Return empty string if no match found
    }
}
```

### Explanation:
- **Pattern and Matcher**: The regular expression `[^A-Z]*[A-Z][^a-z]*` is used to find the substring that starts with an uppercase letter after any non-uppercase characters and ends with a lowercase letter followed by any non-lowercase characters.
- **Variable Arguments**: The method `removePartsOfString` accepts a variable number of string arguments using `String... strings`.
- **Loop Through Strings**: The method loops through each string provided in the variable arguments.
- **Regex Matching**: It uses a regex pattern to find the desired substring and returns it.
- **Return Empty String**: If no matching substring is found, an empty string is returned.

This Java code maintains the functionality and comments of the original Python function.