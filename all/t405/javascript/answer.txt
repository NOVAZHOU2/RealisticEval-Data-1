Given the Python code, we need to ensure that we replicate the same functionality in JavaScript. The goal is to trim each string so that it starts from the first uppercase letter and then from the first lowercase letter after that point. If there are no uppercase or lowercase letters, the original string should be kept (or you can choose to append an empty string or an error message, as noted).

Here's how you can write this in JavaScript:

```javascript
function removePartsOfString(...strings) {
    const results = [];
    for (let string of strings) {
        try {
            // Remove all characters before the first uppercase letter
            let indexUpper = string.search(/[A-Z]/);
            string = string.slice(indexUpper);

            // Remove all characters before the first lowercase letter
            let indexLower = string.search(/[a-z]/);
            string = string.slice(indexLower - 1);

            results.push(string);
        } catch (error) {
            // Handle cases where no uppercase or lowercase letters are found
            results.push(string);  // Or you could push an empty string or an error message
        }
    }

    return results;
}

// Example usage
console.log(removePartsOfString("HelloWorld", "testString", "12345abcDEF", "noUPPERcase"));
```

### Explanation:
1. **Function Definition**: The function `removePartsOfString` takes any number of string arguments using the spread operator (`...strings`).
2. **Results Array**: An array `results` is initialized to store the processed strings.
3. **Loop Through Strings**: A `for...of` loop iterates over each string passed to the function.
4. **Try-Catch Block**:
   - Inside the loop, a `try-catch` block is used to handle potential errors (such as when no uppercase or lowercase letters are found).
   - `string.search(/[A-Z]/)` finds the index of the first uppercase letter.
   - `string.search(/[a-z]/)` finds the index of the first lowercase letter.
   - `string.slice()` is used to trim the string based on these indices.
5. **Appending Results**: The trimmed string is appended to the `results` array.
6. **Catch Block**: In case of an error (e.g., no uppercase or lowercase letters), the original string is appended to the `results` array.
7. **Return Statement**: Finally, the `results` array is returned.

This JavaScript function replicates the functionality of the provided Python code while maintaining the same logic and structure.