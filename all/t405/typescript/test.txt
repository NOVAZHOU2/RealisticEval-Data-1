Below is the equivalent TypeScript code using Jest for the provided Python function and its tests.

Firstly, let's define the function `removePartsOfString`:

```typescript
function removePartsOfString(...strings: string[]): string[] {
    return strings.map(str => {
        const firstUpperCaseIndex = str.search(/[A-Z]/);
        const firstLowerCaseIndex = str.search(/[a-z]/);

        // Find the minimum index where either an uppercase or lowercase character appears
        const minIndex = Math.min(firstUpperCaseIndex, firstLowerCaseIndex);

        // If neither an uppercase nor lowercase character exists, return the original string
        if (minIndex === -1) {
            return str;
        }

        // Otherwise, return the substring starting from the smallest index found
        return str.substring(minIndex);
    });
}

// Example usage
console.log(removePartsOfString('1234AbCde5678')); // Output: ['AbCde5678']
```

Now, let's create a Jest test suite for this function:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('Test the removePartsOfString function', () => {
    it('should remove parts before the first uppercase or lowercase letter', () => {
        expect(removePartsOfString('1234AbCde5678')).toEqual(['AbCde5678']);
        expect(removePartsOfString('1234aBcde5678')).toEqual(['aBcde5678']);
        expect(removePartsOfString('1234abcDEf5678')).toEqual(['abcDEf5678']);
        expect(removePartsOfString('1234AbCde5678', '9012bCD345')).toEqual(['AbCde5678', 'bCD345']);
        expect(removePartsOfString('1234abc5678', '9012ABC345')).toEqual(['abc5678', 'ABC345']);
        expect(removePartsOfString('')).toEqual(['']);
        expect(removePartsOfString('1234')).toEqual(['1234']);
        expect(removePartsOfString('1234aBC5678')).toEqual(['aBC5678']);
    });

    it('should handle cases with no uppercase or lowercase letters', () => {
        expect(removePartsOfString('1234')).toEqual(['1234']);
        expect(removePartsOfString('')).toEqual(['']);
    });
});
```

In this solution, we use Jest's `describe` and `it` functions to structure our test cases. We also use the `expect` function to make assertions about the expected outcomes of the `removePartsOfString` function. This ensures that the tests cover the same scenarios as the original Python unittests, including handling multiple inputs and edge cases like empty strings and strings without any uppercase or lowercase letters.