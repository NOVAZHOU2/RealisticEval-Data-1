Sure, here is an equivalent C++ Catch2 test case for your Python unittest test function `remove_parts_of_string`:

```cpp
#include <catch2/catch.hpp>
#include <string>

// Function declaration (assuming it's defined somewhere)
std::string remove_parts_of_string(const std::string& str);

TEST_CASE("Remove parts of string", "[remove_parts_of_string]") {
    SECTION("Single string with mixed cases") {
        REQUIRE(remove_parts_of_string("1234AbCde5678") == "AbCde5678");
    }

    SECTION("String starting with uppercase letters") {
        REQUIRE(remove_parts_of_string("ABCDefg") == "Defg");
    }

    SECTION("String starting with lowercase letters") {
        REQUIRE(remove_parts_of_string("abcDefg") == "Defg");
    }

    SECTION("String with no uppercase letters") {
        REQUIRE(remove_parts_of_string("abcdefg") == "");
    }

    SECTION("String with no lowercase letters") {
        REQUIRE(remove_parts_of_string("ABCDEFG") == "");
    }

    SECTION("Empty string") {
        REQUIRE(remove_parts_of_string("") == "");
    }
}
```

### Explanation:
- **Catch2**: The framework used for writing tests in C++. It provides a simple and expressive way to write unit tests.
- **TEST_CASE**: Defines a test case with a name and a tag.
- **SECTION**: Groups related test cases together under a single test case.
- **REQUIRE**: Asserts that a condition is true; if not, the test fails.

### Notes:
- Ensure that the function `remove_parts_of_string` is implemented in C++ and linked correctly with your test file.
- The implementation of `remove_parts_of_string` should be compatible with the C++ standard library and handle the same logic as the Python function.