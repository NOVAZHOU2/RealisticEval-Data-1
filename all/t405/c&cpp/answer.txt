Here is a C++ version of your Python function:

```c++
#include <string>
#include <cctype>

std::string remove_parts_of_string(const std::string &str) {
    int start = -1;
    for (int i = 0; i < str.size(); ++i) {
        if (isupper(str[i])) {
            start = i;
            break;
        }
    }

    if (start == -1)
        return "";

    int end = -1;
    for (int i = start + 1; i < str.size(); ++i) {
        if (islower(str[i])) {
            end = i;
            break;
        }
    }

    if (end == -1)
        return "";

    return str.substr(start);
}
```

And here is a C version of your Python function:

```c
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

char* remove_parts_of_string(char* str) {
    char* result = malloc(strlen(str) + 1);

    int start = -1;
    for (int i = 0; str[i] != '\0'; ++i) {
        if (isupper(str[i])) {
            start = i;
            break;
        }
    }

    if (start == -1)
        return "";

    int end = -1;
    for (int i = start + 1; str[i] != '\0'; ++i) {
        if (islower(str[i])) {
            end = i;
            break;
        }
    }

    if (end == -1)
        return "";

    strncpy(result, str + start, strlen(str) - start + 1);
    result[strlen(str) - start] = '\0';

    return result;
}
```
Please note that these codes don't handle the multiple strings you provided in the Python function. If you want to process multiple strings, you would need to call these functions in a loop or create an array of strings and iterate through them.

Also, in C++, `std::string` handles memory management automatically, but in C, you have to manually allocate and deallocate memory using `malloc`, `free`, etc.