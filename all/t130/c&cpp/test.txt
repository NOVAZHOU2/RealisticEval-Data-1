Here’s how you can convert the JavaScript Jest test cases to C++ Catch2 test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>

// Assuming computePi is defined elsewhere
std::string computePi(int digits);

TEST_CASE("computePi", "[pi]") {
    SECTION("should calculate pi to 5 decimal places correctly") {
        int digits = 5;
        std::string expected = "3.14159";
        std::string result = computePi(digits);
        REQUIRE(result == expected);
    }

    SECTION("should calculate pi to 10 decimal places correctly") {
        int digits = 10;
        std::string expected = "3.1415926536";
        std::string result = computePi(digits);
        REQUIRE(result == expected);
    }

    SECTION("should calculate pi to 15 decimal places correctly") {
        int digits = 15;
        std::string expected = "3.141592653589793";
        std::string result = computePi(digits);
        REQUIRE(result == expected);
    }

    SECTION("should calculate pi to 20 decimal places correctly") {
        int digits = 20;
        std::string expected = "3.14159265358979323846";
        std::string result = computePi(digits);
        REQUIRE(result == expected);
    }

    SECTION("should calculate pi to 30 decimal places correctly") {
        int digits = 30;
        std::string expected = "3.141592653589793238462643383280";
        std::string result = computePi(digits);
        REQUIRE(result == expected);
    }
}
```

This code uses Catch2 to create test cases that check if the `computePi` function correctly calculates π to the specified number of decimal places. Let me know if you need further assistance!