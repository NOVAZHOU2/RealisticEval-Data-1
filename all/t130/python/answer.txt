Here’s how you can convert the provided JavaScript code for computing π (pi) using the Gauss-Legendre algorithm into Python. We'll use the decimal module in Python for high-precision arithmetic. The approach remains the same, and the conversion will involve changing JavaScript syntax to Python syntax, including handling decimal arithmetic correctly.
JavaScript Code
javascript
const Decimal = require('decimal.js');

/**
 * Computing PI (π) Using Gauss-Legendre Algorithm with High-precision Arithmetic Library decimal.js
 *
 * @param {number} digits - The number of decimal digits to compute π to.
 * @returns {string} - The value of π to the specified number of digits.
 */
function computePi(digits) {
    // Set the precision for Decimal calculations
    Decimal.set({ precision: digits + 10 }); // Extra precision to ensure accuracy
    const one = new Decimal(1);
    const two = new Decimal(2);
    const four = new Decimal(4);
    const half = new Decimal(0.5);

    // Initialize variables
    let a = one;
    let b = one.dividedBy(two).sqrt(); // b0 = 1 / sqrt(2)
    let t = one.dividedBy(four);       // t0 = 1/4
    let p = one;
    let prevPi = new Decimal(0);
    let pi;

    // Iterate until the desired precision is reached
    for (let i = 0; i < 10; i++) {
        const aNext = a.plus(b).dividedBy(two);
        const bNext = a.times(b).sqrt();
        const diff = a.minus(aNext);
        const tNext = t.minus(p.times(diff.pow(2)));
        const pNext = p.times(two);
        a = aNext;
        b = bNext;
        t = tNext;
        p = pNext;
        pi = a.plus(b).pow(2).dividedBy(t.times(four));

        // Check if the desired precision has been reached
        if (pi.equals(prevPi)) {
            break;
        }
        prevPi = pi;
    }

    // Return π to the specified number of digits
    return pi.toFixed(digits);
}
Python Code
python
from decimal import Decimal, getcontext

def compute_pi(digits: int) -> str:
    """
    Computing PI (π) Using Gauss-Legendre Algorithm with High-precision Arithmetic Library.
    
    Args:
        digits (int): The number of decimal digits to compute π to.
    
    Returns:
        str: The value of π to the specified number of digits.
    """
    # Set the precision for Decimal calculations
    getcontext().prec = digits + 10  # Extra precision to ensure accuracy
    one = Decimal(1)
    two = Decimal(2)
    four = Decimal(4)

    # Initialize variables
    a = one
    b = one / two ** 0.5  # b0 = 1 / sqrt(2)
    t = one / four        # t0 = 1/4
    p = one
    prev_pi = Decimal(0)
    pi = None

    # Iterate until the desired precision is reached
    for _ in range(10):
        a_next = (a + b) / two
        b_next = (a * b) ** 0.5
        diff = a - a_next
        t_next = t - (p * diff ** 2)
        p_next = p * two
        a, b, t, p = a_next, b_next, t_next, p_next
        
        pi = (a + b) ** 2 / (t * four)

        # Check if the desired precision has been reached
        if pi == prev_pi:
            break
        
        prev_pi = pi

    # Return π to the specified number of digits
    return str(pi.quantize(Decimal(10) ** -digits))  # Format to required precision

# Example usage:
# print(compute_pi(50))  # Uncomment to test the function with 50 decimal places
Key Changes Made:
Imports: The Decimal class and getcontext function from Python's decimal module are imported to handle high-precision arithmetic.
Function Definition: The compute_pi function is defined with type hints for better clarity.
Setting Precision: In Python, getcontext().prec is used to set the precision for Decimal calculations.
Variable Initialization: Python uses / for division, and ** for exponentiation (instead of Math.pow() in JavaScript).
Loop: The loop uses _ as the variable when the loop variable is not needed.
Comparisons: Python’s == operator is used for equality checks between Decimal objects.
Return Format: The function returns π formatted to the specified number of digits using the quantize() method to ensure the correct number of decimal places.
This Python implementation accurately reflects the logic of the original JavaScript code while adhering to Python’s syntax and conventions.