To convert the provided JavaScript Jest test cases into Python unittest format, we need to follow Python's conventions for testing. Here's how you can transform the given Jest test cases to a Python unittest:
JavaScript Jest Test Cases
javascript
describe('computePi', () => {
    test('should calculate pi to 5 decimal places correctly', () => {
        const digits = 5;
        const expected = '3.14159';
        const result = computePi(digits);
        expect(result).toBe(expected);
    });

    test('should calculate pi to 10 decimal places correctly', () => {
        const digits = 10;
        const expected = '3.1415926536';
        const result = computePi(digits);
        expect(result).toBe(expected);
    });

    test('should calculate pi to 15 decimal places correctly', () => {
        const digits = 15;
        const expected = '3.141592653589793';
        const result = computePi(digits);
        expect(result).toBe(expected);
    });

    test('should calculate pi to 20 decimal places correctly', () => {
        const digits = 20;
        const expected = '3.14159265358979323846';
        const result = computePi(digits);
        expect(result).toBe(expected);
    });

    test('should calculate pi to 30 decimal places correctly', () => {
        const digits = 30;
        const expected = '3.141592653589793238462643383280';
        const result = computePi(digits);
        expect(result).toBe(expected);
    });
});
Python unittest Test Cases
Here is the equivalent code in Python using the unittest framework:
python
import unittest

# Assuming compute_pi is defined somewhere in the same file or imported
# from your_module import compute_pi 

class TestComputePi(unittest.TestCase):

    def test_calculate_pi_5_decimal_places(self):
        digits = 5
        expected = '3.14159'
        result = compute_pi(digits)
        self.assertEqual(result, expected)

    def test_calculate_pi_10_decimal_places(self):
        digits = 10
        expected = '3.1415926536'
        result = compute_pi(digits)
        self.assertEqual(result, expected)

    def test_calculate_pi_15_decimal_places(self):
        digits = 15
        expected = '3.141592653589793'
        result = compute_pi(digits)
        self.assertEqual(result, expected)

    def test_calculate_pi_20_decimal_places(self):
        digits = 20
        expected = '3.14159265358979323846'
        result = compute_pi(digits)
        self.assertEqual(result, expected)

    def test_calculate_pi_30_decimal_places(self):
        digits = 30
        expected = '3.141592653589793238462643383280'
        result = compute_pi(digits)
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
Key Differences Explained:
Import Statements: The unittest module is imported, and if compute_pi is defined in another module, you would need to import it appropriately.
Class Definition: The tests are grouped within a class TestComputePi, which inherits from unittest.TestCase.
Test Method Names: Each test function starts with test_ to allow the unittest framework to recognize them as tests.
Assertions: The assertEqual() method is used instead of expect().toBe() from Jest. It checks if the result matches the expected value.
Main Block: The if __name__ == '__main__': block is included to allow running the tests directly when executing the script.
This Python version will provide the same testing functionality as the original JavaScript Jest test cases. You can run these tests in any Python environment that supports the unittest framework.