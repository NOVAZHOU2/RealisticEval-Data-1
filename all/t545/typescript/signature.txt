Certainly! Below is the TypeScript version of your JavaScript function with the same comments:

```typescript
/**
 * Iterates through the array of elements until the first null is encountered,
 * returning a new array that includes all elements before the null.
 *
 * @param {T[]} array - The array to iterate through.
 * @returns {T[]} - A new array containing elements before the first null.
 */
function elementsBeforeNull<T>(array: T[]): T[] {
    for (let i = 0; i < array.length; i++) {
        if (array[i] === null) {
            return array.slice(0, i);
        }
    }
    return array;
}
```

### Explanation:
- **Type Parameter `<T>`**: This allows the function to work with any type of elements in the array.
- **Function Signature**: `function elementsBeforeNull<T>(array: T[]): T[]` specifies that the function takes an array of type `T` and returns an array of type `T`.
- **For Loop**: The loop iterates through each element in the array.
- **Conditional Check**: If an element is `null`, it returns a slice of the array from the start up to but not including the current index.
- **Return Statement**: If no `null` is found, it returns the original array.

This ensures that the function adheres to TypeScript's type safety while maintaining the functionality of your original JavaScript function.