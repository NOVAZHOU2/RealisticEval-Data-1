Here's how you can convert the JavaScript function into TypeScript:

```typescript
/**
 * Iterates through the array of elements until the first null is encountered,
 * returning a new array that includes all elements before the null.
 *
 * @param {Array<T>} array - The array to iterate through.
 * @returns {Array<T>} - A new array containing elements before the first null.
 */
function elementsBeforeNull<T>(array: T[]): T[] {
    let result: T[] = [];
    for (let i = 0; i < array.length; i++) {
        if (array[i] === null) break;
        result.push(array[i]);
    }
    return result;
}
```

In this TypeScript version:
- I've added type annotations (`<T>`) to make the function generic and allow it to work with any type of array.
- I've also added an implementation for the function inside the comment block to ensure it works as expected. This part was missing in your original JavaScript code.