Sure! Below is the TypeScript version of your JavaScript Jest test case using `describe`:

```typescript
import { elementsBeforeNull } from './path-to-your-function'; // Adjust the import path accordingly

describe('elementsBeforeNull function', () => {
  it('should return an empty array if the input array is empty', () => {
    expect(elementsBeforeNull([])).toEqual([]);
  });

  it('should return all elements before the first null', () => {
    expect(elementsBeforeNull([1, 2, null, 4])).toEqual([1, 2]);
  });

  it('should return an empty array if there is no null in the array', () => {
    expect(elementsBeforeNull([1, 2, 3, 4])).toEqual([1, 2, 3, 4]);
  });

  it('should handle arrays with only one element being null', () => {
    expect(elementsBeforeNull([null])).toEqual([]);
  });
});
```

Make sure you have TypeScript and Jest set up in your project. If you don't have TypeScript installed, you can add it by running:

```bash
npm install --save-dev typescript @types/jest
```

And then create a `tsconfig.json` file in your project root with the following configuration:

```json
{
  "compilerOptions": {
    "target": "ES6",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist"
  },
  "include": ["src"]
}
```

This setup assumes your JavaScript files are located in the `src` directory and you want the compiled TypeScript files to be output to the `dist` directory. Adjust the paths according to your project structure.