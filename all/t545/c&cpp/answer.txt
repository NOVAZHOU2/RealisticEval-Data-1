Sure! Here's how you can translate the given JavaScript function into C++:

```cpp
#include <vector>
#include <iostream>

/**
 * Iterates through the vector of elements until the first nullptr is encountered,
 * returning a new vector that includes all elements before the nullptr.
 *
 * @param vec - The vector to iterate through.
 * @return A new vector containing elements before the first nullptr.
 */
std::vector<int*> elementsBeforeNull(const std::vector<int*>& vec) {
    std::vector<int*> result;
    for (const auto& elem : vec) {
        if (elem == nullptr) {
            break;
        }
        result.push_back(elem);
    }
    return result;
}

int main() {
    // Example usage:
    std::vector<int*> vec = {new int(1), new int(2), nullptr, new int(4)};
    
    std::vector<int*> result = elementsBeforeNull(vec);

    // Print the result
    for (const auto& ptr : result) {
        std::cout << *ptr << " ";
    }

    // Clean up dynamically allocated memory
    for (auto& ptr : vec) {
        delete ptr;
    }

    return 0;
}
```

### Explanation:
- **Function Signature**: The function `elementsBeforeNull` takes a constant reference to a vector of integer pointers (`const std::vector<int*>&`) and returns a new vector of integer pointers (`std::vector<int*>`).
  
- **Loop Through Vector**: The loop iterates through each element in the input vector. If an element is `nullptr`, the loop breaks.

- **Push Back Elements**: Before breaking, it pushes the current non-null element into the result vector.

- **Memory Management**: In the `main` function, example usage is shown where dynamic memory is allocated for integers. After using these integers, they are cleaned up to avoid memory leaks.

This should give you a good starting point for converting your JavaScript function to C++. Adjustments might be necessary based on the actual types and context in which you're working.