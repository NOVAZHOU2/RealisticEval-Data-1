Here's how you can convert your JavaScript function into Java:

```java
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("element1");
        list.add(null);
        list.add("element2");

        System.out.println(elementsBeforeNull(list));
    }

    /**
     * Iterates through the array of elements until the first null is encountered,
     * returning a new array that includes all elements before the null.
     *
     * @param array - The array to iterate through.
     * @return - A new array containing elements before the first null.
     */
    public static List<Object> elementsBeforeNull(List<Object> array) {
        List<Object> result = new ArrayList<>();

        for (Object obj : array) {
            if (obj == null) {
                break;
            }
            result.add(obj);
        }

        return result;
    }
}
```

This Java code does exactly what your original JavaScript function did: it iterates over an input `List` and collects all non-null elements into a new `List`. When it encounters a `null`, it stops iterating and returns the collected elements.

Please note that I've used `List<Object>` instead of `Array` because in Java, unlike JavaScript, arrays must be homogeneous (i.e., they can only contain elements of one type). By using `List<Object>`, we allow the method to handle lists with any object types. If you know the specific type of objects in your list, you could replace `Object` with the actual type.