Sure! Below is the equivalent Java code for the provided JavaScript function:

```java
import java.util.ArrayList;
import java.util.List;

/**
 * Iterates through the list of elements until the first null is encountered,
 * returning a new list that includes all elements before the null.
 *
 * @param <T>   the type of elements in the list
 * @param list  the list to iterate through
 * @return      a new list containing elements before the first null
 */
public class ElementsBeforeNull {

    public static <T> List<T> elementsBeforeNull(List<T> list) {
        List<T> result = new ArrayList<>();
        for (T element : list) {
            if (element == null) {
                break;
            }
            result.add(element);
        }
        return result;
    }

    public static void main(String[] args) {
        // Example usage
        List<String> exampleList = new ArrayList<>();
        exampleList.add("Hello");
        exampleList.add("World");
        exampleList.add(null);
        exampleList.add("Java");

        List<String> resultList = elementsBeforeNull(exampleList);
        System.out.println(resultList);  // Output: [Hello, World]
    }
}
```

### Explanation:
1. **Import Statements**: Import necessary classes from `java.util`.
2. **Generic Method**: Define a generic method `elementsBeforeNull` that takes a `List<T>` and returns a `List<T>`.
3. **Loop Through List**: Iterate through the list using a for-each loop.
4. **Break on Null**: If a `null` element is encountered, break out of the loop.
5. **Add Elements**: Add non-null elements to the result list.
6. **Return Result**: Return the result list.

This Java code achieves the same functionality as the provided JavaScript function.