Certainly! Below is the equivalent Java JUnit test case for the given JavaScript Jest test function `elementsBeforeNull`.

First, let's define the method in Java:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Tester {

    /**
     * Iterates through the list of elements until the first null is encountered,
     * returning a new list that includes all elements before the null.
     *
     * @param array - The list to iterate through.
     * @return A new list containing elements before the first null.
     */
    public static List<Object> elementsBeforeNull(List<Object> array) {
        List<Object> result = new ArrayList<>();
        for (Object element : array) {
            if (element == null) {
                break;
            }
            result.add(element);
        }
        return result;
    }
}
```

Next, let's write the JUnit test case for this method:

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;

public class TesterTest {

    @Test
    public void testElementsBeforeNull() {
        // Test with an array having elements before and after null
        List<Object> input1 = Arrays.asList(1, 2, null, 4, 5);
        List<Object> expectedOutput1 = Arrays.asList(1, 2);
        assertEquals(expectedOutput1, Tester.elementsBeforeNull(input1));

        // Test with an array having only non-null elements
        List<Object> input2 = Arrays.asList(1, 2, 3, 4, 5);
        List<Object> expectedOutput2 = Arrays.asList(1, 2, 3, 4, 5);
        assertEquals(expectedOutput2, Tester.elementsBeforeNull(input2));

        // Test with an array starting with null
        List<Object> input3 = Arrays.asList(null, 2, 3, 4, 5);
        List<Object> expectedOutput3 = new ArrayList<>();
        assertEquals(expectedOutput3, Tester.elementsBeforeNull(input3));

        // Test with an empty array
        List<Object> input4 = new ArrayList<>();
        List<Object> expectedOutput4 = new ArrayList<>();
        assertEquals(expectedOutput4, Tester.elementsBeforeNull(input4));
    }

    @Test
    public void testElementsBeforeNullWithNullAtEnd() {
        // Test with an array having null at the end
        List<Object> input = Arrays.asList(1, 2, 3, 4, null);
        List<Object> expectedOutput = Arrays.asList(1, 2, 3, 4);
        assertEquals(expectedOutput, Tester.elementsBeforeNull(input));
    }

    @Test
    public void testElementsBeforeNullWithAllNulls() {
        // Test with an array having all nulls
        List<Object> input = Arrays.asList(null, null, null, null);
        List<Object> expectedOutput = new ArrayList<>();
        assertEquals(expectedOutput, Tester.elementsBeforeNull(input));
    }
}
```

In this Java code:
- We have defined the `elementsBeforeNull` method in the `Tester` class.
- We have written several JUnit tests in the `TesterTest` class to verify different scenarios:
  - An array with elements before and after null.
  - An array with only non-null elements.
  - An array starting with null.
  - An empty array.
  - An array with null at the end.
  - An array with all nulls.

These tests should cover various edge cases and ensure that the `elementsBeforeNull` method works correctly.