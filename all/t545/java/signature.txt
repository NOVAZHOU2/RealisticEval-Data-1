Sure! Below is the equivalent Java code with the same functionality and comments:

```java
/**
 * Iterates through the array of elements until the first null is encountered,
 * returning a new array that includes all elements before the null.
 *
 * @param array - The array to iterate through.
 * @return An array containing elements before the first null.
 */
public static Object[] elementsBeforeNull(Object[] array) {
    if (array == null || array.length == 0) {
        return new Object[0];
    }

    for (int i = 0; i < array.length; i++) {
        if (array[i] == null) {
            return java.util.Arrays.copyOfRange(array, 0, i);
        }
    }

    // If no null is found, return the entire array
    return array;
}
```

### Explanation:
1. **Method Signature**: The method `elementsBeforeNull` is declared as `static`, meaning it can be called without creating an instance of the class.
2. **Parameter**: The method takes an array of `Object` since arrays in Java are covariant and cannot directly hold primitive types like `null`.
3. **Return Type**: The method returns an array of `Object`.
4. **Edge Cases**:
   - If the input array is `null` or empty, an empty array is returned.
5. **Iteration**: The method iterates through the array using a `for` loop.
6. **Condition Check**: When a `null` element is encountered, the method uses `Arrays.copyOfRange` to create a new array from the start up to but not including the `null` element.
7. **Default Case**: If no `null` element is found, the original array is returned.

This Java method should work similarly to your JavaScript function, iterating through the array and returning a new array up to the first `null` element.