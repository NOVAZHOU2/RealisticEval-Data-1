Sure! Below is the equivalent implementation of the Python `Trie` and `TrieNode` classes in C++.

### C++ Code

```cpp
#include <unordered_map>
#include <string>

class TrieNode {
public:
    // Using an unordered map to store children
    std::unordered_map<char, TrieNode*> children;

    // Constructor
    TrieNode() {}
};

class Trie {
public:
    TrieNode* root;

    // Constructor
    Trie() {
        root = new TrieNode();
    }

    // Method to insert a word into the Trie
    void insert(const std::string& word) {
        TrieNode* current = root;
        for (char ch : word) {
            if (current->children.find(ch) == current->children.end()) {
                current->children[ch] = new TrieNode();
            }
            current = current->children[ch];
        }
    }

    // Method to search for a word in the Trie
    bool search(const std::string& word) {
        TrieNode* current = root;
        for (char ch : word) {
            if (current->children.find(ch) == current->children.end()) {
                return false; // Not found
            }
            current = current->children[ch];
        }
        return true; // Found
    }

    // Method to check if any word in the Trie starts with the given prefix
    bool starts_with(const std::string& prefix) {
        TrieNode* current = root;
        for (char ch : prefix) {
            if (current->children.find(ch) == current->children.end()) {
                return false; // No such prefix
            }
            current = current->children[ch];
        }
        return true; // Prefix found
    }

    // Destructor to clean up memory
    ~Trie() {
        deleteTrie(root);
    }

private:
    // Helper function to delete the Trie nodes
    void deleteTrie(TrieNode* node) {
        for (auto& pair : node->children) {
            deleteTrie(pair.second);
        }
        delete node;
    }
};
```

### Explanation
- **TrieNode Class**: This class represents a single node in the Trie, storing its children using an unordered map.
- **Trie Class**: This class manages the Trie structure. It provides methods for inserting words, searching for words, and checking for prefixes.
- **Memory Management**: The destructor cleans up the allocated memory to prevent memory leaks. 

You can now use this implementation in your C++ projects. Let me know if you need further modifications!