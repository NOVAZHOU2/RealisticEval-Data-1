Here's the equivalent C++ code for the given Python Trie implementation:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>

// TrieNode class
class TrieNode {
public:
    std::unordered_map<char, TrieNode*> children;
    bool is_end_of_word;

    TrieNode() : is_end_of_word(false) {}

    bool has_child(char ch) {
        return children.find(ch) != children.end();
    }

    TrieNode* get_child(char ch) {
        return children[ch];
    }

    void add_child(char ch) {
        if (!has_child(ch)) {
            children[ch] = new TrieNode();
        }
    }

    void set_end_of_word() {
        is_end_of_word = true;
    }

    bool is_end() const {
        return is_end_of_word;
    }

    ~TrieNode() {
        for (auto& child : children) {
            delete child.second;
        }
    }
};

// Trie class
class Trie {
public:
    TrieNode* root;

    Trie() : root(new TrieNode()) {}

    void insert(const std::string& word) {
        TrieNode* current = root;
        for (char ch : word) {
            current->add_child(ch);
            current = current->get_child(ch);
        }
        current->set_end_of_word();
    }

    bool search(const std::string& word) {
        TrieNode* current = root;
        for (char ch : word) {
            if (!current->has_child(ch)) {
                return false;
            }
            current = current->get_child(ch);
        }
        return current->is_end();
    }

    bool starts_with(const std::string& prefix) {
        TrieNode* current = root;
        for (char ch : prefix) {
            if (!current->has_child(ch)) {
                return false;
            }
            current = current->get_child(ch);
        }
        return true;
    }

    ~Trie() {
        delete root;
    }
};

int main() {
    // Example usage
    Trie trie;
    trie.insert("apple");
    trie.insert("app");
    trie.insert("banana");

    std::cout << "Search 'apple': " << trie.search("apple") << std::endl;
    std::cout << "Starts with 'app': " << trie.starts_with("app") << std::endl;
    std::cout << "Search 'ban': " << trie.search("ban") << std::endl;

    return 0;
}
```

### Explanation:
1. **TrieNode Class**:
   - `std::unordered_map<char, TrieNode*>` is used to store children nodes.
   - Methods like `has_child`, `get_child`, `add_child`, `set_end_of_word`, and `is_end` are implemented similarly to the Python version.

2. **Trie Class**:
   - The `root` node is initialized using a `new TrieNode()` constructor.
   - Methods like `insert`, `search`, and `starts_with` are implemented similarly to the Python version.
   - Destructor is added to properly clean up dynamically allocated nodes.

3. **Main Function**:
   - Example usage of the Trie class is shown in the `main` function.

This C++ code maintains the same functionality and logic as the original Python code but adapts to C++ syntax and features.