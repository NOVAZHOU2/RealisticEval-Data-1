Sure! Below is the equivalent C++ implementation of the `Trie` and `TrieNode` classes you provided in Python.

```cpp
#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

class TrieNode {
public:
    unordered_map<char, TrieNode*> children;
};

class Trie {
private:
    TrieNode* root;

public:
    Trie() : root(new TrieNode()) {}

    void insert(const string& word) {
        TrieNode* current = root;
        for (char ch : word) {
            if (current->children.find(ch) == current->children.end()) {
                current->children[ch] = new TrieNode();
            }
            current = current->children[ch];
        }
    }

    bool search(const string& word) {
        TrieNode* node = find(word);
        return node != nullptr && node->children.empty();
    }

    bool startsWith(const string& prefix) {
        return find(prefix) != nullptr;
    }

private:
    TrieNode* find(const string& prefix) {
        TrieNode* current = root;
        for (char ch : prefix) {
            if (current->children.find(ch) == current->children.end()) {
                return nullptr;
            }
            current = current->children[ch];
        }
        return current;
    }
};

int main() {
    Trie trie;
    trie.insert("apple");
    cout << "Search 'apple': " << (trie.search("apple") ? "true" : "false") << endl;
    cout << "Starts with 'app': " << (trie.startsWith("app") ? "true" : "false") << endl;
    cout << "Search 'banana': " << (trie.search("banana") ? "true" : "false") << endl;
    return 0;
}
```

### Explanation:

1. **TrieNode Class**:
   - Contains an `unordered_map<char, TrieNode*>` named `children` which stores the child nodes.

2. **Trie Class**:
   - The constructor initializes the root node.
   - The `insert` method inserts a word into the trie.
   - The `search` method checks if a word exists in the trie.
   - The `startsWith` method checks if any word in the trie starts with a given prefix.
   - The `find` helper method is used to traverse the trie and find the last node corresponding to the end of the prefix or word.

3. **main Function**:
   - Demonstrates inserting words into the trie and performing search and prefix checks.

This C++ implementation mirrors the functionality of your original Python code.