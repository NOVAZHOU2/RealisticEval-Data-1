Here’s how you can convert the provided Python unittest test class to a Java test case using JUnit. The original Python code only shows the structure of the `Trie` and `TrieNode` classes without actual test cases. I’ll assume you want a basic structure for the test cases in Java.

Here's the Java version:

```java
package org.real.temp;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class Tester {

    private Trie trie;

    @BeforeEach
    void setUp() {
        trie = new Trie();
    }

    @Test
    void testInsert() {
        trie.insert("hello");
        assertTrue(trie.search("hello"));
        assertFalse(trie.search("hell"));
    }

    @Test
    void testSearch() {
        trie.insert("world");
        assertTrue(trie.search("world"));
        assertFalse(trie.search("word"));
    }

    @Test
    void testStartsWith() {
        trie.insert("apple");
        assertTrue(trie.startsWith("app"));
        assertFalse(trie.startsWith("applz"));
    }
}

class Trie {
    // Trie implementation (insert, search, starts_with)
}

class TrieNode {
    // TrieNode implementation
}
```

### Explanation:

1. **Imports**: Use JUnit 5 (Jupiter) for the test case. Ensure you have the appropriate dependencies in your project.

2. **Class Declaration**: The class `Tester` is declared as public and contains test methods.

3. **Setup Method**: The `setUp` method initializes a new instance of `Trie` before each test.

4. **Test Methods**: 
   - `testInsert`: Checks if the word is inserted correctly.
   - `testSearch`: Verifies that searching for an existing and a non-existing word returns correct results.
   - `testStartsWith`: Tests the prefix functionality.

5. **Trie and TrieNode**: The actual implementations of the `Trie` and `TrieNode` classes are not provided but should be implemented as per your requirements. 

Make sure to implement the `insert`, `search`, and `starts_with` methods in the `Trie` class for the tests to function properly.