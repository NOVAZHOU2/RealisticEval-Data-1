Sure! Below is the equivalent JavaScript test case using Jest for the provided Python `Trie` class.

```javascript
// trie.js
class Trie {
    constructor() {
        this.root = new TrieNode();
    }

    insert(word) {
        let node = this.root;
        for (let char of word) {
            if (!node.children[char]) {
                node.children[char] = new TrieNode();
            }
            node = node.children[char];
        }
        node.isEndOfWord = true;
    }

    search(word) {
        let node = this.root;
        for (let char of word) {
            if (!node.children[char]) {
                return false;
            }
            node = node.children[char];
        }
        return node.isEndOfWord || false;
    }

    startsWith(prefix) {
        let node = this.root;
        for (let char of prefix) {
            if (!node.children[char]) {
                return false;
            }
            node = node.children[char];
        }
        return true;
    }
}

class TrieNode {
    constructor() {
        this.children = {};
        this.isEndOfWord = false;
    }
}

module.exports = { Trie, TrieNode };
```

```javascript
// trie.test.js
const { Trie, TrieNode } = require('./trie');

describe('Trie', () => {
    let trie;

    beforeEach(() => {
        trie = new Trie();
    });

    describe('insert', () => {
        it('should insert a single word', () => {
            trie.insert('apple');
            expect(trie.search('apple')).toBe(true);
        });

        it('should insert multiple words', () => {
            trie.insert('app');
            trie.insert('application');
            expect(trie.search('app')).toBe(true);
            expect(trie.search('application')).toBe(true);
        });
    });

    describe('search', () => {
        it('should return true for existing word', () => {
            trie.insert('apple');
            expect(trie.search('apple')).toBe(true);
        });

        it('should return false for non-existing word', () => {
            expect(trie.search('banana')).toBe(false);
        });
    });

    describe('startsWith', () => {
        it('should return true for existing prefix', () => {
            trie.insert('apple');
            expect(trie.startsWith('ap')).toBe(true);
        });

        it('should return false for non-existing prefix', () => {
            expect(trie.startsWith('ba')).toBe(false);
        });
    });
});
```

### Explanation:

1. **Trie Class**:
   - The `Trie` class has methods `insert`, `search`, and `startsWith`.
   - The `insert` method inserts a word into the trie.
   - The `search` method checks if a word exists in the trie.
   - The `startsWith` method checks if any word in the trie starts with the given prefix.

2. **TrieNode Class**:
   - Each node in the trie contains a `children` object and an `isEndOfWord` boolean flag.

3. **Test Cases**:
   - The test cases are written using Jest's `describe` and `it` functions.
   - `beforeEach` is used to initialize a new `Trie` instance before each test case.
   - Different scenarios are tested for each method (`insert`, `search`, `startsWith`).