Certainly! Hereâ€™s the equivalent TypeScript code for the provided Python code, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Implements a dictionary tree (Trie) for fast string retrieval and storage.
 */
class Trie {
  /**
   * Inserts a word into the trie.
   * @param word The word to insert.
   */
  insert(word: string): void {
    // Implementation goes here
  }

  /**
   * Searches for a word in the trie.
   * @param word The word to search for.
   * @returns true if the word is found, false otherwise.
   */
  search(word: string): boolean {
    // Implementation goes here
  }

  /**
   * Checks if there is any word in the trie that starts with the given prefix.
   * @param prefix The prefix to check.
   * @returns true if there is any word starting with the prefix, false otherwise.
   */
  startsWith(prefix: string): boolean {
    // Implementation goes here
  }
}

/**
 * Represents a node in the Trie.
 */
class TrieNode {
  children: { [key: string]: TrieNode };

  constructor() {
    this.children = {};
  }
}
```

### Explanation:
1. **Trie Class**:
   - The class `Trie` is documented with a JSDoc comment explaining its purpose.
   - Each method (`insert`, `search`, and `startsWith`) is annotated with JSDoc comments, specifying the parameters and return types.

2. **TrieNode Class**:
   - The class `TrieNode` is documented with a JSDoc comment explaining its purpose.
   - The constructor initializes the `children` property as an object with string keys and `TrieNode` values.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate type annotations and JSDoc comments for better documentation and readability.