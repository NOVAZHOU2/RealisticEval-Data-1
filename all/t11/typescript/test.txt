Certainly! Below is the equivalent TypeScript test case using Jest for the provided Python unittest test class `Trie`:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('Trie', () => {
  let trie: Trie;

  beforeEach(() => {
    // Initialize your Trie instance here if needed
    trie = new Trie();
  });

  describe('insert', () => {
    it('should insert a word into the trie', () => {
      trie.insert('apple');
      expect(trie.search('apple')).toBe(true);
    });
  });

  describe('search', () => {
    it('should return true if the word exists in the trie', () => {
      trie.insert('banana');
      expect(trie.search('banana')).toBe(true);
    });

    it('should return false if the word does not exist in the trie', () => {
      expect(trie.search('cherry')).toBe(false);
    });
  });

  describe('startsWith', () => {
    it('should return true if there is any word in the trie that starts with the given prefix', () => {
      trie.insert('apricot');
      expect(trie.startsWith('ap')).toBe(true);
    });

    it('should return false if there is no word in the trie that starts with the given prefix', () => {
      expect(trie.startsWith('orange')).toBe(false);
    });
  });
});

// Define the Trie and TrieNode classes here
class TrieNode {
  children: { [key: string]: TrieNode };

  constructor() {
    this.children = {};
  }
}

class Trie {
  root: TrieNode;

  constructor() {
    this.root = new TrieNode();
  }

  insert(word: string): void {
    let currentNode = this.root;
    for (const char of word) {
      if (!currentNode.children[char]) {
        currentNode.children[char] = new TrieNode();
      }
      currentNode = currentNode.children[char];
    }
    currentNode.children['*'] = new TrieNode(); // Mark the end of the word
  }

  search(word: string): boolean {
    let currentNode = this.root;
    for (const char of word) {
      if (!currentNode.children[char]) {
        return false;
      }
      currentNode = currentNode.children[char];
    }
    return !!currentNode.children['*']; // Check if the end of the word marker exists
  }

  startsWith(prefix: string): boolean {
    let currentNode = this.root;
    for (const char of prefix) {
      if (!currentNode.children[char]) {
        return false;
      }
      currentNode = currentNode.children[char];
    }
    return true; // If we reach here, there is at least one word starting with the prefix
  }
}
```

In this TypeScript code:
- We define the `TrieNode` and `Trie` classes.
- We write unit tests using Jest to verify the behavior of the `insert`, `search`, and `startsWith` methods.

Make sure you have Jest installed in your project to run these tests. You can install it using npm or yarn:

```sh
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run the tests using:

```sh
npx jest
# or
yarn test
```