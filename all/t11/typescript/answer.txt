Here's the equivalent TypeScript code for the provided Python code:

```typescript
class TrieNode {
  children: { [key: string]: TrieNode };
  isEndOfWord: boolean;

  constructor() {
    this.children = {};
    this.isEndOfWord = false;
  }

  hasChild(ch: string): boolean {
    return ch in this.children;
  }

  getChild(ch: string): TrieNode | undefined {
    return this.children[ch];
  }

  addChild(ch: string): void {
    if (!this.hasChild(ch)) {
      this.children[ch] = new TrieNode();
    }
  }

  setEndOfWord(): void {
    this.isEndOfWord = true;
  }

  isEnd(): boolean {
    return this.isEndOfWord;
  }
}

class Trie {
  root: TrieNode;

  constructor() {
    this.root = new TrieNode();
  }

  insert(word: string): void {
    let current = this.root;
    for (const ch of word) {
      current.addChild(ch);
      current = current.getChild(ch)!;
    }
    current.setEndOfWord();
  }

  search(word: string): boolean {
    let current = this.root;
    for (const ch of word) {
      if (!current.hasChild(ch)) {
        return false;
      }
      current = current.getChild(ch)!;
    }
    return current.isEnd();
  }

  startsWith(prefix: string): boolean {
    let current = this.root;
    for (const ch of prefix) {
      if (!current.hasChild(ch)) {
        return false;
      }
      current = current.getChild(ch)!;
    }
    return true;
  }
}
```

### Explanation:
1. **TrieNode Class**:
   - The `children` property is defined as `{ [key: string]: TrieNode }`.
   - Methods like `hasChild`, `getChild`, `addChild`, `setEndOfWord`, and `isEnd` are implemented with proper type annotations.

2. **Trie Class**:
   - The `root` property is initialized with a new `TrieNode`.
   - Methods like `insert`, `search`, and `startsWith` are implemented with proper type annotations.
   - The `!` operator is used to assert non-nullability when accessing child nodes during iteration.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate type definitions and adjustments for TypeScript's static type system.