Sure! Below is the equivalent TypeScript code for your Python `Trie` and `TrieNode` classes:

```typescript
class Trie {
    /**
     * Implement a dictionary tree for fast string retrieval and storage
     */

    private root: TrieNode;

    constructor() {
        this.root = new TrieNode();
    }

    insert(word: string): void {
        let node = this.root;
        for (const char of word) {
            if (!node.children[char]) {
                node.children[char] = new TrieNode();
            }
            node = node.children[char];
        }
        node.isEndOfWord = true;
    }

    search(word: string): boolean {
        const node = this.searchPrefix(word);
        return node !== null && node.isEndOfWord;
    }

    startsWith(prefix: string): boolean {
        return this.searchPrefix(prefix) !== null;
    }

    private searchPrefix(prefix: string): TrieNode | null {
        let node = this.root;
        for (const char of prefix) {
            if (!node.children[char]) {
                return null;
            }
            node = node.children[char];
        }
        return node;
    }
}

class TrieNode {
    children: { [key: string]: TrieNode };
    isEndOfWord: boolean;

    constructor() {
        this.children = {};
        this.isEndOfWord = false;
    }
}
```

### Explanation:
1. **Trie Class**:
   - The `root` property is initialized with a new instance of `TrieNode`.
   - The `insert` method iterates through each character of the word, creating new nodes as necessary, and marks the end of the word.
   - The `search` method checks if a word exists in the trie by using the `searchPrefix` helper method and verifying if the last node marked `isEndOfWord` is true.
   - The `startsWith` method uses the `searchPrefix` helper method to check if any word starts with the given prefix.

2. **TrieNode Class**:
   - Each `TrieNode` has a `children` object to store child nodes and an `isEndOfWord` boolean to indicate if the node represents the end of a word.

This TypeScript implementation mirrors the functionality of your original Python code.