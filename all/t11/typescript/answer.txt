Here's the TypeScript version of your Python `Trie` and `TrieNode` classes:

```typescript
class TrieNode {
    children: { [key: string]: TrieNode } = {};

    constructor() {}
}

class Trie {
    private root: TrieNode;

    constructor() {
        this.root = new TrieNode();
    }

    insert(word: string): void {
        let node = this.root;
        for (const char of word) {
            if (!node.children[char]) {
                node.children[char] = new TrieNode();
            }
            node = node.children[char];
        }
    }

    search(word: string): boolean {
        let node = this.root;
        for (const char of word) {
            if (!node.children[char]) {
                return false;
            }
            node = node.children[char];
        }
        return true; // Assuming we return true if the word exists
    }

    startsWith(prefix: string): boolean {
        let node = this.root;
        for (const char of prefix) {
            if (!node.children[char]) {
                return false;
            }
            node = node.children[char];
        }
        return true; // Assuming we return true if the prefix exists
    }
}
```

Feel free to delve into any specific part if you have questions!