Certainly! Here's the JavaScript code converted to TypeScript:

```typescript
function toroidalDiff(thisPoint: {x: number, y: number}, 
                      otherPoint: {x: number, y: number}, 
                      width: number, 
                      height: number): [number, number] {
    let dx = thisPoint.x - otherPoint.x;
    let dy = thisPoint.y - otherPoint.y;

    // Handle wraparound for the x dimension
    if (Math.abs(dx) > width / 2) {
        dx = dx > 0 ? dx - width : dx + width;
    }

    // Handle wraparound for the y dimension
    if (Math.abs(dy) > height / 2) {
        dy = dy > 0 ? dy - height : dy + height;
    }

    return [dx, dy];
}
```

In this TypeScript version:
- The function parameters `thisPoint` and `otherPoint` are typed as objects with properties `x` and `y`.
- The return type is specified as a tuple `[number, number]`.
- The function signature includes explicit types for better clarity and type checking.