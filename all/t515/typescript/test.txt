Certainly! Hereâ€™s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. We will map the Python `unittest` assertions to the appropriate Jest assertions.

First, let's include the necessary imports and setup for Jest:

```typescript
import { formatDateString } from './path/to/formatDateString'; // Import the function to be tested
import moment from 'moment-timezone';

describe('formatDateString', () => {
    it('should correctly convert a valid date string', () => {
        const dateStr = "Fri, 28 Sep 2023 14:45:00 +0000 (UTC)";
        const expectedDate = "2023-09-28_14:45:00";
        expect(formatDateString(dateStr)).toBe(expectedDate);
    });

    it('should return null for an invalid date string format', () => {
        const dateStr = "Invalid date format";
        expect(formatDateString(dateStr)).toBeNull();
    });

    it('should return null for a date string missing components', () => {
        const dateStr = "Fri, 28 Sep 2023 14:45:00 +0000";
        expect(formatDateString(dateStr)).toBeNull();
    });

    it('should correctly convert an edge case date string (e.g., leap year)', () => {
        const dateStr = "Sun, 29 Feb 2024 14:45:00 +0000 (UTC)";
        const expectedDate = "2024-02-29_14:45:00";
        expect(formatDateString(dateStr)).toBe(expectedDate);
    });
});

// The implementation of formatDateString function
function formatDateString(dateStr: string): string | null {
    try {
        // Convert to a moment object using the specified format
        const dateObject = moment(dateStr, 'ddd, DD MMM YYYY HH:mm:ss ZZ (Z)', true);

        if (!dateObject.isValid()) {
            throw new Error('Invalid date format');
        }

        // Convert to the desired output format
        const formattedDate = dateObject.format('YYYY-MM-DD_HH:mm:ss');

        return formattedDate;
    } catch (error) {
        console.error(`Error parsing date: ${error}`);
        return null;
    }
}

export { formatDateString };
```

### Explanation:
1. **Imports**:
   - Import `formatDateString` from the module where it is defined.
   - Import `moment` from `moment-timezone`.

2. **Jest Testing Block**:
   - Use `describe` to group the tests.
   - Use `it` to define individual test cases.
   - Use `expect` with appropriate matchers (`toBe`, `toBeNull`) to perform assertions.

3. **Function Implementation**:
   - The `formatDateString` function is implemented with proper type annotations and error handling.

### Running the Tests:
To run the Jest tests, ensure you have Jest installed in your project:

```sh
npm install --save-dev jest @types/jest ts-jest
```

Configure Jest in your `tsconfig.json` and `jest.config.js` files:

#### `tsconfig.json`
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react",
    "lib": ["es6", "dom"]
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

#### `jest.config.js`
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest'
  },
  testRegex: '(/__tests__/.*|(\\.|/)(test|spec))\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
};
```

Run the tests with:

```sh
npx jest
```

This setup ensures that the tests are equivalent to the Python unittests and that the functionality is preserved.