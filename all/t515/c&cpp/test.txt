Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite with appropriate assertions and structure.

### C++ Code with Catch2 Testing Framework

First, make sure you have the Catch2 library included in your project. You can include it via a header file or through a package manager like vcpkg or Conan.

Here is the complete C++ code:

```cpp
#include <iostream>
#include <sstream>
#include <chrono>
#include <iomanip>
#include <catch2/catch_test_macros.hpp>

// Converts a date string from the format '%a, %d %b %Y %H:%M:%S %z (%Z)'
// to the format '%Y-%m-%d_%H:%M:%S'.
//
// Args:
//     date_str (const std::string&): The input date string.
//
// Returns:
//     std::string: The formatted date string in the format '%Y-%m-%d_%H:%M:%S'.
//     Empty string: If the input date string is invalid.
std::string format_date_string(const std::string& date_str) {
    std::istringstream iss(date_str);
    std::tm tm = {};

    // Attempt to parse the date string
    if (!(iss >> std::get_time(&tm, "%a, %d %b %Y %H:%M:%S %z") >> std::ws)) {
        std::cerr << "Error parsing date: Invalid format\n";
        return "";
    }

    // Convert to the desired output format
    std::ostringstream oss;
    oss << std::put_time(&tm, "%Y-%m-%d_%H:%M:%S");

    return oss.str();
}

TEST_CASE("TestFormatDateString", "[format_date_string]") {
    SECTION("test_valid_date_conversion") {
        const std::string date_str = "Fri, 28 Sep 2023 14:45:00 +0000 (UTC)";
        const std::string expected_date = "2023-09-28_14:45:00";
        REQUIRE(format_date_string(date_str) == expected_date);
    }

    SECTION("test_invalid_date_format") {
        const std::string date_str = "Invalid date format";
        REQUIRE(format_date_string(date_str).empty());
    }

    SECTION("test_missing_components") {
        const std::string date_str = "Fri, 28 Sep 2023 14:45:00 +0000";
        REQUIRE(format_date_string(date_str).empty());
    }

    SECTION("test_edge_case_date") {
        const std::string date_str = "Sun, 29 Feb 2024 14:45:00 +0000 (UTC)";
        const std::string expected_date = "2024-02-29_14:45:00";
        REQUIRE(format_date_string(date_str) == expected_date);
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Header Files**:
   - `<iostream>`: For basic input/output operations.
   - `<sstream>`: For string stream operations.
   - `<chrono>`: For handling dates and times.
   - `<iomanip>`: For formatting output.
   - `<catch2/catch_test_macros.hpp>`: For Catch2 testing macros.

2. **Function Definition**:
   - `format_date_string`: Takes a `const std::string&` as input and returns a `std::string`.

3. **Catch2 Test Suite**:
   - `TEST_CASE`: Defines the test suite.
   - `SECTION`: Defines individual test cases within the test suite.
   - `REQUIRE`: Used for assertions in Catch2.

4. **Test Cases**:
   - `test_valid_date_conversion`: Tests a valid date string conversion.
   - `test_invalid_date_format`: Tests an invalid date string format.
   - `test_missing_components`: Tests a date string missing components.
   - `test_edge_case_date`: Tests an edge case date string (e.g., leap year).

5. **Main Function**:
   - Runs the Catch2 test suite.

This code preserves the original purpose and structure of the Python unittest class while adapting it to the Catch2 testing framework in C++.