Here's how you can convert your Python function into C++ using the `<chrono>` and `<iomanip>` libraries for handling dates:

```cpp
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <ctime>

std::string format_date_string(const std::string& date_str) {
    // Input format
    const char* input_format = "%a, %d %b %Y %H:%M:%S %z (%Z)";
    
    // Create a tm struct to hold the parsed time
    std::tm tm;
    memset(&tm, 0, sizeof(tm));

    // Parse the input string
    if (strptime(date_str.c_str(), input_format, &tm)) {
        // Output format
        std::ostringstream oss;
        oss << std::put_time(&tm, "%Y-%m-%d_%H:%M:%S");

        return oss.str();
    } else {
        return "Invalid date";
    }
}

int main() {
    std::string date_str = "Mon, 12 Oct 2023 14:30:00 +0000 (UTC)";
    std::cout << format_date_string(date_str) << std::endl;

    return 0;
}
```

This C++ code does the same thing as your Python function - it converts a date string from one format (`'%a, %d %b %Y %H:%M:%S %z (%Z)'`) to another (`'%Y-%m-%d_%H:%M:%S'`). Note that `strptime` is used to parse the input string according to the specified format, and `std::put_time` is used to format the `tm` structure into the desired output string. If the parsing fails, it returns "Invalid date".