Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <sstream>
#include <chrono>
#include <iomanip>

// Converts a date string from the format '%a, %d %b %Y %H:%M:%S %z (%Z)'
// to the format '%Y-%m-%d_%H:%M:%S'.
//
// Args:
//     date_str (const std::string&): The input date string.
//
// Returns:
//     std::string: The formatted date string in the format '%Y-%m-%d_%H:%M:%S'.
//     Empty string: If the input date string is invalid.
std::string format_date_string(const std::string& date_str) {
    std::istringstream iss(date_str);
    std::tm tm = {};

    // Attempt to parse the date string
    if (!(iss >> std::get_time(&tm, "%a, %d %b %Y %H:%M:%S %z") >> std::ws)) {
        std::cerr << "Error parsing date: Invalid format\n";
        return "";
    }

    // Convert to the desired output format
    std::ostringstream oss;
    oss << std::put_time(&tm, "%Y-%m-%d_%H:%M:%S");

    return oss.str();
}

int main() {
    std::string date_str = "Fri, 21 Jul 2023 16:45:00 +0000 (UTC)";
    std::string formatted_date = format_date_string(date_str);

    if (!formatted_date.empty()) {
        std::cout << "Formatted Date: " << formatted_date << std::endl;
    } else {
        std::cout << "Failed to format date." << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `<iostream>`: For basic input/output operations.
   - `<sstream>`: For string stream operations.
   - `<chrono>`: For handling dates and times.
   - `<iomanip>`: For formatting output.

2. **Function Definition**:
   - `format_date_string`: Takes a `const std::string&` as input and returns a `std::string`.

3. **Comments and Documentation**:
   - Single-line comments (`//`) are used for brief explanations.
   - Multi-line comments (`/* ... */`) are used for detailed documentation.

4. **Parsing the Input String**:
   - Uses `std::get_time` to parse the date string according to the specified format.
   - Checks if the parsing was successful by verifying the input stream state.

5. **Formatting the Output**:
   - Uses `std::put_time` to format the parsed `std::tm` structure into the desired output format.

6. **Main Function**:
   - Demonstrates how to call the `format_date_string` function and prints the result.

This code preserves the original purpose and structure of the Python code while adapting it to C++ syntax and conventions.