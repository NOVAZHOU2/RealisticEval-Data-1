Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I'll ensure that the functionality and logic of the tests are maintained, and I'll document any necessary changes due to language differences between Python and JavaScript.

### Python Unittest Code

```python
import unittest

class TestFormatDateString(unittest.TestCase):

    def test_valid_date_conversion(self):
        """Test case for a valid date string."""
        date_str = "Fri, 28 Sep 2023 14:45:00 +0000 (UTC)"
        expected_date = "2023-09-28_14:45:00"
        self.assertEqual(format_date_string(date_str), expected_date)

    def test_invalid_date_format(self):
        """Test case for an invalid date string format."""
        date_str = "Invalid date format"
        self.assertIsNone(format_date_string(date_str))

    def test_missing_components(self):
        """Test case for a date string missing components."""
        date_str = "Fri, 28 Sep 2023 14:45:00 +0000"
        self.assertIsNone(format_date_string(date_str))

    def test_edge_case_date(self):
        """Test case for an edge case date string (e.g., leap year)."""
        date_str = "Sun, 29 Feb 2024 14:45:00 +0000 (UTC)"
        expected_date = "2024-02-29_14:45:00"
        self.assertEqual(format_date_string(date_str), expected_date)
```

### Equivalent Jest Test Suite

```javascript
const formatDateString = require('./formatDateString'); // Assuming formatDateString is exported from another file

describe('TestFormatDateString', () => {
    it('test_valid_date_conversion', () => {
        // Test case for a valid date string.
        const dateStr = "Fri, 28 Sep 2023 14:45:00 +0000 (UTC)";
        const expectedDate = "2023-09-28_14:45:00";
        expect(formatDateString(dateStr)).toEqual(expectedDate);
    });

    it('test_invalid_date_format', () => {
        // Test case for an invalid date string format.
        const dateStr = "Invalid date format";
        expect(formatDateString(dateStr)).toBeNull();
    });

    it('test_missing_components', () => {
        // Test case for a date string missing components.
        const dateStr = "Fri, 28 Sep 2023 14:45:00 +0000";
        expect(formatDateString(dateStr)).toBeNull();
    });

    it('test_edge_case_date', () => {
        // Test case for an edge case date string (e.g., leap year).
        const dateStr = "Sun, 29 Feb 2024 14:45:00 +0000 (UTC)";
        const expectedDate = "2024-02-29_14:45:00";
        expect(formatDateString(dateStr)).toEqual(expectedDate);
    });
});
```

### Explanation:
1. **Importing the Function**: 
   - In Python, the function `format_date_string` is assumed to be defined in the same module.
   - In JavaScript, we assume `formatDateString` is imported from another file using `require` or `import`.

2. **Describe Block**: 
   - Jest uses `describe` blocks to group related tests together.
   - Each test case is defined using `it` blocks, which correspond to individual test methods in Python's `unittest.TestCase`.

3. **Assertions**:
   - `expect` is used for assertions in Jest.
   - `toEqual` is used to check equality for objects and strings.
   - `toBeNull` is used to check if the result is `null`.

4. **Test Descriptions**:
   - Each test case includes a description within the `it` block, similar to the docstrings in Python.

By following these guidelines, the Jest test suite maintains the same functionality and logic as the original Python unittest class.