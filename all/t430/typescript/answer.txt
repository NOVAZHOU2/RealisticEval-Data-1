Certainly! Below is the equivalent TypeScript code for the given Python function. This code defines a function `intersectVertically` with appropriate types and maintains the same functionality:

```typescript
function intersectVertically(rect1: [number, number, number, number], rect2: [number, number, number, number]): boolean {
    /**
     * Determine if two rectangles intersect vertically.
     *
     * Each rectangle is defined by a tuple (x1, y1, x2, y2), where:
     * - (x1, y1) are the coordinates of the bottom-left corner.
     * - (x2, y2) are the coordinates of the top-right corner.
     *
     * @param rect1 - The first rectangle defined by (x1, y1, x2, y2).
     * @param rect2 - The second rectangle defined by (x1, y1, x2, y2).
     * @returns True if the rectangles intersect vertically, False otherwise.
     */
    return !(rect1[3] < rect2[1] || rect2[3] < rect1[1]);
}

// Example usage
const rect1: [number, number, number, number] = [1, 2, 3, 4];
const rect2: [number, number, number, number] = [0, 3, 5, 6];

console.log(intersectVertically(rect1, rect2)); // Output: true
```

In this TypeScript code:
- The function `intersectVertically` takes two tuples as parameters, each representing a rectangle with the coordinates `(x1, y1, x2, y2)`.
- The types `[number, number, number, number]` are used to represent the tuples.
- The function returns a boolean value indicating whether the rectangles intersect vertically.
- The logic inside the function remains the same as the Python code.