Certainly! Below is the equivalent TypeScript code for the provided Python function:

```typescript
function intersectVertically(rect1: [number, number, number, number], rect2: [number, number, number, number]): boolean {
    /**
     * Determine if two rectangles intersect vertically.
     *
     * Each rectangle is defined by a tuple (x1, y1, x2, y2), where:
     * - (x1, y1) are the coordinates of the bottom-left corner.
     * - (x2, y2) are the coordinates of the top-right corner.
     *
     * @param rect1 - The first rectangle defined by (x1, y1, x2, y2).
     * @param rect2 - The second rectangle defined by (x1, y1, x2, y2).
     * @returns True if the rectangles intersect vertically, False otherwise.
     */
    return !(rect1[3] < rect2[1] || rect2[3] < rect1[1]);
}

// Example usage
const rect1: [number, number, number, number] = [0, 0, 5, 5];
const rect2: [number, number, number, number] = [3, 3, 8, 8];
console.log(intersectVertically(rect1, rect2)); // Output: true
```

### Explanation:
- **Function Definition**: The function `intersectVertically` takes two tuples as arguments, each representing a rectangle with the coordinates `(x1, y1, x2, y2)`.
- **Type Annotations**: In TypeScript, we use `[number, number, number, number]` to represent a tuple with four numbers.
- **Logic**: The logic remains the same as in the Python code. It checks if the vertical ranges of the rectangles overlap.
- **Example Usage**: An example usage is provided to demonstrate how to call the function with two rectangles.