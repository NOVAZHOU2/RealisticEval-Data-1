Here's how you can convert your Python unittest test case into a Jest test case in TypeScript:

```typescript
import { expect } from '@jest/globals';

function intersectVertically(rect1: [number, number, number, number], rect2: [number, number, number, number]): boolean {
    const [x1, y1, x2, y2] = rect1;
    const [x3, y3, x4, y4] = rect2;

    // Check if there is any overlap in the vertical axis
    return Math.max(y1, y3) < Math.min(y2, y4);
}

describe('intersectVertically', () => {
    it('should return true when rectangles intersect vertically', () => {
        const rect1: [number, number, number, number] = [0, 0, 5, 5];
        const rect2: [number, number, number, number] = [3, 3, 8, 8];
        
        expect(intersectVertically(rect1, rect2)).toBe(true);
    });

    it('should return false when rectangles do not intersect vertically', () => {
        const rect1: [number, number, number, number] = [0, 0, 5, 5];
        const rect2: [number, number, number, number] = [6, 6, 10, 10];
        
        expect(intersectVertically(rect1, rect2)).toBe(false);
    });
});
```

In this TypeScript code, we're using Jest's `expect` function to assert the expected outcomes of our `intersectVertically` function. We've also used the `describe` and `it` functions provided by Jest to organize our tests logically. The `@jest/globals` import statement allows us to use Jest's global functions like `expect` without needing to prefix them with `Jest.`.