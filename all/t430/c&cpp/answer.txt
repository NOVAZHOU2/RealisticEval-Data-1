Certainly! Below is the equivalent C++ code for the given Python function. This code defines a function `intersect_vertically` that determines if two rectangles intersect vertically based on their coordinates.

```cpp
#include <iostream>
#include <tuple>

// Function to determine if two rectangles intersect vertically
bool intersect_vertically(std::tuple<int, int, int, int> rect1, std::tuple<int, int, int, int> rect2) {
    // Extracting coordinates from tuples
    int x1_1, y1_1, x2_1, y2_1;
    int x1_2, y1_2, x2_2, y2_2;
    std::tie(x1_1, y1_1, x2_1, y2_1) = rect1;
    std::tie(x1_2, y1_2, x2_2, y2_2) = rect2;

    // Check if rectangles intersect vertically
    return !(y2_1 < y1_2 || y2_2 < y1_1);
}

int main() {
    // Example usage
    auto rect1 = std::make_tuple(0, 0, 5, 5);
    auto rect2 = std::make_tuple(3, 3, 8, 8);

    bool result = intersect_vertically(rect1, rect2);
    std::cout << "Do the rectangles intersect vertically? " << (result ? "Yes" : "No") << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Definition**: The function `intersect_vertically` takes two tuples as arguments, each representing a rectangle with coordinates `(x1, y1, x2, y2)`.

2. **Tuple Unpacking**: Using `std::tie`, we unpack the coordinates from the tuples into individual variables.

3. **Intersection Check**: The function checks if the rectangles intersect vertically by ensuring that the top boundary of one rectangle does not fall below the bottom boundary of the other rectangle.

4. **Example Usage**: In the `main` function, we demonstrate how to use the `intersect_vertically` function with example rectangles and print the result.

This code maintains the same functionality and logic as the original Python code but adapts it to C++ syntax and features.