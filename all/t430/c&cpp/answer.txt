Certainly! Below is the equivalent C++ code for the given Python function:

```cpp
#include <iostream>
#include <tuple>

// Function to determine if two rectangles intersect vertically
bool intersect_vertically(const std::tuple<int, int, int, int>& rect1, const std::tuple<int, int, int, int>& rect2) {
    // Extracting coordinates from tuples
    int x1_1, y1_1, x2_1, y2_1;
    int x1_2, y1_2, x2_2, y2_2;
    std::tie(x1_1, y1_1, x2_1, y2_1) = rect1;
    std::tie(x1_2, y1_2, x2_2, y2_2) = rect2;

    // Check if rectangles intersect vertically
    return !(y2_1 < y1_2 || y2_2 < y1_1);
}

int main() {
    // Example usage
    auto rect1 = std::make_tuple(0, 0, 5, 5);
    auto rect2 = std::make_tuple(2, 2, 7, 7);

    bool result = intersect_vertically(rect1, rect2);
    std::cout << "Do the rectangles intersect vertically? " << (result ? "Yes" : "No") << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Definition**: `intersect_vertically` is defined with the same purpose and logic as the Python function.
2. **Tuple Usage**: In C++, we use `std::tuple` to represent the rectangles, similar to how tuples are used in Python.
3. **Extracting Coordinates**: We use `std::tie` to extract the coordinates from the tuples.
4. **Logic**: The logic to check if rectangles intersect vertically remains the same.
5. **Example Usage**: An example usage is provided in the `main` function to demonstrate how to call the function and print the result.