To create an equivalent test class using Catch2 in C++, we need to define the function `intersect_vertically` and write tests for it. Below is the C++ code using Catch2 that replicates the functionality of the Python code:

```cpp
#include <catch2/catch.hpp>
#include <tuple>

// Function to check if two rectangles intersect vertically
bool intersect_vertically(const std::tuple<int, int, int, int>& rect1,
                          const std::tuple<int, int, int, int>& rect2) {
    int y1_rect1 = std::get<1>(rect1);
    int y2_rect1 = std::get<3>(rect1);
    int y1_rect2 = std::get<1>(rect2);
    int y2_rect2 = std::get<3>(rect2);

    // Check if there is no overlap vertically
    if (y2_rect1 < y1_rect2 || y2_rect2 < y1_rect1) {
        return false;
    }
    return true;
}

TEST_CASE("Test intersect_vertically") {
    SECTION("Rectangles do not intersect vertically") {
        auto rect1 = std::make_tuple(0, 0, 10, 5);
        auto rect2 = std::make_tuple(0, 10, 10, 15);
        REQUIRE(!intersect_vertically(rect1, rect2));
    }

    SECTION("Rectangles intersect vertically") {
        auto rect1 = std::make_tuple(0, 0, 10, 10);
        auto rect2 = std::make_tuple(0, 5, 10, 15);
        REQUIRE(intersect_vertically(rect1, rect2));
    }
}
```

### Explanation:
1. **Function Definition**: The `intersect_vertically` function checks if two rectangles intersect vertically based on their y-coordinates.
2. **Test Class**: We use Catch2's `TEST_CASE` macro to define a test case named "Test intersect_vertically".
3. **Sections**: Within the test case, we use `SECTION` macros to define different test scenarios.
4. **Assertions**: We use `REQUIRE` to assert the expected behavior of the `intersect_vertically` function.

This setup ensures that the functionality and logic of the tests are preserved while adapting to the syntax and features of C++ and Catch2.