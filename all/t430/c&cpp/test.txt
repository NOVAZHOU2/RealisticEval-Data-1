Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 using the following headers:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <tuple>

// Function to check whether two rectangles intersect in the vertical direction
bool intersect_vertically(const std::tuple<int, int, int, int>& rect1, const std::tuple<int, int, int, int>& rect2) {
    // Extracting coordinates from tuples
    int x1_1, y1_1, x2_1, y2_1;
    int x1_2, y1_2, x2_2, y2_2;
    std::tie(x1_1, y1_1, x2_1, y2_1) = rect1;
    std::tie(x1_2, y1_2, x2_2, y2_2) = rect2;

    // Check if rectangles intersect vertically
    return !(y2_1 < y1_2 || y2_2 < y1_1);
}

TEST_CASE("Test Intersect Vertically", "[intersect_vertically]") {
    SECTION("Test with overlapping rectangles") {
        auto rect1 = std::make_tuple(0, 0, 2, 2);
        auto rect2 = std::make_tuple(1, 1, 3, 3);
        REQUIRE(intersect_vertically(rect1, rect2));
    }

    SECTION("Test with overlapping rectangles") {
        auto rect1 = std::make_tuple(-1, -1, 1, 1);
        auto rect2 = std::make_tuple(0, 0, 2, 2);
        REQUIRE(intersect_vertically(rect1, rect2));
    }

    SECTION("Test case where rectangles partially overlap vertically") {
        auto rect1 = std::make_tuple(0, 1, 2, 4);
        auto rect2 = std::make_tuple(1, 0, 3, 2);
        REQUIRE(intersect_vertically(rect1, rect2));
    }

    SECTION("Test case where rectangles are identical") {
        auto rect1 = std::make_tuple(0, 0, 2, 2);
        auto rect2 = std::make_tuple(0, 0, 2, 2);
        REQUIRE(intersect_vertically(rect1, rect2));
    }

    SECTION("Test case where one rectangle is completely inside the other") {
        auto rect1 = std::make_tuple(0, 0, 4, 4);
        auto rect2 = std::make_tuple(1, 1, 2, 2);
        REQUIRE(intersect_vertically(rect1, rect2));
    }
}
```

### Explanation:
1. **Catch2 Headers**:
   - Include the necessary Catch2 headers to use the testing macros.

2. **Function Definition**:
   - Define the `intersect_vertically` function as previously shown.

3. **Test Suite**:
   - Use `TEST_CASE` to define the test suite named "Test Intersect Vertically".
   - Use `SECTION` to define individual test cases within the test suite.

4. **Assertions**:
   - Use `REQUIRE` to assert that the `intersect_vertically` function returns `true` for the given test cases.

5. **Test Cases**:
   - Each `SECTION` corresponds to a specific test case from the Python unittest class.
   - The test cases are structured to cover various scenarios, including overlapping rectangles, partial overlaps, and identical rectangles.

### Example Main File (To Run Tests)

If you need a complete example of how to run these tests, you can include a simple `main` function:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <tuple>

// Function to check whether two rectangles intersect in the vertical direction
bool intersect_vertically(const std::tuple<int, int, int, int>& rect1, const std::tuple<int, int, int, int>& rect2) {
    // Extracting coordinates from tuples
    int x1_1, y1_1, x2_1, y2_1;
    int x1_2, y1_2, x2_2, y2_2;
    std::tie(x1_1, y1_1, x2_1, y2_1) = rect1;
    std::tie(x1_2, y1_2, x2_2, y2_2) = rect2;

    // Check if rectangles intersect vertically
    return !(y2_1 < y1_2 || y2_2 < y1_1);
}

TEST_CASE("Test Intersect Vertically", "[intersect_vertically]") {
    SECTION("Test with overlapping rectangles") {
        auto rect1 = std::make_tuple(0, 0, 2, 2);
        auto rect2 = std::make_tuple(1, 1, 3, 3);
        REQUIRE(intersect_vertically(rect1, rect2));
    }

    SECTION("Test with overlapping rectangles") {
        auto rect1 = std::make_tuple(-1, -1, 1, 1);
        auto rect2 = std::make_tuple(0, 0, 2, 2);
        REQUIRE(intersect_vertically(rect1, rect2));
    }

    SECTION("Test case where rectangles partially overlap vertically") {
        auto rect1 = std::make_tuple(0, 1, 2, 4);
        auto rect2 = std::make_tuple(1, 0, 3, 2);
        REQUIRE(intersect_vertically(rect1, rect2));
    }

    SECTION("Test case where rectangles are identical") {
        auto rect1 = std::make_tuple(0, 0, 2, 2);
        auto rect2 = std::make_tuple(0, 0, 2, 2);
        REQUIRE(intersect_vertically(rect1, rect2));
    }

    SECTION("Test case where one rectangle is completely inside the other") {
        auto rect1 = std::make_tuple(0, 0, 4, 4);
        auto rect2 = std::make_tuple(1, 1, 2, 2);
        REQUIRE(intersect_vertically(rect1, rect2));
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

This setup ensures that the tests are executed when the program runs, and the results are printed out.