Here's the equivalent C++ code that implements the same functionality as the provided TypeScript code. It merges two arrays of objects, updating items in the first array based on a unique identifier.

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <functional>

template <typename O>
std::vector<O> mergeOrUpdate(
    const std::vector<O>& arr1,
    const std::vector<O>& arr2,
    const std::function<std::string(const O&)>& getId) {

    // Create a map to store unique items based on their IDs
    std::unordered_map<std::string, O> itemMap;

    // Helper function to add items to the map
    auto addItemsToMap = [&](const std::vector<O>& arr) {
        for (const auto& item : arr) {
            const std::string id = getId(item);
            itemMap[id] = item; // Set the item in the map, replacing if it already exists
        }
    };

    // Add items from both arrays to the map
    addItemsToMap(arr1);
    addItemsToMap(arr2);

    // Create a result vector and reserve space
    std::vector<O> result;
    result.reserve(itemMap.size());

    // Copy the values from the map to the result vector
    for (const auto& pair : itemMap) {
        result.push_back(pair.second);
    }

    return result;
}

// Example usage
struct MyObject {
    std::string id;
    std::string value;
};

std::string getId(const MyObject& obj) {
    return obj.id;
}

int main() {
    std::vector<MyObject> arr1 = { {"1", "A"}, {"2", "B"} };
    std::vector<MyObject> arr2 = { {"2", "C"}, {"3", "D"} };

    auto merged = mergeOrUpdate(arr1, arr2, getId);

    for (const auto& obj : merged) {
        std::cout << "ID: " << obj.id << ", Value: " << obj.value << std::endl;
    }

    return 0;
}
```

### Explanation:
- **Function Template**: The `mergeOrUpdate` function is templated to handle any object type `O`.
- **Hash Map**: It uses `std::unordered_map` for efficient key-value storage and lookup based on unique IDs.
- **Lambda Function**: The helper function to add items to the map is implemented using a lambda function.
- **Result Vector**: It constructs a result vector from the map values before returning it.
- **Example Usage**: The example demonstrates how to use the `mergeOrUpdate` function with a sample object structure.