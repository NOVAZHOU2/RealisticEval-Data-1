Here's the provided TypeScript code translated into Python, preserving the functionality and comments.
TypeScript Code
typescript
/**
 * Compresses the filename before the extension, truncating it to a maximum length,
 * and replacing the excess with '***' if it exceeds the specified maximum length.
 *
 * @param {string} filename - The full filename with or without an extension.
 * @param {number} maxLength - The maximum allowed length of the filename before the extension.
 * @returns {string} The compressed filename with its extension preserved.
 */
function compressFilename(filename: string, maxLength: number): string {
    // Extract the file extension
    const extensionMatch = filename.match(/\.[^\.]+$/);
    const extension = extensionMatch ? extensionMatch[0] : '';
    // Remove the extension from the filename for manipulation
    const basename = extension ? filename.slice(0, -extension.length) : filename;
    // Compress the basename if it's longer than maxLength
    const compressedBasename = basename.length > maxLength ?
        basename.slice(0, maxLength - 3) + '***' : basename;
    // Reattach the extension and return
    return compressedBasename + extension;
}
Converted Python Code
python
import re

def compress_filename(filename: str, max_length: int) -> str:
    """
    Compresses the filename before the extension, truncating it to a maximum length,
    and replacing the excess with '***' if it exceeds the specified maximum length.

    Args:
        filename (str): The full filename with or without an extension.
        max_length (int): The maximum allowed length of the filename before the extension.

    Returns:
        str: The compressed filename with its extension preserved.
    """
    # Extract the file extension using a regular expression
    extension_match = re.search(r'\.[^\.]+$', filename)
    extension = extension_match.group(0) if extension_match else ''
    
    # Remove the extension from the filename for manipulation
    basename = filename[:-len(extension)] if extension else filename
    
    # Compress the basename if it's longer than max_length
    compressed_basename = basename[:max_length - 3] + '***' if len(basename) > max_length else basename
    
    # Reattach the extension and return
    return compressed_basename + extension
Breakdown of the Python Code
Importing the re Module:
The re module is imported for using regular expressions in Python.
Function Definition:
The function compress_filename is defined with parameters filename and max_length.
Docstring:
A docstring is included that describes the purpose, parameters, and return value of the function.
Extracting the File Extension:
The file extension is extracted using the re.search() function with a regex pattern similar to the one in TypeScript. It checks for the last occurrence of a dot followed by characters (the extension).
Removing the Extension:
The basename is determined by slicing the filename up to the length of the extension.
Compressing the Basename:
If the length of the basename exceeds max_length, it is truncated and appended with ***. Otherwise, it remains unchanged.
Returning the Result:
The function returns the compressed basename with the extension reattached.
This Python code closely mimics the logic of the original TypeScript code while adhering to Python syntax and conventions.