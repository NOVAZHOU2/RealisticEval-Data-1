Here’s the equivalent JUnit 4 test code for the provided Jest test cases in TypeScript:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Tester {

    @Test
    public void shouldReturnFilenameUnchangedIfUnderMaxLength() {
        assertEquals("file.txt", compressFileName("file.txt", 10));
    }

    @Test
    public void shouldTruncateAndAppendIfFilenameExceedsMaxLength() {
        assertEquals("verylongfi***.txt", compressFileName("verylongfilename.txt", 10));
    }

    @Test
    public void shouldPreserveFileExtensionAfterCompression() {
        assertEquals("docum***.pdf", compressFileName("document.pdf", 5));
    }

    @Test
    public void shouldTruncateAndAppendIfFilenameExceeds() {
        assertEquals("sh***.mp3", compressFileName("short.mp3", 2));
    }

    // Assuming the compressFileName method is defined within this class or imported properly
    public static String compressFileName(String fileName, int maxLength) {
        // Method implementation goes here
        return fileName; // Placeholder return
    }
}
```

### Notes:
1. **Imports**: The necessary JUnit classes are imported for assertions.
2. **Test Annotations**: Each test case uses the `@Test` annotation to indicate that it’s a test method.
3. **Assertions**: The `assertEquals` method checks if the expected output matches the actual output from `compressFileName`.
4. **Placeholder Method**: The `compressFileName` method is included as a placeholder; you would replace the implementation with the actual logic.