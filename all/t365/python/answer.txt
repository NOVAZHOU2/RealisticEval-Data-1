Hereâ€™s the equivalent Python code for the provided C++ function day_of_week. The logic remains the same, but the syntax is adapted to Python conventions:
Converted Python Code
python
def day_of_week(year: int, month: int, day: int) -> int:
    """Calculate the day of the week for a given date.

    Args:
        year (int): The year of the date.
        month (int): The month of the date (1-12).
        day (int): The day of the month.

    Returns:
        int: The day of the week (1=Monday, 2=Tuesday, ..., 7=Sunday).
    """
    # Array representing the adjustment for the month
    t = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4]

    # Adjust the year for January and February
    if month < 3:
        year -= 1

    # Calculate the day of the week
    result = (year + year // 4 - year // 100 + year // 400 + t[month - 1] + day) % 7

    # Adjust result to correctly map Sunday as 7
    return 7 if result == 0 else result

# Example usage:
# print(day_of_week(2023, 10, 12))  # Output for October 12, 2023
Key Changes and Explanations:
Function Definition:
The function is defined using the def keyword, followed by the function name and parameters.
Type Hints:
Type hints are included in the function signature to specify the expected types of parameters and the return type.
List Initialization:
The static array t from C++ is converted to a regular list in Python.
Integer Division:
Python uses // for integer division, which is equivalent to C++'s integer division.
Conditional Expression:
The conditional expression (result == 0) ? 7 : (result % 7) in C++ is rewritten in Python as return 7 if result == 0 else result.
Docstring:
A docstring is added to provide a description of the function, its parameters, and its return value.
Example Usage:
An example usage is provided in the comments at the bottom, demonstrating how to call the function. You can uncomment it to test the function with specific values.