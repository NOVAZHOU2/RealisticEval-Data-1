Here's the Python equivalent of your Java code. In Python, we can use lists and list comprehensions along with built-in functions to perform the same task:
python
from typing import List

class Answer:
    @staticmethod
    def calculate_average_difference(numbers: List[int]) -> float:
        # Check if the list is valid (at least 2 numbers)
        if not numbers or len(numbers) < 2:
            return 0.0  # Not enough data to calculate differences

        # Calculate differences from the previous data
        differences = [numbers[i] - numbers[i - 1] for i in range(1, len(numbers))]

        # Calculate the average of the differences
        return sum(differences) / len(differences)

# Example usage
if __name__ == "__main__":
    sample_numbers = [10, 20, 15, 30, 25]
    average_difference = Answer.calculate_average_difference(sample_numbers)
    print(f"Average Difference: {average_difference}")
Key Changes:
List Initialization: Instead of ArrayList, we use Python's native list and List from typing.
Function Signatures: Python doesn't need the public static keywords. We define a static method using @staticmethod.
List Comprehension: Python has a more concise way to create lists. The difference calculation is done using a list comprehension.
Type Annotations: The List[int] annotation is used to specify that the input is a list of integers, and the return type is float.
Printing: Python uses f-strings (f"...") for easy string interpolation.
This Python code does exactly the same thing as the provided Java code.