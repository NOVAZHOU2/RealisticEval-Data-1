Here's the equivalent TypeScript code that maintains the functionality, structure, and logic of the provided Python code:

```typescript
function calculateAverageDifference(numbers: number[]): number {
    // Check if the list is valid (at least 2 numbers)
    if (!numbers || numbers.length < 2) {
        return 0.0; // Not enough data to calculate differences
    }

    // Calculate differences from the previous data
    const differences: number[] = [];
    for (let i = 1; i < numbers.length; i++) {
        differences.push(numbers[i] - numbers[i - 1]);
    }

    // Calculate the average of the differences
    const sum = differences.reduce((acc, diff) => acc + diff, 0);
    return sum / differences.length;
}
```

### Key Changes and Adaptations:

1. **Type Definitions**: The function parameter `numbers` is typed as `number[]` to indicate it is an array of numbers. The return type is specified as `number`.

2. **Array Methods**: In TypeScript, instead of list comprehensions, I've used a `for` loop to create the `differences` array.

3. **Sum Calculation**: The sum of differences is calculated using `reduce`, which is idiomatic in JavaScript/TypeScript for summing elements in an array.

4. **Comments**: Comments have been retained to maintain clarity and understanding of the code's intent. 

This code will function similarly to the original Python implementation, handling input validation and calculation of average differences correctly.