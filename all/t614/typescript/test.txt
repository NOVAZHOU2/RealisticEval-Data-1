Hereâ€™s the equivalent Jest test class in TypeScript, converting the provided Python `unittest` tests while preserving functionality and logic:

```typescript
import { calculateAverageDifference } from './path-to-your-function'; // Adjust the import as needed

describe('calculateAverageDifference', () => {
    test('calculates average difference for positive integers', () => {
        const numbers: number[] = [10, 20, 30, 40];
        const result = calculateAverageDifference(numbers);
        const expected = 10.0;
        expect(result).toBeCloseTo(expected, 5); // Precision for floating point comparison
    });

    test('calculates average difference for mixed positive and negative integers', () => {
        const numbers: number[] = [-10, 0, 10, 20];
        const result = calculateAverageDifference(numbers);
        const expected = 10.0;
        expect(result).toBeCloseTo(expected, 5);
    });

    test('calculates average difference for same values', () => {
        const numbers: number[] = [5, 5, 5, 5];
        const result = calculateAverageDifference(numbers);
        const expected = 0.0;
        expect(result).toBeCloseTo(expected, 5);
    });

    test('returns 0.0 for single element list', () => {
        const numbers: number[] = [100];
        const result = calculateAverageDifference(numbers);
        const expected = 0.0; // Not enough data to calculate differences
        expect(result).toBeCloseTo(expected, 5);
    });

    test('returns 0.0 for empty list', () => {
        const numbers: number[] = [];
        const result = calculateAverageDifference(numbers);
        const expected = 0.0; // Not enough data to calculate differences
        expect(result).toBeCloseTo(expected, 5);
    });
});
```

### Key Changes and Adaptations:

1. **Test Framework**: The Python `unittest` framework is replaced by Jest's `describe` and `test` functions.

2. **Assertion Method**: Python's `self.assertAlmostEqual` is replaced with Jest's `toBeCloseTo` for comparing floating point numbers. The second argument specifies the precision for comparison.

3. **Type Annotations**: The parameter `numbers` is typed as `number[]` to indicate it is an array of numbers, consistent with TypeScript's static typing.

4. **Import Statement**: A placeholder import statement for the `calculateAverageDifference` function is included, which you should adjust based on your project structure.

5. **Descriptive Test Names**: The descriptions for each test have been kept similar to the original Python test names to maintain clarity about what each test is verifying.

This TypeScript code maintains the structure and logic of the original Python tests while adapting to TypeScript and Jest conventions.