Hereâ€™s the equivalent test class using Catch2 in C++ for the provided Python unittest code:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>

// Assuming the calculate_average_difference function is defined somewhere above or included
double calculate_average_difference(const std::vector<int>& numbers);

TEST_CASE("TestCalculateAverageDifference") {
    
    SECTION("Positive integers") {
        std::vector<int> numbers = {10, 20, 30, 40};
        double result = calculate_average_difference(numbers);
        double expected = 10.0;
        REQUIRE(result == Approx(expected).epsilon(0.001)); // Using Approx for floating-point comparison
    }

    SECTION("Mixed positive and negative integers") {
        std::vector<int> numbers = {-10, 0, 10, 20};
        double result = calculate_average_difference(numbers);
        double expected = 10.0;
        REQUIRE(result == Approx(expected).epsilon(0.001));
    }

    SECTION("Same values") {
        std::vector<int> numbers = {5, 5, 5, 5};
        double result = calculate_average_difference(numbers);
        double expected = 0.0;
        REQUIRE(result == Approx(expected).epsilon(0.001));
    }

    SECTION("Single element") {
        std::vector<int> numbers = {100};
        double result = calculate_average_difference(numbers);
        double expected = 0.0; // Not enough data to calculate differences
        REQUIRE(result == Approx(expected).epsilon(0.001));
    }

    SECTION("Empty list") {
        std::vector<int> numbers = {};
        double result = calculate_average_difference(numbers);
        double expected = 0.0; // Not enough data to calculate differences
        REQUIRE(result == Approx(expected).epsilon(0.001));
    }
}
```

### Key Points in the Translation:

1. **Catch2 Setup**: The line `#define CATCH_CONFIG_MAIN` is necessary to create a main function for Catch2.
2. **Test Structure**: Used `TEST_CASE` and `SECTION` to structure the tests, akin to Python's `unittest` methods.
3. **Vector Usage**: Used `std::vector<int>` for lists of integers.
4. **Assertions**: Used `REQUIRE` with `Approx` for floating-point comparisons, allowing for a small epsilon to handle precision issues.
5. **Comments**: Kept the logic and functionality consistent with the original tests while adapting to C++ syntax and conventions.

This C++ Catch2 test class will test the same functionality as the original Python unittest class.