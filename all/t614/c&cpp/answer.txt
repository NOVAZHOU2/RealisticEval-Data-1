Here's the equivalent C++ code for the provided Python function, maintaining the same functionality, logic, and structure:

```cpp
#include <iostream>
#include <vector>

double calculate_average_difference(const std::vector<int>& numbers) {
    // Check if the list is valid (at least 2 numbers)
    if (numbers.size() < 2) {
        return 0.0;  // Not enough data to calculate differences
    }

    // Calculate differences from the previous data
    std::vector<double> differences;
    for (size_t i = 1; i < numbers.size(); ++i) {
        differences.push_back(static_cast<double>(numbers[i]) - static_cast<double>(numbers[i - 1]));
    }

    // Calculate the average of the differences
    double sum = 0.0;
    for (const auto& diff : differences) {
        sum += diff;
    }

    return sum / differences.size();
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 5, 8};
    std::cout << "Average difference: " << calculate_average_difference(numbers) << std::endl;
    return 0;
}
```

### Key Points in the Translation:

1. **Header Files**: Included necessary headers like `<iostream>` for input/output and `<vector>` for using the vector container.
2. **Function Definition**: The function `calculate_average_difference` takes a constant reference to a vector of integers.
3. **Vector Usage**: Used `std::vector` for dynamic arrays, similar to Python's list.
4. **Looping**: Replaced list comprehension with a for loop to populate the differences vector.
5. **Type Casting**: Used `static_cast<double>` to ensure the calculation is done in floating-point arithmetic.
6. **Main Function**: Added a `main` function for testing, similar to how you might execute the function in Python.

This C++ code behaves in a manner consistent with the original Python implementation.