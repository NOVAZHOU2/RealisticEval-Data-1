Here's how you can convert the provided Python `unittest` test class into an equivalent test class using the `jest` testing framework in JavaScript. The structure and logic of the tests are maintained, and necessary changes due to language differences are documented.

### Converted Code:

```javascript
const { calculateAverageDifference } = require('./yourModule'); // Adjust the import based on your file structure

describe('calculateAverageDifference', () => {
    test('calculates average difference for positive integers', () => {
        const numbers = [10, 20, 30, 40];
        const result = calculateAverageDifference(numbers);
        const expected = 10.0;
        expect(result).toBeCloseTo(expected, 5); // Jest equivalent for almost equal assertion
    });

    test('calculates average difference for mixed positive and negative integers', () => {
        const numbers = [-10, 0, 10, 20];
        const result = calculateAverageDifference(numbers);
        const expected = 10.0;
        expect(result).toBeCloseTo(expected, 5); // Jest equivalent for almost equal assertion
    });

    test('calculates average difference for same values', () => {
        const numbers = [5, 5, 5, 5];
        const result = calculateAverageDifference(numbers);
        const expected = 0.0;
        expect(result).toBeCloseTo(expected, 5); // Jest equivalent for almost equal assertion
    });

    test('returns 0 for single element list', () => {
        const numbers = [100];
        const result = calculateAverageDifference(numbers);
        const expected = 0.0; // Not enough data to calculate differences
        expect(result).toBeCloseTo(expected, 5); // Jest equivalent for almost equal assertion
    });

    test('returns 0 for empty list', () => {
        const numbers = [];
        const result = calculateAverageDifference(numbers);
        const expected = 0.0; // Not enough data to calculate differences
        expect(result).toBeCloseTo(expected, 5); // Jest equivalent for almost equal assertion
    });
});
```

### Key Changes and Documentation:

1. **Test Framework**: The test framework changes from `unittest` in Python to `jest` in JavaScript.

2. **Test Structure**:
   - The `unittest.TestCase` class is replaced by `describe` and `test` blocks in Jest.
   - Each test case is defined using `test` instead of methods prefixed with `test_`.

3. **Assertions**:
   - `self.assertAlmostEqual(expected, result)` is replaced with `expect(result).toBeCloseTo(expected, 5)`, which checks if two numbers are close to each other within a specified precision (5 decimal places).

4. **Message**: In Jest, you can add a description of the test case, but specific failure messages for assertions are not typically included in Jest assertions, as they provide clear context through the test name.

5. **Imports**: Ensure to import the function you are testing from the appropriate module. Adjust the import statement based on your file structure.

Feel free to reach out if you have any questions or need further modifications!