Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It will include appropriate JUnit annotations and assertions to ensure the functionality and logic of the tests are preserved.

### Java Test Class Using JUnit

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

/**
 * Test class for BinaryTree operations.
 */
public class Tester {

    @Test
    public void testEmptyTree() {
        BinaryTree bt = new BinaryTree();
        assertArrayEquals(new int[]{}, bt.inorderTraversal());
        assertArrayEquals(new int[]{}, bt.preorderTraversal());
        assertArrayEquals(new int[]{}, bt.postorderTraversal());
    }

    @Test
    public void testSingleNodeTree() {
        BinaryTree bt = new BinaryTree();
        bt.insert(10);
        assertArrayEquals(new int[]{10}, bt.inorderTraversal());
        assertArrayEquals(new int[]{10}, bt.preorderTraversal());
        assertArrayEquals(new int[]{10}, bt.postorderTraversal());
    }

    @Test
    public void testBalancedTree() {
        BinaryTree bt = new BinaryTree();
        int[] elements = {8, 3, 10, 1, 6, 9, 14};
        for (int elem : elements) {
            bt.insert(elem);
        }
        assertArrayEquals(new int[]{1, 3, 6, 8, 9, 10, 14}, bt.inorderTraversal());
        assertArrayEquals(new int[]{8, 3, 1, 6, 10, 9, 14}, bt.preorderTraversal());
        assertArrayEquals(new int[]{1, 6, 3, 9, 14, 10, 8}, bt.postorderTraversal());
    }

    @Test
    public void testLeftHeavyTree() {
        BinaryTree bt = new BinaryTree();
        for (int i = 10; i > 0; i--) {
            bt.insert(i);
        }
        assertArrayEquals(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, bt.inorderTraversal());
        assertArrayEquals(new int[]{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}, bt.preorderTraversal());
        assertArrayEquals(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, bt.postorderTraversal());
    }

    @Test
    public void testRightHeavyTree() {
        BinaryTree bt = new BinaryTree();
        for (int i = 1; i <= 10; i++) {
            bt.insert(i);
        }
        assertArrayEquals(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, bt.inorderTraversal());
        assertArrayEquals(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, bt.preorderTraversal());
        assertArrayEquals(new int[]{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}, bt.postorderTraversal());
    }
}
```

### Explanation:

1. **Package and Class Definition**:
   - The test class is placed in the package `org.real.temp`.
   - The class is named `Tester`.

2. **JUnit Annotations**:
   - Each test method is annotated with `@Test` to indicate it is a test case.

3. **Assertions**:
   - `assertArrayEquals` is used to compare integer arrays for equality.

4. **Test Methods**:
   - `testEmptyTree`: Tests an empty tree.
   - `testSingleNodeTree`: Tests a tree with a single node.
   - `testBalancedTree`: Tests a balanced tree with multiple nodes.
   - `testLeftHeavyTree`: Tests a left-heavy tree.
   - `testRightHeavyTree`: Tests a right-heavy tree.

5. **Data Initialization**:
   - Arrays are used to initialize the expected results for each test case.

### Example Usage:

To run these tests, you would typically use a build tool like Maven or Gradle with the JUnit plugin configured. Hereâ€™s an example of how you might set up a simple Maven project:

#### `pom.xml` (Maven Configuration)

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.real.temp</groupId>
    <artifactId>binary-tree-tests</artifactId>
    <version>1.0-SNAPSHOT</version>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
            </plugin>
        </plugins>
    </build>
</project>
```

### Running the Tests

To run the tests, execute the following command in your terminal:

```sh
mvn test
```

This will compile and run all the JUnit tests in the `Tester` class, ensuring that the functionality and logic of the tests are preserved.