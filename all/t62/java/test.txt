Sure, here's how you can convert the provided Python unittest test class into a Java TestCase using JUnit. The package is `org.real.temp`, and the class name is `Tester`.

First, let's define the necessary classes in Java:

```java
// TreeNode.java
public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int key) {
        this.val = key;
        this.left = null;
        this.right = null;
    }
}

// BinaryTree.java
import java.util.ArrayList;
import java.util.List;

public class BinaryTree {
    private TreeNode root;

    public BinaryTree() {
        this.root = null;
    }

    public void insert(int key) {
        if (this.root == null) {
            this.root = new TreeNode(key);
        } else {
            this._insert(this.root, key);
        }
    }

    private void _insert(TreeNode node, int key) {
        if (key < node.val) {
            if (node.left == null) {
                node.left = new TreeNode(key);
            } else {
                this._insert(node.left, key);
            }
        } else {
            if (node.right == null) {
                node.right = new TreeNode(key);
            } else {
                this._insert(node.right, key);
            }
        }
    }

    public List<Integer> inorderTraversal() {
        List<Integer> result = new ArrayList<>();
        this._inorderTraversal(this.root, result);
        return result;
    }

    private void _inorderTraversal(TreeNode node, List<Integer> result) {
        if (node != null) {
            this._inorderTraversal(node.left, result);
            result.add(node.val);
            this._inorderTraversal(node.right, result);
        }
    }

    public List<Integer> preorderTraversal() {
        List<Integer> result = new ArrayList<>();
        this._preorderTraversal(this.root, result);
        return result;
    }

    private void _preorderTraversal(TreeNode node, List<Integer> result) {
        if (node != null) {
            result.add(node.val);
            this._preorderTraversal(node.left, result);
            this._preorderTraversal(node.right, result);
        }
    }

    public List<Integer> postorderTraversal() {
        List<Integer> result = new ArrayList<>();
        this._postorderTraversal(this.root, result);
        return result;
    }

    private void _postorderTraversal(TreeNode node, List<Integer> result) {
        if (node != null) {
            this._postorderTraversal(node.left, result);
            this._postorderTraversal(node.right, result);
            result.add(node.val);
        }
    }
}
```

Now, let's create the Java Test Case using JUnit:

```java
// Tester.java
package org.real.temp;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

public class Tester {

    private BinaryTree binaryTree;

    @Before
    public void setUp() {
        binaryTree = new BinaryTree();
    }

    @Test
    public void testInsert() {
        binaryTree.insert(10);
        binaryTree.insert(5);
        binaryTree.insert(15);

        assertEquals(Integer.valueOf(10), binaryTree.root.val);
        assertEquals(Integer.valueOf(5), binaryTree.root.left.val);
        assertEquals(Integer.valueOf(15), binaryTree.root.right.val);
    }

    @Test
    public void testInorderTraversal() {
        binaryTree.insert(10);
        binaryTree.insert(5);
        binaryTree.insert(15);
        binaryTree.insert(3);
        binaryTree.insert(7);
        binaryTree.insert(12);
        binaryTree.insert(18);

        List<Integer> expected = Arrays.asList(3, 5, 7, 10, 12, 15, 18);
        List<Integer> actual = binaryTree.inorderTraversal();

        assertEquals(expected, actual);
    }

    @Test
    public void testPreorderTraversal() {
        binaryTree.insert(10);
        binaryTree.insert(5);
        binaryTree.insert(15);
        binaryTree.insert(3);
        binaryTree.insert(7);
        binaryTree.insert(12);
        binaryTree.insert(18);

        List<Integer> expected = Arrays.asList(10, 5, 3, 7, 15, 12, 18);
        List<Integer> actual = binaryTree.preorderTraversal();

        assertEquals(expected, actual);
    }

    @Test
    public void testPostorderTraversal() {
        binaryTree.insert(10);
        binaryTree.insert(5);
        binaryTree.insert(15);
        binaryTree.insert(3);
        binaryTree.insert(7);
        binaryTree.insert(12);
        binaryTree.insert(18);

        List<Integer> expected = Arrays.asList(3, 7, 5, 12, 18, 15, 10);
        List<Integer> actual = binaryTree.postorderTraversal();

        assertEquals(expected, actual);
    }
}
```

This Java Test Case uses JUnit to verify the functionality of the `BinaryTree` class. Make sure you have JUnit added to your project dependencies. If you're using Maven, add the following dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.13.2</version>
    <scope>test</scope>
</dependency>
```

If you're using Gradle, add the following to your `build.gradle`:

```groovy
dependencies {
    testImplementation 'junit:junit:4.13.2'
}
```

This should give you a good starting point for testing your `BinaryTree` class in Java.