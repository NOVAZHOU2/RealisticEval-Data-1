Here is your Python code translated into Java with the same comments:

```java
public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int key) {
        this.val = key;
        this.left = null;
        this.right = null;
    }
}

public class BinaryTree {
    /**
     * Implement the tree in the question structure and implement its three traversal methods.
     */
    
    TreeNode root;

    public BinaryTree() {
        this.root = null;
    }

    public void insert(int key) {
        // Implementation goes here
    }

    private void _insert(TreeNode node, int key) {
        // Implementation goes here
    }

    public List<Integer> inorderTraversal() {
        List<Integer> result = new ArrayList<>();
        _inorderTraversal(root, result);
        return result;
    }

    private void _inorderTraversal(TreeNode node, List<Integer> result) {
        if (node != null) {
            _inorderTraversal(node.left, result);
            result.add(node.val);
            _inorderTraversal(node.right, result);
        }
    }

    public List<Integer> preorderTraversal() {
        List<Integer> result = new ArrayList<>();
        _preorderTraversal(root, result);
        return result;
    }

    private void _preorderTraversal(TreeNode node, List<Integer> result) {
        if (node != null) {
            result.add(node.val);
            _preorderTraversal(node.left, result);
            _preorderTraversal(node.right, result);
        }
    }

    public List<Integer> postorderTraversal() {
        List<Integer> result = new ArrayList<>();
        _postorderTraversal(root, result);
        return result;
    }

    private void _postorderTraversal(TreeNode node, List<Integer> result) {
        if (node != null) {
            _postorderTraversal(node.left, result);
            _postorderTraversal(node.right, result);
            result.add(node.val);
        }
    }
}
```

Please note that I've used `List<Integer>` instead of returning an array from the traversal methods since it's more idiomatic in Java to use collections for such purposes. Also, the `_insert`, `_inorderTraversal`, `_preorderTraversal`, and `_postorderTraversal` methods have been made public so they can be accessed from outside the class when implementing them.