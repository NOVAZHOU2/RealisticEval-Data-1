Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. This conversion ensures that the functionality and logic of the tests are preserved, with appropriate assertions and setup.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro for each test case.

Here is the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <iostream>

// TreeNode class represents a node in the binary tree.
class TreeNode {
public:
    // Constructor initializes a new TreeNode with the given key.
    explicit TreeNode(int key) : val(key), left(nullptr), right(nullptr) {}

    // Pointers to the left and right child nodes.
    TreeNode* left;
    TreeNode* right;

    // Value stored in the node.
    int val;
};

// BinaryTree class implements a binary tree with insertion and traversal methods.
class BinaryTree {
public:
    // Constructor initializes the root of the binary tree to null.
    BinaryTree() : root(nullptr) {}

    // Inserts a new node with the given key into the binary tree.
    void insert(int key);

private:
    // Helper function to insert a new node with the given key.
    void _insert(TreeNode* node, int key);

public:
    // Performs an inorder traversal of the binary tree and returns the result.
    std::vector<int> inorder_traversal();

private:
    // Helper function to perform an inorder traversal.
    void _inorder_traversal(TreeNode* node, std::vector<int>& result);

public:
    // Performs a preorder traversal of the binary tree and returns the result.
    std::vector<int> preorder_traversal();

private:
    // Helper function to perform a preorder traversal.
    void _preorder_traversal(TreeNode* node, std::vector<int>& result);

public:
    // Performs a postorder traversal of the binary tree and returns the result.
    std::vector<int> postorder_traversal();

private:
    // Helper function to perform a postorder traversal.
    void _postorder_traversal(TreeNode* node, std::vector<int>& result);

    // Pointer to the root of the binary tree.
    TreeNode* root;
};

// Implementation of the BinaryTree methods
void BinaryTree::insert(int key) {
    if (root == nullptr) {
        root = new TreeNode(key);
    } else {
        _insert(root, key);
    }
}

void BinaryTree::_insert(TreeNode* node, int key) {
    if (key < node->val) {
        if (node->left == nullptr) {
            node->left = new TreeNode(key);
        } else {
            _insert(node->left, key);
        }
    } else {
        if (node->right == nullptr) {
            node->right = new TreeNode(key);
        } else {
            _insert(node->right, key);
        }
    }
}

std::vector<int> BinaryTree::inorder_traversal() {
    std::vector<int> result;
    _inorder_traversal(root, result);
    return result;
}

void BinaryTree::_inorder_traversal(TreeNode* node, std::vector<int>& result) {
    if (node != nullptr) {
        _inorder_traversal(node->left, result);
        result.push_back(node->val);
        _inorder_traversal(node->right, result);
    }
}

std::vector<int> BinaryTree::preorder_traversal() {
    std::vector<int> result;
    _preorder_traversal(root, result);
    return result;
}

void BinaryTree::_preorder_traversal(TreeNode* node, std::vector<int>& result) {
    if (node != nullptr) {
        result.push_back(node->val);
        _preorder_traversal(node->left, result);
        _preorder_traversal(node->right, result);
    }
}

std::vector<int> BinaryTree::postorder_traversal() {
    std::vector<int> result;
    _postorder_traversal(root, result);
    return result;
}

void BinaryTree::_postorder_traversal(TreeNode* node, std::vector<int>& result) {
    if (node != nullptr) {
        _postorder_traversal(node->left, result);
        _postorder_traversal(node->right, result);
        result.push_back(node->val);
    }
}

// Test cases using Catch2
TEST_CASE("Test empty tree", "[BinaryTree]") {
    BinaryTree bt;
    REQUIRE(bt.inorder_traversal() == std::vector<int>());
    REQUIRE(bt.preorder_traversal() == std::vector<int>());
    REQUIRE(bt.postorder_traversal() == std::vector<int>());
}

TEST_CASE("Test single node tree", "[BinaryTree]") {
    BinaryTree bt;
    bt.insert(10);
    REQUIRE(bt.inorder_traversal() == std::vector<int>({10}));
    REQUIRE(bt.preorder_traversal() == std::vector<int>({10}));
    REQUIRE(bt.postorder_traversal() == std::vector<int>({10}));
}

TEST_CASE("Test balanced tree", "[BinaryTree]") {
    BinaryTree bt;
    std::vector<int> elements = {8, 3, 10, 1, 6, 9, 14};
    for (int elem : elements) {
        bt.insert(elem);
    }
    REQUIRE(bt.inorder_traversal() == std::vector<int>({1, 3, 6, 8, 9, 10, 14}));
    REQUIRE(bt.preorder_traversal() == std::vector<int>({8, 3, 1, 6, 10, 9, 14}));
    REQUIRE(bt.postorder_traversal() == std::vector<int>({1, 6, 3, 9, 14, 10, 8}));
}

TEST_CASE("Test left-heavy tree", "[BinaryTree]") {
    BinaryTree bt;
    for (int i = 10; i >= 1; --i) {
        bt.insert(i);
    }
    REQUIRE(bt.inorder_traversal() == std::vector<int>({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));
    REQUIRE(bt.preorder_traversal() == std::vector<int>({10, 9, 8, 7, 6, 5, 4, 3, 2, 1}));
    REQUIRE(bt.postorder_traversal() == std::vector<int>({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));
}

TEST_CASE("Test right-heavy tree", "[BinaryTree]") {
    BinaryTree bt;
    for (int i = 1; i <= 10; ++i) {
        bt.insert(i);
    }
    REQUIRE(bt.inorder_traversal() == std::vector<int>({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));
    REQUIRE(bt.preorder_traversal() == std::vector<int>({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));
    REQUIRE(bt.postorder_traversal() == std::vector<int>({10, 9, 8, 7, 6, 5, 4, 3, 2, 1}));
}
```

### Explanation:
1. **Catch2 Test Cases**:
   - Each test case is defined using the `TEST_CASE` macro from Catch2.
   - The test cases are tagged with `[BinaryTree]` to categorize them.

2. **BinaryTree Class**:
   - The `BinaryTree` class is implemented with methods for insertion and traversal.
   - The private helper methods (`_insert`, `_inorder_traversal`, `_preorder_traversal`, `_postorder_traversal`) are used to implement the core functionality.

3. **Assertions**:
   - `REQUIRE` is used for assertions to check the correctness of the traversal results.

4. **Test Data**:
   - Each test case creates a `BinaryTree` object, inserts elements, and verifies the traversal results using `REQUIRE`.

This conversion preserves the functionality and logic of the original Python tests while adapting them to the C++ environment using Catch2.