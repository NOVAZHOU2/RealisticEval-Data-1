```cpp
#include <iostream>
#include <vector>

class TreeNode {
public:
    TreeNode(int key) : val(key), left(nullptr), right(nullptr) {}

    TreeNode* left;
    TreeNode* right;
    int val;
};

class BinaryTree {
public:
    BinaryTree() : root(nullptr) {}

    void insert(int key) {
        if (root == nullptr) {
            root = new TreeNode(key);
        } else {
            _insert(root, key);
        }
    }

private:
    TreeNode* root;

    void _insert(TreeNode* node, int key) {
        if (key < node->val) {
            if (node->left == nullptr) {
                node->left = new TreeNode(key);
            } else {
                _insert(node->left, key);
            }
        } else {
            if (node->right == nullptr) {
                node->right = new TreeNode(key);
            } else {
                _insert(node->right, key);
            }
        }
    }

public:
    std::vector<int> inorder_traversal() {
        std::vector<int> result;
        _inorder_traversal(root, result);
        return result;
    }

    std::vector<int> preorder_traversal() {
        std::vector<int> result;
        _preorder_traversal(root, result);
        return result;
    }

    std::vector<int> postorder_traversal() {
        std::vector<int> result;
        _postorder_traversal(root, result);
        return result;
    }

private:
    void _inorder_traversal(TreeNode* node, std::vector<int>& result) {
        if (node != nullptr) {
            _inorder_traversal(node->left, result);
            result.push_back(node->val);
            _inorder_traversal(node->right, result);
        }
    }

    void _preorder_traversal(TreeNode* node, std::vector<int>& result) {
        if (node != nullptr) {
            result.push_back(node->val);
            _preorder_traversal(node->left, result);
            _preorder_traversal(node->right, result);
        }
    }

    void _postorder_traversal(TreeNode* node, std::vector<int>& result) {
        if (node != nullptr) {
            _postorder_traversal(node->left, result);
            _postorder_traversal(node->right, result);
            result.push_back(node->val);
        }
    }
};

// Example usage
int main() {
    BinaryTree tree;
    tree.insert(5);
    tree.insert(3);
    tree.insert(7);
    tree.insert(2);
    tree.insert(4);

    std::vector<int> inorder = tree.inorder_traversal();
    std::vector<int> preorder = tree.preorder_traversal();
    std::vector<int> postorder = tree.postorder_traversal();

    std::cout << "Inorder Traversal: ";
    for (int val : inorder) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    std::cout << "Preorder Traversal: ";
    for (int val : preorder) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    std::cout << "Postorder Traversal: ";
    for (int val : postorder) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

This C++ code defines a `TreeNode` class and a `BinaryTree` class with methods for inserting nodes and performing inorder, preorder, and postorder traversals. The traversal methods return vectors containing the values of the nodes in the specified order.