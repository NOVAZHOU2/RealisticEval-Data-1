Certainly! Below is the equivalent C++ code for the given Python class definitions, including comments and documentation standards:

```cpp
#include <iostream>
#include <vector>

// TreeNode class represents a node in the binary tree.
class TreeNode {
public:
    // Constructor initializes a new TreeNode with the given key.
    TreeNode(int key) : val(key), left(nullptr), right(nullptr) {}

    // Pointers to the left and right child nodes.
    TreeNode* left;
    TreeNode* right;

    // Value stored in the node.
    int val;
};

// BinaryTree class implements a binary tree with insertion and traversal methods.
class BinaryTree {
public:
    // Constructor initializes the root of the binary tree to null.
    BinaryTree() : root(nullptr) {}

    // Inserts a new node with the given key into the binary tree.
    void insert(int key);

private:
    // Helper function to insert a new node with the given key.
    void _insert(TreeNode* node, int key);

public:
    // Performs an inorder traversal of the binary tree and returns the result.
    std::vector<int> inorder_traversal();

private:
    // Helper function to perform an inorder traversal.
    void _inorder_traversal(TreeNode* node, std::vector<int>& result);

public:
    // Performs a preorder traversal of the binary tree and returns the result.
    std::vector<int> preorder_traversal();

private:
    // Helper function to perform a preorder traversal.
    void _preorder_traversal(TreeNode* node, std::vector<int>& result);

public:
    // Performs a postorder traversal of the binary tree and returns the result.
    std::vector<int> postorder_traversal();

private:
    // Helper function to perform a postorder traversal.
    void _postorder_traversal(TreeNode* node, std::vector<int>& result);

    // Pointer to the root of the binary tree.
    TreeNode* root;
};

// Implementation of the BinaryTree methods
void BinaryTree::insert(int key) {
    if (root == nullptr) {
        root = new TreeNode(key);
    } else {
        _insert(root, key);
    }
}

void BinaryTree::_insert(TreeNode* node, int key) {
    if (key < node->val) {
        if (node->left == nullptr) {
            node->left = new TreeNode(key);
        } else {
            _insert(node->left, key);
        }
    } else {
        if (node->right == nullptr) {
            node->right = new TreeNode(key);
        } else {
            _insert(node->right, key);
        }
    }
}

std::vector<int> BinaryTree::inorder_traversal() {
    std::vector<int> result;
    _inorder_traversal(root, result);
    return result;
}

void BinaryTree::_inorder_traversal(TreeNode* node, std::vector<int>& result) {
    if (node != nullptr) {
        _inorder_traversal(node->left, result);
        result.push_back(node->val);
        _inorder_traversal(node->right, result);
    }
}

std::vector<int> BinaryTree::preorder_traversal() {
    std::vector<int> result;
    _preorder_traversal(root, result);
    return result;
}

void BinaryTree::_preorder_traversal(TreeNode* node, std::vector<int>& result) {
    if (node != nullptr) {
        result.push_back(node->val);
        _preorder_traversal(node->left, result);
        _preorder_traversal(node->right, result);
    }
}

std::vector<int> BinaryTree::postorder_traversal() {
    std::vector<int> result;
    _postorder_traversal(root, result);
    return result;
}

void BinaryTree::_postorder_traversal(TreeNode* node, std::vector<int>& result) {
    if (node != nullptr) {
        _postorder_traversal(node->left, result);
        _postorder_traversal(node->right, result);
        result.push_back(node->val);
    }
}

// Example usage
int main() {
    BinaryTree tree;
    tree.insert(5);
    tree.insert(3);
    tree.insert(7);
    tree.insert(2);
    tree.insert(4);

    std::vector<int> inorder = tree.inorder_traversal();
    std::vector<int> preorder = tree.preorder_traversal();
    std::vector<int> postorder = tree.postorder_traversal();

    std::cout << "Inorder Traversal: ";
    for (int val : inorder) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    std::cout << "Preorder Traversal: ";
    for (int val : preorder) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    std::cout << "Postorder Traversal: ";
    for (int val : postorder) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **TreeNode Class**:
   - The `TreeNode` class has a constructor that initializes the node's value and sets its left and right pointers to `nullptr`.
   - It includes member variables `left`, `right`, and `val`.

2. **BinaryTree Class**:
   - The `BinaryTree` class has a constructor that initializes the root to `nullptr`.
   - It includes public methods for insertion (`insert`) and traversal (`inorder_traversal`, `preorder_traversal`, `postorder_traversal`).
   - Private helper methods (`_insert`, `_inorder_traversal`, `_preorder_traversal`, `_postorder_traversal`) are used to implement the core functionality.

3. **Comments and Documentation**:
   - Single-line comments use `//`.
   - Multi-line comments use `/* ... */`.

4. **Example Usage**:
   - The `main` function demonstrates how to create a `BinaryTree`, insert nodes, and perform traversals.