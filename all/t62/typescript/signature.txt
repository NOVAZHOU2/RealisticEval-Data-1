Sure, here is the TypeScript version of your Python code with the same structure and comments:

```typescript
interface TreeNode {
    left: TreeNode | null;
    right: TreeNode | null;
    val: number;
}

class BinaryTree {
    /**
     * Implement the tree in the question structure and implement its three traversal methods
     */
    private root: TreeNode | null;

    constructor() {
        this.root = null;
    }

    /**
     * Insert a new key into the binary tree
     * @param key - The value to be inserted
     */
    public insert(key: number): void {
        if (this.root === null) {
            this.root = { left: null, right: null, val: key };
        } else {
            this._insert(this.root, key);
        }
    }

    /**
     * Helper method to insert a new key into the binary tree
     * @param node - The current node being checked
     * @param key - The value to be inserted
     */
    private _insert(node: TreeNode, key: number): void {
        if (key < node.val) {
            if (node.left === null) {
                node.left = { left: null, right: null, val: key };
            } else {
                this._insert(node.left, key);
            }
        } else if (key > node.val) {
            if (node.right === null) {
                node.right = { left: null, right: null, val: key };
            } else {
                this._insert(node.right, key);
            }
        }
    }

    /**
     * Perform an in-order traversal of the binary tree
     * @returns An array containing the values of the nodes in in-order sequence
     */
    public inorderTraversal(): number[] {
        const result: number[] = [];
        this._inorderTraversal(this.root, result);
        return result;
    }

    /**
     * Helper method for in-order traversal
     * @param node - The current node being visited
     * @param result - Array to store the traversal result
     */
    private _inorderTraversal(node: TreeNode | null, result: number[]): void {
        if (node !== null) {
            this._inorderTraversal(node.left, result);
            result.push(node.val);
            this._inorderTraversal(node.right, result);
        }
    }

    /**
     * Perform a pre-order traversal of the binary tree
     * @returns An array containing the values of the nodes in pre-order sequence
     */
    public preorderTraversal(): number[] {
        const result: number[] = [];
        this._preorderTraversal(this.root, result);
        return result;
    }

    /**
     * Helper method for pre-order traversal
     * @param node - The current node being visited
     * @param result - Array to store the traversal result
     */
    private _preorderTraversal(node: TreeNode | null, result: number[]): void {
        if (node !== null) {
            result.push(node.val);
            this._preorderTraversal(node.left, result);
            this._preorderTraversal(node.right, result);
        }
    }

    /**
     * Perform a post-order traversal of the binary tree
     * @returns An array containing the values of the nodes in post-order sequence
     */
    public postorderTraversal(): number[] {
        const result: number[] = [];
        this._postorderTraversal(this.root, result);
        return result;
    }

    /**
     * Helper method for post-order traversal
     * @param node - The current node being visited
     * @param result - Array to store the traversal result
     */
    private _postorderTraversal(node: TreeNode | null, result: number[]): void {
        if (node !== null) {
            this._postorderTraversal(node.left, result);
            this._postorderTraversal(node.right, result);
            result.push(node.val);
        }
    }
}
```

This TypeScript code defines a `TreeNode` interface and a `BinaryTree` class with the same structure and functionality as your original Python code. It includes comments explaining each method's purpose and role in the tree operations.