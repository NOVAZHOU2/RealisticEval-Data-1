Certainly! Below is the equivalent TypeScript code for the provided Python code, including appropriate JSDoc-style documentation comments and type annotations:

```typescript
/**
 * Represents a node in a binary tree.
 */
class TreeNode {
    left: TreeNode | null;
    right: TreeNode | null;
    val: number;

    constructor(key: number) {
        this.left = null;
        this.right = null;
        this.val = key;
    }
}

/**
 * Represents a binary tree and implements its traversal methods.
 */
class BinaryTree {
    /**
     * Initializes a new instance of the BinaryTree class.
     */
    root: TreeNode | null;

    constructor() {
        this.root = null;
    }

    /**
     * Inserts a new node with the given key into the binary tree.
     * @param key The value to insert.
     */
    insert(key: number): void {
        if (this.root === null) {
            this.root = new TreeNode(key);
        } else {
            this._insert(this.root, key);
        }
    }

    /**
     * Helper method to insert a new node with the given key into the binary tree.
     * @param node The current node.
     * @param key The value to insert.
     */
    private _insert(node: TreeNode, key: number): void {
        if (key < node.val) {
            if (node.left === null) {
                node.left = new TreeNode(key);
            } else {
                this._insert(node.left, key);
            }
        } else {
            if (node.right === null) {
                node.right = new TreeNode(key);
            } else {
                this._insert(node.right, key);
            }
        }
    }

    /**
     * Performs an in-order traversal of the binary tree.
     * @returns An array containing the values of the nodes in in-order traversal order.
     */
    inorderTraversal(): number[] {
        const result: number[] = [];
        this._inorderTraversal(this.root, result);
        return result;
    }

    /**
     * Helper method to perform an in-order traversal of the binary tree.
     * @param node The current node.
     * @param result The array to store the traversal results.
     */
    private _inorderTraversal(node: TreeNode | null, result: number[]): void {
        if (node !== null) {
            this._inorderTraversal(node.left, result);
            result.push(node.val);
            this._inorderTraversal(node.right, result);
        }
    }

    /**
     * Performs a pre-order traversal of the binary tree.
     * @returns An array containing the values of the nodes in pre-order traversal order.
     */
    preorderTraversal(): number[] {
        const result: number[] = [];
        this._preorderTraversal(this.root, result);
        return result;
    }

    /**
     * Helper method to perform a pre-order traversal of the binary tree.
     * @param node The current node.
     * @param result The array to store the traversal results.
     */
    private _preorderTraversal(node: TreeNode | null, result: number[]): void {
        if (node !== null) {
            result.push(node.val);
            this._preorderTraversal(node.left, result);
            this._preorderTraversal(node.right, result);
        }
    }

    /**
     * Performs a post-order traversal of the binary tree.
     * @returns An array containing the values of the nodes in post-order traversal order.
     */
    postorderTraversal(): number[] {
        const result: number[] = [];
        this._postorderTraversal(this.root, result);
        return result;
    }

    /**
     * Helper method to perform a post-order traversal of the binary tree.
     * @param node The current node.
     * @param result The array to store the traversal results.
     */
    private _postorderTraversal(node: TreeNode | null, result: number[]): void {
        if (node !== null) {
            this._postorderTraversal(node.left, result);
            this._postorderTraversal(node.right, result);
            result.push(node.val);
        }
    }
}
```

### Explanation:
1. **Class Definitions**:
   - `TreeNode` class has properties `left`, `right`, and `val`.
   - `BinaryTree` class has a property `root`.

2. **Constructor Initialization**:
   - The `TreeNode` constructor initializes `left` and `right` to `null` and sets the value of `val`.
   - The `BinaryTree` constructor initializes `root` to `null`.

3. **Insertion Method**:
   - The `insert` method checks if the tree is empty and inserts a new node at the root.
   - If the tree is not empty, it calls the `_insert` method to find the correct position to insert the new node.

4. **Traversal Methods**:
   - The `inorderTraversal`, `preorderTraversal`, and `postorderTraversal` methods perform the respective traversals and return the result.
   - Each traversal method has a corresponding private helper method (`_inorderTraversal`, `_preorderTraversal`, `_postorderTraversal`) that performs the actual traversal logic.

5. **Documentation Comments**:
   - JSDoc-style comments are used to document the classes and methods, providing clear descriptions and parameter details.

6. **Type Annotations**:
   - All variables and function parameters are annotated with their respective types to ensure type safety.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate adjustments for TypeScript's static type system and documentation conventions.