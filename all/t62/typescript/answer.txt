Here is the equivalent TypeScript code for the provided Python code:

```typescript
class TreeNode {
    left: TreeNode | null;
    right: TreeNode | null;
    val: number;

    constructor(key: number) {
        this.left = null;
        this.right = null;
        this.val = key;
    }
}

class BinaryTree {
    root: TreeNode | null;

    constructor() {
        this.root = null;
    }

    insert(key: number): void {
        if (this.root === null) {
            this.root = new TreeNode(key);
        } else {
            this._insert(this.root, key);
        }
    }

    private _insert(node: TreeNode, key: number): void {
        if (key < node.val) {
            if (node.left === null) {
                node.left = new TreeNode(key);
            } else {
                this._insert(node.left, key);
            }
        } else {
            if (node.right === null) {
                node.right = new TreeNode(key);
            } else {
                this._insert(node.right, key);
            }
        }
    }

    inorderTraversal(): number[] {
        const result: number[] = [];
        this._inorderTraversal(this.root, result);
        return result;
    }

    private _inorderTraversal(node: TreeNode | null, result: number[]): void {
        if (node !== null) {
            this._inorderTraversal(node.left, result);
            result.push(node.val);
            this._inorderTraversal(node.right, result);
        }
    }

    preorderTraversal(): number[] {
        const result: number[] = [];
        this._preorderTraversal(this.root, result);
        return result;
    }

    private _preorderTraversal(node: TreeNode | null, result: number[]): void {
        if (node !== null) {
            result.push(node.val);
            this._preorderTraversal(node.left, result);
            this._preorderTraversal(node.right, result);
        }
    }

    postorderTraversal(): number[] {
        const result: number[] = [];
        this._postorderTraversal(this.root, result);
        return result;
    }

    private _postorderTraversal(node: TreeNode | null, result: number[]): void {
        if (node !== null) {
            this._postorderTraversal(node.left, result);
            this._postorderTraversal(node.right, result);
            result.push(node.val);
        }
    }
}
```

### Explanation:
1. **Class Definitions**:
   - `TreeNode` class has properties `left`, `right`, and `val`.
   - `BinaryTree` class has a property `root`.

2. **Constructor Initialization**:
   - The `TreeNode` constructor initializes `left` and `right` to `null` and sets the value of `val`.
   - The `BinaryTree` constructor initializes `root` to `null`.

3. **Insertion Method**:
   - The `insert` method checks if the tree is empty and inserts a new node at the root.
   - If the tree is not empty, it calls the `_insert` method to find the correct position to insert the new node.

4. **Traversal Methods**:
   - The `inorderTraversal`, `preorderTraversal`, and `postorderTraversal` methods perform the respective traversals and return the result.
   - Each traversal method has a corresponding private helper method (`_inorderTraversal`, `_preorderTraversal`, `_postorderTraversal`) that performs the actual traversal logic.

5. **Type Annotations**:
   - All variables and function parameters are annotated with their respective types to ensure type safety.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate adjustments for TypeScript's static type system.