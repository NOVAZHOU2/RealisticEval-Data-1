Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The conversion will maintain the functionality and logic of the tests, ensuring that all assertions are appropriately mapped to Jest equivalents.

### Python Code:
```python
import unittest

class TestBinaryTree(unittest.TestCase):

    def test_empty_tree(self):
        bt = BinaryTree()
        self.assertEqual(bt.inorder_traversal(), [])
        self.assertEqual(bt.preorder_traversal(), [])
        self.assertEqual(bt.postorder_traversal(), [])

    def test_single_node_tree(self):
        bt = BinaryTree()
        bt.insert(10)
        self.assertEqual(bt.inorder_traversal(), [10])
        self.assertEqual(bt.preorder_traversal(), [10])
        self.assertEqual(bt.postorder_traversal(), [10])

    def test_balanced_tree(self):
        bt = BinaryTree()
        elements = [8, 3, 10, 1, 6, 9, 14]
        for elem in elements:
            bt.insert(elem)
        self.assertEqual(bt.inorder_traversal(), [1, 3, 6, 8, 9, 10, 14])
        self.assertEqual(bt.preorder_traversal(), [8, 3, 1, 6, 10, 9, 14])
        self.assertEqual(bt.postorder_traversal(), [1, 6, 3, 9, 14, 10, 8])

    def test_left_heavy_tree(self):
        bt = BinaryTree()
        for i in range(10, 0, -1):  # Inserts 10, 9, ..., 1
            bt.insert(i)
        self.assertEqual(bt.inorder_traversal(), [i for i in range(1, 11)])
        self.assertEqual(bt.preorder_traversal(), [10-i for i in range(10)])
        self.assertEqual(bt.postorder_traversal(), [i for i in range(1, 11)])

    def test_right_heavy_tree(self):
        bt = BinaryTree()
        for i in range(1, 11):  # Inserts 1, 2, ..., 10
            bt.insert(i)
        self.assertEqual(bt.inorder_traversal(), [i for i in range(1, 11)])
        self.assertEqual(bt.preorder_traversal(), [i for i in range(1, 11)])
        self.assertEqual(bt.postorder_traversal(), [i for i in range(10, 0, -1)])
```

### Equivalent Jest Test Suite:

```javascript
const BinaryTree = require('./BinaryTree'); // Assuming BinaryTree is defined in a separate file

describe('BinaryTree', () => {
    describe('test_empty_tree', () => {
        it('should handle an empty tree correctly', () => {
            const bt = new BinaryTree();
            expect(bt.inorderTraversal()).toEqual([]);
            expect(bt.preorderTraversal()).toEqual([]);
            expect(bt.postorderTraversal()).toEqual([]);
        });
    });

    describe('test_single_node_tree', () => {
        it('should handle a single node tree correctly', () => {
            const bt = new BinaryTree();
            bt.insert(10);
            expect(bt.inorderTraversal()).toEqual([10]);
            expect(bt.preorderTraversal()).toEqual([10]);
            expect(bt.postorderTraversal()).toEqual([10]);
        });
    });

    describe('test_balanced_tree', () => {
        it('should handle a balanced tree correctly', () => {
            const bt = new BinaryTree();
            const elements = [8, 3, 10, 1, 6, 9, 14];
            elements.forEach((elem) => bt.insert(elem));
            expect(bt.inorderTraversal()).toEqual([1, 3, 6, 8, 9, 10, 14]);
            expect(bt.preorderTraversal()).toEqual([8, 3, 1, 6, 10, 9, 14]);
            expect(bt.postorderTraversal()).toEqual([1, 6, 3, 9, 14, 10, 8]);
        });
    });

    describe('test_left_heavy_tree', () => {
        it('should handle a left-heavy tree correctly', () => {
            const bt = new BinaryTree();
            for (let i = 10; i > 0; i--) {
                bt.insert(i);
            }
            expect(bt.inorderTraversal()).toEqual([...Array(10).keys()].map(i => i + 1));
            expect(bt.preorderTraversal()).toEqual([...Array(10).keys()].map(i => 10 - i));
            expect(bt.postorderTraversal()).toEqual([...Array(10).keys()].map(i => i + 1));
        });
    });

    describe('test_right_heavy_tree', () => {
        it('should handle a right-heavy tree correctly', () => {
            const bt = new BinaryTree();
            for (let i = 1; i <= 10; i++) {
                bt.insert(i);
            }
            expect(bt.inorderTraversal()).toEqual([...Array(10).keys()].map(i => i + 1));
            expect(bt.preorderTraversal()).toEqual([...Array(10).keys()].map(i => i + 1));
            expect(bt.postorderTraversal()).toEqual([...Array(10).keys()].reverse().map(i => i + 1));
        });
    });
});
```

### Explanation:
1. **Imports**: In Jest, we use `require` or `import` statements to include the `BinaryTree` class from a separate file.
2. **Describe Blocks**: Each test case is wrapped in a `describe` block to group related tests.
3. **It Blocks**: Each test case is defined within an `it` block, which provides a description of the test.
4. **Assertions**: Jest uses `expect` for assertions. The `toEqual` matcher is used to check equality.
5. **Array Generation**: In the `test_left_heavy_tree` and `test_right_heavy_tree` tests, we use `Array.from` and `map` to generate arrays dynamically.

This conversion ensures that the functionality and logic of the tests are preserved, and the structure is clear and follows Jest conventions.