Sure! Below is the equivalent JavaScript test case using Jest for the provided Python unittest test class:

```javascript
// Define the TreeNode class
class TreeNode {
    constructor(key) {
        this.left = null;
        this.right = null;
        this.val = key;
    }
}

// Define the BinaryTree class
class BinaryTree {
    constructor() {
        this.root = null;
    }

    insert(key) {
        // Implement the insert method
    }

    _insert(node, key) {
        // Implement the _insert helper method
    }

    inorderTraversal() {
        const result = [];
        this._inorderTraversal(this.root, result);
        return result;
    }

    _inorderTraversal(node, result) {
        if (node !== null) {
            this._inorderTraversal(node.left, result);
            result.push(node.val);
            this._inorderTraversal(node.right, result);
        }
    }

    preorderTraversal() {
        const result = [];
        this._preorderTraversal(this.root, result);
        return result;
    }

    _preorderTraversal(node, result) {
        if (node !== null) {
            result.push(node.val);
            this._preorderTraversal(node.left, result);
            this._preorderTraversal(node.right, result);
        }
    }

    postorderTraversal() {
        const result = [];
        this._postorderTraversal(this.root, result);
        return result;
    }

    _postorderTraversal(node, result) {
        if (node !== null) {
            this._postorderTraversal(node.left, result);
            this._postorderTraversal(node.right, result);
            result.push(node.val);
        }
    }
}

// Import the necessary modules
const { describe, it, expect } = require('@jest/globals');

// Test cases for the BinaryTree class
describe('BinaryTree', () => {
    let binaryTree;

    beforeEach(() => {
        binaryTree = new BinaryTree();
    });

    it('should insert nodes correctly', () => {
        binaryTree.insert(10);
        binaryTree.insert(5);
        binaryTree.insert(15);
        binaryTree.insert(3);
        binaryTree.insert(7);

        expect(binaryTree.inorderTraversal()).toEqual([3, 5, 7, 10, 15]);
        expect(binaryTree.preorderTraversal()).toEqual([10, 5, 3, 7, 15]);
        expect(binaryTree.postorderTraversal()).toEqual([3, 7, 5, 15, 10]);
    });
});
```

In this JavaScript code:
- The `TreeNode` class is defined similarly to the Python version.
- The `BinaryTree` class includes the same methods (`insert`, `_insert`, `inorderTraversal`, `_inorderTraversal`, `preorderTraversal`, `_preorderTraversal`, `postorderTraversal`, and `_postorderTraversal`) with placeholder implementations.
- Jest test cases are written to verify that the `BinaryTree` class works correctly when inserting nodes and performing traversals.

Make sure you have Jest installed in your project to run these tests. You can install it using npm or yarn:

```bash
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run the tests using the following command:

```bash
npx jest
# or
yarn jest
```