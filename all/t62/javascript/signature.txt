Sure! Below is the JavaScript version of your Python code with the same structure and comments:

```javascript
// Define the TreeNode class
class TreeNode {
    constructor(key) {
        this.left = null;
        this.right = null;
        this.val = key;
    }
}

// Define the BinaryTree class
class BinaryTree {
    /**
     * Implement the tree in the question structure and implement its three traversal methods
     */
    
    constructor() {
        this.root = null;
    }

    // Method to insert a new key into the binary tree
    insert(key) {
        if (this.root === null) {
            this.root = new TreeNode(key);
        } else {
            this._insert(this.root, key);
        }
    }

    // Helper method for insertion
    _insert(node, key) {
        if (key < node.val) {
            if (node.left === null) {
                node.left = new TreeNode(key);
            } else {
                this._insert(node.left, key);
            }
        } else if (key > node.val) {
            if (node.right === null) {
                node.right = new TreeNode(key);
            } else {
                this._insert(node.right, key);
            }
        }
    }

    // In-order traversal method
    inorderTraversal() {
        const result = [];
        this._inorderTraversal(this.root, result);
        return result;
    }

    // Helper method for in-order traversal
    _inorderTraversal(node, result) {
        if (node !== null) {
            this._inorderTraversal(node.left, result);
            result.push(node.val);
            this._inorderTraversal(node.right, result);
        }
    }

    // Pre-order traversal method
    preorderTraversal() {
        const result = [];
        this._preorderTraversal(this.root, result);
        return result;
    }

    // Helper method for pre-order traversal
    _preorderTraversal(node, result) {
        if (node !== null) {
            result.push(node.val);
            this._preorderTraversal(node.left, result);
            this._preorderTraversal(node.right, result);
        }
    }

    // Post-order traversal method
    postorderTraversal() {
        const result = [];
        this._postorderTraversal(this.root, result);
        return result;
    }

    // Helper method for post-order traversal
    _postorderTraversal(node, result) {
        if (node !== null) {
            this._postorderTraversal(node.left, result);
            this._postorderTraversal(node.right, result);
            result.push(node.val);
        }
    }
}
```

This JavaScript code maintains the structure and functionality of your original Python code, including the tree node and binary tree classes, along with their respective traversal methods.