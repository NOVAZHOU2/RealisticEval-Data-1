Certainly! Here is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <cmath>

// Convert an angle from radians to degrees.
//
// Args:
//     radians - The angle in radians to convert.
//
// Returns:
//     The angle in degrees as an integer.
int radians_to_degrees(double radians) {
    int degrees = static_cast<int>(radians * (180.0 / M_PI));
    return degrees;
}

int main() {
    // Example usage
    double radians = M_PI / 4; // 45 degrees in radians
    int degrees = radians_to_degrees(radians);
    std::cout << "Angle in degrees: " << degrees << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `radians_to_degrees` takes a `float` and returns an `int`.
   - In C++, the function signature is `int radians_to_degrees(double radians)`.

2. **Comments and Documentation**:
   - The Python docstring is converted into C++ comments using `//` for single-line comments.
   - Multi-line comments are enclosed in `/* ... */`.

3. **Type Conversion**:
   - The Python type annotation `-> int` indicates that the function should return an integer.
   - In C++, we use `static_cast<int>` to explicitly convert the result to an integer.

4. **Example Usage**:
   - The `main` function demonstrates how to call `radians_to_degrees` and print the result.

This ensures that the functionality, logic, and structure of the Python code are preserved in the C++ version.