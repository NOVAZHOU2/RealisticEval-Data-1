Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. This will ensure that the functionality and logic of the tests are preserved, with appropriate assertions in Catch2.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro for each test case.

### C++ Code with Catch2

```cpp
#include <catch2/catch_test_macros.hpp>
#include <cmath>

// Convert an angle from radians to degrees.
//
// Args:
//     radians - The angle in radians to convert.
//
// Returns:
//     The angle in degrees as an integer.
int radians_to_degrees(double radians) {
    int degrees = static_cast<int>(radians * (180.0 / M_PI));
    return degrees;
}

TEST_CASE("Test conversion of various angles", "[RadiansToDegrees]") {
    SECTION("Test conversion of 0 radians") {
        REQUIRE(radians_to_degrees(0) == 0);
    }

    SECTION("Test conversion of π/2 radians") {
        REQUIRE_THAT(radians_to_degrees(M_PI / 2), Catch::Matchers::WithinAbs(90, 0.00001));
    }

    SECTION("Test conversion of π radians") {
        REQUIRE_THAT(radians_to_degrees(M_PI), Catch::Matchers::WithinAbs(180, 0.00001));
    }

    SECTION("Test conversion of 3π/2 radians") {
        REQUIRE_THAT(radians_to_degrees(3 * M_PI / 2), Catch::Matchers::WithinAbs(270, 0.00001));
    }

    SECTION("Test conversion of 2π radians") {
        REQUIRE_THAT(radians_to_degrees(2 * M_PI), Catch::Matchers::WithinAbs(360, 0.00001));
    }

    SECTION("Test conversion of -π/2 radians") {
        REQUIRE_THAT(radians_to_degrees(-M_PI / 2), Catch::Matchers::WithinAbs(-90, 0.00001));
    }

    SECTION("Test conversion of a large angle (4π radians)") {
        REQUIRE_THAT(radians_to_degrees(4 * M_PI), Catch::Matchers::WithinAbs(720, 0.00001));
    }
}
```

### Explanation:
1. **Header Inclusion**:
   - Include the Catch2 header file `#include <catch2/catch_test_macros.hpp>` to use the testing macros.
   - Include `<cmath>` for mathematical constants and functions.

2. **Function Definition**:
   - Define the `radians_to_degrees` function as previously shown.

3. **Test Class**:
   - Use `TEST_CASE` to define the overall test case.
   - Use `SECTION` within the test case to define individual test sections.
   - Use `REQUIRE` for exact equality checks.
   - Use `REQUIRE_THAT` with `Catch::Matchers::WithinAbs` for approximate equality checks, ensuring the precision matches the Python `assertAlmostEqual` method.

4. **Assertions**:
   - `REQUIRE` is used for exact equality checks.
   - `REQUIRE_THAT` with `Catch::Matchers::WithinAbs` is used for approximate equality checks, specifying a tolerance of `0.00001` to match the `places=5` in the Python tests.

This setup ensures that the tests are structured similarly to the Python unittests and that the functionality and logic are preserved in the C++ version.