Here is the equivalent C++ code for your Python function:

```c++
#include <cmath>
#include <iostream>

int radiansToDegrees(double radians)
{
    return static_cast<int>(radians * 180 / M_PI);
}

int main() {
    double radians = 3.14;
    std::cout << radiansToDegrees(radians) << " degrees" << std::endl;
    return 0;
}
```

And here is the equivalent C code for your Python function:

```c
#include <stdio.h>
#include <math.h>

int radiansToDegrees(double radians)
{
    return (int)(radians * 180 / M_PI);
}

int main() {
    double radians = 3.14;
    printf("%d degrees\n", radiansToDegrees(radians));
    return 0;
}
```
In both versions of the code, the `radiansToDegrees` function takes a `double` value representing an angle in radians and returns an `int` value representing that same angle in degrees. The conversion is done using the formula `(radians * 180 / M_PI)`. Note that we use `static_cast<int>` or `(int)` to cast the result to integer since the original function signature specifies returning an `int`.