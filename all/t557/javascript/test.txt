Certainly! Here is the equivalent Jest test suite for the given Python unittest class. I will convert each test case and ensure that the functionality and logic are preserved.

### Python Code:
```python
import math
import unittest

class TestRadiansToDegrees(unittest.TestCase):
    def test_zero_radians(self):
        """Test conversion of 0 radians"""
        self.assertAlmostEqual(radians_to_degrees(0), 0, places=5)

    def test_pi_over_two_radians(self):
        """Test conversion of π/2 radians"""
        self.assertAlmostEqual(radians_to_degrees(math.pi / 2), 90, places=5)

    def test_pi_radians(self):
        """Test conversion of π radians"""
        self.assertAlmostEqual(radians_to_degrees(math.pi), 180, places=5)

    def test_three_pi_over_two_radians(self):
        """Test conversion of 3π/2 radians"""
        self.assertAlmostEqual(radians_to_degrees(3 * math.pi / 2), 270, places=5)

    def test_two_pi_radians(self):
        """Test conversion of 2π radians"""
        self.assertAlmostEqual(radians_to_degrees(2 * math.pi), 360, places=5)

    def test_negative_pi_over_two_radians(self):
        """Test conversion of -π/2 radians"""
        self.assertAlmostEqual(radians_to_degrees(-math.pi / 2), -90, places=5)

    def test_large_radians(self):
        """Test conversion of a large angle (4π radians)"""
        self.assertAlmostEqual(radians_to_degrees(4 * math.pi), 720, places=5)
```

### Equivalent Jest Test Suite:

First, let's define the `radiansToDegrees` function in JavaScript:

```javascript
function radiansToDegrees(radians) {
    const degrees = radians * (180 / Math.PI);
    return degrees;
}
```

Now, let's write the Jest test suite:

```javascript
const { expect } = require('@jest/globals');

describe('TestRadiansToDegrees', () => {
    it('test conversion of 0 radians', () => {
        expect(radiansToDegrees(0)).toBeCloseTo(0, 5);
    });

    it('test conversion of π/2 radians', () => {
        expect(radiansToDegrees(Math.PI / 2)).toBeCloseTo(90, 5);
    });

    it('test conversion of π radians', () => {
        expect(radiansToDegrees(Math.PI)).toBeCloseTo(180, 5);
    });

    it('test conversion of 3π/2 radians', () => {
        expect(radiansToDegrees(3 * Math.PI / 2)).toBeCloseTo(270, 5);
    });

    it('test conversion of 2π radians', () => {
        expect(radiansToDegrees(2 * Math.PI)).toBeCloseTo(360, 5);
    });

    it('test conversion of -π/2 radians', () => {
        expect(radiansToDegrees(-Math.PI / 2)).toBeCloseTo(-90, 5);
    });

    it('test conversion of a large angle (4π radians)', () => {
        expect(radiansToDegrees(4 * Math.PI)).toBeCloseTo(720, 5);
    });
});
```

### Explanation:
1. **Function Definition**: The `radiansToDegrees` function is defined similarly to the Python function.
2. **Jest Test Suite**:
   - We use `describe` to group the tests under a common name.
   - Each test case is defined using `it`, which is equivalent to a test method in `unittest`.
   - The `expect` function is used to make assertions.
   - `toBeCloseTo` is used instead of `assertAlmostEqual` to check if the values are approximately equal within a specified number of decimal places (`5` in this case).

This ensures that the functionality and logic of the tests are preserved, and the structure is clear and consistent with Jest's conventions.