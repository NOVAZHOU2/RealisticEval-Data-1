Sure! Below is the equivalent JavaScript test case using Jest for the given Python function `radians_to_degrees`.

First, let's define the function in JavaScript:

```javascript
function radiansToDegrees(radians) {
    /**
     * Convert an angle from radians to degrees.
     *
     * @param {number} radians - The angle in radians to convert.
     * @returns {number} - The angle in degrees.
     */
    return radians * (180 / Math.PI);
}
```

Now, let's write the Jest test cases for this function:

```javascript
const radiansToDegrees = require('./path/to/radiansToDegrees'); // Adjust the path accordingly

describe('radiansToDegrees', () => {
    it('converts 0 radians to 0 degrees', () => {
        expect(radiansToDegrees(0)).toBe(0);
    });

    it('converts π/2 radians to 90 degrees', () => {
        expect(radiansToDegrees(Math.PI / 2)).toBeCloseTo(90);
    });

    it('converts π radians to 180 degrees', () => {
        expect(radiansToDegrees(Math.PI)).toBeCloseTo(180);
    });

    it('converts 3π/2 radians to 270 degrees', () => {
        expect(radiansToDegrees(3 * Math.PI / 2)).toBeCloseTo(270);
    });

    it('converts 2π radians to 360 degrees', () => {
        expect(radiansToDegrees(2 * Math.PI)).toBeCloseTo(360);
    });
});
```

### Explanation:
- **`require('./path/to/radiansToDegrees')`:** This line imports the `radiansToDegrees` function from its file location. Make sure to adjust the path correctly.
- **`describe('radiansToDegrees', () => { ... })`:** This block groups related tests together under the name "radiansToDegrees".
- **`it('description', () => { ... })`:** Each `it` block defines a single test case with a description and the actual test logic.
- **`expect(value).toBe(expectedValue)`:** This assertion checks if the value is exactly equal to the expected value.
- **`expect(value).toBeCloseTo(expectedValue)`:** This assertion checks if the value is close enough to the expected value, which is useful for floating-point comparisons.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```bash
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run your tests using the following command:

```bash
npx jest
# or
yarn jest
```