Certainly! Here is the equivalent TypeScript code using Jest for testing the `radiansToDegrees` function. We will include the necessary imports, type annotations, and Jest assertions to match the functionality of the Python unittest class.

### TypeScript Code

First, let's define the `radiansToDegrees` function:

```typescript
import { PI } from 'mathjs';

/**
 * Convert an angle from radians to degrees.
 *
 * @param radians - The angle in radians to convert.
 * @returns The angle in degrees.
 */
function radiansToDegrees(radians: number): number {
    const degrees = radians * (180 / PI);
    return Math.round(degrees);
}

// Example usage
console.log(radiansToDegrees(PI)); // Should print 180
```

Now, let's write the Jest test suite:

```typescript
import { PI } from 'mathjs';

/**
 * Convert an angle from radians to degrees.
 *
 * @param radians - The angle in radians to convert.
 * @returns The angle in degrees.
 */
function radiansToDegrees(radians: number): number {
    const degrees = radians * (180 / PI);
    return Math.round(degrees);
}

describe('radiansToDegrees', () => {
    it('should convert 0 radians to 0 degrees', () => {
        expect(radiansToDegrees(0)).toBeCloseTo(0, 5);
    });

    it('should convert π/2 radians to 90 degrees', () => {
        expect(radiansToDegrees(PI / 2)).toBeCloseTo(90, 5);
    });

    it('should convert π radians to 180 degrees', () => {
        expect(radiansToDegrees(PI)).toBeCloseTo(180, 5);
    });

    it('should convert 3π/2 radians to 270 degrees', () => {
        expect(radiansToDegrees(3 * PI / 2)).toBeCloseTo(270, 5);
    });

    it('should convert 2π radians to 360 degrees', () => {
        expect(radiansToDegrees(2 * PI)).toBeCloseTo(360, 5);
    });

    it('should convert -π/2 radians to -90 degrees', () => {
        expect(radiansToDegrees(-PI / 2)).toBeCloseTo(-90, 5);
    });

    it('should convert 4π radians to 720 degrees', () => {
        expect(radiansToDegrees(4 * PI)).toBeCloseTo(720, 5);
    });
});
```

### Explanation:
1. **Function Definition**:
   - The `radiansToDegrees` function is defined with proper type annotations and uses `Math.PI` for the conversion.

2. **Jest Test Suite**:
   - The `describe` block sets up the test suite for `radiansToDegrees`.
   - Each `it` block represents a test case.
   - The `expect` method is used with `toBeCloseTo` to check that the results are approximately equal within a specified precision (`5` decimal places).

3. **Imports**:
   - `PI` is imported from `mathjs`, but you can also use `Math.PI` directly if you prefer.

4. **Assertions**:
   - `toBeCloseTo` is used instead of `toBe` because floating-point arithmetic can introduce small rounding errors, and we want to ensure the values are close enough.

This setup ensures that the tests are equivalent to the Python unittest tests and adhere to Jest's assertion methods.