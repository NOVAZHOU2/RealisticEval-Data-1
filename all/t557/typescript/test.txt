Sure! Here's how you can translate the given Python unittest test class into TypeScript using Jest:

```typescript
// radiansToDegrees.ts
export function radiansToDegrees(radians: number): number {
    return radians * (180 / Math.PI);
}
```

And here's the corresponding Jest test case for the `radiansToDegrees` function:

```typescript
// radiansToDegrees.test.ts
import { radiansToDegrees } from './radiansToDegrees';

describe('radiansToDegrees', () => {
    it('converts 0 radians to 0 degrees', () => {
        expect(radiansToDegrees(0)).toBe(0);
    });

    it('converts π/2 radians to 90 degrees', () => {
        expect(radiansToDegrees(Math.PI / 2)).toBe(90);
    });

    it('converts π radians to 180 degrees', () => {
        expect(radiansToDegrees(Math.PI)).toBe(180);
    });

    it('converts 3π/2 radians to 270 degrees', () => {
        expect(radiansToDegrees(3 * Math.PI / 2)).toBe(270);
    });

    it('converts 2π radians to 360 degrees', () => {
        expect(radiansToDegrees(2 * Math.PI)).toBe(360);
    });
});
```

In this TypeScript code:
- We define the `radiansToDegrees` function which converts an angle from radians to degrees.
- We then write a Jest test suite using `describe` and `it` blocks to test various cases of the `radiansToDegrees` function.
- Each `it` block contains a test case that checks if the function returns the correct value for a given input.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run the tests using the following command:

```sh
npx jest
# or
yarn jest
```

This will execute all the test cases defined in your `radiansToDegrees.test.ts` file.