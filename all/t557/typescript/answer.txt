Sure! Here is the equivalent TypeScript code:

```typescript
import { PI } from "mathjs";

function radiansToDegrees(radians: number): number {
    const degrees = radians * (180 / PI);
    return degrees;
}

// Example usage
console.log(radiansToDegrees(PI)); // Should print 180
```

In this TypeScript code, I've used `mathjs` library for the constant `PI`. Please make sure you have `mathjs` installed in your project or you can use `Math.PI` if you are not using `mathjs`.

If you prefer using native JavaScript Math objects, here is the version with `Math.PI`:

```typescript
function radiansToDegrees(radians: number): number {
    const degrees = radians * (180 / Math.PI);
    return degrees;
}

// Example usage
console.log(radiansToDegrees(Math.PI)); // Should print 180
```

Both versions ensure that the function `radiansToDegrees` takes a number as input and returns a number as output, adhering to TypeScript's static type system.