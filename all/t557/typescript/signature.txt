Certainly! Here is the equivalent TypeScript code, including the conversion of the Python function signature and the documentation comments using the JSDoc style:

```typescript
/**
 * Convert an angle from radians to degrees.
 *
 * @param radians - The angle in radians to convert.
 * @returns The angle in degrees.
 */
function radiansToDegrees(radians: number): number {
    const degrees = radians * (180 / Math.PI);
    return Math.round(degrees);
}

// Example usage
console.log(radiansToDegrees(Math.PI)); // Should print 180
```

### Explanation:
1. **Function Signature**:
   - The Python function `radians_to_degrees` takes a `float` argument and returns an `int`.
   - In TypeScript, we use `number` for both the input and output types, since TypeScript does not differentiate between `int` and `float` as strictly as Python does.

2. **Documentation Comments**:
   - The Python docstring is converted to JSDoc-style comments using `/** */`.
   - The `Args` and `Returns` sections are mapped to `@param` and `@returns` tags in JSDoc.

3. **Conversion Logic**:
   - The conversion logic remains the same, but we use `Math.PI` for the constant value of Ï€.
   - To ensure the return type is an integer, we use `Math.round()` to round the result to the nearest integer.

This TypeScript code preserves the original functionality and structure while adhering to TypeScript's static type system and documentation conventions.