Sure! Below is the equivalent C++ test case using Catch2 for the provided Python unittest function `extract_outermost_brackets`.

```cpp
#include <catch2/catch.hpp>
#include <string>

std::string extract_outermost_brackets(const std::string& s) {
    size_t start = s.find('[');
    if (start == std::string::npos) return "";

    size_t end = s.find_last_of(']');
    if (end == std::string::npos || end <= start) return "";

    return s.substr(start + 1, end - start - 1);
}

TEST_CASE("Extract Outermost Brackets", "[brackets]") {
    REQUIRE(extract_outermost_brackets("Text [with [nested] brackets] and more text") == "with [nested] brackets");
    REQUIRE(extract_outermost_brackets("[single] bracket") == "single");
    REQUIRE(extract_outermost_brackets("no brackets here") == "");
    REQUIRE(extract_outermost_brackets("unbalanced [bracket") == "");
    REQUIRE(extract_outermost_brackets("bracket] unbalanced") == "");
    REQUIRE(extract_outermost_brackets("[bracket][bracket]") == "bracket");
}
```

### Explanation:
1. **Function Definition**: The `extract_outermost_brackets` function in C++ does the same thing as the Python function. It finds the indices of the first `[` and last `]`, and then extracts the substring between them.
2. **Catch2 Test Case**:
   - `TEST_CASE` macro defines a test case named "Extract Outermost Brackets".
   - `REQUIRE` macro is used to assert that the function's output matches the expected result.
   - Several test cases are provided to cover different scenarios, including nested brackets, single brackets, no brackets, and unbalanced brackets.

Make sure you have Catch2 installed and properly configured in your project to compile and run these tests.