Hereâ€™s the equivalent C++ code for the provided Python function:

```cpp
#include <iostream>
#include <string>
#include <stack>
#include <unordered_map>

// Function to extract the contents of the outermost brackets from the input string
std::string extract_outermost_brackets(const std::string& s) {
    std::stack<char> stack;
    int start_index = -1;
    std::unordered_map<char, char> opening_brackets = {{'(', '('}, {'{', '{'}, {'[', '['}};
    std::unordered_map<char, char> closing_brackets = {{')', '('}, {'}', '{'}, {']', '['}};
    std::unordered_map<char, char> matching_bracket = {{')', '('}, {'}', '{'}, {']', '['}};

    for (size_t i = 0; i < s.size(); ++i) {
        char char_current = s[i];
        if (opening_brackets.find(char_current) != opening_brackets.end()) {
            if (stack.empty()) {
                start_index = static_cast<int>(i);
            }
            stack.push(char_current);
        } else if (closing_brackets.find(char_current) != closing_brackets.end()) {
            if (!stack.empty() && stack.top() == matching_bracket[char_current]) {
                stack.pop();
                if (stack.empty()) {
                    return s.substr(start_index + 1, i - start_index - 1);
                }
            }
        }
    }

    return "";  // Return an empty string if no outermost brackets were found
}

int main() {
    std::string input = "a(b[c]{d}e)f";
    std::string result = extract_outermost_brackets(input);
    std::cout << "Extracted content: " << result << std::endl;

    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<iostream>`, `<string>`, `<stack>`, `<unordered_map>`) are included.
2. **Function Definition**: The `extract_outermost_brackets` function takes a `const std::string& s` as input and returns a `std::string`.
3. **Stack and Maps**: 
   - A `std::stack<char>` is used to keep track of opening brackets.
   - `std::unordered_map<char, char>` is used to map opening and closing brackets.
4. **Loop**: A loop iterates through each character in the input string.
5. **Opening Brackets**: If an opening bracket is encountered and the stack is empty, it marks the start index.
6. **Closing Brackets**: If a closing bracket matches the top of the stack, it pops the stack. If the stack becomes empty, it extracts the content between the brackets.
7. **Return Value**: An empty string is returned if no outermost brackets are found.
8. **Main Function**: Demonstrates usage with an example string.