Here is how you could implement this function in C++:

```cpp
#include <string>
#include <stack>

std::string extract_outermost_brackets(const std::string &s) {
    std::stack<int> stack;
    int start = -1;

    for(int i=0; i<s.length(); ++i) {
        if(s[i]=='[') {
            if(stack.empty())
                start = i+1;
            stack.push(i);
        } else if(s[i]==']') {
            stack.pop();
            if(stack.empty()) {
                return s.substr(start, i-start+1);
            }
        }
    }

    return "";
}
```

And here is the equivalent code in C:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* extract_outermost_brackets(char *s) {
    char *start = NULL;
    int stack[256];
    int top = -1;

    for(int i=0; i<strlen(s); ++i) {
        if(s[i]=='[') {
            if(top == -1)
                start = s+i+1;
            stack[++top] = i;
        } else if(s[i]==']') {
            top--;
            if(top == -1) {
                char *result = malloc(strlen(start)+1);
                strcpy(result, start);
                result[strlen(start)] = '\0';
                return result;
            }
        }
    }

    return "";
}
```

Please note that these implementations assume that the input string does not contain any invalid characters (e.g., unbalanced brackets). Also, the C version dynamically allocates memory for the result string, which needs to be freed when it's no longer needed.