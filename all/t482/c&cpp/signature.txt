Sure! Below is the C++ version of the Python function `extract_outermost_brackets` with the same functionality and comments:

```cpp
#include <string>
#include <iostream>

/**
 * Extracts the contents of the outermost brackets from the input string.
 * 
 * Example:
 * Input: "Text [with [nested] brackets] and more text"
 * Output: "with [nested] brackets"
 * 
 * @param s The input string containing brackets.
 * @return std::string The contents within the outermost brackets, or an empty string if no brackets are found.
 */
std::string extract_outermost_brackets(const std::string& s) {
    size_t start = s.find('[');
    if (start == std::string::npos) {
        return ""; // No opening bracket found
    }

    size_t end = s.rfind(']');
    if (end == std::string::npos || end <= start) {
        return ""; // No closing bracket found or it's not after the opening bracket
    }

    return s.substr(start + 1, end - start - 1);
}

int main() {
    std::string input = "Text [with [nested] brackets] and more text";
    std::string result = extract_outermost_brackets(input);
    std::cout << "Extracted: " << result << std::endl;
    return 0;
}
```

### Explanation:
- **Include Headers**: We include `<string>` for using `std::string` and `<iostream>` for basic I/O operations.
- **Function Signature**: The function `extract_outermost_brackets` takes a constant reference to a `std::string` and returns a `std::string`.
- **Comments**: The docstring has been converted to C++ style comments.
- **Implementation**:
  - We use `find` to locate the first occurrence of `[`.
  - If `[` is not found, we return an empty string.
  - We use `rfind` to locate the last occurrence of `]`.
  - If `]` is not found or is not after `[`, we return an empty string.
  - Otherwise, we use `substr` to extract the substring between the first `[` and the last `]`.

This C++ code should provide the same functionality as the original Python function.