Sure! Below is the equivalent TypeScript code for the provided Python function:

```typescript
function extractOutermostBrackets(s: string): string {
    /**
     * Extracts the contents of the outermost brackets from the input string.
     * For example:
     *      input: "Text [with [nested] brackets] and more text"
     *      output: "with [nested] brackets"
     * 
     * @param {string} s - The input string containing brackets.
     * 
     * @returns {string} - The contents within the outermost brackets, or an empty string if no brackets are found.
     */
    
    let stack: number[] = [];
    let start: number = -1;
    let end: number = -1;

    for (let i = 0; i < s.length; i++) {
        if (s[i] === '[') {
            if (stack.length === 0) {
                start = i + 1;
            }
            stack.push(i);
        } else if (s[i] === ']') {
            if (stack.length > 0) {
                stack.pop();
                if (stack.length === 0) {
                    end = i;
                    break;
                }
            }
        }
    }

    return start !== -1 && end !== -1 ? s.substring(start, end) : '';
}

// Example usage:
const inputString = "Text [with [nested] brackets] and more text";
console.log(extractOutermostBrackets(inputString)); // Output: "with [nested] brackets"
```

### Explanation:
- **Stack**: We use a stack to keep track of the indices of the opening brackets `[`. When we encounter a closing bracket `]`, we pop from the stack. If the stack becomes empty after popping, it means we have found the matching pair for the outermost bracket.
- **start** and **end**: These variables store the starting and ending indices of the outermost brackets. Once we find these indices, we use `substring` to extract the content between them.
- **Edge Cases**: If no brackets are found (`stack.length` never becomes zero), the function returns an empty string.