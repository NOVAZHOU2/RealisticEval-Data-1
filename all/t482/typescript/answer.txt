Sure! Here’s the equivalent TypeScript code for the provided Python function, ensuring it follows TypeScript’s static type system and idiomatic practices:

```typescript
function extractOutermostBrackets(s: string): string {
    const stack: string[] = [];
    let startIndex = -1;
    const openingBrackets = "({[";
    const closingBrackets = ")}]";
    const matchingBracket: { [key: string]: string } = { ')': '(', '}': '{', ']': '[' };

    for (let i = 0; i < s.length; i++) {
        const char = s[i];
        if (openingBrackets.includes(char)) {  // Check for any opening bracket
            if (stack.length === 0) {  // If the stack is empty, we have found the outermost opening bracket
                startIndex = i;  // Remember the position of the first opening bracket
            }
            stack.push(char);
        } else if (closingBrackets.includes(char)) {  // Check for any closing bracket
            if (stack.length > 0 && stack[stack.length - 1] === matchingBracket[char]) {  // Match with the latest opening bracket
                stack.pop();
                if (stack.length === 0) {  // When stack is empty, we found the outermost closing bracket
                    return s.substring(startIndex + 1, i);  // Extract contents between the brackets
                }
            }
        }
    }

    return "";  // Return an empty string if no outermost brackets were found
}
```

### Explanation:
1. **Function Definition**: The function `extractOutermostBrackets` is defined with a single parameter `s` of type `string`.
2. **Stack Initialization**: The stack is initialized as an array of strings.
3. **Start Index**: `startIndex` is initialized to `-1` to indicate no start index has been found yet.
4. **Character Iteration**: A loop iterates through each character of the input string `s`.
5. **Opening Brackets Check**: If the current character is an opening bracket (`(`, `{`, `[`), it checks if the stack is empty. If so, it updates `startIndex` to the current index and pushes the character onto the stack.
6. **Closing Brackets Check**: If the current character is a closing bracket (`, }`, `]`), it checks if the stack is non-empty and the top of the stack matches the corresponding opening bracket. If so, it pops the opening bracket from the stack. If the stack becomes empty after popping, it returns the substring between the opening and closing brackets.
7. **Empty String Return**: If no outermost brackets are found, it returns an empty string.

This TypeScript code closely mirrors the functionality and logic of the original Python code while adhering to TypeScript's static typing and best practices.