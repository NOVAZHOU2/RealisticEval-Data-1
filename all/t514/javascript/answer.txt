Sure! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function extractDateFromFileName(fileName) {
    /**
     * Extracts the date in the format YYYY-MM-DD from the given file name.
     *
     * @param {string} fileName - The name of the file which may contain a date.
     * @returns {string | null} - The extracted date string in YYYY-MM-DD format if found, else null.
     */
    // Define the regex pattern for matching a date in the format YYYY-MM-DD
    const datePattern = /\d{4}-\d{2}-\d{2}/;
    
    // Search for the date pattern in the file name
    const match = fileName.match(datePattern);
    
    // If a match is found, return the matched date; otherwise, return null
    return match ? match[0] : null;
}

// Example usage
console.log(extractDateFromFileName("document_2023-04-15.pdf"));  // Output: "2023-04-15"
console.log(extractDateFromFileName("image.png"));               // Output: null
```

### Explanation:
1. **Function Definition**: The function `extractDateFromFileName` is defined with a docstring explaining its purpose, arguments, and return type.
2. **Regex Pattern**: The regex pattern `\d{4}-\d{2}-\d{2}` is used to match dates in the format `YYYY-MM-DD`.
3. **Matching**: The `match` method is used to search for the pattern in the `fileName`. It returns an array containing the match if found.
4. **Return Value**: If a match is found (`match` is not `null`), the first element of the match array (`match[0]`) is returned. Otherwise, `null` is returned.

This JavaScript code should behave identically to the original Python code.