Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Code:
```python
import unittest

class TestExtractDateFromFilename(unittest.TestCase):

    def test_date_extraction_success(self):
        """Test case where the date is successfully extracted."""
        file_name = "report-2023-09-28.txt"
        expected_date = "2023-09-28"
        self.assertEqual(extract_date_from_filename(file_name), expected_date)

    def test_no_date_in_filename(self):
        """Test case where no date is present in the filename."""
        file_name = "report.txt"
        self.assertIsNone(extract_date_from_filename(file_name))

    def test_multiple_dates_in_filename(self):
        """Test case where multiple dates are present, should return the first one."""
        file_name = "report-2023-09-28-backup-2023-10-01.txt"
        expected_date = "2023-09-28"
        self.assertEqual(extract_date_from_filename(file_name), expected_date)

    def test_date_at_start_of_filename(self):
        """Test case where the date is at the start of the filename."""
        file_name = "2023-09-28-report.txt"
        expected_date = "2023-09-28"
        self.assertEqual(extract_date_from_filename(file_name), expected_date)

    def test_incorrect_date_format(self):
        """Test case where the date format is incorrect."""
        file_name = "report-2023-99-99.txt"  # Invalid date
        expected_date = "2023-99-99"
        self.assertEqual(extract_date_from_filename(file_name), expected_date)
```

### Equivalent Jest Test Suite:
```javascript
const { extractDateFromFileName } = require('./path/to/extractDateFromFileName');

describe('TestExtractDateFromFilename', () => {
    it('test_date_extraction_success', () => {
        // Test case where the date is successfully extracted.
        const file_name = 'report-2023-09-28.txt';
        const expected_date = '2023-09-28';
        expect(extractDateFromFileName(file_name)).toBe(expected_date);
    });

    it('test_no_date_in_filename', () => {
        // Test case where no date is present in the filename.
        const file_name = 'report.txt';
        expect(extractDateFromFileName(file_name)).toBeNull();
    });

    it('test_multiple_dates_in_filename', () => {
        // Test case where multiple dates are present, should return the first one.
        const file_name = 'report-2023-09-28-backup-2023-10-01.txt';
        const expected_date = '2023-09-28';
        expect(extractDateFromFileName(file_name)).toBe(expected_date);
    });

    it('test_date_at_start_of_filename', () => {
        // Test case where the date is at the start of the filename.
        const file_name = '2023-09-28-report.txt';
        const expected_date = '2023-09-28';
        expect(extractDateFromFileName(file_name)).toBe(expected_date);
    });

    it('test_incorrect_date_format', () => {
        // Test case where the date format is incorrect.
        const file_name = 'report-2023-99-99.txt';  // Invalid date
        const expected_date = '2023-99-99';
        expect(extractDateFromFileName(file_name)).toBe(expected_date);
    });
});
```

### Explanation:
1. **Import Statement**:
   - The `extractDateFromFileName` function is imported from the relevant module.

2. **Describe Block**:
   - The `describe` block is used to group the test cases under a descriptive name.

3. **It Blocks**:
   - Each `it` block represents a specific test case.
   - The description of each test case is included in the `it` block.

4. **Assertions**:
   - `expect` is used for making assertions.
   - `toBe` is used to check equality for strings and `toBeNull` for checking `null`.

### Notes on Differences:
- **Equality Assertions**:
  - In Python, `self.assertEqual` is used for equality checks.
  - In Jest, `expect(...).toBe` is used for strict equality checks.
- **None vs. Null**:
  - In Python, `self.assertIsNone` checks for `None`.
  - In Jest, `expect(...).toBeNull` checks for `null`.

This Jest test suite maintains the same functionality and logic as the original Python unittest class.