Certainly! Hereâ€™s the Java equivalent of the provided Python unittest class using JUnit. The Java test class will be placed in the package `org.real.temp` and named `Tester`. We will use JUnit annotations and assertions to ensure the functionality and logic are preserved.

### Java Code Using JUnit

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Test cases for the extractDateFromFilename method.
 */
public class Tester {

    /**
     * Test case where the date is successfully extracted.
     */
    @Test
    public void testDateExtractionSuccess() {
        String fileName = "report-2023-09-28.txt";
        String expectedDate = "2023-09-28";
        assertEquals(expectedDate, extractDateFromFilename(fileName));
    }

    /**
     * Test case where no date is present in the filename.
     */
    @Test
    public void testNoDateInFilename() {
        String fileName = "report.txt";
        assertNull(extractDateFromFilename(fileName));
    }

    /**
     * Test case where multiple dates are present, should return the first one.
     */
    @Test
    public void testMultipleDatesInFilename() {
        String fileName = "report-2023-09-28-backup-2023-10-01.txt";
        String expectedDate = "2023-09-28";
        assertEquals(expectedDate, extractDateFromFilename(fileName));
    }

    /**
     * Test case where the date is at the start of the filename.
     */
    @Test
    public void testDateAtStartOfFile() {
        String fileName = "2023-09-28-report.txt";
        String expectedDate = "2023-09-28";
        assertEquals(expectedDate, extractDateFromFilename(fileName));
    }

    /**
     * Test case where the date format is incorrect.
     */
    @Test
    public void testIncorrectDateFormat() {
        String fileName = "report-2023-99-99.txt";  // Invalid date
        String expectedDate = "2023-99-99";
        assertEquals(expectedDate, extractDateFromFilename(fileName));
    }

    // Utility method to extract the date from the filename
    private String extractDateFromFilename(String fileName) {
        // Define the regex pattern for matching a date in the format YYYY-MM-DD
        Pattern datePattern = Pattern.compile("\\d{4}-\\d{2}-\\d{2}");
        
        // Search for the date pattern in the file name
        Matcher matcher = datePattern.matcher(fileName);
        
        // If a match is found, return the matched date; otherwise, return null
        if (matcher.find()) {
            return matcher.group(0);
        } else {
            return null;
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The package name `org.real.temp` is declared at the beginning.
2. **Imports**: The necessary imports for JUnit are included (`@Test`, `assertEquals`, `assertNull`).
3. **Class Definition**: The class `Tester` is defined with the appropriate Javadoc comment.
4. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate it is a test case.
5. **Assertion Methods**:
   - `assertEquals` is used to check if the expected value matches the actual value.
   - `assertNull` is used to check if the returned value is `null`.
6. **Test Methods**:
   - `testDateExtractionSuccess`: Tests successful extraction of a date.
   - `testNoDateInFilename`: Tests when there is no date in the filename.
   - `testMultipleDatesInFilename`: Tests when multiple dates are present.
   - `testDateAtStartOfFile`: Tests when the date is at the start of the filename.
   - `testIncorrectDateFormat`: Tests when the date format is incorrect.
7. **Utility Method**: The `extractDateFromFilename` method is defined within the test class to keep the test methods concise and focused on the assertions.

This Java code preserves the original functionality and structure of the Python unittest class while adhering to JUnit conventions and best practices.