Sure, here's how you can convert your Python function into C and C++:

**C Code:**

```c
#include <stdio.h>
#include <string.h>
#include <regex.h>

char* extract_date_from_filename(char* file_name) {
    regex_t regex;
    char buffer[256];
    int ret;

    /* Compile regular expression */
    ret = regcomp(&regex, "\\b\\d{4}-\\d{2}-\\d{2}\\b", REG_EXTENDED);
    if(ret) {
        fprintf(stderr, "Could not compile regex\n");
        return NULL;
    }

    /* Execute regular expression */
    ret = regexec(&regex, file_name, 0, NULL, 0);
    if(!ret) {
        strncpy(buffer, file_name, sizeof(buffer));
        return buffer;
    } else if(ret == REG_NOMATCH) {
        return NULL;
    } else {
        fprintf(stderr, "Regex match failed\n");
        return NULL;
    }
}
```

**C++ Code:**

```cpp
#include <iostream>
#include <regex>
#include <string>

std::string extract_date_from_filename(const std::string& file_name) {
    std::smatch matches;
    std::regex e("\\b\\d{4}-\\d{2}-\\d{2}\\b");

    if(std::regex_search(file_name, matches, e)) {
        return matches.str();
    } else {
        return "";
    }
}
```

In both versions, the `extract_date_from_filename` function uses a regular expression to find a date in the format `YYYY-MM-DD`. If a match is found, it returns the date as a string; otherwise, it returns an empty string or `NULL`.

Please note that error handling has been kept minimal for simplicity. In real-world applications, you should handle errors more thoroughly.