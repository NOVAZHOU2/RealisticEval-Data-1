Sure! Below is an equivalent C++ test case using Catch2 for the provided Python unittest function `extract_date_from_filename`. Note that the C++ version assumes you have a similar function implementation in C++ and uses regular expressions to match dates in the same format (`YYYY-MM-DD`).

First, let's define the function in C++:

```cpp
#include <string>
#include <regex>

std::string extract_date_from_filename(const std::string& file_name) {
    // Regular expression to match dates in the format YYYY-MM-DD
    std::regex date_regex(R"(\d{4}-\d{2}-\d{2})");
    
    // Search for the date pattern in the file name
    auto match = std::smatch{};
    if (std::regex_search(file_name, match, date_regex)) {
        return match.str();
    }
    
    return "";
}
```

Now, let's write the corresponding test cases using Catch2:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"

// Function to be tested
std::string extract_date_from_filename(const std::string& file_name);

TEST_CASE("Extract date from filename", "[date]") {
    REQUIRE(extract_date_from_filename("report_2023-10-05.pdf") == "2023-10-05");
    REQUIRE(extract_date_from_filename("data_backup_2022-07-15.zip") == "2022-07-15");
    REQUIRE(extract_date_from_filename("log_file.txt") == "");
    REQUIRE(extract_date_from_filename("archive_2021-12-31.tar.gz") == "2021-12-31");
    REQUIRE(extract_date_from_filename("image_2020-01-01.png") == "2020-01-01");
    REQUIRE(extract_date_from_filename("video_2019-11-11.mp4") == "2019-11-11");
    REQUIRE(extract_date_from_filename("backup_2018-06-06.tar.bz2") == "2018-06-06");
    REQUIRE(extract_date_from_filename("snapshot_2017-04-04.jpg") == "2017-04-04");
    REQUIRE(extract_date_from_filename("notes_2016-12-31.docx") == "2016-12-31");
    REQUIRE(extract_date_from_filename("summary_2015-09-09.xlsx") == "2015-09-09");
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

In this C++ code:
- We include the necessary headers for strings and regular expressions.
- We define the `extract_date_from_filename` function, which uses a regular expression to find dates in the specified format.
- We create a Catch2 test suite named `Extract date from filename` with several test cases to verify the functionality of our function.

To run these tests, make sure you have Catch2 installed and properly configured in your build system. If you're using a modern CMake project, you can add the following lines to your `CMakeLists.txt`:

```cmake
find_package(Catch2 REQUIRED)
add_executable(your_test_executable your_test_file.cpp)
target_link_libraries(your_test_executable Catch2::Catch2)
```

Replace `your_test_executable` and `your_test_file.cpp` with appropriate names for your test executable and source file. Then, you can build and run your tests using your preferred build system.