Certainly! Here is the equivalent test class using Catch2 in C++. I will include the necessary headers, setup the test cases, and use appropriate assertions to ensure the functionality and logic are preserved.

### C++ Code Using Catch2

First, make sure you have Catch2 installed and included in your project. You can typically include Catch2 via a header-only library.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <regex>
#include <string>

// Function to extract the date from the filename
std::string extract_date_from_filename(const std::string& file_name) {
    // Define the regex pattern for matching a date in the format YYYY-MM-DD
    std::regex date_pattern(R"(\d{4}-\d{2}-\d{2})");
    
    // Search for the date pattern in the file name
    std::smatch match;
    
    // If a match is found, return the matched date; otherwise, return an empty string
    if (std::regex_search(file_name, match, date_pattern)) {
        return match.str(0);
    } else {
        return "";
    }
}

TEST_CASE("TestExtractDateFromFilename", "[extract_date_from_filename]") {
    SECTION("test_date_extraction_success") {
        // Test case where the date is successfully extracted.
        const std::string file_name = "report-2023-09-28.txt";
        const std::string expected_date = "2023-09-28";
        REQUIRE(extract_date_from_filename(file_name) == expected_date);
    }

    SECTION("test_no_date_in_filename") {
        // Test case where no date is present in the filename.
        const std::string file_name = "report.txt";
        REQUIRE(extract_date_from_filename(file_name).empty());
    }

    SECTION("test_multiple_dates_in_filename") {
        // Test case where multiple dates are present, should return the first one.
        const std::string file_name = "report-2023-09-28-backup-2023-10-01.txt";
        const std::string expected_date = "2023-09-28";
        REQUIRE(extract_date_from_filename(file_name) == expected_date);
    }

    SECTION("test_date_at_start_of_filename") {
        // Test case where the date is at the start of the filename.
        const std::string file_name = "2023-09-28-report.txt";
        const std::string expected_date = "2023-09-28";
        REQUIRE(extract_date_from_filename(file_name) == expected_date);
    }

    SECTION("test_incorrect_date_format") {
        // Test case where the date format is incorrect.
        const std::string file_name = "report-2023-99-99.txt";  // Invalid date
        const std::string expected_date = "";  // Since the regex does not match, it should return an empty string
        REQUIRE(extract_date_from_filename(file_name).empty());
    }
}
```

### Explanation:
1. **Header Inclusions**:
   - `#include <catch2/catch_test_macros.hpp>`: Required for Catch2 testing macros.
   - `#include <regex>`: Required for using regular expressions.
   - `#include <string>`: Required for using `std::string`.

2. **Function Definition**:
   - `std::string extract_date_from_filename(const std::string& file_name)`: This function extracts the date from the filename and returns an empty string if no valid date is found.

3. **Test Class**:
   - `TEST_CASE` macro defines the test suite.
   - Each `SECTION` macro defines individual test cases.

4. **Assertions**:
   - `REQUIRE` is used for assertions. It checks that the conditions are met and stops the test if they fail.

5. **Test Cases**:
   - `test_date_extraction_success`: Checks if the date is successfully extracted.
   - `test_no_date_in_filename`: Checks if no date is present in the filename.
   - `test_multiple_dates_in_filename`: Checks if multiple dates are present and returns the first one.
   - `test_date_at_start_of_filename`: Checks if the date is at the start of the filename.
   - `test_incorrect_date_format`: Checks if the date format is incorrect and returns an empty string.

This translation ensures that the functionality and logic of the tests are preserved while adhering to C++ standards and practices.