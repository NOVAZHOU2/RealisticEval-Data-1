Certainly! Here is the equivalent C++ code for the provided Python function, including comments and documentation adapted to C++ standards:

```cpp
#include <regex>
#include <string>

/**
 * Extracts the date in the format YYYY-MM-DD from the given file name.
 *
 * @param file_name The name of the file which may contain a date.
 * @return A std::string containing the extracted date in YYYY-MM-DD format if found, else an empty string.
 */
std::string extract_date_from_filename(const std::string& file_name) {
    // Define the regex pattern for matching a date in the format YYYY-MM-DD
    std::regex date_pattern(R"(\d{4}-\d{2}-\d{2})");
    
    // Search for the date pattern in the file name
    std::smatch match;
    
    // If a match is found, return the matched date; otherwise, return an empty string
    if (std::regex_search(file_name, match, date_pattern)) {
        return match.str(0);
    } else {
        return "";
    }
}
```

### Explanation:
1. **Header Inclusions**:
   - `#include <regex>`: Required for using regular expressions.
   - `#include <string>`: Required for using `std::string`.

2. **Function Signature**:
   - `std::string extract_date_from_filename(const std::string& file_name)`: This function takes a `const std::string&` (a reference to a string) as input and returns a `std::string`.

3. **Documentation**:
   - The docstring is converted into a multi-line comment using `/** */`.
   - The parameters and return values are documented using `@param` and `@return`.

4. **Regex Pattern**:
   - The regex pattern is defined using `std::regex` with a raw string literal `R"(\d{4}-\d{2}-\d{2})"`.

5. **Matching Logic**:
   - `std::regex_search` is used to find the pattern in the file name.
   - If a match is found, `match.str(0)` returns the matched string.
   - Otherwise, an empty string is returned.

This translation preserves the original functionality and structure of the Python code while adhering to C++ standards and practices.