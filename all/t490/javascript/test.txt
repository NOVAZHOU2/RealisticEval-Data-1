Certainly! Below is the equivalent Jest test suite for the given Python `unittest` test class. I'll provide a clear and detailed conversion, ensuring that the functionality and logic of the tests are maintained.

### Python Code with Unittest

```python
import unittest

def format_str(x: str) -> str:
    """
    Formats a string by prepending '> ' to each line and ensuring proper
    formatting of code blocks.

    Args:
        x (str): The input string to be formatted. If the input is not a
        string, it will be converted to one.

    Returns:
        str: The formatted string with each line prefixed by '> ' and
        with balanced code block delimiters.
    """
    if not isinstance(x, str):
        x = str(x)

    if x.count("```") % 2 == 1:
        x += "\n```"

    formatted_lines = ["> " + line for line in x.split("\n")]
    return "\n".join(formatted_lines)


class TestFormatStr(unittest.TestCase):

    def test_format_str(self):
        self.assertEqual(format_str("hello\nworld"), "> hello\n> world")
        self.assertEqual(format_str("```code\nhello\nworld```"), "> ```code\n> hello\n> world```")
        self.assertEqual(format_str(123), "> 123")

    def test_unbalanced_code_block(self):
        self.assertEqual(format_str("```code\nhello\nworld"), "> ```code\n> hello\n> world\n> ```")
        self.assertEqual(format_str("```code\nhello\nworld```\ncode"), "> ```code\n> hello\n> world```\n> code")


if __name__ == '__main__':
    unittest.main()
```

### JavaScript Code with Jest

```javascript
// Import the function to be tested
const formatStr = require('./formatStr');

describe('formatStr', () => {
    it('formats a simple string', () => {
        expect(formatStr("hello\nworld")).toBe("> hello\n> world");
    });

    it('formats a string with a balanced code block', () => {
        expect(formatStr("```code\nhello\nworld```")).toBe("> ```code\n> hello\n> world```");
    });

    it('formats a non-string input', () => {
        expect(formatStr(123)).toBe("> 123");
    });

    it('balances an unbalanced code block', () => {
        expect(formatStr("```code\nhello\nworld")).toBe("> ```code\n> hello\n> world\n> ```");
    });

    it('handles a complex unbalanced code block', () => {
        expect(formatStr("```code\nhello\nworld```\ncode")).toBe("> ```code\n> hello\n> world```\n> code");
    });
});

// The implementation of formatStr in JavaScript
function formatStr(x) {
    // Convert x to string if it's not already a string.
    if (typeof x !== 'string') {
        x = String(x);
    }

    // Ensure there is a matching number of code block delimiters.
    // If the count of delimiters is odd, append an additional one to balance.
    const delimiterCount = (x.match(/```/g) || []).length;
    if (delimiterCount % 2 === 1) {
        x += "\n```";
    }

    // Format each line by prepending '> ' and join them with newlines.
    const formattedLines = x.split("\n").map(line => "> " + line);

    // Return the final formatted string.
    return formattedLines.join("\n");
}

module.exports = formatStr;
```

### Explanation:
1. **Function Definition**: The `format_str` function is defined in a separate file (e.g., `formatStr.js`) and imported in the test file.
2. **Test Suite Structure**: The Jest test suite uses `describe` and `it` blocks to organize the tests.
3. **Assertions**: The `unittest` `assertEqual` method is replaced with Jest's `expect` and `toBe` methods.
4. **Data Types**: The conversion of non-string inputs to strings is preserved in the JavaScript implementation.
5. **Balancing Code Blocks**: The logic for balancing code blocks is kept the same.
6. **Formatting Lines**: The logic for formatting lines by prepending `'> '` is also kept the same.

By following these steps, the Jest test suite accurately reflects the functionality and logic of the original Python unittest tests.