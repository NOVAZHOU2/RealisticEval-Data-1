Certainly! Here is the equivalent Jest test suite for the given Python unittest class. I'll convert each test case and ensure that the functionality and logic are maintained.

### Python unittest Code

```python
import unittest

class TestFormatStr(unittest.TestCase):

    def test_simple_string(self):
        """Test a simple string input."""
        input_str = "Hello, World!"
        expected_output = "> Hello, World!"
        self.assertEqual(format_str(input_str), expected_output)

    def test_multiline_string(self):
        """Test a multiline string input."""
        input_str = "Line 1\nLine 2\nLine 3"
        expected_output = "> Line 1\n> Line 2\n> Line 3"
        self.assertEqual(format_str(input_str), expected_output)

    def test_code_block_delimiters_even(self):
        """Test a string with an even number of code block delimiters."""
        input_str = "Some code:\n```\nprint('Hello')\n```"
        expected_output = "> Some code:\n> ```\n> print('Hello')\n> ```"
        self.assertEqual(format_str(input_str), expected_output)

    def test_code_block_delimiters_odd(self):
        """Test a string with an odd number of code block delimiters."""
        input_str = "Some code:\n```\nprint('Hello')"
        expected_output = "> Some code:\n> ```\n> print('Hello')\n> ```"
        self.assertEqual(format_str(input_str), expected_output)

    def test_non_string_input(self):
        """Test non-string input (e.g., integer) to ensure it's converted."""
        input_value = 123
        expected_output = "> 123"
        self.assertEqual(format_str(input_value), expected_output)
```

### Equivalent Jest Test Suite

Here is the equivalent Jest test suite:

```javascript
const formatStr = require('./formatStr'); // Assuming formatStr is defined in a separate file

describe('TestFormatStr', () => {
    it('test_simple_string', () => {
        // Test a simple string input.
        const inputStr = "Hello, World!";
        const expectedOutput = "> Hello, World!";
        expect(formatStr(inputStr)).toBe(expectedOutput);
    });

    it('test_multiline_string', () => {
        // Test a multiline string input.
        const inputStr = "Line 1\nLine 2\nLine 3";
        const expectedOutput = "> Line 1\n> Line 2\n> Line 3";
        expect(formatStr(inputStr)).toBe(expectedOutput);
    });

    it('test_code_block_delimiters_even', () => {
        // Test a string with an even number of code block delimiters.
        const inputStr = "Some code:\n```\nprint('Hello')\n```";
        const expectedOutput = "> Some code:\n> ```\n> print('Hello')\n> ```";
        expect(formatStr(inputStr)).toBe(expectedOutput);
    });

    it('test_code_block_delimiters_odd', () => {
        // Test a string with an odd number of code block delimiters.
        const inputStr = "Some code:\n```\nprint('Hello')";
        const expectedOutput = "> Some code:\n> ```\n> print('Hello')\n> ```";
        expect(formatStr(inputStr)).toBe(expectedOutput);
    });

    it('test_non_string_input', () => {
        // Test non-string input (e.g., integer) to ensure it's converted.
        const inputValue = 123;
        const expectedOutput = "> 123";
        expect(formatStr(inputValue)).toBe(expectedOutput);
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `formatStr` function is imported from a separate file using `require('./formatStr')`. This assumes that the `formatStr` function is defined in another file.

2. **Describe Block**:
   - The `describe` block groups all the test cases under the `TestFormatStr` suite.

3. **Test Cases**:
   - Each test case is defined using the `it` function.
   - The descriptions of the test cases are included as comments within the test functions.
   - The `expect` function is used to assert the expected output using `toBe`.

4. **Assertions**:
   - The `toBe` matcher is used to check if the actual output matches the expected output exactly.

This Jest test suite ensures that the functionality and logic of the Python unittest class are preserved and clearly structured.