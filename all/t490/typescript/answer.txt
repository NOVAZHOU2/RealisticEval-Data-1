Here's how you can convert the Python code to TypeScript:

```typescript
function formatStr(x: string): string {
    /**
     * Formats a string by prepending '> ' to each line and ensuring proper
     * formatting of code blocks.
     *
     * @param {string} x - The input string to be formatted. If the input is not a
     * string, it will be converted to one.
     *
     * @returns {string} - The formatted string with each line prefixed by '> ' and
     * with balanced code block delimiters.
     */
    if (typeof x !== "string") {
        x = String(x);
    }

    let formattedString = "";
    const lines = x.split('\n');

    for (let i = 0; i < lines.length; i++) {
        if (lines[i].trim().startsWith('```')) {
            formattedString += lines[i] + '\n';
        } else {
            formattedString += "> " + lines[i] + '\n';
        }
    }

    return formattedString;
}
```

In this TypeScript version of your function, I've used `typeof` to check if `x` is a string and then converted it using `String()` if necessary. The rest of the logic remains largely the same as in the original Python code.