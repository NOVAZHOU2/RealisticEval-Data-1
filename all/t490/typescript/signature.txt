Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Formats a string by prepending '> ' to each line and ensuring proper
 * formatting of code blocks.
 *
 * @param {string} x - The input string to be formatted. If the input is not a
 *                     string, it will be converted to one.
 * @returns {string} - The formatted string with each line prefixed by '> ' and
 *                     with balanced code block delimiters.
 */
function formatStr(x: any): string {
    // Convert x to string if it's not already a string.
    let strX = typeof x === 'string' ? x : String(x);

    // Ensure there is a matching number of code block delimiters.
    // If the count of delimiters is odd, append an additional one to balance.
    const delimiterCount = (strX.match(/```/g) || []).length;
    if (delimiterCount % 2 === 1) {
        strX += "\n```";
    }

    // Format each line by prepending '> ' and join them with newlines.
    const formattedLines = strX.split("\n").map(line => "> " + line);

    // Return the final formatted string.
    return formattedLines.join("\n");
}

// Example usage
const input = "This is a test\nIt works well\n```code block\nMore code here\n```";
console.log(formatStr(input));
```

### Explanation:
1. **Function Signature**: The function `formatStr` is defined with a parameter `x` of type `any`, which ensures that the input can be of any type but will be converted to a string.
2. **JSDoc Documentation**: The function is documented using JSDoc-style comments, providing clear descriptions of the parameters and return value.
3. **Type Conversion**: The input `x` is checked and converted to a string if it is not already a string.
4. **Delimiter Count**: The number of code block delimiters (`"```"`) is counted using a regular expression and adjusted if the count is odd.
5. **Formatting Lines**: Each line is prepended with `"> "` and then joined back together with newlines.
6. **Return Value**: The final formatted string is returned.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and documentation conventions.