Sure! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class. Note that since you didn't provide the actual test methods from the Python unittest class, I'll assume some basic tests based on the functionality described in the docstring.

```typescript
import { formatStr } from './path-to-your-format-str-function'; // Adjust the import path accordingly

describe('formatStr', () => {
  it('should prepend "> " to each line', () => {
    const input = "Line 1\nLine 2";
    const expectedOutput = "> Line 1\n> Line 2";
    expect(formatStr(input)).toBe(expectedOutput);
  });

  it('should handle empty strings correctly', () => {
    const input = "";
    const expectedOutput = "";
    expect(formatStr(input)).toBe(expectedOutput);
  });

  it('should handle single-line strings correctly', () => {
    const input = "Single line";
    const expectedOutput = "> Single line";
    expect(formatStr(input)).toBe(expectedOutput);
  });

  it('should balance code block delimiters', () => {
    const input = "```\nCode block\n```";
    const expectedOutput = "```\n> Code block\n```";
    expect(formatStr(input)).toBe(expectedOutput);
  });
});
```

In this TypeScript test case:

1. We import the `formatStr` function from the appropriate module.
2. We use `describe` to group related tests together.
3. Each `it` block contains a specific test case, and we use `expect` to assert that the output of `formatStr` matches the expected result.

Make sure to adjust the import path (`./path-to-your-format-str-function`) to match where your `formatStr` function is located.