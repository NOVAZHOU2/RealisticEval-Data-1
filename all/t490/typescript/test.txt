Certainly! Here is the equivalent TypeScript test class using Jest, along with the necessary setup and imports. The provided Python unittest class will be converted to a Jest test suite, ensuring that the functionality and logic of the tests are preserved.

### TypeScript Code

First, ensure you have Jest installed in your project:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Then, configure Jest in your `tsconfig.json` and `jest.config.js` files:

**tsconfig.json**

```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "skipLibCheck": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

**jest.config.js**

```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest'
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
};
```

### TypeScript Test Class

Here is the TypeScript test class using Jest:

```typescript
import { formatStr } from './path/to/format-str'; // Import the formatStr function

describe('TestFormatStr', () => {
  it('test simple string', () => {
    /** Test a simple string input. */
    const inputStr = "Hello, World!";
    const expectedOutput = "> Hello, World!";
    expect(formatStr(inputStr)).toEqual(expectedOutput);
  });

  it('test multiline string', () => {
    /** Test a multiline string input. */
    const inputStr = "Line 1\nLine 2\nLine 3";
    const expectedOutput = "> Line 1\n> Line 2\n> Line 3";
    expect(formatStr(inputStr)).toEqual(expectedOutput);
  });

  it('test code block delimiters even', () => {
    /** Test a string with an even number of code block delimiters. */
    const inputStr = "Some code:\n```\nprint('Hello')\n```";
    const expectedOutput = "> Some code:\n> ```\n> print('Hello')\n> ```";
    expect(formatStr(inputStr)).toEqual(expectedOutput);
  });

  it('test code block delimiters odd', () => {
    /** Test a string with an odd number of code block delimiters. */
    const inputStr = "Some code:\n```\nprint('Hello')";
    const expectedOutput = "> Some code:\n> ```\n> print('Hello')\n> ```";
    expect(formatStr(inputStr)).toEqual(expectedOutput);
  });

  it('test non-string input', () => {
    /** Test non-string input (e.g., integer) to ensure it's converted. */
    const inputValue = 123;
    const expectedOutput = "> 123";
    expect(formatStr(inputValue)).toEqual(expectedOutput);
  });
});
```

### Explanation:
1. **Imports**: The `formatStr` function is imported from the appropriate file.
2. **Describe Block**: The `describe` block groups all the tests under the `TestFormatStr` suite.
3. **Test Cases**: Each `it` block represents a specific test case, with a descriptive comment using JSDoc-style comments.
4. **Assertions**: The `expect` function is used with `toEqual` to compare the actual output with the expected output.

This setup ensures that the tests are structured similarly to the Python unittest class and use Jest's assertion methods to validate the behavior of the `formatStr` function.