To convert the given Python unittest test class into a C++ Catch2 test case, we need to follow these steps:

1. Include the necessary headers for Catch2.
2. Define the function `format_str` in C++.
3. Write a test case using Catch2's syntax to verify the functionality of `format_str`.

Here's how you can do it:

### Step 1: Include Necessary Headers

First, include the Catch2 header in your C++ file. Make sure you have Catch2 installed and properly linked in your project.

```cpp
#include <catch2/catch.hpp>
```

### Step 2: Define the Function `format_str`

Define the `format_str` function in C++. Note that C++ does not have type hints like Python, so we'll assume the function takes a `std::string` and returns a `std::string`.

```cpp
#include <string>

std::string format_str(const std::string& x) {
    // Implementation of the format_str function goes here
    std::string result;
    size_t pos = 0;
    while (pos < x.size()) {
        if (x[pos] == '\n') {
            result += "> ";
            pos++;
        } else {
            size_t endOfLine = x.find('\n', pos);
            if (endOfLine == std::string::npos) {
                endOfLine = x.size();
            }
            result.append(x, pos, endOfLine - pos).append("\n");
            pos = endOfLine + 1;
        }
    }
    return result;
}
```

### Step 3: Write a Test Case Using Catch2

Now, write a test case using Catch2's syntax to verify the functionality of `format_str`. Here's an example:

```cpp
TEST_CASE("Test format_str function", "[format_str]") {
    CHECK(format_str("") == "");
    CHECK(format_str("Hello") == "> Hello\n");
    CHECK(format_str("Hello\nWorld") == "> Hello\n> World\n");
    CHECK(format_str("Code:\nint main() {\n    return 0;\n}\n") ==
          "> Code:\n> int main() {\n>     return 0;\n> }\n>");
}
```

### Full Example

Here's the complete C++ code including the function definition and the test case:

```cpp
#include <iostream>
#include <string>
#include <catch2/catch.hpp>

// Function to format a string
std::string format_str(const std::string& x) {
    std::string result;
    size_t pos = 0;
    while (pos < x.size()) {
        if (x[pos] == '\n') {
            result += "> ";
            pos++;
        } else {
            size_t endOfLine = x.find('\n', pos);
            if (endOfLine == std::string::npos) {
                endOfLine = x.size();
            }
            result.append(x, pos, endOfLine - pos).append("\n");
            pos = endOfLine + 1;
        }
    }
    return result;
}

// Test cases using Catch2
TEST_CASE("Test format_str function", "[format_str]") {
    CHECK(format_str("") == "");
    CHECK(format_str("Hello") == "> Hello\n");
    CHECK(format_str("Hello\nWorld") == "> Hello\n> World\n");
    CHECK(format_str("Code:\nint main() {\n    return 0;\n}\n") ==
          "> Code:\n> int main() {\n>     return 0;\n> }\n>");
}
```

This C++ code defines the `format_str` function and includes a set of test cases using Catch2 to ensure its correctness. Make sure to link against the Catch2 library when compiling your program.