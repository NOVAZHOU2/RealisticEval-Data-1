Sure! Below is the equivalent C++ code for the given Python function:

```cpp
#include <iostream>
#include <string>
#include <sstream>

std::string format_str(const std::string& x) {
    /**
     * Formats a string by prepending '> ' to each line and ensuring proper
     * formatting of code blocks.
     *
     * @param x The input string to be formatted. If the input is not a
     * string, it will be converted to one.
     *
     * @return The formatted string with each line prefixed by '> ' and
     * with balanced code block delimiters.
     */
    
    std::istringstream iss(x);
    std::ostringstream oss;
    std::string line;

    while (std::getline(iss, line)) {
        if (!line.empty()) {
            // Check for code block start/end markers
            size_t pos = 0;
            while ((pos = line.find("```", pos)) != std::string::npos) {
                // Prepend "> " before every line in the code block
                size_t end_pos = line.find("\n", pos);
                if (end_pos == std::string::npos) {
                    end_pos = line.size();
                }
                std::string code_block = line.substr(pos, end_pos - pos + 1);
                std::istringstream code_iss(code_block);
                std::ostringstream code_oss;
                std::string code_line;

                while (std::getline(code_iss, code_line)) {
                    code_oss << "> " << code_line << '\n';
                }

                line.replace(pos, end_pos - pos + 1, code_oss.str());
                pos += code_oss.str().size();
            }
            oss << "> " << line << '\n';
        } else {
            oss << '\n'; // Preserve empty lines
        }
    }

    return oss.str();
}

int main() {
    std::string input = "This is a test.\n\n```\ncode here\n```";
    std::cout << format_str(input);
    return 0;
}
```

### Explanation:
1. **String Stream**: We use `std::istringstream` to read the input string line by line.
2. **Output String Stream**: We use `std::ostringstream` to build the formatted string.
3. **Line Processing**: For each line, we check if it contains a code block marker (`"```"`). If it does, we process the code block separately, prepending `"> "` to each line within the block.
4. **Empty Lines**: We preserve empty lines in the output.
5. **Main Function**: The `main` function demonstrates how to use the `format_str` function with an example input.

This C++ code should achieve the same functionality as the provided Python code.