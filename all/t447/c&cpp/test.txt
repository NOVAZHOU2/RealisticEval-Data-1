Hereâ€™s the equivalent Catch2 test case in C++ based on your Jest test case:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <ctime>
#include <sstream>
#include <iomanip>

int calculateAge(const std::string& birthDateString);

TEST_CASE("calculateAge", "[age]") {
    SECTION("calculates age correctly for a birth date in the past") {
        REQUIRE(calculateAge("2000-01-01") == (std::time(0) / (365.25 * 24 * 60 * 60)) - 2000);
    }

    SECTION("calculates age correctly for a birth date in the long past") {
        REQUIRE(calculateAge("1000-01-01") == (std::time(0) / (365.25 * 24 * 60 * 60)) - 1000);
    }

    SECTION("calculates age correctly for a birth date today") {
        std::time_t now = std::time(0);
        std::tm* today = std::localtime(&now);
        std::ostringstream oss;
        oss << std::put_time(today, "%Y-%m-%d");
        REQUIRE(calculateAge(oss.str()) == 0);
    }

    SECTION("calculates age correctly for a person born yesterday") {
        std::time_t now = std::time(0);
        std::tm* yesterday = std::localtime(&now);
        yesterday->tm_mday--; // Set to yesterday
        std::mktime(yesterday); // Normalize the structure
        std::ostringstream oss;
        oss << std::put_time(yesterday, "%Y-%m-%d");
        REQUIRE(calculateAge(oss.str()) == 0);
    }
}
```

### Explanation:
- Each test case is encapsulated within a `SECTION` macro.
- The `REQUIRE` macro is used for assertions.
- The current date and time handling uses C++'s `<ctime>` and `<iomanip>` libraries to format dates.
- The calculation for age for past dates uses a rough approximation based on seconds, which may need refinement for exact year handling.