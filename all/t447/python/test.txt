Sure! Below is the equivalent Python unit test case using the `unittest` framework for the JavaScript function you provided.

```python
import unittest
from datetime import datetime

def calculate_age(birth_date_string):
    # Convert the birth date string to a datetime object
    birth_date = datetime.strptime(birth_date_string, '%Y-%m-%d')
    
    # Get today's date
    today = datetime.today()
    
    # Calculate the difference in years
    age = today.year - birth_date.year
    
    # Adjust the age if the current month and day are before the birth month and day
    if (today.month, today.day) < (birth_date.month, birth_date.day):
        age -= 1
    
    return age

class TestCalculateAge(unittest.TestCase):
    def test_calculate_age(self):
        self.assertEqual(calculate_age('2000-01-01'), 23)
        self.assertEqual(calculate_age('1990-05-15'), 33)
        self.assertEqual(calculate_age('2005-12-25'), 18)
        self.assertEqual(calculate_age('1985-07-04'), 38)

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
1. **Function Definition**: The `calculate_age` function takes a birth date string in the format 'YYYY-MM-DD' and calculates the age.
2. **Date Conversion**: It converts the birth date string to a `datetime` object using `datetime.strptime`.
3. **Today's Date**: It gets today's date using `datetime.today()`.
4. **Age Calculation**: It calculates the initial age by subtracting the birth year from the current year. If the current month and day are before the birth month and day, it decrements the age by one.

### Unit Tests:
The `TestCalculateAge` class contains several test cases to verify the correctness of the `calculate_age` function. Each test case checks if the function returns the expected age for different birth dates.

To run the tests, simply execute the Python script. The `unittest` framework will automatically discover and run all the test methods defined in the class.