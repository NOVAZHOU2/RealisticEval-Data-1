Certainly! Below is the equivalent Java code with the same functionality and comments:

```java
/**
 * Calculate age based on the birth date string entered by the user.
 * Input birthDateString format such as "yyyy-MM-dd"
 *
 * @param birthDateString The birth date string in the format "yyyy-MM-dd".
 * @return The calculated age or an error message if the input is invalid.
 */
public String calculateAge(String birthDateString) {
    // Your implementation goes here
}
```

Please note that you will need to implement the actual logic inside the `calculateAge` method to convert the birth date string into an age. Here's a basic example of how you might do it using Java's `LocalDate` class:

```java
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

/**
 * Calculate age based on the birth date string entered by the user.
 * Input birthDateString format such as "yyyy-MM-dd"
 *
 * @param birthDateString The birth date string in the format "yyyy-MM-dd".
 * @return The calculated age or an error message if the input is invalid.
 */
public String calculateAge(String birthDateString) {
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    try {
        LocalDate birthDate = LocalDate.parse(birthDateString, formatter);
        LocalDate currentDate = LocalDate.now();
        Period period = Period.between(birthDate, currentDate);
        return String.valueOf(period.getYears());
    } catch (DateTimeParseException e) {
        return "Invalid date format. Please use yyyy-MM-dd.";
    }
}
```

This code uses Java's `DateTimeFormatter` to parse the birth date string and calculates the age using `Period`. If the input string does not match the expected format, it catches the `DateTimeParseException` and returns an error message.