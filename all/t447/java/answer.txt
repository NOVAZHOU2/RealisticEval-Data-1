Sure! Here's how you can convert the given JavaScript function into Java:

```java
import java.time.LocalDate;
import java.time.Period;

public class AgeCalculator {

    /**
     * Calculate age based on the birth date string entered by the user.
     * Input birthDateString format such as "2000-01-01".
     *
     * @param birthDateString The birth date in the format "yyyy-MM-dd".
     * @return The calculated age or -1 if the input is invalid.
     */
    public static int calculateAge(String birthDateString) {
        try {
            LocalDate birthDate = LocalDate.parse(birthDateString);
            LocalDate currentDate = LocalDate.now();
            Period period = Period.between(birthDate, currentDate);
            return period.getYears();
        } catch (Exception e) {
            // Handle invalid date format or other exceptions
            System.err.println("Invalid birth date format: " + birthDateString);
            return -1;
        }
    }

    public static void main(String[] args) {
        String birthDateString = "2000-01-01";
        int age = calculateAge(birthDateString);
        System.out.println("Age: " + age);
    }
}
```

### Explanation:
1. **Imports**: We import `LocalDate`, `Period` from `java.time` package to handle dates and periods respectively.
2. **Class and Method**: The function is encapsulated within a class named `AgeCalculator`.
3. **Try-Catch Block**: We use a try-catch block to handle potential parsing errors for the date string.
4. **Calculate Age**: If the date string is valid, we parse it into a `LocalDate`, get the current date using `LocalDate.now()`, and then compute the age using `Period.between()`.
5. **Return Value**: The method returns the age as an integer. If there is any error during parsing, it returns `-1`.

This Java code will perform the same functionality as your JavaScript function.