Sure! Here is the equivalent Java code for the JavaScript function you provided:

```java
import java.time.LocalDate;
import java.time.Period;

/**
 * Calculate age based on the birth date string entered by the user.
 * Input birthDateString format such as "2000-01-01"
 *
 * @param birthDateString The birth date in the format "yyyy-MM-dd".
 * @return The calculated age or an error message if the input is invalid.
 */
public class AgeCalculator {

    public static String calculateAge(String birthDateString) {
        try {
            // Parse the birth date string into a LocalDate object
            LocalDate birthDate = LocalDate.parse(birthDateString);
            
            // Get the current date
            LocalDate currentDate = LocalDate.now();
            
            // Calculate the period between the current date and the birth date
            Period period = Period.between(birthDate, currentDate);
            
            // Return the age in years
            return String.valueOf(period.getYears());
        } catch (Exception e) {
            // If there is an exception, return an error message
            return "Invalid date format";
        }
    }

    public static void main(String[] args) {
        // Example usage
        System.out.println(calculateAge("2000-01-01")); // Output will depend on the current date
    }
}
```

### Explanation:
1. **Imports**: We import `LocalDate` and `Period` from the `java.time` package to handle dates and periods.
2. **Class Definition**: We define a class `AgeCalculator` with a static method `calculateAge`.
3. **Parsing the Date**: We use `LocalDate.parse()` to convert the input string into a `LocalDate` object.
4. **Getting Current Date**: We get the current date using `LocalDate.now()`.
5. **Calculating Age**: We use `Period.between()` to calculate the difference between the current date and the birth date, which gives us a `Period` object containing the age in years.
6. **Returning the Age**: We return the age as a string.
7. **Error Handling**: If the input date string is not valid, we catch the exception and return an error message.

This Java code should work similarly to your original JavaScript function.