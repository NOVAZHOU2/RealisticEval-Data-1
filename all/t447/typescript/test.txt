Sure! Below is the TypeScript version of your Jest test case using `describe`:

```typescript
import { calculateAge } from './path-to-your-calculate-age-function'; // Adjust the import path accordingly

describe('calculateAge function', () => {
  it('should return the correct age for a valid birth date', () => {
    const birthDateString = '2000-01-01';
    const currentYear = new Date().getFullYear();
    const expectedAge = currentYear - 2000;

    expect(calculateAge(birthDateString)).toBe(expectedAge);
  });

  it('should handle leap years correctly', () => {
    const birthDateString = '2004-02-29';
    const currentYear = new Date().getFullYear();
    let expectedAge = currentYear - 2004;

    if (currentYear % 4 === 0 && (currentYear % 100 !== 0 || currentYear % 400 === 0)) {
      expectedAge++;
    }

    expect(calculateAge(birthDateString)).toBe(expectedAge);
  });

  it('should return an error message for invalid dates', () => {
    const birthDateString = 'invalid-date';

    expect(() => calculateAge(birthDateString)).toThrowError('Invalid date');
  });
});
```

### Explanation:
1. **Import Statement**: The `calculateAge` function is imported from the appropriate file.
2. **Describe Block**: The `describe` block groups related tests together under the name "calculateAge function".
3. **It Blocks**:
   - The first `it` block tests the basic functionality of calculating age with a valid birth date.
   - The second `it` block checks how the function handles leap years.
   - The third `it` block ensures that the function throws an error when an invalid date is provided.

Make sure to adjust the import statement and any other paths according to your project structure.