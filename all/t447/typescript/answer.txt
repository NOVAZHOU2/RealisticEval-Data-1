Certainly! Below is the TypeScript version of your JavaScript function with type annotations added:

```typescript
/**
 * Calculate age based on the birth date string entered by the user.
 * Input birthDateString format such as "2000-01-01".
 * @param birthDateString - The birth date in ISO format (YYYY-MM-DD).
 * @returns {string | number} - The calculated age or an error message.
 */
function calculateAge(birthDateString: string): string | number {
    // Check if the input is a valid date string
    const birthDate = new Date(birthDateString);
    if (isNaN(birthDate.getTime())) {
        return "Invalid date format";
    }

    // Get today's date
    const today = new Date();

    // Calculate the difference in years
    let age = today.getFullYear() - birthDate.getFullYear();

    // Adjust the age if the current month is before the birth month or 
    // if it's the same month but the day is before the birth day
    const monthDiff = today.getMonth() - birthDate.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }

    return age;
}

// Example usage:
const age = calculateAge("2000-01-01");
console.log(age); // Output will be the calculated age
```

In this TypeScript version:
- The `birthDateString` parameter is annotated as `string`.
- The function returns either a `string` (if the date is invalid) or a `number` (if the date is valid).
- The function checks if the provided date string is valid and calculates the age accordingly.
- The example usage demonstrates how to call the function and log the result.