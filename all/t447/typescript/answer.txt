Certainly! Below is the TypeScript version of your JavaScript function with appropriate type annotations:

```typescript
/**
 * Calculate age based on the birth date string entered by the user.
 * Input birthDateString format such as "2000-01-01".
 * @param birthDateString - The birth date in ISO format (YYYY-MM-DD).
 * @returns {string | number} - The calculated age or an error message if the input is invalid.
 */
function calculateAge(birthDateString: string): string | number {
    const birthDate = new Date(birthDateString);
    
    // Check if the birth date is valid
    if (isNaN(birthDate.getTime())) {
        return 'Invalid birth date';
    }

    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();

    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }

    return age;
}

// Example usage:
const age = calculateAge('2000-01-01');
console.log(age); // Output will vary depending on the current date
```

### Explanation:
1. **Type Annotations**: 
   - `birthDateString` parameter is annotated as `string`.
   - The function returns either a `string` (if the input is invalid) or a `number` (the calculated age).

2. **Validation**:
   - The `new Date(birthDateString)` creates a `Date` object from the input string.
   - `isNaN(birthDate.getTime())` checks if the creation of the `Date` object was successful (i.e., the input is a valid date).

3. **Age Calculation**:
   - The age is initially calculated by subtracting the birth year from the current year.
   - Additional checks are made to adjust the age if the current month is before the birth month or if it's the same month but the day is before the birth day.

4. **Example Usage**:
   - Demonstrates how to call the `calculateAge` function and log the result.

This TypeScript version ensures that the function parameters and return values are correctly typed, enhancing type safety and making the code easier to understand and maintain.