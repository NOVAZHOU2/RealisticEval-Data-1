Sure! Below is the equivalent Java code for the JavaScript function `createMatrix`:

```java
import java.util.Arrays;

/**
 * Creates a matrix with the specified number of rows and columns,
 * filled with the given initial value.
 *
 * @param rows        The number of rows in the matrix.
 * @param columns     The number of columns in the matrix.
 * @param initialValue The value to fill the matrix with.
 *                    It can be of any type (int, String, Object, etc.).
 * @return A two-dimensional array (matrix) filled with the initial value.
 */
public class MatrixCreator {

    public static Object[][] createMatrix(int rows, int columns, Object initialValue) {
        Object[][] matrix = new Object[rows][columns];
        
        for (int i = 0; i < rows; i++) {
            Arrays.fill(matrix[i], initialValue);
        }
        
        return matrix;
    }

    public static void main(String[] args) {
        // Example usage:
        Object[][] matrix = createMatrix(3, 4, "Hello");
        
        for (Object[] row : matrix) {
            System.out.println(Arrays.toString(row));
        }
    }
}
```

### Explanation:
1. **Import Statement**: We import `java.util.Arrays` to use the `Arrays.fill` method.
2. **Class Definition**: We define a class `MatrixCreator` to encapsulate our method.
3. **Method Signature**: The `createMatrix` method takes three parameters: `rows`, `columns`, and `initialValue`. It returns a two-dimensional `Object` array.
4. **Matrix Initialization**: We initialize the matrix using `new Object[rows][columns]`.
5. **Filling the Matrix**: We use nested loops to fill each element of the matrix with the `initialValue`. The inner loop uses `Arrays.fill` to set all elements in the current row to the `initialValue`.
6. **Example Usage**: In the `main` method, we demonstrate how to call the `createMatrix` method and print the resulting matrix.

This Java code should work similarly to your original JavaScript function, creating a matrix filled with the specified initial value.