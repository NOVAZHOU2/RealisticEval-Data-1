Here's the equivalent Java code for the provided JavaScript function:

```java
import java.util.Arrays;

/**
 * Creates a matrix with the specified number of rows and columns,
 * filled with the given initial value.
 *
 * @param rows        The number of rows in the matrix.
 * @param columns     The number of columns in the matrix.
 * @param initialValue  The value to fill the matrix with.
 *                      It can be of any type (int, String, Object, etc.).
 * @return A two-dimensional array (matrix) filled with the initial value.
 */
public static <T> T[][] createMatrix(int rows, int columns, T initialValue) {
    @SuppressWarnings("unchecked")
    T[][] matrix = (T[][]) new Object[rows][columns];
    
    for (int i = 0; i < rows; i++) {
        Arrays.fill(matrix[i], initialValue);
    }
    
    return matrix;
}
```

### Explanation:
1. **Generic Type `<T>`**: The method is generic, allowing it to work with any data type (`int`, `String`, `Object`, etc.).
2. **Object Array Initialization**: Since Java doesn't allow direct initialization of generic arrays, we use an `Object` array and cast it to `T[][]`.
3. **Arrays.fill()**: We use `Arrays.fill()` to fill each row of the matrix with the initial value.

### Usage Example:
```java
public static void main(String[] args) {
    Integer[][] matrix = createMatrix(3, 4, 5);

    // Print the matrix
    for (Integer[] row : matrix) {
        System.out.println(Arrays.toString(row));
    }
}
```
This will output:
```
[5, 5, 5, 5]
[5, 5, 5, 5]
[5, 5, 5, 5]
```

This Java code should provide similar functionality to your original JavaScript function.