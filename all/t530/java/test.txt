Sure! Below is the equivalent Java JUnit test case for the provided JavaScript function `createMatrix`. This Java code uses JUnit 5 for testing.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.Arrays;

import org.junit.jupiter.api.Test;

public class Tester {

    /**
     * Tests the createMatrix method with various inputs.
     */
    @Test
    public void testCreateMatrix() {
        // Test with integer values
        int[][] matrix1 = createMatrix(2, 3, 4);
        assertEquals(2, matrix1.length);
        assertEquals(3, matrix1[0].length);
        for (int[] row : matrix1) {
            Arrays.fill(row, 4);
        }

        // Test with string values
        String[][] matrix2 = createMatrix(3, 2, "test");
        assertEquals(3, matrix2.length);
        assertEquals(2, matrix2[0].length);
        for (String[] row : matrix2) {
            Arrays.fill(row, "test");
        }

        // Test with null values
        Object[][] matrix3 = createMatrix(1, 1, null);
        assertEquals(1, matrix3.length);
        assertEquals(1, matrix3[0].length);
        assertNull(matrix3[0][0]);

        // Test with different dimensions
        int[][] matrix4 = createMatrix(0, 0, 1);
        assertNotNull(matrix4);
        assertEquals(0, matrix4.length);

        int[][] matrix5 = createMatrix(5, 1, "hello");
        assertEquals(5, matrix5.length);
        assertEquals(1, matrix5[0].length);
        for (String[] row : matrix5) {
            Arrays.fill(row, "hello");
        }
    }

    /**
     * Creates a matrix with the specified number of rows and columns,
     * filled with the given initial value.
     *
     * @param rows - The number of rows in the matrix.
     * @param columns - The number of columns in the matrix.
     * @param initialValue - The value to fill the matrix with.
     *                          It can be of any type (number, string, object, etc.).
     * @returns {Array} A two-dimensional array (matrix) filled with the initial value.
     */
    private static <T> T[][] createMatrix(int rows, int columns, T initialValue) {
        if (rows <= 0 || columns <= 0) {
            return (T[][]) new Object[0][];
        }

        T[][] matrix = (T[][]) new Object[rows][columns];
        for (int i = 0; i < rows; i++) {
            Arrays.fill(matrix[i], initialValue);
        }

        return matrix;
    }
}
```

### Explanation:
1. **Annotations**: The `@Test` annotation marks the `testCreateMatrix` method as a test method.
2. **Assertions**: The `assertEquals` and `assertNull` methods from JUnit are used to verify that the output of the `createMatrix` method matches the expected results.
3. **Generic Method**: The `createMatrix` method is made generic to handle different types of initial values.
4. **Edge Cases**: The test includes edge cases such as zero dimensions and null values.

This Java code should provide a comprehensive test suite for the `createMatrix` function.