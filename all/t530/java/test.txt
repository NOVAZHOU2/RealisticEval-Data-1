Sure! Below is the equivalent Java JUnit test case for your JavaScript Jest test code.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.Arrays;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class Tester {

    private MatrixUtil matrixUtil;

    @BeforeEach
    public void setUp() {
        matrixUtil = new MatrixUtil();
    }

    @Test
    public void testCreateMatrixWithIntegers() {
        int[][] result = matrixUtil.createMatrix(3, 4, 5);
        assertEquals(3, result.length);
        for (int[] row : result) {
            assertNotNull(row);
            assertEquals(4, row.length);
            Arrays.fill(row, 5); // Verify all elements are 5
        }
    }

    @Test
    public void testCreateMatrixWithString() {
        String[][] result = matrixUtil.createMatrix(2, 3, "hello");
        assertEquals(2, result.length);
        for (String[] row : result) {
            assertNotNull(row);
            assertEquals(3, row.length);
            for (String element : row) {
                assertEquals("hello", element); // Verify all elements are "hello"
            }
        }
    }

    @Test
    public void testCreateMatrixWithObject() {
        Object[][] result = matrixUtil.createMatrix(1, 2, new Object());
        assertEquals(1, result.length);
        for (Object[] row : result) {
            assertNotNull(row);
            assertEquals(2, row.length);
            for (Object element : row) {
                assertSame(new Object(), element); // Verify all elements are the same object
            }
        }
    }
}

class MatrixUtil {
    public <T> T[][] createMatrix(int rows, int columns, T initialValue) {
        @SuppressWarnings("unchecked")
        T[][] matrix = (T[][]) new Object[rows][columns];
        for (int i = 0; i < rows; i++) {
            Arrays.fill(matrix[i], initialValue);
        }
        return matrix;
    }
}
```

### Explanation:
1. **Package and Class**: The package is `org.real.temp` and the class is `Tester`.
2. **Setup Method**: The `@BeforeEach` method initializes the `MatrixUtil` instance before each test.
3. **Tests**:
   - `testCreateMatrixWithIntegers`: Tests creating a matrix with integers.
   - `testCreateMatrixWithString`: Tests creating a matrix with strings.
   - `testCreateMatrixWithObject`: Tests creating a matrix with objects.
4. **MatrixUtil Class**: This class contains the `createMatrix` method which creates a matrix filled with the given initial value.

This setup ensures that you have a complete Java JUnit test case for your JavaScript function.