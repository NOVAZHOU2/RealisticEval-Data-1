Certainly! Below is the TypeScript version of your JavaScript function:

```typescript
/**
 * Creates a matrix with the specified number of rows and columns,
 * filled with the given initial value.
 *
 * @param {number} rows - The number of rows in the matrix.
 * @param {number} columns - The number of columns in the matrix.
 * @param {*} initialValue - The value to fill the matrix with.
 *                          It can be of any type (number, string, object, etc.).
 * @returns {Array<Array<*>}} A two-dimensional array (matrix) filled with the initial value.
 */
function createMatrix(rows: number, columns: number, initialValue: any): Array<Array<any>> {
    const matrix = new Array(rows);
    for (let i = 0; i < rows; i++) {
        matrix[i] = new Array(columns).fill(initialValue);
    }
    return matrix;
}
```

### Explanation:
1. **Type Annotations**: 
   - `rows` and `columns` are annotated as `number`.
   - `initialValue` is annotated as `any`, allowing it to hold values of any type.
   - The return type of the function is annotated as `Array<Array<any>>`, indicating that the function returns a two-dimensional array where each element can be of any type.

2. **Initialization**:
   - We initialize an empty array `matrix` with the length of `rows`.
   - For each row, we create a new array of length `columns` and fill it with the `initialValue`.

3. **Return Statement**:
   - Finally, we return the constructed matrix.

This TypeScript version ensures type safety while maintaining the functionality of your original JavaScript function.