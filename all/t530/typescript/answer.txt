Here is your JavaScript function converted into TypeScript:

```typescript
/**
 * Creates a matrix with the specified number of rows and columns,
 * filled with the given initial value.
 *
 * @param {number} rows - The number of rows in the matrix.
 * @param {number} columns - The number of columns in the matrix.
 * @param {*} initialValue - The value to fill the matrix with.
 *                          It can be of any type (number, string, object, etc.).
 * @returns {Array<Array<*>}} A two-dimensional array (matrix) filled with the initial value.
 */
function createMatrix(rows: number, columns: number, initialValue: any): Array<Array<any>> {
    let matrix = [];
    for(let i = 0; i < rows; i++) {
        let row = [];
        for(let j = 0; j < columns; j++) {
            row.push(initialValue);
        }
        matrix.push(row);
    }
    return matrix;
}
```

This function now includes type annotations for its parameters and return value. Please note that I've added a nested loop to actually create the matrix, which was missing from the original JavaScript function.