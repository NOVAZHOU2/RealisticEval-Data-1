Sure! Below is the TypeScript version of your JavaScript Jest test case using `describe` blocks:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Creates a matrix with the specified number of rows and columns,
 * filled with the given initial value.
 *
 * @param {number} rows - The number of rows in the matrix.
 * @param {number} columns - The number of columns in the matrix.
 * @param {*} initialValue - The value to fill the matrix with.
 *                          It can be of any type (number, string, object, etc.).
 * @returns {Array} A two-dimensional array (matrix) filled with the initial value.
 */
function createMatrix(rows: number, columns: number, initialValue: any): any[][] {
  const matrix = [];
  for (let i = 0; i < rows; i++) {
    const row = new Array(columns).fill(initialValue);
    matrix.push(row);
  }
  return matrix;
}

describe('createMatrix', () => {
  it('should create a matrix with the specified number of rows and columns', () => {
    const result = createMatrix(3, 4, 'x');
    expect(result).toEqual([
      ['x', 'x', 'x', 'x'],
      ['x', 'x', 'x', 'x'],
      ['x', 'x', 'x', 'x']
    ]);
  });

  it('should handle different data types for initialValue', () => {
    const numericMatrix = createMatrix(2, 2, 1);
    expect(numericMatrix).toEqual([[1, 1], [1, 1]]);

    const stringMatrix = createMatrix(2, 2, 'hello');
    expect(stringMatrix).toEqual([['hello', 'hello'], ['hello', 'hello']]);

    const objectMatrix = createMatrix(2, 2, { key: 'value' });
    expect(objectMatrix).toEqual([{ key: 'value' }, { key: 'value' }]);
  });

  it('should handle edge cases', () => {
    const emptyMatrix = createMatrix(0, 0, 'empty');
    expect(emptyMatrix).toEqual([]);

    const singleRowMatrix = createMatrix(1, 5, 'single');
    expect(singleRowMatrix).toEqual([['single', 'single', 'single', 'single', 'single']]);
  });
});
```

In this TypeScript version:
- I've added type annotations to the function parameters and return type.
- I've used the `@jest/globals` import to bring in the necessary Jest functions (`describe`, `it`, `expect`).
- I've included several test cases to cover various scenarios, including different data types for `initialValue`, edge cases like creating an empty matrix or a single-row matrix, and ensuring the matrix is correctly filled with the provided initial value.

Make sure you have TypeScript and Jest set up in your project to run these tests.