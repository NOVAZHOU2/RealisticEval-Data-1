Certainly! Below is the TypeScript version of your JavaScript function with the same functionality and comments:

```typescript
/**
 * Creates a matrix with the specified number of rows and columns,
 * filled with the given initial value.
 *
 * @param {number} rows - The number of rows in the matrix.
 * @param {number} columns - The number of columns in the matrix.
 * @param {*} initialValue - The value to fill the matrix with.
 *                          It can be of any type (number, string, object, etc.).
 * @returns {Array<Array<*>}> A two-dimensional array (matrix) filled with the initial value.
 */
function createMatrix(rows: number, columns: number, initialValue: any): Array<Array<any>> {
    const matrix: Array<Array<any>> = [];

    for (let i = 0; i < rows; i++) {
        const row: Array<any> = [];
        for (let j = 0; j < columns; j++) {
            row.push(initialValue);
        }
        matrix.push(row);
    }

    return matrix;
}
```

In this TypeScript version:
- The parameters `rows`, `columns`, and `initialValue` are explicitly typed as `number`, `number`, and `any`, respectively.
- The return type of the function is specified as `Array<Array<any>>`, indicating that it returns a two-dimensional array where each element can be of any type.