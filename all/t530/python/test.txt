Certainly! Below is the equivalent Python unit test case using `unittest` for the JavaScript function `createMatrix`.

```python
import unittest

def create_matrix(rows, columns, initial_value):
    return [[initial_value] * columns for _ in range(rows)]

class TestCreateMatrix(unittest.TestCase):
    def test_create_matrix(self):
        # Test with numeric values
        matrix = create_matrix(2, 3, 5)
        self.assertEqual(matrix, [[5, 5, 5], [5, 5, 5]])

        # Test with string values
        matrix = create_matrix(3, 2, 'a')
        self.assertEqual(matrix, [['a', 'a'], ['a', 'a'], ['a', 'a']])

        # Test with object values
        class MyClass:
            pass
        obj = MyClass()
        matrix = create_matrix(1, 4, obj)
        self.assertEqual(matrix, [[obj, obj, obj, obj]])

        # Test with empty dimensions
        matrix = create_matrix(0, 0, None)
        self.assertEqual(matrix, [])

        # Test with one row and one column
        matrix = create_matrix(1, 1, True)
        self.assertEqual(matrix, [[True]])

if __name__ == '__main__':
    unittest.main()
```

### Explanation:

1. **Function Definition**: The `create_matrix` function is defined to create a matrix with the specified number of rows and columns, filled with the given initial value.

2. **Test Class**: A test class `TestCreateMatrix` is created, inheriting from `unittest.TestCase`. This class contains several test methods to verify different scenarios.

3. **Test Methods**:
   - `test_create_matrix`: This method tests various cases including numeric values, string values, object values, empty dimensions, and a single element matrix.

4. **Assertions**: The `assertEqual` method is used to check if the output of `create_matrix` matches the expected result.

5. **Running Tests**: The `unittest.main()` call at the end runs the tests when the script is executed directly.

This Python test case should cover similar functionality to your original Jest test case.