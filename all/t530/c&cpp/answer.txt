Sure! Below is the equivalent C++ code for creating a matrix with the specified number of rows and columns, filled with the given initial value:

```cpp
#include <vector>
#include <iostream>

/**
 * Creates a matrix with the specified number of rows and columns,
 * filled with the given initial value.
 *
 * @param rows - The number of rows in the matrix.
 * @param columns - The number of columns in the matrix.
 * @param initialValue - The value to fill the matrix with.
 *                      It can be of any type (int, double, std::string, etc.).
 * @return A two-dimensional vector representing the matrix.
 */
template <typename T>
std::vector<std::vector<T>> createMatrix(int rows, int columns, const T& initialValue) {
    std::vector<std::vector<T>> matrix(rows, std::vector<T>(columns, initialValue));
    return matrix;
}

// Example usage
int main() {
    auto matrix = createMatrix(3, 4, 0); // Create a 3x4 matrix filled with 0

    // Print the matrix
    for (const auto& row : matrix) {
        for (const auto& element : row) {
            std::cout << element << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Template Function**: The `createMatrix` function is defined as a template function to handle different types of values.
2. **Vector Initialization**: The `std::vector` container from the `<vector>` library is used to represent the matrix. The constructor `std::vector<>::vector(size_type n, const T& val)` initializes the vector with `n` elements, all of which are copies of `val`.
3. **Example Usage**: In the `main` function, an example matrix is created and printed.

This code should work for any data type that supports copying (e.g., `int`, `double`, `std::string`). If you need to handle more complex types or custom types, additional considerations may be required.