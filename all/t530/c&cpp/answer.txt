Sure! Below is the equivalent C++ code for the JavaScript function you provided:

```cpp
#include <vector>

/**
 * Creates a matrix with the specified number of rows and columns,
 * filled with the given initial value.
 *
 * @param rows - The number of rows in the matrix.
 * @param columns - The number of columns in the matrix.
 * @param initialValue - The value to fill the matrix with.
 *                      It can be of any type (int, double, std::string, etc.).
 * @returns A two-dimensional vector (matrix) filled with the initial value.
 */
template<typename T>
std::vector<std::vector<T>> createMatrix(int rows, int columns, const T& initialValue) {
    std::vector<std::vector<T>> matrix(rows, std::vector<T>(columns, initialValue));
    return matrix;
}
```

### Explanation:
- **Template Function**: The `createMatrix` function is defined as a template function so it can handle different types (`T`) such as `int`, `double`, `std::string`, etc.
- **Vector Initialization**: The `std::vector` container from the C++ Standard Library is used to create a two-dimensional vector. The outer vector has `rows` elements, each of which is an inner vector with `columns` elements, all initialized to `initialValue`.

### Usage Example:
Here's how you might use this function in your C++ program:

```cpp
#include <iostream>
#include <string>

int main() {
    // Create a 3x3 matrix filled with the integer 0
    auto matrixInt = createMatrix<int>(3, 3, 0);
    for (const auto& row : matrixInt) {
        for (const auto& elem : row) {
            std::cout << elem << " ";
        }
        std::cout << std::endl;
    }

    // Create a 2x4 matrix filled with the string "hello"
    auto matrixString = createMatrix<std::string>(2, 4, "hello");
    for (const auto& row : matrixString) {
        for (const auto& elem : row) {
            std::cout << elem << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
```

This example demonstrates creating matrices of integers and strings and printing their contents. Adjust the types and values as needed for your specific use case.