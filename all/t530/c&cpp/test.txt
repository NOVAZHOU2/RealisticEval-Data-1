Certainly! Below is an equivalent C++ test case using Catch2 for the `createMatrix` function. Note that Catch2 is a header-only C++ testing framework.

First, ensure you have Catch2 installed. If not, you can download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2).

Here's the C++ version of your Jest test case:

```cpp
#include <catch2/catch.hpp>
#include <vector>

/**
 * Creates a matrix with the specified number of rows and columns,
 * filled with the given initial value.
 *
 * @param rows - The number of rows in the matrix.
 * @param columns - The number of columns in the matrix.
 * @param initialValue - The value to fill the matrix with.
 *                      It can be of any type (int, std::string, etc.).
 * @returns A two-dimensional vector (matrix) filled with the initial value.
 */
template<typename T>
std::vector<std::vector<T>> createMatrix(int rows, int columns, const T& initialValue) {
    std::vector<std::vector<T>> matrix(rows, std::vector<T>(columns, initialValue));
    return matrix;
}

TEST_CASE("Create Matrix", "[createMatrix]") {
    SECTION("Create a 3x3 matrix with integer values") {
        auto matrix = createMatrix(3, 3, 42);
        REQUIRE(matrix.size() == 3);
        for (const auto& row : matrix) {
            REQUIRE(row.size() == 3);
            for (const auto& element : row) {
                REQUIRE(element == 42);
            }
        }
    }

    SECTION("Create a 2x4 matrix with string values") {
        auto matrix = createMatrix(2, 4, "Hello");
        REQUIRE(matrix.size() == 2);
        for (const auto& row : matrix) {
            REQUIRE(row.size() == 4);
            for (const auto& element : row) {
                REQUIRE(element == "Hello");
            }
        }
    }

    SECTION("Create a 1x1 matrix with boolean values") {
        auto matrix = createMatrix(1, 1, true);
        REQUIRE(matrix.size() == 1);
        for (const auto& row : matrix) {
            REQUIRE(row.size() == 1);
            REQUIRE(row[0] == true);
        }
    }

    SECTION("Create a 0x0 matrix with double values") {
        auto matrix = createMatrix(0, 0, 3.14);
        REQUIRE(matrix.empty());
    }
}
```

### Explanation:
1. **Template Function**: The `createMatrix` function is templated to handle different types of values.
2. **Test Cases**:
   - **Integer Values**: Tests creating a 3x3 matrix filled with the integer `42`.
   - **String Values**: Tests creating a 2x4 matrix filled with the string `"Hello"`.
   - **Boolean Values**: Tests creating a 1x1 matrix filled with the boolean `true`.
   - **Empty Matrix**: Tests creating a 0x0 matrix, which should be empty.

Make sure to include the Catch2 library in your project and compile your test cases with the appropriate flags to link against Catch2. For example, if you're using g++, you might compile like this:

```sh
g++ -std=c++17 -I/path/to/catch2/include -o tests tests.cpp
./tests
```

Replace `/path/to/catch2/include` with the actual path where Catch2 is located on your system.