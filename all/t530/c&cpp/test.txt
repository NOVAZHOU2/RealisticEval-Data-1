Certainly! Below is the equivalent C++ Catch2 test case for the provided JavaScript Jest function:

```cpp
#include <catch2/catch.hpp>
#include <vector>

/**
 * Creates a matrix with the specified number of rows and columns,
 * filled with the given initial value.
 *
 * @param {size_t} rows - The number of rows in the matrix.
 * @param {size_t} columns - The number of columns in the matrix.
 * @param {T} initialValue - The value to fill the matrix with.
 *                          It can be of any type (int, double, std::string, etc.).
 * @returns {std::vector<std::vector<T>>} A two-dimensional vector (matrix) filled with the initial value.
 */
template<typename T>
std::vector<std::vector<T>> createMatrix(size_t rows, size_t columns, const T& initialValue) {
    std::vector<std::vector<T>> matrix(rows, std::vector<T>(columns, initialValue));
    return matrix;
}

TEST_CASE("createMatrix", "[createMatrix]") {
    SECTION("Create a 3x3 matrix filled with 0") {
        auto matrix = createMatrix(3, 3, 0);
        REQUIRE(matrix.size() == 3);
        for (const auto& row : matrix) {
            REQUIRE(row.size() == 3);
            for (const auto& elem : row) {
                REQUIRE(elem == 0);
            }
        }
    }

    SECTION("Create a 2x4 matrix filled with 'hello'") {
        auto matrix = createMatrix(2, 4, "hello");
        REQUIRE(matrix.size() == 2);
        for (const auto& row : matrix) {
            REQUIRE(row.size() == 4);
            for (const auto& elem : row) {
                REQUIRE(elem == "hello");
            }
        }
    }

    SECTION("Create an empty matrix") {
        auto matrix = createMatrix(0, 0, nullptr);
        REQUIRE(matrix.empty());
    }
}
```

### Explanation:
1. **Function Definition**:
   - The `createMatrix` function is defined using a template parameter `T` to allow for different types of values.
   - It creates a 2D vector initialized with the given `initialValue`.

2. **Catch2 Test Case**:
   - We define three sections within the `TEST_CASE` macro: one for each scenario.
   - Each section uses `REQUIRE` to assert that the properties of the created matrix match the expected values.

This test case ensures that the `createMatrix` function works correctly for different types of initial values and dimensions.