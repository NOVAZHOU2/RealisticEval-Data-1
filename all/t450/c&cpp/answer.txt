Certainly! Below is the equivalent C++ code for the JavaScript function `isValidPassword`:

```cpp
#include <iostream>
#include <cctype> // For character checking functions
#include <algorithm> // For std::any_of

/**
 * Checks whether the provided password meets the specified format requirements:
 * - At least one number
 * - At least one lowercase letter
 * - At least one uppercase letter
 * - At least one punctuation mark
 * - Minimum length of 8 characters
 *
 * @param password - The password string to validate
 * @return true if the password meets all requirements; otherwise, false.
 */
bool isValidPassword(const std::string& password) {
    if (password.length() < 8) {
        return false;
    }

    bool hasNumber = false;
    bool hasLowercase = false;
    bool hasUppercase = false;
    bool hasPunctuation = false;

    for (char ch : password) {
        if (std::isdigit(ch)) {
            hasNumber = true;
        } else if (std::islower(ch)) {
            hasLowercase = true;
        } else if (std::isupper(ch)) {
            hasUppercase = true;
        } else if (!std::isalnum(ch)) {
            hasPunctuation = true;
        }
    }

    return hasNumber && hasLowercase && hasUppercase && hasPunctuation;
}

int main() {
    std::string password = "Example123!";
    if (isValidPassword(password)) {
        std::cout << "The password is valid." << std::endl;
    } else {
        std::cout << "The password is invalid." << std::endl;
    }
    return 0;
}
```

### Explanation:
1. **Header Inclusions**: We include necessary headers such as `<iostream>` for input/output operations, `<cctype>` for character checking functions (`std::isdigit`, `std::islower`, `std::isupper`, `std::isalnum`), and `<algorithm>` for standard algorithms like `std::any_of`.
2. **Function Definition**:
   - The function `isValidPassword` takes a constant reference to a `std::string` named `password`.
   - It first checks if the length of the password is at least 8 characters. If not, it returns `false`.
   - Four boolean flags (`hasNumber`, `hasLowercase`, `hasUppercase`, `hasPunctuation`) are used to track the presence of required characters.
   - A loop iterates through each character in the password to check the presence of digits, lowercase letters, uppercase letters, and punctuation marks.
   - Finally, the function returns `true` only if all four conditions are met.
3. **Main Function**:
   - A sample password is tested with the `isValidPassword` function, and the result is printed to the console.

This C++ code should work similarly to your original JavaScript function, validating passwords based on the specified criteria.