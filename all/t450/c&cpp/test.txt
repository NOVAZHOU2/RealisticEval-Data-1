Sure! Below is an equivalent C++ test case using Catch2 for the JavaScript Jest test case you provided:

```cpp
#include <catch2/catch.hpp>
#include <string>

// Function to check if the provided password meets the specified format requirements
bool isValidPassword(const std::string& password) {
    bool hasNumber = false;
    bool hasLowercase = false;
    bool hasUppercase = false;
    bool hasPunctuation = false;

    for (char ch : password) {
        if (isdigit(ch)) hasNumber = true;
        if (islower(ch)) hasLowercase = true;
        if (isupper(ch)) hasUppercase = true;
        if (!isalnum(ch)) hasPunctuation = true;
    }

    return password.length() >= 8 && hasNumber && hasLowercase && hasUppercase && hasPunctuation;
}

TEST_CASE("Check password validity", "[password]") {
    REQUIRE(isValidPassword("Abc123!") == true);
    REQUIRE(isValidPassword("abc") == false);
    REQUIRE(isValidPassword("12345678") == false);
    REQUIRE(isValidPassword("abcdefg") == false);
    REQUIRE(isValidPassword("!@#$%^&*") == false);
    REQUIRE(isValidPassword("Abcdefgh") == false);
    REQUIRE(isValidPassword("Abc123") == false);
}
```

### Explanation:
- **Catch2**: A modern C++ testing framework that provides a simple and intuitive syntax for writing tests.
- **isValidPassword function**: This function checks if the given password meets the specified criteria:
  - At least one number (`hasNumber`)
  - At least one lowercase letter (`hasLowercase`)
  - At least one uppercase letter (`hasUppercase`)
  - At least one punctuation mark (`hasPunctuation`)
  - Minimum length of 8 characters

- **TEST_CASE macro**: Defines a test case named "Check password validity" with the tag `[password]`.
- **REQUIRE macro**: Asserts that the condition is `true`. If the condition is `false`, the test will fail.

This C++ test case should work similarly to your original JavaScript Jest test case.