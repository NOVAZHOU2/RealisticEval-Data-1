Sure! Below is an equivalent C++ Catch2 test case for your JavaScript Jest test function:

```cpp
#include <catch2/catch.hpp>
#include <cctype> // For std::isalnum, std::islower, std::isupper, std::ispunct

bool isValidPassword(const std::string& password) {
    bool hasNumber = false;
    bool hasLowercase = false;
    bool hasUppercase = false;
    bool hasPunctuation = false;

    if (password.length() < 8) return false;

    for (char ch : password) {
        if (std::isdigit(ch)) hasNumber = true;
        else if (std::islower(ch)) hasLowercase = true;
        else if (std::isupper(ch)) hasUppercase = true;
        else if (std::ispunct(ch)) hasPunctuation = true;
    }

    return hasNumber && hasLowercase && hasUppercase && hasPunctuation;
}

TEST_CASE("isValidPassword", "[password]") {
    REQUIRE(isValidPassword("Password1!") == true);
    REQUIRE(isValidPassword("password") == false); // No numbers or punctuation
    REQUIRE(isValidPassword("PASSWORD123") == false); // No punctuation
    REQUIRE(isValidPassword("password!") == false); // No numbers
    REQUIRE(isValidPassword("passw0rd!") == false); // No uppercase letters
    REQUIRE(isValidPassword("Passw0rd") == false); // No punctuation
    REQUIRE(isValidPassword("12345678") == false); // No letters or punctuation
    REQUIRE(isValidPassword("!@#$%^&*") == false); // No letters or numbers
}
```

### Explanation:
- **Catch2** is used instead of Jest for testing in C++. Catch2 provides a straightforward way to write and run tests.
- The `isValidPassword` function checks if the given password meets the criteria you mentioned.
- The `TEST_CASE` macro defines a new test case named "isValidPassword" with the tag `[password]`.
- `REQUIRE` is used to assert that the function behaves as expected for various inputs.

Make sure you have Catch2 installed and properly configured in your project to compile and run these tests.