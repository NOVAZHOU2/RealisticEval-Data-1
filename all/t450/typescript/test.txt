Certainly! Below is the TypeScript version of your Jest test case using `describe` blocks:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Checks whether the provided password meets the specified format requirements:
 * - At least one number
 * - At least one lowercase letter
 * - At least one uppercase letter
 * - At least one punctuation mark
 * - Minimum length of 8 characters
 *
 * @param {string} password - The password string to validate
 * @returns {boolean} Returns true if the password meets all requirements; otherwise, false.
 */
function isValidPassword(password: string): boolean {
    const hasNumber = /\d/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasUppercase = /[A-Z]/.test(password);
    const hasPunctuation = /[!@#$%^&*(),.?":{}|<>]/.test(password);
    const minLength = password.length >= 8;

    return hasNumber && hasLowercase && hasUppercase && hasPunctuation && minLength;
}

describe('isValidPassword', () => {
    it('should return true for valid passwords', () => {
        expect(isValidPassword('Passw0rd!')).toBe(true);
        expect(isValidPassword('Another123$')).toBe(true);
    });

    it('should return false for invalid passwords (missing number)', () => {
        expect(isValidPassword('Password!')).toBe(false);
    });

    it('should return false for invalid passwords (missing lowercase letter)', () => {
        expect(isValidPassword('PASSWORD!')).toBe(false);
    });

    it('should return false for invalid passwords (missing uppercase letter)', () => {
        expect(isValidPassword('password!')).toBe(false);
    });

    it('should return false for invalid passwords (missing punctuation mark)', () => {
        expect(isValidPassword('Password123')).toBe(false);
    });

    it('should return false for invalid passwords (too short)', () => {
        expect(isValidPassword('Pass!')).toBe(false);
    });
});
```

### Explanation:
- **TypeScript Function**: The `isValidPassword` function now includes type annotations for its parameters and return value.
- **Jest Describe/It Blocks**: The test cases are organized into `describe` blocks for better readability and structure. Each `it` block contains a specific test case with an expectation (`expect`) to verify the behavior of the `isValidPassword` function.

This should give you a good starting point for writing TypeScript-based Jest tests.