Sure! Below is the TypeScript version of your Jest test case using `describe` blocks:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Checks whether the provided password meets the specified format requirements:
 * - At least one number
 * - At least one lowercase letter
 * - At least one uppercase letter
 * - At least one punctuation mark
 * - Minimum length of 8 characters
 *
 * @param {string} password - The password string to validate
 * @returns {boolean} Returns true if the password meets all requirements; otherwise, false.
 */
function isValidPassword(password: string): boolean {
    const hasNumber = /\d/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasUppercase = /[A-Z]/.test(password);
    const hasPunctuation = /[!@#$%^&*(),.?":{}|<>]/.test(password);
    const minLength = password.length >= 8;

    return hasNumber && hasLowercase && hasUppercase && hasPunctuation && minLength;
}

describe('isValidPassword', () => {
    it('should return true for valid passwords', () => {
        expect(isValidPassword('Passw0rd!')).toBe(true);
        expect(isValidPassword('Another123$')).toBe(true);
        expect(isValidPassword('MixedUP#99')).toBe(true);
    });

    it('should return false for invalid passwords', () => {
        expect(isValidPassword('short!')).toBe(false); // Length < 8
        expect(isValidPassword('noNumbersOrSymbols')).toBe(false); // No numbers or symbols
        expect(isValidPassword('alllowercase!')).toBe(false); // No uppercase letters
        expect(isValidPassword('ALLUPPERCASE!')).toBe(false); // No lowercase letters
        expect(isValidPassword('12345678')).toBe(false); // No punctuation
    });
});
```

### Explanation:
1. **TypeScript Function**: The `isValidPassword` function now specifies that it takes a `password` parameter of type `string` and returns a `boolean`.
2. **Jest Test Suite**: The `describe` block groups related tests together under the name `'isValidPassword'`.
3. **Individual Tests**:
   - `it('should return true for valid passwords')`: Contains multiple examples of valid passwords and checks if the function returns `true`.
   - `it('should return false for invalid passwords')`: Contains multiple examples of invalid passwords and checks if the function returns `false`.

This setup ensures that your password validation function is thoroughly tested in both TypeScript and Jest environments.