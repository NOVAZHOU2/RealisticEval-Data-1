Sure! Here is the equivalent Python unit test case using the `unittest` framework:

```python
import unittest

def is_valid_password(password):
    # Check for minimum length
    if len(password) < 8:
        return False
    
    # Check for at least one number
    has_number = any(char.isdigit() for char in password)
    
    # Check for at least one lowercase letter
    has_lowercase = any(char.islower() for char in password)
    
    # Check for at least one uppercase letter
    has_uppercase = any(char.isupper() for char in password)
    
    # Check for at least one punctuation mark
    import string
    has_punctuation = any(char in string.punctuation for char in password)
    
    # Return True only if all conditions are met
    return has_number and has_lowercase and has_uppercase and has_punctuation

class TestIsValidPassword(unittest.TestCase):
    def test_valid_password(self):
        self.assertTrue(is_valid_password("Abc123!"))
    
    def test_invalid_password_too_short(self):
        self.assertFalse(is_valid_password("Abc123"))
    
    def test_invalid_password_no_number(self):
        self.assertFalse(is_valid_password("Abcdefg!"))
    
    def test_invalid_password_no_lowercase(self):
        self.assertFalse(is_valid_password("ABC123!"))
    
    def test_invalid_password_no_uppercase(self):
        self.assertFalse(is_valid_password("abc123!"))
    
    def test_invalid_password_no_punctuation(self):
        self.assertFalse(is_valid_password("Abc123"))

if __name__ == '__main__':
    unittest.main()
```

This Python script defines a function `is_valid_password` that checks if a given password meets the specified criteria. It then uses the `unittest` framework to create several test cases that verify different scenarios.

To run these tests, you can save the script to a file (e.g., `test_is_valid_password.py`) and execute it using the Python interpreter:

```sh
python test_is_valid_password.py
```

The output will indicate whether each test passed or failed.