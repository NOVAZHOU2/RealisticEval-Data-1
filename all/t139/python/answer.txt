To convert the provided JavaScript function parseCategoriesFromSummary into Python, we will follow a similar structure and logic. The converted Python code will utilize the re module for regular expressions, and we will return a dictionary containing the cleaned summary and the categories.
Here's the equivalent Python code:
Converted Python Code
python
import re
from typing import Dict, List

def parse_categories_from_summary(summarized_output: str = '') -> Dict[str, List[str]]:
    """
    Extracts categories from a summarized output string and returns the cleaned summary and categories.
    The categories are expected to be in the format "Categories: [category1, category2, ...]".

    Args:
        summarized_output (str): The summary text potentially containing categorized question.

    Returns:
        dict: A dictionary containing the cleaned summary text and a list of categories.
    """
    # Define the regex to find the categories pattern in the summary
    categories_regex = r'Categories:\s*\[([^\]]+)\]'
    
    # Attempt to match the pattern
    match = re.search(categories_regex, summarized_output, re.IGNORECASE)
    categories = []
    summary = summarized_output

    # If a match is found, process the categories and clean the summary
    if match and match.group(1):
        # Extract and process categories
        categories = [category.strip() for category in match.group(1).split(',') if category.strip()]

        # Remove the category line from the summary and trim any leading/trailing whitespace
        summary = re.sub(categories_regex, '', summarized_output).strip()

    return {'summary': summary, 'categories': categories}

# Example usage
if __name__ == "__main__":
    input_summary = "Here is a summary of the task. Categories: [task, work, important] More details follow."
    result = parse_categories_from_summary(input_summary)
    print(result)
Explanation of the Python Code:
Imports:
We import the re module for regular expression operations.
We also import Dict and List from typing to specify the return type of the function.
Function Definition:
The function is defined as parse_categories_from_summary, accepting a single argument summarized_output, which defaults to an empty string.
Docstring:
The docstring describes the purpose of the function, the argument it takes, and the return value.
Regular Expression:
The regular expression categories_regex is defined to match the pattern "Categories: [category1, category2, ...]".
Regex Matching:
We use re.search to attempt to find a match for the defined regex pattern in the summarized_output. The re.IGNORECASE flag allows case-insensitive matching.
Processing Categories:
If a match is found, we extract the categories, split them by commas, strip any whitespace, and filter out any empty categories.
Cleaning the Summary:
We use re.sub to remove the categories line from the summary and then trim any leading or trailing whitespace.
Return Value:
The function returns a dictionary containing the cleaned summary and a list of categories.
Example Usage:
An example is included to demonstrate how to use the function.
Running the Code:
You can save this code into a Python file (e.g., parse_summary.py) and run it using Python. It will print the cleaned summary and the extracted categories based on the provided example input.