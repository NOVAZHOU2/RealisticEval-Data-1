Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The test cases are converted to match the functionality and logic of the provided Python unittest class.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <filesystem>

// Ensure filesystem namespace is used
namespace fs = std::filesystem;

// Function to save content to a file
void save_content_to_file(const std::string& content, const std::string& path) {
    // Remove redundant whitespace from the content.
    // Split the content into lines, strip leading/trailing whitespace,
    // and filter out empty lines.
    std::istringstream iss(content);
    std::vector<std::string> lines;
    std::string line;
    while (std::getline(iss, line)) {
        line = std::string(line.begin(), line.end() - 1); // Remove trailing newline
        if (!line.empty()) {
            // Strip leading and trailing whitespace
            auto start = line.find_first_not_of(" \t\n\r\f\v");
            auto end = line.find_last_not_of(" \t\n\r\f\v");
            if (start != std::string::npos && end != std::string::npos) {
                line = line.substr(start, end - start + 1);
                lines.push_back(line);
            }
        }
    }

    // Join the lines back together with newlines.
    std::string cleanedContent;
    for (const auto& l : lines) {
        if (!cleanedContent.empty()) {
            cleanedContent += "\n";
        }
        cleanedContent += l;
    }

    // Replace multiple spaces with a single space.
    std::istringstream iss2(cleanedContent);
    std::string finalContent;
    std::string word;
    while (iss2 >> word) {
        if (!finalContent.empty()) {
            finalContent += " ";
        }
        finalContent += word;
    }

    // Write the cleaned content to the specified file.
    std::ofstream file(path);
    if (file.is_open()) {
        file << finalContent;
        file.close();
    } else {
        std::cerr << "Unable to open file: " << path << std::endl;
    }
}

TEST_CASE("TestSaveContentToFile", "[save_content_to_file]") {
    const std::string test_file_path = "test_output.txt";

    SECTION("Basic content") {
        std::string content = "Hello,  World!  ";
        std::string expected = "Hello, World!";
        save_content_to_file(content, test_file_path);

        std::ifstream file(test_file_path);
        REQUIRE(file.is_open());
        std::string result((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
        file.close();

        REQUIRE(result == expected);
    }

    SECTION("Multiple spaces and empty lines") {
        std::string content = R"(
        
        This is a    test.

        Another line.      
        )";
        std::string expected = "This is a test. Another line.";
        save_content_to_file(content, test_file_path);

        std::ifstream file(test_file_path);
        REQUIRE(file.is_open());
        std::string result((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
        file.close();

        REQUIRE(result == expected);
    }

    SECTION("Only whitespace") {
        std::string content = "    \n  \n   ";
        std::string expected = "";
        save_content_to_file(content, test_file_path);

        std::ifstream file(test_file_path);
        REQUIRE(file.is_open());
        std::string result((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
        file.close();

        REQUIRE(result == expected);
    }

    SECTION("Empty content") {
        std::string content = "";
        std::string expected = "";
        save_content_to_file(content, test_file_path);

        std::ifstream file(test_file_path);
        REQUIRE(file.is_open());
        std::string result((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
        file.close();

        REQUIRE(result == expected);
    }

    // Clean up the test file after all sections
    if (fs::exists(test_file_path)) {
        fs::remove(test_file_path);
    }
}
```

### Explanation:
1. **Header Files**: Included necessary headers (`<catch2/catch_test_macros.hpp>`, `<fstream>`, `<sstream>`, `<vector>`, `<string>`, `<filesystem>`).
2. **Function Definition**: Defined `save_content_to_file` function with the same parameters and logic.
3. **Test Class**: Used Catch2's `TEST_CASE` macro to define the test suite.
4. **Sections**: Each test case is defined within a `SECTION` block.
5. **File Operations**:
   - Used `std::ifstream` to read the content from the file.
   - Used `std::istreambuf_iterator` to read the entire file content.
6. **Assertions**: Used `REQUIRE` for assertions to ensure the expected results.
7. **File Cleanup**: Cleaned up the test file after all sections using `std::filesystem`.

This C++ code preserves the original functionality and logic of the Python unittest class, ensuring that the tests are performed correctly using the Catch2 testing framework.