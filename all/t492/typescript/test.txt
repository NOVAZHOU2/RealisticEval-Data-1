Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included.

### TypeScript Code

```typescript
import * as fs from 'fs';
import { saveContentToFile } from './path/to/saveContentToFile'; // Import the saveContentToFile function

describe('TestSaveContentToFile', () => {
    let testFilePath: string;

    beforeEach(() => {
        // Set up a temporary file path for testing
        testFilePath = 'test_output.txt';
    });

    afterEach(() => {
        // Clean up the test file after each test
        if (fs.existsSync(testFilePath)) {
            fs.unlinkSync(testFilePath);
        }
    });

    it('should save basic content correctly', () => {
        const content = "Hello,  World!  ";
        const expected = "Hello, World!";
        saveContentToFile(content, testFilePath);

        const result = fs.readFileSync(testFilePath, 'utf-8').trim();
        expect(result).toEqual(expected);
    });

    it('should handle multiple spaces and empty lines correctly', () => {
        const content = `

        This is a    test.

        Another line.      
        `;
        const expected = "This is a test. Another line.";
        saveContentToFile(content, testFilePath);

        const result = fs.readFileSync(testFilePath, 'utf-8').trim();
        expect(result).toEqual(expected);
    });

    it('should handle only whitespace correctly', () => {
        const content = "    \n  \n   ";
        const expected = "";
        saveContentToFile(content, testFilePath);

        const result = fs.readFileSync(testFilePath, 'utf-8').trim();
        expect(result).toEqual(expected);
    });

    it('should handle empty content correctly', () => {
        const content = "";
        const expected = "";
        saveContentToFile(content, testFilePath);

        const result = fs.readFileSync(testFilePath, 'utf-8').trim();
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Imports**:
   - Import the `fs` module for file system operations.
   - Import the `saveContentToFile` function from the appropriate module.

2. **Describe Block**:
   - Use the `describe` block to group the tests under a common description.

3. **BeforeEach and AfterEach**:
   - `beforeEach` sets up the temporary file path for each test.
   - `afterEach` cleans up the test file after each test.

4. **Test Cases**:
   - Each test case uses the `it` block to describe the test scenario.
   - The `expect` function is used to assert the expected results.

5. **Reading File Content**:
   - Use `fs.readFileSync` to read the content of the file synchronously.
   - Trim the result to ensure it matches the expected value.

6. **Assertions**:
   - Use `expect(result).toEqual(expected)` to verify that the actual result matches the expected result.

This TypeScript code preserves the original functionality and logic of the Python unittest tests, ensuring that the tests are equivalent and work correctly with Jest.