Sure, here is how you can convert your Python `unittest` test class to a TypeScript test case using Jest:

```typescript
import { saveContentToFile } from './path-to-your-save-content-to-file'; // Adjust the import according to your project structure

describe('saveContentToFile', () => {
  it('should save content to file after cleaning up redundant whitespace', async () => {
    const mockFilePath = 'mock/path/to/file.txt';
    const mockContent = "This is some   content with    extra spaces.\nAnd another line.";
    
    await saveContentToFile(mockContent, mockFilePath);

    // Assuming fs.promises.readFile exists and returns the expected content
    const fs = require('fs').promises;
    const savedContent = await fs.readFile(mockFilePath, 'utf8');
    expect(savedContent).toBe("This is some content with extra spaces.\nAnd another line.");
  });
});
```

### Explanation:
1. **Import the Function**: Import the function `saveContentToFile` from its location in your project.
2. **Describe Block**: Use `describe` to group related tests together. Here, we're grouping tests for the `saveContentToFile` function.
3. **It Block**: Use `it` or `test` to define individual test cases. In this example, we're testing that the function saves the content to a file after cleaning up redundant whitespace.
4. **Mock File Path and Content**: Define a mock file path and content string.
5. **Call the Function**: Call the `saveContentToFile` function with the mock content and file path.
6. **Read and Verify File Content**: Use Node.js's `fs.promises.readFile` to read the content of the mock file and verify it against the expected cleaned-up content using `expect`.

Make sure to adjust the import statement (`./path-to-your-save-content-to-file`) to correctly point to where your `saveContentToFile` function is located in your project.