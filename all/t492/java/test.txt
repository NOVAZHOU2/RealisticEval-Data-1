Sure, here's how you can convert your Python unittest test class to a Java JUnit test case:

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

import java.io.FileWriter;
import java.io.IOException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

public class Tester {

    private FileWriter mockFileWriter;

    @BeforeEach
    public void setUp() {
        mockFileWriter = Mockito.mock(FileWriter.class);
    }

    @Test
    public void testSaveContentToFile() throws IOException {
        String content = "  This   is   some   content.  ";
        String expectedContent = "This is some content.";
        String path = "test.txt";

        try (FileWriter writer = new FileWriter(path)) {
            when(mockFileWriter.write(anyString())).thenReturn(1);

            // Call the method under test
            saveContentToFile(content, path);

            // Verify that the content was written correctly
            verify(mockFileWriter).write(expectedContent);
        }
    }

    private void saveContentToFile(String content, String path) throws IOException {
        // Clean up redundant whitespace
        content = content.replaceAll("\\s+", " ").trim();

        // Write the cleaned content to the file
        try (FileWriter writer = new FileWriter(path)) {
            writer.write(content);
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration is set to `org.real.temp`.
2. **Imports**: Necessary imports for JUnit and Mockito are included.
3. **Mock Setup**: A mock `FileWriter` object is created using Mockito in the `setUp` method.
4. **Test Method**: The `testSaveContentToFile` method tests the `saveContentToFile` function.
5. **Assertions**: Assertions are used to check if the content was written correctly.
6. **Mock Verification**: Mockito's `verify` method is used to ensure that the `write` method of the mock `FileWriter` was called with the expected content.

Make sure to include the necessary dependencies for JUnit and Mockito in your project. If you're using Maven, add the following dependencies to your `pom.xml`:

```xml
<dependencies>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.8.1</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>4.0.0</version>
        <scope>test</scope>
    </dependency>
</dependencies>
```

If you're using Gradle, add the following dependencies to your `build.gradle`:

```groovy
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.mockito:mockito-core:4.0.0'
}
```

This should give you a good starting point for converting your Python unittest test class to a Java JUnit test case.