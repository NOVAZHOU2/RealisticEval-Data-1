Certainly! Here is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Saves the provided content to a specified file after cleaning up
 * redundant whitespace.
 *
 * @param {string} content - The text content to be saved to the file.
 * @param {string} path - The file path where the content will be saved.
 */
function saveContentToFile(content, path) {
    // Remove redundant whitespace from the content.
    // Split the content into lines, strip leading/trailing whitespace,
    // and filter out empty lines.
    content = content.split('\n')
                    .map(line => line.trim())
                    .filter(line => line.length > 0)
                    .join('\n');

    // Replace multiple spaces with a single space.
    content = content.replace(/\s+/g, ' ');

    // Write the cleaned content to the specified file.
    const fs = require('fs');
    fs.writeFile(path, content, { encoding: 'utf-8' }, (err) => {
        if (err) throw err;
    });
}

// Example usage:
// saveContentToFile("  This is some   text\n\nwith redundant   whitespace.\n", './example.txt');
```

### Explanation:
1. **Function Signature:**
   - The Python function `def save_content_to_file(content: str, path: str) -> None:` is converted to the JavaScript function `function saveContentToFile(content, path)`.

2. **JSDoc Comments:**
   - The Python docstring is rewritten using JSDoc format.
   - The `@param` tags describe the parameters and their types.
   - The `@returns` tag is not necessary since the function does not return anything explicitly.

3. **Content Cleaning:**
   - The content is split into lines, trimmed, and filtered to remove empty lines.
   - Multiple spaces are replaced with a single space.

4. **File Writing:**
   - The `fs` module is required to perform file operations.
   - `fs.writeFile` is used to write the cleaned content to the specified file.
   - An error handler is included to catch any potential errors during the write operation.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JSDoc standards for documentation.