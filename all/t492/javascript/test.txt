Sure! Below is an example of how you can convert the given Python unittest test class to a Jest test case in JavaScript. Note that I'll assume you have a function `saveContentToFile` that corresponds to your `save_content_to_file` function.

First, let's define the `saveContentToFile` function in JavaScript:

```javascript
// Assuming you're using Node.js and fs module for file operations
const fs = require('fs');

function saveContentToFile(content, path) {
    // Clean up redundant whitespace
    const cleanedContent = content.replace(/\s+/g, ' ').trim();
    
    // Save the cleaned content to the specified file
    fs.writeFileSync(path, cleanedContent);
}
```

Now, let's write the Jest test case for this function:

```javascript
const saveContentToFile = require('./path/to/saveContentToFile'); // Adjust the path accordingly

describe('saveContentToFile', () => {
    it('should save the content to the specified file with cleaned-up whitespace', () => {
        const mockPath = './test-file.txt';
        const content = "  This   is   a   test.  ";
        
        // Call the function
        saveContentToFile(content, mockPath);
        
        // Read the file content back
        const fileContent = fs.readFileSync(mockPath, 'utf8');
        
        // Check if the file content matches the expected cleaned content
        expect(fileContent).toBe('This is a test.');
        
        // Clean up the temporary file
        fs.unlinkSync(mockPath);
    });
});
```

### Explanation:

1. **Importing the Function**: We import the `saveContentToFile` function from its respective file.
2. **Describing the Test Suite**: We use `describe` to group related tests together.
3. **Writing the Test Case**: We use `it` to write individual test cases.
4. **Mocking the Path**: We create a temporary file path (`mockPath`) to store the content during the test.
5. **Calling the Function**: We call the `saveContentToFile` function with the test content and the mock path.
6. **Reading the File Content**: We read the content back from the file to verify if it has been written correctly.
7. **Assertions**: We use `expect` to assert that the file content matches the expected cleaned content.
8. **Cleanup**: Finally, we clean up the temporary file using `fs.unlinkSync`.

Make sure to adjust the path to the `saveContentToFile` function according to your project structure.