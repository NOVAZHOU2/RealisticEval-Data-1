Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Code

```python
import os
import unittest

class TestSaveContentToFile(unittest.TestCase):

    def setUp(self):
        """Set up a temporary file path for testing."""
        self.test_file_path = 'test_output.txt'

    def tearDown(self):
        """Clean up the test file after each test."""
        if os.path.exists(self.test_file_path):
            os.remove(self.test_file_path)

    def test_basic_content(self):
        """Test with basic content and check if it saves correctly."""
        content = "Hello,  World!  "
        expected = "Hello, World!"
        save_content_to_file(content, self.test_file_path)
        with open(self.test_file_path, 'r', encoding='utf-8') as file:
            result = file.read().strip()
        self.assertEqual(result, expected)

    def test_multiple_spaces_and_empty_lines(self):
        """Test handling of multiple spaces and empty lines."""
        content = """

        This is a    test.

        Another line.      
        """
        expected = "This is a test. Another line."
        save_content_to_file(content, self.test_file_path)
        with open(self.test_file_path, 'r', encoding='utf-8') as file:
            result = file.read().strip()
        self.assertEqual(result, expected)

    def test_only_whitespace(self):
        """Test if only whitespace is handled correctly."""
        content = "    \n  \n   "
        expected = ""
        save_content_to_file(content, self.test_file_path)
        with open(self.test_file_path, 'r', encoding='utf-8') as file:
            result = file.read().strip()
        self.assertEqual(result, expected)

    def test_empty_content(self):
        """Test if empty content is saved correctly."""
        content = ""
        expected = ""
        save_content_to_file(content, self.test_file_path)
        with open(self.test_file_path, 'r', encoding='utf-8') as file:
            result = file.read().strip()
        self.assertEqual(result, expected)
```

### Equivalent Jest Test Suite

```javascript
const fs = require('fs');
const saveContentToFile = require('./saveContentToFile'); // Import the saveContentToFile function

describe('TestSaveContentToFile', () => {
    let testFilePath = 'test_output.txt';

    beforeAll(() => {
        // Set up a temporary file path for testing
        testFilePath = 'test_output.txt';
    });

    afterAll(() => {
        // Clean up the test file after all tests
        if (fs.existsSync(testFilePath)) {
            fs.unlinkSync(testFilePath);
        }
    });

    beforeEach(() => {
        // Ensure the test file is clean before each test
        if (fs.existsSync(testFilePath)) {
            fs.unlinkSync(testFilePath);
        }
    });

    afterEach(() => {
        // Clean up the test file after each test
        if (fs.existsSync(testFilePath)) {
            fs.unlinkSync(testFilePath);
        }
    });

    it('should save basic content correctly', () => {
        const content = "Hello,  World!  ";
        const expected = "Hello, World!";
        saveContentToFile(content, testFilePath);
        const result = fs.readFileSync(testFilePath, 'utf-8').trim();
        expect(result).toEqual(expected);
    });

    it('should handle multiple spaces and empty lines correctly', () => {
        const content = `

        This is a    test.

        Another line.      
        `;
        const expected = "This is a test. Another line.";
        saveContentToFile(content, testFilePath);
        const result = fs.readFileSync(testFilePath, 'utf-8').trim();
        expect(result).toEqual(expected);
    });

    it('should handle only whitespace correctly', () => {
        const content = "    \n  \n   ";
        const expected = "";
        saveContentToFile(content, testFilePath);
        const result = fs.readFileSync(testFilePath, 'utf-8').trim();
        expect(result).toEqual(expected);
    });

    it('should handle empty content correctly', () => {
        const content = "";
        const expected = "";
        saveContentToFile(content, testFilePath);
        const result = fs.readFileSync(testFilePath, 'utf-8').trim();
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Setup and Teardown:**
   - `beforeAll` and `afterAll` are used to set up and clean up the test file once for all tests.
   - `beforeEach` ensures the test file is clean before each test.
   - `afterEach` cleans up the test file after each test.

2. **Test Cases:**
   - Each test case uses `it` to describe the test and `expect` to assert the expected results.
   - The `fs.readFileSync` method is used to read the file synchronously, and `.trim()` is applied to match the behavior of Python's `strip()`.

3. **File Operations:**
   - `fs.existsSync` checks if the file exists.
   - `fs.unlinkSync` removes the file if it exists.

This Jest test suite maintains the same functionality and logic as the original Python unittest class while adapting to Jest's syntax and conventions.