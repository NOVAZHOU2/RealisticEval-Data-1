Sure! Below is the equivalent C++ code for the provided Python function `extract_log_entries`. This C++ code reads a log file and extracts lines with specific log levels (WARNING, ERROR, CRITICAL, and ALERT) into separate files.

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <map>

void extract_log_entries(const std::string& log_file_path) {
    // Define log level keywords
    const std::map<std::string, std::string> log_levels = {
        {"WARNING", "warnings.log"},
        {"ERROR", "errors.log"},
        {"CRITICAL", "criticals.log"},
        {"ALERT", "alerts.log"}
    };

    // Open the input log file
    std::ifstream log_file(log_file_path);
    if (!log_file.is_open()) {
        std::cerr << "Failed to open log file: " << log_file_path << std::endl;
        return;
    }

    // Process each line in the log file
    std::string line;
    while (std::getline(log_file, line)) {
        for (const auto& [level, filename] : log_levels) {
            if (line.find(level) != std::string::npos) {
                // Open the output file for appending
                std::ofstream out_file(filename, std::ios::app);
                if (out_file.is_open()) {
                    out_file << line << std::endl;
                    out_file.close();
                } else {
                    std::cerr << "Failed to open output file: " << filename << std::endl;
                }
                break; // Move to next line after writing to one file
            }
        }
    }

    log_file.close();
}

int main() {
    std::string log_file_path = "path/to/your/logfile.log";
    extract_log_entries(log_file_path);
    return 0;
}
```

### Explanation:
1. **Log Levels Mapping**: The `log_levels` map stores the log level keywords ("WARNING", "ERROR", "CRITICAL", "ALERT") and their corresponding filenames where the logs will be saved.
2. **File Handling**:
   - The input log file is opened using `std::ifstream`.
   - Each line from the log file is read using `std::getline`.
3. **Log Level Detection and Writing**:
   - For each line, the code checks if it contains any of the log level keywords.
   - If a keyword is found, the line is written to the corresponding output file specified in the `log_levels` map.
4. **Error Handling**: Basic error handling is implemented to check if files can be opened successfully.

Make sure to replace `"path/to/your/logfile.log"` with the actual path to your log file when running the program.