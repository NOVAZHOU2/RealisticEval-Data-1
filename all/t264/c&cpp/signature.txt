Certainly! Below is the equivalent C++ code for the provided Python function, including the function signature, comments, and documentation. The Python function `extract_log_entries` is translated into C++ with appropriate comments and documentation.

### Python Code:
```python
def extract_log_entries(log_file_path: str):
    """
    Extract log entries from a log file for WARNING, ERROR, CRITICAL, and ALERT levels
    and save each type of log entry to a different file.

    Args:
        log_file_path: Path to the log file.

    Returns:

    """

    """
    Extract log entries from a log file for WARNING, ERROR, CRITICAL, and ALERT levels
    and save each type of log entry to a different file.

    Args:
    log_file_path (str): Path to the log file.
    """
```

### Equivalent C++ Code:
```cpp
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <vector>
#include <string>
#include <filesystem>

namespace fs = std::filesystem;

/**
 * Extract log entries from a log file for WARNING, ERROR, CRITICAL, and ALERT levels
 * and save each type of log entry to a different file.
 *
 * @param log_file_path Path to the log file.
 */
void extract_log_entries(const std::string& log_file_path) {
    if (!fs::exists(log_file_path)) {
        std::cerr << "No log file found at the specified path: " << log_file_path << std::endl;
        return;
    }

    // Prepare unordered_maps to hold log entries for each level
    std::unordered_map<std::string, std::vector<std::string>> logs = {
        {"WARNING", {}},
        {"ERROR", {}},
        {"CRITICAL", {}},
        {"ALERT", {}}
    };

    // Define output file paths
    std::unordered_map<std::string, std::string> output_files = {
        {"WARNING", "warning_logs.txt"},
        {"ERROR", "error_logs.txt"},
        {"CRITICAL", "critical_logs.txt"},
        {"ALERT", "alert_logs.txt"}
    };

    // Read the log file and filter entries by level
    std::ifstream infile(log_file_path);
    if (!infile.is_open()) {
        std::cerr << "Failed to open the log file." << std::endl;
        return;
    }

    std::string line;
    while (std::getline(infile, line)) {
        for (const auto& level : logs) {
            if (line.find(level.first) != std::string::npos) {
                logs[level.first].push_back(line);
                break;
            }
        }
    }
    infile.close();

    // Write the filtered logs to separate files
    for (const auto& [level, entries] : logs) {
        std::ofstream outfile(output_files[level]);
        if (!outfile.is_open()) {
            std::cerr << "Failed to open the output file: " << output_files[level] << std::endl;
            continue;
        }

        for (const auto& entry : entries) {
            outfile << entry << '\n';
        }
        outfile.close();
        std::cout << "Saved " << entries.size() << " '" << level << "' entries to " << output_files[level] << "." << std::endl;
    }
}

int main() {
    std::string log_file_path = "path/to/your/logfile.log";
    extract_log_entries(log_file_path);
    return 0;
}
```

### Explanation:
1. **Function Signature**: The Python function `extract_log_entries` is translated into a C++ function with the same name and parameter type.
2. **Comments and Documentation**: The Python docstring is converted into a C++ style comment block using `/** */`.
3. **Type Annotations**: The Python type annotation `log_file_path: str` is translated into a C++ parameter type `const std::string& log_file_path`.
4. **Error Handling**: Error messages are printed using `std::cerr`.
5. **File Operations**: File operations are performed using `std::ifstream` and `std::ofstream`.
6. **String Manipulation**: The `std::string::find` method is used to check if a log level is present in a line.
7. **Output Files**: Each set of log entries is written to a separate file using `std::ofstream`.

This code preserves the original functionality and structure of the Python code while adhering to C++ standards and practices.