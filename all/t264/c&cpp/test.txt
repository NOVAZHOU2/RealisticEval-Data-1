To convert the provided Python unittest test class into an equivalent test class using Catch2 in C++, we need to create a C++ test class that uses the Catch2 testing framework. Below is the equivalent C++ code using Catch2:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <fstream>
#include <iostream>

// Function to extract log entries
void extract_log_entries(const std::string& log_file_path) {
    // Implementation of extract_log_entries function
    // This is a placeholder implementation for demonstration purposes
    std::ifstream log_file(log_file_path);
    if (!log_file.is_open()) {
        std::cerr << "Failed to open log file: " << log_file_path << std::endl;
        return;
    }

    std::string line;
    std::ofstream warning_file("warning.log");
    std::ofstream error_file("error.log");
    std::ofstream critical_file("critical.log");
    std::ofstream alert_file("alert.log");

    while (std::getline(log_file, line)) {
        if (line.find("WARNING") != std::string::npos) {
            warning_file << line << '\n';
        } else if (line.find("ERROR") != std::string::npos) {
            error_file << line << '\n';
        } else if (line.find("CRITICAL") != std::string::npos) {
            critical_file << line << '\n';
        } else if (line.find("ALERT") != std::string::npos) {
            alert_file << line << '\n';
        }
    }

    log_file.close();
    warning_file.close();
    error_file.close();
    critical_file.close();
    alert_file.close();
}

TEST_CASE("Extract log entries from a log file", "[log]") {
    const std::string log_file_path = "test.log";

    // Create a test log file with known content
    std::ofstream test_log(log_file_path);
    test_log << "This is a WARNING message" << std::endl;
    test_log << "This is an ERROR message" << std::endl;
    test_log << "This is a CRITICAL message" << std::endl;
    test_log << "This is an ALERT message" << std::endl;
    test_log.close();

    // Call the function under test
    extract_log_entries(log_file_path);

    // Check if the files were created and contain the correct lines
    SECTION("Check warning.log") {
        std::ifstream warning_file("warning.log");
        std::string warning_content((std::istreambuf_iterator<char>(warning_file)), std::istreambuf_iterator<char>());
        REQUIRE(warning_content == "This is a WARNING message\n");
    }

    SECTION("Check error.log") {
        std::ifstream error_file("error.log");
        std::string error_content((std::istreambuf_iterator<char>(error_file)), std::istreambuf_iterator<char>());
        REQUIRE(error_content == "This is an ERROR message\n");
    }

    SECTION("Check critical.log") {
        std::ifstream critical_file("critical.log");
        std::string critical_content((std::istreambuf_iterator<char>(critical_file)), std::istreambuf_iterator<char>());
        REQUIRE(critical_content == "This is a CRITICAL message\n");
    }

    SECTION("Check alert.log") {
        std::ifstream alert_file("alert.log");
        std::string alert_content((std::istreambuf_iterator<char>(alert_file)), std::istreambuf_iterator<char>());
        REQUIRE(alert_content == "This is an ALERT message\n");
    }
}
```

### Explanation:
1. **Function Definition**: The `extract_log_entries` function is defined to read a log file and save log entries to different files based on their severity levels.
2. **Test Case**: The `TEST_CASE` macro is used to define a test case that includes setup, calling the function under test (`extract_log_entries`), and checking the results using `SECTION` macros for individual checks.
3. **Assertions**: The `REQUIRE` macro is used to assert the correctness of the output files.

This C++ code preserves the functionality and logic of the original Python test class using the Catch2 testing framework.