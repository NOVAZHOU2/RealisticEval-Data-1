Certainly! Here is the equivalent TypeScript code with proper JSDoc comments and type annotations:

```typescript
import * as fs from 'fs';

/**
 * Extract log entries from a log file for WARNING, ERROR, CRITICAL, and ALERT levels
 * and save each type of log entry to a different file.
 *
 * @param logFilePath - Path to the log file.
 */
function extractLogEntries(logFilePath: string): void {
    if (!fs.existsSync(logFilePath)) {
        throw new Error(`No log file found at the specified path: ${logFilePath}`);
    }

    // Prepare objects to hold log entries for each level
    const logs: { [key: string]: string[] } = {
        'WARNING': [],
        'ERROR': [],
        'CRITICAL': [],
        'ALERT': []
    };

    // Define output file paths
    const outputFiles: { [key: string]: string } = {
        'WARNING': 'warning_logs.txt',
        'ERROR': 'error_logs.txt',
        'CRITICAL': 'critical_logs.txt',
        'ALERT': 'alert_logs.txt'
    };

    // Read the log file and filter entries by level
    const fileContent = fs.readFileSync(logFilePath, 'utf-8');
    const lines = fileContent.split('\n');

    for (const line of lines) {
        for (const level of Object.keys(logs)) {
            if (line.includes(level)) {
                logs[level as keyof typeof logs].push(line);
                break;
            }
        }
    }

    // Write the filtered logs to separate files
    for (const level of Object.keys(logs)) {
        const entries = logs[level as keyof typeof logs];
        fs.writeFileSync(outputFiles[level as keyof typeof outputFiles], entries.join('\n'));
        console.log(`Saved ${entries.length} '${level}' entries to ${outputFiles[level as keyof typeof outputFiles]}.`);
    }
}

// Example usage
try {
    extractLogEntries('path/to/logfile.txt');
} catch (error) {
    console.error(error);
}
```

### Explanation:
1. **Imports**: TypeScript uses `fs` from Node.js for file system operations.
2. **Function Definition**: The function `extractLogEntries` is defined with a single parameter `logFilePath` of type `string`.
3. **JSDoc Comments**: The function is documented using JSDoc comments, which provide detailed information about the function's purpose, parameters, and return type.
4. **File Existence Check**: The function checks if the log file exists using `fs.existsSync`.
5. **Log Entries Storage**: An object `logs` is used to store log entries for each level.
6. **Output File Paths**: An object `outputFiles` is used to map log levels to their respective output file names.
7. **Reading Log File**: The log file is read synchronously using `fs.readFileSync`, and its content is split into lines.
8. **Filtering Log Entries**: Each line is checked against the log levels, and matching lines are added to the appropriate array.
9. **Writing to Files**: The filtered log entries are written to separate files using `fs.writeFileSync`.
10. **Logging Completion**: A message is logged to indicate the number of entries saved to each file.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate JSDoc comments and type annotations.