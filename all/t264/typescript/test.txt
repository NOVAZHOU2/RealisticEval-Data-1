Certainly! Here is the equivalent TypeScript code using Jest for testing the `extractLogEntries` function. The test cases will be converted to Jest's testing framework, ensuring that the functionality and logic of the tests are preserved.

### TypeScript Code with Jest Testing

First, let's define the `extractLogEntries` function in TypeScript:

```typescript
import * as fs from 'fs';

/**
 * Extract log entries from a log file for WARNING, ERROR, CRITICAL, and ALERT levels
 * and save each type of log entry to a different file.
 *
 * @param logFilePath - Path to the log file.
 */
function extractLogEntries(logFilePath: string): void {
    if (!fs.existsSync(logFilePath)) {
        throw new Error(`No log file found at the specified path: ${logFilePath}`);
    }

    // Prepare objects to hold log entries for each level
    const logs: { [key: string]: string[] } = {
        'WARNING': [],
        'ERROR': [],
        'CRITICAL': [],
        'ALERT': []
    };

    // Define output file paths
    const outputFiles: { [key: string]: string } = {
        'WARNING': 'warning_logs.txt',
        'ERROR': 'error_logs.txt',
        'CRITICAL': 'critical_logs.txt',
        'ALERT': 'alert_logs.txt'
    };

    // Read the log file and filter entries by level
    const fileContent = fs.readFileSync(logFilePath, 'utf-8');
    const lines = fileContent.split('\n');

    for (const line of lines) {
        for (const level of Object.keys(logs)) {
            if (line.includes(level)) {
                logs[level as keyof typeof logs].push(line);
                break;
            }
        }
    }

    // Write the filtered logs to separate files
    for (const level of Object.keys(logs)) {
        const entries = logs[level as keyof typeof logs];
        fs.writeFileSync(outputFiles[level as keyof typeof outputFiles], entries.join('\n'));
        console.log(`Saved ${entries.length} '${level}' entries to ${outputFiles[level as keyof typeof outputFiles]}.`);
    }
}

export default extractLogEntries;
```

### Jest Test Class

Now, let's define the Jest test class:

```typescript
import { extractLogEntries } from './path/to/extractLogEntries'; // Adjust the import path as needed

describe('TestExtractLogEntries', () => {
    beforeEach(() => {
        // Setup a temporary log file with sample content for testing
        const logFileContents = [
            "INFO: This is an informational message.\n",
            "WARNING: This is a warning message.\n",
            "ERROR: This is an error message.\n",
            "CRITICAL: This is a critical message.\n",
            "ALERT: This is an alert message.\n"
        ];
        const logFilePath = 'test_log.log';
        fs.writeFileSync(logFilePath, logFileContents.join(''));
    });

    afterEach(() => {
        // Clean up after each test
        ['warning_logs.txt', 'error_logs.txt', 'critical_logs.txt', 'alert_logs.txt'].forEach(file => {
            if (fs.existsSync(file)) {
                fs.unlinkSync(file);
            }
        });
        if (fs.existsSync('test_log.log')) {
            fs.unlinkSync('test_log.log');
        }
    });

    it('should handle no logs of certain levels', () => {
        const logFilePath = 'test_log.log';
        fs.writeFileSync(logFilePath, "INFO: This is another informational message.\n");
        extractLogEntries(logFilePath);

        ['WARNING', 'ERROR', 'CRITICAL', 'ALERT'].forEach(level => {
            const filePath = `${level.toLowerCase()}_logs.txt`;
            expect(fs.existsSync(filePath)).toBe(true);
            const content = fs.readFileSync(filePath, 'utf-8').trim();
            expect(content).toBe('');
        });
    });

    it('should throw an error when the log file does not exist', () => {
        expect(() => {
            extractLogEntries('nonexistent.log');
        }).toThrow(/No log file found at the specified path: nonexistent\.log/);
    });

    it('should handle an empty log file', () => {
        const logFilePath = 'test_log.log';
        fs.writeFileSync(logFilePath, "");
        extractLogEntries(logFilePath);

        ['WARNING', 'ERROR', 'CRITICAL', 'ALERT'].forEach(level => {
            const filePath = `${level.toLowerCase()}_logs.txt`;
            expect(fs.existsSync(filePath)).toBe(true);
            const content = fs.readFileSync(filePath, 'utf-8').trim();
            expect(content).toBe('');
        });
    });

    it('should extract logs from a file with mixed content', () => {
        const logFilePath = 'test_log.log';
        fs.writeFileSync(logFilePath, [
            "INFO: Some info.\n",
            "WARNING: Watch out!\n",
            "DEBUG: Debugging.\n",
            "ERROR: Oops!\n",
            "CRITICAL: Failed badly.\n",
            "ALERT: High alert!\n",
            "INFO: More info.\n"
        ].join(''));

        extractLogEntries(logFilePath);

        ['WARNING', 'ERROR', 'CRITICAL', 'ALERT'].forEach(level => {
            const filePath = `${level.toLowerCase()}_logs.txt`;
            expect(fs.existsSync(filePath)).toBe(true);
            const content = fs.readFileSync(filePath, 'utf-8').trim();
            expect(content).toContain(level);
        });
    });
});
```

### Explanation:
1. **Imports**: Import the `extractLogEntries` function and Jest utilities.
2. **Before Each**: Set up a temporary log file with sample content before each test.
3. **After Each**: Clean up the temporary files after each test.
4. **Test Cases**:
   - `should handle no logs of certain levels`: Tests the situation where there are no log entries for one or more levels.
   - `should throw an error when the log file does not exist`: Tests behavior when the log file does not exist.
   - `should handle an empty log file`: Tests behavior with an empty log file.
   - `should extract logs from a file with mixed content`: Tests extracting logs from a file with mixed content.
5. **Assertions**: Use Jest's assertion methods (`expect`) to verify the expected behavior.

This TypeScript code with Jest testing ensures that the functionality and logic of the tests are preserved, with appropriate type annotations and Jest assertions.