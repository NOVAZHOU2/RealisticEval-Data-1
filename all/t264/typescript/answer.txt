Sure! Hereâ€™s the equivalent TypeScript code, ensuring that the functionality, structure, and logic remain consistent:

```typescript
import * as fs from 'fs';

function extractLogEntries(logFilePath: string): void {
    /**
     * Extract log entries from a log file for WARNING, ERROR, CRITICAL, and ALERT levels
     * and save each type of log entry to a different file.
     *
     * @param logFilePath Path to the log file.
     */
    if (!fs.existsSync(logFilePath)) {
        throw new Error(`No log file found at the specified path: ${logFilePath}`);
    }

    // Prepare objects to hold log entries for each level
    const logs: Record<string, string[]> = {
        'WARNING': [],
        'ERROR': [],
        'CRITICAL': [],
        'ALERT': []
    };

    // Define output file paths
    const outputFiles: Record<string, string> = {
        'WARNING': 'warning_logs.txt',
        'ERROR': 'error_logs.txt',
        'CRITICAL': 'critical_logs.txt',
        'ALERT': 'alert_logs.txt'
    };

    // Read the log file and filter entries by level
    const fileContent = fs.readFileSync(logFilePath, 'utf-8');
    const lines = fileContent.split(/\r?\n/);

    for (const line of lines) {
        for (const level of Object.keys(logs)) {
            if (line.includes(level)) {
                logs[level].push(line);
                break;
            }
        }
    }

    // Write the filtered logs to separate files
    for (const [level, entries] of Object.entries(logs)) {
        fs.writeFileSync(outputFiles[level], entries.join('\n'));
        console.log(`Saved ${entries.length} '${level}' entries to ${outputFiles[level]}.`);
    }
}

// Example usage
extractLogEntries('path/to/logfile.txt');
```

### Explanation:
1. **Imports**: In TypeScript, we use `fs` from Node.js for file system operations.
2. **Function Definition**: The function `extractLogEntries` is defined with a type annotation for the parameter.
3. **File Existence Check**: We use `fs.existsSync` to check if the file exists.
4. **Objects for Log Entries**: We define `logs` and `outputFiles` as objects with specific types.
5. **Reading File Content**: We read the file content using `fs.readFileSync` and split it into lines.
6. **Filtering Log Entries**: We iterate over each line and filter based on the log levels.
7. **Writing to Files**: We write the filtered logs to separate files using `fs.writeFileSync`.
8. **Console Output**: We log the number of entries saved to each file.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate adjustments for TypeScript syntax and file handling.