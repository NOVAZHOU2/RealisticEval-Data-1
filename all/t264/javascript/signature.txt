Certainly! Below is the equivalent JavaScript function with JSDoc comments that preserve the purpose and structure of the Python code:

```javascript
/**
 * Extract log entries from a log file for WARNING, ERROR, CRITICAL, and ALERT levels
 * and save each type of log entry to a different file.
 *
 * @param {string} logFilePath - Path to the log file.
 */
function extractLogEntries(logFilePath) {
    if (!fs.existsSync(logFilePath)) {
        throw new Error(`No log file found at the specified path: ${logFilePath}`);
    }

    // Prepare objects to hold log entries for each level
    const logs = {
        'WARNING': [],
        'ERROR': [],
        'CRITICAL': [],
        'ALERT': []
    };

    // Define output file paths
    const outputFiles = {
        'WARNING': 'warning_logs.txt',
        'ERROR': 'error_logs.txt',
        'CRITICAL': 'critical_logs.txt',
        'ALERT': 'alert_logs.txt'
    };

    // Read the log file and filter entries by level
    const fileContent = fs.readFileSync(logFilePath, 'utf8');
    const lines = fileContent.split('\n');

    lines.forEach(line => {
        for (const level of Object.keys(logs)) {
            if (line.includes(level)) {
                logs[level].push(line);
                break;
            }
        }
    });

    // Write the filtered logs to separate files
    for (const [level, entries] of Object.entries(logs)) {
        fs.writeFileSync(outputFiles[level], entries.join('\n'));
        console.log(`Saved ${entries.length} '${level}' entries to ${outputFiles[level]}.`);
    }
}

// Example usage
try {
    extractLogEntries('path/to/logfile.txt');
} catch (error) {
    console.error(error.message);
}
```

### Explanation:
1. **JSDoc Comments**: The function is documented using JSDoc comments, which provide clear descriptions of the function's purpose, parameters, and return values.
2. **File System Module**: The `fs` module is used to handle file operations.
3. **Error Handling**: If the log file does not exist, an error is thrown.
4. **Log Entry Storage**: Log entries are stored in an object similar to the Python dictionary.
5. **Output File Paths**: Output file paths are defined using an object.
6. **Reading the Log File**: The log file is read synchronously, and lines are split.
7. **Filtering Log Entries**: Each line is checked against the log levels, and matching entries are stored.
8. **Writing to Separate Files**: The filtered log entries are written to separate files, and the number of entries saved is logged.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JavaScript documentation standards using JSDoc.