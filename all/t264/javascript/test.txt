It seems like there was no provided test class in your Python example but I will give you an example of how we can write a test class for this function in Jest.

Here's what the equivalent Jest test would look like:

```javascript
// Assuming you've named your test file 'logEntries.test.js'
const fs = require('fs').promises; // File system module for reading files
const extract_log_entries = require('./index').extract_log_entries; // Importing the function

describe('Testing extract_log_entries', () => {

  let log_file_path;
  
  beforeAll(async () => {
    await fs.writeFile('test.log', 'Test content'); // Write a test log file
    log_file_path = './test.log';
  });

  afterAll(async () => {
    await fs.unlink(log_file_path); // Clean up test file
  });

  test('Checks if the function extracts log entries properly', async () => {
    const initialContent = await fs.readFile(log_file_path, 'utf-8');
    expect(initialContent).toEqual('Test content');

    await extract_log_entries(log_file_path);

    // Assuming the function creates separate files for each level of logs
    // Here you should check if those files have been created and contain the expected content
    // This part depends on the implementation details of `extract_log_entries`
    const warningContent = await fs.readFile('warning.log', 'utf-8');
    expect(warningContent).toEqual('Expected warning log content');

    const errorContent = await fs.readFile('error.log', 'utf-8');
    expect(errorContent).toEqual('Expected error log content');

    const criticalContent = await fs.readFile('critical.log', 'utf-8');
    expect(criticalContent).toEqual('Expected critical log content');

    const alertContent = await fs.readFile('alert.log', 'utf-8');
    expect(alertContent).toEqual('Expected alert log content');
  });
});
```

### Notes:
1. **File System Handling**: Jest does not have a built-in mock for the filesystem, so you need to use `fs.promises` for asynchronous operations. The `beforeAll` hook is used to set up the test environment by creating a test file, and `afterAll` cleans up after the tests.

2. **Function Import**: It's assumed that `extract_log_entries` is defined in a module called `index.js`. Adjust the import path according to your project structure.

3. **Assertions**: Jest uses `expect` for assertions, similar to Python's `assertEqual` method. In this example, we're checking if the files created by `extract_log_entries` contain the expected content.

4. **Mocking Files**: If you want to test the function with controlled input, consider using Jest's `jest.fn()` to mock the file reading and writing functions.

5. **Error Handling**: Ensure that your function handles errors gracefully, especially when dealing with file operations. Jest's `expect.assertions()` can be used to verify that specific assertions or errors are thrown.