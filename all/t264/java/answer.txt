Here's the Java version of your Python code. This Java class will do the same thing - it extracts log entries from a log file based on their severity level (WARNING, ERROR, CRITICAL, and ALERT) and saves them into separate files.

```java
import java.io.*;
import java.util.*;

public class Answer {
    public static void extractLogEntries(String logFilePath) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(logFilePath));
        String line;
        Map<String, BufferedWriter> writers = new HashMap<>();

        while ((line = reader.readLine()) != null) {
            if (line.contains("WARNING")) {
                getWriter(writers, "warnings.log").write(line + "\n");
            } else if (line.contains("ERROR")) {
                getWriter(writers, "errors.log").write(line + "\n");
            } else if (line.contains("CRITICAL")) {
                getWriter(writers, "criticals.log").write(line + "\n");
            } else if (line.contains("ALERT")) {
                getWriter(writers, "alerts.log").write(line + "\n");
            }
        }

        for (BufferedWriter writer : writers.values()) {
            writer.close();
        }

        reader.close();
    }

    private static BufferedWriter getWriter(Map<String, BufferedWriter> writers, String fileName) throws IOException {
        BufferedWriter writer = writers.get(fileName);
        if (writer == null) {
            writer = new BufferedWriter(new FileWriter(fileName, true));
            writers.put(fileName, writer);
        }
        return writer;
    }
}
```

This Java method `extractLogEntries` reads from a specified log file and writes lines that contain specific keywords ("WARNING", "ERROR", "CRITICAL", "ALERT") to corresponding log files. If a keyword is not found in a line, it simply ignores that line.

The `getWriter` helper function handles opening and closing the file writers, ensuring that each log level gets its own file. It also ensures that each file is only opened once per run of the program. 

Note: This is a simple implementation. Depending upon your requirement you might want to handle exceptions more gracefully or use a better way to determine the log level. Also, make sure to close all resources properly after use to avoid resource leaks.