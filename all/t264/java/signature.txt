Certainly! Below is the equivalent Java method signature and documentation for the provided Python function, including Javadoc comments and appropriate Java types:

```java
package org.real.temp;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * Extracts log entries from a log file for WARNING, ERROR, CRITICAL, and ALERT levels
 * and saves each type of log entry to a different file.
 *
 * @param logFilePath The path to the log file.
 */
public class Answer {

    private static final Map<String, String> outputFiles = new HashMap<>();
    private static final Map<String, ArrayList<String>> logs = new HashMap<>();

    static {
        outputFiles.put("WARNING", "warning_logs.txt");
        outputFiles.put("ERROR", "error_logs.txt");
        outputFiles.put("CRITICAL", "critical_logs.txt");
        outputFiles.put("ALERT", "alert_logs.txt");

        logs.put("WARNING", new ArrayList<>());
        logs.put("ERROR", new ArrayList<>());
        logs.put("CRITICAL", new ArrayList<>());
        logs.put("ALERT", new ArrayList<>());
    }

    /**
     * Extracts log entries from a log file for WARNING, ERROR, CRITICAL, and ALERT levels
     * and saves each type of log entry to a different file.
     *
     * @param logFilePath The path to the log file.
     * @throws IOException If an I/O error occurs.
     */
    public static void extractLogEntries(String logFilePath) throws IOException {
        if (!Files.exists(Paths.get(logFilePath))) {
            throw new IOException("No log file found at the specified path: " + logFilePath);
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(logFilePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                for (String level : logs.keySet()) {
                    if (line.contains(level)) {
                        logs.get(level).add(line);
                        break;
                    }
                }
            }
        }

        for (Map.Entry<String, ArrayList<String>> entry : logs.entrySet()) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputFiles.get(entry.getKey())))) {
                for (String entryLine : entry.getValue()) {
                    writer.write(entryLine);
                    writer.newLine();
                }
                System.out.println("Saved " + entry.getValue().size() + " '" + entry.getKey() + "' entries to " + outputFiles.get(entry.getKey()) + ".");
            }
        }
    }

    public static void main(String[] args) {
        try {
            extractLogEntries("path/to/your/logfile.log");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Package and Class Definition**: The Java code is defined within the package `org.real.temp` and the class `Answer`.
2. **Javadoc Comments**: The Javadoc comments provide detailed documentation for the method, including the parameter description and any exceptions that might be thrown.
3. **Method Signature**: The `extractLogEntries` method takes a single `String` argument (`logFilePath`) and throws an `IOException` if necessary.
4. **Static Initialization Block**: Initializes the `outputFiles` and `logs` maps with the required keys and values.
5. **File Handling**: Uses `BufferedReader` and `BufferedWriter` for reading and writing files, respectively.
6. **Exception Handling**: Proper exception handling is included to manage file operations.
7. **Logging**: Prints the number of entries saved to each file after processing.

This Java code preserves the functionality and structure of the original Python function, including the detailed documentation and type annotations.