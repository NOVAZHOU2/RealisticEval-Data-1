Here’s how to convert the provided TypeScript function bytesToSize into Python while preserving the original functionality and comments.
Converted Python Code
python
def bytes_to_size(bytes: int) -> str:
    """
    Converts a given number of Bytes into a readable string representation 
    with the appropriate units (Bytes, KB, MB, GB, or TB) and keeps two decimal places.
    
    Args:
        bytes (int): The number of bytes to be converted.
        
    Returns:
        str: A string representation of the size in Bytes, KB, MB, GB, or TB.
    """
    # Define the size units array
    sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']
    
    # Return '0 Byte' if the input is zero
    if bytes == 0:
        return '0 Byte'
    
    # Calculate the index for the size unit and the converted size
    i = int(bytes).bit_length() // 10 if bytes > 0 else 0
    size = bytes / (1024 ** i)

    # Return the size with the appropriate unit formatted to two decimal places
    return f"{size:.2f} {sizes[i]}"

# Example usage
print(bytes_to_size(1500))      # Output: '1.46 KB'
print(bytes_to_size(1048576))   # Output: '1.00 MB'
print(bytes_to_size(0))          # Output: '0 Byte'
Breakdown of the Python Code:
Function Definition:
def bytes_to_size(bytes: int) -> str: defines a function named bytes_to_size, taking one argument bytes of type int, and returns a str.
Docstring:
The comments from the TypeScript code are adapted into a docstring format in Python, providing information about the function's purpose, parameters, and return values.
Size Units Array:
The sizes array holds the different size units: Bytes, KB, MB, GB, and TB.
Zero Check:
The function checks if the input is zero and returns '0 Byte' if true.
Index Calculation:
The index for the size unit is calculated using bit_length(), which efficiently determines the power of 1024 by leveraging binary representation. This is equivalent to Math.floor(Math.log(bytes) / Math.log(1024)) in the TypeScript version.
Size Conversion:
The size is calculated by dividing the number of bytes by
1024
i
and formatted to two decimal places using Python’s f-string syntax.
Return Statement:
The formatted string is returned, combining the size value with its corresponding unit.
Example Usage
The example usage at the bottom demonstrates how to call the bytes_to_size function and print its output for different byte values. You can run the code in a Python environment to see the results.