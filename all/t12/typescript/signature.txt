Certainly! Hereâ€™s the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation and type annotations:

```typescript
/**
 * Calculates the Euclidean distance between two agents based on their coordinates in the observations.
 *
 * @param agent1 - String representation of agent1's identifier.
 * @param agent2 - String representation of agent2's identifier.
 * @param observations - Dictionary containing observation data with agent identifiers as keys.
 *                       Each value is an object with 'x' and 'y' properties representing coordinates.
 * @returns The Euclidean distance between the two agents.
 */
function calculateDistance(agent1: string, agent2: string, observations: Record<string, { x: number; y: number }>): number {
    // Extract coordinates of both agents
    const { x: x1, y: y1 } = observations[agent1];
    const { x: x2, y: y2 } = observations[agent2];

    // Calculate the Euclidean distance
    const distance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));

    return distance;
}

// Example usage
const observations: Record<string, { x: number; y: number }> = {
    'agent1': { x: 3, y: 4 },
    'agent2': { x: 6, y: 8 }
};

console.log(calculateDistance('agent1', 'agent2', observations));
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc-style documentation is added to describe the function, its parameters, and its return type.

2. **Type Annotations**:
   - The `observations` parameter is typed as `Record<string, { x: number; y: number }>`. This ensures that it is a dictionary with string keys and values that have `x` and `y` properties.

3. **Mathematical Functions**:
   - The `Math.sqrt` and `Math.pow` functions are used to calculate the Euclidean distance, which is equivalent to the Python `np.sqrt` and exponentiation operations.

4. **Example Usage**:
   - An example usage is provided to demonstrate how the function can be called with sample observation data.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices.