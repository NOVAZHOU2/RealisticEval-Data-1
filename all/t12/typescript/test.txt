Sure! Below is the equivalent TypeScript test case using Jest for the provided Python function `calculate_distance`. Note that I'll assume you have a similar implementation of the `calculate_distance` function in TypeScript.

```typescript
import { calculateDistance } from './path-to-your-calculate-distance-file'; // Adjust the import path accordingly

describe('calculateDistance', () => {
  it('should calculate the Euclidean distance between two agents', () => {
    const observations = {
      agentA: { x: 0, y: 0 },
      agentB: { x: 3, y: 4 }
    };

    const distance = calculateDistance('agentA', 'agentB', observations);

    expect(distance).toBe(5); // Since the Euclidean distance between (0,0) and (3,4) is 5
  });

  it('should handle negative coordinates correctly', () => {
    const observations = {
      agentC: { x: -1, y: -1 },
      agentD: { x: 2, y: 3 }
    };

    const distance = calculateDistance('agentC', 'agentD', observations);

    expect(distance).toBe(Math.sqrt(18)); // Should be approximately 4.242640687119285
  });

  it('should handle zero coordinates correctly', () => {
    const observations = {
      agentE: { x: 0, y: 0 },
      agentF: { x: 0, y: 0 }
    };

    const distance = calculateDistance('agentE', 'agentF', observations);

    expect(distance).toBe(0);
  });
});
```

In this TypeScript test case:

- The `calculateDistance` function is imported from the appropriate file.
- Three tests are defined using `it` blocks within the `describe` block.
- Each test sets up an `observations` object and calls the `calculateDistance` function with specific arguments.
- The results are then asserted using Jest's `expect` function to ensure they match the expected values.

Make sure to adjust the import path (`./path-to-your-calculate-distance-file`) to point to where your `calculateDistance` function is located in your project.