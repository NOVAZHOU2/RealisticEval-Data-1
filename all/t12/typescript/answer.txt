Sure! Hereâ€™s the equivalent TypeScript code for the provided Python function, including the necessary type definitions and adjustments:

```typescript
import * as math from 'mathjs';

// Define the type for the observation data
type ObservationData = {
    [agentId: string]: {
        x: number;
        y: number;
    };
};

/**
 * Calculates the Euclidean distance between two agents based on their coordinates in the observations.
 * 
 * @param agent1 - String representation of agent1's identifier.
 * @param agent2 - String representation of agent2's identifier.
 * @param observations - Dictionary containing observation data with agent identifiers as keys.
 *                       Each value is an object with 'x' and 'y' properties representing coordinates.
 * @returns The Euclidean distance between the two agents.
 */
function calculateDistance(agent1: string, agent2: string, observations: ObservationData): number {
    // Extract coordinates of both agents
    const { x: x1, y: y1 } = observations[agent1];
    const { x: x2, y: y2 } = observations[agent2];

    // Calculate the Euclidean distance
    const distance = math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2));

    return distance;
}

// Example usage
const observations: ObservationData = {
    'agent1': { x: 3, y: 4 },
    'agent2': { x: 6, y: 8 }
};

console.log(calculateDistance('agent1', 'agent2', observations));
```

### Explanation:
1. **Type Definitions**:
   - `ObservationData` is defined as a type alias for the observation dictionary, ensuring that each agent has `x` and `y` properties.

2. **Importing Math Library**:
   - The `mathjs` library is used to provide mathematical functions like `sqrt` and `pow`, which are equivalent to `np.sqrt` and exponentiation in Python.

3. **Function Definition**:
   - The `calculateDistance` function is defined with proper type annotations for parameters and return type.

4. **Coordinate Extraction**:
   - Coordinates are extracted using destructuring assignment, which is a common pattern in TypeScript.

5. **Euclidean Distance Calculation**:
   - The Euclidean distance is calculated using the `math.sqrt` and `math.pow` functions from the `mathjs` library.

This TypeScript code maintains the same functionality and logic as the original Python code, while adhering to TypeScript's static type system and best practices.