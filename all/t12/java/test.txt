Certainly! Here is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`.

### Java Code:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.HashMap;
import java.util.Map;

public class Tester {

    @Test
    public void testSamePoint() {
        // Both agents are at the same point
        Map<String, Map<String, Double>> observations = new HashMap<>();
        Map<String, Double> agent1Coordinates = new HashMap<>();
        agent1Coordinates.put("x", 0.0);
        agent1Coordinates.put("y", 0.0);
        Map<String, Double> agent2Coordinates = new HashMap<>();
        agent2Coordinates.put("x", 0.0);
        agent2Coordinates.put("y", 0.0);

        observations.put("agent1", agent1Coordinates);
        observations.put("agent2", agent2Coordinates);

        double distance = calculateDistance("agent1", "agent2", observations);
        assertEquals(0.0, distance, 0.001);
    }

    @Test
    public void testHorizontalDistance() {
        // Agents are horizontally apart
        Map<String, Map<String, Double>> observations = new HashMap<>();
        Map<String, Double> agent1Coordinates = new HashMap<>();
        agent1Coordinates.put("x", 0.0);
        agent1Coordinates.put("y", 0.0);
        Map<String, Double> agent2Coordinates = new HashMap<>();
        agent2Coordinates.put("x", 3.0);
        agent2Coordinates.put("y", 0.0);

        observations.put("agent1", agent1Coordinates);
        observations.put("agent2", agent2Coordinates);

        double distance = calculateDistance("agent1", "agent2", observations);
        assertEquals(3.0, distance, 0.001);
    }

    @Test
    public void testVerticalDistance() {
        // Agents are vertically apart
        Map<String, Map<String, Double>> observations = new HashMap<>();
        Map<String, Double> agent1Coordinates = new HashMap<>();
        agent1Coordinates.put("x", 0.0);
        agent1Coordinates.put("y", 0.0);
        Map<String, Double> agent2Coordinates = new HashMap<>();
        agent2Coordinates.put("x", 0.0);
        agent2Coordinates.put("y", 4.0);

        observations.put("agent1", agent1Coordinates);
        observations.put("agent2", agent2Coordinates);

        double distance = calculateDistance("agent1", "agent2", observations);
        assertEquals(4.0, distance, 0.001);
    }

    @Test
    public void testDiagonalDistance() {
        // Agents are diagonally apart
        Map<String, Map<String, Double>> observations = new HashMap<>();
        Map<String, Double> agent1Coordinates = new HashMap<>();
        agent1Coordinates.put("x", 1.0);
        agent1Coordinates.put("y", 2.0);
        Map<String, Double> agent2Coordinates = new HashMap<>();
        agent2Coordinates.put("x", 4.0);
        agent2Coordinates.put("y", 6.0);

        observations.put("agent1", agent1Coordinates);
        observations.put("agent2", agent2Coordinates);

        double expectedDistance = Math.sqrt(Math.pow(4.0 - 1.0, 2) + Math.pow(6.0 - 2.0, 2));
        double distance = calculateDistance("agent1", "agent2", observations);
        assertEquals(expectedDistance, distance, 0.001);
    }

    @Test
    public void testNegativeCoordinates() {
        // Agents have negative coordinates
        Map<String, Map<String, Double>> observations = new HashMap<>();
        Map<String, Double> agent1Coordinates = new HashMap<>();
        agent1Coordinates.put("x", -1.0);
        agent1Coordinates.put("y", -1.0);
        Map<String, Double> agent2Coordinates = new HashMap<>();
        agent2Coordinates.put("x", -4.0);
        agent2Coordinates.put("y", -5.0);

        observations.put("agent1", agent1Coordinates);
        observations.put("agent2", agent2Coordinates);

        double expectedDistance = Math.sqrt(Math.pow(-4.0 + 1.0, 2) + Math.pow(-5.0 + 1.0, 2));
        double distance = calculateDistance("agent1", "agent2", observations);
        assertEquals(expectedDistance, distance, 0.001);
    }

    // Method to calculate the Euclidean distance
    private double calculateDistance(String agent1, String agent2, Map<String, Map<String, Double>> observations) {
        // Extract coordinates of both agents
        double x1 = observations.get(agent1).get("x");
        double y1 = observations.get(agent1).get("y");
        double x2 = observations.get(agent2).get("x");
        double y2 = observations.get(agent2).get("y");

        // Calculate the Euclidean distance
        double distance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));

        return distance;
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration `package org.real.temp;` is included at the beginning.
2. **Imports**: Necessary imports for `Map`, `HashMap`, and JUnit assertions are added.
3. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate it is a test case.
4. **JUnit Assertions**: The `assertEquals` method is used to assert the expected values.
5. **Test Methods**:
   - `testSamePoint`: Tests when both agents are at the same point.
   - `testHorizontalDistance`: Tests when agents are horizontally apart.
   - `testVerticalDistance`: Tests when agents are vertically apart.
   - `testDiagonalDistance`: Tests when agents are diagonally apart.
   - `testNegativeCoordinates`: Tests when agents have negative coordinates.
6. **Helper Method**: The `calculateDistance` method is defined to perform the actual calculation.

This setup ensures that the functionality and logic of the tests are preserved while adhering to Java's syntax and JUnit conventions.