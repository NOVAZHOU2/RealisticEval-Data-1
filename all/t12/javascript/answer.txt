Sure! Below is the equivalent JavaScript code for the provided Python function. The JavaScript version will use the `Math` object to perform the square root and power operations, similar to how `numpy` is used in Python.

```javascript
function calculateDistance(agent1, agent2, observations) {
    /**
     * Calculates the Euclidean distance between two agents based on their coordinates in the observations.
     *
     * @param {string} agent1 - String representation of agent1's identifier.
     * @param {string} agent2 - String representation of agent2's identifier.
     * @param {Object} observations - Object containing observation data with agent identifiers as keys.
     *                                Each value is an object with 'x' and 'y' properties representing coordinates.
     * @returns {number} Euclidean distance between the two agents.
     */
    // Extract coordinates of both agents
    const x1 = observations[agent1].x;
    const y1 = observations[agent1].y;
    const x2 = observations[agent2].x;
    const y2 = observations[agent2].y;

    // Calculate the Euclidean distance
    const distance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));

    return distance;
}
```

### Explanation:
1. **Function Definition**: The function `calculateDistance` is defined with parameters `agent1`, `agent2`, and `observations`.
2. **Coordinate Extraction**: The coordinates `x1`, `y1`, `x2`, and `y2` are extracted from the `observations` object using the agent identifiers.
3. **Euclidean Distance Calculation**: The Euclidean distance is calculated using the `Math.sqrt` and `Math.pow` functions, which are equivalent to `np.sqrt` and `**` in Python.
4. **Return Statement**: The calculated distance is returned by the function.

This JavaScript function maintains the same functionality, logic, and structure as the original Python function.