Sure! Below is the equivalent JavaScript test case using Jest for the provided Python function `calculate_distance`. Note that I'll assume the function exists in a file named `distance.js` and it exports the function.

```javascript
// distance.js
module.exports = {
  calculateDistance: function(agent1, agent2, observations) {
    const agent1Coords = observations[agent1];
    const agent2Coords = observations[agent2];

    if (!agent1Coords || !agent2Coords) {
      throw new Error('One or both agents not found in observations');
    }

    const dx = agent1Coords.x - agent2Coords.x;
    const dy = agent1Coords.y - agent2Coords.y;

    return Math.sqrt(dx * dx + dy * dy);
  }
};
```

Now, let's write the Jest test cases:

```javascript
// distance.test.js
const { calculateDistance } = require('./distance');

describe('calculateDistance', () => {
  test('calculates Euclidean distance correctly', () => {
    const observations = {
      agentA: { x: 0, y: 0 },
      agentB: { x: 3, y: 4 }
    };

    expect(calculateDistance('agentA', 'agentB', observations)).toBeCloseTo(5);
  });

  test('throws error if one or both agents not found', () => {
    const observations = {
      agentA: { x: 0, y: 0 }
    };

    expect(() => calculateDistance('agentA', 'agentC', observations)).toThrowError('One or both agents not found in observations');
  });
});
```

In this Jest test suite:

1. The first test checks if the `calculateDistance` function correctly calculates the Euclidean distance between two agents.
2. The second test checks if the function throws an error when one or both agents are not found in the observations.

Make sure you have Jest installed in your project. If not, you can install it using npm:

```sh
npm install --save-dev jest
```

Then, you can run the tests using:

```sh
npx jest
```

This will execute the tests and provide you with the results.