Sure! Here is the equivalent C++ code for the provided Python code. This code will calculate the Euclidean distance between two agents based on their coordinates stored in a map.

```cpp
#include <iostream>
#include <map>
#include <cmath>
#include <string>

// Function to calculate the Euclidean distance between two agents
float calculate_distance(const std::string& agent1, const std::string& agent2, const std::map<std::string, std::map<std::string, float>>& observations) {
    /**
     * Calculates the Euclidean distance between two agents based on their coordinates in the observations.
     *
     * @param agent1: String representation of agent1's identifier.
     * @param agent2: String representation of agent2's identifier.
     * @param observations: Map containing observation data with agent identifiers as keys.
     *                      Each value is a map with 'x' and 'y' keys representing coordinates.
     * @return: Euclidean distance between the two agents.
     */
    
    // Extract coordinates of both agents
    float x1 = observations.at(agent1).at("x");
    float y1 = observations.at(agent1).at("y");
    float x2 = observations.at(agent2).at("x");
    float y2 = observations.at(agent2).at("y");

    // Calculate the Euclidean distance
    float distance = std::sqrt(std::pow(x1 - x2, 2) + std::pow(y1 - y2, 2));

    return distance;
}

int main() {
    // Example usage
    std::map<std::string, std::map<std::string, float>> observations = {
        {"agent1", {{"x", 1.0f}, {"y", 2.0f}}},
        {"agent2", {{"x", 4.0f}, {"y", 6.0f}}}
    };

    float distance = calculate_distance("agent1", "agent2", observations);
    std::cout << "Distance: " << distance << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**: The necessary headers (`<iostream>`, `<map>`, `<cmath>`, `<string>`) are included to support the required functionalities.
2. **Function Definition**: The `calculate_distance` function takes three parameters: `agent1`, `agent2`, and `observations`. It uses a `std::map` to store the observation data.
3. **Coordinate Extraction**: Coordinates are extracted from the `observations` map using `.at()` to ensure that the keys exist.
4. **Euclidean Distance Calculation**: The Euclidean distance is calculated using `std::sqrt` and `std::pow`.
5. **Example Usage**: An example usage is provided in the `main` function to demonstrate how to call the `calculate_distance` function and print the result.