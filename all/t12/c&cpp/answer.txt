Sure! Below is the C++ version of your Python function `calculate_distance`. The function takes two agent identifiers and a dictionary-like structure containing observations. It calculates the Euclidean distance between the two agents based on their coordinates.

```cpp
#include <iostream>
#include <cmath>
#include <unordered_map>
#include <string>

struct Coordinate {
    double x;
    double y;
};

double calculateDistance(const std::string& agent1, const std::string& agent2, const std::unordered_map<std::string, Coordinate>& observations) {
    auto it1 = observations.find(agent1);
    auto it2 = observations.find(agent2);

    if (it1 == observations.end() || it2 == observations.end()) {
        throw std::invalid_argument("One or both agents not found in observations.");
    }

    const Coordinate& coord1 = it1->second;
    const Coordinate& coord2 = it2->second;

    double dx = coord1.x - coord2.x;
    double dy = coord1.y - coord2.y;

    return std::sqrt(dx * dx + dy * dy);
}

int main() {
    // Example usage
    std::unordered_map<std::string, Coordinate> observations = {
        {"agent1", {1.0, 2.0}},
        {"agent2", {4.0, 6.0}}
    };

    try {
        double distance = calculateDistance("agent1", "agent2", observations);
        std::cout << "Euclidean Distance: " << distance << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:

1. **Coordinate Structure**: A simple struct to hold the `x` and `y` coordinates.
2. **calculateDistance Function**:
   - Takes three parameters: `agent1`, `agent2`, and `observations`.
   - Uses `std::unordered_map` to simulate the dictionary structure for observations.
   - Checks if both agents exist in the observations map. If not, throws an exception.
   - Retrieves the coordinates for both agents and calculates the Euclidean distance using the formula \(\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\).
3. **main Function**: Demonstrates how to use the `calculateDistance` function with example data.

This C++ code should provide similar functionality to your original Python function. Make sure to handle any potential errors or edge cases as needed in your specific application context.