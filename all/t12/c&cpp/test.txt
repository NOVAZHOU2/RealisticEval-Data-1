Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

Here is the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <map>
#include <cmath>
#include <string>

// Function to calculate the Euclidean distance between two agents
float calculate_distance(const std::string& agent1, const std::string& agent2,
                         const std::map<std::string, std::map<std::string, float>>& observations) {
    // Extract coordinates of both agents
    float x1 = observations.at(agent1).at("x");
    float y1 = observations.at(agent1).at("y");
    float x2 = observations.at(agent2).at("x");
    float y2 = observations.at(agent2).at("y");

    // Calculate the Euclidean distance
    float distance = std::sqrt(std::pow(x1 - x2, 2) + std::pow(y1 - y2, 2));

    return distance;
}

TEST_CASE("Test Calculate Distance") {
    SECTION("Same Point") {
        // Both agents are at the same point
        std::map<std::string, std::map<std::string, float>> observations = {
            {"agent1", {{"x", 0.0f}, {"y", 0.0f}}},
            {"agent2", {{"x", 0.0f}, {"y", 0.0f}}}
        };
        REQUIRE(calculate_distance("agent1", "agent2", observations) == Approx(0.0f));
    }

    SECTION("Horizontal Distance") {
        // Agents are horizontally apart
        std::map<std::string, std::map<std::string, float>> observations = {
            {"agent1", {{"x", 0.0f}, {"y", 0.0f}}},
            {"agent2", {{"x", 3.0f}, {"y", 0.0f}}}
        };
        REQUIRE(calculate_distance("agent1", "agent2", observations) == Approx(3.0f));
    }

    SECTION("Vertical Distance") {
        // Agents are vertically apart
        std::map<std::string, std::map<std::string, float>> observations = {
            {"agent1", {{"x", 0.0f}, {"y", 0.0f}}},
            {"agent2", {{"x", 0.0f}, {"y", 4.0f}}}
        };
        REQUIRE(calculate_distance("agent1", "agent2", observations) == Approx(4.0f));
    }

    SECTION("Diagonal Distance") {
        // Agents are diagonally apart
        std::map<std::string, std::map<std::string, float>> observations = {
            {"agent1", {{"x", 1.0f}, {"y", 2.0f}}},
            {"agent2", {{"x", 4.0f}, {"y", 6.0f}}}
        };
        float expected_distance = std::sqrt(std::pow(4.0f - 1.0f, 2) + std::pow(6.0f - 2.0f, 2));
        REQUIRE(calculate_distance("agent1", "agent2", observations) == Approx(expected_distance));
    }

    SECTION("Negative Coordinates") {
        // Agents have negative coordinates
        std::map<std::string, std::map<std::string, float>> observations = {
            {"agent1", {{"x", -1.0f}, {"y", -1.0f}}},
            {"agent2", {{"x", -4.0f}, {"y", -5.0f}}}
        };
        float expected_distance = std::sqrt(std::pow(-4.0f + 1.0f, 2) + std::pow(-5.0f + 1.0f, 2));
        REQUIRE(calculate_distance("agent1", "agent2", observations) == Approx(expected_distance));
    }
}
```

### Explanation:
1. **Headers**: The necessary headers (`<catch2/catch_test_macros.hpp>`, `<map>`, `<cmath>`, `<string>`) are included to support the required functionalities.
2. **Function Definition**: The `calculate_distance` function is defined with the same logic as the Python version.
3. **Catch2 Test Suite**: The `TEST_CASE` macro defines the test suite, and each `SECTION` within it represents a specific test case.
4. **Assertions**: The `REQUIRE` macro is used for floating-point comparisons with `Approx` to ensure that the distances are approximately equal.
5. **Test Cases**:
   - **Same Point**: Tests if the distance between two agents at the same point is zero.
   - **Horizontal Distance**: Tests if the distance between two agents horizontally apart is correct.
   - **Vertical Distance**: Tests if the distance between two agents vertically apart is correct.
   - **Diagonal Distance**: Tests if the distance between two agents diagonally apart is correct.
   - **Negative Coordinates**: Tests if the distance between two agents with negative coordinates is correct.

This code ensures that the functionality and logic of the tests are preserved while adhering to C++ syntax and conventions.