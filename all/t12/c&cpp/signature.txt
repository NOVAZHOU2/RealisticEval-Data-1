Sure, here is the C++ code signature that matches the provided Python function signature:

```cpp
/**
 * Calculates the Euclidean distance between two agents based on their coordinates in the observations.
 *
 * @param agent1 The string representation of agent1's identifier.
 * @param agent2 The string representation of agent2's identifier.
 * @param observations A map containing observation questions with agent identifiers as keys. Each value is a struct or class with 'x' and 'y' members representing coordinates.
 * @return The Euclidean distance between the two agents.
 */
float calculateDistance(const std::string& agent1, const std::string& agent2, const std::map<std::string, Observation>& observations);
```

### Explanation:
- `const std::string&`: This indicates that the parameters `agent1` and `agent2` are constant references to strings, which means they will not be modified within the function.
- `std::map<std::string, Observation>`: This indicates that the `observations` parameter is a map where the keys are strings (representing agent identifiers) and the values are instances of an `Observation` struct or class. You would need to define the `Observation` struct or class accordingly.
- `float`: This indicates that the function returns a floating-point number representing the Euclidean distance.

### Example Definition for `Observation` Struct:
Here is an example of how you might define the `Observation` struct:

```cpp
struct Observation {
    double x;
    double y;
};
```

This struct represents the coordinates of an agent in the observations.