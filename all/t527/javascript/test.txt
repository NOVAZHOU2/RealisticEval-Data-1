Certainly! Hereâ€™s the equivalent Jest test suite for the given Python unittest class. We will convert the Python unittest class into a Jest test suite, ensuring that the functionality and logic of the tests are maintained.

### Python Code

```python
import unittest

def is_point_inside_triangle(px, py, x1, y1, x2, y2, x3, y3):
    """
    Check if a point is inside a triangle defined by three vertices.

    Args:
        px (float): The x-coordinate of the point to check.
        py (float): The y-coordinate of the point to check.
        x1 (float): The x-coordinate of the first vertex of the triangle.
        y1 (float): The y-coordinate of the first vertex of the triangle.
        x2 (float): The x-coordinate of the second vertex of the triangle.
        y2 (float): The y-coordinate of the second vertex of the triangle.
        x3 (float): The x-coordinate of the third vertex of the triangle.
        y3 (float): The y-coordinate of the third vertex of the triangle.

    Returns:
        bool: True if the point (px, py) is inside or on the edge of the triangle; False otherwise.
    """
    # Calculate the area of the triangle ABC
    A = area(x1, y1, x2, y2, x3, y3)

    # Calculate the area of the triangles PAB, PBC, and PCA
    A1 = area(px, py, x1, y1, x2, y2)
    A2 = area(px, py, x2, y2, x3, y3)
    A3 = area(px, py, x3, y3, x1, y1)

    # Check if the sum of A1, A2, and A3 is equal to A
    return A == (A1 + A2 + A3)

# Helper function to calculate the area of a triangle given its vertices
def area(x1, y1, x2, y2, x3, y3):
    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)


class TestPointInsideTriangle(unittest.TestCase):

    def test_point_inside_triangle(self):
        """Test case where point is inside the triangle."""
        triangle_vertices = (0, 0, 5, 0, 2.5, 5)
        point = (2.5, 2)  # Inside the triangle
        self.assertTrue(is_point_inside_triangle(point[0], point[1], *triangle_vertices))

    def test_point_on_edge(self):
        """Test case where point is on the edge of the triangle."""
        triangle_vertices = (0, 0, 5, 0, 2.5, 5)
        point = (2.5, 0)  # On the edge of the triangle
        self.assertTrue(is_point_inside_triangle(point[0], point[1], *triangle_vertices))

    def test_point_outside_triangle(self):
        """Test case where point is outside the triangle."""
        triangle_vertices = (0, 0, 5, 0, 2.5, 5)
        point = (6, 2)  # Outside the triangle
        self.assertFalse(is_point_inside_triangle(point[0], point[1], *triangle_vertices))

    def test_point_at_vertex(self):
        """Test case where point is at one of the triangle's vertices."""
        triangle_vertices = (0, 0, 5, 0, 2.5, 5)
        point = (0, 0)  # At the vertex of the triangle
        self.assertTrue(is_point_inside_triangle(point[0], point[1], *triangle_vertices))
```

### Equivalent Jest Test Suite

```javascript
const { isPointInsideTriangle, area } = require('./path/to/your/functions');

describe('TestPointInsideTriangle', () => {
    it('should return true when the point is inside the triangle', () => {
        const triangleVertices = [0, 0, 5, 0, 2.5, 5];
        const point = [2.5, 2];  // Inside the triangle
        expect(isPointInsideTriangle(point[0], point[1], ...triangleVertices)).toBe(true);
    });

    it('should return true when the point is on the edge of the triangle', () => {
        const triangleVertices = [0, 0, 5, 0, 2.5, 5];
        const point = [2.5, 0];  // On the edge of the triangle
        expect(isPointInsideTriangle(point[0], point[1], ...triangleVertices)).toBe(true);
    });

    it('should return false when the point is outside the triangle', () => {
        const triangleVertices = [0, 0, 5, 0, 2.5, 5];
        const point = [6, 2];  // Outside the triangle
        expect(isPointInsideTriangle(point[0], point[1], ...triangleVertices)).toBe(false);
    });

    it('should return true when the point is at one of the triangle\'s vertices', () => {
        const triangleVertices = [0, 0, 5, 0, 2.5, 5];
        const point = [0, 0];  // At the vertex of the triangle
        expect(isPointInsideTriangle(point[0], point[1], ...triangleVertices)).toBe(true);
    });
});

// Helper function to calculate the area of a triangle given its vertices
function area(x1, y1, x2, y2, x3, y3) {
    return Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0);
}

// Main function to check if a point is inside a triangle
function isPointInsideTriangle(px, py, x1, y1, x2, y2, x3, y3) {
    // Calculate the area of the triangle ABC
    const A = area(x1, y1, x2, y2, x3, y3);

    // Calculate the area of the triangles PAB, PBC, and PCA
    const A1 = area(px, py, x1, y1, x2, y2);
    const A2 = area(px, py, x2, y2, x3, y3);
    const A3 = area(px, py, x3, y3, x1, y1);

    // Check if the sum of A1, A2, and A3 is equal to A
    return A === (A1 + A2 + A3);
}
```

### Explanation:
1. **Import Statements**: The `isPointInsideTriangle` and `area` functions are imported from the appropriate module.
2. **Test Suite Structure**: The `describe` block is used to group the test cases, and each test case is defined using the `it` block.
3. **Assertions**: The `expect` function is used to make assertions, and `toBe` is used to check boolean values.
4. **Helper Functions**: The `area` and `isPointInsideTriangle` functions are defined in JavaScript to match the Python implementation.
5. **Spread Operator**: The spread operator (`...`) is used to unpack the `triangleVertices` array, which is equivalent to the Python `*` operator for unpacking arguments.

This ensures that the Jest test suite is equivalent to the Python unittest class in terms of functionality and structure.