Certainly! Below is the equivalent TypeScript code using Jest for the provided Python unittest test class. This includes the necessary type annotations and Jest assertions to ensure the functionality and logic of the tests are preserved.

### TypeScript Code with Jest Testing

```typescript
import { isPointInsideTriangle } from './path-to-your-functions'; // Import the isPointInsideTriangle function

describe('TestPointInsideTriangle', () => {
    it('test_point_inside_triangle', () => {
        // Test case where point is inside the triangle.
        const triangleVertices = [0, 0, 5, 0, 2.5, 5];
        const point = [2.5, 2];  // Inside the triangle
        expect(isPointInsideTriangle(point[0], point[1], ...triangleVertices)).toBe(true);
    });

    it('test_point_on_edge', () => {
        // Test case where point is on the edge of the triangle.
        const triangleVertices = [0, 0, 5, 0, 2.5, 5];
        const point = [2.5, 0];  // On the edge of the triangle
        expect(isPointInsideTriangle(point[0], point[1], ...triangleVertices)).toBe(true);
    });

    it('test_point_outside_triangle', () => {
        // Test case where point is outside the triangle.
        const triangleVertices = [0, 0, 5, 0, 2.5, 5];
        const point = [6, 2];  // Outside the triangle
        expect(isPointInsideTriangle(point[0], point[1], ...triangleVertices)).toBe(false);
    });

    it('test_point_at_vertex', () => {
        // Test case where point is at one of the triangle's vertices.
        const triangleVertices = [0, 0, 5, 0, 2.5, 5];
        const point = [0, 0];  // At the vertex of the triangle
        expect(isPointInsideTriangle(point[0], point[1], ...triangleVertices)).toBe(true);
    });
});

// Utility functions for testing
function isPointInsideTriangle(px: number, py: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): boolean {
    // Calculate the area of the triangle ABC
    const A = area(x1, y1, x2, y2, x3, y3);

    // Calculate the area of the triangles PAB, PBC, and PCA
    const A1 = area(px, py, x1, y1, x2, y2);
    const A2 = area(px, py, x2, y2, x3, y3);
    const A3 = area(px, py, x3, y3, x1, y1);

    // Check if the sum of A1, A2, and A3 is equal to A
    return A === (A1 + A2 + A3);
}

function area(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): number {
    return Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0);
}
```

### Explanation:
1. **Importing Functions**:
   - The `isPointInsideTriangle` function is imported from the appropriate module.

2. **Jest Testing Suite**:
   - The `describe` block groups the test cases under a single suite named `TestPointInsideTriangle`.
   - Each test case is defined using the `it` function, which takes a description and a test function.

3. **Test Cases**:
   - Each test case uses `expect` to assert the expected behavior of the `isPointInsideTriangle` function.
   - The spread operator (`...`) is used to unpack the `triangleVertices` array when calling the function.

4. **Utility Functions**:
   - The `isPointInsideTriangle` and `area` functions are included to ensure the tests can run correctly.

5. **Assertions**:
   - `expect(isPointInsideTriangle(...)).toBe(true)` and `expect(isPointInsideTriangle(...)).toBe(false)` are used to verify the expected boolean values.

This TypeScript code with Jest testing preserves the original functionality and logic of the Python unittest test class, ensuring that the tests are equivalent and properly structured.