Here's how you can convert your Python unittest test class into a TypeScript test case using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

function isPointInsideTriangle(px: number, py: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): boolean {
    // Function implementation remains the same
}

describe('isPointInsideTriangle', () => {
    it('should return true for points inside the triangle', () => {
        expect(isPointInsideTriangle(0, 0, -1, 0, 0, 1, 1, 1)).toBe(true);
        expect(isPointInsideTriangle(0.5, 0.5, 0, 0, 1, 0, 0, 1)).toBe(true);
    });

    it('should return false for points outside the triangle', () => {
        expect(isPointInsideTriangle(-2, -2, -1, 0, 0, 1, 1, 1)).toBe(false);
        expect(isPointInsideTriangle(1.5, 1.5, 0, 0, 1, 0, 0, 1)).toBe(false);
    });

    it('should return true for points on the edges of the triangle', () => {
        expect(isPointInsideTriangle(-1, 0, -1, 0, 0, 1, 1, 1)).toBe(true);
        expect(isPointInsideTriangle(0, 1, -1, 0, 0, 1, 1, 1)).toBe(true);
        expect(isPointInsideTriangle(1, 1, -1, 0, 0, 1, 1, 1)).toBe(true);
    });
});
```

In this TypeScript version, we use Jest's `describe`, `it`, and `expect` functions to create our test suite and individual tests. We also use `toBe` to assert that the function returns the expected boolean values. Note that the `isPointInsideTriangle` function itself remains unchanged from the original Python code.