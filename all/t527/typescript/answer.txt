Certainly! Below is the equivalent TypeScript code for the provided Python functions:

```typescript
function area(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): number {
    // Calculate the area of a triangle given by its vertices.
    return Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0);
}

function isPointInsideTriangle(px: number, py: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): boolean {
    // Calculate the area of the triangle ABC
    const A = area(x1, y1, x2, y2, x3, y3);

    // Calculate the area of the triangles PAB, PBC, and PCA
    const A1 = area(px, py, x1, y1, x2, y2);
    const A2 = area(px, py, x2, y2, x3, y3);
    const A3 = area(px, py, x3, y3, x1, y1);

    // Check if the sum of A1, A2, and A3 is equal to A
    return A === (A1 + A2 + A3);
}
```

### Explanation:
1. **Function Definitions**:
   - The `area` function calculates the area of a triangle using the given vertices.
   - The `isPointInsideTriangle` function checks if a point `(px, py)` is inside the triangle formed by the vertices `(x1, y1)`, `(x2, y2)`, and `(x3, y3)`.

2. **Type Annotations**:
   - All parameters and return types are explicitly typed with `number` or `boolean`.

3. **Mathematical Operations**:
   - The `Math.abs` function is used to calculate the absolute value of the area, which is equivalent to `abs` in Python.

4. **Equality Check**:
   - The equality check `A === (A1 + A2 + A3)` ensures that the sum of the areas of the sub-triangles equals the area of the main triangle, indicating that the point is inside the triangle.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate adjustments for TypeScript's static type system.