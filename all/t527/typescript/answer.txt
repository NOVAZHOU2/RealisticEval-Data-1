Sure! Below is the equivalent TypeScript function for the given Python code:

```typescript
function isPointInsideTriangle(px: number, py: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): boolean {
    /**
     * Check if a point is inside a triangle defined by three vertices.
     *
     * @param px - The x-coordinate of the point to check.
     * @param py - The y-coordinate of the point to check.
     * @param x1 - The x-coordinate of the first vertex of the triangle.
     * @param y1 - The y-coordinate of the first vertex of the triangle.
     * @param x2 - The x-coordinate of the second vertex of the triangle.
     * @param y2 - The y-coordinate of the second vertex of the triangle.
     * @param x3 - The x-coordinate of the third vertex of the triangle.
     * @param y3 - The y-coordinate of the third vertex of the triangle.
     * @returns true if the point (px, py) is inside or on the edge of the triangle formed by the vertices (x1, y1), (x2, y2), (x3, y3); false otherwise.
     */
    
    // Helper function to calculate the sign of the area of the triangle formed by three points
    function sign(p1x: number, p1y: number, p2x: number, p2y: number, p3x: number, p3y: number): number {
        return (p1x - p3x) * (p2y - p3y) - (p2x - p3x) * (p1y - p3y);
    }

    const d1 = sign(px, py, x1, y1, x2, y2);
    const d2 = sign(px, py, x2, y2, x3, y3);
    const d3 = sign(px, py, x3, y3, x1, y1);

    const hasNeg = (d1 < 0) || (d2 < 0) || (d3 < 0);
    const hasPos = (d1 > 0) || (d2 > 0) || (d3 > 0);

    return !(hasNeg && hasPos);
}
```

This TypeScript function `isPointInsideTriangle` takes the same parameters as the Python function and returns a boolean indicating whether the point `(px, py)` is inside or on the edge of the triangle formed by the vertices `(x1, y1)`, `(x2, y2)`, and `(x3, y3)`.