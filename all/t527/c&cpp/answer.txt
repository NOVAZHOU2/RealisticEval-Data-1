Certainly! Below is the equivalent C++ code for the provided Python functions:

```cpp
#include <iostream>
#include <cmath>

// Function to calculate the area of a triangle given by its vertices
double area(double x1, double y1, double x2, double y2, double x3, double y3) {
    return std::abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0);
}

// Function to check if a point (px, py) is inside the triangle formed by (x1, y1), (x2, y2), (x3, y3)
bool is_point_inside_triangle(double px, double py, double x1, double y1, double x2, double y2, double x3, double y3) {
    // Calculate the area of the triangle ABC
    double A = area(x1, y1, x2, y2, x3, y3);

    // Calculate the area of the triangles PAB, PBC, and PCA
    double A1 = area(px, py, x1, y1, x2, y2);
    double A2 = area(px, py, x2, y2, x3, y3);
    double A3 = area(px, py, x3, y3, x1, y1);

    // Check if the sum of A1, A2, and A3 is equal to A
    return std::abs(A - (A1 + A2 + A3)) < 1e-9; // Using a small epsilon value for floating-point comparison
}

int main() {
    // Example usage
    double px = 1.0, py = 1.0;
    double x1 = 0.0, y1 = 0.0;
    double x2 = 2.0, y2 = 0.0;
    double x3 = 1.0, y3 = 2.0;

    bool result = is_point_inside_triangle(px, py, x1, y1, x2, y2, x3, y3);
    std::cout << "Is the point inside the triangle? " << (result ? "Yes" : "No") << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Definitions**:
   - `area`: This function calculates the area of a triangle using the given vertices.
   - `is_point_inside_triangle`: This function checks if a point is inside a triangle by comparing the areas.

2. **Floating Point Comparison**:
   - In C++, floating-point comparisons should use an epsilon value to account for rounding errors. Here, `1e-9` is used as a small threshold for comparison.

3. **Main Function**:
   - The `main` function demonstrates how to call `is_point_inside_triangle` with example points and prints the result.

This code maintains the same functionality and logic as the original Python code but adapts it to C++ syntax and best practices.