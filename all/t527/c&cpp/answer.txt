Sure! Below is the equivalent C++ and C code for your Python function:

### C++ Code

```cpp
#include <iostream>

bool isPointInsideTriangle(double px, double py, double x1, double y1, double x2, double y2, double x3, double y3) {
    // Calculate vectors AB, AC, AP
    double abX = x2 - x1;
    double abY = y2 - y1;
    double acX = x3 - x1;
    double acY = y3 - y1;
    double apX = px - x1;
    double apY = py - y1;

    // Calculate dot products
    double d1 = abX * apX + abY * apY;
    double d2 = acX * apX + acY * apY;
    double d3 = abX * acY - abY * acX;

    // Check if point is inside the triangle
    return (d1 >= 0 && d2 >= 0 && d3 >= 0) || 
           (d1 <= 0 && d2 <= 0 && d3 <= 0);
}

int main() {
    double px = 1.0, py = 1.0;
    double x1 = 0.0, y1 = 0.0;
    double x2 = 2.0, y2 = 0.0;
    double x3 = 1.0, y3 = 2.0;

    if (isPointInsideTriangle(px, py, x1, y1, x2, y2, x3, y3)) {
        std::cout << "Point is inside the triangle." << std::endl;
    } else {
        std::cout << "Point is outside the triangle." << std::endl;
    }

    return 0;
}
```

### C Code

```c
#include <stdio.h>
#include <stdbool.h>

bool isPointInsideTriangle(double px, double py, double x1, double y1, double x2, double y2, double x3, double y3) {
    // Calculate vectors AB, AC, AP
    double abX = x2 - x1;
    double abY = y2 - y1;
    double acX = x3 - x1;
    double acY = y3 - y1;
    double apX = px - x1;
    double apY = py - y1;

    // Calculate dot products
    double d1 = abX * apX + abY * apY;
    double d2 = acX * apX + acY * apY;
    double d3 = abX * acY - abY * acX;

    // Check if point is inside the triangle
    return (d1 >= 0 && d2 >= 0 && d3 >= 0) || 
           (d1 <= 0 && d2 <= 0 && d3 <= 0);
}

int main() {
    double px = 1.0, py = 1.0;
    double x1 = 0.0, y1 = 0.0;
    double x2 = 2.0, y2 = 0.0;
    double x3 = 1.0, y3 = 2.0;

    if (isPointInsideTriangle(px, py, x1, y1, x2, y2, x3, y3)) {
        printf("Point is inside the triangle.\n");
    } else {
        printf("Point is outside the triangle.\n");
    }

    return 0;
}
```

Both versions of the code perform the same task as the original Python function. They calculate vectors from the point to each vertex of the triangle and then determine if the point lies inside the triangle based on the signs of the dot products.