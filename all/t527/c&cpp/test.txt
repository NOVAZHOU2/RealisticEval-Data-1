Sure! Below is the equivalent C++ unit test case using Catch2 for the `is_point_inside_triangle` function:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file

#include "catch.hpp"
#include <cmath>

bool is_point_inside_triangle(float px, float py, float x1, float y1, float x2, float y2, float x3, float y3) {
    // Calculate vectors
    float v0[2] = {x3 - x1, y3 - y1};
    float v1[2] = {x2 - x1, y2 - y1};
    float v2[2] = {px - x1, py - y1};

    // Compute dot products
    float dot00 = v0[0] * v0[0] + v0[1] * v0[1];
    float dot01 = v0[0] * v1[0] + v0[1] * v1[1];
    float dot02 = v0[0] * v2[0] + v0[1] * v2[1];
    float dot11 = v1[0] * v1[0] + v1[1] * v1[1];
    float dot12 = v1[0] * v2[0] + v1[1] * v2[1];

    // Compute barycentric coordinates
    float invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
    float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    float v = (dot00 * dot12 - dot01 * dot02) * invDenom;

    // Check if point is in triangle
    return (u >= 0) && (v >= 0) && (u + v <= 1);
}

TEST_CASE("Point Inside Triangle", "[triangle]") {
    REQUIRE(is_point_inside_triangle(0.5f, 0.5f, 0.0f, 0.0f, 1.0f, 0.0f, 0.5f, 1.0f) == true);
    REQUIRE(is_point_inside_triangle(0.75f, 0.25f, 0.0f, 0.0f, 1.0f, 0.0f, 0.5f, 1.0f) == true);
    REQUIRE(is_point_inside_triangle(-0.25f, 0.25f, 0.0f, 0.0f, 1.0f, 0.0f, 0.5f, 1.0f) == false);
    REQUIRE(is_point_inside_triangle(0.5f, -0.25f, 0.0f, 0.0f, 1.0f, 0.0f, 0.5f, 1.0f) == false);
    REQUIRE(is_point_inside_triangle(0.25f, 0.75f, 0.0f, 0.0f, 1.0f, 0.0f, 0.5f, 1.0f) == true);
    REQUIRE(is_point_inside_triangle(0.75f, 0.75f, 0.0f, 0.0f, 1.0f, 0.0f, 0.5f, 1.0f) == true);
    REQUIRE(is_point_inside_triangle(0.25f, -0.25f, 0.0f, 0.0f, 1.0f, 0.0f, 0.5f, 1.0f) == false);
    REQUIRE(is_point_inside_triangle(-0.25f, -0.25f, 0.0f, 0.0f, 1.0f, 0.0f, 0.5f, 1.0f) == false);
}
```

### Explanation:
1. **Catch2 Setup**: The `#define CATCH_CONFIG_MAIN` directive tells Catch to automatically generate a `main()` function.
2. **Function Definition**: The `is_point_inside_triangle` function remains unchanged from your Python version.
3. **Test Case**: The `TEST_CASE` macro defines a new test case named "Point Inside Triangle". Multiple `REQUIRE` statements are used to verify different scenarios where the point should be inside or outside the triangle.

This C++ code will compile and run using Catch2, verifying the correctness of the `is_point_inside_triangle` function with various test cases.