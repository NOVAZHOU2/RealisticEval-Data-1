Certainly! Below is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The test cases are converted to use JUnit annotations and assertions, ensuring that the functionality and logic of the tests are preserved.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Test class for checking if a point is inside a triangle.
 */
public class Tester {

    /**
     * Test case where the point is inside the triangle.
     */
    @Test
    public void testPointInsideTriangle() {
        double[] triangleVertices = {0, 0, 5, 0, 2.5, 5};
        double px = 2.5;
        double py = 2;  // Inside the triangle

        assertTrue(isPointInsideTriangle(px, py, triangleVertices[0], triangleVertices[1],
                                         triangleVertices[2], triangleVertices[3],
                                         triangleVertices[4], triangleVertices[5]));
    }

    /**
     * Test case where the point is on the edge of the triangle.
     */
    @Test
    public void testPointOnEdge() {
        double[] triangleVertices = {0, 0, 5, 0, 2.5, 5};
        double px = 2.5;
        double py = 0;  // On the edge of the triangle

        assertTrue(isPointInsideTriangle(px, py, triangleVertices[0], triangleVertices[1],
                                         triangleVertices[2], triangleVertices[3],
                                         triangleVertices[4], triangleVertices[5]));
    }

    /**
     * Test case where the point is outside the triangle.
     */
    @Test
    public void testPointOutsideTriangle() {
        double[] triangleVertices = {0, 0, 5, 0, 2.5, 5};
        double px = 6;
        double py = 2;  // Outside the triangle

        assertFalse(isPointInsideTriangle(px, py, triangleVertices[0], triangleVertices[1],
                                          triangleVertices[2], triangleVertices[3],
                                          triangleVertices[4], triangleVertices[5]));
    }

    /**
     * Test case where the point is at one of the triangle's vertices.
     */
    @Test
    public void testPointAtVertex() {
        double[] triangleVertices = {0, 0, 5, 0, 2.5, 5};
        double px = 0;
        double py = 0;  // At the vertex of the triangle

        assertTrue(isPointInsideTriangle(px, py, triangleVertices[0], triangleVertices[1],
                                         triangleVertices[2], triangleVertices[3],
                                         triangleVertices[4], triangleVertices[5]));
    }

    /**
     * Helper method to check if a point is inside a triangle.
     *
     * @param px The x-coordinate of the point to check.
     * @param py The y-coordinate of the point to check.
     * @param x1 The x-coordinate of the first vertex of the triangle.
     * @param y1 The y-coordinate of the first vertex of the triangle.
     * @param x2 The x-coordinate of the second vertex of the triangle.
     * @param y2 The y-coordinate of the second vertex of the triangle.
     * @param x3 The x-coordinate of the third vertex of the triangle.
     * @param y3 The y-coordinate of the third vertex of the triangle.
     * @return true if the point (px, py) is inside or on the edge of the triangle; false otherwise.
     */
    private static boolean isPointInsideTriangle(double px, double py, double x1, double y1, double x2, double y2, double x3, double y3) {
        double A = calculateTriangleArea(x1, y1, x2, y2, x3, y3);
        double A1 = calculateTriangleArea(px, py, x1, y1, x2, y2);
        double A2 = calculateTriangleArea(px, py, x2, y2, x3, y3);
        double A3 = calculateTriangleArea(px, py, x3, y3, x1, y1);

        return Math.abs(A - (A1 + A2 + A3)) < 1e-9; // Using a small epsilon for floating-point comparison
    }

    /**
     * Calculates the area of a triangle given by its vertices.
     *
     * @param x1 The x-coordinate of the first vertex.
     * @param y1 The y-coordinate of the first vertex.
     * @param x2 The x-coordinate of the second vertex.
     * @param y2 The y-coordinate of the second vertex.
     * @param x3 The x-coordinate of the third vertex.
     * @param y3 The y-coordinate of the third vertex.
     * @return the area of the triangle.
     */
    private static double calculateTriangleArea(double x1, double y1, double x2, double y2, double x3, double y3) {
        return Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0);
    }
}
```

### Explanation:
1. **Package and Class Definition**: The test class `Tester` is defined within the package `org.real.temp`.
2. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.
3. **Assertions**: JUnit's `assertTrue` and `assertFalse` methods are used to assert the expected outcomes.
4. **Helper Methods**: The `isPointInsideTriangle` and `calculateTriangleArea` methods are included to perform the actual calculations.
5. **Parameter Unpacking**: The Python `*triangle_vertices` syntax is replaced with direct parameter unpacking in Java.

This Java code preserves the functionality and logic of the original Python test cases while adhering to JUnit's conventions and best practices.