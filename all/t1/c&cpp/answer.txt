Hereâ€™s how you can translate the provided Python code into C++:

```cpp
#include <iostream>
#include <string>
#include <sstream>
#include <variant>

std::variant<int, float, std::string> numericalStrConvert(const std::string& value) {
    // Try to convert to an integer
    try {
        size_t idx;
        int intValue = std::stoi(value, &idx);
        // Ensure the entire string was consumed
        if (idx == value.length()) {
            return intValue;
        }
    } catch (const std::invalid_argument&) {
        // Not an integer
    } catch (const std::out_of_range&) {
        // Integer out of range
    }

    // Try to convert to a float
    try {
        size_t idx;
        float floatValue = std::stof(value, &idx);
        // Ensure the entire string was consumed
        if (idx == value.length()) {
            return floatValue;
        }
    } catch (const std::invalid_argument&) {
        // Not a float
    } catch (const std::out_of_range&) {
        // Float out of range
    }

    // Return the original string if neither conversion succeeded
    return value;
}

int main() {
    std::string input;
    std::cout << "Enter a value: ";
    std::cin >> input;

    auto result = numericalStrConvert(input);

    // Check the type of the result and print it
    if (std::holds_alternative<int>(result)) {
        std::cout << "Converted to int: " << std::get<int>(result) << std::endl;
    } else if (std::holds_alternative<float>(result)) {
        std::cout << "Converted to float: " << std::get<float>(result) << std::endl;
    } else {
        std::cout << "Original string: " << std::get<std::string>(result) << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Signature**: In C++, we use `std::variant` to return multiple types (int, float, or string).
2. **String to Number Conversion**: We use `std::stoi` and `std::stof` for converting strings to integers and floats, respectively, along with error handling.
3. **Main Function**: It reads input from the user, calls the conversion function, and prints the result based on its type.

Make sure to include the necessary headers and to compile with a C++17 or later standard due to the use of `std::variant`.