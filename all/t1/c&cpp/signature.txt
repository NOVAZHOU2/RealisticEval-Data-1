Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <string>
#include <sstream>
#include <iostream>

// Define a union to hold either an int, float, or std::string
union ConvertResult {
    int intValue;
    float floatValue;
    std::string stringValue;

    // Destructor to handle cleanup
    ~ConvertResult() {
        // Free memory if stringValue is used
        if (stringValue.data() != nullptr) {
            stringValue.~basic_string();
        }
    }

    // Equality operator to compare union values
    bool operator==(const int& other) const {
        return intValue == other;
    }

    bool operator==(const float& other) const {
        return floatValue == other;
    }

    bool operator==(const std::string& other) const {
        return stringValue == other;
    }
};

/**
 * Convert the input string, first see if it is an integer, if it is converted to an integer,
 * if it is not, see if it is a floating point number, if yes, convert to a floating point number,
 * if neither, return the original string.
 *
 * @param value The input string value.
 * @return A union containing the converted value (int, float, or original string).
 */
ConvertResult numericalStrConvert(const std::string& value) {
    std::istringstream iss(value);
    ConvertResult result;

    // Try to convert to an integer
    if (iss >> result.intValue && iss.eof()) {
        return result;
    }

    // Clear the error flags and try to convert to a float
    iss.clear();
    iss.str(value);
    if (iss >> result.floatValue && iss.eof()) {
        return result;
    }

    // If neither conversion is possible, return the original string
    result.stringValue = value;
    return result;
}

int main() {
    std::string testValues[] = {"123", "45.67", "hello"};

    for (const auto& val : testValues) {
        ConvertResult result = numericalStrConvert(val);

        if (result == 123) {
            std::cout << "Converted to int: " << result.intValue << std::endl;
        } else if (result == 45.67f) {
            std::cout << "Converted to float: " /* 45.67f */ << result.floatValue << std::endl;
        } else {
            std::cout << "Original string: " << result.stringValue << std::endl;
        }
    }

    return 0;
}
```

### Explanation:
1. **Union Definition**: The `ConvertResult` union holds either an `int`, `float`, or `std::string`. The destructor ensures proper cleanup of the `std::string` if it is used.
2. **Equality Operators**: Overloaded equality operators are defined to compare the union with `int`, `float`, and `std::string`.
3. **Function Documentation**: The `numericalStrConvert` function is documented using C++ style comments and documentation.
4. **Conversion Function**: The `numericalStrConvert` function attempts to convert the input string to an integer or a float using `std::istringstream`. If neither conversion is possible, it returns the original string.
5. **Main Function**: Demonstrates usage of the `numericalStrConvert` function with sample test cases.

This approach preserves the functionality and structure of the original Python code while adapting to C++ syntax and features.