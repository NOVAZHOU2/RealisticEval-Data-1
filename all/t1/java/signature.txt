Certainly! Here is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and type conversions:

```java
package org.real.temp;

/**
 * A utility class for converting strings to numbers.
 */
public class Answer {

    /**
     * Converts the input string to an integer or a float if possible.
     * If the string cannot be converted to a number, it returns the original string.
     *
     * @param value the input string to be converted
     * @return the converted value as an Integer, Float, or the original String
     */
    public static Object numericalStrConvert(String value) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            try {
                return Float.parseFloat(value);
            } catch (NumberFormatException ex) {
                return value;
            }
        }
    }

    public static void main(String[] args) {
        // Example usage
        System.out.println(numericalStrConvert("123")); // Should print 123 as an integer
        System.out.println(numericalStrConvert("123.456")); // Should print 123.456 as a float
        System.out.println(numericalStrConvert("abc")); // Should print "abc" as a string
    }
}
```

### Explanation:
1. **Package Declaration**:
   - The package declaration `package org.real.temp;` ensures that the code is organized within the specified package.

2. **Class Definition**:
   - The class `Answer` is defined with the appropriate access modifier (`public`).

3. **Javadoc Comments**:
   - The Javadoc comments provide detailed documentation for the method `numericalStrConvert`.

4. **Method Signature**:
   - The method `numericalStrConvert` takes a `String` parameter named `value`.
   - The return type is `Object`, which can be an `Integer`, `Float`, or `String`.

5. **Exception Handling**:
   - The method uses `try-catch` blocks to handle `NumberFormatException` when attempting to parse the string as an integer or float.

6. **Main Method**:
   - The `main` method demonstrates example usage of the `numericalStrConvert` method.

This Java code preserves the original functionality and structure of the Python code, including the type conversions and exception handling. The Javadoc comments provide clear documentation for the method.