Here is the equivalent Java code for the provided Python code:

```java
package org.real.temp;

public class Answer {

    /**
     * Converts the input string to an integer or a float if possible.
     * If the string cannot be converted to a number, it returns the original string.
     *
     * @param value the input string to be converted
     * @return the converted value as Integer, Float, or the original String
     */
    public static Object numericalStrConvert(String value) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            try {
                return Float.parseFloat(value);
            } catch (NumberFormatException ex) {
                return value;
            }
        }
    }

    public static void main(String[] args) {
        // Example usage
        System.out.println(numericalStrConvert("123")); // Should print 123 as an integer
        System.out.println(numericalStrConvert("123.456")); // Should print 123.456 as a float
        System.out.println(numericalStrConvert("abc")); // Should print "abc" as a string
    }
}
```

### Explanation:
- **Method Signature**: The method `numericalStrConvert` takes a single `String` parameter and returns an `Object` which can be either an `Integer`, `Float`, or `String`.
- **Exception Handling**: Java uses exception handling to determine whether the string can be parsed into an integer or a float. If parsing fails, it catches the `NumberFormatException` and proceeds to the next conversion attempt.
- **Return Type**: Since the method can return different types (`Integer`, `Float`, or `String`), the return type is declared as `Object`. In practice, you might want to use generics or a more specific type if possible.

This Java code maintains the same functionality and logic as the Python code, ensuring that strings representing numbers are converted to their numeric forms, and non-numeric strings are returned unchanged.