Sure! Below is the equivalent Java JUnit test case for your Python unittest test class. The package is `org.real.temp` and the class is `Tester`.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

public class Tester {

    @Test
    public void testNumericalStrConvert() {
        // Test cases for different types of inputs
        assertEquals(123, numericalStrConvert("123"));
        assertEquals(456.78, numericalStrConvert("456.78"));
        assertEquals("abc", numericalStrConvert("abc"));
        assertEquals(0, numericalStrConvert("0"));
        assertEquals(-123, numericalStrConvert("-123"));
        assertEquals(-456.78, numericalStrConvert("-456.78"));
        assertEquals("", numericalStrConvert(""));
        assertEquals(" ", numericalStrConvert(" "));
    }

    private Object numericalStrConvert(String value) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            try {
                return Double.parseDouble(value);
            } catch (NumberFormatException ex) {
                return value;
            }
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration is `package org.real.temp;`.
2. **Class Declaration**: The class is declared as `public class Tester {`.
3. **JUnit Annotations**:
   - `@Test`: This annotation marks the method as a test method.
4. **Test Method**: The `testNumericalStrConvert` method contains several test cases to verify the functionality of the `numericalStrConvert` method.
5. **numericalStrConvert Method**: This is a helper method that mimics the behavior of the Python function. It attempts to parse the input string as an integer or a double and returns the appropriate type. If parsing fails, it returns the original string.

This Java JUnit test case should cover the same functionality as your Python unittest test class.