Sure! Below is the Java JUnit test case converted from your provided Python unittest test code. The code assumes you have a method `numericalStrConvert` that performs the same functionality as the Python function.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

public class Tester {

    public Object numericalStrConvert(String value) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e1) {
            try {
                return Double.parseDouble(value);
            } catch (NumberFormatException e2) {
                return value;
            }
        }
    }

    @Test
    public void testNumericalStrConvert() {
        assertEquals(42, numericalStrConvert("42"));
        assertEquals(3.14, numericalStrConvert("3.14"));
        assertEquals("hello", numericalStrConvert("hello"));
        assertEquals(0, numericalStrConvert("0"));
        assertEquals(-5, numericalStrConvert("-5"));
        assertEquals(-2.71, numericalStrConvert("-2.71"));
        assertEquals("123abc", numericalStrConvert("123abc"));
    }
}
```

### Explanation:
1. **Package Declaration**: The package is set to `org.real.temp` as requested.
2. **Method Conversion**: The `numericalStrConvert` method checks if the string can be parsed as an integer or a double, and returns the original string if it cannot be parsed.
3. **JUnit Test Method**: The `testNumericalStrConvert` method includes several assertions to test various input cases, similar to how you would structure your tests in Python.

Make sure to include the necessary JUnit dependencies in your project to run this code.