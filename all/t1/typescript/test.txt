Here’s how you can convert the given Python `unittest` test case into a TypeScript test case using Jest. Since you only requested the test case conversion, I'll focus on that aspect. 

### Python Unit Test Example

Assuming you have a Python unit test that looks something like this:

```python
import unittest

class TestNumericalStrConvert(unittest.TestCase):
    def test_integer_conversion(self):
        self.assertEqual(numerical_str_convert("123"), 123)

    def test_float_conversion(self):
        self.assertEqual(numerical_str_convert("123.45"), 123.45)

    def test_non_numerical_string(self):
        self.assertEqual(numerical_str_convert("abc"), "abc")

if __name__ == "__main__":
    unittest.main()
```

### Converted TypeScript Test Case using Jest

Here’s how you can write the equivalent test case in TypeScript using Jest:

```typescript
import { numericalStrConvert } from './path/to/your/module'; // Adjust the import path accordingly

describe('numericalStrConvert', () => {
    test('should convert string to integer', () => {
        expect(numericalStrConvert("123")).toBe(123);
    });

    test('should convert string to float', () => {
        expect(numericalStrConvert("123.45")).toBe(123.45);
    });

    test('should return original string for non-numerical input', () => {
        expect(numericalStrConvert("abc")).toBe("abc");
    });
});
```

### Notes:
1. Ensure you have Jest set up in your TypeScript project.
2. Replace `./path/to/your/module` with the actual path to your `numericalStrConvert` function.
3. This conversion focuses solely on the structure and logic of the test cases as per your request.