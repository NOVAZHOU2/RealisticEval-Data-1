Sure, I can help you translate your Python unittest test class into a TypeScript test case using Jest. However, I'll need the actual test methods and assertions from your Python unittest class to provide a complete translation.

Here's a basic example of how you might set up a Jest test file for a function like `numerical_str_convert`. Since you didn't provide the actual test methods, I'll create some hypothetical ones:

```typescript
import { describe, expect, test } from '@jest/globals';
import { numericalStrConvert } from './path-to-your-module'; // Adjust the path accordingly

describe('numericalStrConvert', () => {
  test('converts valid integers to numbers', () => {
    expect(numericalStrConvert('123')).toBe(123);
    expect(numericalStrConvert('-456')).toBe(-456);
  });

  test('converts valid floating-point numbers to numbers', () => {
    expect(numericalStrConvert('123.45')).toBeCloseTo(123.45);
    expect(numericalStrConvert('-456.78')).toBeCloseTo(-456.78);
  });

  test('returns original string for non-numeric values', () => {
    expect(numericalStrConvert('abc')).toBe('abc');
    expect(numericalStrConvert('hello world')).toBe('hello world');
  });
});
```

### Explanation:

1. **Importing Jest and the Function**: We import `describe`, `expect`, and `test` from `@jest/globals` and the `numericalStrConvert` function from your module.
  
2. **Describing the Test Suite**: The `describe` block groups related tests together under a common name.

3. **Writing Individual Tests**:
   - Each `test` block contains a description of what the test is checking and the assertion(s).
   - `expect(numericalStrConvert('123')).toBe(123);` checks that converting '123' results in the number 123.
   - `expect(numericalStrConvert('123.45')).toBeCloseTo(123.45);` checks that converting '123.45' results in a number close to 123.45 (useful for floating-point comparisons).

4. **Handling Non-Numeric Values**: The last test ensures that non-numeric strings return the original string unchanged.

Make sure to adjust the path to your module (`./path-to-your-module`) to match where your `numericalStrConvert` function is located. Also, add any additional tests you have for different edge cases or scenarios.