Certainly! Here is the equivalent TypeScript test class using Jest, along with the necessary setup and imports:

### TypeScript Code with Jest Testing

First, ensure you have Jest installed in your project:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Add Jest configuration to your `tsconfig.json`:

```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"],
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node"
  }
}
```

Now, let's write the TypeScript test class using Jest:

```typescript
import { numericalStrConvert } from './path/to/numericalStrConvert'; // Import the function

describe('TestSmartConvert', () => {
  it('should convert to integer', () => {
    expect(numericalStrConvert("123")).toBe(123);
  });

  it('should convert to float', () => {
    expect(numericalStrConvert("123.45")).toBe(123.45);
  });

  it('should remain a string for non-numeric input', () => {
    expect(numericalStrConvert("abc")).toBe("abc");
  });

  it('should convert to negative integer', () => {
    expect(numericalStrConvert("-456")).toBe(-456);
  });

  it('should convert to negative float', () => {
    expect(numericalStrConvert("-456.78")).toBe(-456.78);
  });
});
```

### Explanation:
1. **Imports**:
   - Import the `numericalStrConvert` function from the appropriate module.

2. **Describe Block**:
   - Use the `describe` block to group the test cases under a single test suite named `TestSmartConvert`.

3. **Test Cases**:
   - Each `it` block represents a specific test case.
   - Use `expect` and `toBe` to assert the expected outcomes.

4. **Assertions**:
   - `expect(numericalStrConvert("123")).toBe(123)` ensures that the function correctly converts the string to an integer.
   - `expect(numericalStrConvert("123.45")).toBe(123.45)` ensures that the function correctly converts the string to a float.
   - `expect(numericalStrConvert("abc")).toBe("abc")` ensures that the function returns the original string for non-numeric input.
   - `expect(numericalStrConvert("-456")).toBe(-456)` ensures that the function correctly converts a negative integer.
   - `expect(numericalStrConvert("-456.78")).toBe(-456.78)` ensures that the function correctly converts a negative float.

### Running the Tests
To run the tests, add a script to your `package.json`:

```json
"scripts": {
  "test": "jest"
}
```

Then, run the tests:

```sh
npm test
```

This setup ensures that the TypeScript test class using Jest accurately replicates the functionality and logic of the Python unittest test class.