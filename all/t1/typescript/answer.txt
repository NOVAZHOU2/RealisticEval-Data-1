Here's how you can convert the given Python code into TypeScript:

```typescript
function numericalStrConvert(value: string): number | string {
    // try converting to int
    const intValue = parseInt(value);
    if (!isNaN(intValue)) {
        return intValue;
    }

    // try converting to float
    const floatValue = parseFloat(value);
    if (!isNaN(floatValue)) {
        return floatValue;
    }

    // return original string if neither conversion was successful
    return value;
}
```

This TypeScript function follows the same logic as your Python function:

1. It tries to convert the input string `value` to an integer using `parseInt`.
2. If the conversion is successful and the result is not `NaN`, it returns the integer.
3. If the conversion fails or results in `NaN`, it tries to convert the string to a floating-point number using `parseFloat`.
4. If the floating-point conversion is also successful and the result is not `NaN`, it returns the floating-point number.
5. If both conversions fail, it returns the original string.

Note that TypeScript uses `number` for both integers and floating-point numbers, whereas Python distinguishes between `int` and `float`. Also, TypeScript does not have a direct equivalent of Python's `Union` type hint, so we use the union type `number | string` instead.