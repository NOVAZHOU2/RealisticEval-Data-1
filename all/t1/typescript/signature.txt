Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation:

```typescript
/**
 * Converts the input string to an integer or a floating-point number if possible.
 * If the string cannot be converted to a number, it returns the original string.
 *
 * @param value - The input string to convert.
 * @returns The converted integer, floating-point number, or the original string if conversion is not possible.
 */
function numericalStrConvert(value: string): number | string {
    const intValue = parseInt(value, 10);
    if (!isNaN(intValue)) {
        return intValue;
    }

    const floatValue = parseFloat(value);
    if (!isNaN(floatValue)) {
        return floatValue;
    }

    return value;
}
```

### Explanation:
1. **Function Signature**:
   - The function `numericalStrConvert` takes a `string` as an argument and returns either a `number` or a `string`.

2. **Documentation Comments**:
   - The JSDoc-style comment block provides a clear description of the function's purpose, parameters, and return type.

3. **Type Conversion**:
   - `parseInt(value, 10)` attempts to parse the string as an integer with base 10.
   - `parseFloat(value)` attempts to parse the string as a floating-point number.
   - `isNaN()` checks if the parsed values are not numbers.

4. **Return Values**:
   - If the string can be parsed as an integer, it returns the integer value.
   - If the string can be parsed as a floating-point number, it returns the floating-point value.
   - If the string cannot be parsed as either an integer or a floating-point number, it returns the original string.

This TypeScript function preserves the original functionality and structure of the Python function, including proper type annotations and documentation.