Certainly! Here is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Converts the input string. First, checks if it is an integer. If it is, converts it to an integer.
 * If not, checks if it is a floating-point number. If it is, converts it to a floating-point number.
 * If it is neither, returns the original string.
 * 
 * @param {string} value - The input value as a string.
 * @returns {(number|string)} - The converted value or the original string.
 */
function numericalStrConvert(value) {
    // Attempt to parse the string as an integer
    const intValue = parseInt(value, 10);
    if (!isNaN(intValue) && intValue.toString() === value) {
        return intValue;
    }

    // If not an integer, attempt to parse the string as a floating-point number
    const floatValue = parseFloat(value);
    if (!isNaN(floatValue) && floatValue.toString() === value) {
        return floatValue;
    }

    // If not an integer or a floating-point number, return the original string
    return value;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The function is documented using JSDoc comments.
   - The `@param` tag specifies the parameter type and description.
   - The `@returns` tag specifies the return type and description.

2. **Function Implementation**:
   - `parseInt(value, 10)` is used to parse the string as an integer.
   - `parseFloat(value)` is used to parse the string as a floating-point number.
   - `isNaN` is used to check if the parsed values are not `NaN`.
   - String comparison (`intValue.toString() === value` and `floatValue.toString() === value`) ensures that the parsed value matches the original string format.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JSDoc standards for documentation.