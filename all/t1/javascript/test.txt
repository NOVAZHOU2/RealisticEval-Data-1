To convert the given Python `unittest` test class to a JavaScript test case using Jest, you can follow these steps:

1. Install Jest if you haven't already.
2. Create a new JavaScript file for your tests.
3. Write equivalent test cases in Jest.

Here's how you can do it:

### Step 1: Install Jest
If you don't have Jest installed, you can install it using npm:

```sh
npm install --save-dev jest
```

### Step 2: Create a New JavaScript File for Your Tests
Create a new file named `numericalStrConvert.test.js`.

### Step 3: Write Equivalent Test Cases in Jest

Below is the equivalent JavaScript test case using Jest:

```javascript
// numericalStrConvert.test.js

const { numericalStrConvert } = require('./numericalStrConvert'); // Adjust the path accordingly

describe('numericalStrConvert', () => {
    it('converts integer strings to integers', () => {
        expect(numericalStrConvert('123')).toBe(123);
    });

    it('converts floating point strings to floats', () => {
        expect(numericalStrConvert('123.45')).toBeCloseTo(123.45);
    });

    it('returns original string for non-numeric strings', () => {
        expect(numericalStrConvert('abc')).toBe('abc');
        expect(numericalStrConvert('hello world')).toBe('hello world');
    });
});
```

### Explanation

1. **Import the Function**: Import the `numericalStrConvert` function from the module where it's defined. Adjust the path according to your project structure.
2. **Describe Block**: Use the `describe` block to group related tests.
3. **It Blocks**: Use the `it` blocks to write individual test cases.
4. **Expectations**: Use `expect` with matchers like `toBe`, `toBeCloseTo`, and `toBe` to check the expected outcomes.

### Running the Tests

To run the tests, you can add a script in your `package.json`:

```json
{
  "scripts": {
    "test": "jest"
  }
}
```

Then, you can run the tests using:

```sh
npm test
```

This will execute all the tests in the `numericalStrConvert.test.js` file using Jest.