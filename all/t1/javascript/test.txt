Sure! Here’s how you can convert the given Python unittest test class to a JavaScript test case using Jest. I'll create a simple test suite based on the description of the function `numerical_str_convert`.

### Python unittest Example (for reference)

```python
import unittest

def numerical_str_convert(value: str) -> Union[int, float, str]:
    if value.isdigit():
        return int(value)
    try:
        return float(value)
    except ValueError:
        return value

class TestNumericalStrConvert(unittest.TestCase):
    def test_integer_string(self):
        self.assertEqual(numerical_str_convert("123"), 123)

    def test_float_string(self):
        self.assertEqual(numerical_str_convert("123.45"), 123.45)

    def test_non_numerical_string(self):
        self.assertEqual(numerical_str_convert("hello"), "hello")

    def test_negative_float_string(self):
        self.assertEqual(numerical_str_convert("-123.45"), -123.45)

if __name__ == '__main__':
    unittest.main()
```

### JavaScript Jest Test Case

```javascript
function numericalStrConvert(value) {
    if (!isNaN(value) && value.trim() !== '') {
        if (Number.isInteger(Number(value))) {
            return parseInt(value, 10);
        } else {
            return parseFloat(value);
        }
    }
    return value;
}

describe('numericalStrConvert', () => {
    test('should convert integer string to number', () => {
        expect(numericalStrConvert("123")).toBe(123);
    });

    test('should convert float string to number', () => {
        expect(numericalStrConvert("123.45")).toBe(123.45);
    });

    test('should return non-numerical string as is', () => {
        expect(numericalStrConvert("hello")).toBe("hello");
    });

    test('should convert negative float string to number', () => {
        expect(numericalStrConvert("-123.45")).toBe(-123.45);
    });
});
```

### Explanation
1. **Function Implementation**: The `numericalStrConvert` function is implemented to replicate the behavior of the Python function.
2. **Test Cases**: Each test case uses Jest’s `describe` and `test` functions, mirroring the unittest structure.
3. **Assertions**: The `expect` function is used to assert that the output of the function matches the expected result. 

You can run this test suite using Jest in your JavaScript environment.