Hereâ€™s the equivalent TypeScript code that maintains the logic and functionality of your C++ function:

```typescript
/**
 * @brief Invert the flag bits of an unsigned integer to a hexadecimal string. The number of bits is not complete by 0.
 *
 * @param value The unsigned integer whose bits are to be inverted.
 * @return A string containing the hexadecimal representation of the inverted bits.
 */
function convFlags(value: number): string {
    // Create a mask for the first five bits (0x1F = 00011111)
    const mask: number = 0x1F;

    // Invert the first five bits using XOR
    const invertedValue: number = value ^ mask;

    // Convert the result to a hexadecimal string
    return invertedValue.toString(16);
}
```

### Key Changes Made:
1. **Type Annotations**: Used TypeScript's type annotations for function parameters and return types.
2. **String Conversion**: Used `toString(16)` to convert the number to a hexadecimal string, which is the idiomatic way in JavaScript/TypeScript.
3. **Removed `std::stringstream`**: The string conversion method in TypeScript is simpler, eliminating the need for an equivalent of `std::stringstream`. 

Feel free to ask if you need further modifications or explanations!