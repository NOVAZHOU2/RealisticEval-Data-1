Certainly! Below is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The test methods are converted to use JUnit annotations and assertions, ensuring that the functionality and logic of the tests are preserved.

### Java Code Using JUnit

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Test class for verifying the compliance of IP addresses.
 */
public class Tester {

    /**
     * Tests that private IP addresses return true.
     */
    @Test
    public void testPrivateIP() {
        // Test that private IPs return true
        assertTrue(isCompliantIP("192.168.1.1"));
    }

    /**
     * Tests that public IP addresses return false.
     */
    @Test
    public void testPublicIP() {
        // Test that public IPs return false
        assertFalse(isCompliantIP("8.8.8.8"));
    }

    /**
     * Tests that invalid IP strings return false.
     */
    @Test
    public void testInvalidIP() {
        // Test that invalid IP strings return false
        assertFalse(isCompliantIP("999.999.999.999"));
    }

    /**
     * Checks whether the given IP address is a legal IP address.
     *
     * @param ip The IP address in string format.
     * @return true if the IP is compliant, false otherwise.
     */
    private static boolean isCompliantIP(String ip) {
        try {
            // Convert the input string to an InetAddress object
            InetAddress ipObj = InetAddress.getByName(ip);

            // Check compliance criteria: for example, whether the IP is private
            // Note: Java does not have a direct equivalent of ipaddress.is_private,
            // so we use a workaround to determine if the IP is private.
            byte[] addressBytes = ipObj.getAddress();
            if (ipObj.isSiteLocalAddress()) {
                // Check if it's a private IP address based on the byte values
                return (addressBytes[0] == -10 || // 10.0.0.0/8
                        (addressBytes[0] == -17 && addressBytes[1] == -17) || // 172.16.0.0/12
                        (addressBytes[0] == -85 && addressBytes[1] == -96)); // 192.168.0.0/16
            }
            return false;
        } catch (UnknownHostException e) {
            // If the input is not a valid IP address, it cannot be compliant
            return false;
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Class Definition**: The test class `Tester` is defined with the appropriate access modifier (`public`).
3. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test method.
4. **JUnit Assertions**: The assertions `assertTrue` and `assertFalse` from JUnit are used to verify the expected outcomes.
5. **Method Definitions**: The `isCompliantIP` method is defined within the test class to ensure that it is accessible within the test methods.
6. **Javadoc Comments**: Each test method is documented using Javadoc comments to explain the purpose of the test.

This Java code preserves the functionality and logic of the original Python unittest class while adhering to JUnit's conventions and syntax.