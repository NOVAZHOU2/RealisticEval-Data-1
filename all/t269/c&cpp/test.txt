Certainly! Below is the equivalent C++ test case using Catch2 for the `is_compliant_ip` function from your Python unittest. This assumes that you have a function `isCompliantIP` in C++ that performs the same logic as your Python function.

First, ensure you have Catch2 installed and properly set up in your project. Then, create a C++ test file (e.g., `test_is_compliant_ip.cpp`) with the following content:

```cpp
#include "catch2/catch.hpp"
#include "your_ip_validation_library.h" // Include your header file where isCompliantIP is defined

TEST_CASE("Check valid IP addresses", "[ip]") {
    REQUIRE(isCompliantIP("192.168.1.1") == true);
    REQUIRE(isCompliantIP("0.0.0.0") == true);
    REQUIRE(isCompliantIP("255.255.255.255") == true);
}

TEST_CASE("Check invalid IP addresses", "[ip]") {
    REQUIRE(isCompliantIP("256.256.256.256") == false);
    REQUIRE(isCompliantIP("192.168.1") == false);
    REQUIRE(isCompliantIP("192.168.1.256") == false);
    REQUIRE(isCompliantIP("abc.def.ghi.jkl") == false);
    REQUIRE(isCompliantIP("192.168.1.-1") == false);
    REQUIRE(isCompliantIP("192.168.1.0.0") == false);
}
```

In this example:
- `isCompliantIP` is assumed to be a function in your C++ code that checks if an IP address is valid.
- The `TEST_CASE` macro is used to define test cases.
- `REQUIRE` is used to assert that the function returns the expected results.

Make sure to replace `"your_ip_validation_library.h"` with the actual path to your header file containing the `isCompliantIP` function.

To run the tests, you can compile your test file using a C++ compiler that supports Catch2, such as g++. For example:

```sh
g++ -std=c++14 -I/path/to/catch2/include test_is_compliant_ip.cpp -o test_is_compliant_ip
./test_is_compliant_ip
```

This will execute the tests and provide output indicating whether each test passed or failed.