Sure! Below is the equivalent C++ code for the given Python function `is_compliant_ip`. This function checks whether an IP address is a valid IPv4 address.

```cpp
#include <iostream>
#include <string>
#include <sstream>
#include <vector>

bool isCompliantIP(const std::string& ip) {
    // Split the IP address by '.'
    std::istringstream iss(ip);
    std::vector<int> parts;
    std::string part;

    while (std::getline(iss, part, '.')) {
        if (part.empty()) return false;  // Empty segment

        // Convert part to integer
        int num = std::stoi(part);

        // Check if the number is within the valid range [0, 255]
        if (num < 0 || num > 255) return false;

        parts.push_back(num);
    }

    // There should be exactly four segments
    if (parts.size() != 4) return false;

    return true;
}

int main() {
    std::string ip1 = "192.168.1.1";
    std::string ip2 = "256.100.50.25";

    std::cout << "Is " << ip1 << " compliant? " << (isCompliantIP(ip1) ? "Yes" : "No") << std::endl;
    std::cout << "Is " << ip2 << " compliant? " << (isCompliantIP(ip2) ? "Yes" : "No") << std::endl;

    return 0;
}
```

### Explanation:
1. **Splitting the IP Address**: The IP address is split into its components using the `std::istringstream` and `std::getline` functions with `'.'` as the delimiter.
2. **Checking Each Segment**:
   - An empty segment results in an invalid IP address.
   - Each segment is converted to an integer using `std::stoi`.
   - The integer value must be between 0 and 255 inclusive.
3. **Validation**: The function ensures there are exactly four segments in the IP address.

This C++ code provides a similar functionality to the Python function you provided.