Certainly! Here is the equivalent Jest test suite for the given Python unittest class. I will convert the Python unittest class into a Jest test suite, ensuring that the functionality and logic of the tests are maintained.

### Python Code:
```python
import unittest

class TestIsCompliantIP(unittest.TestCase):
    def test_private_ip(self):
        # Test that private IPs return True
        self.assertTrue(is_compliant_ip('192.168.1.1'))

    def test_public_ip(self):
        # Test that public IPs return False
        self.assertFalse(is_compliant_ip('8.8.8.8'))

    def test_invalid_ip(self):
        # Test that invalid IP strings return False
        self.assertFalse(is_compliant_ip('999.999.999.999'))
```

### Equivalent Jest Test Suite:
```javascript
const isCompliantIP = require('./isCompliantIP'); // Import the isCompliantIP function

describe('TestIsCompliantIP', () => {
    test('test_private_ip', () => {
        // Test that private IPs return true
        expect(isCompliantIP('192.168.1.1')).toBe(true);
    });

    test('test_public_ip', () => {
        // Test that public IPs return false
        expect(isCompliantIP('8.8.8.8')).toBe(false);
    });

    test('test_invalid_ip', () => {
        // Test that invalid IP strings return false
        expect(isCompliantIP('999.999.999.999')).toBe(false);
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `isCompliantIP` function is imported from the file `isCompliantIP.js` using `require`. Ensure that the `isCompliantIP` function is defined in this file.

2. **Describe Block**:
   - The `describe` block is used to group the tests together, similar to the `unittest.TestCase` class in Python.

3. **Test Cases**:
   - Each test method in the Python `unittest.TestCase` is converted to a separate `test` function within the `describe` block.
   - The `test` function takes a description and a callback function containing the assertions.

4. **Assertions**:
   - The `assertTrue` and `assertFalse` methods from Python's `unittest` are replaced with `expect` combined with `toBe` in Jest.
   - `expect(isCompliantIP('192.168.1.1')).toBe(true)` checks that the function returns `true` for a private IP.
   - `expect(isCompliantIP('8.8.8.8')).toBe(false)` checks that the function returns `false` for a public IP.
   - `expect(isCompliantIP('999.999.999.999')).toBe(false)` checks that the function returns `false` for an invalid IP.

5. **File Structure**:
   - Ensure that the `isCompliantIP.js` file contains the `isCompliantIP` function as defined earlier.

### Example `isCompliantIP.js` File:
```javascript
const ip = require('ip');

function isCompliantIP(ip) {
    try {
        // Convert the input string to an IP address object
        const ipObj = ip.address(ip);

        // Check compliance criteria: for example, whether the IP is private
        return ip.isPrivate(ipObj);

    } catch (error) {
        // If the input is not a valid IP address, it cannot be compliant
        return false;
    }
}

module.exports = isCompliantIP;
```

### Running the Tests:
To run the Jest tests, you can use the following command in your project directory:
```bash
npm test
```

This conversion ensures that the Jest test suite maintains the same functionality and logic as the original Python unittest class, while adhering to Jest's syntax and conventions.