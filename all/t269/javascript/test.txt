Sure, let's first define the function `is_compliant_ip` and then write the Jest test cases for it. Since you have only provided the function signature and not the implementation, I'll provide a sample implementation for the sake of completeness.

### Python Implementation

```python
def is_compliant_ip(ip: str) -> bool:
    parts = ip.split('.')
    if len(parts) != 4:
        return False
    for part in parts:
        if not part.isdigit() or not 0 <= int(part) <= 255:
            return False
    return True
```

### JavaScript Implementation

```javascript
function isCompliantIP(ip) {
    const parts = ip.split('.');
    if (parts.length !== 4) {
        return false;
    }
    for (const part of parts) {
        if (!/^\d+$/.test(part) || parseInt(part, 10) < 0 || parseInt(part, 10) > 255) {
            return false;
        }
    }
    return true;
}
```

### Jest Test Class

Now, let's create the Jest test class to test the `isCompliantIP` function:

```javascript
describe('isCompliantIP', () => {
    test('returns true for valid IPv4 addresses', () => {
        expect(isCompliantIP('192.168.0.1')).toBe(true);
        expect(isCompliantIP('10.0.0.0')).toBe(true);
        expect(isCompliantIP('255.255.255.255')).toBe(true);
    });

    test('returns false for invalid IPv4 addresses', () => {
        expect(isCompliantIP('192.168.0.256')).toBe(false);
        expect(isCompliantIP('192.168.0.1.1')).toBe(false);
        expect(isCompliantIP('192.168.0')).toBe(false);
        expect(isCompliantIP('256.255.255.255')).toBe(false);
        expect(isCompliantIP('-1.168.0.1')).toBe(false);
        expect(isCompliantIP('abc.def.ghi.jkl')).toBe(false);
    });
});
```

### Explanation:

1. **Function Definition**: The `isCompliantIP` function checks if the input IP address is a valid IPv4 address.
2. **Test Suite**: The `describe` block defines a test suite named `isCompliantIP`.
3. **Test Cases**:
   - `test('returns true for valid IPv4 addresses', ...)` ensures that the function returns `true` for valid IPv4 addresses.
   - `test('returns false for invalid IPv4 addresses', ...)` ensures that the function returns `false` for invalid IPv4 addresses.
4. **Assertions**: We use `expect(...).toBe(true)` and `expect(...).toBe(false)` to check the expected outcomes of the function calls.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to the syntax and conventions of Jest.