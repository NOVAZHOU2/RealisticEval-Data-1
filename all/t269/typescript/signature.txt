Certainly! Hereâ€™s the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments:

```typescript
import { ipAddress } from "ip-address";

/**
 * Check whether the IP address is a legal IP address.
 * 
 * @param ip - The IP address in string format.
 * @returns True if the IP is compliant, False otherwise.
 */
function isCompliantIP(ip: string): boolean {
    try {
        // Convert the input string to an IP address object
        const ipObj = ipAddress(ip);

        // Check compliance criteria: for example, whether the IP is private
        // You can modify or extend this check based on other criteria, e.g., ipObj.isGlobal, ipObj.isMulticast, etc.
        return ipObj.isPrivate;

    } catch (error) {
        // If the input is not a valid IP address, it cannot be compliant
        return false;
    }
}

// Example usage
console.log(isCompliantIP("192.168.1.1"));  // Should return true
console.log(isCompliantIP("8.8.8.8"));      // Should return false
```

### Explanation:
1. **Import Statement**: The `ipAddress` function is imported from the `ip-address` package.
2. **Function Definition**: The function `isCompliantIP` is defined with a clear type signature for the input (`ip: string`) and the return type (`boolean`).
3. **JSDoc Comments**: The Python docstring is converted to JSDoc-style comments, providing detailed documentation for the function parameters and return value.
4. **Error Handling**: The error handling remains the same, catching any exceptions that occur during IP address validation.

### Installation of `ip-address` Package:
To use the `ip-address` package, you need to install it via npm:
```sh
npm install ip-address
```

This ensures that the TypeScript code is equivalent in functionality and adheres to TypeScript's static type system, while also providing clear documentation through JSDoc comments.