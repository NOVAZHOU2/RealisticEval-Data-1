Certainly! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class:

```typescript
import { describe, it, expect } from '@jest/globals';

function isCompliantIP(ip: string): boolean {
    /**
     * Check whether the IP address is a legal IP address.
     *
     * @param ip - The IP address in string format.
     * @returns True if the IP is compliant, False otherwise.
     */
    const octets = ip.split('.');
    if (octets.length !== 4) return false;

    for (const octet of octets) {
        const num = parseInt(octet, 10);
        if (isNaN(num) || num < 0 || num > 255) return false;
    }

    return true;
}

describe('isCompliantIP', () => {
    it('should return true for valid IP addresses', () => {
        expect(isCompliantIP('192.168.1.1')).toBe(true);
        expect(isCompliantIP('10.0.0.1')).toBe(true);
        expect(isCompliantIP('172.16.0.1')).toBe(true);
        expect(isCompliantIP('127.0.0.1')).toBe(true);
    });

    it('should return false for invalid IP addresses', () => {
        expect(isCompliantIP('256.256.256.256')).toBe(false); // Out of range
        expect(isCompliantIP('255.255.255.256')).toBe(false); // Out of range
        expect(isCompliantIP('255.255.255.255.1')).toBe(false); // Invalid number of octets
        expect(isCompliantIP('192.168.1')).toBe(false); // Invalid number of octets
        expect(isCompliantIP('192.168.1.a')).toBe(false); // Non-numeric character
        expect(isCompliantIP('192.168.-1.1')).toBe(false); // Negative number
        expect(isCompliantIP('192.168.256.1')).toBe(false); // Out of range
    });
});
```

### Explanation:
1. **Function Definition**: The `isCompliantIP` function is defined in TypeScript with the same logic as the original Python function.
2. **Jest Test Suite**:
   - `describe` block groups related tests together.
   - `it` blocks define individual test cases.
   - `expect` statements are used to assert the expected outcomes of the function calls.

This TypeScript code uses Jest's testing framework to verify that the `isCompliantIP` function behaves correctly for both valid and invalid IP addresses.