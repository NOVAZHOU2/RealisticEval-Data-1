Certainly! Hereâ€™s the equivalent TypeScript code using Jest for the provided Python unittest test class. We will ensure that the functionality and logic of the tests are preserved, and we will map the Python assert methods to the appropriate Jest assertions.

### TypeScript Code with Jest Testing

First, let's define the `isCompliantIP` function in TypeScript:

```typescript
import { ipAddress } from 'ip-address';

function isCompliantIP(ip: string): boolean {
    try {
        const ipObj = ipAddress(ip);
        return ipObj.isPrivate;
    } catch (error) {
        return false;
    }
}

export default isCompliantIP;
```

Next, let's write the Jest test class:

```typescript
import isCompliantIP from './path/to/isCompliantIP'; // Adjust the import path as needed

describe('isCompliantIP', () => {
    it('should return true for private IPs', () => {
        expect(isCompliantIP('192.168.1.1')).toBe(true);
    });

    it('should return false for public IPs', () => {
        expect(isCompliantIP('8.8.8.8')).toBe(false);
    });

    it('should return false for invalid IP strings', () => {
        expect(isCompliantIP('999.999.999.999')).toBe(false);
    });
});
```

### Explanation:

1. **Import Statements**:
   - The `isCompliantIP` function is imported from its respective file.
   - The `ipAddress` function is imported from the `ip-address` package.

2. **Test Suite**:
   - The `describe` block defines the test suite named `isCompliantIP`.
   - Each test case is defined using the `it` function, which takes a description and a callback function containing the test logic.

3. **Assertions**:
   - The `expect` function is used to perform assertions.
   - `toBe` is used to check equality.

### Running the Tests

To run the Jest tests, you need to have Jest installed in your project. You can install Jest using npm:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Add the necessary configurations to your `tsconfig.json` and `jest.config.js` files:

#### `tsconfig.json`
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

#### `jest.config.js`
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest',
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
};
```

### Running Jest Tests
To run the tests, add a script to your `package.json`:

```json
"scripts": {
  "test": "jest"
}
```

Then, run the tests:

```sh
npm test
```

This setup ensures that the tests are equivalent in functionality and adhere to TypeScript and Jest best practices.