Hereâ€™s the equivalent TypeScript code for the provided Python function:

```typescript
import { ipAddress } from "ip-address";

function isCompliantIP(ip: string): boolean {
    /**
     * Check if the given IP address is compliant based on predefined criteria.
     *
     * @param ip The IP address in string format.
     * @returns True if the IP is compliant, False otherwise.
     */
    try {
        // Convert the input string to an IP address object
        const ipObj = ipAddress(ip);

        // Check compliance criteria: for example, whether the IP is private
        // You can modify or extend this check based on other criteria, e.g., ipObj.isGlobal, ipObj.isMulticast, etc.
        return ipObj.isPrivate;

    } catch (error) {
        // If the input is not a valid IP address, it cannot be compliant
        return false;
    }
}

// Example usage
console.log(isCompliantIP("192.168.1.1")); // true
console.log(isCompliantIP("8.8.8.8")); // false
```

### Notes:
1. **Package**: The `ipAddress` package is used in TypeScript to handle IP addresses. You need to install it using npm or yarn.
   ```bash
   npm install ip-address
   ```
   or
   ```bash
   yarn add ip-address
   ```

2. **Type Annotations**: In TypeScript, we specify the type of the parameter `ip` as `string` and the return type as `boolean`.

3. **Error Handling**: The error handling remains similar to the Python version, catching any `ValueError` equivalent (`ValueError` in Python becomes a generic `Error` in TypeScript).

4. **Function Naming**: The function name has been adjusted to follow camelCase convention in TypeScript, which is common practice.

5. **Object Properties**: The properties of the IP address object have been adjusted to match the `ip-address` library, such as `isPrivate` instead of `is_private`.

This conversion ensures that the functionality and logic remain consistent with the original Python code, while adapting to TypeScript's syntax and type system.