Certainly! Below is the Java equivalent of the provided Python unittest class, converted into a JUnit test class. The Java test class is placed in the package `org.real.temp` and named `Tester`. It uses JUnit annotations and assertion methods to preserve the functionality and logic of the tests.

### Java Code:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.time.LocalDate;

public class Tester {

    @Test
    public void testRegularOccurrence() {
        // Test for the 2nd Monday of May 2023
        LocalDate result = findNthWeekdayOfSpecificYear(2023, 5, 2, 0);  // Monday is 0
        LocalDate expected = LocalDate.of(2023, 5, 8);
        assertEquals(expected, result);
    }

    @Test
    public void testLastOccurrence() {
        // Test for the 5th Monday of May 2023, which doesn't exist, should return the last Monday
        LocalDate result = findNthWeekdayOfSpecificYear(2023, 5, 5, 0);  // Monday is 0
        LocalDate expected = LocalDate.of(2023, 5, 29);
        assertEquals(expected, result);
    }

    @Test
    public void testFirstDayIsWeekday() {
        // Test for when the first day of the month is the weekday in question, 1st Tuesday of August 2023
        LocalDate result = findNthWeekdayOfSpecificYear(2023, 8, 1, 1);  // Tuesday is 1
        LocalDate expected = LocalDate.of(2023, 8, 1);
        assertEquals(expected, result);
    }

    @Test
    public void testEdgeYearTransition() {
        // Test for the 1st Friday of December 2023
        LocalDate result = findNthWeekdayOfSpecificYear(2023, 12, 1, 4);  // Friday is 4
        LocalDate expected = LocalDate.of(2023, 12, 1);
        assertEquals(expected, result);
    }

    // Method to be tested
    private LocalDate findNthWeekdayOfSpecificYear(int y, int m, int n, int k) {
        LocalDate firstDayOfMonth = LocalDate.of(y, m, 1);
        DayOfWeek targetDayOfWeek = DayOfWeek.of(k);

        // Calculate the first occurrence of the target weekday in the month
        LocalDate firstKWeekdayOfMonth = firstDayOfMonth.with(TemporalAdjusters.nextOrSame(targetDayOfWeek));
        LocalDate nthKWeekdayOfMonth = firstKWeekdayOfMonth.plusWeeks(n - 1);

        // Calculate the last day of the month
        LocalDate lastDayOfMonth = firstDayOfMonth.lengthOfMonth() == 28 ?
                firstDayOfMonth.plusMonths(1).minusDays(1) :
                firstDayOfMonth.with(TemporalAdjusters.lastDayOfMonth());

        if (nthKWeekdayOfMonth.isAfter(lastDayOfMonth)) {
            // Find the last occurrence of the target weekday in the month
            LocalDate lastKWeekdayOfMonth = lastDayOfMonth.with(TemporalAdjusters.previous(targetDayOfWeek));
            return lastKWeekdayOfMonth;
        }

        return nthKWeekdayOfMonth;
    }
}
```

### Explanation:
1. **Imports**: The necessary imports for `JUnit` assertions and `LocalDate` are included.
2. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.
3. **Assertion Methods**: The `assertEquals` method from JUnit is used to verify the results.
4. **Test Methods**:
   - `testRegularOccurrence`: Tests the 2nd Monday of May 2023.
   - `testLastOccurrence`: Tests the 5th Monday of May 2023, which doesnâ€™t exist, and verifies the last Monday.
   - `testFirstDayIsWeekday`: Tests the 1st Tuesday of August 2023.
   - `testEdgeYearTransition`: Tests the 1st Friday of December 2023.
5. **Method Implementation**: The `findNthWeekdayOfSpecificYear` method is included within the test class for convenience. This method performs the actual calculation and is the one being tested.

This setup ensures that the functionality and logic of the tests are preserved while adhering to Java's syntax and JUnit conventions.