Here's the equivalent Java method with the same functionality and comments:

```java
import java.time.LocalDate;
import java.time.temporal.ChronoField;
import java.time.temporal.WeekFields;

public class DateUtils {

    /**
     * Calculates the date of the nth occurrence of a specific weekday (k) in a given month (m) and year (y).
     * If the nth occurrence does not exist within the month, it returns the last occurrence of that weekday in the month.
     * This function extends the capability to handle edge cases where the nth weekday might not be present,
     * by providing the closest previous weekday in such cases
     *
     * @param y The year for which the date is to be calculated.
     * @param m The month for which the date is to be calculated, where January is 1 and December is 12.
     * @param n The nth occurrence of the weekday within the month. For example, 1 for the first occurrence, 2 for the second, etc.
     * @param k The weekday, where Monday is 1 and Sunday is 7.
     * @return The calculated date of the nth occurrence of the weekday in the given month and year.
     *         If the nth occurrence does not exist, returns the date of the last occurrence of that weekday in the month.
     */
    public static LocalDate findNthWeekdayOfSpecificYear(int y, int m, int n, int k) {
        LocalDate startDate = LocalDate.of(y, m, 1);
        LocalDate endDate = startDate.withDayOfMonth(startDate.lengthOfMonth());
        
        long count = 0;
        while (!startDate.isAfter(endDate)) {
            if (startDate.getDayOfWeek().getValue() == k) {
                count++;
                if (count == n) {
                    return startDate;
                }
            }
            startDate = startDate.plusDays(1);
        }

        // Return the last occurrence if nth doesn't exist
        return LocalDate.of(y, m, 1).with(TemporalAdjusters.lastInMonth(DayOfWeek.of(k)));
    }
}
```

Note that in Java, we use `LocalDate` instead of `datetime.date`, and `ChronoField` and `WeekFields` to work with dates and days of the week. Also, Java uses 1-based indexing for weekdays (Monday=1, ..., Sunday=7), so the parameter `k` has been adjusted accordingly. Additionally, `TemporalAdjusters` is used to get the last occurrence of a particular day of the week in the month.