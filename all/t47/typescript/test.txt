Certainly! Below is the TypeScript code that converts the provided Python unittest test class into an equivalent test class using Jest. The functionality and logic of the tests are preserved, and the necessary type annotations are included. The assert methods are mapped to the appropriate Jest assertions.

### TypeScript Code with Jest Tests

```typescript
import { DateTime } from 'luxon';
import { findNthWeekdayOfSpecificYear } from './findNthWeekdayOfSpecificYear'; // Import the function to be tested

describe('TestFindNthWeekdayOfSpecificYear', () => {
    it('should return the 2nd Monday of May 2023', () => {
        // Test for the 2nd Monday of May 2023
        const result = findNthWeekdayOfSpecificYear(2023, 5, 2, 0); // Monday is 0
        const expected = DateTime.local(2023, 5, 8);
        expect(result).toEqual(expected);
    });

    it('should return the last Monday of May 2023', () => {
        // Test for the 5th Monday of May 2023, which doesn't exist, should return the last Monday
        const result = findNthWeekdayOfSpecificYear(2023, 5, 5, 0); // Monday is 0
        const expected = DateTime.local(2023, 5, 29);
        expect(result).toEqual(expected);
    });

    it('should return the 1st Tuesday of August 2023', () => {
        // Test for when the first day of the month is the weekday in question, 1st Tuesday of August 2023
        const result = findNthWeekdayOfSpecificYear(2023, 8, 1, 1); // Tuesday is 1
        const expected = DateTime.local(2023, 8, 1);
        expect(result).toEqual(expected);
    });

    it('should return the 1st Friday of December 2023', () => {
        // Test for the 1st Friday of December 2023
        const result = findNthWeekdayOfSpecificYear(2023, 12, 1, 4); // Friday is 4
        const expected = DateTime.local(2023, 12, 1);
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Imports**:
   - Import `DateTime` from the `luxon` library to handle dates and times.
   - Import the `findNthWeekdayOfSpecificYear` function from the module where it is defined.

2. **Jest Describe Block**:
   - Use `describe` to group the test cases under a descriptive name.

3. **Test Cases**:
   - Each test case is defined using `it` and includes a description of what is being tested.
   - The `expect` method is used to assert the expected outcome.

4. **Type Annotations**:
   - The function parameters and return types are properly annotated in TypeScript.

5. **Example Usage**:
   - Each test case calls the `findNthWeekdayOfSpecificYear` function with the specified parameters and compares the result with the expected value using Jest's `expect` method.

### Example Usage
To run these tests, you would typically set up a Jest environment and run the tests using a command like:
```sh
npm test
```

Make sure you have Jest installed in your project:
```sh
npm install --save-dev jest ts-jest @types/jest
```

And configure your `jest.config.js` file to support TypeScript:
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
};
```

This setup ensures that the tests run correctly and that the TypeScript code is properly transpiled for Jest.