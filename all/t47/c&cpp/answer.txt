Sure, here's how you can translate the provided Python code into C++:

```cpp
#include <iostream>
#include <ctime>

// Function to calculate the date of the nth occurrence of a specific weekday in a given month and year
std::tm findNthWeekdayOfSpecificYear(int y, int m, int n, int k) {
    // Initialize time structure
    std::tm t = {0};
    t.tm_year = y - 1900; // tm_year is years since 1900
    t.tm_mon = m - 1;     // tm_mon is months since January

    // Find the first day of the specified month
    mktime(&t);
    
    // Calculate the number of days to reach the nth weekday
    int dayOfWeek = t.tm_wday;
    if ((n * 7 + dayOfWeek) >= 31) {
        n--;
    }
    int daysToAdd = n * 7 + k - dayOfWeek;

    // Add the calculated days to get the desired date
    t.tm_mday += daysToAdd;
    mktime(&t);

    return t;
}

int main() {
    // Example usage
    int year = 2023;
    int month = 4; // April
    int nthOccurrence = 2;
    int weekday = 1; // Tuesday

    std::tm result = findNthWeekdayOfSpecificYear(year, month, nthOccurrence, weekday);

    std::cout << "Date: " << result.tm_year + 1900 << "-" 
              << result.tm_mon + 1 << "-" 
              << result.tm_mday << std::endl;

    return 0;
}
```

### Explanation:

- **Initialization**: We start by initializing a `std::tm` structure with the provided year, month, and setting the day (`tm_mday`) to 0 because we will determine the correct day later.
  
- **Finding the First Day**: Using `mktime`, we set the day to the first day of the specified month. 

- **Calculating Days to Add**: We then calculate the number of days from the first day of the month to reach the nth occurrence of the specified weekday. If the calculation exceeds 31 days, it means the nth occurrence doesn't exist, so we decrement `n`.

- **Adding Days**: Finally, we add the calculated days to the initial date and use `mktime` again to adjust any overflow or underflow in the date.

- **Output**: In the `main` function, we demonstrate how to call the `findNthWeekdayOfSpecificYear` function and print the resulting date.

This code should work similarly to your original Python function but in C++.