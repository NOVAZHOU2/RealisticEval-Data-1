Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Code:
```python
import unittest
import datetime


class TestFindNthWeekdayOfSpecificYear(unittest.TestCase):

    def test_regular_occurrence(self):
        # Test for the 2nd Monday of May 2023
        result = find_nth_weekday_of_specific_year(2023, 5, 2, 0)  # Monday is 0
        expected = datetime.date(2023, 5, 8)
        self.assertEqual(result, expected)

    def test_last_occurrence(self):
        # Test for the 5th Monday of May 2023, which doesn't exist, should return the last Monday
        result = find_nth_weekday_of_specific_year(2023, 5, 5, 0)  # Monday is 0
        expected = datetime.date(2023, 5, 29)
        self.assertEqual(result, expected)

    def test_first_day_is_weekday(self):
        # Test for when the first day of the month is the weekday in question, 1st Tuesday of August 2023
        result = find_nth_weekday_of_specific_year(2023, 8, 1, 1)  # Tuesday is 1
        expected = datetime.date(2023, 8, 1)
        self.assertEqual(result, expected)

    def test_edge_year_transition(self):
        # Test for the 1st Friday of December 2023
        result = find_nth_weekday_of_specific_year(2023, 12, 1, 4)  # Friday is 4
        expected = datetime.date(2023, 12, 1)
        self.assertEqual(result, expected)
```

### Equivalent Jest Test Suite:
```javascript
const { findNthWeekdayOfSpecificYear } = require('./findNthWeekdayOfSpecificYear');

describe('TestFindNthWeekdayOfSpecificYear', () => {
    describe('Regular Occurrence', () => {
        it('should return the 2nd Monday of May 2023', () => {
            const result = findNthWeekdayOfSpecificYear(2023, 5, 2, 0); // Monday is 0
            const expected = new Date(2023, 4, 8); // Note: Months are 0-indexed in JavaScript
            expect(result).toEqual(expected);
        });
    });

    describe('Last Occurrence', () => {
        it('should return the last Monday of May 2023', () => {
            const result = findNthWeekdayOfSpecificYear(2023, 5, 5, 0); // Monday is 0
            const expected = new Date(2023, 4, 29); // Note: Months are 0-indexed in JavaScript
            expect(result).toEqual(expected);
        });
    });

    describe('First Day is Weekday', () => {
        it('should return the 1st Tuesday of August 2023', () => {
            const result = findNthWeekdayOfSpecificYear(2023, 8, 1, 1); // Tuesday is 1
            const expected = new Date(2023, 7, 1); // Note: Months are 0-indexed in JavaScript
            expect(result).toEqual(expected);
        });
    });

    describe('Edge Year Transition', () => {
        it('should return the 1st Friday of December 2023', () => {
            const result = findNthWeekdayOfSpecificYear(2023, 12, 1, 4); // Friday is 4
            const expected = new Date(2023, 11, 1); // Note: Months are 0-indexed in JavaScript
            expect(result).toEqual(expected);
        });
    });
});
```

### Explanation:
1. **Import Statements**:
   - In Jest, we import the function `findNthWeekdayOfSpecificYear` from the file where it is defined.

2. **Describe Blocks**:
   - We use `describe` blocks to group related tests together, similar to how `unittest.TestCase` groups tests.

3. **It Blocks**:
   - Each test case is defined using `it` blocks, which describe the behavior being tested.

4. **Assertions**:
   - Jest uses `expect` for assertions. We use `toEqual` to compare dates, as it checks for deep equality.

5. **Month Indexing**:
   - In JavaScript, months are 0-indexed (January is 0, February is 1, etc.). Therefore, we adjust the month index accordingly.

6. **Date Objects**:
   - We create `Date` objects in JavaScript to represent the expected dates.

This Jest test suite should replicate the functionality and logic of the original Python unittest class, ensuring that all assertions are properly mapped and structured.