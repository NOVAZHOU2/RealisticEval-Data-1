Here's the equivalent Python code for the provided TypeScript function that converts Arabic numeral characters to English numeral characters.
TypeScript Code
typescript
function arabicToEnglishNumbers(str: string): string {
    const arabicNums: { [key: string]: string } = {
        "٠": "0", "١": "1", "٢": "2", "٣": "3", "٤": "4",
        "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9"
    };
    return str
        .split("")
        .map((char: string) => arabicNums[char] || char)
        .join("");
}
Python Code
python
def arabic_to_english_numbers(s: str) -> str:
    arabic_nums = {
        "٠": "0", "١": "1", "٢": "2", "٣": "3", "٤": "4",
        "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9"
    }
    
    return ''.join(arabic_nums.get(char, char) for char in s)

# Example usage
input_str = "١٢٣٤٥"
output_str = arabic_to_english_numbers(input_str)
print(output_str)  # Output: "12345"
Explanation of the Conversion:
Function Name:
The TypeScript function arabicToEnglishNumbers is converted to arabic_to_english_numbers, following Python's naming convention of using snake_case.
Parameter Type:
The parameter type str: string in TypeScript is converted to s: str in Python. The type hints are specified with the variable name followed by a colon and type.
Dictionary:
The TypeScript object arabicNums is converted to a Python dictionary using curly braces {}.
String Processing:
Instead of using split("") to create an array of characters, we directly iterate over the string s in a generator expression.
The method get(char, char) is used to retrieve the value from the dictionary, defaulting to the character itself if it’s not found.
Joining Characters:
The join method is used to concatenate the resulting characters into a single string.
Example Usage:
The example usage at the bottom shows how to call the function and print the result. You can modify input_str to test different Arabic numeral strings.