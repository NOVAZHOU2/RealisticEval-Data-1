Here’s how to convert the provided TypeScript Jest test cases into Python unit tests using the unittest framework:
TypeScript Jest Test Cases
typescript
describe('arabicToEnglishNumbers', () => {
    test('should convert Arabic numerals to English numerals', () => {
        const input = "١٢٣٤٥٦٧٨٩٠";
        const expectedOutput = "1234567890";
        expect(arabicToEnglishNumbers(input)).toBe(expectedOutput);
    });

    test('should return the same string if there are no Arabic numerals', () => {
        const input = "Hello, World!";
        const expectedOutput = "Hello, World!";
        expect(arabicToEnglishNumbers(input)).toBe(expectedOutput);
    });

    test('should handle a mix of Arabic numerals and English characters', () => {
        const input = "رقم ١٢٣ هو المثال";
        const expectedOutput = "رقم 123 هو المثال";
        expect(arabicToEnglishNumbers(input)).toBe(expectedOutput);
    });

    test('should handle empty string', () => {
        const input = "";
        const expectedOutput = "";
        expect(arabicToEnglishNumbers(input)).toBe(expectedOutput);
    });

    test('should handle a string with mixed Arabic and English numerals', () => {
        const input = "The number is ٣٥٦ and 789.";
        const expectedOutput = "The number is 356 and 789.";
        expect(arabicToEnglishNumbers(input)).toBe(expectedOutput);
    });
});
Python unittest Test Cases
Here’s the equivalent code in Python using the unittest framework:
python
import unittest

def arabic_to_english_numbers(s: str) -> str:
    arabic_nums = {
        "٠": "0", "١": "1", "٢": "2", "٣": "3", "٤": "4",
        "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9"
    }
    
    return ''.join(arabic_nums.get(char, char) for char in s)

class TestArabicToEnglishNumbers(unittest.TestCase):
    
    def test_convert_arabic_numerals_to_english_numerals(self):
        input_str = "١٢٣٤٥٦٧٨٩٠"
        expected_output = "1234567890"
        self.assertEqual(arabic_to_english_numbers(input_str), expected_output)

    def test_return_same_string_if_no_arabic_numerals(self):
        input_str = "Hello, World!"
        expected_output = "Hello, World!"
        self.assertEqual(arabic_to_english_numbers(input_str), expected_output)

    def test_handle_mixed_arabic_numerals_and_english_characters(self):
        input_str = "رقم ١٢٣ هو المثال"
        expected_output = "رقم 123 هو المثال"
        self.assertEqual(arabic_to_english_numbers(input_str), expected_output)

    def test_handle_empty_string(self):
        input_str = ""
        expected_output = ""
        self.assertEqual(arabic_to_english_numbers(input_str), expected_output)

    def test_handle_string_with_mixed_arabic_and_english_numerals(self):
        input_str = "The number is ٣٥٦ and 789."
        expected_output = "The number is 356 and 789."
        self.assertEqual(arabic_to_english_numbers(input_str), expected_output)

if __name__ == "__main__":
    unittest.main()
Explanation of Changes:
Function Definition:
The arabic_to_english_numbers function is included, which performs the conversion, just like the one we defined previously.
Test Class:
A class named TestArabicToEnglishNumbers is created, inheriting from unittest.TestCase. This class contains all the test methods.
Test Methods:
Each test in Jest is converted to a method in the Python test class, prefixed with test_ to ensure compatibility with unittest.
Assertions:
expect(...).toBe(...) is replaced with self.assertEqual(...) in Python to assert that the output matches the expected value.
Main Block:
The if __name__ == "__main__": unittest.main() block is added to allow the test cases to be run when the script is executed directly.
Running the Tests:
To run the tests, simply execute the script in a Python environment that has unittest available (it's included with the Python standard library). You should see output indicating whether the tests passed or failed.