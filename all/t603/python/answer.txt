Here's the equivalent Python code for the provided C++ function that checks if a given year is a leap year. The comments have been adapted to Python style while retaining their original meaning.
python
def is_leap_year(year: int) -> bool:
    """ 
    Check if a given year is a leap year.

    A year is a leap year if:
    1. It is divisible by 4 AND
    2. It is NOT divisible by 100, OR it is divisible by 400.

    Args:
        year (int): The year to check.

    Returns:
        bool: True if the year is a leap year, False otherwise.
    """
    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)

# Example usage:
if __name__ == "__main__":
    test_year = 2024
    if is_leap_year(test_year):
        print(f"{test_year} is a leap year.")
    else:
        print(f"{test_year} is not a leap year.")
Explanation of Changes:
Function Signature: The C++ function bool isLeapYear(int year) is converted to Python syntax as def is_leap_year(year: int) -> bool:.
The function name is changed to snake_case to adhere to Python naming conventions.
Docstring: The C++ comment block is converted into a Python docstring (triple quotes).
The description of the function, its parameters, and return type are clearly stated in the docstring.
Return Statement: The logic for determining if a year is a leap year remains the same and is directly translated to Python syntax.
Example Usage: An example usage section is added at the bottom to demonstrate how to call the function and check if a specific year is a leap year.
This Python implementation is clear, follows conventions, and retains the functionality of the original C++ code.