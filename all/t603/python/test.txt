Hereâ€™s how you can convert the provided C++ Catch2 test cases into Python unit tests using the unittest framework. The structure is preserved with appropriate comments indicating the purpose of each test section.
Converted Python Code
python
import unittest

def is_leap_year(year: int) -> bool:
    """ Check if a given year is a leap year. """
    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)

class Tester(unittest.TestCase):
    """ Test cases for the leap year function. """

    def test_divisible_by_4_but_not_by_100(self):
        """ Years that are leap years. """
        self.assertTrue(is_leap_year(2024))  # 2024 is a leap year
        self.assertTrue(is_leap_year(2000))  # 2000 is a leap year (divisible by 400)
        self.assertTrue(is_leap_year(1996))  # 1996 is a leap year
        self.assertTrue(is_leap_year(2004))  # 2004 is a leap year

    def test_divisible_by_100_but_not_by_400(self):
        """ Years that are not leap years. """
        self.assertFalse(is_leap_year(1900))  # 1900 is not a leap year
        self.assertFalse(is_leap_year(2100))  # 2100 is not a leap year
        self.assertFalse(is_leap_year(1800))  # 1800 is not a leap year

    def test_divisible_by_400(self):
        """ Years that are leap years. """
        self.assertTrue(is_leap_year(2400))  # 2400 is a leap year
        self.assertTrue(is_leap_year(1600))  # 1600 is a leap year

    def test_normal_years(self):
        """ Years that are normal years. """
        self.assertFalse(is_leap_year(1997))  # 1997 is not a leap year
        self.assertFalse(is_leap_year(1998))  # 1998 is not a leap year
        self.assertFalse(is_leap_year(1999))  # 1999 is not a leap year

if __name__ == '__main__':
    unittest.main()
Explanation of the Code:
Function Definition: The is_leap_year function is defined to check if a year is a leap year, mirroring the logic from the original C++ code.
Unit Test Class: A class Tester is created, inheriting from unittest.TestCase, to hold all test cases related to the leap year function.
Test Methods:
Each test case is defined as a method within the Tester class. The method names indicate what is being tested, following the convention of test_ prefix.
Assertions: The self.assertTrue() and self.assertFalse() methods are used to check the expected outcomes, which correspond to the REQUIRE statements in the C++ code.
Comments: Comments are added to clarify each test case's purpose, similar to the sections in the original code.
Execution Block: The if __name__ == '__main__': block allows the tests to be run when the script is executed directly.
Running the Tests:
To run the tests, save the code to a file (e.g., test_leap_year.py) and execute it in a Python environment using:
bash
python test_leap_year.py
This will run all the test cases and display the results in the terminal.