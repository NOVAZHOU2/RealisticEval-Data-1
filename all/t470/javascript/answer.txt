Certainly! Below is the equivalent JavaScript code that performs the same functionality as the provided Python code. This code will apply a shear transformation to a 2D matrix along the x-axis using JavaScript's array methods and basic arithmetic operations.

```javascript
function applyShearX(matrix, shearFactor) {
    /**
     * Applies a shear transformation to a 2D matrix along the x-axis.
     *
     * @param {Array<Array<number>>} matrix - A 2D array representing the original matrix.
     * @param {number} shearFactor - The factor by which the matrix is sheared along the x-axis.
     * @returns {Array<Array<number>>} The sheared matrix.
     */
    
    // Define the shear transformation matrix for shearing along the x-axis
    const shearMatrix = [[1, shearFactor], [0, 1]];

    // Applying the shear transformation
    // For matrix multiplication, we'll implement it manually
    const transformedMatrix = matrix.map(row => {
        return [
            row[0] * shearMatrix[0][0] + row[1] * shearMatrix[1][0],
            row[0] * shearMatrix[0][1] + row[1] * shearMatrix[1][1]
        ];
    });

    return transformedMatrix;
}

// Example usage:
const originalMatrix = [[1, 2], [3, 4]];
const shearFactor = 0.5;

const shearedMatrix = applyShearX(originalMatrix, shearFactor);
console.log(shearedMatrix); // Output should be [[1.5, 2.5], [3.0, 4.0]]
```

### Explanation:
1. **Function Definition**: `applyShearX` is defined with two parameters: `matrix` and `shearFactor`.
2. **Shear Matrix**: The shear transformation matrix is defined as `[[1, shearFactor], [0, 1]]`.
3. **Matrix Multiplication**: The function uses `.map()` to iterate over each row of the input matrix and applies the shear transformation using the shear matrix.
4. **Return Value**: The transformed matrix is returned.

This JavaScript code maintains the same functionality and logic as the Python code, performing the shear transformation on a 2D matrix along the x-axis.