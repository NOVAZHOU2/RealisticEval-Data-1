Sure! Below is the equivalent JavaScript code that performs the same functionality as the given Python code. This code will apply a shear transformation to a 2D matrix along the x-axis using JavaScript's `math.js` library for matrix operations.

First, you need to install `mathjs` if you haven't already:

```bash
npm install mathjs
```

Here is the JavaScript code:

```javascript
// Import the mathjs library for matrix operations
const math = require('mathjs');

function applyShearX(matrix, shearFactor) {
    /**
     * Applies a shear transformation to a 2D matrix along the x-axis.
     *
     * @param {Array<Array<number>>} matrix - A 2D array representing the original matrix.
     * @param {number} shearFactor - The factor by which the matrix is sheared along the x-axis.
     *
     * @returns {Array<Array<number>>} - The sheared matrix.
     */
    // Define the shear transformation matrix for shearing along the x-axis
    const shearMatrix = [[1, shearFactor], [0, 1]];

    // Applying the shear transformation
    // Use mathjs for matrix multiplication
    const transformedMatrix = math.multiply(matrix, shearMatrix);

    return transformedMatrix;
}

// Example usage
const originalMatrix = [
    [1, 2],
    [3, 4]
];

const shearFactor = 0.5;

const shearedMatrix = applyShearX(originalMatrix, shearFactor);
console.log(shearedMatrix);
```

### Explanation:
1. **Importing `mathjs`**: The `mathjs` library is used for matrix operations such as multiplication.
2. **Function Definition**: The `applyShearX` function takes a 2D matrix and a shear factor as arguments.
3. **Shear Matrix**: A shear matrix is defined for shearing along the x-axis.
4. **Matrix Multiplication**: The `math.multiply` function from `mathjs` is used to perform matrix multiplication.
5. **Returning the Result**: The transformed matrix is returned.

This code should provide the same functionality as the Python code but implemented in JavaScript using the `mathjs` library for matrix operations.