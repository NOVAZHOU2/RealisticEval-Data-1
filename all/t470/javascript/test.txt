Certainly! Below is the equivalent Jest test suite for the given Python unittest test class. We will convert the Python unittest code into a Jest test suite, ensuring that the functionality and logic of the tests are maintained. We will use the `mathjs` library for matrix operations in JavaScript.

### Python Unittest Code

```python
import numpy as np
import unittest

def apply_shear_x(matrix: np.array, shear_factor: float):
    """
    Applies a shear transformation to a 2D matrix along the x-axis.

    Args:
        matrix (np.ndarray): A 2D numpy array representing the original matrix.
        shear_factor (float): The factor by which the matrix is sheared along the x-axis.

    Returns:
        np.ndarray: The sheared matrix.
    """
    shear_matrix = np.array([[1, shear_factor], [0, 1]])
    transformed_matrix = matrix @ shear_matrix
    return transformed_matrix

class TestApplyShearX(unittest.TestCase):

    def test_shear_zero(self):
        matrix = np.array([[1, 2], [3, 4]])
        shear_factor = 0.0
        expected_result = np.array([[1, 2], [3, 4]])
        result = apply_shear_x(matrix, shear_factor)
        np.testing.assert_array_equal(result, expected_result)

    def test_shear_positive(self):
        matrix = np.array([[1, 2], [3, 4]])
        shear_factor = 0.5
        expected_result = np.array([[1, 3], [3, 4]])
        result = apply_shear_x(matrix, shear_factor)
        np.testing.assert_array_equal(result, expected_result)

    def test_shear_negative(self):
        matrix = np.array([[1, 2], [3, 4]])
        shear_factor = -0.5
        expected_result = np.array([[1, 1], [3, 4]])
        result = apply_shear_x(matrix, shear_factor)
        np.testing.assert_array_equal(result, expected_result)

if __name__ == '__main__':
    unittest.main()
```

### JavaScript Jest Test Suite

First, ensure you have `mathjs` installed:

```bash
npm install mathjs
```

Here is the JavaScript Jest test suite:

```javascript
const math = require('mathjs');

function applyShearX(matrix, shearFactor) {
    /**
     * Applies a shear transformation to a 2D matrix along the x-axis.
     *
     * @param {Array<Array<number>>} matrix - A 2D array representing the original matrix.
     * @param {number} shearFactor - The factor by which the matrix is sheared along the x-axis.
     * @returns {Array<Array<number>>} The sheared matrix.
     */
    const shearMatrix = [[1, shearFactor], [0, 1]];
    const transformedMatrix = math.multiply(matrix, shearMatrix);
    return transformedMatrix;
}

describe('applyShearX', () => {
    it('should not change the matrix when shear factor is zero', () => {
        const matrix = [[1, 2], [3, 4]];
        const shearFactor = 0.0;
        const expectedResult = [[1, 2], [3, 4]];
        const result = applyShearX(matrix, shearFactor);
        expect(result).toEqual(expectedResult);
    });

    it('should apply positive shear correctly', () => {
        const matrix = [[1, 2], [3, 4]];
        const shearFactor = 0.5;
        const expectedResult = [[1, 3], [3, 4]];
        const result = applyShearX(matrix, shearFactor);
        expect(result).toEqual(expectedResult);
    });

    it('should apply negative shear correctly', () => {
        const matrix = [[1, 2], [3, 4]];
        const shearFactor = -0.5;
        const expectedResult = [[1, 1], [3, 4]];
        const result = applyShearX(matrix, shearFactor);
        expect(result).toEqual(expectedResult);
    });
});

// Example usage
const originalMatrix = [
    [1, 2],
    [3, 4]
];

const shearFactor = 0.5;

const shearedMatrix = applyShearX(originalMatrix, shearFactor);
console.log(shearedMatrix);
```

### Explanation:

1. **Importing `mathjs`**:
   - The `mathjs` library is imported for matrix operations.

2. **Function Definition**:
   - The `applyShearX` function is defined to apply the shear transformation along the x-axis.

3. **Jest Test Suite**:
   - The `describe` block groups the test cases under the `applyShearX` function.
   - Each test case uses `it` to describe the behavior being tested.
   - `expect` is used to assert the expected results.

4. **Test Cases**:
   - `test_shear_zero`: Tests the case where the shear factor is zero.
   - `test_shear_positive`: Tests the case with a positive shear factor.
   - `test_shear_negative`: Tests the case with a negative shear factor.

5. **Example Usage**:
   - An example is provided to demonstrate how to use the `applyShearX` function.

This conversion ensures that the functionality and logic of the tests are maintained, and the structure is clear and follows Jest conventions.