Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of function signatures, comments, and documentation into C++ standards.

### Python Code:
```python
import numpy as np

def apply_shear_x(matrix: np.array, shear_factor: float):
    """
    Applies a shear transformation to a 2D matrix along the x-axis.

    Args:
    matrix (np.ndarray): A 2D numpy array representing the original matrix.
    shear_factor (float): The factor by which the matrix is sheared along the x-axis.

    Returns:
    np.ndarray: The sheared matrix.
    """
```

### Equivalent C++ Code:
```cpp
#include <iostream>
#include <Eigen/Dense>

/**
 * Applies a shear transformation to a 2D matrix along the x-axis.
 *
 * @param matrix A 2D Eigen matrix representing the original matrix.
 * @param shear_factor The factor by which the matrix is sheared along the x-axis.
 * @return The sheared matrix.
 */
Eigen::MatrixXd applyShearX(const Eigen::MatrixXd& matrix, double shear_factor) {
    // Define the shear transformation matrix for shearing along the x-axis
    Eigen::Matrix2d shear_matrix;
    shear_matrix << 1, shear_factor,
                    0, 1;

    // Applying the shear transformation
    // For matrix multiplication, use the * operator
    Eigen::MatrixXd transformed_matrix = matrix * shear_matrix;

    return transformed_matrix;
}

int main() {
    // Example usage
    Eigen::MatrixXd matrix(2, 2);
    matrix << 1, 2,
              3, 4;

    double shear_factor = 0.5;

    Eigen::MatrixXd transformed_matrix = applyShearX(matrix, shear_factor);

    std::cout << "Original Matrix:\n" << matrix << "\n";
    std::cout << "Transformed Matrix:\n" << transformed_matrix << "\n";

    return 0;
}
```

### Explanation:
1. **Header Inclusion**: The `#include <Eigen/Dense>` line includes the necessary Eigen library for matrix operations.
2. **Function Documentation**: The C++ function `applyShearX` is documented using multi-line comments (`/* */`) to explain the purpose, arguments, and return value.
3. **Function Signature**: The function signature `applyShearX` takes a `const Eigen::MatrixXd&` (a reference to a 2D matrix) and a `double` (shear factor).
4. **Shear Matrix**: A 2x2 shear matrix is defined using `Eigen::Matrix2d`.
5. **Matrix Multiplication**: The shear transformation is applied using the `*` operator.
6. **Example Usage**: The `main` function demonstrates how to use the `applyShearX` function, showing the original and transformed matrices.

This conversion ensures that the functionality, logic, and structure of the Python code are preserved while adapting to C++ syntax and features.