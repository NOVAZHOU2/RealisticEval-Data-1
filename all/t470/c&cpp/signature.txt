Certainly! Below is the equivalent C++ code for the given Python function, including the translation of function signatures, type annotations, and comments. We will use the Eigen library for matrix operations, as it provides a convenient and efficient way to work with matrices in C++.

### C++ Code

```cpp
#include <iostream>
#include <Eigen/Dense>

// Function to apply a shear transformation to a 2D matrix along the x-axis
Eigen::MatrixXd applyShearX(const Eigen::MatrixXd& matrix, double shear_factor) {
    /*
     * Applies a shear transformation to a 2D matrix along the x-axis.
     *
     * Args:
     * matrix (Eigen::MatrixXd): A 2D matrix representing the original matrix.
     * shear_factor (double): The factor by which the matrix is sheared along the x-axis.
     *
     * Returns:
     * Eigen::MatrixXd: The sheared matrix.
     */
    
    // Define the shear transformation matrix for shearing along the x-axis
    Eigen::Matrix2d shear_matrix;
    shear_matrix << 1, shear_factor,
                    0, 1;

    // Applying the shear transformation
    // For matrix multiplication, use the * operator
    Eigen::MatrixXd transformed_matrix = matrix * shear_matrix;

    return transformed_matrix;
}

int main() {
    // Example usage
    Eigen::MatrixXd matrix(2, 2);
    matrix << 1, 2,
              3, 4;

    double shear_factor = 0.5;

    Eigen::MatrixXd transformed_matrix = applyShearX(matrix, shear_factor);

    std::cout << "Original Matrix:\n" << matrix << std::endl;
    std::cout << "Transformed Matrix:\n" << transformed_matrix << std::endl;

    return 0;
}
```

### Explanation:
1. **Include Eigen Library**: The `#include <Eigen/Dense>` line includes the necessary Eigen library headers.
2. **Function Definition**: The `applyShearX` function takes a 2D matrix (`Eigen::MatrixXd`) and a shear factor (`double`) as input and returns the sheared matrix.
3. **Multi-line Comments**: The docstring is converted into a multi-line comment block using `/* ... */`.
4. **Single-line Comments**: Single-line comments are used where appropriate.
5. **Shear Transformation Matrix**: The shear transformation matrix is defined as a 2x2 matrix with values `[1, shear_factor; 0, 1]`.
6. **Matrix Multiplication**: The shear transformation is applied using the `*` operator, which performs matrix multiplication.
7. **Example Usage**: In the `main` function, an example matrix is created, and the shear transformation is applied. The original and transformed matrices are printed to the console.

This code preserves the original purpose and structure of the Python code while adapting it to C++ and the Eigen library.