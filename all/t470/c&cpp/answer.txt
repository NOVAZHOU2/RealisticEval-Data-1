Sure! Below is the equivalent C++ code for the given Python function. This code applies a shear transformation to a 2D matrix along the x-axis using C++ and the Eigen library, which is a popular C++ template library for linear algebra.

First, you need to install the Eigen library if it's not already installed. You can download it from [here](http://eigen.tuxfamily.org/index.php?title=Main_Page).

Here is the C++ code:

```cpp
#include <iostream>
#include <Eigen/Dense>

// Function to apply a shear transformation to a 2D matrix along the x-axis
Eigen::MatrixXd applyShearX(const Eigen::MatrixXd& matrix, double shear_factor) {
    // Define the shear transformation matrix for shearing along the x-axis
    Eigen::Matrix2d shear_matrix;
    shear_matrix << 1, shear_factor,
                    0, 1;

    // Applying the shear transformation
    // For matrix multiplication, use the * operator
    Eigen::MatrixXd transformed_matrix = matrix * shear_matrix;

    return transformed_matrix;
}

int main() {
    // Example usage
    Eigen::MatrixXd matrix(2, 2);
    matrix << 1, 2,
              3, 4;

    double shear_factor = 0.5;

    Eigen::MatrixXd transformed_matrix = applyShearX(matrix, shear_factor);

    std::cout << "Original Matrix:\n" << matrix << std::endl;
    std::cout << "Transformed Matrix:\n" << transformed_matrix << std::endl;

    return 0;
}
```

### Explanation:
1. **Include Eigen Library**: The `#include <Eigen/Dense>` line includes the necessary Eigen library headers.
2. **Function Definition**: The `applyShearX` function takes a 2D matrix (`Eigen::MatrixXd`) and a shear factor (`double`) as input and returns the sheared matrix.
3. **Shear Transformation Matrix**: The shear transformation matrix is defined as a 2x2 matrix with values `[1, shear_factor; 0, 1]`.
4. **Matrix Multiplication**: The shear transformation is applied using the `*` operator, which performs matrix multiplication.
5. **Example Usage**: In the `main` function, an example matrix is created, and the shear transformation is applied. The original and transformed matrices are printed to the console.

This code should provide the same functionality as the Python code but adapted to C++ and the Eigen library.