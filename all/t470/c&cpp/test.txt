Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2

First, make sure you have Catch2 installed. You can include it in your project by adding the Catch2 header files.

#### Catch2 Header File
Add the following line at the beginning of your file to include Catch2:

```cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"
```

#### Test Class Conversion

Here is the complete C++ code with the Catch2 test suite:

```cpp
#include <iostream>
#include <Eigen/Dense>
#include "catch.hpp"

// Function to apply a shear transformation to a 2D matrix along the x-axis
Eigen::MatrixXd applyShearX(const Eigen::MatrixXd& matrix, double shear_factor) {
    /*
     * Applies a shear transformation to a 2D matrix along the x-axis.
     *
     * Args:
     * matrix (Eigen::MatrixXd): A 2D matrix representing the original matrix.
     * shear_factor (double): The factor by which the matrix is sheared along the x-axis.
     *
     * Returns:
     * Eigen::MatrixXd: The sheared matrix.
     */

    // Define the shear transformation matrix for shearing along the x-axis
    Eigen::Matrix2d shear_matrix;
    shear_matrix << 1, shear_factor,
                    0, 1;

    // Applying the shear transformation
    // For matrix multiplication, use the * operator
    Eigen::MatrixXd transformed_matrix = matrix * shear_matrix;

    return transformed_matrix;
}

TEST_CASE("TestShearTransformation", "[shear]") {
    SECTION("test_identity_shear") {
        // Test with zero shear factor which should return the original matrix unchanged.
        Eigen::MatrixXd matrix = Eigen::MatrixXd::Zero(2, 2);
        matrix << 1, 2,
                  3, 4;
        double shear_factor = 0;
        Eigen::MatrixXd expected_output = Eigen::MatrixXd::Zero(2, 2);
        expected_output << 1, 2,
                           3, 4;
        Eigen::MatrixXd result = applyShearX(matrix, shear_factor);
        REQUIRE(result.isApprox(expected_output));
    }

    SECTION("test_positive_shear") {
        // Test with a positive shear factor.
        Eigen::MatrixXd matrix = Eigen::MatrixXd::Zero(2, 2);
        matrix << 1, 2,
                  3, 4;
        double shear_factor = 1;
        Eigen::MatrixXd expected_output = Eigen::MatrixXd::Zero(2, 2);
        expected_output << 1, 3,
                           3, 7;
        Eigen::MatrixXd result = applyShearX(matrix, shear_factor);
        REQUIRE(result.isApprox(expected_output));
    }

    SECTION("test_negative_shear") {
        // Test with a negative shear factor.
        Eigen::MatrixXd matrix = Eigen::MatrixXd::Zero(2, 2);
        matrix << 1, 2,
                  3, 4;
        double shear_factor = -1;
        Eigen::MatrixXd expected_output = Eigen::MatrixXd::Zero(2, 2);
        expected_output << 1, 1,
                           3, 1;
        Eigen::MatrixXd result = applyShearX(matrix, shear_factor);
        REQUIRE(result.isApprox(expected_output));
    }

    SECTION("test_high_shear_factor") {
        // Test with a high shear factor to see how the matrix adapts to extreme transformations.
        Eigen::MatrixXd matrix = Eigen::MatrixXd::Zero(2, 2);
        matrix << 1, 1,
                  1, 1;
        double shear_factor = 10;
        Eigen::MatrixXd expected_output = Eigen::MatrixXd::Zero(2, 2);
        expected_output << 1, 11,
                           1, 11;
        Eigen::MatrixXd result = applyShearX(matrix, shear_factor);
        REQUIRE(result.isApprox(expected_output));
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Catch2 Header**: The `#include "catch.hpp"` line includes the Catch2 header file.
2. **Function Definition**: The `applyShearX` function is defined to perform the shear transformation.
3. **Test Suite**: The `TEST_CASE` macro defines the test suite named `TestShearTransformation`.
4. **Sections**: Each `SECTION` within the test suite corresponds to a specific test case.
5. **Assertions**: The `REQUIRE` macro is used to assert that the results match the expected output. `isApprox` is used to check for approximate equality, which is suitable for floating-point comparisons.

This code ensures that the functionality and logic of the tests are preserved while adapting to the syntax and features of C++ and the Catch2 testing framework.