Certainly! Below is the equivalent C++ code using the Catch2 testing framework to test the `apply_shear_x` function. I'll provide the full implementation, including the Catch2 setup and the test cases.

### Python Code:
```python
import numpy as np

def apply_shear_x(matrix: np.array, shear_factor: float):
    """
    Applies a shear transformation to a 2D matrix along the x-axis.

    Args:
    matrix (np.ndarray): A 2D numpy array representing the original matrix.
    shear_factor (float): The factor by which the matrix is sheared along the x-axis.

    Returns:
    np.ndarray: The sheared matrix.
    """
    # Define the shear transformation matrix for shearing along the x-axis
    shear_matrix = np.array([[1, shear_factor],
                             [0, 1]])

    # Applying the shear transformation
    # For matrix multiplication, use np.dot() or @ operator
    transformed_matrix = matrix @ shear_matrix

    return transformed_matrix
```

### Equivalent C++ Code with Catch2 Testing Framework:

#### 1. Include Catch2 Headers
First, include the necessary Catch2 headers in your project. You can install Catch2 via a package manager or include it directly in your project.

#### 2. C++ Code
Here is the complete C++ code with the Catch2 test cases:

```cpp
#include <iostream>
#include <Eigen/Dense>
#include <catch2/catch_test_macros.hpp>

// Function to apply a shear transformation to a 2D matrix along the x-axis
Eigen::MatrixXd applyShearX(const Eigen::MatrixXd& matrix, double shear_factor) {
    // Define the shear transformation matrix for shearing along the x-axis
    Eigen::Matrix2d shear_matrix;
    shear_matrix << 1, shear_factor,
                    0, 1;

    // Applying the shear transformation
    // For matrix multiplication, use the * operator
    Eigen::MatrixXd transformed_matrix = matrix * shear_matrix;

    return transformed_matrix;
}

TEST_CASE("Test applyShearX function", "[shear]") {
    SECTION("Test basic shear transformation") {
        Eigen::MatrixXd matrix(2, 2);
        matrix << 1, 2,
                  3, 4;

        double shear_factor = 0.5;

        Eigen::MatrixXd expected_result(2, 2);
        expected_result << 1 + 2 * 0.5, 2,
                           3 + 4 * 0.5, 4;

        Eigen::MatrixXd result = applyShearX(matrix, shear_factor);

        REQUIRE(result.isApprox(expected_result));
    }

    SECTION("Test zero shear factor") {
        Eigen::MatrixXd matrix(2, 2);
        matrix << 1, 2,
                  3, 4;

        double shear_factor = 0.0;

        Eigen::MatrixXd expected_result(2, 2);
        expected_result << 1, 2,
                           3, 4;

        Eigen::MatrixXd result = applyShearX(matrix, shear_factor);

        REQUIRE(result.isApprox(expected_result));
    }

    SECTION("Test negative shear factor") {
        Eigen::MatrixXd matrix(2, 2);
        matrix << 1, 2,
                  3, 4;

        double shear_factor = -0.5;

        Eigen::MatrixXd expected_result(2, 2);
        expected_result << 1 - 2 * 0.5, 2,
                           3 - 4 * 0.5, 4;

        Eigen::MatrixXd result = applyShearX(matrix, shear_factor);

        REQUIRE(result.isApprox(expected_result));
    }
}

int main(int argc, char* argv[]) {
    int result = Catch::Session().run(argc, argv);
    return result;
}
```

### Explanation:
1. **Include Catch2 Headers**: The `#include <catch2/catch_test_macros.hpp>` line includes the necessary Catch2 headers for writing tests.
2. **Function Implementation**: The `applyShearX` function is implemented to perform the shear transformation on a 2D matrix.
3. **Catch2 Test Cases**:
   - `TEST_CASE`: Defines a test case named "Test applyShearX function" with a tag `[shear]`.
   - `SECTION`: Each section contains a specific test scenario.
   - `REQUIRE`: Asserts that the result of the shear transformation is approximately equal to the expected result using `isApprox()`.

### Running the Tests:
To run the tests, you can compile and execute the program using Catch2. Hereâ€™s an example command to run the tests:

```sh
g++ -std=c++17 -o shear_test shear_test.cpp -lEigen
./shear_test
```

Ensure that you have the Eigen library installed and linked correctly. If you encounter any issues, you may need to adjust the compilation flags or include paths based on your build environment.