Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java type translations:

```java
import java.util.Arrays;

/**
 * Applies a shear transformation to a 2D matrix along the x-axis.
 */
public class Answer {

    /**
     * Applies a shear transformation to a 2D matrix along the x-axis.
     *
     * @param matrix A 2D array representing the original matrix.
     * @param shearFactor The factor by which the matrix is sheared along the x-axis.
     * @return A 2D array representing the sheared matrix.
     */
    public static double[][] applyShearX(double[][] matrix, double shearFactor) {
        // Define the shear transformation matrix for shearing along the x-axis
        double[][] shearMatrix = {{1, shearFactor}, {0, 1}};

        // Applying the shear transformation using matrix multiplication
        int rows = matrix.length;
        int cols = matrix[0].length;
        double[][] transformedMatrix = new double[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                // Matrix multiplication
                transformedMatrix[i][j] = matrix[i][0] * shearMatrix[0][j] + matrix[i][1] * shearMatrix[1][j];
            }
        }

        return transformedMatrix;
    }

    /**
     * Prints the 2D matrix to the console.
     *
     * @param matrix The 2D matrix to be printed.
     */
    public static void printMatrix(double[][] matrix) {
        for (double[] row : matrix) {
            for (double value : row) {
                System.out.print(value + " ");
            }
            System.out.println();
        }
    }

    /**
     * Main method for testing.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        double[][] originalMatrix = {{1, 2}, {3, 4}};
        double shearFactor = 0.5;

        double[][] shearedMatrix = applyShearX(originalMatrix, shearFactor);

        System.out.println("Original Matrix:");
        printMatrix(originalMatrix);

        System.out.println("Sheared Matrix:");
        printMatrix(shearedMatrix);
    }
}
```

### Explanation:
1. **Class Definition**: The `Answer` class contains the methods for applying the shear transformation and printing the matrix.
2. **Javadoc Comments**: The Javadoc comments provide detailed documentation for the methods, including parameter descriptions and return values.
3. **Method Signature**: The `applyShearX` method takes a 2D `double` array (`matrix`) and a `double` shear factor (`shearFactor`), and returns a 2D `double` array representing the sheared matrix.
4. **Matrix Multiplication**: The shear transformation is applied by multiplying each element of the input matrix with the corresponding elements of the shear matrix.
5. **Helper Method**: The `printMatrix` method is included to display the contents of the 2D matrix for testing purposes.
6. **Main Method**: The `main` method demonstrates how to use the `applyShearX` method and prints the original and sheared matrices.

This Java code preserves the original functionality and structure of the Python code while adhering to Java's syntax and conventions.