Certainly! Below is the equivalent Java test class using JUnit. The Java test class will be placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests will be preserved, and appropriate JUnit annotations and assertion methods will be used.

### Java Test Class Using JUnit

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.factory.Nd4j;

public class Tester {

    private INDArray applyShearX(INDArray matrix, double shearFactor) {
        // Define the shear transformation matrix for shearing along the x-axis
        INDArray shearMatrix = Nd4j.create(new double[][]{
            {1, shearFactor},
            {0, 1}
        });

        // Applying the shear transformation
        // For matrix multiplication, use mmul() method
        INDArray transformedMatrix = matrix.mmul(shearMatrix);

        return transformedMatrix;
    }

    @Test
    public void testIdentityShear() {
        // Test with zero shear factor which should return the original matrix unchanged.
        INDArray matrix = Nd4j.create(new double[][]{
            {1, 2},
            {3, 4}
        });
        double shearFactor = 0;
        INDArray expectedOutput = Nd4j.create(new double[][]{
            {1, 2},
            {3, 4}
        });
        INDArray result = applyShearX(matrix, shearFactor);
        assertArrayEquals(expectedOutput.data().asDouble(), result.data().asDouble(), 0.0);
    }

    @Test
    public void testPositiveShear() {
        // Test with a positive shear factor.
        INDArray matrix = Nd4j.create(new double[][]{
            {1, 2},
            {3, 4}
        });
        double shearFactor = 1;
        INDArray expectedOutput = Nd4j.create(new double[][]{
            {1, 3},
            {3, 7}
        });
        INDArray result = applyShearX(matrix, shearFactor);
        assertArrayEquals(expectedOutput.data().asDouble(), result.data().asDouble(), 0.0);
    }

    @Test
    public void testNegativeShear() {
        // Test with a negative shear factor.
        INDArray matrix = Nd4j.create(new double[][]{
            {1, 2},
            {3, 4}
        });
        double shearFactor = -1;
        INDArray expectedOutput = Nd4j.create(new double[][]{
            {1, 1},
            {3, 1}
        });
        INDArray result = applyShearX(matrix, shearFactor);
        assertArrayEquals(expectedOutput.data().asDouble(), result.data().asDouble(), 0.0);
    }

    @Test
    public void testHighShearFactor() {
        // Test with a high shear factor to see how the matrix adapts to extreme transformations.
        INDArray matrix = Nd4j.create(new double[][]{
            {1, 1},
            {1, 1}
        });
        double shearFactor = 10;
        INDArray expectedOutput = Nd4j.create(new double[][]{
            {1, 11},
            {1, 11}
        });
        INDArray result = applyShearX(matrix, shearFactor);
        assertArrayEquals(expectedOutput.data().asDouble(), result.data().asDouble(), 0.0);
    }
}
```

### Explanation:

1. **Package Declaration**:
   - `package org.real.temp;`: Declares the package name.

2. **Imports**:
   - `import org.junit.Test;`: Import the `@Test` annotation from JUnit.
   - `import static org.junit.Assert.assertArrayEquals;`: Import the `assertArrayEquals` method for array comparison.
   - `import org.nd4j.linalg.api.ndarray.INDArray;`: Import the `INDArray` class from the ND4J library.
   - `import org.nd4j.linalg.factory.Nd4j;`: Import the factory class for creating `INDArray` instances.

3. **Class Definition**:
   - `public class Tester`: Defines the test class `Tester`.

4. **JUnit Test Methods**:
   - Each test method is annotated with `@Test` to indicate that it is a test case.
   - Each test method has a descriptive name and includes assertions to verify the correctness of the `applyShearX` method.

5. **Method Implementation**:
   - The `applyShearX` method is defined within the test class to perform the shear transformation.
   - The shear transformation matrix is created using `Nd4j.create`.
   - The shear transformation is applied using the `mmul` method for matrix multiplication.

6. **Assertions**:
   - `assertArrayEquals` is used to compare the expected output with the actual result. The `data().asDouble()` method is used to extract the double values from the `INDArray` objects for comparison.

This Java test class preserves the original functionality and logic of the Python unittest class while adhering to JUnit conventions and best practices.