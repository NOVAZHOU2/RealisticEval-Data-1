Sure! Below is the equivalent Java code for the provided Python code. This Java code is organized within the `org.real.temp` package and the `Answer` class. It includes the necessary imports and handles type declarations, method signatures, and object-oriented principles in Java.

```java
package org.real.temp;

import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.factory.Nd4j;

public class Answer {

    /**
     * Applies a shear transformation to a 2D matrix along the x-axis.
     *
     * @param matrix        A 2D matrix represented as an INDArray.
     * @param shearFactor   The factor by which the matrix is sheared along the x-axis.
     * @return INDArray: The sheared matrix.
     */
    public static INDArray applyShearX(INDArray matrix, double shearFactor) {
        // Define the shear transformation matrix for shearing along the x-axis
        INDArray shearMatrix = Nd4j.create(new double[][]{
            {1, shearFactor},
            {0, 1}
        });

        // Applying the shear transformation
        // For matrix multiplication, use mmul() method
        INDArray transformedMatrix = matrix.mmul(shearMatrix);

        return transformedMatrix;
    }

    public static void main(String[] args) {
        // Example usage
        INDArray originalMatrix = Nd4j.create(new double[][]{
            {1, 2},
            {3, 4}
        });
        double shearFactor = 0.5;

        INDArray shearedMatrix = applyShearX(originalMatrix, shearFactor);
        System.out.println("Original Matrix:");
        originalMatrix.print();
        System.out.println("Sheared Matrix:");
        shearedMatrix.print();
    }
}
```

### Explanation:
1. **Imports**: 
   - `org.nd4j.linalg.api.ndarray.INDArray`: This is used to represent the 2D matrix.
   - `org.nd4j.linalg.factory.Nd4j`: This provides methods to create and manipulate INDArrays.

2. **Method Signature**:
   - `applyShearX(INDArray matrix, double shearFactor)`: This method takes a 2D matrix (`INDArray`) and a shear factor (`double`) as arguments and returns the sheared matrix (`INDArray`).

3. **Shear Transformation**:
   - The shear transformation matrix is created using `Nd4j.create()` and then applied using the `mmul()` method for matrix multiplication.

4. **Example Usage**:
   - In the `main` method, an example matrix is created, and the `applyShearX` method is called to demonstrate its functionality. The original and sheared matrices are printed for verification.