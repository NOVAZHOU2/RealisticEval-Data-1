Certainly! Below is the equivalent TypeScript code that achieves the same functionality as the provided Python code. We will use the `mathjs` library to handle matrix operations since TypeScript does not have built-in support for matrices like NumPy in Python.

First, you need to install the `mathjs` package:

```bash
npm install mathjs
```

Here is the TypeScript code:

```typescript
import * as math from 'mathjs';

/**
 * Applies a shear transformation to a 2D matrix along the x-axis.
 *
 * @param matrix - A 2D array representing the original matrix.
 * @param shearFactor - The factor by which the matrix is sheared along the x-axis.
 * @returns The sheared matrix.
 */
function applyShearX(matrix: number[][], shearFactor: number): number[][] {
    // Define the shear transformation matrix for shearing along the x-axis
    const shearMatrix = math.matrix([[1, shearFactor], [0, 1]]);

    // Applying the shear transformation
    // Use mathjs for matrix multiplication
    const transformedMatrix = math.multiply(matrix, shearMatrix);

    // Convert the result back to a 2D array
    return math.toArray(transformedMatrix);
}

// Example usage
const originalMatrix: number[][] = [[1, 2], [3, 4]];
const shearFactor: number = 0.5;
const shearedMatrix = applyShearX(originalMatrix, shearFactor);

console.log('Original Matrix:', originalMatrix);
console.log('Sheared Matrix:', shearedMatrix);
```

### Explanation:
1. **Imports**: We import the `mathjs` library to handle matrix operations.
2. **Function Definition**: The `applyShearX` function takes a 2D array (`matrix`) and a shear factor (`shearFactor`) as arguments.
3. **Shear Transformation Matrix**: We create a 2D shear matrix using `math.matrix`.
4. **Matrix Multiplication**: We use `math.multiply` to perform matrix multiplication.
5. **Result Conversion**: We convert the result back to a 2D array using `math.toArray`.

This code ensures that the functionality, structure, and logic of the original Python code are preserved while adapting to TypeScript's static type system and idiomatic practices.