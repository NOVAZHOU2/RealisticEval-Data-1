Certainly! Below is the equivalent TypeScript code that performs the same functionality as the provided Python code. This includes defining types and using appropriate TypeScript features:

```typescript
import * as math from 'mathjs';

/**
 * Applies a shear transformation to a 2D matrix along the x-axis.
 *
 * @param matrix - A 2D array representing the original matrix.
 * @param shearFactor - The factor by which the matrix is sheared along the x-axis.
 * @returns The sheared matrix.
 */
function applyShearX(matrix: number[][], shearFactor: number): number[][] {
  // Define the shear transformation matrix for shearing along the x-axis
  const shearMatrix: number[][] = [
    [1, shearFactor],
    [0, 1]
  ];

  // Applying the shear transformation
  // For matrix multiplication, use math.js library
  const transformedMatrix = math.multiply(matrix, shearMatrix);

  return transformedMatrix;
}

// Example usage
const originalMatrix: number[][] = [
  [1, 2],
  [3, 4]
];

const shearFactor: number = 0.5;

const shearedMatrix = applyShearX(originalMatrix, shearFactor);
console.log(shearedMatrix);
```

### Explanation:
1. **Import `mathjs`**: The `mathjs` library is used for matrix operations since TypeScript does not have built-in support for matrix multiplication like NumPy in Python.
2. **Function Definition**: The function `applyShearX` takes a 2D array (`matrix`) and a shear factor (`shearFactor`) as arguments and returns the sheared matrix.
3. **Type Annotations**: Types are defined for the input parameters and the return value to ensure type safety.
4. **Matrix Multiplication**: The `math.multiply` function from the `mathjs` library is used to perform matrix multiplication.
5. **Example Usage**: An example is provided to demonstrate how to use the function.

This TypeScript code maintains the same functionality and logic as the Python code but adapts it to TypeScript's static type system and uses the `mathjs` library for matrix operations.