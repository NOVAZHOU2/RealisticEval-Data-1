Sure! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class. Note that I'll assume you have a similar function in TypeScript and will write the corresponding tests.

```typescript
import { describe, it, expect } from '@jest/globals';
import { applyShearX } from './path-to-your-function'; // Adjust the path accordingly

describe('applyShearX', () => {
  it('should apply shear transformation along the x-axis correctly', () => {
    const matrix = [
      [1, 0],
      [0, 1]
    ];
    const shearFactor = 0.5;
    const expectedMatrix = [
      [1 + 0.5 * 0, 0.5],
      [0, 1]
    ];

    const result = applyShearX(matrix, shearFactor);

    expect(result).toEqual(expectedMatrix);
  });

  it('should handle different input sizes correctly', () => {
    const matrix = [
      [1, 2, 3],
      [4, 5, 6]
    ];
    const shearFactor = -0.25;
    const expectedMatrix = [
      [1 - 0.25 * 2, 2 - 0.25 * 3, 3],
      [4 - 0.25 * 2, 5 - 0.25 * 3, 6]
    ];

    const result = applyShearX(matrix, shearFactor);

    expect(result).toEqual(expectedMatrix);
  });
});
```

### Explanation:

1. **Importing Jest**: We import `describe`, `it`, and `expect` from `@jest/globals`.
2. **Describing the Test Suite**: We use `describe` to group related tests together.
3. **Writing Individual Tests**: Each test case is written using `it`. We provide a description of what the test should do.
4. **Assertions**: We use `expect` to assert that the output of our function matches the expected result.

Make sure to adjust the path to your `applyShearX` function accordingly. This TypeScript code assumes that `applyShearX` is defined in a file named `path-to-your-function.ts`.

Feel free to add more test cases or modify existing ones based on your specific requirements!