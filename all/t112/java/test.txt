Certainly! Here is the equivalent JUnit 4 test case in Java for the given Jest test cases:

```java
import static org.junit.Assert.assertEquals;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

/**
 * Test cases for the convertHtmlHeadingsToMarkdown method.
 */
@RunWith(JUnit4.class)
public class Tester {

    @Test
    public void shouldConvertH1ToHash() {
        String input = "<h1>This is a Heading 1</h1>";
        String output = "# This is a Heading 1";
        assertEquals(output, HtmlToMarkdownConverter.convertHtmlHeadingsToMarkdown(input));
    }

    @Test
    public void shouldConvertH2ToDoubleHash() {
        String input = "<h2>This is a Heading 2</h2>";
        String output = "## This is a Heading 2";
        assertEquals(output, HtmlToMarkdownConverter.convertHtmlHeadingsToMarkdown(input));
    }

    @Test
    public void shouldConvertH3ToTripleHash() {
        String input = "<h3>This is a Heading 3</h3>";
        String output = "### This is a Heading 3";
        assertEquals(output, HtmlToMarkdownConverter.convertHtmlHeadingsToMarkdown(input));
    }

    @Test
    public void shouldConvertH4ToQuadrupleHash() {
        String input = "<h4>This is a Heading 4</h4>";
        String output = "#### This is a Heading 4";
        assertEquals(output, HtmlToMarkdownConverter.convertHtmlHeadingsToMarkdown(input));
    }

    @Test
    public void shouldConvertH5ToQuintupleHash() {
        String input = "<h5>This is a Heading 5</h5>";
        String output = "##### This is a Heading 5";
        assertEquals(output, HtmlToMarkdownConverter.convertHtmlHeadingsToMarkdown(input));
    }

    @Test
    public void shouldConvertH6ToSextupleHash() {
        String input = "<h6>This is a Heading 6</h6>";
        String output = "###### This is a Heading 6";
        assertEquals(output, HtmlToMarkdownConverter.convertHtmlHeadingsToMarkdown(input));
    }
}
```

### Explanation:
1. **JUnit 4 Annotations**:
   - `@RunWith(JUnit4.class)` is used to specify that JUnit 4 should be used for running the tests.
   - `@Test` is used to mark each test method.

2. **Import Statements**:
   - `import static org.junit.Assert.assertEquals;` is used to import the `assertEquals` method from JUnit for assertions.
   - `import org.junit.Test;` and `import org.junit.runner.RunWith;` are necessary for JUnit 4 test annotations.

3. **Test Methods**:
   - Each test method is named descriptively to indicate what it is testing.
   - The `assertEquals` method is used to verify that the output of `convertHtmlHeadingsToMarkdown` matches the expected output.

4. **Class Definition**:
   - The class `Tester` contains all the test methods.

This setup ensures that the test cases are structured similarly to the Jest test cases and use JUnit 4 for verification.