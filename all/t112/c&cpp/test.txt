Certainly! To translate your Jest test cases into C++ using Catch2, you can follow these steps:

1. Include the necessary headers.
2. Define the test cases using Catch2's `TEST_CASE` macro.
3. Call the `convertHtmlHeadingsToMarkdown` function and assert the expected results.

Hereâ€™s the complete C++ code using Catch2:

### CMakeLists.txt

First, ensure you have the Catch2 library installed and set up your project with CMake:

```cmake
cmake_minimum_required(VERSION 3.10)
project(HtmlToMarkdownTest)

# Add Catch2
include(FetchContent)
FetchContent_Declare(
    catch2
    GIT_REPOSITORY https://github.com/catchorg/Catch2.git
    GIT_TAG v2.13.8
)
FetchContent_MakeAvailable(catch2)

add_executable(HtmlToMarkdownTest HtmlToMarkdownTest.cpp)

target_link_libraries(HtmlToMarkdownTest catch2)
```

### HtmlToMarkdownTest.cpp

Next, write the test cases using Catch2:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <regex>

// Function to be tested
std::string convertHtmlHeadingsToMarkdown(const std::string& html);

// Implementation of the function
std::string convertHtmlHeadingsToMarkdown(const std::string& html) {
    std::regex h1_pattern("<h1>(.*?)</h1>");
    std::regex h2_pattern("<h2>(.*?)</h2>");
    std::regex h3_pattern("<h3>(.*?)</h3>");
    std::regex h4_pattern("<h4>(.*?)</h4>");
    std::regex h5_pattern("<h5>(.*?)</h5>");
    std::regex h6_pattern("<h6>(.*?)</h6>");

    std::string markdown = html;

    markdown = std::regex_replace(markdown, h1_pattern, "# $1");
    markdown = std::regex_replace(markdown, h2_pattern, "## $1");
    markdown = std::regex_replace(markdown, h3_pattern, "### $1");
    markdown = std::regex_replace(markdown, h4_pattern, "#### $1");
    markdown = std::regex_replace(markdown, h5_pattern, "##### $1");
    markdown = std::regex_replace(markdown, h6_pattern, "###### $1");

    return markdown;
}

TEST_CASE("convertHtmlHeadingsToMarkdown", "[html_to_markdown]") {
    SECTION("should convert <h1> to #") {
        const std::string input = "<h1>This is a Heading 1</h1>";
        const std::string output = "# This is a Heading 1";
        REQUIRE(convertHtmlHeadingsToMarkdown(input) == output);
    }

    SECTION("should convert <h2> to ##") {
        const std::string input = "<h2>This is a Heading 2</h2>";
        const std::string output = "## This is a Heading 2";
        REQUIRE(convertHtmlHeadingsToMarkdown(input) == output);
    }

    SECTION("should convert <h3> to ###") {
        const std::string input = "<h3>This is a Heading 3</h3>";
        const std::string output = "### This is a Heading 3";
        REQUIRE(convertHtmlHeadingsToMarkdown(input) == output);
    }

    SECTION("should convert <h4> to ####") {
        const std::string input = "<h4>This is a Heading 4</h4>";
        const std::string output = "#### This is a Heading 4";
        REQUIRE(convertHtmlHeadingsToMarkdown(input) == output);
    }

    SECTION("should convert <h5> to #####") {
        const std::string input = "<h5>This is a Heading 5</h5>";
        const std::string output = "##### This is a Heading 5";
        REQUIRE(convertHtmlHeadingsToMarkdown(input) == output);
    }

    SECTION("should convert <h6> to ######") {
        const std::string input = "<h6>This is a Heading 6</h6>";
        const std::string output = "###### This is a Heading 6";
        REQUIRE(convertHtmlHeadingsToMarkdown(input) == output);
    }
}
```

### Explanation

1. **CMakeLists.txt**: Sets up the project to include and link against Catch2.
2. **HtmlToMarkdownTest.cpp**:
   - Includes the necessary headers.
   - Defines the `convertHtmlHeadingsToMarkdown` function.
   - Uses Catch2's `TEST_CASE` and `SECTION` macros to define test cases.
   - Uses `REQUIRE` to assert that the function returns the expected output.

This setup allows you to run the tests using Catch2 and verify the correctness of the `convertHtmlHeadingsToMarkdown` function.