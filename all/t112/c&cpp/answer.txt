Hereâ€™s the equivalent C++ code for converting HTML heading tags (h1-h6) to Markdown headings:

```cpp
#include <iostream>
#include <string>
#include <regex>

std::string convertHtmlHeadingsToMarkdown(const std::string& html) {
    std::string markdown = html;

    // Replace h1 to h6 tags with corresponding Markdown headings using regex
    markdown = std::regex_replace(markdown, std::regex(R"(<h1>(.*?)<\/h1>)"), "# $1");
    markdown = std::regex_replace(markdown, std::regex(R"(<h2>(.*?)<\/h2>)"), "## $1");
    markdown = std::regex_replace(markdown, std::regex(R"(<h3>(.*?)<\/h3>)"), "### $1");
    markdown = std::regex_replace(markdown, std::regex(R"(<h4>(.*?)<\/h4>)"), "#### $1");
    markdown = std::regex_replace(markdown, std::regex(R"(<h5>(.*?)<\/h5>)"), "##### $1");
    markdown = std::regex_replace(markdown, std::regex(R"(<h6>(.*?)<\/h6>)"), "###### $1");

    return markdown;
}

int main() {
    std::string html = "<h1>Heading 1</h1><h2>Heading 2</h2><h3>Heading 3</h3>";
    std::string markdown = convertHtmlHeadingsToMarkdown(html);
    std::cout << markdown << std::endl;
    return 0;
}
```

### Explanation:

1. **Includes and Using Namespaces**: The code includes necessary headers and uses the `std` namespace for convenience.
2. **Function Definition**: `convertHtmlHeadingsToMarkdown` takes an HTML string as input and returns the converted Markdown string.
3. **Regex Replacement**: It uses `std::regex_replace` to find and replace the HTML heading tags with corresponding Markdown syntax.
4. **Main Function**: The `main` function demonstrates how to use the conversion function with a sample HTML string.