Sure! Here is the equivalent C++ code for the given JavaScript function:

```cpp
#include <iostream>
#include <regex>
#include <string>
#include <cmath>

/**
 * Converts an ISO 8601 duration string into a more readable format.
 *
 * @param duration The ISO 8601 duration string (e.g., "PT1H23M45.678S").
 * @return A human-readable duration string (e.g., "1h23m45s678ms").
 */
std::string convertTime(const std::string& duration) {
    std::regex regex("PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(\\.\\d+)?S)?");
    std::smatch matches;

    if (!std::regex_match(duration, matches, regex)) {
        return ""; // Return an empty string if the input doesn't match the expected format
    }

    std::string convertedTime = "";

    if (matches[1].matched) {
        convertedTime += matches[1].str() + "h";
    }

    if (matches[2].matched) {
        convertedTime += matches[2].str() + "m";
    }

    if (matches[3].matched) {
        convertedTime += matches[3].str() + "s";
    }

    if (matches[4].matched) {
        double fractionalSeconds = std::stod(matches[4].str());
        int milliseconds = std::round(fractionalSeconds * 1000);
        if (milliseconds > 0) {
            convertedTime += std::to_string(milliseconds) + "ms";
        }
    }

    return convertedTime;
}

int main() {
    std::string testDuration = "PT1H23M45.678S";
    std::cout << convertTime(testDuration) << std::endl; // Output: "1h23m45s678ms"

    return 0;
}
```

### Explanation:
1. **Header Files**: Include necessary headers (`<iostream>`, `<regex>`, `<string>`, `<cmath>`).
2. **Function Definition**: Define the `convertTime` function that takes a string and returns a string.
3. **Regular Expression**: Use `std::regex` to define the pattern for matching the ISO 8601 duration string.
4. **Matching**: Use `std::regex_match` to check if the input string matches the pattern and store the results in `std::smatch`.
5. **Conversion Logic**:
   - Check each matched group and append the corresponding part to the `convertedTime` string.
   - Convert fractional seconds to milliseconds and append if greater than zero.
6. **Main Function**: Test the `convertTime` function with a sample input.

This should give you the desired functionality in C++.