Sure! Here is the equivalent Java code for the given JavaScript function:

```java
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DurationConverter {

    /**
     * Converts an ISO 8601 duration string into a more readable format.
     *
     * @param duration The ISO 8601 duration string (e.g., "PT1H23M45.678S").
     * @return A human-readable duration string (e.g., "1h23m45s678ms").
     */
    public static String convertTime(String duration) {
        Pattern pattern = Pattern.compile("PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(\\.\\d+)?S)?");
        Matcher matcher = pattern.matcher(duration);

        if (!matcher.matches()) {
            return ""; // Return an empty string if the input doesn't match the expected format
        }

        String hours = matcher.group(1);
        String minutes = matcher.group(2);
        String seconds = matcher.group(3);
        String fractionalSeconds = matcher.group(4);
        StringBuilder convertedTime = new StringBuilder();

        if (hours != null) {
            convertedTime.append(hours).append("h");
        }

        if (minutes != null) {
            convertedTime.append(minutes).append("m");
        }

        if (seconds != null) {
            convertedTime.append(seconds).append("s");
        }

        if (fractionalSeconds != null) {
            int milliseconds = (int) Math.round(Float.parseFloat(fractionalSeconds.substring(1)) * 1000);
            if (milliseconds > 0) {
                convertedTime.append(milliseconds).append("ms");
            }
        }

        return convertedTime.toString();
    }

    public static void main(String[] args) {
        String isoDuration = "PT1H23M45.678S";
        System.out.println(convertTime(isoDuration)); // Output: 1h23m45s678ms
    }
}
```

### Explanation:
1. **Pattern and Matcher**: The regular expression is compiled using `Pattern` and matched against the input string using `Matcher`.
2. **Matcher Matches**: The `matches()` method checks if the entire string matches the pattern.
3. **Group Extraction**: The `group()` method extracts the matched groups from the input string.
4. **StringBuilder**: A `StringBuilder` is used to construct the final human-readable string.
5. **Fractional Seconds Handling**: The fractional seconds are extracted and converted to milliseconds.

This Java code should work similarly to the provided JavaScript function.