Sure! Below is the TypeScript version of your Jest test case using `describe`:

```typescript
import { countDashes } from './your-file'; // Adjust the import path accordingly

describe('countDashes function', () => {
  it('should return 0 for an empty string', () => {
    expect(countDashes('')).toBe(0);
  });

  it('should return 1 for a single dash', () => {
    expect(countDashes('-')).toBe(1);
  });

  it('should return 2 for two dashes', () => {
    expect(countDashes('--')).toBe(2);
  });

  it('should return 3 for three dashes', () => {
    expect(countDashes('---')).toBe(3);
  });

  it('should return 4 for a string with multiple dashes', () => {
    expect(countDashes('a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z--')).toBe(4);
  });
});
```

Make sure you have the appropriate TypeScript and Jest configurations set up in your project. If you need to mock or implement the `countDashes` function, you can do so within the same file or in a separate module. Here's a simple implementation of `countDashes` in TypeScript:

```typescript
/**
 * count the number of dashes in a string
 *
 * @param {string} str - The string from which to count dash characters.
 * @returns {number} - The total count of dash characters found in the string.
 */
export function countDashes(str: string): number {
  return (str.match(/-/g) || []).length;
}
```

This implementation uses a regular expression to match all occurrences of dashes in the string and returns their count.