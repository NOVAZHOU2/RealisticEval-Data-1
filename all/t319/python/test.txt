Sure! Below is the equivalent Python unit test case using the `unittest` framework for the given JavaScript Jest test case.

### JavaScript (Jest)
```javascript
/**
 * count the number of dashes in a string
 *
 * @param {string} str - The string from which to count dash characters.
 * @returns {number} - The total count of dash characters found in the string.
 */
function countDashes(str) {
    return (str.match(/-/g) || []).length;
}

test('countDashes function', () => {
    expect(countDashes("hello-world")).toBe(1);
    expect(countDashes("--hello--world--")).toBe(4);
    expect(countDashes("no-dashes-here")).toBe(0);
});
```

### Python (unittest)
```python
import unittest

def count_dashes(str):
    return str.count('-')

class TestCountDashes(unittest.TestCase):

    def test_count_dashes(self):
        self.assertEqual(count_dashes("hello-world"), 1)
        self.assertEqual(count_dashes("--hello--world--"), 4)
        self.assertEqual(count_dashes("no-dashes-here"), 0)

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
- **JavaScript**: 
  - The `countDashes` function uses a regular expression to find all occurrences of dashes and returns their count.
  - The Jest test cases check if the function correctly counts dashes in various strings.

- **Python**:
  - The `count_dashes` function uses the `str.count()` method to find the number of dashes in the input string.
  - The `TestCountDashes` class contains a single test method `test_count_dashes`, which checks if the `count_dashes` function behaves as expected with different inputs.

To run the Python tests, save them in a file (e.g., `test_count_dashes.py`) and execute it using the command:
```sh
python -m unittest test_count_dashes.py
```