Certainly! Below is the equivalent C++ test case using Catch2 for the `countDashes` function. This function counts the number of dash characters in a given string.

First, ensure you have Catch2 installed and set up in your project. If not, you can install it via vcpkg or manually include it in your project.

Here's the C++ code:

```cpp
#include <catch2/catch.hpp>
#include <string>

/**
 * count the number of dashes in a string
 *
 * @param {std::string} str - The string from which to count dash characters.
 * @returns {size_t} - The total count of dash characters found in the string.
 */
size_t countDashes(const std::string& str) {
    size_t count = 0;
    for (char ch : str) {
        if (ch == '-') {
            ++count;
        }
    }
    return count;
}

TEST_CASE("Count Dashes", "[countDashes]") {
    REQUIRE(countDashes("") == 0);
    REQUIRE(countDashes("-") == 1);
    REQUIRE(countDashes("--") == 2);
    REQUIRE(countDashes("---") == 3);
    REQUIRE(countDashes("a-b-c-d") == 3);
    REQUIRE(countDashes("no-dashes-here") == 0);
    REQUIRE(countDashes("dashes-at-the-end-") == 1);
    REQUIRE(countDashes("-dashes-at-the-beginning") == 1);
    REQUIRE(countDashes("multiple--dashes") == 4);
    REQUIRE(countDashes("single-dash-in-between-words") == 1);
}
```

### Explanation:
1. **Include Catch2 Header**: The `#include <catch2/catch.hpp>` directive includes the Catch2 header file.
2. **Function Definition**: The `countDashes` function takes a constant reference to a `std::string` and returns a `size_t` representing the count of dash characters.
3. **Test Case**: The `TEST_CASE` macro defines a test case named "Count Dashes" with a tag `[countDashes]`.
4. **Assertions**: Each `REQUIRE` statement checks that the output of `countDashes` matches the expected result for various input strings.

Make sure to compile your tests with the appropriate flags to link against Catch2. For example, using g++:

```sh
g++ -o tests tests.cpp -lc++abi -pthread
./tests
```

This will run the tests and provide you with the results.