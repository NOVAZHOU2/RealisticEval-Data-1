Certainly! Below is the equivalent Java JUnit test case for your JavaScript Jest test code.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    /**
     * Count the number of dashes in a string.
     *
     * @param str The string from which to count dash characters.
     * @return The total count of dash characters found in the string.
     */
    public int countDashes(String str) {
        return (int) str.chars().filter(ch -> ch == '-').count();
    }

    @Test
    public void testCountDashes() {
        Tester tester = new Tester();

        // Test cases
        assertEquals(0, tester.countDashes("Hello World"));
        assertEquals(1, tester.countDashes("-Hello World"));
        assertEquals(2, tester.countDashes("--Hello World"));
        assertEquals(3, tester.countDashes("---Hello World"));
        assertEquals(4, tester.countDashes("----Hello World"));
        assertEquals(5, tester.countDashes("-----Hello World"));
        assertEquals(6, tester.countDashes("------Hello World"));
        assertEquals(7, tester.countDashes("-------Hello World"));
        assertEquals(8, tester.countDashes("--------Hello World"));
        assertEquals(9, tester.countDashes("---------Hello World"));
        assertEquals(10, tester.countDashes("----------Hello World"));
    }
}
```

### Explanation:
- **Package and Class**: The package is `org.real.temp` and the class is `Tester`.
- **Method**: The method `countDashes` counts the number of dashes (`'-'`) in a given string using Java Streams.
- **JUnit Test Case**: The `testCountDashes` method contains several test cases that verify the functionality of `countDashes`. Each test case uses `assertEquals` to ensure that the output of `countDashes` matches the expected result.

Make sure you have the necessary dependencies for JUnit in your project. If you're using Maven, add the following dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
```

If you're using Gradle, add the following dependency to your `build.gradle`:

```groovy
testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
```

This setup should help you run the JUnit tests effectively.