Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import unittest
import numpy as np

class TestTranslatePointCloud(unittest.TestCase):

    def test_simple_translation(self):
        """Test a simple translation of a single point."""
        point_cloud = np.array([[1.0, 2.0, 3.0]])
        translation_vector = np.array([1.0, 1.0, 1.0])
        expected_output = np.array([[2.0, 3.0, 4.0]])
        np.testing.assert_array_almost_equal(translate_point_cloud(point_cloud, translation_vector), expected_output)

    def test_multiple_points_translation(self):
        """Test translation of multiple points."""
        point_cloud = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])
        translation_vector = np.array([1.0, 2.0, 3.0])
        expected_output = np.array([[2.0, 4.0, 6.0], [5.0, 7.0, 9.0]])
        np.testing.assert_array_almost_equal(translate_point_cloud(point_cloud, translation_vector), expected_output)

    def test_zero_translation(self):
        """Test translation by a zero vector (should return the same point cloud)."""
        point_cloud = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])
        translation_vector = np.array([0.0, 0.0, 0.0])
        expected_output = point_cloud  # No change expected
        np.testing.assert_array_almost_equal(translate_point_cloud(point_cloud, translation_vector), expected_output)

    def test_negative_translation(self):
        """Test translation with negative values."""
        point_cloud = np.array([[1.0, 2.0, 3.0]])
        translation_vector = np.array([-1.0, -2.0, -3.0])
        expected_output = np.array([[0.0, 0.0, 0.0]])
        np.testing.assert_array_almost_equal(translate_point_cloud(point_cloud, translation_vector), expected_output)
```

### Equivalent Jest Test Suite:
```javascript
const { translatePointCloud } = require('./translatePointCloud'); // Import the function to be tested
const expect = require('expect'); // Import expect from Jest

describe('TestTranslatePointCloud', () => {
    describe('test_simple_translation', () => {
        it('should correctly translate a single point', () => {
            const pointCloud = [[1.0, 2.0, 3.0]];
            const translationVector = [1.0, 1.0, 1.0];
            const expectedOutput = [[2.0, 3.0, 4.0]];
            expect(translatePointCloud(pointCloud, translationVector)).toEqual(expectedOutput);
        });
    });

    describe('test_multiple_points_translation', () => {
        it('should correctly translate multiple points', () => {
            const pointCloud = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]];
            const translationVector = [1.0, 2.0, 3.0];
            const expectedOutput = [[2.0, 4.0, 6.0], [5.0, 7.0, 9.0]];
            expect(translatePointCloud(pointCloud, translationVector)).toEqual(expectedOutput);
        });
    });

    describe('test_zero_translation', () => {
        it('should return the same point cloud when translating by a zero vector', () => {
            const pointCloud = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]];
            const translationVector = [0.0, 0.0, 0.0];
            const expectedOutput = pointCloud;
            expect(translatePointCloud(pointCloud, translationVector)).toEqual(expectedOutput);
        });
    });

    describe('test_negative_translation', () => {
        it('should correctly translate with negative values', () => {
            const pointCloud = [[1.0, 2.0, 3.0]];
            const translationVector = [-1.0, -2.0, -3.0];
            const expectedOutput = [[0.0, 0.0, 0.0]];
            expect(translatePointCloud(pointCloud, translationVector)).toEqual(expectedOutput);
        });
    });
});
```

### Explanation:
1. **Imports**:
   - Import the `translatePointCloud` function from the file where it is defined.
   - Import `expect` from Jest for assertions.

2. **Test Suite Structure**:
   - Use `describe` blocks to group related tests.
   - Use `it` blocks to define individual test cases.

3. **Assertions**:
   - Use `expect` and `toEqual` to assert that the output matches the expected output.
   - The `toEqual` matcher is used to compare arrays deeply.

4. **Data Types**:
   - In JavaScript, arrays are used instead of NumPy arrays. This is because JavaScript does not have a direct equivalent to NumPy.

5. **Documentation**:
   - Each test case is documented using descriptive strings within the `it` blocks.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adapting to Jest's syntax and conventions.