Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have the Catch2 library included in your project. You can install it via a package manager or download it directly from the Catch2 GitHub repository.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <Eigen/Dense>
#include <stdexcept>

// Function to translate a point cloud by a given vector using Eigen library
Eigen::MatrixXd translatePointCloud(const Eigen::MatrixXd& pointCloud, const Eigen::RowVector3d& translationVector) {
    /**
     * Translate the point cloud by a given vector.
     *
     * Args:
     *     pointCloud (Eigen::MatrixXd): An M x 3 Eigen matrix representing the 3D point cloud.
     *     translationVector (Eigen::RowVector3d): A 1 x 3 Eigen row vector representing the translation vector.
     *
     * Returns:
     *     Eigen::MatrixXd: An M x 3 Eigen matrix of the translated point cloud.
     */

    // Check if translationVector is of correct shape
    if (translationVector.size() != 3) {
        throw std::invalid_argument("translationVector must be a 1D array of shape (3,)");
    }

    // Translate the point cloud by adding the translation vector to each point
    Eigen::MatrixXd translatedPointCloud = pointCloud;
    translatedPointCloud.rowwise() += translationVector;

    return translatedPointCloud;
}

TEST_CASE("TestTranslatePointCloud", "[translatePointCloud]") {
    SECTION("test_simple_translation") {
        // Test a simple translation of a single point
        Eigen::MatrixXd pointCloud(1, 3);
        pointCloud << 1.0, 2.0, 3.0;
        Eigen::RowVector3d translationVector(1.0, 1.0, 1.0);
        Eigen::MatrixXd expectedOutput(1, 3);
        expectedOutput << 2.0, 3.0, 4.0;

        REQUIRE(translatePointCloud(pointCloud, translationVector).isApprox(expectedOutput));
    }

    SECTION("test_multiple_points_translation") {
        // Test translation of multiple points
        Eigen::MatrixXd pointCloud(2, 3);
        pointCloud << 1.0, 2.0, 3.0,
                      4.0, 5.0, 6.0;
        Eigen::RowVector3d translationVector(1.0, 2.0, 3.0);
        Eigen::MatrixXd expectedOutput(2, 3);
        expectedOutput << 2.0, 4.0, 6.0,
                          5.0, 7.0, 9.0;

        REQUIRE(translatePointCloud(pointCloud, translationVector).isApprox(expectedOutput));
    }

    SECTION("test_zero_translation") {
        // Test translation by a zero vector (should return the same point cloud)
        Eigen::MatrixXd pointCloud(2, 3);
        pointCloud << 1.0, 2.0, 3.0,
                      4.0, 5.0, 6.0;
        Eigen::RowVector3d translationVector(0.0, 0.0, 0.0);
        Eigen::MatrixXd expectedOutput = pointCloud;  // No change expected

        REQUIRE(translatePointCloud(pointCloud, translationVector).isApprox(expectedOutput));
    }

    SECTION("test_negative_translation") {
        // Test translation with negative values
        Eigen::MatrixXd pointCloud(1, 3);
        pointCloud << 1.0, 2.0, 3.0;
        Eigen::RowVector3d translationVector(-1.0, -2.0, -3.0);
        Eigen::MatrixXd expectedOutput(1, 3);
        expectedOutput << 0.0, 0.0, 0.0;

        REQUIRE(translatePointCloud(pointCloud, translationVector).isApprox(expectedOutput));
    }
}

int main(int argc, char* argv[]) {
    // Run Catch2 tests
    int result = Catch::Session().run(argc, argv);
    return result;
}
```

### Explanation:
1. **Catch2 Header Inclusion**: The `#include <catch2/catch_test_macros.hpp>` header is included to use the Catch2 testing macros.
2. **Function Definition**: The `translatePointCloud` function is defined to take an `Eigen::MatrixXd` for the point cloud and an `Eigen::RowVector3d` for the translation vector.
3. **Test Cases**:
   - Each test case is defined within a `SECTION` block inside the `TEST_CASE`.
   - The `REQUIRE` macro is used to assert the correctness of the function output.
   - The `isApprox` method is used to check approximate equality of floating-point numbers.
4. **Main Function**: The `main` function runs the Catch2 tests.

This code ensures that the functionality and logic of the tests are preserved while adapting to the syntax and features of C++ and the Catch2 testing framework.