Sure! Here is the equivalent C++ code for the provided Python function. This code uses the Eigen library for handling matrices and vectors efficiently. Make sure you have the Eigen library installed and included in your project.

```cpp
#include <Eigen/Dense>
#include <stdexcept>

// Function to translate a point cloud by a given vector using Eigen library
Eigen::MatrixXd translatePointCloud(const Eigen::MatrixXd& pointCloud, const Eigen::RowVector3d& translationVector) {
    /**
     * Translate the point cloud by a given vector.
     *
     * Parameters:
     * - pointCloud: An M x 3 Eigen matrix representing the 3D point cloud.
     * - translationVector: A 1 x 3 Eigen row vector representing the translation vector.
     *
     * Returns:
     * - An M x 3 Eigen matrix of the translated point cloud.
     */

    // Check if translationVector is of correct shape
    if (translationVector.size() != 3) {
        throw std::invalid_argument("translationVector must be a 1D array of shape (3,)");
    }

    // Translate the point cloud by adding the translation vector to each point
    Eigen::MatrixXd translatedPointCloud = pointCloud;
    translatedPointCloud.rowwise() += translationVector;

    return translatedPointCloud;
}

int main() {
    // Example usage
    Eigen::MatrixXd pointCloud(4, 3);
    pointCloud << 1, 2, 3,
                  4, 5, 6,
                  7, 8, 9,
                  10, 11, 12;

    Eigen::RowVector3d translationVector(1, 2, 3);

    try {
        Eigen::MatrixXd translatedPointCloud = translatePointCloud(pointCloud, translationVector);
        std::cout << "Translated Point Cloud:\n" << translatedPointCloud << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Eigen Library**: The Eigen library is used for efficient matrix and vector operations.
2. **Function Definition**: The `translatePointCloud` function takes an `Eigen::MatrixXd` for the point cloud and an `Eigen::RowVector3d` for the translation vector.
3. **Shape Check**: The function checks if the translation vector has the correct shape (1x3).
4. **Translation**: The function translates the point cloud by adding the translation vector to each row of the point cloud matrix.
5. **Example Usage**: The `main` function demonstrates how to use the `translatePointCloud` function with example data.

Make sure to include the Eigen library in your project and compile the code with the appropriate flags.