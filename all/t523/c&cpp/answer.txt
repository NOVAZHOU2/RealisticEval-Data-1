Here is a simple C++ version using Eigen library for handling matrices and vectors:

```cpp
#include <Eigen/Dense>
#include <vector>

std::vector<Eigen::Vector3d> translatePointCloud(const std::vector<Eigen::Vector3d>& pointCloud, const Eigen::Vector3d& translationVector) {
    std::vector<Eigen::Vector3d> translatedPointCloud;
    for (const auto& point : pointCloud) {
        translatedPointCloud.push_back(point + translationVector);
    }
    return translatedPointCloud;
}
```

And here's how you can call this function in C++:

```cpp
int main() {
    std::vector<Eigen::Vector3d> pointCloud = {{1,2,3}, {4,5,6}, {7,8,9}};
    Eigen::Vector3d translationVector = {0, 0, 1};

    std::vector<Eigen::Vector3d> translatedPointCloud = translatePointCloud(pointCloud, translationVector);

    // print translated points
    for (const auto& point : translatedPointCloud) {
        std::cout << "Point: " << point.transpose() << std::endl;
    }

    return 0;
}
```
This code does exactly what your Python code does - it translates each point in a point cloud by a specified vector.

Please note that in C++, unlike Python, we have to manually manage memory allocation and deallocation. Also, error checking is more explicit and necessary. In this case, I've assumed that all input parameters are valid and no error checking has been performed.

The Eigen library provides a lot of useful features like matrix and vector operations which makes it easier to work with them in C++. If not already installed, you need to install Eigen library to use it in your project.