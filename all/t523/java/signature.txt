Here is the Java code with the same functionality and comments:

```java
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;

public class PointCloudOperations {

    /**
     * Translates the point cloud by a given vector.
     *
     * @param pointCloud A N x 3 Array2DRowRealMatrix representing the 3D point cloud.
     * @param translationVector A Vector3D representing the translation vector.
     * @return An Array2DRowRealMatrix of the translated point cloud.
     */
    public static Array2DRowRealMatrix translatePointCloud(Array2DRowRealMatrix pointCloud, Vector3D translationVector) {
        int numRows = pointCloud.getRowDimension();
        
        Array2DRowRealMatrix translatedPointCloud = new Array2DRowRealMatrix(numRows, 3);
        
        for(int i=0; i<numRows; i++) {
            double[] point = pointCloud.getRow(i);
            
            double newX = point[0] + translationVector.getX();
            double newY = point[1] + translationVector.getY();
            double newZ = point[2] + translationVector.getZ();

            translatedPointCloud.setEntry(i, 0, newX);
            translatedPointCloud.setEntry(i, 1, newY);
            translatedPointCloud.setEntry(i, 2, newZ);
        }
        
        return translatedPointCloud;
    }
}
```
This Java code uses Apache Commons Math library to handle 3D vectors and matrices. If you don't have this library in your project, add it via Maven dependency:

```xml
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-math3</artifactId>
    <version>3.6.1</version>
</dependency>
```