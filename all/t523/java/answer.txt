Here's how you can translate your Python code into Java. Note that Java does not have native support for NumPy arrays like Python does, so we'll use the Apache Commons Math library instead:

```java
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;

public class Answer {
    
    public static Array2DRowRealMatrix translatePointCloud(Array2DRowRealMatrix pointCloud, Vector3D translationVector) {
        
        int rows = pointCloud.getRowDimension();
        Array2DRowRealMatrix result = new Array2DRowRealMatrix(rows, 3);
        
        for(int i=0; i<rows; i++) {
            double[] row = pointCloud.getRow(i);
            
            // Adding translation vector to each point in the point cloud
            double[] newRow = {row[0] + translationVector.getX(), 
                               row[1] + translationVector.getY(),
                               row[2] + translationVector.getZ()};
            
            result.setRow(i, newRow);
        }
        
        return result;
    }
}
```

In this Java code, `Array2DRowRealMatrix` is used to represent the point cloud and `Vector3D` from Apache Commons Math library represents the translation vector. The method `translatePointCloud` takes a point cloud and a translation vector as input and returns a new point cloud after translating all points by the given vector. 

Before running this code, make sure to include Apache Commons Math library in your project dependencies. If you're using Maven, add the following dependency to your pom.xml file:

```xml
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-math3</artifactId>
    <version>3.6.1</version>
</dependency>
```