Certainly! Below is the equivalent TypeScript code for the given Python function. The TypeScript version will maintain the same functionality, structure, and logic, with appropriate adjustments for TypeScript's static type system and syntax:

```typescript
function spiralOrder(matrix: number[][]): number[] {
    /**
     * Given a 2D matrix, return all elements of the matrix in spiral order.
     *
     * @param matrix - A 2D array of numbers.
     * @returns An array of numbers representing the matrix elements in spiral order.
     */
    if (!matrix.length || !matrix[0].length) {
        return [];
    }

    const rows = matrix.length;
    const cols = matrix[0].length;
    let top = 0;
    let bottom = rows - 1;
    let left = 0;
    let right = cols - 1;
    const result: number[] = [];

    while (top <= bottom && left <= right) {
        // Traverse Right
        for (let col = left; col <= right; col++) {
            result.push(matrix[top][col]);
        }
        top++;

        // Traverse Down
        for (let row = top; row <= bottom; row++) {
            result.push(matrix[row][right]);
        }
        right--;

        // Traverse Left
        if (top <= bottom) {
            for (let col = right; col >= left; col--) {
                result.push(matrix[bottom][col]);
            }
            bottom--;
        }

        // Traverse Up
        if (left <= right) {
            for (let row = bottom; row >= top; row--) {
                result.push(matrix[row][left]);
            }
            left++;
        }
    }

    return result;
}

// Example usage
const matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];

console.log(spiralOrder(matrix)); // Output: [1, 2, 3, 6, 9, 8, 7, 4, 5]
```

### Explanation:
- **Type Annotations**: In TypeScript, we use `number[][]` to represent a 2D array of numbers.
- **Function Definition**: The function `spiralOrder` is defined with the correct type annotations for the input matrix and the output array.
- **Condition Checks**: The initial checks for empty matrices are translated directly.
- **Loop Structure**: The loops for traversing the matrix in spiral order are translated to TypeScript syntax.
- **Variable Initialization**: Variables like `rows`, `cols`, `top`, `bottom`, `left`, `right`, and `result` are initialized similarly.
- **Example Usage**: An example usage of the function is provided at the end to demonstrate how it can be called.