Certainly! Below is the equivalent TypeScript code for the provided Python function, along with a Jest test suite to verify its correctness. The TypeScript code includes proper type annotations and JSDoc comments, and the Jest test suite uses appropriate assertions to match the functionality of the Python `unittest` framework.

### TypeScript Code for `spiralOrder` Function

```typescript
/**
 * Given a 2D matrix, return all elements of the matrix in spiral order.
 * 
 * @param matrix - A 2D array of numbers.
 * @returns An array of numbers representing the matrix elements in spiral order.
 */
function spiralOrder(matrix: number[][]): number[] {
    if (!matrix.length || !matrix[0].length) {
        return [];
    }

    const rows = matrix.length;
    const cols = matrix[0].length;
    let top = 0;
    let bottom = rows - 1;
    let left = 0;
    let right = cols - 1;
    const result: number[] = [];

    while (top <= bottom && left <= right) {
        // Traverse Right
        for (let col = left; col <= right; col++) {
            result.push(matrix[top][col]);
        }
        top++;

        // Traverse Down
        for (let row = top; row <= bottom; row++) {
            result.push(matrix[row][right]);
        }
        right--;

        // Traverse Left
        if (top <= bottom) {
            for (let col = right; col >= left; col--) {
                result.push(matrix[bottom][col]);
            }
            bottom--;
        }

        // Traverse Up
        if (left <= right) {
            for (let row = bottom; row >= top; row--) {
                result.push(matrix[row][left]);
            }
            left++;
        }
    }

    return result;
}

export default spiralOrder;
```

### Jest Test Suite for `spiralOrder` Function

To write the Jest test suite, we need to create a separate file, typically named `spiralOrder.test.ts`. This file will contain the test cases to verify the correctness of the `spiralOrder` function.

```typescript
import spiralOrder from './spiralOrder'; // Import the spiralOrder function

describe('spiralOrder', () => {
    it('returns an empty array for an empty matrix', () => {
        expect(spiralOrder([])).toEqual([]);
    });

    it('returns an empty array for a matrix with empty rows', () => {
        expect(spiralOrder([[], []])).toEqual([]);
    });

    it('returns an array in spiral order for a 1x1 matrix', () => {
        expect(spiralOrder([[1]])).toEqual([1]);
    });

    it('returns an array in spiral order for a 2x2 matrix', () => {
        expect(spiralOrder([[1, 2], [3, 4]])).toEqual([1, 2, 4, 3]);
    });

    it('returns an array in spiral order for a 3x3 matrix', () => {
        expect(spiralOrder([[1, 2, 3], [4, 5, 6], [7, 8, 9]])).toEqual([1, 2, 3, 6, 9, 8, 7, 4, 5]);
    });

    it('returns an array in spiral order for a 3x4 matrix', () => {
        expect(spiralOrder([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])).toEqual([1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]);
    });
});
```

### Explanation:
1. **Function Definition**:
   - The `spiralOrder` function is defined with proper TypeScript type annotations and JSDoc comments.

2. **Test Suite**:
   - The Jest test suite uses `describe` and `it` blocks to organize and describe the test cases.
   - Each test case uses `expect` with various inputs to assert the expected output.

3. **Import Statement**:
   - The `spiralOrder` function is imported at the beginning of the test file.

By following these steps, you can ensure that the TypeScript function and its test suite accurately reflect the functionality and logic of the original Python code, while adhering to TypeScript and Jest conventions.