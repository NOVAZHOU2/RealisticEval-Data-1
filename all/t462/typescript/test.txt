Certainly! Below is the equivalent TypeScript test class using Jest. The provided Python unittest class will be converted to a Jest test suite, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included.

### TypeScript Code with Jest Tests

```typescript
import { spiralOrder } from './spiralOrder'; // Import the spiralOrder function

describe('Test Spiral Order', () => {
    it('should handle an empty matrix', () => {
        expect(spiralOrder([])).toEqual([]);
    });

    it('should handle a single row matrix', () => {
        expect(spiralOrder([[1, 2, 3]])).toEqual([1, 2, 3]);
    });

    it('should handle a single column matrix', () => {
        expect(spiralOrder([[1], [2], [3]])).toEqual([1, 2, 3]);
    });

    it('should handle a square matrix', () => {
        expect(spiralOrder([
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ])).toEqual([1, 2, 3, 6, 9, 8, 7, 4, 5]);
    });

    it('should handle a rectangular matrix', () => {
        expect(spiralOrder([
            [1, 2, 3, 4],
            [5, 6, 7, 8],
            [9, 10, 11, 12]
        ])).toEqual([1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]);
    });
});
```

### Explanation:
1. **Import Statement**: The `spiralOrder` function is imported from the file `spiralOrder.ts`.
2. **Describe Block**: The `describe` block is used to group the test cases under a descriptive name.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Expect Assertions**: The `expect` function is used with `toEqual` to check the equality of the expected and actual results.
5. **Test Cases**:
   - `test_empty_matrix`: Tests an empty matrix.
   - `test_single_row_matrix`: Tests a single-row matrix.
   - `test_single_column_matrix`: Tests a single-column matrix.
   - `test_square_matrix`: Tests a square matrix.
   - `test_rectangle_matrix`: Tests a rectangular matrix.

### Example `spiralOrder.ts` File
Here is the `spiralOrder.ts` file that contains the `spiralOrder` function:

```typescript
/**
 * Given a 2D matrix, return all elements of the matrix in spiral order.
 * 
 * @param matrix - A 2D array of numbers.
 * @returns An array of numbers representing the matrix elements in spiral order.
 */
function spiralOrder(matrix: number[][]): number[] {
    if (!matrix.length || !matrix[0].length) {
        return [];
    }

    const rows = matrix.length;
    const cols = matrix[0].length;
    let top = 0;
    let bottom = rows - 1;
    let left = 0;
    let right = cols - 1;
    const result: number[] = [];

    while (top <= bottom && left <= right) {
        // Traverse Right
        for (let col = left; col <= right; col++) {
            result.push(matrix[top][col]);
        }
        top++;

        // Traverse Down
        for (let row = top; row <= bottom; row++) {
            result.push(matrix[row][right]);
        }
        right--;

        // Traverse Left
        if (top <= bottom) {
            for (let col = right; col >= left; col--) {
                result.push(matrix[bottom][col]);
            }
            bottom--;
        }

        // Traverse Up
        if (left <= right) {
            for (let row = bottom; row >= top; row--) {
                result.push(matrix[row][left]);
            }
            left++;
        }
    }

    return result;
}

export { spiralOrder };
```

### Running the Tests
To run the Jest tests, you can use the following command in your project directory:

```sh
npm test
```

This setup ensures that the functionality and logic of the tests are preserved, and the necessary type annotations and Jest assertions are included.