Certainly! Below is the equivalent TypeScript code for the given Python function, including appropriate JSDoc-style comments and type annotations:

```typescript
import { number } from "prop-types";

/**
 * Given a 2D matrix, return all elements of the matrix in spiral order.
 * 
 * @param matrix - A 2D array of numbers.
 * @returns An array of numbers representing the matrix elements in spiral order.
 */
function spiralOrder(matrix: number[][]): number[] {
    if (!matrix.length || !matrix[0].length) {
        return [];
    }

    const rows = matrix.length;
    const cols = matrix[0].length;
    let top = 0;
    let bottom = rows - 1;
    let left = 0;
    let right = cols - 1;
    const result: number[] = [];

    while (top <= bottom && left <= right) {
        // Traverse Right
        for (let col = left; col <= right; col++) {
            result.push(matrix[top][col]);
        }
        top++;

        // Traverse Down
        for (let row = top; row <= bottom; row++) {
            result.push(matrix[row][right]);
        }
        right--;

        // Traverse Left
        if (top <= bottom) {
            for (let col = right; col >= left; col--) {
                result.push(matrix[bottom][col]);
            }
            bottom--;
        }

        // Traverse Up
        if (left <= right) {
            for (let row = bottom; row >= top; row--) {
                result.push(matrix[row][left]);
            }
            left++;
        }
    }

    return result;
}
```

### Explanation:
1. **Function Signature**:
   - The function signature `spiralOrder(matrix: number[][]): number[]` uses TypeScript type annotations to specify the input and output types.
   
2. **JSDoc Comments**:
   - The JSDoc comments provide detailed documentation for the function, its parameters, and its return value.
   
3. **Type Annotations**:
   - The parameter `matrix` is annotated with `number[][]` to indicate it is a 2D array of numbers.
   - The return type `number[]` indicates that the function returns an array of numbers.

4. **Variable Declarations**:
   - All variables are declared with the `let` keyword, and their types are inferred based on their initial values.

5. **Logic**:
   - The logic within the function remains the same, ensuring that the spiral order traversal works correctly.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and best practices.