Certainly! Below is the equivalent C++ code for the given Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <vector>

// Function to return all elements of a 2D matrix in spiral order
std::vector<int> spiralOrder(const std::vector<std::vector<int>>& matrix) {
    /*
     * Given a 2D matrix, return all elements of the matrix in spiral order.
     *
     * Args:
     *     matrix (const std::vector<std::vector<int>>&): A 2D vector of integers.
     *
     * Returns:
     *     std::vector<int>: A vector of integers representing the matrix elements in spiral order.
     */

    if (matrix.empty() || matrix[0].empty()) {
        return {};
    }

    int rows = matrix.size();
    int cols = matrix[0].size();
    int top = 0, bottom = rows - 1;
    int left = 0, right = cols - 1;
    std::vector<int> result;

    while (top <= bottom && left <= right) {
        // Traverse Right
        for (int col = left; col <= right; ++col) {
            result.push_back(matrix[top][col]);
        }
        top++;

        // Traverse Down
        for (int row = top; row <= bottom; ++row) {
            result.push_back(matrix[row][right]);
        }
        right--;

        // Traverse Left
        if (top <= bottom) {
            for (int col = right; col >= left; --col) {
                result.push_back(matrix[bottom][col]);
            }
            bottom--;
        }

        // Traverse Up
        if (left <= right) {
            for (int row = bottom; row >= top; --row) {
                result.push_back(matrix[row][left]);
            }
            left++;
        }
    }

    return result;
}

int main() {
    std::vector<std::vector<int>> matrix = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    std::vector<int> result = spiralOrder(matrix);

    for (int num : result) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `spiral_order` is translated to `spiralOrder` in C++.
   - The argument `matrix` is a 2D vector of integers (`std::vector<std::vector<int>>`).

2. **Documentation Comments**:
   - The Python docstring is translated into a multi-line comment block using `/* ... */`.
   - Single-line comments are used for inline explanations within the function.

3. **Function Body**:
   - The function checks if the matrix is empty or has no columns.
   - It initializes variables for rows, columns, and boundaries (`top`, `bottom`, `left`, `right`).
   - The traversal loop iterates over the matrix in a spiral order, appending elements to the `result` vector.

4. **Main Function**:
   - A sample 2D matrix is defined.
   - The `spiralOrder` function is called with the matrix.
   - The resulting vector is printed to demonstrate the functionality.

This code preserves the original purpose and structure of the Python code while adapting it to C++ syntax and conventions.