Certainly! Below is the equivalent C++ code for the given Python function, including the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <vector>

// Given a 2D matrix, return all elements of the matrix in spiral order.
std::vector<int> spiralOrder(const std::vector<std::vector<int>>& matrix) {
    // Args:
    //     matrix (std::vector<std::vector<int>>): A 2D vector of integers.
    //
    // Returns:
    //     std::vector<int>: A vector of integers representing the matrix elements in spiral order.

    if (matrix.empty() || matrix[0].empty()) {
        return {};
    }

    int rows = matrix.size();
    int cols = matrix[0].size();
    int top = 0, bottom = rows - 1;
    int left = 0, right = cols - 1;
    std::vector<int> result;

    while (top <= bottom && left <= right) {
        // Traverse Right
        for (int col = left; col <= right; ++col) {
            result.push_back(matrix[top][col]);
        }
        top++;

        // Traverse Down
        for (int row = top; row <= bottom; ++row) {
            result.push_back(matrix[row][right]);
        }
        right--;

        // Traverse Left
        if (top <= bottom) {
            for (int col = right; col >= left; --col) {
                result.push_back(matrix[bottom][col]);
            }
            bottom--;
        }

        // Traverse Up
        if (left <= right) {
            for (int row = bottom; row >= top; --row) {
                result.push_back(matrix[row][left]);
            }
            left++;
        }
    }

    return result;
}

int main() {
    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    std::vector<int> result = spiralOrder(matrix);

    for (int num : result) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `spiral_order` is translated to `spiralOrder`.
   - The Python type annotation `List[List[int]]` is translated to `std::vector<std::vector<int>>`.
   - The Python return type `List[int]` is translated to `std::vector<int>`.

2. **Comments and Documentation**:
   - The Python docstring is translated into C++ comments using `//` for single-line comments.
   - Multi-line comments are enclosed in `/* */`.

3. **Function Body**:
   - The logic and structure of the function remain the same.
   - Boundary checks and traversal logic are preserved.

4. **Main Function**:
   - A sample matrix is defined and passed to `spiralOrder`.
   - The result is printed to demonstrate the functionality.

This translation ensures that the C++ code preserves the original purpose and structure of the Python code, adhering to C++ standards and best practices.