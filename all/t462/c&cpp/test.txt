Certainly! Below is the equivalent C++ code using the Catch2 testing framework to convert the provided Python unittest test class into a C++ test class. This includes the function definition and the corresponding test cases.

### C++ Code with Catch2 Testing Framework

#### 1. Include Necessary Headers

First, include the necessary headers for Catch2 and standard libraries.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>

// Given a 2D matrix, return all elements of the matrix in spiral order.
std::vector<int> spiralOrder(const std::vector<std::vector<int>>& matrix) {
    if (matrix.empty() || matrix[0].empty()) {
        return {};
    }

    int rows = matrix.size();
    int cols = matrix[0].size();
    int top = 0, bottom = rows - 1;
    int left = 0, right = cols - 1;
    std::vector<int> result;

    while (top <= bottom && left <= right) {
        // Traverse Right
        for (int col = left; col <= right; ++col) {
            result.push_back(matrix[top][col]);
        }
        top++;

        // Traverse Down
        for (int row = top; row <= bottom; ++row) {
            result.push_back(matrix[row][right]);
        }
        right--;

        // Traverse Left
        if (top <= bottom) {
            for (int col = right; col >= left; --col) {
                result.push_back(matrix[bottom][col]);
            }
            bottom--;
        }

        // Traverse Up
        if (left <= right) {
            for (int row = bottom; row >= top; --row) {
                result.push_back(matrix[row][left]);
            }
            left++;
        }
    }

    return result;
}

TEST_CASE("Spiral Order Test Cases", "[spiralOrder]") {
    SECTION("Empty Matrix") {
        std::vector<std::vector<int>> matrix = {};
        std::vector<int> expected = {};
        REQUIRE(spiralOrder(matrix) == expected);
    }

    SECTION("Single Row Matrix") {
        std::vector<std::vector<int>> matrix = {{1, 2, 3}};
        std::vector<int> expected = {1, 2, 3};
        REQUIRE(spiralOrder(matrix) == expected);
    }

    SECTION("Single Column Matrix") {
        std::vector<std::vector<int>> matrix = {{1}, {2}, {3}};
        std::vector<int> expected = {1, 2, 3};
        REQUIRE(spiralOrder(matrix) == expected);
    }

    SECTION("Square Matrix") {
        std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        std::vector<int> expected = {1, 2, 3, 6, 9, 8, 7, 4, 5};
        REQUIRE(spiralOrder(matrix) == expected);
    }

    SECTION("Rectangular Matrix") {
        std::vector<std::vector<int>> matrix = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};
        std::vector<int> expected = {1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7};
        REQUIRE(spiralOrder(matrix) == expected);
    }
}
```

### Explanation:
1. **Function Definition**:
   - The `spiralOrder` function is defined to take a 2D vector of integers (`std::vector<std::vector<int>>`) and return a 1D vector of integers (`std::vector<int>`).

2. **Catch2 Test Class**:
   - The `TEST_CASE` macro defines a test case named "Spiral Order Test Cases".
   - Each `SECTION` within the test case defines a specific scenario to test the `spiralOrder` function.
   - The `REQUIRE` macro is used to assert that the output of `spiralOrder` matches the expected result.

3. **Test Scenarios**:
   - **Empty Matrix**: Tests an empty matrix.
   - **Single Row Matrix**: Tests a matrix with a single row.
   - **Single Column Matrix**: Tests a matrix with a single column.
   - **Square Matrix**: Tests a square matrix.
   - **Rectangular Matrix**: Tests a rectangular matrix.

### Running the Tests
To run the tests, you need to have Catch2 installed. You can compile and run the tests using a C++ compiler:

```sh
# Compile the tests
g++ -std=c++17 -o spiral_order_test spiral_order_test.cpp -lcatch2

# Run the tests
./spiral_order_test
```

This setup ensures that the functionality and logic of the tests are preserved, and the assertions are appropriately handled using Catch2.