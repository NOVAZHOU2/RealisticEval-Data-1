Sure! Below is the equivalent C++ code for the given Python function `spiral_order`.

```cpp
#include <vector>
#include <iostream>

std::vector<int> spiralOrder(const std::vector<std::vector<int>>& matrix) {
    std::vector<int> result;
    if (matrix.empty() || matrix[0].empty()) {
        return result;
    }

    int rows = matrix.size();
    int cols = matrix[0].size();
    int top = 0, bottom = rows - 1, left = 0, right = cols - 1;

    while (top <= bottom && left <= right) {
        // Traverse from left to right along the top row
        for (int i = left; i <= right; ++i) {
            result.push_back(matrix[top][i]);
        }
        top++;

        // Traverse downwards along the right column
        for (int i = top; i <= bottom; ++i) {
            result.push_back(matrix[i][right]);
        }
        right--;

        // Traverse from right to left along the bottom row, if still within bounds
        if (top <= bottom) {
            for (int i = right; i >= left; --i) {
                result.push_back(matrix[bottom][i]);
            }
            bottom--;
        }

        // Traverse upwards along the left column, if still within bounds
        if (left <= right) {
            for (int i = bottom; i >= top; --i) {
                result.push_back(matrix[i][left]);
            }
            left++;
        }
    }

    return result;
}

// Example usage
int main() {
    std::vector<std::vector<int>> matrix = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    std::vector<int> result = spiralOrder(matrix);

    for (int num : result) {
        std::cout << num << " ";
    }

    return 0;
}
```

### Explanation:
- The function `spiralOrder` takes a 2D vector `matrix` and returns a 1D vector containing the elements of the matrix in spiral order.
- It initializes four pointers (`top`, `bottom`, `left`, `right`) to keep track of the current boundaries of the spiral traversal.
- The while loop continues until the boundaries overlap, ensuring that each element is visited exactly once.
- Inside the loop, it traverses the matrix in four steps:
  1. From left to right along the top row.
  2. Downwards along the right column.
  3. From right to left along the bottom row (if there are more rows remaining).
  4. Upwards along the left column (if there are more columns remaining).
- After each traversal, it adjusts the corresponding boundary pointer.
- Finally, the example usage demonstrates how to call the `spiralOrder` function and print the result.