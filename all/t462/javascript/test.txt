Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic of the tests, ensuring that all assertions are appropriately mapped to Jest equivalents.

### Python Unittest Code:
```python
import unittest


class TestSpiralOrder(unittest.TestCase):
    def test_empty_matrix(self):
        self.assertEqual(spiral_order([]), [])

    def test_single_row_matrix(self):
        self.assertEqual(spiral_order([[1, 2, 3]]), [1, 2, 3])

    def test_single_column_matrix(self):
        self.assertEqual(spiral_order([[1], [2], [3]]), [1, 2, 3])

    def test_square_matrix(self):
        self.assertEqual(spiral_order([
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ]), [1, 2, 3, 6, 9, 8, 7, 4, 5])

    def test_rectangle_matrix(self):
        self.assertEqual(spiral_order([
            [1, 2, 3, 4],
            [5, 6, 7, 8],
            [9, 10, 11, 12]
        ]), [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7])
```

### Equivalent Jest Test Suite:
```javascript
const spiralOrder = require('./spiralOrder'); // Import the spiralOrder function

describe('Test Spiral Order', () => {
    it('should handle an empty matrix', () => {
        expect(spiralOrder([])).toEqual([]);
    });

    it('should handle a single row matrix', () => {
        expect(spiralOrder([[1, 2, 3]])).toEqual([1, 2, 3]);
    });

    it('should handle a single column matrix', () => {
        expect(spiralOrder([[1], [2], [3]])).toEqual([1, 2, 3]);
    });

    it('should handle a square matrix', () => {
        expect(spiralOrder([
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ])).toEqual([1, 2, 3, 6, 9, 8, 7, 4, 5]);
    });

    it('should handle a rectangle matrix', () => {
        expect(spiralOrder([
            [1, 2, 3, 4],
            [5, 6, 7, 8],
            [9, 10, 11, 12]
        ])).toEqual([1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]);
    });
});
```

### Explanation:
1. **Import Statement**: The `spiralOrder` function is imported at the beginning of the test file. This assumes that the `spiralOrder` function is defined in a separate file named `spiralOrder.js`.

2. **Describe Block**: The `describe` block is used to group the test cases under a descriptive name (`'Test Spiral Order'`).

3. **It Blocks**: Each `it` block represents a specific test case. The description of each test case is provided as the first argument to `it`.

4. **Expect Assertions**: The `expect` function is used to assert the expected outcome of the `spiralOrder` function call. The `toEqual` matcher is used to check if the actual result matches the expected result.

By following this structure, the Jest test suite ensures that the functionality and logic of the tests are maintained, and all assertions are appropriately mapped to Jest equivalents.