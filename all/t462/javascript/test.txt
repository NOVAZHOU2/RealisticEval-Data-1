Sure, here is how you can translate the given Python unittest test class into a JavaScript test case using Jest:

```javascript
const { spiralOrder } = require('./spiralMatrix'); // Assuming your function is in a file named spiralMatrix.js

describe('spiralOrder', () => {
  it('should return the elements of a 2D matrix in spiral order', () => {
    const matrix = [
      [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9]
    ];
    expect(spiralOrder(matrix)).toEqual([1, 2, 3, 6, 9, 8, 7, 4, 5]);
  });

  it('should handle an empty matrix', () => {
    const matrix = [];
    expect(spiralOrder(matrix)).toEqual([]);
  });

  it('should handle a single row matrix', () => {
    const matrix = [[1, 2, 3]];
    expect(spiralOrder(matrix)).toEqual([1, 2, 3]);
  });

  it('should handle a single column matrix', () => {
    const matrix = [
      [1],
      [2],
      [3]
    ];
    expect(spiralOrder(matrix)).toEqual([1, 2, 3]);
  });
});
```

Make sure that the `spiralOrder` function is defined and exported correctly in your `spiralMatrix.js` file. Here's an example of what that might look like:

```javascript
function spiralOrder(matrix) {
  if (matrix.length === 0) return [];

  let result = [];
  let top = 0;
  let bottom = matrix.length - 1;
  let left = 0;
  let right = matrix[0].length - 1;

  while (top <= bottom && left <= right) {
    for (let i = left; i <= right; i++) {
      result.push(matrix[top][i]);
    }
    top++;

    for (let i = top; i <= bottom; i++) {
      result.push(matrix[i][right]);
    }
    right--;

    if (top <= bottom) {
      for (let i = right; i >= left; i--) {
        result.push(matrix[bottom][i]);
      }
      bottom--;
    }

    if (left <= right) {
      for (let i = bottom; i >= top; i--) {
        result.push(matrix[i][left]);
      }
      left++;
    }
  }

  return result;
}

module.exports = { spiralOrder };
```

This JavaScript code uses Jest's testing framework to define a suite of tests for the `spiralOrder` function. Each test case checks a different scenario to ensure the function behaves as expected.