Certainly! Here is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Given a 2D matrix, return all elements of the matrix in spiral order.
 * 
 * @param {number[][]} matrix - A 2D array of integers.
 * @returns {number[]} - An array of integers representing the matrix elements in spiral order.
 */
function spiralOrder(matrix) {
    if (!matrix || !matrix.length || !matrix[0].length) {
        return [];
    }

    const rows = matrix.length;
    const cols = matrix[0].length;
    let top = 0, bottom = rows - 1;
    let left = 0, right = cols - 1;
    const result = [];

    while (top <= bottom && left <= right) {
        // Traverse Right
        for (let col = left; col <= right; col++) {
            result.push(matrix[top][col]);
        }
        top++;

        // Traverse Down
        for (let row = top; row <= bottom; row++) {
            result.push(matrix[row][right]);
        }
        right--;

        // Traverse Left
        if (top <= bottom) {
            for (let col = right; col >= left; col--) {
                result.push(matrix[bottom][col]);
            }
            bottom--;
        }

        // Traverse Up
        if (left <= right) {
            for (let row = bottom; row >= top; row--) {
                result.push(matrix[row][left]);
            }
            left++;
        }
    }

    return result;
}
```

### Explanation:
1. **Function Signature**: The Python function `spiral_order` is converted to the JavaScript function `spiralOrder`.
2. **JSDoc Comments**: The Python docstring is rewritten using JSDoc format to provide clear documentation for the function parameters and return type.
3. **Function Body**: The logic remains the same, ensuring that the functionality is preserved.

This JavaScript code will perform the same operations as the original Python code, traversing the given 2D matrix in a spiral order and returning the elements in an array.