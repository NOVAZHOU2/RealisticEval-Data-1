Certainly! Below is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The test cases are converted to use JUnit annotations and assertions, ensuring that the functionality and logic of the tests are preserved.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

/**
 * Test class for verifying the correctness of the spiralOrder method.
 */
public class Tester {

    /**
     * Tests the spiralOrder method with an empty matrix.
     */
    @Test
    public void testEmptyMatrix() {
        int[][] matrix = {};
        List<Integer> expected = new ArrayList<>();
        List<Integer> actual = spiralOrder(matrix);
        assertEquals(expected, actual);
    }

    /**
     * Tests the spiralOrder method with a single-row matrix.
     */
    @Test
    public void testSingleRowMatrix() {
        int[][] matrix = {{1, 2, 3}};
        List<Integer> expected = new ArrayList<>();
        expected.add(1);
        expected.add(2);
        expected.add(3);
        List<Integer> actual = spiralOrder(matrix);
        assertEquals(expected, actual);
    }

    /**
     * Tests the spiralOrder method with a single-column matrix.
     */
    @Test
    public void testSingleColumnMatrix() {
        int[][] matrix = {{1}, {2}, {3}};
        List<Integer> expected = new ArrayList<>();
        expected.add(1);
        expected.add(2);
        expected.add(3);
        List<Integer> actual = spiralOrder(matrix);
        assertEquals(expected, actual);
    }

    /**
     * Tests the spiralOrder method with a square matrix.
     */
    @Test
    public void testSquareMatrix() {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        List<Integer> expected = new ArrayList<>();
        expected.add(1);
        expected.add(2);
        expected.add(3);
        expected.add(6);
        expected.add(9);
        expected.add(8);
        expected.add(7);
        expected.add(4);
        expected.add(5);
        List<Integer> actual = spiralOrder(matrix);
        assertEquals(expected, actual);
    }

    /**
     * Tests the spiralOrder method with a rectangular matrix.
     */
    @Test
    public void testRectangleMatrix() {
        int[][] matrix = {
            {1, 2, 3, 4},
            {5, 6, 7, 8},
            {9, 10, 11, 12}
        };
        List<Integer> expected = new ArrayList<>();
        expected.add(1);
        expected.add(2);
        expected.add(3);
        expected.add(4);
        expected.add(8);
        expected.add(12);
        expected.add(11);
        expected.add(10);
        expected.add(9);
        expected.add(5);
        expected.add(6);
        expected.add(7);
        List<Integer> actual = spiralOrder(matrix);
        assertEquals(expected, actual);
    }

    // Spiral order method implementation
    private List<Integer> spiralOrder(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return new ArrayList<>();
        }

        int rows = matrix.length;
        int cols = matrix[0].length;
        int top = 0, bottom = rows - 1;
        int left = 0, right = cols - 1;
        List<Integer> result = new ArrayList<>();

        while (top <= bottom && left <= right) {
            // Traverse Right
            for (int col = left; col <= right; col++) {
                result.add(matrix[top][col]);
            }
            top++;

            // Traverse Down
            for (int row = top; row <= bottom; row++) {
                result.add(matrix[row][right]);
            }
            right--;

            // Traverse Left
            if (top <= bottom) {
                for (int col = right; col >= left; col--) {
                    result.add(matrix[bottom][col]);
                }
                bottom--;
            }

            // Traverse Up
            if (left <= right) {
                for (int row = bottom; row >= top; row--) {
                    result.add(matrix[row][left]);
                }
                left++;
            }
        }

        return result;
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Imports**: The necessary imports are included at the beginning (`org.junit.Test` and `org.junit.Assert.assertEquals`).
3. **Class Definition**: The test class `Tester` is defined.
4. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.
5. **Javadoc Comments**: Each test method includes Javadoc comments that describe the purpose of the test.
6. **Assertion Methods**: The `assertEquals` method from JUnit is used to verify the expected results.
7. **Test Cases**:
   - `testEmptyMatrix`: Tests the spiral order method with an empty matrix.
   - `testSingleRowMatrix`: Tests the spiral order method with a single-row matrix.
   - `testSingleColumnMatrix`: Tests the spiral order method with a single-column matrix.
   - `testSquareMatrix`: Tests the spiral order method with a square matrix.
   - `testRectangleMatrix`: Tests the spiral order method with a rectangular matrix.
8. **Spiral Order Method Implementation**: The `spiralOrder` method is implemented within the test class to ensure it is accessible for testing.

This Java code preserves the functionality and structure of the original Python test cases while adhering to JUnit's syntax and conventions.