Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It will include the necessary JUnit annotations and assertions to ensure the functionality and logic of the tests are preserved.

### Java Test Class

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.Arrays;
import java.util.List;

public class Tester {

    private static final Answer answer = new Answer();

    /**
     * Test case for an empty matrix.
     */
    @Test
    public void testSpiralOrderEmpty() {
        int[][] matrix = {};
        List<Integer> expected = Arrays.asList();
        List<Integer> actual = answer.spiralOrder(matrix);
        assertEquals(expected, actual);
    }

    /**
     * Test case for a single-element matrix.
     */
    @Test
    public void testSpiralOrderSingleElement() {
        int[][] matrix = {{1}};
        List<Integer> expected = Arrays.asList(1);
        List<Integer> actual = answer.spiralOrder(matrix);
        assertEquals(expected, actual);
    }

    /**
     * Test case for a 2x2 matrix.
     */
    @Test
    public void testSpiralOrder2x2() {
        int[][] matrix = {
            {1, 2},
            {3, 4}
        };
        List<Integer> expected = Arrays.asList(1, 2, 4, 3);
        List<Integer> actual = answer.spiralOrder(matrix);
        assertEquals(expected, actual);
    }

    /**
     * Test case for a 3x3 matrix.
     */
    @Test
    public void testSpiralOrder3x3() {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        List<Integer> expected = Arrays.asList(1, 2, 3, 6, 9, 8, 7, 4, 5);
        List<Integer> actual = answer.spiralOrder(matrix);
        assertEquals(expected, actual);
    }

    /**
     * Test case for a 3x4 matrix.
     */
    @Test
    public void testSpiralOrder3x4() {
        int[][] matrix = {
            {1, 2, 3, 4},
            {5, 6, 7, 8},
            {9, 10, 11, 12}
        };
        List<Integer> expected = Arrays.asList(1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7);
        List<Integer> actual = answer.spiralOrder(matrix);
        assertEquals(expected, actual);
    }
}
```

### Explanation:
1. **Imports**: Added necessary imports for JUnit assertions and lists.
   - `import org.junit.Test;`
   - `import static org.junit.Assert.assertEquals;`
   - `import java.util.Arrays;`
   - `import java.util.List;`

2. **Class Definition**: Defined the test class `Tester` in the package `org.real.temp`.

3. **JUnit Annotations**:
   - `@Test`: Used to mark each test method.

4. **Test Methods**:
   - Each test method is annotated with `@Test`.
   - The test methods cover various scenarios:
     - An empty matrix.
     - A single-element matrix.
     - A 2x2 matrix.
     - A 3x3 matrix.
     - A 3x4 matrix.

5. **Assertions**:
   - Used `assertEquals` to compare the expected results with the actual results returned by the `spiralOrder` method.

6. **Static Instance**: Created a static instance `answer` of the `Answer` class to use in the test methods.

### `Answer` Class (From Previous Code)

Here is the `Answer` class with the `spiralOrder` method:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Answer {

    /**
     * Given a 2D matrix, returns all elements of the matrix in spiral order.
     *
     * @param matrix A 2D array of integers.
     * @return A list of integers representing the matrix elements in spiral order.
     */
    public static List<Integer> spiralOrder(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return new ArrayList<>();
        }

        int rows = matrix.length;
        int cols = matrix[0].length;
        int top = 0, bottom = rows - 1;
        int left = 0, right = cols - 1;
        List<Integer> result = new ArrayList<>();

        while (top <= bottom && left <= right) {
            // Traverse Right
            for (int col = left; col <= right; col++) {
                result.add(matrix[top][col]);
            }
            top++;

            // Traverse Down
            for (int row = top; row <= bottom; row++) {
                result.add(matrix[row][right]);
            }
            right--;

            // Traverse Left
            if (top <= bottom) {
                for (int col = right; col >= left; col--) {
                    result.add(matrix[bottom][col]);
                }
                bottom--;
            }

            // Traverse Up
            if (left <= right) {
                for (int row = bottom; row >= top; row--) {
                    result.add(matrix[row][left]);
                }
                left++;
            }
        }

        return result;
    }
}
```

This setup ensures that the functionality and logic of the tests are preserved while adhering to Java's syntax and conventions.