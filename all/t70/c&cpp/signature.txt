Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation.

```cpp
#include <iostream>
#include <regex>
#include <vector>
#include <string>

// Function to extract the contents of code blocks from a markdown string
std::vector<std::string> code_block_remover(const std::string& markdown_string) {
    /**
     * Extracts the contents of the code block from the given Markdown string.
     *
     * Args:
     *     markdown_string (const std::string&): The input markdown string.
     *
     * Returns:
     *     std::vector<std::string>: A vector of strings, each representing the content of a code block.
     *                                Returns an empty vector if no code blocks are found.
     */

    // Define a pattern that captures content within triple backticks, with optional language specifier
    std::regex pattern(R"(```[a-zA-Z]*\n([\s\S]*?)```)");

    // Use std::sregex_iterator to find all occurrences of the pattern
    std::sregex_iterator matches_begin = std::sregex_iterator(markdown_string.begin(), markdown_string.end(), pattern);
    std::sregex_iterator matches_end = std::sregex_iterator();

    // Extract the matched groups and store them in a vector
    std::vector<std::string> code_blocks;
    for (std::sregex_iterator i = matches_begin; i != matches_end; ++i) {
        std::smatch match = *i;
        code_blocks.push_back(match[1].str());
    }

    return code_blocks;
}

// Example usage
int main() {
    std::string markdown_string = R"(
# Header
Here is some code:

```cpp
#include <iostream>
int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}
```

And another one:

```python
print("Hello, World!")
```
)";

    std::vector<std::string> code_blocks = code_block_remover(markdown_string);

    // Print the extracted code blocks
    for (const auto& block : code_blocks) {
        std::cout << block << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header and Includes**: The necessary headers (`<iostream>`, `<regex>`, `<vector>`, `<string>`) are included at the beginning.
2. **Function Definition**: The `code_block_remover` function is defined to take a `const std::string&` and return a `std::vector<std::string>`.
3. **Documentation Comments**: The Python docstring is translated into a multi-line comment using `/** */` in C++.
4. **Regular Expression Pattern**: The pattern `R"(```[a-zA-Z]*\n([\s\S]*?)``")"` is used to match code blocks within the markdown string.
5. **Finding Matches**: `std::sregex_iterator` is used to find all occurrences of the pattern in the input string.
6. **Extracting Matches**: The matched groups are extracted and stored in a `std::vector<std::string>`.
7. **Example Usage**: An example usage is provided in the `main` function to demonstrate how to call the `code_block_remover` function and print the results.

This ensures that the functionality, logic, and structure of the original Python code are preserved in the C++ version.