Sure! Below is the equivalent C++ code for the Python function `code_block_remover`. This C++ code uses regular expressions to extract the contents of code blocks from a given Markdown string.

```cpp
#include <iostream>
#include <regex>
#include <vector>
#include <string>

std::vector<std::string> code_block_remover(const std::string& markdown_string) {
    std::vector<std::string> code_blocks;
    std::regex code_block_regex(R"(```[\s\S]*?```)", std::regex_constants::ECMAScript);
    auto words_begin = std::sregex_iterator(markdown_string.begin(), markdown_string.end(), code_block_regex);
    auto words_end = std::sregex_iterator();

    for (std::sregex_iterator i = words_begin; i != words_end; ++i) {
        std::smatch match = *i;
        std::string matched_string = match.str();
        // Remove the ``` and ```, leaving only the code block content
        size_t start = 3;
        size_t end = matched_string.length() - 3;
        code_blocks.push_back(matched_string.substr(start, end));
    }

    return code_blocks;
}

int main() {
    std::string markdown = "Here is some text with a ```python\nprint('Hello, World!')\n``` code block.";
    std::vector<std::string> extracted_code_blocks = code_block_remover(markdown);

    for (const std::string& block : extracted_code_blocks) {
        std::cout << block << std::endl;
    }

    return 0;
}
```

### Explanation:

1. **Regex Pattern**: The regex pattern `R"(```[\s\S]*?```)"` is used to match the entire code block including the surrounding triple backticks. The `[\s\S]` ensures that it matches any character (including newlines), and the non-greedy `*?` makes sure it stops at the first closing triple backtick.

2. **Iterating Over Matches**: We use `std::sregex_iterator` to iterate over all matches in the input string. For each match, we extract the content between the triple backticks.

3. **Removing Backticks**: We remove the leading and trailing triple backticks using `substr`.

4. **Returning Results**: The extracted code blocks are stored in a vector and returned.

5. **Main Function**: The `main` function demonstrates how to use the `code_block_remover` function and prints the extracted code blocks.

This C++ code should work similarly to your Python function, extracting code blocks from a Markdown string.