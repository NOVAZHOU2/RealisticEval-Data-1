Sure! Below is the equivalent C++ unit test case using Catch2 for the provided Python `unittest` test class:

```cpp
#include <catch2/catch.hpp>
#include <string>
#include <vector>

std::vector<std::string> code_block_remover(const std::string& markdown_string);

TEST_CASE("code_block_remover tests", "[code_block_remover]") {
    SECTION("Empty markdown string") {
        REQUIRE(code_block_remover("") == std::vector<std::string>());
    }

    SECTION("Markdown with no code blocks") {
        REQUIRE(code_block_remover("This is some text without any code blocks.") == std::vector<std::string>());
    }

    SECTION("Markdown with one code block") {
        std::vector<std::string> expected = {"This is a code block."};
        REQUIRE(code_block_remover("Some text before\n```\nThis is a code block.\n```") == expected);
    }

    SECTION("Markdown with multiple code blocks") {
        std::vector<std::string> expected = {"This is the first code block.", "This is the second code block."};
        REQUIRE(code_block_remover("Some text before\n```\nThis is the first code block.\n```\nAnd here is another one:\n```\nThis is the second code block.\n```") == expected);
    }

    SECTION("Markdown with code blocks separated by other elements") {
        std::vector<std::string> expected = {"This is the first code block.", "This is the second code block."};
        REQUIRE(code_block_remover("Some text before\n```\nThis is the first code block.\n```\nMore text in between\n```\nThis is the second code block.\n```") == expected);
    }
}
```

### Explanation:
1. **Include Headers**: We include the necessary headers for Catch2 and standard library components.
2. **Function Declaration**: We declare the `code_block_remover` function that we assume is already defined elsewhere in your project.
3. **Test Case**: We define a test case using `TEST_CASE` macro from Catch2.
4. **Sections**: Each section within the test case represents a different scenario or test case.
5. **Assertions**: We use `REQUIRE` to assert that the output of `code_block_remover` matches the expected result.

Make sure you have Catch2 installed and properly configured in your project to compile and run these tests.