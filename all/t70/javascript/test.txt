Certainly! Here is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Unittest Code

```python
import unittest

def code_block_remover(markdown_string: str) -> List[str]:
    """
    Extracts all code block contents from a markdown string.

    Args:
        markdown_string (str): The input markdown string.

    Returns:
        list: A list of strings, each representing the content of a code block.
              Returns an empty list if no code blocks are found.
    """
    pattern = r"```[a-zA-Z]*\n([\s\S]*?)```"
    code_blocks = re.findall(pattern, markdown_string)
    return code_blocks

class TestCodeBlockRemover(unittest.TestCase):

    def test_single_code_block(self):
        markdown = """
        This is a markdown with a code block.

        ```python
        print("Hello, World!")
        ```

        End of markdown.
        """
        expected = ['print("Hello, World!")']
        result = code_block_remover(markdown)
        self.assertEqual(result, expected)

    def test_multiple_code_blocks(self):
        markdown = """
        First code block:

        ```python
        print("Hello, World!")
        ```

        Second code block:

        ```javascript
        console.log("Hello, World!");
        ```
        """
        expected = [
            'print("Hello, World!")',
            'console.log("Hello, World!");'
        ]
        result = code_block_remover(markdown)
        self.assertEqual(result, expected)

    def test_no_code_block(self):
        markdown = """
        This markdown has no code blocks.

        Just some plain text.
        """
        expected = []
        result = code_block_remover(markdown)
        self.assertEqual(result, expected)

    def test_empty_code_block(self):
        markdown = """
        Here is an empty code block:

        ```python
        ```

        End of markdown.
        """
        expected = ['']
        result = code_block_remover(markdown)
        self.assertEqual(result, expected)

    def test_malformed_code_block(self):
        markdown = """
        This code block is missing ending:

        ```python
        print("Hello, World!")

        And some more text.
        """
        expected = []
        result = code_block_remover(markdown)
        self.assertEqual(result, expected)
```

### Equivalent Jest Test Suite

Here is the equivalent Jest test suite for the given Python unittest class:

```javascript
const { codeBlockRemover } = require('./codeBlockRemover');

describe('TestCodeBlockRemover', () => {
    it('should handle a single code block', () => {
        const markdown = `
        This is a markdown with a code block.

        \`\`\`python
        print("Hello, World!")
        \`\`\`

        End of markdown.
        `;
        const expected = ['print("Hello, World!")'];
        const result = codeBlockRemover(markdown);
        expect(result).toEqual(expected);
    });

    it('should handle multiple code blocks', () => {
        const markdown = `
        First code block:

        \`\`\`python
        print("Hello, World!")
        \`\`\`

        Second code block:

        \`\`\`javascript
        console.log("Hello, World!");
        \`\`\`
        `;
        const expected = [
            'print("Hello, World!")',
            'console.log("Hello, World!");'
        ];
        const result = codeBlockRemover(markdown);
        expect(result).toEqual(expected);
    });

    it('should handle no code blocks', () => {
        const markdown = `
        This markdown has no code blocks.

        Just some plain text.
        `;
        const expected = [];
        const result = codeBlockRemover(markdown);
        expect(result).toEqual(expected);
    });

    it('should handle an empty code block', () => {
        const markdown = `
        Here is an empty code block:

        \`\`\`python
        \`\`\`

        End of markdown.
        `;
        const expected = [''];
        const result = codeBlockRemover(markdown);
        expect(result).toEqual(expected);
    });

    it('should handle a malformed code block', () => {
        const markdown = `
        This code block is missing ending:

        \`\`\`python
        print("Hello, World!")

        And some more text.
        `;
        const expected = [];
        const result = codeBlockRemover(markdown);
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Import Statement**: The `codeBlockRemover` function is imported from the file `codeBlockRemover.js`.
2. **Describe Block**: The `describe` block is used to group the test cases under a common description.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Markdown Strings**: The markdown strings are defined using template literals (`\``) for better readability.
5. **Assertions**: The `expect` function is used with `toEqual` to assert the equality of the results.

This Jest test suite ensures that the functionality and logic of the Python unittest class are preserved while adapting to Jest's syntax and conventions.