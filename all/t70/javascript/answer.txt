Sure, here is the equivalent JavaScript code for the provided Python function:

```javascript
function codeBlockRemover(markdownString) {
    // Regular expression to match code blocks in Markdown
    const regex = /(```[\s\S]*?```)/g;
    let matches;
    let codeBlocks = [];

    // Find all matches of code blocks
    while ((matches = regex.exec(markdownString)) !== null) {
        // Extract the content inside the code block
        const codeContent = matches[1].replace(/^[`~]{3}/, '').replace(/[`~]{3}$/, '');
        codeBlocks.push(codeContent);
    }

    return codeBlocks;
}
```

### Explanation:
- **Regular Expression**: `const regex = /(```[\s\S]*?```)/g;`
  - This regex pattern matches any sequence of characters that starts with ```` and ends with ````, capturing everything in between.
  - `[\s\S]` is used to match any character including newlines, which is necessary because the default dot (`.`) does not match newlines in JavaScript's regex.

- **Finding Matches**:
  - `while ((matches = regex.exec(markdownString)) !== null)`
  - This loop continues to find all occurrences of the code blocks in the input string.

- **Extracting Content**:
  - `const codeContent = matches[1].replace(/^[`~]{3}/, '').replace(/[`~]{3}$/, '');`
  - This line removes the surrounding ```` and ```` from the matched code block content.

- **Returning Results**:
  - `return codeBlocks;`
  - The function returns an array of extracted code block contents.

This JavaScript function should work similarly to your original Python function.