Certainly! Here is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Extracts the contents of the code block from the given Markdown string.
 *
 * @param {string} markdownString - The input markdown string.
 * @returns {Array<string>} An array of strings, each representing the content of a code block.
 *                           Returns an empty array if no code blocks are found.
 */
function codeBlockRemover(markdownString) {
    // Define a pattern that captures content within triple backticks, with optional language specifier
    const pattern = /```[a-zA-Z]*\n([\s\S]*?)```/g;

    // Use match() to find all occurrences of the pattern
    const codeBlocks = markdownString.match(pattern);

    // Extract the content of each code block by removing the surrounding ``` and trimming newlines
    if (codeBlocks) {
        return codeBlocks.map(block => block.replace(/```[a-zA-Z]*\n|```/g, '').trim());
    }

    return [];
}

// Example usage
const markdownString = `
# Header
\`\`\`js
console.log('Hello, World!');
\`\`\`

Some text

\`\`\`
console.log('Another code block');
\`\`\`
`;

console.log(codeBlockRemover(markdownString));
```

### Explanation:
1. **Function Signature**: The function `code_block_remover` is renamed to `codeBlockRemover` to follow camelCase naming convention in JavaScript.
2. **JSDoc Comments**: The Python docstring is converted to JSDoc comments for better readability and consistency with JavaScript documentation standards.
3. **Pattern Definition**: The regular expression `pattern` is defined to capture the content within triple backticks (`````) with an optional language specifier.
4. **Finding Matches**: The `match()` method is used to find all occurrences of the pattern in the `markdownString`.
5. **Extracting Content**: The `map()` function is used to extract the actual content of each code block by removing the surrounding ```` and trimming any leading or trailing whitespace.
6. **Returning Results**: If there are matches, the extracted content is returned; otherwise, an empty array is returned.

This JavaScript function should behave identically to the Python function you provided, with proper documentation and structure preserved.