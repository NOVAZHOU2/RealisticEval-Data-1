Certainly! Hereâ€™s the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Answer {

    /**
     * Extracts the contents of the code block from the given Markdown string.
     *
     * @param markdownString The input Markdown string.
     * @return A list of strings, each representing the content of a code block.
     *         Returns an empty list if no code blocks are found.
     */
    public static List<String> codeBlockRemover(String markdownString) {
        // Define a pattern that captures content within triple backticks, with optional language specifier
        String pattern = "```[a-zA-Z]*\n(.*?)```";

        // Compile the regular expression pattern
        Pattern compiledPattern = Pattern.compile(pattern, Pattern.DOTALL);

        // Find all occurrences of the pattern
        Matcher matcher = compiledPattern.matcher(markdownString);

        // List to store the extracted code blocks
        List<String> codeBlocks = new ArrayList<>();

        while (matcher.find()) {
            // Add the content of the code block to the list
            codeBlocks.add(matcher.group(1));
        }

        return codeBlocks;
    }

    public static void main(String[] args) {
        // Example usage
        String markdownString = "Some text\n```\npublic class Example {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\nMore text";
        List<String> codeBlocks = codeBlockRemover(markdownString);
        for (String codeBlock : codeBlocks) {
            System.out.println(codeBlock);
        }
    }
}
```

### Explanation:
1. **Package and Class Declaration**:
   - The code is placed within the `org.real.temp` package.
   - The class is named `Answer`.

2. **Import Statements**:
   - Necessary imports such as `ArrayList`, `List`, `Pattern`, and `Matcher` are included.

3. **Javadoc Comments**:
   - The method `codeBlockRemover` includes Javadoc comments that describe the purpose, parameters, and return value of the method.

4. **Method Signature**:
   - The method `codeBlockRemover` is defined with the appropriate signature and documentation.

5. **Regular Expression Compilation**:
   - The pattern is compiled using `Pattern.compile` with the `Pattern.DOTALL` flag to match across multiple lines.

6. **Matcher Usage**:
   - A `Matcher` is used to find all occurrences of the pattern in the input string.

7. **List Initialization**:
   - An `ArrayList` is used to store the extracted code blocks.

8. **Example Usage**:
   - A `main` method is provided to demonstrate how to use the `codeBlockRemover` method.

This Java code preserves the original functionality and structure of the Python code while adhering to Java conventions and best practices.