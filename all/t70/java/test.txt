Certainly! Hereâ€™s the equivalent Java JUnit test class for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It will use JUnit annotations and assertions to ensure the functionality and logic of the tests are preserved.

### Java Code

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.Arrays;
import java.util.List;

public class Tester {

    @Test
    public void testSingleCodeBlock() {
        String markdown = "This is a markdown with a code block.\n\n```python\nprint(\"Hello, World!\")\n```\n\nEnd of markdown.";
        List<String> expected = Arrays.asList("print(\"Hello, World!\")");
        List<String> result = codeBlockRemover(markdown);
        assertEquals(expected, result);
    }

    @Test
    public void testMultipleCodeBlocks() {
        String markdown = "First code block:\n\n```python\nprint(\"Hello, World!\")\n```\n\nSecond code block:\n\n```javascript\nconsole.log(\"Hello, World!\");\n```\n";
        List<String> expected = Arrays.asList(
            "print(\"Hello, World!\")",
            "console.log(\"Hello, World!\");"
        );
        List<String> result = codeBlockRemover(markdown);
        assertEquals(expected, result);
    }

    @Test
    public void testNoCodeBlock() {
        String markdown = "This markdown has no code blocks.\n\nJust some plain text.";
        List<String> expected = Arrays.asList();
        List<String> result = codeBlockRemover(markdown);
        assertEquals(expected, result);
    }

    @Test
    public void testEmptyCodeBlock() {
        String markdown = "Here is an empty code block:\n\n```python\n```\n\nEnd of markdown.";
        List<String> expected = Arrays.asList("");
        List<String> result = codeBlockRemover(markdown);
        assertEquals(expected, result);
    }

    @Test
    public void testMalformedCodeBlock() {
        String markdown = "This code block is missing ending:\n\n```python\nprint(\"Hello, World!\")\n\nAnd some more text.";
        List<String> expected = Arrays.asList();
        List<String> result = codeBlockRemover(markdown);
        assertEquals(expected, result);
    }

    // Method to be tested
    private List<String> codeBlockRemover(String markdownString) {
        // Define a pattern that captures content within triple backticks, with optional language specifier
        String pattern = "```[a-zA-Z]*\n(.*?)```";

        // Compile the regular expression pattern
        Pattern compiledPattern = Pattern.compile(pattern, Pattern.DOTALL);

        // Find all occurrences of the pattern
        Matcher matcher = compiledPattern.matcher(markdownString);

        // List to store the extracted code blocks
        List<String> codeBlocks = new ArrayList<>();

        while (matcher.find()) {
            // Add the content of the code block to the list
            codeBlocks.add(matcher.group(1));
        }

        return codeBlocks;
    }
}
```

### Explanation:
1. **Package and Class Declaration**:
   - The test class is placed in the `org.real.temp` package.
   - The class is named `Tester`.

2. **JUnit Annotations**:
   - Each test method is annotated with `@Test` to indicate it is a test case.

3. **Assertions**:
   - The `assertEquals` method from JUnit is used to assert the expected results.

4. **Test Data**:
   - The test data is defined as multi-line strings to match the Python test cases.

5. **Method to Be Tested**:
   - The `codeBlockRemover` method is defined within the test class for convenience. In a real-world scenario, this method would typically be in a separate utility class.

6. **JUnit Assertions**:
   - The `assertEquals` method is used to compare the expected and actual results.

This Java code preserves the functionality and logic of the Python unittest class while adhering to JUnit conventions and best practices.