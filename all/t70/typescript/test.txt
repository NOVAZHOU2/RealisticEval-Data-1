Certainly! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class:

```typescript
import { describe, it, expect } from '@jest/globals';
import { codeBlockRemover } from './path-to-your-code-block-remover'; // Adjust the path accordingly

describe('codeBlockRemover', () => {
  it('should extract the contents of the code block from the given Markdown string', () => {
    const markdownString = `
This is some text.

\`\`\`
This is a code block.
It can contain multiple lines.
\`\`\`

And more text after the code block.
    `;
    const expectedOutput: string[] = [
      'This is a code block.\nIt can contain multiple lines.'
    ];

    const result = codeBlockRemover(markdownString);
    expect(result).toEqual(expectedOutput);
  });

  it('should return an empty list if no code blocks are found', () => {
    const markdownString = `
This is some text without any code blocks.
`;
    const expectedOutput: string[] = [];

    const result = codeBlockRemover(markdownString);
    expect(result).toEqual(expectedOutput);
  });
});
```

### Explanation:
1. **Importing Jest Functions**: We import `describe`, `it`, and `expect` from `@jest/globals`.
2. **Describing the Test Suite**: We use `describe` to group related tests together.
3. **Writing Individual Tests**: Each test case is written using `it`. We provide a description for each test and use `expect` to assert the expected output.
4. **Mocking the Function**: Ensure that you have the `codeBlockRemover` function available in your TypeScript project. If it's in a different file, adjust the import path accordingly.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```bash
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, configure Jest in your `package.json`:

```json
{
  "scripts": {
    "test": "jest"
  },
  "jest": {
    "testEnvironment": "node"
  }
}
```

Finally, run your tests with:

```bash
npm test
# or
yarn test
```