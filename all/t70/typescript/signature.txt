Certainly! Here is the equivalent TypeScript code with proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Extracts the contents of the code block from the given Markdown string.
 *
 * @param markdownString - The input Markdown string.
 * @returns An array of strings, each representing the content of a code block.
 *          Returns an empty array if no code blocks are found.
 */
function codeBlockRemover(markdownString: string): string[] {
    // Define a pattern that captures content within triple backticks, with optional language specifier
    const pattern = /```[a-zA-Z]*\n([\s\S]*?)```/g;

    // Use String.match() to find all occurrences of the pattern
    const matches = markdownString.match(pattern);

    // Extract the content of each code block
    const codeBlocks = matches ? matches.map(match => match.replace(/```[a-zA-Z]*\n|```/g, '')) : [];

    return codeBlocks;
}

// Example usage
const markdownString = `
\`\`\`js
console.log('Hello, TypeScript!');
\`\`\`

Some text here

\`\`\`
console.log('Another code block');
\`\`\`
`;

console.log(codeBlockRemover(markdownString));
```

### Explanation:
1. **Function Signature**: The Python function signature `def code_block_remover(markdown_string: str) -> List[str]` is translated to TypeScript as `function codeBlockRemover(markdownString: string): string[]`.
2. **JSDoc Comments**: The Python docstring is converted to JSDoc-style comments using `/** */`.
3. **Pattern Definition**: The regular expression pattern is defined in TypeScript as `const pattern = /```[a-zA-Z]*\n([\s\S]*?)```/g`.
4. **Finding Matches**: The `String.match()` method is used to find all occurrences of the pattern.
5. **Extracting Content**: The content of each code block is extracted by removing the surrounding triple backticks and any language specifiers.
6. **Return Value**: The function returns an array of strings containing the content of each code block.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and best practices.