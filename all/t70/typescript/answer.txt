Here is the equivalent TypeScript code:

```typescript
import { match } from "assert";

function codeBlockRemover(markdownString: string): string[] {
    /**
     * Extracts all code block contents from a markdown string.
     *
     * @param markdownString - The input markdown string.
     * @returns An array of strings, each representing the content of a code block.
     *          Returns an empty array if no code blocks are found.
     */
    // Define a pattern that captures content within triple backticks, with optional language specifier
    const pattern = /```[a-zA-Z]*\n([\s\S]*?)```/g;

    // Use String.match() to find all occurrences of the pattern
    const matches = markdownString.match(pattern);

    // Extract the content of each code block
    const codeBlocks = matches ? matches.map(match => match.replace(/```[a-zA-Z]*\n|```/g, '')) : [];

    return codeBlocks;
}

// Example usage
const markdownString = `
\`\`\`js
console.log('Hello, TypeScript!');
\`\`\`

Some text here

\`\`\`
console.log('Another code block');
\`\`\`
`;

console.log(codeBlockRemover(markdownString));
```

### Explanation:
1. **Pattern Definition**: The regular expression pattern `r"```[a-zA-Z]*\n([\s\S]*?)\`\`\`"` is converted to a JavaScript regex pattern `/```[a-zA-Z]*\n([\s\S]*?)```/g`.
2. **Finding Matches**: Instead of using `re.findall()`, we use `String.match()` to find all occurrences of the pattern.
3. **Extracting Content**: We then extract the content of each code block by removing the surrounding triple backticks and any language specifiers.
4. **Return Value**: The function returns an array of strings containing the content of each code block.

This TypeScript code maintains the same functionality as the original Python code but adapts it to TypeScript syntax and conventions.