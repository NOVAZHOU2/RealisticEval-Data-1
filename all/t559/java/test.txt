Sure! Below is the equivalent Java JUnit test case for the provided JavaScript Jest test function.

First, let's define the `isCppHeaderFile` method in a Java class:

```java
package org.real.temp;

public class FileChecker {

    /**
     * Checks whether a file name is a C++ header file.
     *
     * @param fileName - The name of the file to check.
     * @return true if the file is a C++ header file, false otherwise.
     */
    public static boolean isCppHeaderFile(String fileName) {
        return fileName.endsWith(".h") || fileName.endsWith(".hpp");
    }
}
```

Next, we will create a JUnit test class to verify the functionality of the `isCppHeaderFile` method:

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class FileCheckerTest {

    @Test
    public void testIsCppHeaderFile() {
        assertTrue(FileChecker.isCppHeaderFile("example.h"));
        assertTrue(FileChecker.isCppHeaderFile("example.hpp"));
        assertFalse(FileChecker.isCppHeaderFile("example.cpp"));
        assertFalse(FileChecker.isCppHeaderFile("example.txt"));
    }
}
```

### Explanation:
1. **Class Definition**: We have defined a class `FileChecker` with a static method `isCppHeaderFile`.
2. **JUnit Test Class**: We have created a test class `FileCheckerTest` annotated with `@Test`.
3. **Test Method**: Inside the test class, we have a test method `testIsCppHeaderFile` annotated with `@Test`. This method checks various file names to ensure that the `isCppHeaderFile` method returns the correct boolean value.

This setup ensures that your Java code behaves similarly to the original JavaScript code when tested using JUnit.