Certainly! Below is the equivalent TypeScript Jest test case for your JavaScript function `isCppHeaderFile`. This includes using the `describe` block and writing tests to verify its functionality.

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Checks whether a file name is a C++ header file.
 *
 * @param {string} fileName - The name of the file to check.
 * @returns {boolean} - Returns true if the file is a C++ header file, false otherwise.
 */
function isCppHeaderFile(fileName: string): boolean {
    return fileName.endsWith('.h') || fileName.endsWith('.hpp');
}

describe('isCppHeaderFile', () => {
    it('should return true for valid C++ header files with .h extension', () => {
        expect(isCppHeaderFile('example.h')).toBe(true);
    });

    it('should return true for valid C++ header files with .hpp extension', () => {
        expect(isCppHeaderFile('example.hpp')).toBe(true);
    });

    it('should return false for non-C++ header files', () => {
        expect(isCppHeaderFile('example.cpp')).toBe(false);
        expect(isCppHeaderFile('example.txt')).toBe(false);
        expect(isCppHeaderFile('example')).toBe(false);
    });
});
```

### Explanation:
1. **Importing Jest**: We import the necessary functions (`describe`, `it`, `expect`) from `@jest/globals`.
2. **Function Definition**: The `isCppHeaderFile` function is defined in TypeScript, specifying that it takes a `string` parameter and returns a `boolean`.
3. **Describe Block**: The `describe` block groups related tests together under the title `'isCppHeaderFile'`.
4. **It Blocks**: Each `it` block contains a specific test case.
   - The first two `it` blocks test for valid C++ header files with `.h` and `.hpp` extensions, respectively.
   - The third `it` block tests for non-C++ header files to ensure the function correctly returns `false`.

This setup ensures that your TypeScript function is properly tested using Jest's testing framework.