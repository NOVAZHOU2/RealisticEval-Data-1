Hereâ€™s the C++ Catch2 test cases converted into JavaScript Jest test cases, maintaining the logic and functionality of the original tests:

```javascript
const LinkedList = require('./LinkedList'); // Adjust the path as needed

describe("LinkedList operations", () => {
    
    test("Insertion at the head", () => {
        const list = new LinkedList();
        list.insertAtHead(10);
        list.insertAtHead(20);
        list.insertAtHead(30);

        console.log = jest.fn(); // Mock console.log
        list.printList(); // Expected: 30 -> 20 -> 10 -> null

        expect(list.search(10)).toBe(true);
        expect(list.search(20)).toBe(true);
        expect(list.search(30)).toBe(true);
        expect(list.search(40)).toBe(false);
    });

    test("Insertion at the tail", () => {
        const list = new LinkedList();
        list.insertAtTail(1);
        list.insertAtTail(2);
        list.insertAtTail(3);

        console.log = jest.fn(); // Mock console.log
        list.printList(); // Expected: 1 -> 2 -> 3 -> null

        expect(list.search(1)).toBe(true);
        expect(list.search(2)).toBe(true);
        expect(list.search(3)).toBe(true);
        expect(list.search(4)).toBe(false);
    });

    test("Deletion of elements", () => {
        const list = new LinkedList();
        list.insertAtHead(5);
        list.insertAtHead(10);
        list.insertAtHead(15);

        list.deleteValue(10);
        console.log = jest.fn(); // Mock console.log
        list.printList(); // Expected: 15 -> 5 -> null

        expect(list.search(10)).toBe(false);
        expect(list.search(15)).toBe(true);
        expect(list.search(5)).toBe(true);

        list.deleteValue(15);
        list.printList(); // Expected: 5 -> null

        expect(list.search(15)).toBe(false);
        expect(list.search(5)).toBe(true);

        list.deleteValue(5);
        list.printList(); // Expected: null

        expect(list.search(5)).toBe(false);
    });

    test("Search functionality", () => {
        const list = new LinkedList();
        list.insertAtTail(100);
        list.insertAtTail(200);
        list.insertAtTail(300);

        expect(list.search(100)).toBe(true);
        expect(list.search(200)).toBe(true);
        expect(list.search(300)).toBe(true);
        expect(list.search(400)).toBe(false);
    });

    test("Edge case: Empty list", () => {
        const list = new LinkedList();

        expect(list.search(1)).toBe(false);  // Searching in an empty list
        list.deleteValue(1);                  // Deleting from an empty list should not crash
        console.log = jest.fn(); // Mock console.log
        list.printList();          // Expected: null (still empty)
    });
});
```

### Key Changes:
- Used `describe` and `test` from Jest to structure the tests.
- Replaced `REQUIRE` assertions with `expect(...).toBe(...)`.
- Mocked `console.log` to prevent output during tests while allowing for validation of print output if needed.
- Ensured all logic and test structure were preserved from the original C++ tests.