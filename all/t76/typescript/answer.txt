Certainly! Below is the TypeScript code that replicates the functionality of the provided Python code:

```typescript
function removeCommonIndentation(multilineText: string): string {
    const lines = multilineText.split('\n');

    // Filter out lines that are empty or only whitespace, as they do not affect minimum indentation
    const nonEmptyLines = lines.filter(line => line.trim().length > 0);

    // Determine the minimum indentation of non-empty lines
    let minIndent = Infinity;
    for (const line of nonEmptyLines) {
        const strippedLine = line.replace(/^\s+/, '');
        const indent = line.length - strippedLine.length;
        minIndent = Math.min(minIndent, indent);
    }

    // If there's no indentation or all lines are empty, return the original string
    if (minIndent === Infinity) {
        return multilineText;
    }

    // Remove the common leading indentation from each line
    const sanitizedLines = lines.map(line => line.slice(minIndent));

    return sanitizedLines.join('\n');
}

// Example usage
const exampleMultilineText = `
    This is a
        multi-line
    string.
`;
console.log(removeCommonIndentation(exampleMultilineText));
```

### Explanation:
1. **Splitting the String**: The `split` method is used to split the input string into an array of lines.
2. **Filtering Non-Empty Lines**: The `filter` method is used to remove lines that are empty or contain only whitespace.
3. **Determining Minimum Indentation**: A loop iterates over the non-empty lines to find the minimum indentation.
4. **Sanitizing Lines**: The `map` method is used to remove the common leading indentation from each line.
5. **Joining the Lines**: The `join` method is used to combine the sanitized lines back into a single string.

This TypeScript code maintains the same functionality and logic as the Python code, while adapting it to TypeScript's syntax and conventions.