Sure! Below is the equivalent C++ code for the provided Python function `remove_common_indentation`. This C++ code will remove the common leading indentation from each line in a given multi-line string, preserving the relative indentation of the text.

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

std::string remove_common_indentation(const std::string& multiline_text) {
    // Split the input text into individual lines
    std::vector<std::string> lines;
    size_t start = 0;
    size_t end = multiline_text.find('\n');
    while (end != std::string::npos) {
        lines.push_back(multiline_text.substr(start, end - start));
        start = end + 1;
        end = multiline_text.find('\n', start);
    }
    lines.push_back(multiline_text.substr(start));

    // Find the minimum non-empty indentation length
    size_t min_indent = std::numeric_limits<size_t>::max();
    bool found_non_empty_line = false;
    for (const auto& line : lines) {
        if (!line.empty()) {
            found_non_empty_line = true;
            size_t indent_length = 0;
            for (char ch : line) {
                if (ch == ' ' || ch == '\t') {
                    ++indent_length;
                } else {
                    break;
                }
            }
            min_indent = std::min(min_indent, indent_length);
        }
    }

    // Remove the common indentation from each line
    std::string result;
    for (const auto& line : lines) {
        size_t i = 0;
        for (; i < min_indent; ++i) {
            if (line[i] == ' ' || line[i] == '\t') {
                continue;
            } else {
                break;
            }
        }
        result += line.substr(i) + "\n";
    }

    // Remove the trailing newline character
    if (!result.empty() && result.back() == '\n') {
        result.pop_back();
    }

    return result;
}

int main() {
    std::string multiline_text = "   Hello,\n   World!\nThis is a test.";
    std::string sanitized_text = remove_common_indentation(multiline_text);
    std::cout << sanitized_text << std::endl;
    return 0;
}
```

### Explanation:
1. **Splitting the Input Text**: The input text is split into individual lines using the newline character (`\n`).
2. **Finding Minimum Indentation**: The code finds the minimum non-empty indentation length among all lines.
3. **Removing Common Indentation**: Each line has its common indentation removed, and the resulting lines are concatenated back together.
4. **Main Function**: The `main` function demonstrates how to use the `remove_common_indentation` function.

This C++ code should work similarly to the provided Python function, removing the common leading indentation from each line while preserving the relative indentation of the text.