Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Removes the common leading indentation from each line in a given multi-line string,
 * preserving the relative indentation of the text.
 *
 * @param {string} multilineText - The input string containing multiple lines.
 * @returns {string} The sanitized string with common leading indentation removed.
 */
function removeCommonIndentation(multilineText) {
    const lines = multilineText.split('\n');

    // Filter out lines that are empty or only whitespace, as they do not affect minimum indentation
    const nonEmptyLines = lines.filter(line => line.trim().length > 0);

    // Determine the minimum indentation of non-empty lines
    let minIndent = Infinity;
    for (const line of nonEmptyLines) {
        const strippedLine = line.replace(/^\s+/, '');
        const indent = line.length - strippedLine.length;
        minIndent = Math.min(minIndent, indent);
    }

    // If there's no indentation or all lines are empty, return the original string
    if (minIndent === Infinity) {
        return multilineText;
    }

    // Remove the common leading indentation from each line
    const sanitizedLines = lines.map(line => line.slice(minIndent));

    return sanitizedLines.join('\n');
}
```

### Explanation:
1. **Function Signature**:
   - The function signature is rewritten to include the parameter name and type using JSDoc comments.
   - The return type is also specified using JSDoc comments.

2. **JSDoc Comments**:
   - The JSDoc comment block provides a description of the function, parameter details, and return value.

3. **Implementation**:
   - The implementation remains the same, ensuring that the logic and structure are preserved.

This JavaScript code should maintain the same functionality and structure as the original Python code, with proper JSDoc comments for documentation.