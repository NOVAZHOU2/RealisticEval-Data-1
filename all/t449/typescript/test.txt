Sure! Below is the equivalent TypeScript Jest test case for your JavaScript function using `describe` blocks:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Converts a string to Base64 encoding.
 *
 * @param {string} input - The string to be converted to Base64.
 * @returns {string} The Base64 encoded string.
 */
function convertToBase64(input: string): string {
  return Buffer.from(input).toString('base64');
}

describe('convertToBase64', () => {
  it('should convert an empty string to an empty Base64 string', () => {
    const result = convertToBase64('');
    expect(result).toBe('');
  });

  it('should convert a simple string to its Base64 representation', () => {
    const result = convertToBase64('hello world');
    expect(result).toBe('aGVsbG8gd29ybGQ=');
  });

  it('should handle special characters correctly', () => {
    const result = convertToBase64('special characters!');
    expect(result).toBe('c3BlY2lhbCBjaGFyYWN0ZXJzIQ==');
  });
});
```

In this TypeScript version:
1. We import `describe`, `it`, and `expect` from `@jest/globals`.
2. We define the `convertToBase64` function with type annotations.
3. We use `describe` to group related tests together.
4. We use `it` to write individual test cases.
5. We use `expect` to assert the expected outcomes of the function.

This should give you a good starting point for testing your TypeScript functions with Jest.