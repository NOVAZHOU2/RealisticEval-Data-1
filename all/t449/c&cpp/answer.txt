Sure! Here is the equivalent C++ code for converting a string to Base64 encoding:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <bitset>

std::string base64_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

std::string convertToBase64(const std::string& input) {
    std::string output;
    int val = 0, count = 0;
    for (unsigned char c : input) {
        val = (val << 8) + c;
        ++count;
        if (count == 3) {
            output += base64_chars[(val >> 18) & 0x3F];
            output += base64_chars[(val >> 12) & 0x3F];
            output += base64_chars[(val >> 6) & 0x3F];
            output += base64_chars[val & 0x3F];
            val = 0;
            count = 0;
        }
    }
    if (count) {
        output += base64_chars[(val >> 18) & 0x3F];
        output += base64_chars[(val >> 12) & 0x3F];
        if (count == 1)
            output += '=';
        else
            output += base64_chars[(val >> 6) & 0x3F];
        output += '=';
    }
    return output;
}

int main() {
    std::string input = "Hello, World!";
    std::string base64 = convertToBase64(input);
    std::cout << "Base64: " << base64 << std::endl;
    return 0;
}
```

### Explanation:
1. **base64_chars**: This string contains all the characters used in Base64 encoding.
2. **convertToBase64 Function**:
   - It iterates through each character of the input string and constructs the Base64 encoded string.
   - It uses bitwise operations to shift and mask the bits of the input characters.
   - When three bytes are processed, it appends four Base64 characters to the output string.
   - If there are remaining bytes (either one or two), it pads with `=` characters.

### Usage:
- The `main` function demonstrates how to use the `convertToBase64` function by converting the string "Hello, World!" to Base64 and printing the result.