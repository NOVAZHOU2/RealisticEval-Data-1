Certainly! Below is the equivalent Java JUnit test case for the provided JavaScript Jest test code. This Java code uses JUnit 5.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    /**
     * Converts a string to Base64 encoding.
     *
     * @param input - The string to be converted to Base64.
     * @return The Base64 encoded string.
     */
    public String convertToBase64(String input) {
        return java.util.Base64.getEncoder().encodeToString(input.getBytes());
    }

    @Test
    public void testConvertToBase64() {
        // Test data and expected results
        String input1 = "Hello";
        String expectedOutput1 = "SGVsbG8=";

        String input2 = "World";
        String expectedOutput2 = "V29ybGQ=";

        // Perform the conversion
        String result1 = convertToBase64(input1);
        String result2 = convertToBase64(input2);

        // Verify the results
        assertEquals(expectedOutput1, result1, "Conversion of 'Hello' should be 'SGVsbG8='");
        assertEquals(expectedOutput2, result2, "Conversion of 'World' should be 'V29ybGQ='");
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration is `org.real.temp`.
2. **Class Declaration**: The class name is `Tester`.
3. **Method Declaration**: The method `convertToBase64` converts a string to Base64 using Java's built-in `Base64` encoder.
4. **JUnit Test Method**: The `testConvertToBase64` method contains two test cases to verify the correctness of the `convertToBase64` method.
   - It uses `assertEquals` from JUnit to compare the actual output with the expected output.
   - Each test case includes an input string and its corresponding expected Base64 encoded string.

This Java code provides a complete unit test for the `convertToBase64` function using JUnit 5.