Here's how you can convert the provided JavaScript Jest test cases to Python using the unittest framework. This involves creating a class that inherits from unittest.TestCase, where each test case is defined as a method within the class.
JavaScript Jest Test Cases
javascript
describe('Base64 Encoding Tests', () => {
    test('Convert simple string to Base64', () => {
        expect(convertToBase64("Hello, World!")).toBe("SGVsbG8sIFdvcmxkIQ==");
    });
    
    test('Convert empty string to Base64', () => {
        expect(convertToBase64("")).toBe("");
    });
    
    test('Convert string with spaces to Base64', () => {
        expect(convertToBase64("Test String with Spaces")).toBe("VGVzdCBTdHJpbmcgd2l0aCBTcGFjZXM=");
    });
    
    test('Convert string with special characters to Base64', () => {
        expect(convertToBase64("Special characters: @#&*()")).toBe("U3BlY2lhbCBjaGFyYWN0ZXJzOiBAIyYqKCk=");
    });
    
    test('Convert string with non-ASCII characters to Base64', () => {
        expect(convertToBase64("你好，世界！")).toBe("5L2g5aW977yM5LiW55WM77yB");
    });
    
    test('Convert long string to Base64', () => {
        const longString = "This is a very long string that exceeds normal lengths for testing purposes.";
        expect(convertToBase64(longString)).toBe("VGhpcyBpcyBhIHZlcnkgbG9uZyBzdHJpbmcgdGhhdCBleGNlZWRzIG5vcm1hbCBsZW5ndGhzIGZvciB0ZXN0aW5nIHB1cnBvc2VzLg==");
    });
});
Equivalent Python unittest Test Cases
python
import unittest
import base64

def convert_to_base64(input: str) -> str:
    """Converts a string to Base64 encoding."""
    input_bytes = input.encode('utf-8')
    base64_bytes = base64.b64encode(input_bytes)
    return base64_bytes.decode('utf-8')

class TestBase64Encoding(unittest.TestCase):

    def test_convert_simple_string_to_base64(self):
        self.assertEqual(convert_to_base64("Hello, World!"), "SGVsbG8sIFdvcmxkIQ==")
    
    def test_convert_empty_string_to_base64(self):
        self.assertEqual(convert_to_base64(""), "")
    
    def test_convert_string_with_spaces_to_base64(self):
        self.assertEqual(convert_to_base64("Test String with Spaces"), "VGVzdCBTdHJpbmcgd2l0aCBTcGFjZXM=")
    
    def test_convert_string_with_special_characters_to_base64(self):
        self.assertEqual(convert_to_base64("Special characters: @#&*()"), "U3BlY2lhbCBjaGFyYWN0ZXJzOiBAIyYqKCk=")
    
    def test_convert_string_with_non_ascii_characters_to_base64(self):
        self.assertEqual(convert_to_base64("你好，世界！"), "5L2g5aW977yM5LiW55WM77yB")
    
    def test_convert_long_string_to_base64(self):
        long_string = "This is a very long string that exceeds normal lengths for testing purposes."
        self.assertEqual(convert_to_base64(long_string), "VGhpcyBpcyBhIHZlcnkgbG9uZyBzdHJpbmcgdGhhdCBleGNlZWRzIG5vcm1hbCBsZW5ndGhzIGZvciB0ZXN0aW5nIHB1cnBvc2VzLg==")

if __name__ == '__main__':
    unittest.main()
Explanation of the Python Code
Importing Necessary Modules:
The unittest module is imported to facilitate unit testing.
The base64 module is imported to implement the convert_to_base64 function.
Base64 Conversion Function:
The convert_to_base64 function is defined as previously discussed, handling the conversion of strings to Base64.
Test Class:
A class TestBase64Encoding is created, inheriting from unittest.TestCase.
Each test case is defined as a method that begins with test_.
Assertions:
The self.assertEqual() method is used to compare the output of convert_to_base64 with the expected Base64 encoded string for each test case.
Main Block:
The if __name__ == '__main__': block is used to run the tests when the script is executed directly.
Running the Test Cases
To run the tests, save the code in a Python file (e.g., test_base64.py) and execute the following command in your terminal:
bash
python -m unittest test_base64.py
This will execute all test cases, and you should see output indicating whether the tests passed or failed.