Sure! Below is the equivalent Python unit test case using the `unittest` framework for the JavaScript function you provided.

```python
import unittest
import base64

def convert_to_base64(input_string):
    return base64.b64encode(input_string.encode('utf-8')).decode('utf-8')

class TestConvertToBase64(unittest.TestCase):
    def test_convert_to_base64(self):
        self.assertEqual(convert_to_base64("hello"), "aGVsbG8=")
        self.assertEqual(convert_to_base64("world"), "d29ybGQ=")
        self.assertEqual(convert_to_base64(""), "")
        self.assertEqual(convert_to_base64("12345"), "MTIzNDU=")

if __name__ == '__main__':
    unittest.main()
```

### Explanation:
1. **Function Definition**: The `convert_to_base64` function takes an input string and returns its Base64 encoded version using Python's `base64` module.
2. **Test Class**: A test class `TestConvertToBase64` is defined, inheriting from `unittest.TestCase`.
3. **Test Method**: Inside the test class, a method `test_convert_to_base64` is defined to test various cases of the `convert_to_base64` function.
   - `self.assertEqual`: This method checks if the output of `convert_to_base64` matches the expected Base64 encoded string.
4. **Running Tests**: The `unittest.main()` call at the end runs all the tests in the test class.

This Python script will help you verify that the `convert_to_base64` function works correctly for different inputs.