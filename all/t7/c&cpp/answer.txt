Here's the equivalent code in C++ that mimics the functionality of your Python logging class:

```cpp
#include <iostream>
#include <string>
#include <map>

class Logger {
public:
    enum LogLevel {
        DEBUG,
        INFO,
        WARNING,
        ERROR,
        CRITICAL
    };

    Logger(const std::string& name, LogLevel level = DEBUG) : name(name), level(level) {
        // Initialization code if needed
    }

    void log(LogLevel level, const std::string& message) {
        if (level >= this->level) {
            std::cout << "[" << logLevelToString(level) << "] " << message << std::endl;
        }
    }

private:
    std::string name;
    LogLevel level;

    std::string logLevelToString(LogLevel level) {
        static const std::map<LogLevel, std::string> levelToString = {
            {DEBUG, "DEBUG"},
            {INFO, "INFO"},
            {WARNING, "WARNING"},
            {ERROR, "ERROR"},
            {CRITICAL, "CRITICAL"}
        };
        return levelToString.at(level);
    }
};

int main() {
    Logger logger("MyLogger", Logger::DEBUG);
    logger.log(Logger::INFO, "This is an info message.");
    logger.log(Logger::DEBUG, "This is a debug message.");
    logger.log(Logger::ERROR, "This is an error message.");
    return 0;
}
```

### Explanation:
1. **Logger Class**: The class has a constructor that takes a name and a logging level, similar to the Python class.
2. **LogLevel Enum**: Defines various logging levels.
3. **log Method**: Logs a message if the given level is greater than or equal to the logger's level.
4. **logLevelToString Method**: Converts the log level enum to a string for display.
5. **Main Function**: Demonstrates how to create a logger and log messages at different levels.

### Note:
- In C++, you typically handle logging differently than in Python (e.g., using libraries like `spdlog` or `glog`), but this implementation provides a simple, custom logger for educational purposes.