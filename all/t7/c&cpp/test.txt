Here's a C++ Catch2 test case that mirrors the Python unittest structure you provided:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>
#include <iostream>

class Logger {
public:
    Logger(const std::string& name, int level = 0) {
        // Initialize logger
    }

    void log(int level, const std::string& message) {
        // Log message implementation
    }
};

TEST_CASE("Logger initialization and logging", "[logger]") {
    Logger logger("TestLogger");

    SECTION("Logger should be initialized correctly") {
        // Check initialization conditions if any
    }

    SECTION("Logger should log messages at different levels") {
        // Test logging functionality
        logger.log(0, "Test log message");
        // Add assertions to verify logging behavior
    }
}
```

This C++ code sets up a similar structure for testing the `Logger` class using Catch2. Adjust the logging level and implementation details as needed.