To convert your Python unittest test class to a C++ Catch2 test case, you need to create a C++ class that uses Catch2's testing framework. Below is an example of how you might translate your Python `Logger` class and its tests into C++ using Catch2:

First, ensure you have Catch2 installed in your project. If not, you can add it via your build system or include it directly in your source files.

Here's an example of how you might write the C++ code:

```cpp
#include <catch2/catch.hpp>
#include <iostream>
#include <string>

// Define the Logger class
class Logger {
public:
    Logger(const std::string& name, int level = 0) : name_(name), level_(level) {}

    void log(int level, const std::string& message) {
        if (level >= level_) {
            std::cout << "[" << name_ << "] " << message << std::endl;
        }
    }

private:
    std::string name_;
    int level_;
};

// Test cases for the Logger class
TEST_CASE("Logger initialization", "[logger]") {
    Logger logger("test_logger");
    CHECK(logger.name() == "test_logger");
    CHECK(logger.level() == 0);
}

TEST_CASE("Logging messages", "[logger]") {
    Logger logger("test_logger");

    // Capture output
    std::ostringstream oss;
    std::streambuf* oldCoutStreamBuf = std::cout.rdbuf(oss.rdbuf());

    logger.log(1, "Info message");
    logger.log(2, "Debug message");

    std::string output = oss.str();
    std::cout.rdbuf(oldCoutStreamBuf);

    // Check output
    REQUIRE(output.find("[test_logger] Info message") != std::string::npos);
    REQUIRE(output.find("[test_logger] Debug message") == std::string::npos); // Debug should be filtered out
}
```

### Explanation:

1. **Logger Class**:
   - The `Logger` class has a constructor that initializes the logger's name and level.
   - The `log` method checks if the message level is greater than or equal to the logger's level before printing the message.

2. **Catch2 Test Cases**:
   - `TEST_CASE("Logger initialization", "[logger]")`: This test case checks if the logger is initialized correctly with the given name and default level.
   - `TEST_CASE("Logging messages", "[logger]")`: This test case captures the standard output and checks if the appropriate messages are logged based on their levels.

3. **Output Capturing**:
   - To check the output of the `log` method, we capture the standard output using `std::ostringstream`. We then compare the captured output with expected results to verify that only the correct messages are printed.

Make sure to link against the Catch2 library when compiling your C++ code. If you're using CMake, you can do this by adding the following lines to your `CMakeLists.txt`:

```cmake
find_package(Catch2 REQUIRED)
add_executable(your_test_executable your_test_file.cpp)
target_link_libraries(your_test_executable PRIVATE Catch2::Catch2)
```

This setup will allow you to run your C++ unit tests using the Catch2 framework.