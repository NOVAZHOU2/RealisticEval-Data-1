Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It will include appropriate JUnit annotations and assertions to ensure the functionality and logic of the tests are preserved.

### Java Code

```java
package org.real.temp;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.logging.ConsoleHandler;
import java.util.logging.SimpleFormatter;

/**
 * Test class for the Logger functionality.
 */
public class Tester {

    private Logger logger;
    private String loggerName = "TestLogger";

    /**
     * Set up a Logger instance for testing.
     */
    @Before
    public void setUp() {
        logger = Logger.getLogger(loggerName);
        logger.setLevel(Level.ALL);

        // Create a console handler and set its level
        ConsoleHandler consoleHandler = new ConsoleHandler();
        consoleHandler.setLevel(Level.ALL);

        // Create a formatter and set it to the handler
        SimpleFormatter formatter = new SimpleFormatter();
        consoleHandler.setFormatter(formatter);

        // Add the handler to the logger
        logger.addHandler(consoleHandler);
    }

    /**
     * Test that the logger is initialized with the correct name and level.
     */
    @Test
    public void testInitialization() {
        assertEquals(logger.getName(), loggerName);
        assertEquals(logger.getLevel(), Level.ALL);
    }

    /**
     * Test that the logger defaults to ALL level if not specified.
     */
    @Test
    public void testDefaultLoggingLevel() {
        Logger defaultLogger = Logger.getLogger("DefaultLogger");
        assertEquals(defaultLogger.getLevel(), Level.ALL);
    }

    /**
     * Test that the console handler is added to the logger.
     */
    @Test
    public void testConsoleHandlerAdded() {
        assertNotNull(logger.getHandlers());
        assertTrue(logger.getHandlers().length > 0);
        assertTrue(logger.getHandlers()[0] instanceof ConsoleHandler);
    }
}
```

### Explanation:
1. **Package and Class Definition**:
   - The test class is defined in the package `org.real.temp` and named `Tester`.

2. **Setup Method**:
   - The `setUp` method initializes a `Logger` instance with the specified name and level.
   - It sets up a `ConsoleHandler` and a `SimpleFormatter` to format the log messages.

3. **JUnit Annotations**:
   - The `@Before` annotation is used to run the `setUp` method before each test.
   - The `@Test` annotation is used to mark each test method.

4. **Test Methods**:
   - `testInitialization`: Tests that the logger is initialized with the correct name and level.
   - `testDefaultLoggingLevel`: Tests that the logger defaults to `ALL` level if not specified.
   - `testConsoleHandlerAdded`: Tests that the console handler is added to the logger.

5. **Assertions**:
   - `assertEquals` is used to check equality of values.
   - `assertNotNull` and `assertTrue` are used to verify the presence and type of the console handler.

### Main Class (Optional for Testing)
If you want to run the tests, you can add a simple `main` method to execute the tests using JUnit:

```java
package org.real.temp;

import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;

public class TestRunner {
    public static void main(String[] args) {
        Result result = JUnitCore.runClasses(Tester.class);
        for (Failure failure : result.getFailures()) {
            System.out.println(failure.toString());
        }
        System.out.println(result.wasSuccessful());
    }
}
```

This `TestRunner` class runs the tests and prints the results to the console. You can place this in the same package as your test class.

This Java code preserves the functionality and logic of the original Python unittest class while adhering to Java's syntax and conventions.