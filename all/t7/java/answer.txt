Hereâ€™s the equivalent Java code for the provided Python class. The Java code uses the `java.util.logging` package to implement similar functionality.

```java
package org.real.temp;

import java.util.logging.Level;
import java.util.logging.Logger;

public class Logger {
    private final Logger logger;

    public Logger(String name, Level level) {
        /**
         * Initializes a new logger instance.
         *
         * @param name: Name of the logger, typically the class name.
         * @param level: Logging level, default is Level.FINE.
         */
        this.logger = Logger.getLogger(name);
        this.logger.setLevel(level);
    }

    public void log(Level level, String message) {
        /**
         * Logs a message with the given level.
         *
         * @param level: Logging level for the message (e.g., Level.INFO).
         * @param message: Log message.
         */
        logger.log(level, message);
    }

    // Default constructor for convenience with DEBUG level
    public Logger(String name) {
        this(name, Level.FINE);
    }
}
```

### Notes:
1. The Java `Logger` class in `java.util.logging` is used to create a logger instance.
2. The constructor initializes the logger with a name and a logging level.
3. The `log` method logs messages at the specified logging level.
4. I added a default constructor for convenience, using `Level.FINE` to match Python's `DEBUG` level. You can change this as needed.