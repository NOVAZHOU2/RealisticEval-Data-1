Here's how you can translate the Python unittest test class into a Jest test case in JavaScript:

```javascript
// Importing necessary libraries
const { createLogger, format, transports } = require('winston');

// Define the Logger class
class Logger {
    constructor(name, level = 'debug') {
        this.logger = createLogger({
            level,
            format: format.combine(
                format.timestamp(),
                format.json()
            ),
            transports: [
                new transports.Console()
            ]
        });
    }

    log(level, message) {
        this.logger.log({ level, message });
    }
}

// Test file using Jest
describe('Logger', () => {
    let logger;

    beforeEach(() => {
        logger = new Logger('test-logger');
    });

    it('should log an info message', async () => {
        const spy = jest.spyOn(console, 'log');
        logger.log('info', 'This is an info message');
        expect(spy).toHaveBeenCalledWith(expect.any(Object));
        spy.mockRestore();
    });

    it('should log a debug message', async () => {
        const spy = jest.spyOn(console, 'log');
        logger.log('debug', 'This is a debug message');
        expect(spy).toHaveBeenCalledWith(expect.any(Object));
        spy.mockRestore();
    });
});
```

In this JavaScript code, we've used the `winston` library for logging which provides more flexibility compared to Python's built-in `logging`. We're also using Jest's mocking capabilities to verify that the console.log function was called with the correct parameters when the log method was invoked.