To convert the provided Python logger class into TypeScript, here's a corresponding implementation:

```typescript
import { createLogger, format, transports, Logger as WinstonLogger } from 'winston';

class Logger {
    private logger: WinstonLogger;

    constructor(name: string, level: string = 'debug') {
        this.logger = createLogger({
            level,
            format: format.combine(
                format.timestamp(),
                format.json()
            ),
            transports: [
                new transports.Console(),
            ],
        });
        this.logger.defaultMeta = { service: name };
    }

    log(level: string, message: string): void {
        this.logger.log(level, message);
    }
}
```

This TypeScript code uses the `winston` library to implement the logging functionality. Would you like to delve deeper into any specific part of it?