Sure! Here is the equivalent TypeScript code for the provided Python code:

```typescript
import * as log4js from 'log4js';

class Logger {
  private logger: log4js.Logger;

  constructor(name: string, level: log4js.Level = 'debug') {
    // Configure log4js
    log4js.configure({
      appenders: {
        console: { type: 'console' }
      },
      categories: {
        default: { appenders: ['console'], level }
      }
    });

    // Create logger
    this.logger = log4js.getLogger(name);
  }

  public log(level: log4js.Level, message: string): void {
    switch (level) {
      case 'debug':
        this.logger.debug(message);
        break;
      case 'info':
        this.logger.info(message);
        break;
      case 'warn':
        this.logger.warn(message);
        break;
      case 'error':
        this.logger.error(message);
        break;
      case 'fatal':
        this.logger.fatal(message);
        break;
      default:
        throw new Error('Invalid log level');
    }
  }
}

// Example usage
const logger = new Logger('example', 'debug');
logger.log('debug', 'This is a debug message');
logger.log('info', 'This is an info message');
logger.log('warn', 'This is a warning message');
logger.log('error', 'This is an error message');
logger.log('fatal', 'This is a fatal message');
```

### Explanation:
1. **Logger Class**:
   - The `Logger` class is defined with a private property `logger`.
   - The constructor initializes the logger using `log4js`, which is a popular logging library for Node.js.
   - The `log` method uses a switch statement to handle different log levels.

2. **log4js Configuration**:
   - `log4js` is configured to use a console appender with the specified log level.
   - The logger is created using `log4js.getLogger`.

3. **Log Levels**:
   - The `log` method uses a switch statement to call the appropriate logging method based on the provided log level.

4. **Example Usage**:
   - An example usage is provided at the end to demonstrate how to create and use the `Logger` instance.

This TypeScript code closely mirrors the functionality of the Python code while adapting it to TypeScript's static type system and idiomatic practices.