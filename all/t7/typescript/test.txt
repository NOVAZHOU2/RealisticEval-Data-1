Certainly! Here is the equivalent TypeScript code using Jest for testing the `Logger` class. We will use Jest's assertion methods and mocking capabilities to replicate the functionality of the Python unittest tests.

### TypeScript Code

First, let's define the `Logger` class in TypeScript:

```typescript
import * as log4js from 'log4js';

/**
 * A class representing a logger.
 */
class Logger {
  private logger: log4js.Logger;

  /**
   * Initializes a new logger instance.
   *
   * @param name - Name of the logger, typically __name__ to reference the module name.
   * @param level - Logging level, default is DEBUG.
   */
  constructor(name: string, level: log4js.Level = 'debug') {
    // Configure log4js
    log4js.configure({
      appenders: {
        console: { type: 'console' }
      },
      categories: {
        default: { appenders: ['console'], level }
      }
    });

    // Create logger
    this.logger = log4js.getLogger(name);
  }

  /**
   * Logs a message with the given level.
   *
   * @param level - Logging level for the message (e.g., 'debug', 'info').
   * @param message - Log message.
   */
  public log(level: log4js.Level, message: string): void {
    switch (level) {
      case 'debug':
        this.logger.debug(message);
        break;
      case 'info':
        this.logger.info(message);
        break;
      case 'warn':
        this.logger.warn(message);
        break;
      case 'error':
        this.logger.error(message);
        break;
      case 'fatal':
        this.logger.fatal(message);
        break;
      default:
        throw new Error('Invalid log level');
    }
  }
}
```

### Jest Test Class

Now, let's write the Jest test class:

```typescript
import { Logger } from './path/to/logger'; // Adjust the path as needed
import * as log4js from 'log4js';

describe('Logger', () => {
  let loggerName: string;
  let logger: Logger;

  beforeEach(() => {
    loggerName = 'TestLogger';
    logger = new Logger(loggerName);
  });

  describe('initialization', () => {
    it('should initialize the logger with the correct name and level', () => {
      expect(logger.logger.name).toBe(loggerName);
      expect(logger.logger.level).toBe('debug');
    });
  });

  describe('default logging level', () => {
    it('should default to DEBUG level if not specified', () => {
      const loggerDefault = new Logger('DefaultLogger');
      expect(loggerDefault.logger.level).toBe('debug');
    });
  });

  describe('console handler added', () => {
    it('should add a console handler to the logger', () => {
      const handlers = logger.logger.appender.getAppenders();
      expect(handlers.length).toBeGreaterThan(0);
      expect(handlers[0].type).toBe('console');
    });
  });
});
```

### Explanation:
1. **Logger Class**:
   - The `Logger` class is defined with a private property `logger`.
   - The constructor initializes the logger using `log4js`, which is a popular logging library for Node.js.
   - The `log` method uses a switch statement to handle different log levels.

2. **Jest Test Class**:
   - The `describe` blocks are used to group related tests.
   - The `beforeEach` hook sets up a new `Logger` instance before each test.
   - Jest assertions (`expect`) are used to verify the expected behavior of the `Logger` class.

3. **Initialization Test**:
   - Verifies that the logger is initialized with the correct name and level.

4. **Default Logging Level Test**:
   - Verifies that the logger defaults to the `DEBUG` level if not specified.

5. **Console Handler Added Test**:
   - Verifies that a console handler is added to the logger.

6. **Mocking and Assertions**:
   - Jest's `expect` is used to perform assertions on the properties and methods of the `Logger` class.

This TypeScript code preserves the original functionality and logic of the Python unittest tests while adapting them to Jest's testing framework.