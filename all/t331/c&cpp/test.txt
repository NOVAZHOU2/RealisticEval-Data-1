Hereâ€™s how you can convert your TypeScript Jest test cases into C++ test cases using the Catch2 framework:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <stdexcept>

// Assuming the calculateFinalPrice function is declared above or in another included file

TEST_CASE("calculateFinalPrice", "[calculateFinalPrice]") {
    SECTION("should calculate the final price correctly with valid inputs") {
        double result = calculateFinalPrice("200", "10");
        REQUIRE(result == 180);
    }

    SECTION("should return the original price when the discount is 0%") {
        double result = calculateFinalPrice("150", "0");
        REQUIRE(result == 150);
    }

    SECTION("should return zero when the discount is 100%") {
        double result = calculateFinalPrice("100", "100");
        REQUIRE(result == 0);
    }
}
```

### Explanation:
- **Catch2 Header**: The `#define CATCH_CONFIG_MAIN` directive allows Catch2 to provide a main function, and you include the necessary headers.
- **TEST_CASE**: Defines a test case for the `calculateFinalPrice` function.
- **SECTION**: Each section represents a separate test scenario. You can describe what each test is supposed to do.
- **REQUIRE**: This assertion checks if the result matches the expected value, similar to Jest's `expect(...).toBe(...)`.

Make sure you have Catch2 set up in your C++ project to run these tests successfully!