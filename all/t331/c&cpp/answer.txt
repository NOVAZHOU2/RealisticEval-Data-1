Here's the equivalent C++ code for your TypeScript function:

```cpp
#include <iostream>
#include <stdexcept>
#include <string>
#include <cmath>
#include <sstream>

double calculateFinalPrice(const std::string& price, const std::string& discount) {
    double priceValue;
    double discountValue;

    // Convert strings to double
    std::istringstream(price) >> priceValue;
    std::istringstream(discount) >> discountValue;

    // Validate the price and discount
    if (std::isnan(priceValue) || std::isnan(discountValue)) {
        throw std::invalid_argument("Invalid price or discount value.");
    }

    if (discountValue < 0 || discountValue > 100) {
        throw std::invalid_argument("Discount percentage must be between 0 and 100.");
    }

    // Calculate the final price
    double discountAmount = priceValue * discountValue / 100;
    double finalPrice = priceValue - discountAmount;

    // Round to two decimal places
    return std::round(finalPrice * 100) / 100;
}

int main() {
    try {
        std::string price = "100.00";
        std::string discount = "15";
        double finalPrice = calculateFinalPrice(price, discount);
        std::cout << "Final Price: " << finalPrice << std::endl;
    } catch (const std::invalid_argument& e) {
        std::cerr << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
- **Function Signature**: The `calculateFinalPrice` function takes two `std::string` parameters.
- **String Conversion**: The code uses `std::istringstream` to convert strings to doubles.
- **Validation**: It checks for valid numbers and range of discount.
- **Calculations**: The discount is applied, and the final price is calculated.
- **Rounding**: The final price is rounded to two decimal places.
- **Error Handling**: Exceptions are thrown for invalid inputs, similar to how the TypeScript version throws errors. 

You can test the function in the `main()` function, where it tries to calculate the final price based on given inputs.