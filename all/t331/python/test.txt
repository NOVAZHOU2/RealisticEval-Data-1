Hereâ€™s how to convert the provided TypeScript Jest test cases into Python unit tests using the unittest framework. This code maintains the same test structure and logic as your original Jest tests.
python
import unittest

def calculate_final_price(price: str, discount: str) -> float:
    """ 
    Calculates the final price after applying a discount to the original price. 
    Both price and discount are expected as strings and should represent valid numbers. 
    The discount should be a percentage value between 0 and 100.
    """
    try:
        price_value = float(price)
        discount_value = float(discount)
    except ValueError:
        raise ValueError('Invalid price or discount value.')

    if discount_value < 0 or discount_value > 100:
        raise ValueError('Discount percentage must be between 0 and 100.')

    discount_amount = price_value * discount_value / 100
    final_price = price_value - discount_amount

    return round(final_price, 2)


class TestCalculateFinalPrice(unittest.TestCase):

    def test_calculate_final_price_with_valid_inputs(self):
        """ 
        should calculate the final price correctly with valid inputs 
        """
        result = calculate_final_price('200', '10')
        self.assertEqual(result, 180.0)

    def test_discount_is_zero(self):
        """ 
        should return the original price when the discount is 0% 
        """
        result = calculate_final_price('150', '0')
        self.assertEqual(result, 150.0)

    def test_discount_is_hundred(self):
        """ 
        should return zero when the discount is 100% 
        """
        result = calculate_final_price('100', '100')
        self.assertEqual(result, 0.0)

# To run the tests
if __name__ == '__main__':
    unittest.main()
Explanation of the Python Code:
Importing unittest:
The unittest module is imported, which provides the framework for writing unit tests in Python.
Function Implementation:
The calculate_final_price function is defined, which is the same as in the previous responses. This function is what we are testing.
Test Class Definition:
A test class named TestCalculateFinalPrice is created, inheriting from unittest.TestCase.
Test Methods:
Each test case from the original Jest tests is converted into a method within the test class.
The method names start with test_, which is required for unittest to recognize them as test cases.
Each test method uses self.assertEqual() to compare the result of calculate_final_price to the expected value.
Descriptive docstrings are provided for each test method, explaining what the test is verifying.
Running the Tests:
The standard if __name__ == '__main__': block is included to allow the tests to be run directly from the command line.
Running the Tests
You can save this code in a Python file (e.g., test_calculate_final_price.py) and run it using Python. The unittest framework will automatically find the test cases and execute them, providing output for any failures or successes.