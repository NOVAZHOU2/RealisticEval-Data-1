Here’s how to translate the TypeScript function signature and its comments into Python, keeping the comments intact while adhering to Python's conventions:
python
def calculate_final_price(price: str, discount: str) -> float:
    """ 
    Calculates the final price after applying a discount to the original price. 
    Both price and discount are expected as strings and should represent valid numbers. 
    The discount should be a percentage value between 0 and 100.

    Args:
        price (str): The original price as a string.
        discount (str): The discount percentage as a string.

    Returns:
        float: The final price after applying the discount, rounded to two decimal places.

    Raises:
        ValueError: Will throw an error if price or discount aren't valid numbers or if the discount is out of the expected range.
    """
    # Function implementation goes here
    pass  # Placeholder for the function body
Key Changes and Explanations:
Function Signature:
The function name is converted from calculateFinalPrice to calculate_final_price, following Python’s naming conventions (snake_case).
The parameter types are retained as str and the return type is specified as float.
Docstring:
The original comments have been converted into a Python docstring. This is placed directly under the function definition and formatted to align with Python conventions.
The docstring includes:
A brief description of the function.
Descriptions for each parameter.
The return type and description.
The exceptions raised by the function.
Function Body:
The actual implementation of the function is indicated with a pass statement, which acts as a placeholder.
This structure allows you to implement the function logic later while keeping the documentation clear and informative.