Hereâ€™s how to convert the provided TypeScript code that detects if a string is in CAMEL_CASE into Python code, including comments and regular expression logic:
TypeScript Code
typescript
/**
 * Detects whether the string is in CAMEL_CASE.
 *
 * @param {string} input - The string to check.
 * @returns {boolean} - True if the string is in CAMEL_CASE, otherwise false.
 */
function isCamelCase(input: string): boolean {
    // Regular expression to match CAMEL_CASE
    const camelCaseRegex = /^[a-z]+([A-Z][a-z]*)*$/;
    return camelCaseRegex.test(input);
}
Converted Python Code
python
import re

def is_camel_case(input: str) -> bool:
    """
    Detects whether the string is in CAMEL_CASE.

    :param input: The string to check.
    :return: True if the string is in CAMEL_CASE, otherwise False.
    """
    # Regular expression to match CAMEL_CASE
    camel_case_regex = r'^[a-z]+([A-Z][a-z]*)*$'
    return bool(re.match(camel_case_regex, input))

# Example usage:
if __name__ == "__main__":
    print(is_camel_case('camelCase'))  # True
    print(is_camel_case('CamelCase'))   # False
    print(is_camel_case('camelcase'))    # False
    print(is_camel_case('camelCaseExample'))  # True
Explanation:
Importing the re Module:
The re module is imported for regular expression operations.
Function Definition:
The function name is converted from isCamelCase (CamelCase) to is_camel_case (snake_case) to follow Python naming conventions.
The parameter input is typed as str, and the return type is specified as bool.
Docstring:
The comments from the TypeScript code are transformed into a Python docstring format.
The @param and @returns annotations are changed to :param and :return.
Regular Expression:
The regular expression camel_case_regex is defined as a raw string (r'...') to avoid issues with escape sequences.
Matching:
The re.match() function is used to check if the input string matches the regex, and bool() is used to return True or False.
Example Usage:
An example usage block is included to demonstrate how to call the function. This part is not present in the TypeScript version but can be useful for testing in Python.
This Python code effectively mirrors the logic of the original TypeScript function while adhering to Python syntax and conventions.