Certainly! Below is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The test cases are converted to use JUnit annotations and assertions, ensuring that the functionality and logic of the tests are preserved.

```java
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

public class Tester {

    private static final double DELTA = 1e-15;

    @Test
    public void testIdentityQuaternion() {
        double[] quaternion = {1.0, 0.0, 0.0, 0.0};
        double expectedAngle = 0.0;
        assertEquals(expectedAngle, quaternionToAngle(quaternion), DELTA);
    }

    @Test
    public void test180DegreesRotation() {
        double[] quaternion = {0.0, 0.0, 1.0, 0.0};  // 180 degrees around Z axis
        double expectedAngle = Math.PI;  // 180 degrees in radians
        assertEquals(expectedAngle, quaternionToAngle(quaternion), DELTA);
    }

    @Test
    public void test360DegreesRotation() {
        double[] quaternion = {1.0, 0.0, 0.0, 0.0};  // Full rotation
        double expectedAngle = 0.0;  // 360 degrees is equivalent to 0 degrees
        assertEquals(expectedAngle, quaternionToAngle(quaternion), DELTA);
    }

    @Test
    public void testNonUnitQuaternion() {
        double[] quaternion = {0.5, 0.5, 0.5, 0.5};  // This is not normalized
        // Normalize the quaternion first
        double norm = Math.sqrt(Arrays.stream(quaternion).map(x -> x * x).sum());
        double[] normalizedQuaternion = Arrays.stream(quaternion).map(x -> x / norm).toArray();
        double expectedAngle = 2 * Math.acos(normalizedQuaternion[0]);  // Should be same angle
        assertEquals(expectedAngle, quaternionToAngle(normalizedQuaternion), DELTA);
    }

    @Test
    public void testInvalidQuaternion() {
        assertThrows(IllegalArgumentException.class, () -> {
            quaternionToAngle(new double[]{1.0, 0.0, 0.0});  // Only 3 components
        });
    }

    // Utility method to convert a quaternion to an angle
    private double quaternionToAngle(double[] quaternion) {
        // Ensure the quaternion is a valid 4-element array
        if (quaternion == null || quaternion.length != 4) {
            throw new IllegalArgumentException("Quaternion must have 4 components (w, x, y, z)");
        }

        double w = quaternion[0];
        double x = quaternion[1];
        double y = quaternion[2];
        double z = quaternion[3];

        // Calculate the angle in radians
        return 2 * Math.acos(w);
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration is `org.real.temp`.
2. **Class Definition**: The class `Tester` is defined.
3. **JUnit Annotations**:
   - `@Test`: Marks each method as a test case.
4. **Assertions**:
   - `assertEquals`: Used to check if the actual value matches the expected value within a specified delta.
   - `assertThrows`: Used to verify that a specific exception is thrown.
5. **Test Methods**:
   - `testIdentityQuaternion`: Tests the identity quaternion.
   - `test180DegreesRotation`: Tests a quaternion representing a 180-degree rotation.
   - `test360DegreesRotation`: Tests a quaternion representing a full 360-degree rotation.
   - `testNonUnitQuaternion`: Tests a non-unit quaternion and normalizes it before checking the angle.
   - `testInvalidQuaternion`: Tests that an invalid quaternion raises an `IllegalArgumentException`.
6. **Utility Method**:
   - `quaternionToAngle`: A utility method to calculate the angle from a quaternion, which is used in the test methods.

This Java code preserves the functionality and logic of the original Python test cases while adhering to JUnit's syntax and conventions.