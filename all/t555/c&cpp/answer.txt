Sure! Below is the equivalent C++ code for the given Python function. This code converts a quaternion to a rotation angle in radians, ensuring that the quaternion has four components and using the appropriate C++ syntax and features:

```cpp
#include <cmath>
#include <vector>
#include <stdexcept>

/**
 * Converts a quaternion to a rotation angle in radians.
 *
 * @param quaternion A vector containing the quaternion components (w, x, y, z)
 * @return The rotation angle in radians
 */
double quaternion_to_angle(const std::vector<double>& quaternion) {
    // Ensure the quaternion is a valid 4-element vector
    if (quaternion.size() != 4) {
        throw std::invalid_argument("Quaternion must have 4 components (w, x, y, z)");
    }

    double w = quaternion[0];
    double x = quaternion[1];
    double y = quaternion[2];
    double z = quaternion[3];

    // Calculate the angle in radians
    double angle = 2 * std::acos(w);

    return angle;
}

// Example usage
int main() {
    try {
        std::vector<double> quaternion = {0.7071068, 0.0, 0.0, 0.7071068};
        double angle = quaternion_to_angle(quaternion);
        std::cout << "Rotation angle: " << angle << " radians" << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**: 
   - `<cmath>` is included for mathematical functions like `acos`.
   - `<vector>` is included to use `std::vector` for representing the quaternion.
   - `<stdexcept>` is included for throwing exceptions.

2. **Function Definition**:
   - The function `quaternion_to_angle` takes a `std::vector<double>` as input, which represents the quaternion components.
   - It checks if the quaternion has exactly four elements; otherwise, it throws a `std::invalid_argument`.

3. **Angle Calculation**:
   - The quaternion components are extracted from the vector.
   - The angle is calculated using `std::acos` and returned.

4. **Example Usage**:
   - In the `main` function, an example quaternion is defined, and the function is called with this quaternion.
   - The result is printed, and any exceptions are caught and handled.

This code maintains the same functionality and logic as the original Python code but adapts it to C++ syntax and features.