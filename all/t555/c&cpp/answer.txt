Here is an equivalent C++ code for your Python function:

```C++
#include <cmath>
#include <tuple>

float quaternionToAngle(std::tuple<float, float, float, float> quaternion) {
    // Extract the components of the quaternion
    float w = std::get<0>(quaternion);
    float x = std::get<1>(quaternion);
    float y = std::get<2>(quaternion);
    float z = std::get<3>(quaternion);

    // Calculate the rotation angle in radians
    return 2 * atan2(sqrt(x*x + y*y + z*z), w);
}
```

And here's the equivalent C code:

```C
#include <math.h>
#include <stdio.h>

float quaternionToAngle(float quaternion[]) {
    // Extract the components of the quaternion
    float w = quaternion[0];
    float x = quaternion[1];
    float y = quaternion[2];
    float z = quaternion[3];

    // Calculate the rotation angle in radians
    return 2 * atan2(sqrtf(x*x + y*y + z*z), w);
}

int main() {
    float q[] = {0.7071, 0.0, 0.7071, 0.0};
    printf("%f\n", quaternionToAngle(q));
    return 0;
}
```

Note that in C++, you need to pass the array by reference (as shown in the `main` function). Also, the `sqrt` and `atan2` functions from the `<cmath>` library are used instead of their Python counterparts.