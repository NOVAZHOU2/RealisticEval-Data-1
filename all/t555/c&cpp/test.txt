Sure! Below is the equivalent C++ test case using Catch2 for the provided Python unittest test class. Note that Catch2 uses `TEST_CASE` and `REQUIRE` macros to define test cases and assertions respectively.

```cpp
#include <catch2/catch.hpp>
#include <cmath>

// Assuming quaternion_to_angle function is defined here
double quaternion_to_angle(const std::tuple<double, double, double, double>& quaternion) {
    // Your implementation here
}

TEST_CASE("Quaternion to Angle Conversion", "[quaternion]") {
    auto q1 = std::make_tuple(0.7071, 0.0, 0.0, 0.7071);
    REQUIRE(abs(quaternion_to_angle(q1) - M_PI / 4) < 1e-6);

    auto q2 = std::make_tuple(1.0, 0.0, 0.0, 0.0);
    REQUIRE(abs(quaternion_to_angle(q2) - 0.0) < 1e-6);

    auto q3 = std::make_tuple(0.0, 0.7071, 0.0, 0.7071);
    REQUIRE(abs(quaternion_to_angle(q3) - M_PI / 2) < 1e-6);

    auto q4 = std::make_tuple(-0.7071, 0.0, 0.0, 0.7071);
    REQUIRE(abs(quaternion_to_angle(q4) + M_PI / 4) < 1e-6);

    auto q5 = std::make_tuple(0.0, 0.0, 0.7071, 0.7071);
    REQUIRE(abs(quaternion_to_angle(q5) - M_PI / 2) < 1e-6);

    auto q6 = std::make_tuple(0.0, -0.7071, 0.0, 0.7071);
    REQUIRE(abs(quaternion_to_angle(q6) + M_PI / 2) < 1e-6);
}
```

### Explanation:
1. **Include Catch2 Header**: The `#include <catch2/catch.hpp>` directive includes the Catch2 library.
2. **Function Definition**: The `quaternion_to_angle` function is assumed to be implemented elsewhere in your project.
3. **Test Case**: The `TEST_CASE` macro defines a test case named "Quaternion to Angle Conversion".
4. **Assertions**: The `REQUIRE` macro is used to assert that the output of `quaternion_to_angle` matches the expected values within a small tolerance (`1e-6`).

Make sure you have Catch2 installed and properly configured in your C++ project to compile and run these tests.