Sure! Below is the equivalent C++ code for the given Python function `sanitize_filename`. This C++ code will remove illegal characters from a Windows file path string.

```cpp
#include <iostream>
#include <string>
#include <cctype>

std::string sanitize_filename(const std::string& filename) {
    std::string sanitized;
    for (char ch : filename) {
        // Check if the character is an illegal character in Windows filenames
        if (ch == '<' || ch == '>' || ch == ':' || ch == '"' || ch == '/' || ch == '\\' || ch == '|' || ch == '?' || ch == '*') {
            continue;  // Skip the illegal character
        }
        sanitized += ch;
    }
    return sanitized;
}

int main() {
    std::string filename = "example<file>:name\"/with\\illegal*characters|?";
    std::string sanitizedFilename = sanitize_filename(filename);
    std::cout << "Original Filename: " << filename << std::endl;
    std::cout << "Sanitized Filename: " << sanitizedFilename << std::endl;
    return 0;
}
```

### Explanation:
1. **Include Necessary Headers**: We include `<iostream>` for input/output operations and `<string>` for string manipulation.
2. **Function Definition**:
   - `sanitize_filename` takes a constant reference to a `std::string` and returns a sanitized `std::string`.
   - It iterates through each character of the input string.
   - If the character is one of the illegal characters in Windows filenames (`<`, `>`, `:`, `"`, `/`, `\`, `|`, `?`, `*`), it skips that character.
   - Otherwise, it appends the character to the `sanitized` string.
3. **Main Function**:
   - Demonstrates the usage of `sanitize_filename` with an example filename containing illegal characters.
   - Prints both the original and sanitized filenames.

This C++ code should work similarly to the provided Python function, removing illegal characters from a Windows file path string.