Certainly! Below is the equivalent C++ code for the provided Python function. This C++ code will sanitize a filename by removing illegal characters and limiting its length to ensure it is safe to use as a Windows filename.

```cpp
#include <iostream>
#include <string>
#include <regex>

// Function to remove illegal characters from Windows file path string
std::string sanitize_filename(const std::string& filename) {
    // Define the illegal characters for Windows filenames
    std::regex illegal_chars_pattern("[<>:\"/\\\\|?*\\x00-\\x1F]");

    // Replace illegal characters with an underscore
    std::string sanitized = std::regex_replace(filename, illegal_chars_pattern, "_");

    // Optionally, limit the length of the filename
    // Windows has a maximum path length of 260 characters
    const size_t max_length = 255;
    if (sanitized.length() > max_length) {
        sanitized = sanitized.substr(0, max_length);
    }

    return sanitized;
}

int main() {
    // Example usage
    std::string original_filename = "example<file>.txt";
    std::string sanitized_filename = sanitize_filename(original_filename);

    std::cout << "Original: " << original_filename << std::endl;
    std::cout << "Sanitized: " << sanitized_filename << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**: 
   - `#include <iostream>` for input/output operations.
   - `#include <string>` for string manipulation.
   - `#include <regex>` for regular expression handling.

2. **Function Definition**:
   - `sanitize_filename` takes a `std::string` as input and returns a `std::string`.
   - It uses a regular expression pattern to match and replace illegal characters with an underscore.
   - It limits the length of the sanitized string to 255 characters if necessary.

3. **Regular Expression Pattern**:
   - The pattern `[<>:"/\\|?*\x00-\x1F]` matches all illegal characters for Windows filenames.

4. **String Replacement**:
   - `std::regex_replace` is used to replace all occurrences of illegal characters with an underscore.

5. **Length Limitation**:
   - If the sanitized string exceeds 255 characters, it is truncated using `substr`.

6. **Example Usage**:
   - In the `main` function, an example filename is sanitized and printed to demonstrate the functionality.

This code should provide the same functionality as the Python version but adapted to C++ syntax and features.