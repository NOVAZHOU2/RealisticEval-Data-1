Sure! Below is the equivalent TypeScript test case using Jest for the `sanitizeFilename` function:

```typescript
import { sanitizeFilename } from './path-to-your-sanitize-filename-function'; // Adjust the import path accordingly

describe('sanitizeFilename', () => {
  it('should remove illegal characters from a Windows file path string', () => {
    const filename = 'example<>"|?*:/\\filename.txt';
    const expected = 'examplefilename.txt';
    expect(sanitizeFilename(filename)).toBe(expected);
  });

  it('should handle filenames without illegal characters', () => {
    const filename = 'valid-filename.txt';
    const expected = 'valid-filename.txt';
    expect(sanitizeFilename(filename)).toBe(expected);
  });

  it('should handle empty strings', () => {
    const filename = '';
    const expected = '';
    expect(sanitizeFilename(filename)).toBe(expected);
  });

  it('should handle filenames with spaces', () => {
    const filename = 'file name.txt';
    const expected = 'file name.txt';
    expect(sanitizeFilename(filename)).toBe(expected);
  });
});
```

In this example:
- We import the `sanitizeFilename` function from the appropriate module.
- We use `describe` to group related tests together.
- We use `it` to define individual test cases.
- We use `expect` to assert the expected behavior of the `sanitizeFilename` function.

Make sure to adjust the import path (`./path-to-your-sanitize-filename-function`) to match where your `sanitizeFilename` function is located in your project.