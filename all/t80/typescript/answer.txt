Certainly! Below is the equivalent TypeScript code for the provided Python function. This includes defining types and using regular expressions in TypeScript:

```typescript
function sanitizeFilename(filename: string): string {
    /**
     * Remove illegal characters from Windows file path string.
     *
     * @param {string} filename - The original filename string to be sanitized.
     * @returns {string} A sanitized string that is safe to use as a Windows filename.
     */
    // Define the illegal characters for Windows filenames
    const illegalCharsPattern = /[<>:"/\\|?*\x00-\x1F]/g;

    // Replace illegal characters with an underscore
    let sanitized = filename.replace(illegalCharsPattern, '_');

    // Optionally, you can also limit the length of the filename
    // Windows has a maximum path length of 260 characters
    const maxLength = 255;
    if (sanitized.length > maxLength) {
        sanitized = sanitized.substring(0, maxLength);
    }

    return sanitized;
}

// Example usage
console.log(sanitizeFilename("example<file>.txt")); // Output: example_file_.txt
```

### Explanation:
1. **Function Definition**: The `sanitizeFilename` function is defined with a single parameter `filename` of type `string`.
2. **Regular Expression**: The illegal characters pattern is defined using a regular expression in TypeScript, similar to Python.
3. **String Replacement**: The `replace` method is used to substitute illegal characters with an underscore.
4. **Length Limitation**: If the sanitized string exceeds the maximum length (`maxLength`), it is truncated to fit within the limit.
5. **Example Usage**: An example call to the function demonstrates its functionality.

This TypeScript code maintains the same functionality and logic as the Python code, ensuring that the output is consistent.