Certainly! Below is the equivalent TypeScript test class using Jest. The provided Python unittest class will be converted to a Jest test suite, ensuring that the functionality and logic of the tests are preserved. Type annotations and Jest assertions are used appropriately.

### TypeScript Code

First, let's define the `MyClass` and the `methodArgTypeCheck` function in TypeScript:

```typescript
import { inspect } from "util";

class MyClass {
    myMethod(this: MyClass, arg1: number, arg2: string, optionalArg: number = 3.14): void {
        // Implementation of myMethod
    }
}

/**
 * Checks that the arguments passed to a given method object (e.g., method of a class) comply with their
 * expected types, based on the method's signature. If there's a discrepancy, it raises an error.
 *
 * @param methodObj - The method for which arguments are checked.
 * @param args - Positional arguments passed to the method.
 * @param kwargs - Keyword arguments passed to the method.
 *
 * Optional argument:
 *   exclude (Array<string>): Names of parameters to exclude from the type check.
 */
function methodArgTypeCheck(methodObj: any, ...args: any[]): void {
    const kwargs = args[args.length - 1];
    const exclude = kwargs?.exclude || [];
    exclude.push('this');  // Exclude 'this' by default since it refers to the method's instance

    const argsSignature = inspect(methodObj);
    const boundArgs = bindArguments(argsSignature, args.slice(0, -1));

    const expectedTypes = Object.fromEntries(
        Object.entries(argsSignature.parameters).filter(([paramName]) => !exclude.includes(paramName))
            .map(([paramName, param]) => [paramName, param.type])
    );

    for (const [argName, argType] of Object.entries(expectedTypes)) {
        if (boundArgs.hasOwnProperty(argName)) {
            const actualValue = boundArgs[argName];
            if (!isInstanceOf(actualValue, argType)) {
                const passedArgType = typeof actualValue;
                const expectedArgType = argType;
                throw new Error(
                    `${argName} should be of type ${expectedArgType}, but got type ${passedArgType} instead.`
                );
            }
        }
    }
}

// Helper function to simulate binding arguments
function bindArguments(signature: any, args: any[]): Record<string, any> {
    const boundArgs = {};
    const parameterNames = Object.keys(signature.parameters);
    parameterNames.forEach((paramName, index) => {
        boundArgs[paramName] = args[index];
    });

    return boundArgs;
}

// Helper function to simulate checking if a value is an instance of a type
function isInstanceOf(value: any, type: string): boolean {
    switch (type) {
        case 'number':
            return typeof value === 'number';
        case 'string':
            return typeof value === 'string';
        case 'boolean':
            return typeof value === 'boolean';
        case 'object':
            return value !== null && typeof value === 'object';
        case 'function':
            return typeof value === 'function';
        default:
            return false;
    }
}

// Example usage
const obj = new MyClass();

describe('TestMethodArgTypeCheck', () => {
    it('test_correct_types', () => {
        expect(() => {
            methodArgTypeCheck(MyClass.prototype.myMethod, obj, 10, 'hello', { optionalArg: 3.14 });
        }).not.toThrow();
    });

    it('test_missing_argument', () => {
        expect(() => {
            methodArgTypeCheck(MyClass.prototype.myMethod, obj, 10);  // Missing arg2
        }).toThrow(TypeError);
    });
});
```

### Explanation:
1. **Class Definition**: The `MyClass` class is defined with the `myMethod` method, including type annotations.
2. **Function Definition**: The `methodArgTypeCheck` function is defined with appropriate type annotations and helper functions (`bindArguments` and `isInstanceOf`).
3. **Jest Test Suite**: The `describe` block sets up the test suite named `TestMethodArgTypeCheck`.
4. **Test Cases**:
   - `test_correct_types`: Uses `expect(() => {...}).not.toThrow()` to ensure that the function does not throw an error when correct types are passed.
   - `test_missing_argument`: Uses `expect(() => {...}).toThrow(TypeError)` to ensure that the function throws a `TypeError` when a required argument is missing.

This approach ensures that the TypeScript code preserves the original functionality and logic of the Python unittest class, while adapting it to Jest's testing framework.