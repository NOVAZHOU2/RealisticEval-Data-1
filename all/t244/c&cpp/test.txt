Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code Using Catch2

First, make sure you have Catch2 installed and included in your project. You can include Catch2 using the following headers:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <catch2/generators/catch_generators_all.hpp>

#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <typeinfo>
#include <functional>

// A simple type checker function
template<typename T>
bool is_of_type(const std::type_info& expected_type, const void* value) {
    return typeid(*static_cast<const T*>(value)) == expected_type;
}

// A helper function to get the name of a type
template<typename T>
std::string type_name() {
    return typeid(T).name();
}

// A class to simulate inspect.signature behavior
class Signature {
public:
    struct Parameter {
        std::string name;
        const std::type_info* annotation;
    };

    Signature(std::function<void()> method) {
        // Simulate getting the signature of the method
        // For simplicity, we assume a fixed set of parameters
        parameters.push_back({ "arg1", &typeid(int) });
        parameters.push_back({ "arg2", &typeid(std::string) });
        parameters.push_back({ "optional_arg", &typeid(float) });
    }

    std::vector<Parameter> parameters;
};

// Function to check argument types
void method_arg_type_check(std::function<void()> method, std::map<std::string, void*> args, std::vector<std::string> exclude = {}) {
    /*
     * Checks that the arguments passed to a given method object (e.g., method of a class) comply with their
     * expected types, based on the method's signature. If there's a discrepancy, it raises a runtime_error.
     *
     * Args:
     *     method (std::function<void()>): The method for which arguments are checked.
     *     args (std::map<std::string, void*>): Arguments passed to the method.
     *     exclude (std::vector<std::string>): Names of parameters to exclude from the type check.
     */

    Signature sig(method);

    // Exclude 'self' by default
    exclude.push_back("self");

    // Prepare the expected types dictionary
    std::map<std::string, const std::type_info*> expected_types;
    for (const auto& param : sig.parameters) {
        if (std::find(exclude.begin(), exclude.end(), param.name) == exclude.end()) {
            expected_types[param.name] = param.annotation;
        }
    }

    // Check each argument against its expected type
    for (const auto& [arg_name, arg_type] : expected_types) {
        if (args.find(arg_name) != args.end()) {
            void* actual_value = args.at(arg_name);
            if (!is_of_type<int>(*arg_type, actual_value)) {
                std::string passed_arg_type = type_name<decltype(actual_value)>();
                std::string expected_arg_type = type_name<int>();
                throw std::runtime_error(
                    arg_name + " should be of type " + expected_arg_type + ", but got type " + passed_arg_type + " instead.");
            }
        }
    }
}

// Example usage
struct MyClass {
    void my_method(int arg1, std::string arg2, float optional_arg = 3.14f) {}
};

TEST_CASE("Test Method Argument Type Check") {
    MyClass obj;
    auto method = std::bind(&MyClass::my_method, &obj, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3);

    SECTION("Test with correct argument types") {
        std::map<std::string, void*> args = {
            { "arg1", static_cast<void*>(new int(10)) },
            { "arg2", static_cast<void*>(new std::string("hello")) },
            { "optional_arg", static_cast<void*>(new float(3.14f)) }
        };

        REQUIRE_NOTHROW(method_arg_type_check(method, args));

        // Clean up dynamically allocated memory
        delete static_cast<int*>(args["arg1"]);
        delete static_cast<std::string*>(args["arg2"]);
        delete static_cast<float*>(args["optional_arg"]);
    }

    SECTION("Test with missing required argument") {
        std::map<std::string, void*> args = {
            { "arg1", static_cast<void*>(new int(10)) }
        };

        REQUIRE_THROWS_AS(method_arg_type_check(method, args), std::runtime_error);
    }
}
```

### Explanation:
1. **Catch2 Headers**: Include the necessary Catch2 headers.
2. **Type Checker**: The `is_of_type` template function checks if a value is of the expected type.
3. **Type Name**: The `type_name` template function returns the name of a type.
4. **Signature Class**: The `Signature` class simulates the behavior of `inspect.signature` in Python.
5. **Argument Type Check**: The `method_arg_type_check` function checks the types of the arguments passed to the method.
6. **Test Class**: The `TEST_CASE` macro defines the test case, and `SECTION` macros define individual test sections.
7. **Assertions**:
   - `REQUIRE_NOTHROW`: Ensures that the function does not throw an exception when correct types are passed.
   - `REQUIRE_THROWS_AS`: Ensures that the function throws a specific exception when incorrect types are passed.
8. **Example Usage**: Demonstrates how to use the `method_arg_type_check` function with a sample method and arguments.
9. **Clean Up**: Cleans up dynamically allocated memory after the tests.

This C++ code preserves the original functionality and logic of the Python unittest class while adapting to the Catch2 testing framework.