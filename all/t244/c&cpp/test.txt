Certainly! Below is an equivalent C++ unit test using Catch2 for the provided Python `unittest` test class. Note that the actual implementation of `method_arg_type_check` in C++ would need to be adapted according to your specific requirements and the types you expect to check.

First, ensure you have Catch2 installed. You can install it via vcpkg or manually download it.

Here's how you might write the C++ test case using Catch2:

```cpp
#include <catch2/catch.hpp>
#include <functional>
#include <vector>
#include <string>

// Assuming we have a function to check method argument types
bool method_arg_type_check(std::function<void()> method_obj, const std::vector<std::string>& args, const std::vector<std::string>& kwargs, const std::vector<std::string>& exclude = {}) {
    // Implementation of the type checking logic goes here
    return true; // Placeholder
}

TEST_CASE("Method Argument Type Check", "[type-check]") {
    auto lambda_with_args = []() -> void {
        int x = 10;
        double y = 3.14;
        std::cout << "x: " << x << ", y: " << y << std::endl;
    };

    std::vector<std::string> positional_args = {"int", "double"};
    std::vector<std::string> keyword_args = {};
    std::vector<std::string> exclude_params = {};

    REQUIRE(method_arg_type_check(lambda_with_args, positional_args, keyword_args, exclude_params));

    // Example of a failing test
    auto lambda_with_wrong_types = []() -> void {
        std::string x = "hello";
        double y = 3.14;
        std::cout << "x: " << x << ", y: " << y << std::endl;
    };

    REQUIRE_THROWS_AS(method_arg_type_check(lambda_with_wrong_types, positional_args, keyword_args, exclude_params), std::invalid_argument);
}
```

### Explanation:
1. **Catch2 Includes**: We include the necessary headers for Catch2 testing.
2. **Function Signature**: The `method_arg_type_check` function is assumed to take a `std::function<void()>`, vectors of strings representing positional and keyword arguments, and an optional vector of strings to exclude from the type check.
3. **Test Case**: We define a test case using `TEST_CASE`.
4. **Lambda Functions**: We create lambda functions to simulate methods with different argument types.
5. **Assertions**: We use `REQUIRE` to assert that the type check passes when the arguments match the expected types. For a failing test, we use `REQUIRE_THROWS_AS` to assert that the type check throws an exception when the arguments do not match the expected types.

This is a basic example to get you started. Depending on your specific requirements, you may need to adapt the implementation of `method_arg_type_check` and the test cases accordingly.