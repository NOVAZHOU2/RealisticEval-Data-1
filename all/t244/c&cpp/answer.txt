Sure! Below is a C++ version of the Python function `method_arg_type_check`. Note that C++ does not have built-in support for introspection like Python, so we will need to use additional libraries such as Boost.Python or SWIG if you want to perform similar operations at runtime. For simplicity, I'll provide a basic implementation without using any external libraries.

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <stdexcept>

// Define a simple structure to hold parameter information
struct ParameterInfo {
    std::string name;
    std::string type; // Simplified type representation
};

// Function to get parameter information from a function pointer
std::vector<ParameterInfo> getFunctionParameters(void (*func)()) {
    // This is a placeholder implementation. In practice, you would need to use
    // a library like Boost.Python or SWIG to extract function signatures at runtime.
    std::vector<ParameterInfo> params;
    params.push_back({"param1", "int"});
    params.push_back({"param2", "double"});
    return params;
}

// Main function to check method argument types
void method_arg_type_check(void (*method)(int, double), int arg1, double arg2) {
    auto params = getFunctionParameters(method);

    // Check positional arguments
    if (params.size() > 0 && typeid(arg1).name() != params[0].type) {
        throw std::invalid_argument("Type mismatch in argument 'param1'");
    }
    if (params.size() > 1 && typeid(arg2).name() != params[1].type) {
        throw std::invalid_argument("Type mismatch in argument 'param2'");
    }

    std::cout << "All arguments match!" << std::endl;
}

// Example usage
void exampleMethod(int param1, double param2) {
    // Method implementation
}

int main() {
    try {
        method_arg_type_check(exampleMethod, 42, 3.14);
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **ParameterInfo Structure**: A simple structure to hold parameter names and types.
2. **getFunctionParameters Function**: A placeholder function to simulate getting function parameters. In a real-world scenario, you would need to use a library like Boost.Python or SWIG to extract function signatures at runtime.
3. **method_arg_type_check Function**: The main function that checks the types of the arguments passed to the method against the expected types.
4. **Example Usage**: Demonstrates how to use the `method_arg_type_check` function with an example method.

### Notes:
- The `typeid(arg1).name()` returns the mangled name of the type, which might vary between compilers. You may need to implement a more robust type comparison mechanism depending on your requirements.
- The `getFunctionParameters` function is a placeholder and should be replaced with actual logic to extract function signatures at runtime using a suitable library.

This C++ code provides a basic framework for type checking function arguments. Depending on your specific needs, you may need to extend and refine it further.