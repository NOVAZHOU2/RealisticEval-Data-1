Sure! Here is the JavaScript equivalent of your Python function signature using TypeScript, which is a superset of JavaScript that adds static types:

```typescript
/**
 * Checks that the arguments passed to a given method object (e.g., method of a class) comply with their
 * expected question types, based on the method's signature. If there's a discrepancy, it raises a ValueError.
 *
 * @param methodObj - The method for which arguments are checked.
 * @param args - Positional arguments passed to the method.
 * @param kwargs - Keyword arguments passed to the method.
 *
 * @optional
 * @param exclude - Names of parameters to exclude from the type check.
 */
function methodArgTypeCheck<T extends (...args: any[]) => any>(
  methodObj: T,
  ...args: Parameters<T>
): void {
  // Implementation goes here
}
```

In this TypeScript version:
- `T extends (...args: any[]) => any` defines a generic type `T` that represents a function with any number and types of arguments.
- `Parameters<T>` extracts the parameter types of the function `T`.
- The function `methodArgTypeCheck` takes `methodObj` of type `T`, and the rest of the arguments are spread into an array called `args`.

This ensures that the function signature in JavaScript/TypeScript matches the original Python function signature while keeping the comments intact.