Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * A utility class for checking method argument types.
 */
public class Answer {

    /**
     * Checks that the arguments passed to a given method object comply with their expected types,
     * based on the method's signature. If there's a discrepancy, it throws an IllegalArgumentException.
     *
     * @param methodObj The method for which arguments are checked.
     * @param args      Positional arguments passed to the method.
     * @param kwargs    Keyword arguments passed to the method.
     * @param exclude   Names of parameters to exclude from the type check.
     */
    public static void methodArgTypeCheck(Method methodObj, Object[] args, Map<String, Object> kwargs, List<String> exclude) {
        if (exclude == null) {
            exclude = new ArrayList<>();
        }
        exclude.add("self");  // Exclude 'self' by default since it refers to the method's instance

        Map<String, Class<?>> parameterTypes = getParameterTypes(methodObj);
        Map<String, Object> combinedArgs = combineArgs(args, kwargs);

        for (Map.Entry<String, Class<?>> entry : parameterTypes.entrySet()) {
            String paramName = entry.getKey();
            Class<?> expectedType = entry.getValue();

            if (!exclude.contains(paramName) && combinedArgs.containsKey(paramName)) {
                Object actualValue = combinedArgs.get(paramName);
                if (!expectedType.isInstance(actualValue)) {
                    String passedArgType = actualValue.getClass().getSimpleName();
                    String expectedArgType = expectedType.getSimpleName();
                    throw new IllegalArgumentException(
                            String.format("%s should be of type %s, but got type %s instead.",
                                    paramName, expectedArgType, passedArgType));
                }
            }
        }
    }

    /**
     * Extracts the parameter types from the method signature.
     *
     * @param method The method whose parameter types are extracted.
     * @return A map of parameter names to their corresponding types.
     */
    private static Map<String, Class<?>> getParameterTypes(Method method) {
        Map<String, Class<?>> parameterTypes = new HashMap<>();
        for (int i = 0; i < method.getParameterCount(); i++) {
            parameterTypes.put("arg" + i, method.getParameterTypes()[i]);
        }
        return parameterTypes;
    }

    /**
     * Combines positional and keyword arguments into a single map.
     *
     * @param args    Positional arguments.
     * @param kwargs  Keyword arguments.
     * @return A combined map of all arguments.
     */
    private static Map<String, Object> combineArgs(Object[] args, Map<String, Object> kwargs) {
        Map<String, Object> combinedArgs = new HashMap<>(kwargs);
        for (int i = 0; i < args.length; i++) {
            combinedArgs.put("arg" + i, args[i]);
        }
        return combinedArgs;
    }

    /**
     * Example method to demonstrate usage.
     *
     * @param a An integer parameter.
     * @param b A string parameter.
     */
    public static void exampleMethod(int a, String b) {
        // Example method body
    }

    public static void main(String[] args) {
        try {
            Method method = Answer.class.getMethod("exampleMethod", int.class, String.class);
            Map<String, Object> kwargs = new HashMap<>();
            kwargs.put("b", "hello");
            methodArgTypeCheck(method, new Object[]{123}, kwargs, null);
            System.out.println("Arguments are valid.");
        } catch (NoSuchMethodException | IllegalArgumentException e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Javadoc Comments**: The Javadoc comments provide detailed documentation for the methods, including their purpose, parameters, and return values.
2. **Method Signatures**: The method signatures are defined according to Java conventions, with appropriate type annotations.
3. **Utility Methods**:
   - `getParameterTypes`: Extracts the parameter types from the method signature.
   - `combineArgs`: Combines positional and keyword arguments into a single map.
4. **Main Method**: Demonstrates how to use the `methodArgTypeCheck` method with an example method `exampleMethod`.
5. **Type Checking**: The main logic checks each argument against its expected type and throws an `IllegalArgumentException` if there is a mismatch.

This Java code preserves the functionality and structure of the original Python code while adhering to Java's syntax and conventions.