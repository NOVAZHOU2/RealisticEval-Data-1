Sure, here is the equivalent Java code signature for the provided Python function `method_arg_type_check`. I'll keep the comments intact and adjust the syntax accordingly.

```java
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;

/**
 * Checks that the arguments passed to a given method object (e.g., method of a class)
 * comply with their expected argument types, based on the method's signature. If there's a discrepancy,
 * it throws an IllegalArgumentException.
 *
 * @param methodObj The method for which arguments are checked.
 * @param args      Positional arguments passed to the method.
 * @param kwargs    Keyword arguments passed to the method.
 *
 * @throws IllegalArgumentException if any of the arguments do not match their expected types.
 */
public static void methodArgTypeCheck(Method methodObj, Object[] args, Object[] kwargs) {
    // Implementation goes here
}
```

### Explanation:
1. **Imports**: Import necessary classes such as `Method` from `java.lang.reflect`, `Arrays`, and `List`.
2. **Docstring**: Keep the docstring intact but convert it to Java-style Javadoc comments.
3. **Parameters**:
   - `methodObj`: The method for which arguments are checked. In Java, methods are represented by the `Method` class from the reflection API.
   - `args`: Positional arguments passed to the method. In Java, these are typically represented as an array of `Object`.
   - `kwargs`: Keyword arguments passed to the method. In Java, keyword arguments can be represented using a map or another data structure, but for simplicity, we use another array of `Object`.
4. **Exception Handling**: Throw an `IllegalArgumentException` if any of the arguments do not match their expected types.

Note: This Java code assumes that you have a way to determine the expected types of the arguments. Typically, this would involve using annotations or other metadata mechanisms in your Java application.