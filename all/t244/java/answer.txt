Here is the equivalent Java code for your Python function. Please note that Java doesn't have direct support for checking method signatures like Python does. Therefore, we will use reflection to get the method parameters and compare them with the provided arguments.

```java
package org.real.temp;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;

public class Answer {
    
    public static void methodArgTypeCheck(Method methodObj, Object... args) throws Exception {
        Class<?>[] parameterTypes = methodObj.getParameterTypes();
        
        if(parameterTypes.length != args.length){
            throw new IllegalArgumentException("Number of arguments do not match");
        }

        for(int i=0; i<parameterTypes.length; i++){
            if(!parameterTypes[i].isInstance(args[i])){
                throw new IllegalArgumentException("Argument " + i + " is of wrong type");
            }
        }
    }

    // Example usage:
    public static void main(String[] args) throws Exception {
        Method method = Answer.class.getMethod("exampleMethod", String.class, int.class);
        methodArgTypeCheck(method, "Hello", 123); // Correct

        try{
            methodArgTypeCheck(method, "Hello", "World"); // Incorrect
        } catch(IllegalArgumentException e){
            System.out.println(e.getMessage());
        }
    }

    private static void exampleMethod(String str, int num) {
        // Do something...
    }
}
```

In this Java code, `methodArgTypeCheck` checks whether the types of the arguments passed to a method match the types defined in the method signature. It uses reflection to obtain the method parameters' types and then compares these with the types of the actual arguments. If there is a mismatch, an `IllegalArgumentException` is thrown.