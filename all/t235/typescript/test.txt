Sure! Here's how you can convert your Python unittest test class to a TypeScript Jest test case:

```typescript
import { describe, it, expect } from '@jest/globals';

// Assuming calculateBearing is defined somewhere in your project
function calculateBearing(lat1: number, lon1: number, lat2: number, lon2: number): number {
    // Your implementation here
}

describe('calculateBearing', () => {
    it('should calculate the bearing correctly', () => {
        const lat1 = 48.8566; // Paris, France
        const lon1 = 2.3522;
        const lat2 = 51.5074; // London, UK
        const lon2 = -0.1278;

        const expectedBearing = 90.0; // Approximate bearing from Paris to London

        const result = calculateBearing(lat1, lon1, lat2, lon2);

        expect(result).toBeCloseTo(expectedBearing, 2); // Allowing for a small margin of error
    });

    it('should handle edge cases', () => {
        const lat1 = 0; // North Pole
        const lon1 = 0;
        const lat2 = 0; // North Pole
        const lon2 = 180; // South Pole

        const expectedBearing = 180.0; // Bearing from North Pole to South Pole

        const result = calculateBearing(lat1, lon1, lat2, lon2);

        expect(result).toBeCloseTo(expectedBearing, 2);
    });
});
```

In this TypeScript Jest test case:

- We import `describe`, `it`, and `expect` from `@jest/globals`.
- We define a mock implementation of `calculateBearing` if it's not already defined elsewhere in your project.
- We create a `describe` block for our test suite, which contains multiple `it` blocks for individual tests.
- Each `it` block includes a description of what the test should do and an assertion using `expect`.

Make sure to replace the mock implementation of `calculateBearing` with the actual implementation from your project.