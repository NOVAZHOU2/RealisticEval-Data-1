Certainly! Below is the equivalent TypeScript test class using Jest, which preserves the functionality and logic of the provided Python unittest class. The necessary type annotations and Jest assertions are included to ensure the tests work correctly.

### TypeScript Code with Jest Testing

```typescript
import { calculateBearing } from './path/to/calculateBearing'; // Import the calculateBearing function

describe('TestCalculateBearing', () => {
  it('should calculate north bearing correctly', () => {
    // From equator directly north
    expect(calculateBearing(0, 0, 10, 0)).toBeCloseTo(0);
  });

  it('should calculate east bearing correctly', () => {
    // From prime meridian directly east
    expect(calculateBearing(0, 0, 0, 10)).toBeCloseTo(90);
  });

  it('should calculate south bearing correctly', () => {
    // From a point directly south
    expect(calculateBearing(10, 0, 0, 0)).toBeCloseTo(180);
  });

  it('should calculate west bearing correctly', () => {
    // From a point directly west
    expect(calculateBearing(0, 10, 0, 0)).toBeCloseTo(270);
  });

  it('should calculate bearing across prime meridian correctly', () => {
    // From a point west of the prime meridian to a point east
    expect(calculateBearing(0, -1, 0, 1)).toBeCloseTo(90);
  });
});
```

### Explanation:
1. **Import Statement**: The `calculateBearing` function is imported from its respective module.
2. **Describe Block**: The `describe` block is used to group the test cases under a single test suite.
3. **It Blocks**: Each `it` block represents a single test case.
4. **Assertions**:
   - `toBeCloseTo`: This Jest assertion is used to check if the calculated bearing is close to the expected value. It is equivalent to `assertAlmostEqual` in Python's `unittest` framework.
5. **Comments**: Comments are added to explain each test case, similar to the Python code.

### Example Usage
Ensure you have Jest installed in your project:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Configure Jest in your `tsconfig.json` and `jest.config.js` files:

#### `tsconfig.json`
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "skipLibCheck": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}
```

#### `jest.config.js`
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest'
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
};
```

### Running Tests
Run the tests using Jest:

```sh
npx jest
```

This setup ensures that the TypeScript tests are structured and executed similarly to the Python unittests, with appropriate assertions and documentation.