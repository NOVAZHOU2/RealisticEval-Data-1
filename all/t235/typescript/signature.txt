Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Calculates the azimuth between two points on the Earth.
 * This function accepts the latitude and longitude of the two points as parameters and returns the azimuth from the first point to the second point in degrees.
 * 
 * @param lat1 - Latitude of the starting point in decimal degrees.
 * @param lon1 - Longitude of the starting point in decimal degrees.
 * @param lat2 - Latitude of the ending point in decimal degrees.
 * @param lon2 - Longitude of the ending point in decimal degrees.
 * @returns The bearing in degrees from the starting point to the ending point, ranging from 0 to 360.
 */
function calculateBearing(lat1: number, lon1: number, lat2: number, lon2: number): number {
    // Convert latitude and longitude from degrees to radians
    const lat1Rad = Math.PI * lat1 / 180;
    const lon1Rad = Math.PI * lon1 / 180;
    const lat2Rad = Math.PI * lat2 / 180;
    const lon2Rad = Math.PI * lon2 / 180;

    // Difference in longitude
    const deltaLonRad = lon2Rad - lon1Rad;

    // Calculate the bearing components
    const x = Math.sin(deltaLonRad) * Math.cos(lat2Rad);
    const y = Math.cos(lat1Rad) * Math.sin(lat2Rad) - (Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(deltaLonRad));

    // Calculate the initial bearing in radians
    const initialBearingRad = Math.atan2(x, y);

    // Convert the initial bearing from radians to degrees
    const initialBearingDeg = initialBearingRad * (180 / Math.PI);

    // Normalize the bearing to 0-360 degrees
    const compassBearing = (initialBearingDeg + 360) % 360;

    return compassBearing;
}

// Example usage
console.log(calculateBearing(52.2296756, 21.0122287, 41.8919300, 12.5113300));
```

### Explanation:
1. **JSDoc Documentation**: The Python docstring is converted to JSDoc-style comments using the `/** */` format.
2. **Type Annotations**: The Python type annotations are directly translated to TypeScript types.
3. **Radians Conversion**: The conversion from degrees to radians is done using `Math.PI * value / 180`.
4. **Calculations**: The calculations follow the same logic as the Python code.
5. **Normalization**: The bearing is normalized to the range 0-360 degrees using the modulo operator.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate documentation and type annotations.