Certainly! Here is the equivalent JavaScript function with the appropriate JSDoc comments:

```javascript
/**
 * Calculates the azimuth between two points on the Earth.
 * This function accepts the latitude and longitude of the two points as parameters and returns the azimuth from the first point to the second point in degrees.
 * 
 * @param {number} lat1 - Latitude of the starting point in decimal degrees.
 * @param {number} lon1 - Longitude of the starting point in decimal degrees.
 * @param {number} lat2 - Latitude of the ending point in decimal degrees.
 * @param {number} lon2 - Longitude of the ending point in decimal degrees.
 * @returns {number} Bearing in degrees from the starting point to the ending point, ranging from 0 to 360.
 */
function calculateBearing(lat1, lon1, lat2, lon2) {
    // Convert latitude and longitude from degrees to radians
    const lat1Rad = lat1 * Math.PI / 180;
    const lon1Rad = lon1 * Math.PI / 180;
    const lat2Rad = lat2 * Math.PI / 180;
    const lon2Rad = lon2 * Math.PI / 180;

    // Difference in longitude
    const deltaLonRad = lon2Rad - lon1Rad;

    // Calculate the bearing components
    const x = Math.sin(deltaLonRad) * Math.cos(lat2Rad);
    const y = Math.cos(lat1Rad) * Math.sin(lat2Rad) - (Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(deltaLonRad));

    // Calculate the initial bearing in radians
    const initialBearingRad = Math.atan2(x, y);

    // Convert the initial bearing from radians to degrees
    const initialBearingDeg = initialBearingRad * 180 / Math.PI;

    // Normalize the bearing to 0-360 degrees
    const compassBearing = (initialBearingDeg + 360) % 360;

    return compassBearing;
}
```

This JavaScript function preserves the purpose and structure of the original Python function, including the type annotations and comments, which have been converted to JSDoc format.