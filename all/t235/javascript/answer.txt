Sure! Here is the equivalent JavaScript code for the provided Python function:

```javascript
function calculateBearing(lat1, lon1, lat2, lon2) {
    /**
     * Calculate the bearing from one latitude and longitude to another.
     *
     * @param {number} lat1 - Latitude of the starting point in decimal degrees.
     * @param {number} lon1 - Longitude of the starting point in decimal degrees.
     * @param {number} lat2 - Latitude of the ending point in decimal degrees.
     * @param {number} lon2 - Longitude of the ending point in decimal degrees.
     * @returns {number} Bearing in degrees from the starting point to the ending point, ranging from 0 to 360.
     */

    // Convert latitude and longitude from degrees to radians
    const lat1Rad = lat1 * Math.PI / 180;
    const lon1Rad = lon1 * Math.PI / 180;
    const lat2Rad = lat2 * Math.PI / 180;
    const lon2Rad = lon2 * Math.PI / 180;

    // Difference in longitude
    const deltaLonRad = lon2Rad - lon1Rad;

    // Calculate the bearing components
    const x = Math.sin(deltaLonRad) * Math.cos(lat2Rad);
    const y = Math.cos(lat1Rad) * Math.sin(lat2Rad) - (Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(deltaLonRad));

    // Calculate the initial bearing in radians
    const initialBearingRad = Math.atan2(x, y);

    // Convert the initial bearing from radians to degrees
    const initialBearingDeg = initialBearingRad * 180 / Math.PI;

    // Normalize the bearing to 0-360 degrees
    const compassBearing = (initialBearingDeg + 360) % 360;

    return compassBearing;
}
```

This JavaScript function maintains the same functionality, logic, and structure as the original Python function. It converts the input angles from degrees to radians, calculates the bearing, and normalizes it to the range of 0 to 360 degrees.