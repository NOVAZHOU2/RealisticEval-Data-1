Certainly! Here is the equivalent Jest test suite for the given Python `unittest` test class. I'll convert each test case and ensure that the functionality and logic are preserved.

### Python Code

```python
import unittest

class TestCalculateBearing(unittest.TestCase):
    def test_north_bearing(self):
        # From equator directly north
        self.assertAlmostEqual(calculate_bearing(0, 0, 10, 0), 0)

    def test_east_bearing(self):
        # From prime meridian directly east
        self.assertAlmostEqual(calculate_bearing(0, 0, 0, 10), 90)

    def test_south_bearing(self):
        # From a point directly south
        self.assertAlmostEqual(calculate_bearing(10, 0, 0, 0), 180)

    def test_west_bearing(self):
        # From a point directly west
        self.assertAlmostEqual(calculate_bearing(0, 10, 0, 0), 270)

    def test_across_prime_meridian(self):
        # From a point west of the prime meridian to a point east
        self.assertAlmostEqual(calculate_bearing(0, -1, 0, 1), 90)
```

### JavaScript Code with Jest

```javascript
const calculateBearing = require('./calculateBearing'); // Import the calculateBearing function

describe('TestCalculateBearing', () => {
    it('should calculate north bearing correctly', () => {
        // From equator directly north
        expect(calculateBearing(0, 0, 10, 0)).toBeCloseTo(0);
    });

    it('should calculate east bearing correctly', () => {
        // From prime meridian directly east
        expect(calculateBearing(0, 0, 0, 10)).toBeCloseTo(90);
    });

    it('should calculate south bearing correctly', () => {
        // From a point directly south
        expect(calculateBearing(10, 0, 0, 0)).toBeCloseTo(180);
    });

    it('should calculate west bearing correctly', () => {
        // From a point directly west
        expect(calculateBearing(0, 10, 0, 0)).toBeCloseTo(270);
    });

    it('should calculate bearing across prime meridian correctly', () => {
        // From a point west of the prime meridian to a point east
        expect(calculateBearing(0, -1, 0, 1)).toBeCloseTo(90);
    });
});
```

### Explanation

1. **Importing the Function**: The `calculateBearing` function is imported at the beginning of the test file.
2. **Describe Block**: The `describe` block is used to group the test cases under a single test suite named `TestCalculateBearing`.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Assertions**:
   - `toBeCloseTo`: This is the Jest equivalent of `assertAlmostEqual` in Python. It checks if the calculated value is close to the expected value within a certain precision.

By using `toBeCloseTo`, we ensure that floating-point comparisons are handled appropriately, similar to how `assertAlmostEqual` works in Python. This ensures that the tests maintain the same functionality and logic as the original Python tests.