Certainly! Here is the equivalent TypeScript code for the provided Python class `UniqueDeque`, including appropriate JSDoc-style documentation comments and type annotations:

```typescript
import { Deque } from 'collections/deque';

class UniqueDeque<T> {
  private deque: Deque<T>;
  private set: Set<T>;

  constructor() {
    this.deque = new Deque<T>();
    this.set = new Set<T>();
  }

  /**
   * Add an item to the deque if it is not already present.
   *
   * @param item The item to add.
   * @returns True if the item was added, False if it was already present.
   */
  add(item: T): boolean {
    if (!this.set.has(item)) {
      this.deque.push(item);
      this.set.add(item);
      return true;
    }
    return false;
  }

  /**
   * Remove an item from the deque if it exists.
   *
   * @param item The item to remove.
   * @returns True if the item was removed, False if it was not found.
   */
  delete(item: T): boolean {
    if (this.set.has(item)) {
      const index = this.deque.toArray().findIndex((x) => x === item);
      if (index !== -1) {
        this.deque.deleteAt(index);
      }
      this.set.delete(item);
      return true;
    }
    return false;
  }

  /**
   * Check if an item is present in the deque.
   *
   * @param item The item to check.
   * @returns True if the item is present, False otherwise.
   */
  contains(item: T): boolean {
    return this.set.has(item);
  }

  /**
   * Get the number of elements in the deque.
   *
   * @returns The number of unique elements in the deque.
   */
  length(): number {
    return this.deque.length;
  }

  /**
   * Create an iterator for the deque.
   *
   * @returns An iterator over the elements in the deque.
   */
  *[Symbol.iterator](): Iterator<T> {
    for (const item of this.deque) {
      yield item;
    }
  }

  /**
   * Get a string representation of the UniqueDeque.
   *
   * @returns The string representation of the deque.
   */
  toString(): string {
    return `UniqueDeque(${Array.from(this.deque).toString()})`;
  }
}

// Example usage
const uniqueDeque = new UniqueDeque<number>();
console.log(uniqueDeque.add(1)); // true
console.log(uniqueDeque.add(2)); // true
console.log(uniqueDeque.add(1)); // false
console.log(uniqueDeque.toString()); // UniqueDeque(1,2)
console.log(uniqueDeque.contains(2)); // true
console.log(uniqueDeque.delete(2)); // true
console.log(uniqueDeque.toString()); // UniqueDeque(1)
```

### Explanation:
1. **Type Definitions**: The class `UniqueDeque` is defined with a generic type `T` to handle different types of items.
2. **Initialization**: The constructor initializes a `Deque` and a `Set`.
3. **Methods**:
   - `add`: Adds an item to the deque if it is not already present.
   - `delete`: Removes an item from the deque if it exists.
   - `contains`: Checks if an item is present in the deque.
   - `length`: Returns the number of elements in the deque.
   - `*[Symbol.iterator]`: Creates an iterator for the deque.
   - `toString`: Returns a string representation of the deque.
4. **Documentation Comments**: Each method is documented using JSDoc-style comments, providing clear descriptions of parameters and return values.
5. **Example Usage**: Demonstrates how to use the `UniqueDeque` class with an example.