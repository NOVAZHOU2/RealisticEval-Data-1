Sure! Below is the equivalent TypeScript test case using Jest for the `UniqueDeque` class you provided. Note that I'll also provide a basic implementation of the `UniqueDeque` class in TypeScript for completeness.

```typescript
import { describe, expect, test } from '@jest/globals';

class UniqueDeque {
    private items: Set<any>;

    constructor() {
        this.items = new Set();
    }

    add(item: any): boolean {
        if (this.contains(item)) {
            return false;
        }
        this.items.add(item);
        return true;
    }

    delete(item: any): boolean {
        if (!this.contains(item)) {
            return false;
        }
        this.items.delete(item);
        return true;
    }

    contains(item: any): boolean {
        return this.items.has(item);
    }

    get length(): number {
        return this.items.size;
    }

    [Symbol.iterator](): Iterator<any> {
        return this.items.values();
    }
}

describe('UniqueDeque', () => {
    let deque: UniqueDeque;

    beforeEach(() => {
        deque = new UniqueDeque();
    });

    test('should add items only once', () => {
        expect(deque.add(1)).toBe(true);
        expect(deque.add(2)).toBe(true);
        expect(deque.add(1)).toBe(false); // Duplicate item
        expect(deque.length).toBe(2);
    });

    test('should delete existing items', () => {
        deque.add(3);
        expect(deque.delete(3)).toBe(true);
        expect(deque.delete(4)).toBe(false); // Non-existing item
        expect(deque.length).toBe(0);
    });

    test('should contain items correctly', () => {
        deque.add(5);
        expect(deque.contains(5)).toBe(true);
        expect(deque.contains(6)).toBe(false); // Non-existing item
    });

    test('should iterate over items', () => {
        deque.add(7);
        deque.add(8);

        const iterator = deque[Symbol.iterator]();
        expect(iterator.next().value).toBe(7);
        expect(iterator.next().value).toBe(8);
        expect(iterator.next().done).toBe(true);
    });
});
```

### Explanation:

1. **Class Definition**: The `UniqueDeque` class is defined with methods to add, delete, and check for the presence of items. It uses a `Set` to ensure uniqueness.

2. **Jest Tests**:
   - `beforeEach`: Initializes a new instance of `UniqueDeque` before each test.
   - `test('should add items only once')`: Checks that adding duplicate items returns `false`.
   - `test('should delete existing items')`: Checks that deleting non-existent items returns `false`.
   - `test('should contain items correctly')`: Checks the `contains` method.
   - `test('should iterate over items')`: Checks that iterating over the deque works correctly.

This setup ensures that your `UniqueDeque` class behaves as expected under various conditions.