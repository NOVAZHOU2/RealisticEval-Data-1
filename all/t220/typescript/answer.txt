Here's the equivalent TypeScript code for the given Python class `UniqueDeque`:

```typescript
import { Deque } from 'collections/deque';

class UniqueDeque {
  private deque: Deque<any>;

  constructor() {
    this.deque = new Deque();
  }

  add(item: any): boolean {
    if (this.contains(item)) {
      return false;
    }
    this.deque.addBack(item);
    return true;
  }

  delete(item: any): boolean {
    const index = this.deque.toArray().indexOf(item);
    if (index === -1) {
      return false;
    }
    this.deque.removeAt(index);
    return true;
  }

  contains(item: any): boolean {
    return this.deque.toArray().includes(item);
  }

  get length(): number {
    return this.deque.length;
  }

  [Symbol.iterator](): Iterator<any> {
    let index = 0;
    const array = this.deque.toArray();
    const length = array.length;

    return {
      next(): IteratorResult<any> {
        if (index < length) {
          return { value: array[index++], done: false };
        } else {
          return { value: undefined, done: true };
        }
      },
    };
  }
}
```

### Explanation:

1. **Imports**: We import the `Deque` class from the `collections/deque` module. Note that you need to install the `collections-deque` package via npm or yarn.

2. **Class Definition**: The `UniqueDeque` class is defined with methods to add, delete, and check for the presence of items, as well as methods to get the length and create an iterator.

3. **Constructor**: Initializes the internal `deque` property using the `Deque` class.

4. **Add Method**: Adds an item to the deque if it is not already present. Returns `true` if the item was added, otherwise `false`.

5. **Delete Method**: Removes an item from the deque if it exists. Returns `true` if the item was removed, otherwise `false`.

6. **Contains Method**: Checks if an item is present in the deque. Returns `true` if the item is present, otherwise `false`.

7. **Length Property**: Returns the number of unique elements in the deque.

8. **Iterator**: Implements the `[Symbol.iterator]` method to allow iteration over the elements in the deque.

Make sure you have the `collections-deque` package installed in your project before running this code. You can install it using npm or yarn:

```sh
npm install collections-deque
# or
yarn add collections-deque
```