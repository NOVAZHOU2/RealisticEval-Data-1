Here's a C++ version of your Python code using `std::unordered_set` and `std::deque`. Note that C++ does not have built-in support for deques with unique items like Python's `collections.deque`, so we'll use `std::unordered_set` to store unique items and `std::deque` to maintain the order.

```cpp
#include <iostream>
#include <unordered_set>
#include <deque>

class UniqueDeque {
private:
    std::unordered_set<int> set;
    std::deque<int> deque;

public:
    bool add(int item) {
        if (set.find(item) != set.end()) {
            return false; // Item already present
        }
        set.insert(item);
        deque.push_back(item);
        return true;
    }

    bool deleteItem(int item) {
        auto it = set.find(item);
        if (it == set.end()) {
            return false; // Item not found
        }
        set.erase(it);
        deque.erase(std::remove(deque.begin(), deque.end(), item), deque.end());
        return true;
    }

    bool contains(int item) const {
        return set.find(item) != set.end();
    }

    size_t length() const {
        return set.size();
    }

    void print() const {
        for (const auto &item : deque) {
            std::cout << item << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    UniqueDeque ud;
    ud.add(1);
    ud.add(2);
    ud.add(3);
    ud.print(); // Output: 1 2 3

    ud.deleteItem(2);
    ud.print(); // Output: 1 3

    std::cout << "Contains 1: " << ud.contains(1) << std::endl; // Output: 1
    std::cout << "Contains 2: " << ud.contains(2) << std::endl; // Output: 0

    std::cout << "Length: " << ud.length() << std::endl; // Output: 2

    return 0;
}
```

This C++ code defines a class `UniqueDeque` that maintains a collection of unique integers using an `std::unordered_set` for fast lookup and insertion, and an `std::deque` to preserve the order of elements. The `add`, `deleteItem`, `contains`, and `length` methods correspond to the Python methods you provided. The `print` method is included for demonstration purposes to show how you can iterate over the deque.