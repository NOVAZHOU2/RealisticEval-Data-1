Certainly! Below is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

### Java Code

```java
import org.junit.Test;
import static org.junit.Assert.*;

import java.util.LinkedList;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;

/**
 * Test class for the UniqueDeque implementation.
 */
public class Tester {

    @Test
    public void testAddUniqueElements() {
        UniqueDeque ud = new UniqueDeque();
        assertTrue(ud.add(1));
        assertTrue(ud.add(2));
        assertTrue(ud.add(3));
        assertEquals(3, ud.size());
        Iterator<Integer> iterator = ud.iterator();
        List<Integer> list = new LinkedList<>();
        while (iterator.hasNext()) {
            list.add(iterator.next());
        }
        assertEquals("[1, 2, 3]", list.toString());
    }

    @Test
    public void testAddDuplicateElements() {
        UniqueDeque ud = new UniqueDeque();
        assertTrue(ud.add(1));
        assertFalse(ud.add(1));  // Duplicate add should return false
        assertEquals(1, ud.size());
        Iterator<Integer> iterator = ud.iterator();
        List<Integer> list = new LinkedList<>();
        while (iterator.hasNext()) {
            list.add(iterator.next());
        }
        assertEquals("[1]", list.toString());
    }

    @Test
    public void testDeleteElements() {
        UniqueDeque ud = new UniqueDeque();
        ud.add(1);
        ud.add(2);
        ud.add(3);
        assertTrue(ud.delete(2));
        assertFalse(ud.delete(2));  // Deleting non-existing element should return false
        assertEquals(2, ud.size());
        Iterator<Integer> iterator = ud.iterator();
        List<Integer> list = new LinkedList<>();
        while (iterator.hasNext()) {
            list.add(iterator.next());
        }
        assertEquals("[1, 3]", list.toString());
    }

    @Test
    public void testContains() {
        UniqueDeque ud = new UniqueDeque();
        ud.add(1);
        assertTrue(ud.contains(1));
        assertFalse(ud.contains(2));
        ud.delete(1);
        assertFalse(ud.contains(1));
    }

    @Test
    public void testIterAndLen() {
        UniqueDeque ud = new UniqueDeque();
        ud.add(1);
        ud.add(2);
        assertEquals(2, ud.size());
        Iterator<Integer> iterator = ud.iterator();
        List<Integer> list = new LinkedList<>();
        while (iterator.hasNext()) {
            list.add(iterator.next());
        }
        assertEquals("[1, 2]", list.toString());
        ud.delete(1);
        assertEquals(1, ud.size());
        iterator = ud.iterator();
        list.clear();
        while (iterator.hasNext()) {
            list.add(iterator.next());
        }
        assertEquals("[2]", list.toString());
    }
}

// UniqueDeque class definition (same as before)
public class UniqueDeque {

    private LinkedList<Integer> deque;
    private Set<Integer> set;

    /**
     * Constructs a new UniqueDeque object.
     */
    public UniqueDeque() {
        this.deque = new LinkedList<>();
        this.set = new HashSet<>();
    }

    /**
     * Adds an item to the deque if it is not already present.
     *
     * @param item The item to add.
     * @return true if the item was added, false if it was already present.
     */
    public boolean add(int item) {
        if (!set.contains(item)) {
            deque.addLast(item);
            set.add(item);
            return true;
        }
        return false;
    }

    /**
     * Removes an item from the deque if it exists.
     *
     * @param item The item to remove.
     * @return true if the item was removed, false if it was not found.
     */
    public boolean delete(int item) {
        if (set.contains(item)) {
            deque.removeFirstOccurrence(item);
            set.remove(item);
            return true;
        }
        return false;
    }

    /**
     * Checks if an item is present in the deque.
     *
     * @param item The item to check.
     * @return true if the item is present, false otherwise.
     */
    public boolean contains(int item) {
        return set.contains(item);
    }

    /**
     * Gets the number of elements in the deque.
     *
     * @return the number of unique elements in the deque.
     */
    public int size() {
        return deque.size();
    }

    /**
     * Creates an iterator for the deque.
     *
     * @return an iterator over the elements in the deque.
     */
    public Iterator<Integer> iterator() {
        return deque.iterator();
    }

    /**
     * Gets a string representation of the UniqueDeque.
     *
     * @return the string representation of the deque.
     */
    @Override
    public String toString() {
        return "UniqueDeque(" + deque.toString() + ")";
    }
}
```

### Explanation:
- **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.
- **Assertions**: JUnit's `assertTrue`, `assertFalse`, and `assertEquals` methods are used to perform assertions.
- **Test Methods**:
  - `testAddUniqueElements`: Tests adding unique elements and checks the size and contents.
  - `testAddDuplicateElements`: Tests adding duplicate elements and checks the size and contents.
  - `testDeleteElements`: Tests deleting elements and checks the size and contents.
  - `testContains`: Tests the `contains` method.
  - `testIterAndLen`: Tests the iterator and length methods.
- **Helper Methods**: The `UniqueDeque` class remains the same as before, providing the necessary functionality for the tests.

This setup ensures that the tests are structured and executed correctly using JUnit.