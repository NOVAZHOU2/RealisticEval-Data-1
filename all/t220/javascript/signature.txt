Certainly! Below is the equivalent JavaScript code with JSDoc comments for the given Python class `UniqueDeque`. The function signatures and comments have been converted to match JavaScript conventions and JSDoc standards.

```javascript
class UniqueDeque {
  constructor() {
    /**
     * Initialize a UniqueDeque object using an array and a Set.
     * The array stores elements in order, while the Set ensures uniqueness.
     */
    this._array = [];
    this._set = new Set();
  }

  /**
   * Add an item to the deque if it is not already present.
   *
   * @param {*} item - The item to add.
   * @returns {boolean} - True if the item was added, False if it was already present.
   */
  add(item) {
    if (!this._set.has(item)) {
      this._array.push(item);
      this._set.add(item);
      return true;
    }
    return false;
  }

  /**
   * Remove an item from the deque if it exists.
   *
   * @param {*} item - The item to remove.
   * @returns {boolean} - True if the item was removed, False if it was not found.
   */
  delete(item) {
    const index = this._array.findIndex(element => element === item);
    if (index !== -1) {
      this._array.splice(index, 1);
      this._set.delete(item);
      return true;
    }
    return false;
  }

  /**
   * Check if an item is present in the deque.
   *
   * @param {*} item - The item to check.
   * @returns {boolean} - True if the item is present, False otherwise.
   */
  contains(item) {
    return this._set.has(item);
  }

  /**
   * Get the number of elements in the deque.
   *
   * @returns {number} - The number of unique elements in the deque.
   */
  get length() {
    return this._array.length;
  }

  /**
   * Create an iterator for the deque.
   *
   * @returns {Iterator} - An iterator over the elements in the deque.
   */
  *[Symbol.iterator]() {
    for (const item of this._array) {
      yield item;
    }
  }

  /**
   * Get a string representation of the UniqueDeque.
   *
   * @returns {string} - The string representation of the deque.
   */
  toString() {
    return `UniqueDeque(${JSON.stringify(this._array)})`;
  }
}
```

### Explanation:
1. **Class Definition**: The `UniqueDeque` class is defined with a constructor that initializes an array and a set.
2. **Method Definitions**:
   - `add`: Adds an item to the deque if it is not already present.
   - `delete`: Removes an item from the deque if it exists.
   - `contains`: Checks if an item is present in the deque.
   - `length`: Returns the number of elements in the deque.
   - `[Symbol.iterator]`: Creates an iterator for the deque.
   - `toString`: Provides a string representation of the deque.

3. **JSDoc Comments**: Each method is documented using JSDoc comments, specifying parameters, return types, and descriptions.

This conversion preserves the functionality, logic, and structure of the original Python code while adhering to JavaScript conventions and JSDoc standards.