Sure! Let's start by converting the Python function `find_largest_divisible` into C++. Then, we will write the equivalent test cases using the Catch2 testing framework.

Here's the C++ version of the function:

```cpp
#include <optional>
#include <cassert>

std::optional<int> findLargestDivisible(int n) {
    // Ensure the input is valid
    assert(n > 0);

    // Start from n and decrement until we find a number divisible by 5
    for (int i = n; i >= n / 2; --i) {
        if (i % 5 == 0) {
            return i;
        }
    }

    // If no number is found, return std::nullopt
    return std::nullopt;
}
```

Now let's write the test cases using Catch2. We need to include the Catch2 header and define the test cases:

```cpp
#include "catch2/catch_test_macros.hpp"

TEST_CASE("Test findLargestDivisible function") {
    SECTION("Test with n = 15") {
        REQUIRE(findLargestDivisible(15) == 15);
    }

    SECTION("Test with n = 30") {
        REQUIRE(findLargestDivisible(30) == 30);
    }

    SECTION("Test with n = 31") {
        REQUIRE(findLargestDivisible(31) == 30);
    }

    SECTION("Test with n = 49") {
        REQUIRE(findLargestDivisible(49) == 45);
    }

    SECTION("Test with n = 1") {
        REQUIRE(!findLargestDivisible(1).has_value());
    }

    SECTION("Test with n = 2") {
        REQUIRE(!findLargestDivisible(2).has_value());
    }

    SECTION("Test with n = 4") {
        REQUIRE(!findLargestDivisible(4).has_value());
    }
}
```

Here's the complete code:

```cpp
#include <optional>
#include <cassert>
#include "catch2/catch_test_macros.hpp"

// Function to find the largest integer between n and half of n that is divisible by 5
std::optional<int> findLargestDivisible(int n) {
    // Ensure the input is valid
    assert(n > 0);

    // Start from n and decrement until we find a number divisible by 5
    for (int i = n; i >= n / 2; --i) {
        if (i % 5 == 0) {
            return i;
        }
    }

    // If no number is found, return std::nullopt
    return std::nullopt;
}

TEST_CASE("Test findLargestDivisible function") {
    SECTION("Test with n = 15") {
        REQUIRE(findLargestDivisible(15) == 15);
    }

    SECTION("Test with n = 30") {
        REQUIRE(findLargestDivisible(30) == 30);
    }

    SECTION("Test with n = 31") {
        REQUIRE(findLargestDivisible(31) == 30);
    }

    SECTION("Test with n = 49") {
        REQUIRE(findLargestDivisible(49) == 45);
    }

    SECTION("Test with n = 1") {
        REQUIRE(!findLargestDivisible(1).has_value());
    }

    SECTION("Test with n = 2") {
        REQUIRE(!findLargestDivisible(2).has_value());
    }

    SECTION("Test with n = 4") {
        REQUIRE(!findLargestDivisible(4).has_value());
    }
}
```

This code defines the function `findLargestDivisible` and includes several test cases using Catch2 assertions to verify its correctness.