Sure! Below is the equivalent C++ code for the given Python function `find_largest_divisible`. The C++ code will maintain the same functionality, logic, and structure:

```cpp
#include <iostream>
#include <optional>

// Function to find the largest integer between n and half of n that is divisible by 5
std::optional<int> find_largest_divisible(int n) {
    // Start checking from n and go down to half of n
    int start = n;
    int end = n / 2;

    for (int i = start; i > end; --i) {
        if (i % 5 == 0) {
            return i;
        }
    }

    return std::nullopt;  // Return std::nullopt if no number divisible by 5 is found
}

int main() {
    int n = 20;
    auto result = find_largest_divisible(n);

    if (result.has_value()) {
        std::cout << "The largest integer between " << n << " and half of " << n << " that is divisible by 5 is: " << result.value() << std::endl;
    } else {
        std::cout << "No number divisible by 5 found between " << n << " and half of " << n << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Files**: 
   - `<iostream>` is included for input/output operations.
   - `<optional>` is included to handle the `None` case in C++ using `std::optional`.

2. **Function Definition**:
   - The function `find_largest_divisible` takes an integer `n` and returns an `std::optional<int>` which can either hold an integer value or be empty (`std::nullopt`).

3. **Logic**:
   - Initialize `start` with `n` and `end` with `n / 2`.
   - Iterate from `start` down to `end` using a `for` loop.
   - Check if each number is divisible by 5 using the modulo operator `%`.
   - If a number divisible by 5 is found, return it using `return i`.
   - If no number divisible by 5 is found, return `std::nullopt`.

4. **Main Function**:
   - Demonstrates calling the `find_largest_divisible` function with an example value `n = 20`.
   - Uses `.has_value()` to check if the returned value is present and prints the result accordingly.