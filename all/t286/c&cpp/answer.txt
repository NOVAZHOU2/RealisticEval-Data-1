Sure! Below is the equivalent C++ code for the provided Python function:

```cpp
#include <iostream>
using namespace std;

// Function to find the largest integer between a given number n and half of it that is divisible by 10 or 5
int findLargestDivisible(int n) {
    // Iterate from n down to half of n
    for (int i = n; i >= n / 2; --i) {
        // Check if the number is divisible by 10 or 5
        if (i % 10 == 0 || i % 5 == 0) {
            return i;
        }
    }
    // Return -1 if no such number exists
    return -1;
}

// Main function to test the findLargestDivisible function
int main() {
    int n;
    cout << "Enter a number: ";
    cin >> n;

    int result = findLargestDivisible(n);
    if (result != -1) {
        cout << "The largest integer between " << n << " and half of " << n << " that is divisible by 5 or 10 is: " << result << endl;
    } else {
        cout << "No such number exists." << endl;
    }

    return 0;
}
```

### Explanation:
- **Function Definition**: The `findLargestDivisible` function takes an integer `n` as input and returns the largest integer between `n` and half of `n` that is divisible by 10 or 5. If no such number exists, it returns `-1`.
- **Loop**: The loop iterates from `n` down to `n / 2`. For each number in this range, it checks if the number is divisible by 10 or 5 using the modulus operator (`%`). If it finds such a number, it returns it immediately.
- **Main Function**: The `main` function prompts the user to enter a number, calls the `findLargestDivisible` function, and prints the result. If no such number exists, it informs the user accordingly.

This C++ code should work similarly to your original Python function.