Sure! Below is the equivalent C++ code for the provided Python function `find_largest_divisible`. This C++ code maintains the same functionality, logic, and structure as the Python code:

```cpp
#include <iostream>
#include <optional>

// Function to find the largest integer between n and half of n that is divisible by 5.
std::optional<int> find_largest_divisible(int n) {
    // Start checking from n and go down to half of n
    int start = n;
    int end = n / 2;

    for (int i = start; i > end; --i) {
        if (i % 5 == 0) {
            return i;
        }
    }

    return std::nullopt;  // Return std::nullopt if no number divisible by 5 is found
}

int main() {
    int n = 20;
    auto result = find_largest_divisible(n);

    if (result.has_value()) {
        std::cout << "The largest integer divisible by 5 between " << n << " and half of it is: " << result.value() << std::endl;
    } else {
        std::cout << "No number divisible by 5 found between " << n << " and half of it." << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Definition**: The function `find_largest_divisible` is defined with the return type `std::optional<int>` which allows returning either an integer value or `std::nullopt` (equivalent to `None` in Python).
2. **Loop**: The loop iterates from `start` down to `end`, checking each number to see if it is divisible by 5.
3. **Return Value**: If a number divisible by 5 is found, it is returned immediately. Otherwise, `std::nullopt` is returned at the end of the function.
4. **Main Function**: A sample usage of the function is demonstrated in the `main` function, where the result is checked using `has_value()` and printed accordingly.