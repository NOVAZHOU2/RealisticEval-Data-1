Hereâ€™s the equivalent C++ code for the provided Python function, including the conversion of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <optional>

// find the largest integer between a given number n and half of it that is divisible by 10 or 5
// Args:
//     n: The upper bound of the range.
// Returns:
//     The largest integer between n and half of n that is divisible by 5, or
//     std::nullopt if no such number exists.
std::optional<int> find_largest_divisible(int n) {
    // Check divisibility by 5
    for (int i = n; i >= n / 2; --i) {
        if (i % 5 == 0) {
            return i;
        }
    }
    return std::nullopt;
}

int main() {
    int n = 20;
    auto result = find_largest_divisible(n);
    if (result) {
        std::cout << "The largest divisible number is: " << *result << std::endl;
    } else {
        std::cout << "No such number exists." << std::endl;
    }
    return 0;
}
```

### Explanation:
1. **Function Signature**: The Python function `find_largest_divisible` with an argument `n` of type `int` and a return type of `Union[int, None]` is converted to a C++ function with the same name, taking an `int` argument and returning `std::optional<int>`.

2. **Comments and Documentation**: The Python docstring is converted into C++ style comments using `//` for single-line comments. Multi-line comments can be enclosed in `/* ... */`.

3. **Type Annotations**: The Python type annotation `Union[int, None]` is translated to `std::optional<int>` in C++, which represents either an `int` or `std::nullopt` (equivalent to `None` in Python).

4. **Implementation**: The logic inside the function remains the same, checking for the largest integer divisible by 5 within the specified range.

This conversion preserves the functionality and intent of the original Python code while adapting it to C++ conventions.