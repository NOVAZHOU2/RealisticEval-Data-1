Sure! Here's how you can convert your Python `unittest` test class into a TypeScript test case using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

function findLargestDivisible(n: number): number | null {
    for (let i = Math.floor(n / 2); i <= n; i++) {
        if (i % 5 === 0 || i % 10 === 0) {
            return i;
        }
    }
    return null;
}

describe('findLargestDivisible', () => {
    it('should return the largest number divisible by 5 or 10', () => {
        expect(findLargestDivisible(30)).toBe(30);
        expect(findLargestDivisible(29)).toBe(25);
        expect(findLargestDivisible(10)).toBe(10);
        expect(findLargestDivisible(5)).toBe(5);
        expect(findLargestDivisible(4)).toBe(null);
    });

    it('should handle edge cases correctly', () => {
        expect(findLargestDivisible(0)).toBe(null);
        expect(findLargestDivisible(-10)).toBe(null);
        expect(findLargestDivisible(1)).toBe(null);
    });
});
```

In this TypeScript code:

1. We define the `findLargestDivisible` function which replicates the logic of your Python function.
2. We use Jest's `describe`, `it`, and `expect` functions to create our test suite.
3. We write multiple `it` blocks to cover different scenarios, including typical cases and edge cases.

Make sure you have Jest installed in your project. If not, you can install it using npm:

```bash
npm install --save-dev jest
```

Then, you can run your tests with:

```bash
npx jest
```