Sure! Below is the equivalent TypeScript code for the provided Python function:

```typescript
function findLargestDivisible(n: number): number | null {
    /**
     * Find the largest integer between a given number n and half of it that is divisible by 10 or 5
     * 
     * @param {number} n - The upper bound of the range.
     * @returns {number | null} - The largest integer between n and half of n that is divisible by 5, or null if no such number exists.
     */
    
    let lowerBound = Math.floor(n / 2);
    
    while (lowerBound < n) {
        if (lowerBound % 10 === 0 || lowerBound % 5 === 0) {
            return lowerBound;
        }
        lowerBound++;
    }
    
    return null;
}
```

### Explanation:
- **Function Signature**: The function `findLargestDivisible` takes a single parameter `n` of type `number` and returns either a `number` or `null`.
- **Loop**: We start with `lowerBound` set to `Math.floor(n / 2)` and iterate upwards until we reach `n`. If we find a number within this range that is divisible by 10 or 5, we return it.
- **Return Statement**: If no such number is found, the function returns `null`.

This TypeScript code should work similarly to the original Python function.