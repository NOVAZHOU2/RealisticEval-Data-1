Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function findLargestDivisible(n: number): number | null {
    // Start checking from n and go down to half of n
    const start = n;
    const end = Math.floor(n / 2);

    for (let i = start; i > end; i--) {
        if (i % 5 === 0) {
            return i;
        }
    }

    return null;  // Return null if no number divisible by 5 is found
}
```

### Explanation:
1. **Function Definition**: 
   - The function `findLargestDivisible` is defined with a single parameter `n` of type `number`.
   - The return type is `number | null`, indicating that the function can return either a number or `null`.

2. **Variables**:
   - `start` and `end` are initialized similarly to the Python code.
   - `Math.floor(n / 2)` is used to ensure that `end` is an integer, which is equivalent to the Python `n // 2`.

3. **Loop**:
   - A `for` loop is used to iterate from `start` down to `end + 1`.
   - Inside the loop, we check if `i` is divisible by 5 using `i % 5 === 0`.

4. **Return Value**:
   - If a number divisible by 5 is found, it is returned immediately.
   - If no such number is found, the function returns `null`.

This TypeScript code maintains the same functionality and logic as the original Python code.