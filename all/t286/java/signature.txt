Sure, here is the equivalent Java method signature for the provided Python function:

```java
import java.math.BigInteger;

/**
 * Finds the largest integer between a given number n and half of it that is divisible by 10 or 5.
 * 
 * @param n The upper bound of the range.
 * @return The largest integer between n and half of n that is divisible by 5, or
 *         null if no such number exists.
 */
public BigInteger findLargestDivisible(BigInteger n) {
    BigInteger half = n.divide(BigInteger.valueOf(2));
    for (BigInteger i = n; i.compareTo(half) >= 0; i = i.subtract(BigInteger.ONE)) {
        if (i.mod(BigInteger.valueOf(5)).equals(BigInteger.ZERO)) {
            return i;
        }
    }
    return null;
}
```

Here are the details:
- The `find_largest_divisible` function has been converted to a method named `findLargestDivisible`.
- The parameter `n` is of type `BigInteger` in Java, which can handle very large integers.
- The return type is `BigInteger` or `null`, as Java does not have a direct equivalent of Python's `Union[int, None]`. Instead, we use `null` to represent the absence of a value.
- The docstring has been converted to a Javadoc comment block with the appropriate structure and content.
- The logic inside the method remains the same, but it uses Java's `BigInteger` class for arithmetic operations to ensure it can handle large numbers.