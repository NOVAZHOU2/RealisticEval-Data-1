Sure! Below is the equivalent Java code for the provided Python function:

```java
package org.real.temp;

public class Answer {
    /**
     * Find the largest integer between a given number n and half of it that is divisible by 10 or 5.
     *
     * @param n The upper bound of the range.
     * @return The largest integer between n and half of n that is divisible by 5,
     *         or null if no such number exists.
     */
    public static Integer findLargestDivisible(int n) {
        // Calculate half of n
        int halfN = n / 2;
        
        // Start checking from n down to halfN + 1
        for (int i = n; i >= halfN + 1; i--) {
            if (i % 10 == 0 || i % 5 == 0) {
                return i;
            }
        }
        
        // Return null if no such number exists
        return null;
    }

    public static void main(String[] args) {
        // Example usage
        System.out.println(findLargestDivisible(20)); // Output should be 20
        System.out.println(findLargestDivisible(9));  // Output should be 5
        System.out.println(findLargestDivisible(4));  // Output should be null
    }
}
```

### Explanation:
1. **Package Declaration**: The `package` declaration specifies the package name `org.real.temp`.
2. **Class Declaration**: The `class` declaration defines the class `Answer`.
3. **Method Declaration**: The method `findLargestDivisible` is declared as `static` so it can be called without creating an instance of the class.
4. **Return Type**: The method returns an `Integer`, which is equivalent to Python's `Union[int, None]`. If no such number exists, it returns `null`.
5. **Logic**:
   - It calculates half of `n` and then iterates from `n` down to `halfN + 1`.
   - For each number in this range, it checks if the number is divisible by 10 or 5.
   - If a number meeting the criteria is found, it is returned immediately.
   - If no such number is found after the loop, `null` is returned.
6. **Main Method**: The `main` method demonstrates how to use the `findLargestDivisible` method with some example inputs.

This Java code should work similarly to the original Python function.