Certainly! Here’s the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic of the tests, ensuring that all assertions are mapped appropriately to Jest equivalents.

### Python Unittest Code

```python
import unittest

def find_largest_divisible(n: int) -> Union[int, None]:
    """
    Find the largest integer between a given number n and half of it that is divisible by 5.

    Args:
        n (int): The upper bound of the range.

    Returns:
        The largest integer between n and half of n that is divisible by 5, or
        None if no such number exists.
    """
    start = n
    end = n // 2

    for i in range(start, end, -1):
        if i % 5 == 0:
            return i

    return None

class TestFindLargestDivisible(unittest.TestCase):
    def test_typical_case(self):
        """Test with a typical input where the largest divisible number should be found."""
        self.assertEqual(find_largest_divisible(50), 50)
        self.assertEqual(find_largest_divisible(47), 45)

    def test_no_divisible_found(self):
        """Test a case where no divisible number is found within the range."""
        self.assertIsNone(find_largest_divisible(4))

    def test_exact_half_divisible(self):
        """Test when the half of n is exactly divisible by 5."""
        self.assertEqual(find_largest_divisible(10), 10)

    def test_large_number(self):
        """Test with a large number to ensure performance and correctness."""
        self.assertEqual(find_largest_divisible(1000), 1000)

    def test_lower_bound(self):
        """Test the function with the lowest bound that should find a divisible number."""
        self.assertEqual(find_largest_divisible(5), 5)
```

### Equivalent Jest Test Suite

Here’s the equivalent Jest test suite for the given Python unittest class:

```javascript
const findLargestDivisible = require('./findLargestDivisible'); // Assuming the function is exported from another file

describe('findLargestDivisible', () => {
    test('test typical case', () => {
        /** Test with a typical input where the largest divisible number should be found. */
        expect(findLargestDivisible(50)).toBe(50);
        expect(findLargestDivisible(47)).toBe(45);
    });

    test('test no divisible number found', () => {
        /** Test a case where no divisible number is found within the range. */
        expect(findLargestDivisible(4)).toBeNull();
    });

    test('test exact half divisible', () => {
        /** Test when the half of n is exactly divisible by 5. */
        expect(findLargestDivisible(10)).toBe(10);
    });

    test('test large number', () => {
        /** Test with a large number to ensure performance and correctness. */
        expect(findLargestDivisible(1000)).toBe(1000);
    });

    test('test lower bound', () => {
        /** Test the function with the lowest bound that should find a divisible number. */
        expect(findLargestDivisible(5)).toBe(5);
    });
});
```

### Explanation:
1. **Importing the Function**: The `findLargestDivisible` function is imported from another file (assuming it is defined elsewhere).
2. **Describe Block**: The `describe` block groups all the tests related to the `findLargestDivisible` function.
3. **Test Blocks**:
   - Each test case is defined using the `test` function.
   - The docstrings from the Python unittest are preserved as comments within the test blocks.
4. **Assertions**:
   - `expect(findLargestDivisible(...)).toBe(...)` is used to assert equality.
   - `expect(findLargestDivisible(...)).toBeNull()` is used to check for `null`.

This Jest test suite maintains the same functionality and logic as the original Python unittest class, ensuring that all assertions are mapped appropriately.