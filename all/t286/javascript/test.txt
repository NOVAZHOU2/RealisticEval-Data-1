First, let's convert the Python function `find_largest_divisible` to JavaScript. Then, we'll write the Jest test cases for this function.

### Step 1: Convert Python Function to JavaScript

Here is the JavaScript version of the `find_largest_divisible` function:

```javascript
function findLargestDivisible(n) {
    // Ensure n is an integer and greater than 0
    if (!Number.isInteger(n) || n <= 0) {
        return null;
    }

    const lowerBound = Math.floor(n / 2);

    for (let i = n; i >= lowerBound; i--) {
        if (i % 10 === 0 || i % 5 === 0) {
            return i;
        }
    }

    return null;
}
```

### Step 2: Write Jest Test Cases

Now, let's write the Jest test cases. We will use Jest's `describe` and `it` blocks to organize our tests.

```javascript
const { findLargestDivisible } = require('./path/to/your/function');

describe('findLargestDivisible', () => {
    it('should return the largest number divisible by 10 or 5 within the range', () => {
        expect(findLargestDivisible(10)).toBe(10);
        expect(findLargestDivisible(15)).toBe(15);
        expect(findLargestDivisible(20)).toBe(20);
        expect(findLargestDivisible(25)).toBe(25);
        expect(findLargestDivisible(30)).toBe(30);
        expect(findLargestDivisible(35)).toBe(35);
    });

    it('should return the largest number divisible by 10 or 5 when n is not divisible by 10 or 5', () => {
        expect(findLargestDivisible(11)).toBe(10);
        expect(findLargestDivisible(16)).toBe(15);
        expect(findLargestDivisible(21)).toBe(20);
        expect(findLargestDivisible(26)).toBe(25);
        expect(findLargestDivisible(31)).toBe(30);
        expect(findLargestDivisible(36)).toBe(35);
    });

    it('should return null when there is no number divisible by 10 or 5 within the range', () => {
        expect(findLargestDivisible(4)).toBe(null);
        expect(findLargestDivisible(7)).toBe(null);
        expect(findLargestDivisible(9)).toBe(null);
    });

    it('should handle edge cases correctly', () => {
        expect(findLargestDivisible(0)).toBe(null);
        expect(findLargestDivisible(-5)).toBe(null);
        expect(findLargestDivisible(4.5)).toBe(null);
    });
});

// Example usage of the function
console.log(findLargestDivisible(10));  // Output: 10
console.log(findLargestDivisible(15));  // Output: 15
console.log(findLargestDivisible(20));  // Output: 20
console.log(findLargestDivisible(25));  // Output: 25
console.log(findLargestDivisible(30));  // Output: 30
console.log(findLargestDivisible(35));  // Output: 35
console.log(findLargestDivisible(4));   // Output: null
console.log(findLargestDivisible(7));   // Output: null
console.log(findLargestDivisible(9));   // Output: null
```

### Explanation:

1. **Function Conversion**:
    - The JavaScript function `findLargestDivisible` follows the same logic as the Python function but uses JavaScript syntax.
    - It checks if the input is an integer and positive using `Number.isInteger`.
    - It iterates from `n` down to `Math.floor(n / 2)` to find the largest number divisible by 10 or 5.

2. **Jest Test Cases**:
    - We use `describe` to group related tests.
    - Each `it` block contains one or more assertions using `expect` to verify the expected behavior of the function.
    - We test various scenarios including typical cases, edge cases, and invalid inputs.

This approach ensures that the functionality and logic of the original Python unittest are preserved in Jest.