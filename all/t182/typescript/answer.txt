To convert the provided Python code to TypeScript, we need to adapt the file handling and timing logic while ensuring we define appropriate types. Here's the equivalent TypeScript code:

```typescript
import * as fs from 'fs';
import * as path from 'path';

function copyFileWithBufferedStream(sourceFilePath: string, destinationFilePath: string): number | null {
    /**
     * Copies the contents of the source file to the destination file using a buffered stream
     * and measures the time it takes to complete the operation.
     *
     * @param sourceFilePath - The path to the source file.
     * @param destinationFilePath - The path to the destination file.
     * @returns The time taken to copy the file in milliseconds or null in case of an error.
     */
    const startTime = Date.now(); // Start timing

    try {
        const sourceFile = fs.createReadStream(sourceFilePath);
        const destinationFile = fs.createWriteStream(destinationFilePath);
        
        sourceFile.pipe(destinationFile);
        
        return new Promise<number | null>((resolve, reject) => {
            destinationFile.on('finish', () => {
                const endTime = Date.now(); // End timing
                resolve(endTime - startTime); // Return time in milliseconds
            });
            destinationFile.on('error', (error) => {
                console.error(`Error: ${error}`);
                resolve(null); // Return null in case of error
            });
        });
    } catch (error) {
        console.error(`Error: ${error}`);
        return null; // Return null in case of error
    }
}
```

### Key Changes:
- Used `fs.createReadStream` and `fs.createWriteStream` for file handling.
- Utilized a Promise to handle asynchronous operations, which is idiomatic in TypeScript/JavaScript.
- Types were defined for function parameters and return values.