Here's the equivalent JavaScript code for the provided Python code, maintaining the same functionality and structure:

```javascript
const fs = require('fs');
const path = require('path');

function copyFileWithBufferedStream(sourceFilePath, destinationFilePath) {
    /**
     * Copies the contents of the source file to the destination file using a buffered stream
     * and measures the time it takes to complete the operation.
     *
     * @param {string} sourceFilePath - The path to the source file.
     * @param {string} destinationFilePath - The path to the destination file.
     * @return {number|null} The time taken to copy the file in milliseconds or null in case of error.
     */
    const startTime = Date.now();  // Start timing

    try {
        const sourceFile = fs.createReadStream(sourceFilePath, { highWaterMark: 8192 });
        const destinationFile = fs.createWriteStream(destinationFilePath);
        
        sourceFile.pipe(destinationFile);

        return new Promise((resolve, reject) => {
            destinationFile.on('finish', () => {
                const endTime = Date.now();  // End timing
                resolve(endTime - startTime);  // Return time taken in milliseconds
            });

            destinationFile.on('error', (err) => {
                console.error(`Error: ${err}`);
                reject(null);  // Return null in case of error
            });
        });
    } catch (error) {
        console.error(`Error: ${error}`);
        return null;  // Return null in case of error
    }
}

// Usage example:
// copyFileWithBufferedStream('source.txt', 'destination.txt').then(timeTaken => {
//     console.log(`Time taken: ${timeTaken} ms`);
// }).catch(err => {
//     console.log('An error occurred', err);
// });
```

### Explanation:
1. **Imports**: The `fs` module is imported for file operations.
2. **Function Declaration**: The `copyFileWithBufferedStream` function takes the source and destination file paths as parameters.
3. **Timing**: `Date.now()` is used to capture the start and end times.
4. **File Streams**: Read and write streams are created for the source and destination files, respectively.
5. **Piping**: The `pipe` method streams data from the source file to the destination file.
6. **Promises**: The function returns a Promise that resolves with the time taken to copy the file or rejects with `null` in case of an error.
7. **Error Handling**: Errors during the file operations are caught and logged.

You can uncomment the usage example at the bottom to test the function.