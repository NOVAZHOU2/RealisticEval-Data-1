Here's the equivalent C++ code that mirrors the functionality of your provided Python code:

```cpp
#include <iostream>
#include <fstream>
#include <chrono>

long long copy_file_with_buffered_stream(const std::string& source_file_path, const std::string& destination_file_path) {
    /**
     * Copies the contents of the source file to the destination file using a buffered stream
     * and measures the time it takes to complete the operation.
     *
     * @param source_file_path: The path to the source file.
     * @param destination_file_path: The path to the destination file.
     * @return: The time taken to copy the file in milliseconds.
     */
    
    auto start_time = std::chrono::high_resolution_clock::now(); // Start timing
    
    try {
        std::ifstream source_file(source_file_path, std::ios::binary);
        std::ofstream destination_file(destination_file_path, std::ios::binary);
        
        if (!source_file || !destination_file) {
            throw std::ios_base::failure("Error opening files");
        }

        char buffer[8192]; // Buffer size of 8192 bytes
        while (source_file) {
            source_file.read(buffer, sizeof(buffer));
            destination_file.write(buffer, source_file.gcount());
        }
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return -1; // Return -1 in case of error
    }

    auto end_time = std::chrono::high_resolution_clock::now(); // End timing
    return std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count(); // Convert to milliseconds
}

int main() {
    std::string source = "path/to/source/file";
    std::string destination = "path/to/destination/file";

    long long duration = copy_file_with_buffered_stream(source, destination);
    if (duration != -1) {
        std::cout << "File copied in " << duration << " ms" << std::endl;
    }
    return 0;
}
```

### Key Points of Translation:
1. **File Handling**: C++ uses `std::ifstream` and `std::ofstream` for reading and writing files, respectively.
2. **Error Handling**: C++ exceptions are used for error management.
3. **Timing**: The `<chrono>` library is used to measure the time taken for the file copy operation.
4. **Buffer Management**: A character array serves as the buffer for reading and writing data in chunks.

Make sure to adjust the `source` and `destination` paths in the `main` function to test with your actual files!