Certainly! Below is the equivalent JavaScript code with JSDoc comments to match the Python function signature and documentation:

```javascript
const math = require('mathjs');

/**
 * Given a 3x3 affine transformation matrix, return the corresponding scaling factors
 * along the x and y axes.
 *
 * @param {Array<Array<number>>} matrix - A 3x3 affine transformation matrix.
 * @returns {[number, number]} A tuple containing the scale factors (scale_x, scale_y).
 */
function getScale(matrix) {
    // Ensure the matrix is a 3x3 array
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => !Array.isArray(row) || row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the scale factors using the norm of the columns
    const scaleX = math.norm(math.matrix(matrix.slice(0, 2).map(row => row[0])));
    const scaleY = math.norm(math.matrix(matrix.slice(0, 2).map(row => row[1])));

    return [parseFloat(scaleX), parseFloat(scaleY)];
}

// Example usage
const matrix = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]
];

console.log(getScale(matrix));  // Output should be [1, 1]
```

### Explanation:
1. **Importing Mathjs**: The `mathjs` library is used for numerical operations similar to NumPy in Python.
2. **JSDoc Comments**: The JSDoc comments provide detailed documentation for the function, including parameters and return types.
3. **Function Definition**: The function `getScale` takes a 3x3 matrix as input and returns the scale factors along the x and y axes.
4. **Validation**: The input matrix is validated to ensure it is a 3x3 array.
5. **Calculating Scale Factors**:
   - The `norm` function from `mathjs` is used to calculate the Euclidean norm of the relevant columns.
   - The slicing and mapping operations are used to extract the relevant parts of the matrix.
6. **Returning Results**: The scale factors are returned as an array of floating-point numbers.

This JavaScript code preserves the purpose and structure of the original Python code and includes appropriate JSDoc comments for clarity.