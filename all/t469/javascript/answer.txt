To convert the given Python code into JavaScript, we need to ensure that the functionality, logic, and structure remain consistent. We will use the `mathjs` library to handle the matrix operations and norms, as JavaScript does not have a built-in library equivalent to NumPy.

First, you need to install the `mathjs` library if you haven't already:

```bash
npm install mathjs
```

Here is the equivalent JavaScript code:

```javascript
const math = require('mathjs');

/**
 * Given a 3x3 affine transformation matrix, return the corresponding scaling factors
 * along the x and y axes.
 *
 * @param {Array<Array<number>>} matrix - A 3x3 affine transformation matrix.
 * @returns {[number, number]} A tuple containing the scale factors (scale_x, scale_y).
 */
function getScale(matrix) {
    // Ensure the matrix is a 3x3 array
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Extract the relevant submatrix for calculating scale factors
    const subMatrixX = [matrix[0].slice(0, 2), matrix[1].slice(0, 2)];
    const subMatrixY = [matrix[0].slice(1, 3), matrix[1].slice(1, 3)];

    // Calculate the scale factors using the norm of the columns
    const scaleX = math.norm(math.column(subMatrixX, 0));
    const scaleY = math.norm(math.column(subMatrixY, 1));

    return [parseFloat(scaleX.toFixed(15)), parseFloat(scaleY.toFixed(15))];
}

// Example usage
const matrix = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]
];

console.log(getScale(matrix));  // Output should be [1, 1]
```

### Explanation:
1. **Importing `mathjs`**: The `mathjs` library provides functions similar to those in NumPy, such as matrix operations and norms.
2. **Function Definition**: The `getScale` function takes a 3x3 matrix as input and returns the scale factors.
3. **Validation**: The function checks if the input is a valid 3x3 matrix.
4. **Submatrix Extraction**: It extracts the relevant submatrices for calculating the scale factors.
5. **Norm Calculation**: It uses the `math.norm` function to calculate the norms of the columns.
6. **Return Values**: The function returns the scale factors as an array of numbers.

This ensures that the functionality, logic, and structure of the original Python code are preserved in the JavaScript version.