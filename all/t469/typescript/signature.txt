Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate type annotations and JSDoc-style documentation comments:

```typescript
import * as math from 'mathjs';

/**
 * Given a 3x3 affine transformation matrix, return the corresponding scaling factors
 * along the x and y axes.
 *
 * @param matrix - A 3x3 affine transformation matrix.
 * @returns A tuple containing the scale factors (scale_x, scale_y).
 */
function getScale(matrix: number[][]): [number, number] {
  // Ensure the matrix is a 3x3 array
  if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
    throw new Error('Input must be a 3x3 affine transformation matrix.');
  }

  // Calculate the scale factors using the norm of the columns
  const scale_x = math.norm(matrix.slice(0, 2).map(row => row[0]), 2); // Using the first two rows for x-scale
  const scale_y = math.norm(matrix.slice(0, 2).map(row => row[1]), 2); // Using the first two rows for y-scale

  return [scale_x, scale_y];
}

// Example usage
const matrix: number[][] = [
  [1, 0, 0],
  [0, 1, 0],
  [0, 0, 1]
];

console.log(getScale(matrix)); // Output: [1, 1]
```

### Explanation:
1. **Import `mathjs`**: We use the `mathjs` library for mathematical operations such as calculating the norm.
2. **JSDoc Documentation Comments**:
   - The function signature and parameters are documented using JSDoc comments.
3. **Type Definitions**:
   - `matrix`: A 3x3 array of numbers.
   - `getScale`: The function returns a tuple `[number, number]`.
4. **Validation**:
   - Check if the input is a 3x3 array.
5. **Calculating Scale Factors**:
   - Use `math.norm` to calculate the Euclidean norm of the relevant columns.
6. **Return Values**: Return the scale factors as a tuple.

This ensures that the TypeScript code maintains the same functionality and structure as the Python code while adhering to TypeScript's static type system and using appropriate documentation comments.