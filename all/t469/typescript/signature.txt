Certainly! Below is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments.

### TypeScript Code

```typescript
/**
 * Given a 3x3 affine transformation matrix, return the corresponding scaling factors
 * along the x and y axes.
 *
 * @param matrix - A 3x3 affine transformation matrix.
 * @returns A tuple containing the scale factors (scale_x, scale_y).
 */
function getScale(matrix: number[][]): [number, number] {
    // Ensure the matrix is a 3x3 array
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the scale factors using the norm of the columns
    const scaleX = calculateNorm(matrix.slice(0, 2).map(row => row[0]));
    const scaleY = calculateNorm(matrix.slice(0, 2).map(row => row[1]));

    return [scaleX, scaleY];
}

/**
 * Calculates the Euclidean norm of a vector.
 *
 * @param vector - The vector to calculate the norm for.
 * @returns The Euclidean norm of the vector.
 */
function calculateNorm(vector: number[]): number {
    return Math.sqrt(vector.reduce((acc, val) => acc + val * val, 0));
}

// Example usage
const matrix: number[][] = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]
];

console.log(getScale(matrix)); // Output: [1, 1]

// Additional test cases
const testMatrix: number[][] = [
    [2, 0, 0],
    [0, 3, 0],
    [0, 0, 1]
];

console.log(getScale(testMatrix)); // Output: [2, 3]
```

### Explanation:
1. **Function Signature**: The `getScale` function is defined with a JSDoc comment that describes its purpose, parameters, and return type.
2. **Type Annotations**: The `matrix` parameter is annotated as `number[][]`, which represents a 2D array of numbers.
3. **Validation**: The function checks if the input is a valid 3x3 matrix.
4. **Norm Calculation**: The `calculateNorm` function computes the Euclidean norm of a vector, which is used to calculate the scale factors.
5. **Example Usage**: Provided examples demonstrate how to call the function with different matrices.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices for documentation.