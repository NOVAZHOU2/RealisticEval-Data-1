To convert your Python `unittest` test class to a TypeScript test case using Jest, you'll need to follow these steps:

1. Install Jest if you haven't already.
2. Create a new TypeScript file for your tests.
3. Write the equivalent Jest test cases.

Here's how you can do it:

### Step 1: Install Jest

If you haven't installed Jest yet, you can do so using npm or yarn:

```sh
npm install --save-dev jest
```

or

```sh
yarn add --dev jest
```

### Step 2: Create a New TypeScript File for Your Tests

Create a new TypeScript file, e.g., `getScale.test.ts`.

### Step 3: Write the Equivalent Jest Test Cases

Below is an example of how you might write the Jest test cases for your `get_scale` function. Note that TypeScript does not have direct equivalents to Python's `numpy`, but we can simulate similar behavior using JavaScript/TypeScript arrays.

First, let's define the `get_scale` function in a separate file, e.g., `getScale.ts`, and then write the tests in `getScale.test.ts`.

#### `getScale.ts`

```typescript
export function get_scale(matrix: number[][]): [number, number] {
    // Assuming the matrix is a 3x3 affine transformation matrix
    const scaleX = Math.sqrt(matrix[0][0] * matrix[0][0] + matrix[0][1] * matrix[0][1]);
    const scaleY = Math.sqrt(matrix[1][0] * matrix[1][0] + matrix[1][1] * matrix[1][1]);
    return [scaleX, scaleY];
}
```

#### `getScale.test.ts`

```typescript
import { get_scale } from './getScale';

describe('get_scale', () => {
    it('should correctly calculate scale factors for a given 3x3 affine transformation matrix', () => {
        const matrix: number[][] = [
            [2, 0, 0],
            [0, 3, 0],
            [0, 0, 1]
        ];

        const expected: [number, number] = [2, 3];

        const result = get_scale(matrix);

        expect(result).toEqual(expected);
    });

    it('should handle matrices with non-zero translation components', () => {
        const matrix: number[][] = [
            [2, 0, 5],
            [0, 3, 7],
            [0, 0, 1]
        ];

        const expected: [number, number] = [2, 3];

        const result = get_scale(matrix);

        expect(result).toEqual(expected);
    });

    it('should handle singular matrices (zero scaling)', () => {
        const matrix: number[][] = [
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 1]
        ];

        const expected: [number, number] = [0, 0];

        const result = get_scale(matrix);

        expect(result).toEqual(expected);
    });
});
```

### Running the Tests

To run the tests, you can add a script to your `package.json`:

```json
{
  "scripts": {
    "test": "jest"
  }
}
```

Then, you can run the tests using:

```sh
npm test
```

or

```sh
yarn test
```

This will execute all the Jest test cases defined in your `getScale.test.ts` file.