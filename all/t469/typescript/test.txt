Certainly! Below is the equivalent Jest test suite in TypeScript for the provided Python unittest class. The TypeScript code will include proper type annotations and use Jest assertions to ensure the functionality and logic of the tests are preserved.

### TypeScript Code

```typescript
import { getScale } from './getScale'; // Assuming getScale is defined in a separate file

describe('TestGetScaleFunction', () => {
    it('test_identity_matrix', () => {
        // Test for the identity matrix (no scaling)
        const matrix: number[][] = [
            [1, 0, 0],
            [0, 1, 0],
            [0, 0, 1]
        ];
        const expectedScale: [number, number] = [1.0, 1.0];
        expect(getScale(matrix)).toEqual(expectedScale);
    });

    it('test_scaling_matrix', () => {
        // Test for a scaling matrix (2x in x and 3x in y)
        const matrix: number[][] = [
            [2, 0, 0],
            [0, 3, 0],
            [0, 0, 1]
        ];
        const expectedScale: [number, number] = [2.0, 3.0];
        expect(getScale(matrix)).toEqual(expectedScale);
    });

    it('test_uniform_scaling', () => {
        // Test case with uniform scaling
        const matrix: number[][] = [
            [2, 0, 0],
            [0, 2, 0],
            [0, 0, 1]
        ];
        const expectedScale: [number, number] = [2.0, 2.0];
        expect(getScale(matrix)).toEqual(expectedScale);
    });

    it('test_non_uniform_scaling', () => {
        // Test case with non-uniform scaling
        const matrix: number[][] = [
            [3, 0, 0],
            [0, 5, 0],
            [0, 0, 1]
        ];
        const expectedScale: [number, number] = [3.0, 5.0];
        expect(getScale(matrix)).toEqual(expectedScale);
    });

    it('test_reflection_matrix', () => {
        // Test case with reflection matrix
        const matrix: number[][] = [
            [-1, 0, 0],
            [0, 1, 0],
            [0, 0, 1]
        ];
        const expectedScale: [number, number] = [1.0, 1.0];
        expect(getScale(matrix)).toEqual(expectedScale);
    });
});

// Utility functions (if needed)
function calculateNorm(vector: number[]): number {
    return Math.sqrt(vector.reduce((acc, val) => acc + val * val, 0));
}
```

### Explanation:
1. **Import Statements**: The `getScale` function is imported from a separate file (`getScale.ts`).
2. **Jest Describe Block**: The `describe` block groups all the test cases under a single suite named `TestGetScaleFunction`.
3. **Test Cases**: Each test case is defined using the `it` function, which includes a description and the actual test logic.
4. **Type Annotations**: The `matrix` and `expectedScale` variables are properly typed to ensure correctness.
5. **Assertions**: The `expect` function is used with `toEqual` to compare the results of `getScale` with the expected values.
6. **Utility Function**: The `calculateNorm` function is included as a utility function if needed for the implementation of `getScale`.

### `getScale` Implementation (Assuming it is defined in `getScale.ts`)

```typescript
/**
 * Given a 3x3 affine transformation matrix, return the corresponding scaling factors
 * along the x and y axes.
 *
 * @param matrix - A 3x3 affine transformation matrix.
 * @returns A tuple containing the scale factors (scale_x, scale_y).
 */
export function getScale(matrix: number[][]): [number, number] {
    // Ensure the matrix is a 3x3 array
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the scale factors using the norm of the columns
    const scaleX = calculateNorm(matrix.slice(0, 2).map(row => row[0]));
    const scaleY = calculateNorm(matrix.slice(0, 2).map(row => row[1]));

    return [scaleX, scaleY];
}

/**
 * Calculates the Euclidean norm of a vector.
 *
 * @param vector - The vector to calculate the norm for.
 * @returns The Euclidean norm of the vector.
 */
function calculateNorm(vector: number[]): number {
    return Math.sqrt(vector.reduce((acc, val) => acc + val * val, 0));
}
```

This setup ensures that the functionality and logic of the tests are preserved, and the TypeScript code is properly structured and annotated.