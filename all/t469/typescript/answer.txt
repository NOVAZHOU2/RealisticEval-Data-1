Certainly! Below is the equivalent TypeScript code for the provided Python function. The TypeScript version will use `numpy` for similar operations, but since `numpy` is not natively available in TypeScript, we'll use a similar library or implement the necessary parts manually. For this example, I'll use a manual approach to calculate the norms.

Hereâ€™s the TypeScript code:

```typescript
import { Matrix } from 'mathjs';

/**
 * Given a 3x3 affine transformation matrix, return the corresponding scaling factors
 * along the x and y axes.
 *
 * @param matrix - A 3x3 affine transformation matrix.
 * @returns A tuple containing the scale factors (scale_x, scale_y).
 */
function getScale(matrix: number[][]): [number, number] {
    // Ensure the matrix is a 3x3 array
    if (!Array.isArray(matrix) || matrix.length !== 3 || matrix.some(row => row.length !== 3)) {
        throw new Error("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the scale factors using the norm of the columns
    const scaleX = calculateNorm(matrix.slice(0, 2).map(row => row[0]));
    const scaleY = calculateNorm(matrix.slice(0, 2).map(row => row[1]));

    return [scaleX, scaleY];
}

/**
 * Calculates the Euclidean norm of a vector.
 *
 * @param vector - The vector to calculate the norm for.
 * @returns The Euclidean norm of the vector.
 */
function calculateNorm(vector: number[]): number {
    return Math.sqrt(vector.reduce((acc, val) => acc + val * val, 0));
}

// Example usage
const matrix: number[][] = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]
];

console.log(getScale(matrix)); // Output: [1, 1]

// Additional test cases
const testMatrix: number[][] = [
    [2, 0, 0],
    [0, 3, 0],
    [0, 0, 1]
];

console.log(getScale(testMatrix)); // Output: [2, 3]
```

### Explanation:
1. **Type Definitions**: The function `getScale` takes a 3x3 matrix as input and returns a tuple of two numbers representing the scale factors.
2. **Validation**: The function checks if the input is a valid 3x3 matrix.
3. **Norm Calculation**: The `calculateNorm` function computes the Euclidean norm of a vector, which is used to calculate the scale factors.
4. **Example Usage**: Provided examples demonstrate how to call the function with different matrices.

This TypeScript code maintains the same functionality and logic as the original Python code, while adapting it to TypeScript's static type system and idiomatic practices.