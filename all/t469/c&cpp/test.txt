Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <iostream>
#include <Eigen/Dense>  // For matrix operations
#include <utility>      // For std::pair
#include <stdexcept>    // For std::invalid_argument
#include <catch2/catch_test_macros.hpp>

// Function to calculate the scaling factors from a 3x3 affine transformation matrix
std::pair<double, double> get_scale(const Eigen::MatrixXd& matrix) {
    // Ensure the matrix is a 3x3 matrix
    if (matrix.rows() != 3 || matrix.cols() != 3) {
        throw std::invalid_argument("Input must be a 3x3 affine transformation matrix.");
    }

    // Calculate the scale factors using the norm of the columns
    double scale_x = matrix.block(0, 0, 2, 1).norm();  // Using the first two rows for x-scale
    double scale_y = matrix.block(0, 1, 2, 1).norm();  // Using the first two rows for y-scale

    return std::make_pair(scale_x, scale_y);
}

TEST_CASE("Test Get Scale Function", "[get_scale]") {
    SECTION("Identity Matrix") {
        // Test for the identity matrix (no scaling)
        Eigen::MatrixXd matrix(3, 3);
        matrix << 1, 0, 0,
                  0, 1, 0,
                  0, 0, 1;
        auto expected_scale = std::make_pair(1.0, 1.0);
        REQUIRE(get_scale(matrix) == expected_scale);
    }

    SECTION("Scaling Matrix") {
        // Test for a scaling matrix (2x in x and 3x in y)
        Eigen::MatrixXd matrix(3, 3);
        matrix << 2, 0, 0,
                  0, 3, 0,
                  0, 0, 1;
        auto expected_scale = std::make_pair(2.0, 3.0);
        REQUIRE(get_scale(matrix) == expected_scale);
    }

    SECTION("Uniform Scaling") {
        // Test case with uniform scaling
        Eigen::MatrixXd matrix(3, 3);
        matrix << 2, 0, 0,
                  0, 2, 0,
                  0, 0, 1;
        auto expected_scale = std::make_pair(2.0, 2.0);
        REQUIRE(get_scale(matrix) == expected_scale);
    }

    SECTION("Non-Uniform Scaling") {
        // Test case with non-uniform scaling
        Eigen::MatrixXd matrix(3, 3);
        matrix << 3, 0, 0,
                  0, 5, 0,
                  0, 0, 1;
        auto expected_scale = std::make_pair(3.0, 5.0);
        REQUIRE(get_scale(matrix) == expected_scale);
    }

    SECTION("Reflection Matrix") {
        // Test case with reflection matrix
        Eigen::MatrixXd matrix(3, 3);
        matrix << -1, 0, 0,
                  0, 1, 0,
                  0, 0, 1;
        auto expected_scale = std::make_pair(1.0, 1.0);
        REQUIRE(get_scale(matrix) == expected_scale);
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Header Files**:
   - `#include <iostream>`: For basic input/output.
   - `#include <Eigen/Dense>`: For matrix operations using the Eigen library.
   - `#include <utility>`: For using `std::pair`.
   - `#include <stdexcept>`: For throwing exceptions.
   - `#include <catch2/catch_test_macros.hpp>`: For Catch2 testing macros.

2. **Function Definition**:
   - The function `get_scale` takes a `const Eigen::MatrixXd&` as input, which represents a 3x3 matrix.
   - It checks if the matrix is indeed 3x3 and throws an exception if it is not.
   - It calculates the scale factors using the Euclidean norm of the first two rows of the respective columns.
   - It returns a `std::pair<double, double>` representing the scale factors.

3. **Catch2 Test Suite**:
   - The `TEST_CASE` macro defines a test suite named "Test Get Scale Function".
   - Each `SECTION` within the test suite corresponds to a specific test case.
   - The `REQUIRE` macro is used for assertions, ensuring that the actual result matches the expected result.

4. **Main Function**:
   - The `main` function initializes and runs the Catch2 test session.

This code ensures that the functionality and logic of the Python unittest class are preserved in the equivalent C++ Catch2 test suite.