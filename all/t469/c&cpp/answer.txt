Here is an equivalent C++ code for your Python function:

```c++
#include <iostream>
#include <vector>

using namespace std;

typedef pair<double, double> ScaleFactors;
typedef vector<vector<double>> Matrix;

ScaleFactors get_scale(const Matrix& matrix) {
    if (matrix.size() != 3 || matrix[0].size() != 3 || matrix[1].size() != 3 || matrix[2].size() != 3) {
        throw invalid_argument("Matrix must be 3x3");
    }

    double scale_x = sqrt(pow(matrix[0][0], 2) + pow(matrix[1][0], 2));
    double scale_y = sqrt(pow(matrix[0][1], 2) + pow(matrix[1][1], 2));

    return make_pair(scale_x, scale_y);
}
```

This code does not use any external libraries like NumPy in Python because they do not have direct equivalents in C++. Instead, it uses standard C++ data structures and functions.

Please note that this C++ code assumes that the input matrix is a valid 3x3 matrix. If you want to add error handling for invalid matrices, you should add additional checks. Also, this code calculates the scale factors using the Euclidean norm of the first two rows and columns respectively. This may or may not be what you want depending on how you define "scaling" in your context.