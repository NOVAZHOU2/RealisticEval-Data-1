Here's the equivalent C++ code for the provided Python function:

```cpp
#include <iostream>
#include <iomanip>
#include <string>

std::string byte_count_to_display_size(int size_in_bytes) {
    // Constants for byte conversions
    const int ONE_KB = 1024;
    const int ONE_MB = ONE_KB * 1024;
    const int ONE_GB = ONE_MB * 1024;
    const int ONE_TB = ONE_GB * 1024;

    // Check the size and format accordingly
    if (size_in_bytes < ONE_KB) {
        std::ostringstream oss;
        oss << std::fixed << std::setprecision(2) << size_in_bytes << " bytes";  // Return size in bytes
        return oss.str();
    } else if (size_in_bytes < ONE_MB) {
        std::ostringstream oss;
        oss << std::fixed << std::setprecision(2) << static_cast<double>(size_in_bytes) / ONE_KB << " KB";  // Return size in KB
        return oss.str();
    } else if (size_in_bytes < ONE_GB) {
        std::ostringstream oss;
        oss << std::fixed << std::setprecision(2) << static_cast<double>(size_in_bytes) / ONE_MB << " MB";  // Return size in MB
        return oss.str();
    } else if (size_in_bytes < ONE_TB) {
        std::ostringstream oss;
        oss << std::fixed << std::setprecision(2) << static_cast<double>(size_in_bytes) / ONE_GB << " GB";  // Return size in GB
        return oss.str();
    } else {
        std::ostringstream oss;
        oss << std::fixed << std::setprecision(2) << static_cast<double>(size_in_bytes) / ONE_TB << " TB";  // Return size in TB
        return oss.str();
    }
}

int main() {
    int size_in_bytes = 123456789;
    std::cout << byte_count_to_display_size(size_in_bytes) << std::endl;
    return 0;
}
```

### Key Differences Explained:

1. **Function Declaration**: C++ requires explicit type declarations, so the function is declared with the return type `std::string`.

2. **String Formatting**: Instead of using Python's f-strings, C++ uses `std::ostringstream` along with manipulators like `std::fixed` and `std::setprecision` to format the output string.

3. **Static Casting**: C++ requires explicit casting to avoid integer division, so `static_cast<double>` is used when dividing to ensure that the result is a floating-point number.

4. **Headers**: Standard headers like `<iostream>`, `<iomanip>`, and `<string>` are included to support input/output operations, string manipulation, and formatting.

5. **Main Function**: A `main` function is added to demonstrate how to call the `byte_count_to_display_size` function and print its output.