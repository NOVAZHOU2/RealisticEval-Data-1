Hereâ€™s the equivalent test class using Catch2 for the provided Python unittest class:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>

// Function declaration
std::string byte_count_to_display_size(int size_in_bytes);

TEST_CASE("Byte count to display size tests") {
    SECTION("Test case for 0 bytes") {
        int input_size = 0;
        std::string expected = "0 bytes";
        REQUIRE(byte_count_to_display_size(input_size) == expected);
    }

    SECTION("Test case for bytes less than 1KB") {
        int input_size = 500;
        std::string expected = "500 bytes";
        REQUIRE(byte_count_to_display_size(input_size) == expected);
    }

    SECTION("Test case for exactly 1KB") {
        int input_size = 1024;
        std::string result = byte_count_to_display_size(input_size);
        REQUIRE(result == "1 KB" || result == "1.00 KB");
    }

    SECTION("Test case for a size between 1KB and 1MB") {
        int input_size = 5000;
        std::string expected = "4.88 KB";
        REQUIRE(byte_count_to_display_size(input_size) == expected);
    }

    SECTION("Test case for exactly 1MB") {
        int input_size = 1048576; // 1024 * 1024
        std::string result = byte_count_to_display_size(input_size);
        REQUIRE(result == "1 MB" || result == "1.00 MB");
    }
}
```

### Key Changes Explained:

1. **Catch2 Configuration**: The line `#define CATCH_CONFIG_MAIN` is included to set up the main function for Catch2 automatically.

2. **Function Declaration**: The declaration for `byte_count_to_display_size` is included at the beginning.

3. **TEST_CASE and SECTION**: The `TEST_CASE` macro is used to define the test suite, and `SECTION` is used to define individual test cases.

4. **Assertions**: The `REQUIRE` macro is used instead of `assertEqual` or `assertTrue`, maintaining similar logical checks.

5. **String Handling**: Strings are handled using `std::string`, consistent with the C++ standard library.

This C++ test class preserves the logic and functionality of the original Python unit tests while adapting to the syntax and conventions of Catch2.