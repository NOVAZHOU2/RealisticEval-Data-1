Hereâ€™s the equivalent C++ code for the provided TypeScript function that checks if two timestamps correspond to the same day:

```cpp
#include <iostream>
#include <ctime>

bool isSameDay(std::time_t timestamp1, std::time_t timestamp2) {
    // Convert timestamps to tm struct
    std::tm* date1 = std::localtime(&timestamp1);
    std::tm* date2 = std::localtime(&timestamp2);

    // Compare the year, month, and day of both tm structs
    return (date1->tm_year == date2->tm_year) &&
           (date1->tm_mon == date2->tm_mon) &&
           (date1->tm_mday == date2->tm_mday);
}

int main() {
    std::time_t timestamp1 = std::time(nullptr); // Current time
    std::time_t timestamp2 = timestamp1; // For testing, same as timestamp1

    if (isSameDay(timestamp1, timestamp2)) {
        std::cout << "The timestamps are on the same day." << std::endl;
    } else {
        std::cout << "The timestamps are not on the same day." << std::endl;
    }

    return 0;
}
```

### Explanation:
- The C++ code includes the `<ctime>` library for time manipulation.
- The `isSameDay` function uses `std::localtime` to convert the timestamps to `tm` structures, which contain year, month, and day fields.
- It then compares these fields to determine if the two timestamps fall on the same day.
- A `main` function is added for testing purposes.