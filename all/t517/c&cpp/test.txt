Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class is converted to a C++ test class, ensuring that the functionality and logic of the tests are preserved. Appropriate assertions are used in Catch2.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <fstream>
#include <vector>
#include <nlohmann/json.hpp>
#include <filesystem>

namespace fs = std::filesystem;

using json = nlohmann::json;
using json_list = std::vector<json>;

// Function to read a JSON Lines file and return its content as a list of dictionaries
json_list read_jsonl(const std::string& file_path) {
    // Check if the file exists
    if (!fs::exists(file_path)) {
        throw std::runtime_error("The file '" + file_path + "' does not exist.");
    }

    json_list result;
    std::ifstream file(file_path);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open file: " + file_path);
    }

    std::string line;
    while (std::getline(file, line)) {
        try {
            json json_obj = json::parse(line);
            result.push_back(json_obj);
        } catch (const std::exception& e) {
            throw std::runtime_error("Error parsing line: " + line + " - " + e.what());
        }
    }

    return result;
}

TEST_CASE("Test reading JSON Lines files", "[jsonl]") {
    // Create temporary JSON Lines files for testing
    const std::string valid_jsonl_file = "test_valid.jsonl";
    const std::string invalid_jsonl_file = "test_invalid.jsonl";
    const std::string non_existent_file = "non_existent.jsonl";
    const std::string empty_jsonl_file = "test_empty.jsonl";

    // Valid JSON Lines content
    {
        std::ofstream file(valid_jsonl_file);
        file << R"({"name": "Alice", "age": 30})\n";
        file << R"({"name": "Bob", "age": 25})\n";
        file << R"({"name": "Charlie", "age": 35})\n";
    }

    // Invalid JSON Lines content
    {
        std::ofstream file(invalid_jsonl_file);
        file << R"({"name": "Alice", "age": 30})\n";
        file << R"({"name": "Bob", "age": "twenty-five}\n");  // Missing closing quote
    }

    // Empty JSON Lines file
    {
        std::ofstream file(empty_jsonl_file);
        file << "";  // Create an empty JSON Lines file
    }

    SECTION("Test reading a valid JSON Lines file") {
        json_list expected_data = {
            json{{"name", "Alice"}, {"age", 30}},
            json{{"name", "Bob"}, {"age", 25}},
            json{{"name", "Charlie"}, {"age", 35}}
        };

        json_list result = read_jsonl(valid_jsonl_file);
        REQUIRE(result == expected_data);
    }

    SECTION("Test for FileNotFoundError when the file does not exist") {
        REQUIRE_THROWS_AS(read_jsonl(non_existent_file), std::runtime_error);
    }

    SECTION("Test reading an empty JSON Lines file") {
        json_list result = read_jsonl(empty_jsonl_file);
        REQUIRE(result.empty());
    }

    // Remove the temporary JSON Lines files after testing
    if (fs::exists(valid_jsonl_file)) {
        fs::remove(valid_jsonl_file);
    }
    if (fs::exists(invalid_jsonl_file)) {
        fs::remove(invalid_jsonl_file);
    }
    if (fs::exists(empty_jsonl_file)) {
        fs::remove(empty_jsonl_file);
    }
}
```

### Explanation:
1. **Header Files**:
   - `#include <catch2/catch_test_macros.hpp>`: For Catch2 testing macros.
   - `#include <fstream>`: For file input/output operations.
   - `#include <vector>`: For using `std::vector`.
   - `#include <nlohmann/json.hpp>`: For JSON parsing.
   - `#include <filesystem>`: For filesystem operations.

2. **Namespaces and Types**:
   - `namespace fs = std::filesystem;`: Using the filesystem namespace.
   - `using json = nlohmann::json;`: Alias for the JSON type.
   - `using json_list = std::vector<json>;`: Alias for the list of JSON objects.

3. **Function `read_jsonl`**:
   - **Documentation**: The function is documented within the code.
   - **File Existence Check**: Uses `fs::exists` to check if the file exists.
   - **File Opening**: Uses `std::ifstream` to open the file.
   - **Line Reading and Parsing**: Uses `std::getline` to read lines and `json::parse` to parse each line.
   - **Exception Handling**: Catches exceptions during parsing and throws a `std::runtime_error`.

4. **Catch2 Test Class**:
   - **Setup**: Creates temporary JSON Lines files for testing.
   - **Sections**:
     - **Valid JSON Lines File**: Tests reading a valid JSON Lines file.
     - **File Not Found**: Tests for `std::runtime_error` when the file does not exist.
     - **Empty JSON Lines File**: Tests reading an empty JSON Lines file.
   - **Teardown**: Removes the temporary JSON Lines files after testing.

This code ensures that the functionality, structure, and logic of the original Python unittest class are preserved in C++ using the Catch2 testing framework.