Sure, here's how you can convert your Python code into TypeScript:

```typescript
import fs from 'fs';
import { parse } from 'json5';

interface JsonLine {
  [key: string]: any;
}

function readJsonl(filePath: string): JsonLine[] {
  /**
   * Reads a JSON Lines file and returns its content as a list of dictionaries.
   *
   * @param filePath - The path to the JSON Lines file.
   * @returns A list of JSON objects parsed from the file.
   * @throws Error if the specified file does not exist or there is an error parsing a line in the JSON Lines file.
   */
  
  if (!fs.existsSync(filePath)) {
    throw new Error(`File not found: ${filePath}`);
  }

  const lines = fs.readFileSync(filePath, 'utf8').split('\n');
  const jsonLines: JsonLine[] = [];

  for (const line of lines) {
    try {
      const jsonLine = parse(line);
      jsonLines.push(jsonLine);
    } catch (error) {
      throw new Error(`Error parsing JSON line: ${line}, error: ${error.message}`);
    }
  }

  return jsonLines;
}
```

### Explanation:

1. **Importing Modules**:
   - `fs` module is used for reading files synchronously.
   - `parse` function from `json5` package is used to parse JSON strings. This package handles JSON5 syntax which allows comments and trailing commas among other things.

2. **Interface Definition**:
   - `JsonLine` interface defines the structure of each JSON object in the list. It uses a dictionary-like type with keys as strings and values as any type.

3. **Function Implementation**:
   - The `readJsonl` function reads the file using `fs.readFileSync`, splits it into lines, and then parses each line using `json5.parse`.
   - If the file does not exist, it throws a custom error.
   - If there is an error parsing a line, it also throws a custom error indicating the problematic line and the error message.

Make sure to install the `json5` package if you haven't already:

```sh
npm install json5
```

This TypeScript version should provide similar functionality to your original Python code.