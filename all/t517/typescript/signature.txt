Sure! Here's how you can convert the Python function signature to TypeScript:

```typescript
import fs from 'fs';
import { promisify } from 'util';

const readFileAsync = promisify(fs.readFile);

/**
 * Reads a JSON Lines file and returns its content as a list of dictionaries.
 *
 * @param {string} file_path - The path to the JSON Lines file.
 * @returns {Promise<Array<{ [key: string]: any }>>} A promise that resolves to a list of JSON objects parsed from the file.
 * @throws {Error} If the specified file does not exist or if there is an error parsing a line in the JSON Lines file.
 */
async function readJsonl(file_path: string): Promise<Array<{ [key: string]: any }>> {
    try {
        const data = await readFileAsync(file_path, 'utf8');
        return data.split('\n')
            .map(line => JSON.parse(line))
            .filter(obj => obj !== null && typeof obj === 'object');
    } catch (error) {
        if (error.code === 'ENOENT') {
            throw new Error(`File not found: ${file_path}`);
        } else if (error instanceof SyntaxError) {
            throw new Error(`JSON decode error: ${error.message}`);
        }
        throw error;
    }
}
```

### Explanation:
1. **Importing Modules**: We use `fs` for file operations and `promisify` to convert `fs.readFile` into a promise-based function.
2. **Type Annotations**: 
   - `file_path` is annotated as `string`.
   - The return type is `Promise<Array<{ [key: string]: any }>>`, indicating it returns a promise that resolves to an array of objects where each object has string keys and any values.
3. **Error Handling**:
   - We handle specific errors such as `ENOENT` (file not found) and `SyntaxError` (JSON decode error).
4. **Function Body**:
   - We read the file asynchronously using `readFileAsync`.
   - Split the data by newline characters and parse each line as JSON.
   - Filter out any null or non-object values.

This TypeScript version maintains the same functionality and structure as your original Python code while ensuring type safety and asynchronous handling.