Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments and type annotations.

### TypeScript Code

```typescript
import fs from 'fs';

/**
 * Reads a JSON Lines file and returns its content as an array of objects.
 *
 * @param file_path - The path to the JSON Lines file.
 * @returns An array of JSON objects parsed from the file.
 * @throws {Error} If the specified file does not exist.
 * @throws {SyntaxError} If there is an error parsing a line in the JSON Lines file.
 */
function readJsonl(file_path: string): Array<{ [key: string]: any }> {
    // Check if the file exists
    if (!fs.existsSync(file_path)) {
        throw new Error(`The file '${file_path}' does not exist.`);
    }

    const jsonList: Array<{ [key: string]: any }> = [];
    const fileContent = fs.readFileSync(file_path, 'utf8');
    const lines = fileContent.split('\n');

    for (const line of lines) {
        try {
            const jsonObj = JSON.parse(line);
            jsonList.push(jsonObj);
        } catch (error) {
            if (error instanceof SyntaxError) {
                throw new Error(`Error parsing line: ${line.trim()} - ${error.message}`);
            }
        }
    }

    return jsonList;
}

// Example usage
try {
    const filePath = './example.jsonl';
    const data = readJsonl(filePath);
    console.log(data);
} catch (error) {
    console.error(error);
}
```

### Explanation:

1. **Importing Dependencies**:
   - `fs` from Node.js is used for file system operations.

2. **Function Definition**:
   - The `readJsonl` function is defined with a parameter `file_path` of type `string`.
   - The return type is `Array<{ [key: string]: any }>`, which corresponds to a list of dictionaries in Python.

3. **JSDoc Documentation Comments**:
   - The function is documented using JSDoc-style comments, providing details about the parameters, return type, and possible exceptions.

4. **File Existence Check**:
   - The function checks if the file exists using `fs.existsSync`.
   - If the file does not exist, it throws an `Error`.

5. **Reading and Parsing File Content**:
   - The file content is read synchronously using `fs.readFileSync`.
   - The content is split into lines, and each line is parsed using `JSON.parse`.
   - Parsed objects are added to the `jsonList`.

6. **Error Handling**:
   - If there is a parsing error, it throws an `Error` with a detailed message.

7. **Example Usage**:
   - The example usage demonstrates how to call the `readJsonl` function and handle any potential errors.

This TypeScript code preserves the original functionality and structure of the Python code, adapting it to TypeScript's static type system and Node.js environment.