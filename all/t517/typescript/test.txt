Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest class will be converted to a Jest test suite in TypeScript.

### TypeScript Code

1. **Install necessary dependencies**:
   ```sh
   npm install --save-dev jest @types/jest
   ```

2. **TypeScript Test Class**:
   ```typescript
   import fs from 'fs';
   import path from 'path';

   // Import the readJsonl function
   import { readJsonl } from './readJsonl';  // Assuming readJsonl is defined in another file

   describe('TestReadJsonl', () => {
       let validJsonlFile: string;
       let invalidJsonlFile: string;
       let nonExistentFile: string;
       let emptyJsonlFile: string;

       beforeAll(() => {
           // Create temporary JSON Lines files for testing
           validJsonlFile = 'test_valid.jsonl';
           invalidJsonlFile = 'test_invalid.jsonl';
           nonExistentFile = 'non_existent.jsonl';
           emptyJsonlFile = 'test_empty.jsonl';

           // Valid JSON Lines content
           fs.writeFileSync(validJsonlFile, '{"name": "Alice", "age": 30}\n' +
                               '{"name": "Bob", "age": 25}\n' +
                               '{"name": "Charlie", "age": 35}\n');

           // Invalid JSON Lines content
           fs.writeFileSync(invalidJsonlFile, '{"name": "Alice", "age": 30}\n' +
                                 '{"name": "Bob", "age": "twenty-five}\n');  // Missing closing quote
       });

       afterAll(() => {
           // Remove the temporary JSON Lines files after testing
           if (fs.existsSync(validJsonlFile)) {
               fs.unlinkSync(validJsonlFile);
           }
           if (fs.existsSync(invalidJsonlFile)) {
               fs.unlinkSync(invalidJsonlFile);
           }
           if (fs.existsSync(emptyJsonlFile)) {
               fs.unlinkSync(emptyJsonlFile);
           }
       });

       it('should read a valid JSON Lines file correctly', () => {
           const expectedData = [
               {"name": "Alice", "age": 30},
               {"name": "Bob", "age": 25},
               {"name": "Charlie", "age": 35}
           ];
           const result = readJsonl(validJsonlFile);
           expect(result).toEqual(expectedData);
       });

       it('should throw an error when the file does not exist', () => {
           expect(() => readJsonl(nonExistentFile)).toThrow(Error);
       });

       it('should handle an empty JSON Lines file correctly', () => {
           fs.writeFileSync(emptyJsonlFile, '');  // Create an empty JSON Lines file
           const result = readJsonl(emptyJsonlFile);
           expect(result).toEqual([]);  // Expecting an empty list for empty file
       });
   });
   ```

### Explanation:

1. **Importing Dependencies**:
   - `fs` and `path` from Node.js are used for file system operations.
   - `readJsonl` is assumed to be imported from another file.

2. **Test Suite Definition**:
   - The `describe` block defines the test suite named `TestReadJsonl`.
   - `beforeAll` is used to set up the temporary JSON Lines files.
   - `afterAll` is used to clean up the temporary JSON Lines files after all tests are run.

3. **Test Cases**:
   - `it` blocks define individual test cases.
   - `expect` is used for assertions.

4. **File Creation and Deletion**:
   - `fs.writeFileSync` is used to create the temporary JSON Lines files.
   - `fs.existsSync` and `fs.unlinkSync` are used to check and delete the files.

5. **Assertions**:
   - `expect(result).toEqual(expectedData)` checks if the result matches the expected data.
   - `expect(() => readJsonl(nonExistentFile)).toThrow(Error)` checks if an error is thrown when the file does not exist.
   - `expect(result).toEqual([])` checks if the result is an empty array for an empty file.

This TypeScript code preserves the original functionality and logic of the Python unittest class, adapting it to Jest's testing framework and TypeScript's static type system.