Sure! Here's how you can translate the Python code into Java. Note that Java doesn't have built-in support for reading JSON Lines files like Python does with `jsonlines` or similar libraries, so we'll use standard Java libraries and possibly some third-party libraries like Jackson for handling JSON.

First, let's define the package and class structure:

```java
package org.real.temp;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Answer {
    public static void main(String[] args) {
        // Example usage
        String filePath = "path/to/your/file.jsonl";
        try {
            List<Map<String, Object>> jsonList = readJsonL(filePath);
            System.out.println(jsonList);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Reads a JSON Lines file and returns its content as a list of maps.
     *
     * @param filePath The path to the JSON Lines file.
     * @return A list of JSON objects parsed from the file.
     * @throws IOException If the specified file does not exist or there is an error parsing a line in the JSON Lines file.
     */
    public static List<Map<String, Object>> readJsonL(String filePath) throws IOException {
        List<Map<String, Object>> resultList = new ArrayList<>();
        ObjectMapper objectMapper = new ObjectMapper();

        File file = new File(filePath);
        if (!file.exists()) {
            throw new FileNotFoundException("File not found: " + filePath);
        }

        // Read each line from the file
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                try {
                    Map<String, Object> jsonObject = objectMapper.readValue(line, Map.class);
                    resultList.add(jsonObject);
                } catch (JsonProcessingException e) {
                    throw new IOException("Error parsing JSON line: " + line, e);
                }
            }
        }

        return resultList;
    }
}
```

### Explanation:

1. **Dependencies**: We use Jackson library for JSON processing. Add the following dependency to your `pom.xml` if you're using Maven:

    ```xml
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.13.0</version>
    </dependency>
    ```

2. **Package and Class**: The package is defined as `org.real.temp`, and the class is named `Answer`.

3. **Method Signature**:
   - The method `readJsonL` reads a JSON Lines file and returns a list of `Map<String, Object>` representing the JSON objects.

4. **Error Handling**:
   - The method throws `IOException` if the file does not exist or if there is an error parsing a line in the JSON Lines file.

5. **Reading JSON Lines**:
   - We use `BufferedReader` to read each line from the file.
   - Each line is parsed as a JSON object using `ObjectMapper`.

This should give you a good starting point for translating your Python code to Java.