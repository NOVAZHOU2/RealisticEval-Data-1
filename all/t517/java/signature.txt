Here's how you can translate the Python function signature into Java, while keeping the comments:

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;

/**
 * Reads a JSON Lines file and returns its content as a list of dictionaries.
 *
 * @param filePath The path to the JSON Lines file.
 * @return A list of JSON objects parsed from the file.
 * @throws FileNotFoundException If the specified file does not exist.
 * @throws JsonProcessingException If there is an error parsing a line in the JSON Lines file.
 */
public List<String> readJsonl(String filePath) throws FileNotFoundException, JsonProcessingException {
    // Method implementation goes here...
}
```

Please note that I've changed the return type to `List<String>` because in Java, we typically don't use generic types for JSON parsing like in Python with `Dict[str, Any]`. Instead, you would need to parse each line into a `Map<String, Object>` or use a library like Jackson to deserialize it directly into your desired object structure.