To translate the provided C++ code into JavaScript, here's the equivalent implementation:

```javascript
function merge(arr, left, mid, right) {
    const n1 = mid - left + 1; // Size of the left subarray
    const n2 = right - mid;    // Size of the right subarray

    // Create temporary arrays
    const L = new Array(n1);
    const R = new Array(n2);

    // Copy data to temporary arrays L[] and R[]
    for (let i = 0; i < n1; i++) {
        L[i] = arr[left + i];
    }
    for (let j = 0; j < n2; j++) {
        R[j] = arr[mid + 1 + j];
    }

    // Merge the temporary arrays back into arr[left..right]
    let i = 0; // Initial index of the first subarray
    let j = 0; // Initial index of the second subarray
    let k = left; // Initial index to be sorted

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if there are any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if there are any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

function mergeSort(arr, left, right) {
    if (left < right) {
        // Same as (left + right) / 2, but avoids overflow
        const mid = left + Math.floor((right - left) / 2);

        // Sort first and second halves
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        merge(arr, left, mid, right);
    }
}
```

This JavaScript code maintains the ultimate logic and functionality of the original C++ implementation while adhering to JavaScript conventions.