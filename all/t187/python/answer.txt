Here's the equivalent Python code for the provided C++ merge sort implementation:
python
def merge(arr, left, mid, right):
    n1 = mid - left + 1  # Size of the left subarray
    n2 = right - mid     # Size of the right subarray
    
    # Create temporary arrays
    L = arr[left:mid + 1]  # Copy data to temporary arrays L[]
    R = arr[mid + 1:right + 1]  # Copy data to temporary arrays R[]
    
    # Merge the temporary arrays back into arr[left..right]
    i = 0  # Initial index of the first subarray
    j = 0  # Initial index of the second subarray
    k = left  # Initial index to be sorted

    while i < n1 and j < n2:
        if L[i] <= R[j]:
            arr[k] = L[i]
            i += 1
        else:
            arr[k] = R[j]
            j += 1
        k += 1

    # Copy the remaining elements of L[], if there are any
    while i < n1:
        arr[k] = L[i]
        i += 1
        k += 1

    # Copy the remaining elements of R[], if there are any
    while j < n2:
        arr[k] = R[j]
        j += 1
        k += 1

def merge_sort(arr, left, right):
    if left < right:
        # Same as (left + right) // 2, but avoids overflow for large left and right
        mid = left + (right - left) // 2
        
        # Sort first and second halves
        merge_sort(arr, left, mid)
        merge_sort(arr, mid + 1, right)
        merge(arr, left, mid, right)

# Example usage
if __name__ == "__main__":
    arr = [12, 11, 13, 5, 6, 7]
    print("Unsorted array:", arr)
    merge_sort(arr, 0, len(arr) - 1)
    print("Sorted array:", arr)
Explanation of the Code:
merge Function: This function takes a segment of the array and merges two sorted subarrays (L and R) back into the original array arr.
It first calculates the size of the left and right subarrays and creates temporary lists L and R.
Then it merges these lists back into arr, ensuring the elements are sorted.
merge_sort Function: This function implements the recursive merge sort algorithm.
It checks if the left index is less than the right index (base condition for recursion).
It calculates the mid-point and recursively sorts the two halves.
Finally, it merges the two sorted halves.
Example Usage: An example is provided to demonstrate how to use the merge_sort function to sort an array. The unsorted and sorted arrays are printed.
Running the Code:
You can copy the above Python code and run it in any Python environment. The output will show the unsorted array and the sorted array after applying the merge sort algorithm.