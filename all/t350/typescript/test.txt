Here's the equivalent Jest test class in TypeScript for the provided Python `unittest` test class. I've maintained the logic and functionality while making the necessary adjustments for TypeScript and Jest:

```typescript
import { byteArrayToHexString } from './path/to/your/module'; // Adjust the import based on your file structure

describe('byteArrayToHexString', () => {
    
    test('empty byte array', () => {
        const inputData = new Uint8Array(); // Empty byte array
        expect(byteArrayToHexString(inputData)).toBe('');
    });

    test('single byte', () => {
        const inputData = new Uint8Array([0x0F]); // 15 in decimal
        const result = byteArrayToHexString(inputData);
        expect(['0F', '0f']).toContain(result);
    });

    test('multiple bytes', () => {
        const inputData = new Uint8Array([0x01, 0x0A, 0xFF]);
        const result = byteArrayToHexString(inputData);
        expect(['010aff', '010AFF']).toContain(result);
    });

    test('zero bytes', () => {
        const inputData = new Uint8Array([0x00, 0x00, 0x00]);
        expect(byteArrayToHexString(inputData)).toBe('000000');
    });

    test('negative bytes', () => {
        const inputData = new Uint8Array([0x80, 0xFF]); // 128 and 255
        const result = byteArrayToHexString(inputData);
        expect(['80FF', '80ff']).toContain(result);
    });

});
```

### Key Changes:
1. **Imports**: Adjusted to import the `byteArrayToHexString` function. Ensure the path is correct based on your project structure.
2. **Jest Structure**: Used `describe` and `test` for structuring the test cases.
3. **Assertions**: Replaced `self.assertEqual` and `self.assertTrue` with Jest's `expect` assertions.
4. **Type Annotations**: TypeScript's `Uint8Array` is used for the byte array inputs. 

This setup should work seamlessly in a Jest testing environment.