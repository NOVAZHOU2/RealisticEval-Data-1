Sure! Hereâ€™s how you can convert the provided Python code into C++:

### Python Code
```python
def byte_array_to_hex_string(byte_array):
    hex_string = ''.join([f"{b:02X}" for b in byte_array])
    return hex_string
```

### C++ Equivalent
```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <iomanip>

std::string byte_array_to_hex_string(const std::vector<unsigned char>& byte_array) {
    std::ostringstream hex_stream;
    for (unsigned char b : byte_array) {
        hex_stream << std::setw(2) << std::setfill('0') << std::hex << static_cast<int>(b);
    }
    return hex_stream.str();
}

int main() {
    // Example usage
    std::vector<unsigned char> byte_array = {0x0F, 0x1A, 0x2B, 0x3C};
    std::string hex_string = byte_array_to_hex_string(byte_array);
    std::cout << hex_string << std::endl;  // Output: 0f1a2b3c
    return 0;
}
```

### Explanation
1. **Includes**: The necessary headers (`<iostream>`, `<sstream>`, `<vector>`, and `<iomanip>`) are included for input/output, string streams, vector usage, and formatting.
2. **Function Definition**: The function `byte_array_to_hex_string` takes a `const std::vector<unsigned char>&` as its argument, which is equivalent to the byte array in Python.
3. **String Stream**: `std::ostringstream` is used to build the hexadecimal string, which allows for easier formatting.
4. **Looping**: A range-based for loop iterates over the byte array. Each byte is cast to `int` for proper formatting.
5. **Formatting**: `std::setw(2)` and `std::setfill('0')` ensure that each byte is represented with two hexadecimal digits.
6. **Main Function**: An example of usage is provided in the `main` function, which demonstrates how to call the function and print the result.

Feel free to modify the example usage as needed!