Here’s the equivalent TypeScript code using Jest for the provided C++ Catch2 test cases:

```typescript
import { floatToHex } from './path-to-your-module'; // Adjust the import path as necessary

describe("floatToHex tests", () => {
    test("Test with positive float 123.456", () => {
        const input = 123.456;
        const expected = "42f6e979";
        expect(floatToHex(input)).toBe(expected);
    });

    test("Test with negative float -123.456", () => {
        const input = -123.456;
        const expected = "c2f6e979";
        expect(floatToHex(input)).toBe(expected);
    });

    test("Test with zero", () => {
        const input = 0.0;
        const expected = "00000000";
        expect(floatToHex(input)).toBe(expected);
    });

    test("Test with small positive float 0.0001", () => {
        const input = 0.0001;
        const expected = "38d1b717";
        expect(floatToHex(input)).toBe(expected);
    });

    test("Test with large float 1e30", () => {
        const input = 1e30;
        const expected = "7149f2ca";
        expect(floatToHex(input)).toBe(expected);
    });
});
```

### Explanation:
- The `TEST_CASE` and `SECTION` constructs from Catch2 are replaced by Jest’s `describe` and `test` functions.
- The assertion is changed from `REQUIRE` to Jest's `expect` with the `toBe` matcher, which checks for equality.
- The function `floatToHex` is imported at the top, so make sure to adjust the import path based on where your function is defined.
- Each test case checks the same inputs and expected outputs as in the original C++ code, maintaining the same logic and functionality.