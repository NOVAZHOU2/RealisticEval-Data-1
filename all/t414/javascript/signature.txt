Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc format:

```javascript
/**
 * Extracts the title, author, and year from a BibTeX file.
 * Example BibTeX file content:
 * 
 * @article{sample2024,
 *   author = {John Doe and Jane Smith},
 *   title = {A Comprehensive Study on AI},
 *   year = {2024}
 * }
 *
 * @param {string} bibFile - The path to the BibTeX file.
 * @returns {Array<Object>} - An array containing objects with title, author, and year for each article.
 */
function extractBibInfo(bibFile) {
    const articles = [];

    // Regular expressions to match title, author, and year
    const titlePattern = /title\s*=\s*{([^}]*)}/i;
    const authorPattern = /author\s*=\s*{([^}]*)}/i;
    const yearPattern = /year\s*=\s*{([^}]*)}/i;

    try {
        const content = fs.readFileSync(bibFile, 'utf8');

        // Split the content into individual entries based on '@'
        const entries = content.split('@').slice(1);  // Skip the first split, which is empty

        for (const entry of entries) {
            const titleMatch = entry.match(titlePattern);
            const authorMatch = entry.match(authorPattern);
            const yearMatch = entry.match(yearPattern);

            // Extracting matched groups if found
            articles.push({
                'title': titleMatch ? titleMatch[1] : null,
                'author': authorMatch ? authorMatch[1] : null,
                'year': yearMatch ? yearMatch[1] : null
            });
        }

    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error(`Error: The file '${bibFile}' was not found.`);
        } else {
            throw error;  // Re-throw the error if it's not a file not found error
        }
    }

    return articles;
}

// Example usage
const bibFilePath = './example.bib';
console.log(extractBibInfo(bibFilePath));
```

### Explanation:
1. **JSDoc Comments**: The Python docstring has been converted to JSDoc format, providing clear documentation for the function parameters and return type.
2. **Function Signature**: The function signature is preserved with the parameter type annotation.
3. **Regular Expressions**: The regular expressions are defined similarly to the Python code.
4. **Reading File**: The file is read synchronously using `fs.readFileSync`.
5. **Splitting Content**: The content is split into individual entries using the `@` character.
6. **Matching Patterns**: Each entry is checked against the regular expressions to find matches.
7. **Handling Errors**: If the file is not found, an appropriate error message is printed. Other errors are re-thrown.
8. **Example Usage**: An example call to the function is provided at the end.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JavaScript documentation standards.