First, let's define the JavaScript function equivalent to `extract_bib_info` and then create the Jest test suite.

### JavaScript Function

```javascript
function extractBibInfo(bibFileContent) {
    /**
     * Extracts the title, author, and year from a BibTeX file content.
     * 
     * Example input:
     * "@article{sample2024,\n  author = {John Doe and Jane Smith},\n  title = {A Comprehensive Study on AI},\n  year = {2024}\n}"
     * 
     * Args:
     *     bibFileContent (string): The content of the BibTeX file.
     * 
     * Returns:
     *     Array of objects: An array containing objects with title, author, and year for each article.
     */
    
    const entries = bibFileContent.match(/@article\{[^}]+\}/g);
    if (!entries) return [];

    return entries.map(entry => {
        const authorMatch = entry.match(/author = \{(.+?)\}/);
        const titleMatch = entry.match(/title = \{(.+?)\}/);
        const yearMatch = entry.match(/year = \{(\d{4})\}/);

        if (!authorMatch || !titleMatch || !yearMatch) return null;

        const author = authorMatch[1].replace(/\s+/g, ' ').trim();
        const title = titleMatch[1].replace(/\s+/g, ' ').trim();
        const year = parseInt(yearMatch[1], 10);

        return { author, title, year };
    }).filter(item => item !== null);
}
```

### Jest Test Suite

Now, let's create the Jest test suite:

```javascript
const extractBibInfo = require('./path/to/extractBibInfo');

describe('extractBibInfo', () => {
    it('should extract correct information from a valid BibTeX file', () => {
        const bibFileContent = `@article{sample2024,
            author = {John Doe and Jane Smith},
            title = {A Comprehensive Study on AI},
            year = {2024}
        }`;

        const expectedResult = [
            {
                author: "John Doe and Jane Smith",
                title: "A Comprehensive Study on AI",
                year: 2024
            }
        ];

        expect(extractBibInfo(bibFileContent)).toEqual(expectedResult);
    });

    it('should handle an empty BibTeX file correctly', () => {
        const bibFileContent = '';

        const expectedResult = [];

        expect(extractBibInfo(bibFileContent)).toEqual(expectedResult);
    });

    it('should handle invalid BibTeX file content correctly', () => {
        const bibFileContent = `@article{invalid,
            author = {Invalid Author},
            title = {Invalid Title},
            year = {2023
        }`;

        const expectedResult = [];

        expect(extractBibInfo(bibFileContent)).toEqual(expectedResult);
    });
});
```

### Explanation of Changes:

1. **Function Definition**: The Python function `def extract_bib_info(bib_file: str)` has been converted to a JavaScript function `function extractBibInfo(bibFileContent)`. Note that the argument name `bib_file` was changed to `bibFileContent` to reflect that we're working with the content of the file rather than its path.

2. **Regular Expressions**: The regular expressions used to match the BibTeX entries were adjusted to work in JavaScript. The `match` method is used to find patterns in the string.

3. **Parsing Data**: The data is parsed similarly to the Python version, but using JavaScript string methods like `match`, `replace`, and `trim`.

4. **Test Cases**: The test cases in Python's unittest have been converted to Jest test cases. Each `it` block represents a specific test case, and `expect` is used to assert the expected behavior of the function.

5. **Data Structures**: In JavaScript, arrays and objects are used to represent the extracted data, similar to Python's lists and dictionaries.

This conversion ensures that the functionality and logic of the original Python tests are preserved in JavaScript using Jest.