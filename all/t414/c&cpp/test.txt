To create an equivalent test class in C++ using Catch2, you'll need to set up a fixture with the function `extract_bib_info` and write tests for it. Below is the C++ code that accomplishes this:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <vector>
#include <map>

// Function to be tested
std::vector<std::map<std::string, std::string>> extract_bib_info(const std::string& bib_file) {
    // This is a placeholder implementation
    // Replace this with your actual implementation
    if (bib_file.find("John Doe and Jane Smith") != std::string::npos &&
        bib_file.find("A Comprehensive Study on AI") != std::string::npos &&
        bib_file.find("2024") != std::string::npos) {
        return { { "author", "John Doe and Jane Smith" }, 
                 { "title", "A Comprehensive Study on AI" },
                 { "year", "2024" } };
    }
    return {};
}

TEST_CASE("Test extract_bib_info function") {
    // Test data
    std::string bib_content = "@article{sample2024,\n  author = {John Doe and Jane Smith},\n  title = {A Comprehensive Study on AI},\n  year = {2024}\n}";

    // Expected result
    std::vector<std::map<std::string, std::string>> expected_result = {
        { "author", "John Doe and Jane Smith" },
        { "title", "A Comprehensive Study on AI" },
        { "year", "2024" }
    };

    // Actual result
    auto actual_result = extract_bib_info(bib_content);

    // Check if the results match
    REQUIRE(actual_result.size() == expected_result.size());
    for (size_t i = 0; i < expected_result.size(); ++i) {
        REQUIRE(actual_result[i] == expected_result[i]);
    }
}
```

In this C++ code snippet:
1. We include the necessary headers for Catch2 and standard libraries.
2. We define the `extract_bib_info` function with a placeholder implementation. You should replace this with your actual implementation.
3. We define a `TEST_CASE` where we provide a sample BibTeX content string, the expected result, and check if the actual result matches the expected result using Catch2's `REQUIRE`.

This ensures that the functionality and logic of the tests are preserved while adapting to the differences between Python and C++.