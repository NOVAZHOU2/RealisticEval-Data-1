Certainly! Below is the equivalent Java code for the provided Python script, organized within the package `org.real.temp` and the class `Answer`. The Java code includes appropriate handling of types, method signatures, and object-oriented principles.

```java
package org.real.temp;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Answer {

    /**
     * Extracts the title, author, and year from a BibTeX file.
     *
     * @param bibFile The path to the BibTeX file.
     * @return A list containing dictionaries with title, author, and year for each article.
     */
    public static ArrayList<Article> extractBibInfo(String bibFile) {
        ArrayList<Article> articles = new ArrayList<>();

        // Regular expressions to match title, author, and year
        Pattern titlePattern = Pattern.compile("title\\s*=\\s*{([^}]*)}", Pattern.CASE_INSENSITIVE);
        Pattern authorPattern = Pattern.compile("author\\s*=\\s*{([^}]*)}", Pattern.CASE_INSENSITIVE);
        Pattern yearPattern = Pattern.compile("year\\s*=\\s*{([^}]*)}", Pattern.CASE_INSENSITIVE);

        try (BufferedReader reader = new BufferedReader(new FileReader(bibFile))) {
            StringBuilder contentBuilder = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                contentBuilder.append(line).append("\n");
            }

            String content = contentBuilder.toString();

            // Split the content into individual entries based on '@'
            String[] entries = content.split("@");

            for (int i = 1; i < entries.length; i++) { // Skip the first split, which is empty
                String entry = entries[i];

                Matcher titleMatcher = titlePattern.matcher(entry);
                Matcher authorMatcher = authorPattern.matcher(entry);
                Matcher yearMatcher = yearPattern.matcher(entry);

                String title = titleMatcher.find() ? titleMatcher.group(1) : null;
                String author = authorMatcher.find() ? authorMatcher.group(1) : null;
                String year = yearMatcher.find() ? yearMatcher.group(1) : null;

                Article article = new Article(title, author, year);
                articles.add(article);
            }

        } catch (IOException e) {
            System.out.println("Error: The file '" + bibFile + "' was not found.");
        }

        return articles;
    }

    public static void main(String[] args) {
        String bibFile = "path/to/bibtexfile.bib";
        ArrayList<Article> extractedArticles = extractBibInfo(bibFile);
        for (Article article : extractedArticles) {
            System.out.println(article);
        }
    }

    static class Article {
        private String title;
        private String author;
        private String year;

        public Article(String title, String author, String year) {
            this.title = title;
            this.author = author;
            this.year = year;
        }

        @Override
        public String toString() {
            return "Title: " + title + ", Author: " + author + ", Year: " + year;
        }
    }
}
```

### Explanation:

1. **Package and Class Definition**:
   - The Java code is defined within the package `org.real.temp`.
   - The class `Answer` contains the method `extractBibInfo` which performs the extraction.

2. **Regular Expressions**:
   - Regular expressions are compiled using `Pattern.compile` and used with `Matcher` to find matches.

3. **Reading the File**:
   - The file is read using a `BufferedReader` to ensure proper resource management with a try-with-resources statement.

4. **Splitting the Content**:
   - The content is split into individual entries based on the '@' character.

5. **Extracting Information**:
   - For each entry, the title, author, and year are extracted using regular expression matching.
   - If a match is found, the corresponding group is extracted; otherwise, `null` is assigned.

6. **Article Class**:
   - An inner class `Article` is defined to store the extracted information in a structured manner.

7. **Main Method**:
   - The `main` method demonstrates how to call `extractBibInfo` and print the results.

This approach ensures that the functionality remains consistent while adhering to Java's syntax and best practices.