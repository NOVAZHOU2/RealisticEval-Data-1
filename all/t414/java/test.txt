To convert the given Python unittest test class into a JUnit test class in Java, we need to define the method `extract_bib_info` first, then create the JUnit test class with the necessary assertions. Here’s how you can do it:

First, let's assume the implementation of the `extract_bib_info` method in Java:

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class BibInfoExtractor {

    public static List<Article> extractBibInfo(String bibFile) {
        List<Article> articles = new ArrayList<>();
        // Implementation of reading the BibTeX file and extracting information
        try (BufferedReader reader = new BufferedReader(new FileReader(bibFile))) {
            String line;
            Article currentArticle = null;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith("@article")) {
                    if (currentArticle != null) {
                        articles.add(currentArticle);
                    }
                    currentArticle = new Article();
                } else if (line.contains("author")) {
                    currentArticle.setAuthor(line.substring(line.indexOf('=') + 1).trim());
                } else if (line.contains("title")) {
                    currentArticle.setTitle(line.substring(line.indexOf('=') + 1).trim());
                } else if (line.contains("year")) {
                    currentArticle.setYear(Integer.parseInt(line.substring(line.indexOf('=') + 1).trim()));
                }
            }
            if (currentArticle != null) {
                articles.add(currentArticle);
            }
        } catch (IOException e) {
            System.out.println("Error reading the BibTeX file.");
        }
        return articles;
    }

    public static class Article {
        private String author;
        private String title;
        private int year;

        public String getAuthor() {
            return author;
        }

        public void setAuthor(String author) {
            this.author = author;
        }

        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public int getYear() {
            return year;
        }

        public void setYear(int year) {
            this.year = year;
        }
    }
}
```

Now, let’s create the JUnit test class in the package `org.real.temp`:

```java
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.List;

public class Tester {

    @Test
    public void testExtractBibInfo() {
        // Mock data
        List<BibInfoExtractor.Article> expectedArticles = List.of(
            new BibInfoExtractor.Article() {{
                setAuthor("John Doe and Jane Smith");
                setTitle("A Comprehensive Study on AI");
                setYear(2024);
            }}
        );

        // Assuming bibFile is the path to the BibTeX file or mock content
        String bibFile = "path/to/bibtexfile.bib";
        List<BibInfoExtractor.Article> actualArticles = BibInfoExtractor.extractBibInfo(bibFile);

        assertEquals(expectedArticles.size(), actualArticles.size());

        for (int i = 0; i < expectedArticles.size(); i++) {
            assertEquals(expectedArticles.get(i).getAuthor(), actualArticles.get(i).getAuthor());
            assertEquals(expectedArticles.get(i).getTitle(), actualArticles.get(i).getTitle());
            assertEquals(expectedArticles.get(i).getYear(), actualArticles.get(i).getYear());
        }
    }
}
```

In this example, the `testExtractBibInfo` method checks the correctness of the `extractBibInfo` method by comparing the expected output against the actual output. Adjust the `bibFile` variable according to your test setup. If you're mocking the input instead of using a real file, adjust the test accordingly.