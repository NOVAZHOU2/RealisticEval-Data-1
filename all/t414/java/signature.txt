Sure, here is the Java version of the Python function `extract_bib_info` with the same functionality and comments:

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Extracts the title, author, and year from a BibTeX file.
 *
 * @param bibFile The path to the BibTeX file.
 * @return A list of maps, where each map contains the title, author, and year for each article.
 */
public class BibInfoExtractor {

    public static List<Map<String, String>> extractBibInfo(String bibFile) {
        List<Map<String, String>> articles = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(bibFile))) {
            Map<String, String> currentArticle = null;
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith("@article")) {
                    if (currentArticle != null) {
                        articles.add(currentArticle);
                    }
                    currentArticle = new HashMap<>();
                } else if (currentArticle != null) {
                    int equalsIndex = line.indexOf("=");
                    if (equalsIndex > 0) {
                        String key = line.substring(1, equalsIndex).trim();
                        String value = line.substring(equalsIndex + 1).trim().replaceAll("[{}]", "").replaceFirst("^\\s+", "");
                        currentArticle.put(key, value);
                    }
                }
            }
            if (currentArticle != null) {
                articles.add(currentArticle);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return articles;
    }

    public static void main(String[] args) {
        // Example usage
        List<Map<String, String>> extractedArticles = extractBibInfo("path/to/your/bibtexfile.bib");
        for (Map<String, String> article : extractedArticles) {
            System.out.println("Title: " + article.get("title"));
            System.out.println("Author: " + article.get("author"));
            System.out.println("Year: " + article.get("year"));
            System.out.println();
        }
    }
}
```

### Explanation:
- **Imports**: Import necessary classes for file reading and data structures.
- **Method Signature**: The method `extractBibInfo` takes a single parameter `bibFile` which is the path to the BibTeX file.
- **Data Structures**: Use `List<Map<String, String>>` to store the extracted information.
- **Reading File**: Use `BufferedReader` to read the file line by line.
- **Parsing Lines**: Check if the line starts with `@article`, indicating a new article. Parse the key-value pairs within the article.
- **Error Handling**: Catch `IOException` and print stack trace for error handling.
- **Example Usage**: The `main` method demonstrates how to use the `extractBibInfo` method and prints the extracted information.

This Java code should perform the same task as the provided Python code but in a different programming language.