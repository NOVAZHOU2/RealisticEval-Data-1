Certainly! Here’s the equivalent TypeScript code using Jest for testing the `extractBibInfo` function. We will include proper type annotations and use Jest’s assertion methods to ensure the functionality and logic of the tests are preserved.

### TypeScript Code with Jest Testing

First, let's define the `extractBibInfo` function in TypeScript:

```typescript
import * as fs from 'fs';
import * as xregexp from 'xregexp';

/**
 * Extracts the title, author, and year from a BibTeX file.
 * Example BibTeX file content:
 * @article{sample2024,
 *   author = {John Doe and Jane Smith},
 *   title = {A Comprehensive Study on AI},
 *   year = {2024}
 * }
 *
 * @param bibFile The path to the BibTeX file.
 * @returns An array of objects containing the title, author, and year for each article.
 */
function extractBibInfo(bibFile: string): Array<{ title?: string; author?: string; year?: string }> {
    const articles: Array<{ title?: string; author?: string; year?: string }> = [];

    // Regular expressions to match title, author, and year
    const titlePattern = xregexp('title\\s*=\\s*{([^}]*)}', 'i');
    const authorPattern = xregexp('author\\s*=\\s*{([^}]*)}', 'i');
    const yearPattern = xregexp('year\\s*=\\s*{([^}]*)}', 'i');

    try {
        const content = fs.readFileSync(bibFile, 'utf8');

        // Split the content into individual entries based on '@'
        const entries = content.split('@').slice(1);  // Skip the first split, which is empty

        for (const entry of entries) {
            const titleMatch = xregexp.exec(entry, titlePattern);
            const authorMatch = xregexp.exec(entry, authorPattern);
            const yearMatch = xregexp.exec(entry, yearPattern);

            // Extracting matched groups if found
            articles.push({
                title: titleMatch ? titleMatch[1] : undefined,
                author: authorMatch ? authorMatch[1] : undefined,
                year: yearMatch ? yearMatch[1] : undefined
            });
        }
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error(`Error: The file '${bibFile}' was not found.`);
        } else {
            throw error;
        }
    }

    return articles;
}

export default extractBibInfo;
```

### Jest Test Class

Now, let's write the Jest test class:

```typescript
import { extractBibInfo } from './path/to/extractBibInfo'; // Adjust the import path as needed

describe('TestExtractBibInfo', () => {
    it('test valid entry', () => {
        const mockBib = `@article{sample2024,
            author = {John Doe and Jane Smith},
            title = {A Comprehensive Study on AI},
            year = {2024}
        }`;
        const mockOpen = jest.fn().mockImplementation(() => ({
            readFileSync: jest.fn().mockReturnValue(mockBib),
        }));

        const result = extractBibInfo('dummy.bib');
        const expected = [{ title: 'A Comprehensive Study on AI', author: 'John Doe and Jane Smith', year: '2024' }];
        expect(result).toEqual(expected);
    });

    it('test multiple entries', () => {
        const mockBib = `
            @article{sample2024,
                author = {John Doe},
                title = {A Comprehensive Study on AI},
                year = {2024}
            }
            @article{sample2023,
                author = {Jane Smith},
                title = {Deep Learning Techniques},
                year = {2023}
            }
        `;
        const mockOpen = jest.fn().mockImplementation(() => ({
            readFileSync: jest.fn().mockReturnValue(mockBib),
        }));

        const result = extractBibInfo('dummy.bib');
        const expected = [
            { title: 'A Comprehensive Study on AI', author: 'John Doe', year: '2024' },
            { title: 'Deep Learning Techniques', author: 'Jane Smith', year: '2023' }
        ];
        expect(result).toEqual(expected);
    });

    it('test missing fields', () => {
        const mockBib = `@article{sample2024,
            author = {John Doe},
            title = {Title Missing Year}
        }`;
        const mockOpen = jest.fn().mockImplementation(() => ({
            readFileSync: jest.fn().mockReturnValue(mockBib),
        }));

        const result = extractBibInfo('dummy.bib');
        const expected = [{ title: 'Title Missing Year', author: 'John Doe', year: undefined }];
        expect(result).toEqual(expected);
    });

    it('test empty file', () => {
        const mockBib = '';
        const mockOpen = jest.fn().mockImplementation(() => ({
            readFileSync: jest.fn().mockReturnValue(mockBib),
        }));

        const result = extractBibInfo('dummy.bib');
        const expected = [];
        expect(result).toEqual(expected);
    });

    it('test incorrect format', () => {
        const mockBib = `@article{sample2024,
            author = John Doe,
            title = {Title Without Braces},
            year = 2024
        }`;
        const mockOpen = jest.fn().mockImplementation(() => ({
            readFileSync: jest.fn().mockReturnValue(mockBib),
        }));

        const result = extractBibInfo('dummy.bib');
        const expected = [{ title: 'Title Without Braces', author: undefined, year: undefined }];
        expect(result).toEqual(expected);
    });
});
```

### Explanation:
1. **Import Statements**:
   - Import the `extractBibInfo` function from the appropriate path.
   - Jest is assumed to be available in the environment.

2. **Test Suite**:
   - Use `describe` to group the tests under `TestExtractBibInfo`.

3. **Test Cases**:
   - Each `it` block represents a specific test case.
   - Mock the `fs.readFileSync` method using Jest's `jest.fn()` to simulate file reading.

4. **Mock Implementation**:
   - Create a mock implementation of `fs.readFileSync` to return the desired content for each test case.

5. **Assertions**:
   - Use `expect` and `toEqual` to verify that the results match the expected values.

This setup ensures that the tests are equivalent to the original Python unittests, with proper Jest assertions and mocking.