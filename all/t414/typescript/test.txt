To convert your Python `unittest` test class into a TypeScript test case using Jest, you need to follow these steps:

1. Install Jest if you haven't already.
2. Write the TypeScript equivalent of your Python function.
3. Create a Jest test case to verify the functionality of the TypeScript function.

Here's how you can do it:

### Step 1: Install Jest

If you don't have Jest installed in your project, you can install it using npm or yarn:

```sh
npm install --save-dev jest
```

or

```sh
yarn add --dev jest
```

### Step 2: Write the TypeScript Function

Create a TypeScript file, e.g., `extractBibInfo.ts`, and write the function:

```typescript
function extractBibInfo(bibFileContent: string): Array<{ title: string; author: string; year: string }> {
    const regex = /@article\{[^}]*title\s*=\s*{(.*?)},.*?author\s*=\s*{(.*?)},.*?year\s*=\s*{(.*?)}/gs;
    let match;
    const results: Array<{ title: string; author: string; year: string }> = [];

    while ((match = regex.exec(bibFileContent)) !== null) {
        results.push({
            title: match[1].trim(),
            author: match[2].trim(),
            year: match[3].trim()
        });
    }

    return results;
}

export default extractBibInfo;
```

### Step 3: Create a Jest Test Case

Create a Jest test file, e.g., `extractBibInfo.test.ts`, and write the test cases:

```typescript
import extractBibInfo from './extractBibInfo';

describe('extractBibInfo', () => {
    it('should extract title, author, and year from a valid BibTeX entry', () => {
        const bibFileContent = `
@article{sample2024,
  author = {John Doe and Jane Smith},
  title = {A Comprehensive Study on AI},
  year = {2024}
}
`;

        const result = extractBibInfo(bibFileContent);
        expect(result).toEqual([
            {
                title: 'A Comprehensive Study on AI',
                author: 'John Doe and Jane Smith',
                year: '2024'
            }
        ]);
    });

    it('should handle multiple entries', () => {
        const bibFileContent = `
@article{sample2024,
  author = {John Doe and Jane Smith},
  title = {A Comprehensive Study on AI},
  year = {2024}
}
@article{anotherSample2023,
  author = {Alice Johnson},
  title = {Introduction to Machine Learning},
  year = {2023}
}
`;

        const result = extractBibInfo(bibFileContent);
        expect(result).toEqual([
            {
                title: 'A Comprehensive Study on AI',
                author: 'John Doe and Jane Smith',
                year: '2024'
            },
            {
                title: 'Introduction to Machine Learning',
                author: 'Alice Johnson',
                year: '2023'
            }
        ]);
    });

    it('should handle empty input', () => {
        const bibFileContent = '';

        const result = extractBibInfo(bibFileContent);
        expect(result).toEqual([]);
    });

    it('should handle invalid BibTeX format', () => {
        const bibFileContent = `
@article{sample2024,
  author = {John Doe and Jane Smith},
  title = {A Comprehensive Study on AI},
  year = {2024
}`;

        const result = extractBibInfo(bibFileContent);
        expect(result).toEqual([]);
    });
});
```

### Step 4: Run the Tests

Add a script in your `package.json` to run the tests:

```json
{
  "scripts": {
    "test": "jest"
  }
}
```

Then, run the tests using:

```sh
npm test
```

or

```sh
yarn test
```

This will execute your Jest test cases and ensure that your TypeScript function works as expected.