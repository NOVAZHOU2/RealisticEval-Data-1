Sure! Below is the equivalent TypeScript code for the provided Python script. This code includes proper type definitions and follows TypeScript's static type system:

```typescript
import * as fs from 'fs';
import * as re from 'xregexp';

function extractBibInfo(bibFile: string): Array<{ title?: string; author?: string; year?: string }> {
    /**
     * Extracts the title, author, and year from a BibTeX file.
     *
     * @param {string} bibFile - The path to the BibTeX file.
     * @returns {Array<{ title?: string; author?: string; year?: string }>} A list containing objects with title, author, and year for each article.
     */
    const articles: Array<{ title?: string; author?: string; year?: string }> = [];

    // Regular expressions to match title, author, and year
    const titlePattern = re('title\\s*=\\s*{([^}]*)}', 'i');
    const authorPattern = re('author\\s*=\\s*{([^}]*)}', 'i');
    const yearPattern = re('year\\s*=\\s*{([^}]*)}', 'i');

    try {
        const content = fs.readFileSync(bibFile, 'utf8');

        // Split the content into individual entries based on '@'
        const entries = content.split('@').slice(1);  // Skip the first split, which is empty

        for (const entry of entries) {
            const titleMatch = titlePattern.exec(entry);
            const authorMatch = authorPattern.exec(entry);
            const yearMatch = yearPattern.exec(entry);

            // Extracting matched groups if found
            articles.push({
                title: titleMatch ? titleMatch[1] : undefined,
                author: authorMatch ? authorMatch[1] : undefined,
                year: yearMatch ? yearMatch[1] : undefined
            });
        }
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error(`Error: The file '${bibFile}' was not found.`);
        } else {
            throw error;
        }
    }

    return articles;
}

// Example usage
console.log(extractBibInfo('example.bib'));
```

### Explanation:
1. **Imports**: We use `fs` for file system operations and `xregexp` for regular expressions. TypeScript does not have built-in regex support like Python, so we use `xregexp` for compatibility.
2. **Function Definition**: The function `extractBibInfo` is defined with a type annotation for the return value (`Array<{ title?: string; author?: string; year?: string }>`) to ensure consistency.
3. **Regular Expressions**: We use `xregexp` to create case-insensitive regular expressions.
4. **File Reading**: We use `fs.readFileSync` to read the file synchronously. If you need asynchronous behavior, you can use `fs.promises.readFile`.
5. **Error Handling**: We handle the `FileNotFoundError` by checking the error code and logging an appropriate message.
6. **Match Extraction**: We use `exec` to find matches and extract the relevant parts of the BibTeX entries.

This TypeScript code maintains the same functionality and logic as the original Python script.