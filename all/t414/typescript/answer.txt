Sure! Hereâ€™s the equivalent TypeScript code, including proper type definitions and handling:

```typescript
import * as fs from 'fs';
import * as re from 'xregexp';

function extractBibInfo(bibFile: string): Array<{ title?: string; author?: string; year?: string }> {
    const articles: Array<{ title?: string; author?: string; year?: string }> = [];

    // Regular expressions to match title, author, and year
    const titlePattern = re('title\\s*=\\s*{([^}]*)}', 'i');
    const authorPattern = re('author\\s*=\\s*{([^}]*)}', 'i');
    const yearPattern = re('year\\s*=\\s*{([^}]*)}', 'i');

    try {
        const content = fs.readFileSync(bibFile, 'utf8');

        // Split the content into individual entries based on '@'
        const entries = content.split('@').slice(1);  // Skip the first split, which is empty

        for (const entry of entries) {
            const titleMatch = titlePattern.exec(entry);
            const authorMatch = authorPattern.exec(entry);
            const yearMatch = yearPattern.exec(entry);

            // Extracting matched groups if found
            articles.push({
                title: titleMatch ? titleMatch[1] : undefined,
                author: authorMatch ? authorMatch[1] : undefined,
                year: yearMatch ? yearMatch[1] : undefined
            });
        }
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error(`Error: The file '${bibFile}' was not found.`);
        } else {
            throw error;
        }
    }

    return articles;
}
```

### Explanation:
1. **Imports**: 
   - `fs` is used for file system operations.
   - `xregexp` is used for regular expressions with additional flags support (similar to Python's `re` module).

2. **Function Definition**:
   - The function `extractBibInfo` takes a `bibFile` parameter and returns an array of objects with optional properties (`title`, `author`, `year`).

3. **Regular Expressions**:
   - Regular expressions are defined using `xregexp` to handle case-insensitive matching.

4. **File Reading**:
   - `fs.readFileSync` is used to read the file synchronously. This is a simple example, but for production code, consider using asynchronous methods.

5. **Content Splitting**:
   - The content is split into individual entries based on `'@'`.

6. **Pattern Matching**:
   - Each entry is searched for matches using the regular expressions.
   - Matched groups are extracted and added to the `articles` array.

7. **Error Handling**:
   - A `try-catch` block is used to handle potential errors, specifically checking for `ENOENT` (file not found) and rethrowing other errors.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate adjustments for TypeScript syntax and library usage.