Sure! Here is the equivalent C++ code for the JavaScript function `getObjectById`. This assumes you are working with a vector of custom objects where each object has an `id` member.

```cpp
#include <iostream>
#include <vector>
#include <string>

// Define a structure for the objects
struct Object {
    std::string id;
    // Add other members here if needed
};

// Function to get an object by its ID from a vector of objects
Object* getObjectById(const std::string& id, const std::vector<Object>& list) {
    // Iterate over the list of objects
    for (const auto& obj : list) {
        // Check if the object's id matches the given id
        if (obj.id == id) {
            // If a match is found, return a pointer to the object
            return const_cast<Object*>(&obj);
        }
    }

    // If no match is found, return nullptr
    return nullptr;
}

int main() {
    // Example usage
    std::vector<Object> list = {
        {"123"},
        {"456"},
        {"789"}
    };

    Object* result = getObjectById("456", list);
    if (result != nullptr) {
        std::cout << "Found object with ID: " << result->id << std::endl;
    } else {
        std::cout << "Object not found." << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Struct Definition**: We define a `struct Object` with an `id` member.
2. **Function Definition**: The `getObjectById` function takes a string `id` and a vector of `Object` instances.
3. **Iteration**: We iterate over the vector using a range-based for loop.
4. **Comparison**: We compare the `id` of each object with the given `id`.
5. **Return**: If a match is found, we return a pointer to the object. Otherwise, we return `nullptr`.

This should work similarly to the JavaScript function you provided.