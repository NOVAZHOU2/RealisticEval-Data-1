Hereâ€™s the equivalent Catch2 test case in C++:

```cpp
#include <catch2/catch.hpp>
#include <vector>
#include <optional>
#include <string>

struct Object {
    std::string id;
    std::string name;
};

std::optional<Object> getObjectById(const std::string& id, const std::vector<Object>& list);

TEST_CASE("getObjectById") {
    SECTION("should return the object with the matching id") {
        std::vector<Object> list = {
            { "1", "Object 1" },
            { "2", "Object 2" },
            { "3", "Object 3" }
        };
        auto result = getObjectById("2", list);
        REQUIRE(result.has_value());
        CHECK(result->id == "2");
        CHECK(result->name == "Object 2");
    }

    SECTION("should return null if no object with the matching id is found") {
        std::vector<Object> list = {
            { "1", "Object 1" },
            { "2", "Object 2" },
            { "3", "Object 3" }
        };
        auto result = getObjectById("4", list);
        REQUIRE_FALSE(result.has_value());
    }

    SECTION("should return null if the list is empty") {
        std::vector<Object> list;
        auto result = getObjectById("1", list);
        REQUIRE_FALSE(result.has_value());
    }

    SECTION("should return null if objects in the list do not have an id property") {
        std::vector<Object> list = {
            { "", "Object 1" },
            { "", "Object 2" },
            { "", "Object 3" }
        };
        auto result = getObjectById("1", list);
        REQUIRE_FALSE(result.has_value());
    }

    SECTION("should return the correct object when id is a string") {
        std::vector<Object> list = {
            { "a", "Object A" },
            { "b", "Object B" },
            { "c", "Object C" }
        };
        auto result = getObjectById("b", list);
        REQUIRE(result.has_value());
        CHECK(result->id == "b");
        CHECK(result->name == "Object B");
    }
}
```

This code uses Catch2 to structure the tests similarly to Jest and maintains the logic from the original JavaScript tests. Adjust the `Object` struct or types as needed!