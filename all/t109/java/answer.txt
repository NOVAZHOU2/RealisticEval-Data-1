Sure! Hereâ€™s the equivalent Java code for the provided JavaScript function:

```java
import java.util.ArrayList;
import java.util.Map;

public class Main {

    /**
     * Returns the object from the list with the given ID, or null if it is not present.
     *
     * @param id  The ID to search for in the list.
     * @param list The list of objects to search through.
     * @return The object with the matching ID, or null if no match is found.
     */
    public static Map<String, Object> getObjectById(Object id, ArrayList<Map<String, Object>> list) {
        // Iterate over the list of objects
        for (Map<String, Object> obj : list) {
            // Check if the object has an `id` property that matches the given id
            if (obj.containsKey("id") && obj.get("id").equals(id)) {
                // If a match is found, return the object
                return obj;
            }
        }

        // If no match is found, return null
        return null;
    }

    public static void main(String[] args) {
        // Example usage
        ArrayList<Map<String, Object>> list = new ArrayList<>();
        list.add(Map.of("id", 1, "name", "Alice"));
        list.add(Map.of("id", 2, "name", "Bob"));

        Map<String, Object> result = getObjectById(1, list);
        System.out.println(result); // Should print: {id=1, name=Alice}
    }
}
```

### Explanation:
1. **Imports**: 
   - `ArrayList` is used to store the list of objects.
   - `Map` is used to represent each object.

2. **Method Definition**:
   - The method `getObjectById` takes an `id` and a list of `Map<String, Object>` objects.
   - It iterates over the list using an enhanced for-loop.
   - It checks if the current map contains the key `"id"` and if its value matches the given `id`.
   - If a match is found, it returns the map.
   - If no match is found, it returns `null`.

3. **Example Usage**:
   - An example list of maps is created.
   - The `getObjectById` method is called with an example `id`.
   - The result is printed to demonstrate the functionality.