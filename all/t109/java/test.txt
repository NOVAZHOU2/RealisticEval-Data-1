Here's how you can convert the given JavaScript Jest test cases into a JUnit 4 test class for Java:

```java
package org.real.temp;

import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class Tester {

    @Test
    public void testShouldReturnObjectWithMatchingId() {
        List<Identifiable> list = new ArrayList<>();
        list.add(new TestObject(1, "Object 1"));
        list.add(new TestObject(2, "Object 2"));
        list.add(new TestObject(3, "Object 3"));

        Object result = ObjectFinder.getObjectById(2, list);
        assertEquals(new TestObject(2, "Object 2"), result);
    }

    @Test
    public void testShouldReturnNullIfNoObjectWithMatchingId() {
        List<Identifiable> list = new ArrayList<>();
        list.add(new TestObject(1, "Object 1"));
        list.add(new TestObject(2, "Object 2"));
        list.add(new TestObject(3, "Object 3"));

        Object result = ObjectFinder.getObjectById(4, list);
        assertNull(result);
    }

    @Test
    public void testShouldReturnNullIfListIsEmpty() {
        List<Identifiable> list = new ArrayList<>();
        Object result = ObjectFinder.getObjectById(1, list);
        assertNull(result);
    }

    @Test
    public void testShouldReturnNullIfObjectsDoNotHaveIdProperty() {
        List<TestObject> list = new ArrayList<>();
        list.add(new TestObject(null, "Object 1"));
        list.add(new TestObject(null, "Object 2"));
        list.add(new TestObject(null, "Object 3"));

        Object result = ObjectFinder.getObjectById(1, list);
        assertNull(result);
    }

    @Test
    public void testShouldReturnCorrectObjectWhenIdIsString() {
        List<Identifiable> list = new ArrayList<>();
        list.add(new TestObject("a", "Object A"));
        list.add(new TestObject("b", "Object B"));
        list.add(new TestObject("c", "Object C"));

        Object result = ObjectFinder.getObjectById("b", list);
        assertEquals(new TestObject("b", "Object B"), result);
    }

    private static class TestObject implements Identifiable {
        private final Object id;
        private final String name;

        public TestObject(Object id, String name) {
            this.id = id;
            this.name = name;
        }

        public Object getId() {
            return id;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (!(obj instanceof TestObject)) return false;
            TestObject other = (TestObject) obj;
            return id.equals(other.id) && name.equals(other.name);
        }
    }
}
```

In this code:
- `Identifiable` is an interface with a method `getId()`.
- `TestObject` is a simple class that implements `Identifiable`.
- JUnit assertions are used to check the expected results.