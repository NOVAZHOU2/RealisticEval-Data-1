Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a set of Catch2 test cases, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro for each test case.

Here is the complete C++ code:

```cpp
#include <iostream>
#include <regex>
#include <string>
#include "catch2/catch_test_macros.hpp"

// Check if the provided password is strong.
//
// A strong password must satisfy the following criteria:
// - At least one lowercase letter
// - At least one uppercase letter
// - At least one number
// - At least 8 characters long
//
// Args:
//     password (const std::string&): The password to check.
//
// Returns:
//     bool: True if the password is strong, False otherwise.
bool is_strong_password(const std::string& password) {
    // Check password length
    if (password.length() < 8) {
        return false;
    }

    // Check for at least one lowercase letter
    if (!std::regex_search(password, std::regex("[a-z]"))) {
        return false;
    }

    // Check for at least one uppercase letter
    if (!std::regex_search(password, std::regex("[A-Z]"))) {
        return false;
    }

    // Check for at least one number
    if (!std::regex_search(password, std::regex("\\d"))) {
        return false;
    }

    // If all checks passed, return true
    return true;
}

TEST_CASE("Test a strong password that meets all criteria", "[valid_password]") {
    REQUIRE(is_strong_password("StrongPass1"));
}

TEST_CASE("Test a password missing a lowercase letter", "[missing_lowercase]") {
    REQUIRE_FALSE(is_strong_password("STRONGPASS1"));
}

TEST_CASE("Test a password missing an uppercase letter", "[missing_uppercase]") {
    REQUIRE_FALSE(is_strong_password("strongpass1"));
}

TEST_CASE("Test a password missing a number", "[missing_number]") {
    REQUIRE_FALSE(is_strong_password("StrongPassword"));
}

TEST_CASE("Test a password that is too short", "[too_short]") {
    REQUIRE_FALSE(is_strong_password("Short1"));
}

TEST_CASE("Test a password that includes special characters but is still strong", "[valid_with_special_characters]") {
    REQUIRE(is_strong_password("Strong!Password1"));
}

int main(int argc, char* argv[]) {
    // Run Catch2 tests
    int result = Catch::Session().run(argc, argv);
    return result;
}
```

### Explanation:
1. **Header Files**: Include the necessary headers (`<iostream>`, `<regex>`, `<string>`, `"catch2/catch_test_macros.hpp"`).
2. **Function Definition**: The `is_strong_password` function is defined with the same logic as the Python version.
3. **Catch2 Test Cases**:
   - Each test case is defined using the `TEST_CASE` macro.
   - The `REQUIRE` macro is used for assertions that should always pass.
   - The `REQUIRE_FALSE` macro is used for assertions that should always fail.
4. **Main Function**: The `main` function runs the Catch2 tests using `Catch::Session().run(argc, argv)`.

This C++ code preserves the functionality and logic of the Python unittest class while adhering to the Catch2 testing framework conventions.