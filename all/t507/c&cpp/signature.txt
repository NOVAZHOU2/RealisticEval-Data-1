Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <regex>
#include <string>

// Check if the provided password is strong.
//
// A strong password must satisfy the following criteria:
// - At least one lowercase letter
// - At least one uppercase letter
// - At least one number
// - At least 8 characters long
//
// Args:
//     password (std::string): The password to check.
//
// Returns:
//     bool: True if the password is strong, False otherwise.
bool is_strong_password(const std::string& password) {
    // Check password length
    if (password.length() < 8) {
        return false;
    }

    // Check for at least one lowercase letter
    if (!std::regex_search(password, std::regex("[a-z]"))) {
        return false;
    }

    // Check for at least one uppercase letter
    if (!std::regex_search(password, std::regex("[A-Z]"))) {
        return false;
    }

    // Check for at least one number
    if (!std::regex_search(password, std::regex("\\d"))) {
        return false;
    }

    // If all checks passed, return true
    return true;
}

int main() {
    // Example usage
    std::string password = "StrongP@ssw0rd";
    std::cout << "Is the password strong? " << (is_strong_password(password) ? "Yes" : "No") << std::endl;

    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<iostream>`, `<regex>`, `<string>`) are included to use standard input/output, regular expressions, and strings.
2. **Function Definition**: The `is_strong_password` function takes a `const std::string&` parameter and returns a `bool`.
3. **Comments and Documentation**:
   - Multi-line comments are used to document the function's purpose, arguments, and return value.
   - Single-line comments are used for inline explanations.
4. **Type Annotations**: The Python type annotation `password: str` is translated to `const std::string& password` in C++.
5. **Regular Expressions**: The `std::regex_search` function is used to check for the presence of lowercase letters, uppercase letters, and digits.
6. **Main Function**: An example usage of the `is_strong_password` function is demonstrated in the `main` function.

This C++ code preserves the original functionality and structure of the Python code while adhering to C++ standards and practices.