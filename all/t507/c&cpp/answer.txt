Here's how you can convert the Python function `is_strong_password` into C and C++ code:

### C Code

```c
#include <ctype.h>
#include <stdbool.h>
#include <string.h>

bool is_strong_password(const char* password) {
    int length = strlen(password);
    bool has_lower = false;
    bool has_upper = false;
    bool has_digit = false;

    if (length < 8) {
        return false;
    }

    for (int i = 0; i < length; ++i) {
        if (islower(password[i])) {
            has_lower = true;
        } else if (isupper(password[i])) {
            has_upper = true;
        } else if (isdigit(password[i])) {
            has_digit = true;
        }
    }

    return has_lower && has_upper && has_digit;
}
```

### C++ Code

```cpp
#include <cctype>
#include <string>
#include <algorithm>

bool is_strong_password(const std::string& password) {
    int length = password.length();
    bool has_lower = false;
    bool has_upper = false;
    bool has_digit = false;

    if (length < 8) {
        return false;
    }

    for (char ch : password) {
        if (std::islower(ch)) {
            has_lower = true;
        } else if (std::isupper(ch)) {
            has_upper = true;
        } else if (std::isdigit(ch)) {
            has_digit = true;
        }
    }

    return has_lower && has_upper && has_digit;
}
```

### Explanation

1. **C Code**:
   - We use `strlen` to get the length of the string.
   - We iterate through each character using a loop and check if it meets the criteria using `islower`, `isupper`, and `isdigit`.
   - If any of the conditions fail, we return `false`.

2. **C++ Code**:
   - We use `std::string::length()` to get the length of the string.
   - We iterate through each character using a range-based for loop and check if it meets the criteria using `std::islower`, `std::isupper`, and `std::isdigit`.
   - If any of the conditions fail, we return `false`.

Both versions of the code will return `true` if the password meets all the specified criteria and `false` otherwise.