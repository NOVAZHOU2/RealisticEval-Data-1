Certainly! Below is the equivalent TypeScript code for the provided Python function:

```typescript
import { test } from 'node:re';

function isStrongPassword(password: string): boolean {
    /**
     * Check if the provided password is strong.
     *
     * A strong password must satisfy the following criteria:
     * - At least one lowercase letter
     * - At least one uppercase letter
     * - At least one number
     * - At least 8 characters long
     *
     * @param password - The password to check.
     * @returns true if the password is strong, false otherwise.
     */
    // Check password length
    if (password.length < 8) {
        return false;
    }

    // Check for at least one lowercase letter
    if (!test(/[a-z]/, password)) {
        return false;
    }

    // Check for at least one uppercase letter
    if (!test(/[A-Z]/, password)) {
        return false;
    }

    // Check for at least one number
    if (!test(/\d/, password)) {
        return false;
    }

    // If all checks passed, return true
    return true;
}

// Example usage
console.log(isStrongPassword("StrongPass1")); // true
console.log(isStrongPassword("weak")); // false
```

### Explanation:
- **Import Statement**: In TypeScript, we use `import` statements similar to Python's `import`. However, since TypeScript does not have a built-in `re` module like Python, we use the `test` method from JavaScript's regular expression object.
- **Function Definition**: The function `isStrongPassword` is defined with a parameter of type `string` and returns a `boolean`.
- **Regular Expressions**: We use JavaScript's regular expressions to perform the checks for lowercase letters, uppercase letters, and numbers.
- **Type Annotations**: TypeScript requires explicit type annotations, which are added to the function parameters and return types.

This TypeScript code maintains the same functionality and logic as the original Python code.