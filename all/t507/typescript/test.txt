Certainly! Below is the equivalent TypeScript code using Jest for testing the `isStrongPassword` function. The provided Python unittest class will be converted to a Jest test suite with appropriate assertions.

### TypeScript Code with Jest Testing

First, ensure you have Jest installed in your TypeScript project:
```sh
npm install --save-dev jest @types/jest ts-jest
```

Add Jest configuration to your `tsconfig.json`:
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"],
  "jest": {
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    },
    "testRegex": ".*\\.spec\\.ts$",
    "moduleFileExtensions": ["ts", "tsx", "js", "jsx", "json", "node"]
  }
}
```

### TypeScript Test Class

Here is the TypeScript code with Jest tests:

```typescript
import { isStrongPassword } from './path/to/isStrongPassword'; // Import the isStrongPassword function

describe('TestStrongPassword', () => {
  it('test valid password', () => {
    // Test a strong password that meets all criteria.
    expect(isStrongPassword("StrongPass1")).toBe(true);
  });

  it('test missing lowercase', () => {
    // Test a password missing a lowercase letter.
    expect(isStrongPassword("STRONGPASS1")).toBe(false);
  });

  it('test missing uppercase', () => {
    // Test a password missing an uppercase letter.
    expect(isStrongPassword("strongpass1")).toBe(false);
  });

  it('test missing number', () => {
    // Test a password missing a number.
    expect(isStrongPassword("StrongPassword")).toBe(false);
  });

  it('test too short', () => {
    // Test a password that is too short.
    expect(isStrongPassword("Short1")).toBe(false);
  });

  it('test valid with special characters', () => {
    // Test a password that includes special characters but is still strong.
    expect(isStrongPassword("Strong!Password1")).toBe(true);
  });
});
```

### Explanation:
1. **Import Statement**: Import the `isStrongPassword` function from the appropriate file.
2. **Describe Block**: Use Jest's `describe` block to group the tests.
3. **It Blocks**: Each test case is defined using Jest's `it` block, which takes a description and a callback function.
4. **Expect Assertions**: Use Jest's `expect` function with various assertions (e.g., `toBe`) to verify the expected outcomes.

### Running the Tests
To run the tests, add a script to your `package.json`:
```json
"scripts": {
  "test": "jest"
}
```

Run the tests using:
```sh
npm test
```

This setup ensures that the tests are structured and executed correctly using Jest, maintaining the same functionality and logic as the original Python unittest class.