Sure! Here is the equivalent Java code for the provided JavaScript functions:

```java
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import javax.activation.DataHandler;
import javax.activation.DataSource;

public class ChatConverter {

    /**
     * Convert the chat logs to Markdown format and generate a Blob object containing them
     *
     * @param chat The chat conversation as a list of strings.
     * @param title The optional title for the conversation.
     * @return A DataHandler containing the Markdown formatted string of the conversation.
     */
    public static DataHandler convertChatToMarkdown(List<String> chat, String title) {
        if (title == null) {
            title = "ChatGPT Conversation";
        }
        StringBuilder markdown = new StringBuilder("# " + title + "\n\n");  // Initialize with the title and two newlines

        // Iterate over the chat conversation array
        for (int index = 0; index < chat.size(); index++) {
            String message = chat.get(index);
            String speaker = index % 2 == 0 ? "Human" : "Assistant"; // Alternate speaker
            markdown.append("**").append(speaker).append(":**\n").append(message).append("\n\n***\n\n");  // Add message to the markdown
        }

        // Get the current date and time
        String date = getCurrentDate();
        String time = getCurrentTime();

        // Append the timestamp
        markdown.append("Exported on ").append(date).append(" ").append(time).append(".");

        // Encode the string as a Blob and return it
        return encodeStringAsBlob(markdown.toString());
    }

    /**
     * Encodes a string as a Blob object.
     *
     * @param string The string to encode.
     * @return The encoded Blob.
     */
    private static DataHandler encodeStringAsBlob(String string) {
        DataSource dataSource = new ByteArrayDataSource(string.getBytes(), "text/markdown");
        return new DataHandler(dataSource);
    }

    /**
     * Gets the current date in YYYY-MM-DD format.
     *
     * @return The current date.
     */
    private static String getCurrentDate() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        return LocalDateTime.now().format(formatter);
    }

    /**
     * Gets the current time in HH:MM:SS format.
     *
     * @return The current time.
     */
    private static String getCurrentTime() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        return LocalDateTime.now().format(formatter);
    }

    public static void main(String[] args) {
        List<String> chat = new ArrayList<>();
        chat.add("Hello, how can I help you today?");
        chat.add("I need some assistance with coding.");
        chat.add("Sure, what specific problem are you facing?");

        DataHandler dataHandler = convertChatToMarkdown(chat, "ChatGPT Conversation");
        System.out.println(dataHandler);
    }
}

class ByteArrayDataSource implements DataSource {
    private final byte[] data;
    private final String contentType;

    public ByteArrayDataSource(byte[] data, String contentType) {
        this.data = data;
        this.contentType = contentType;
    }

    @Override
    public String getContentType() {
        return contentType;
    }

    @Override
    public InputStream getInputStream() throws java.io.IOException {
        return new ByteArrayInputStream(data);
    }

    @Override
    public OutputStream getOutputStream() throws java.io.IOException {
        throw new UnsupportedOperationException("Not supported.");
    }
}
```

This Java code includes the following:
- Conversion of the chat logs to Markdown format.
- Encoding the Markdown string as a `DataHandler` object, which is similar to a `Blob` in JavaScript.
- Retrieval of the current date and time in the specified formats.