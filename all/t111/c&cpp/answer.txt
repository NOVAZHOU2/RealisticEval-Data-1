Hereâ€™s the equivalent C++ code for the provided JavaScript function, which converts chat logs to Markdown format and generates a similar structure:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <iomanip>
#include <ctime>
#include <chrono>

class Blob {
public:
    std::string data;
    std::string type;

    Blob(const std::string& content, const std::string& mimeType)
        : data(content), type(mimeType) {}
};

std::string getCurrentDate() {
    auto now = std::chrono::system_clock::now();
    std::time_t t = std::chrono::system_clock::to_time_t(now);
    std::tm* tmPtr = std::localtime(&t);

    std::ostringstream oss;
    oss << std::put_time(tmPtr, "%Y-%m-%d");
    return oss.str();
}

std::string getCurrentTime() {
    auto now = std::chrono::system_clock::now();
    std::time_t t = std::chrono::system_clock::to_time_t(now);
    std::tm* tmPtr = std::localtime(&t);

    std::ostringstream oss;
    oss << std::put_time(tmPtr, "%H:%M:%S");
    return oss.str();
}

Blob convertChatToMarkdown(const std::vector<std::string>& chat, const std::string& title = "ChatGPT Conversation") {
    std::ostringstream markdown;
    markdown << "# " << title << "\n\n";  // Initialize with the title and two newlines

    // Iterate over the chat conversation array
    for (size_t index = 0; index < chat.size(); ++index) {
        std::string speaker = (index % 2 == 0) ? "Human" : "Assistant"; // Alternate speaker
        markdown << "**" << speaker << ":**\n" << chat[index] << "\n\n***\n\n";  // Add message to the markdown
    }

    // Get the current date and time
    std::string date = getCurrentDate();
    std::string time = getCurrentTime();

    // Append the timestamp
    markdown << "Exported on " << date << " " << time << ".";

    // Create a Blob object and return it
    return Blob(markdown.str(), "text/markdown");
}

int main() {
    std::vector<std::string> chat = {
        "Hello, how are you?",
        "I'm fine, thank you!",
        "What can you do?",
        "I can help with programming questions."
    };

    Blob markdownBlob = convertChatToMarkdown(chat);
    
    // Output the markdown content (for demonstration purposes)
    std::cout << markdownBlob.data << std::endl;

    return 0;
}
```

### Explanation:
- **Blob Class**: A simple class to hold the content and type, similar to JavaScript's Blob.
- **getCurrentDate & getCurrentTime**: Functions that get the current date and time, formatted similarly to the JavaScript version.
- **convertChatToMarkdown**: The main function that constructs the Markdown formatted string, alternating between speakers and appending the date and time at the end.
- **Main Function**: A sample chat log is processed, and the resulting Markdown content is printed to the console.

You can further modify the `Blob` class or add more functionality based on your needs.