Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The structure and functionality of the tests will be preserved, and all assertions will be mapped to appropriate Jest equivalents.

### Python Unittest Code

```python
import unittest

class TestFindDuplicateIPs(unittest.TestCase):

    def test_basic_duplicates(self):
        ip_list = ["192.168.1.1", "192.168.1.2", "192.168.1.1"]
        ignore_list = []
        self.assertEqual(find_duplicate_ips(ip_list, ignore_list), ["192.168.1.1"])

    def test_ignored_duplicates(self):
        ip_list = ["192.168.1.1", "192.168.1.1", "192.168.1.2"]
        ignore_list = ["192.168.1.1"]
        self.assertEqual(find_duplicate_ips(ip_list, ignore_list), [])

    def test_no_duplicates(self):
        ip_list = ["192.168.1.1", "192.168.1.2", "192.168.1.3"]
        ignore_list = []
        self.assertEqual(find_duplicate_ips(ip_list, ignore_list), [])

    def test_mixed_duplicates(self):
        ip_list = ["192.168.1.1", "192.168.1.1", "10.0.0.1", "192.168.1.2"]
        ignore_list = ["192.168.1.2"]
        self.assertEqual(find_duplicate_ips(ip_list, ignore_list), ["192.168.1.1"])

    def test_empty_input(self):
        ip_list = []
        ignore_list = []
        self.assertEqual(find_duplicate_ips(ip_list, ignore_list), [])

    def test_only_ignored_ips(self):
        ip_list = ["192.168.1.1", "192.168.1.1"]
        ignore_list = ["192.168.1.1"]
        self.assertEqual(find_duplicate_ips(ip_list, ignore_list), [])

    def test_all_duplicates(self):
        ip_list = ["192.168.1.1", "192.168.1.1", "192.168.1.1"]
        ignore_list = []
        self.assertEqual(find_duplicate_ips(ip_list, ignore_list), ["192.168.1.1"])
```

### Equivalent Jest Test Suite

```javascript
const findDuplicateIPs = require('./findDuplicateIPs'); // Import the function to be tested

describe('TestFindDuplicateIPs', () => {
    it('should handle basic duplicates', () => {
        const ipList = ["192.168.1.1", "192.168.1.2", "192.168.1.1"];
        const ignoreList = [];
        expect(findDuplicateIPs(ipList, ignoreList)).toEqual(["192.168.1.1"]);
    });

    it('should handle ignored duplicates', () => {
        const ipList = ["192.168.1.1", "192.168.1.1", "192.168.1.2"];
        const ignoreList = ["192.168.1.1"];
        expect(findDuplicateIPs(ipList, ignoreList)).toEqual([]);
    });

    it('should handle no duplicates', () => {
        const ipList = ["192.168.1.1", "192.168.1.2", "192.168.1.3"];
        const ignoreList = [];
        expect(findDuplicateIPs(ipList, ignoreList)).toEqual([]);
    });

    it('should handle mixed duplicates', () => {
        const ipList = ["192.168.1.1", "192.168.1.1", "10.0.0.1", "192.168.1.2"];
        const ignoreList = ["192.168.1.2"];
        expect(findDuplicateIPs(ipList, ignoreList)).toEqual(["192.168.1.1"]);
    });

    it('should handle empty input', () => {
        const ipList = [];
        const ignoreList = [];
        expect(findDuplicateIPs(ipList, ignoreList)).toEqual([]);
    });

    it('should handle only ignored IPs', () => {
        const ipList = ["192.168.1.1", "192.168.1.1"];
        const ignoreList = ["192.168.1.1"];
        expect(findDuplicateIPs(ipList, ignoreList)).toEqual([]);
    });

    it('should handle all duplicates', () => {
        const ipList = ["192.168.1.1", "192.168.1.1", "192.168.1.1"];
        const ignoreList = [];
        expect(findDuplicateIPs(ipList, ignoreList)).toEqual(["192.168.1.1"]);
    });
});
```

### Explanation:
1. **Import Function**: The `findDuplicateIPs` function is imported at the beginning of the test file.
2. **Describe Block**: The `describe` block is used to group the tests under a common description.
3. **It Blocks**: Each `it` block represents a single test case.
4. **Expect Assertions**: The `expect` function is used to make assertions, and `toEqual` is used to check equality of arrays.

This Jest test suite ensures that the functionality and logic of the tests are preserved, and all assertions are mapped appropriately to Jest equivalents.