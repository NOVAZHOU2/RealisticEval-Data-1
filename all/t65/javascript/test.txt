Sure, here is how you can convert your Python unittest test class into a Jest test case using JavaScript:

```javascript
const { findDuplicateIps } = require('./path-to-your-function'); // Adjust the path accordingly

describe('findDuplicateIps', () => {
  it('should return an empty array when no duplicates and no ignored IPs', () => {
    const ipList = ['192.168.1.1', '10.0.0.1'];
    const ignoreList = [];
    expect(findDuplicateIps(ipList, ignoreList)).toEqual([]);
  });

  it('should return an empty array when all IPs are ignored', () => {
    const ipList = ['192.168.1.1', '10.0.0.1'];
    const ignoreList = ['192.168.1.1', '10.0.0.1'];
    expect(findDuplicateIps(ipList, ignoreList)).toEqual([]);
  });

  it('should return a list of duplicates excluding ignored IPs', () => {
    const ipList = ['192.168.1.1', '192.168.1.1', '10.0.0.1', '10.0.0.1', '172.16.0.1'];
    const ignoreList = ['192.168.1.1', '10.0.0.1'];
    expect(findDuplicateIps(ipList, ignoreList)).toEqual(['172.16.0.1']);
  });
});
```

In this example, I've assumed that the function `findDuplicateIps` is exported from a file located at `'./path-to-your-function'`. You should replace this with the actual path where your function is defined. The test cases cover different scenarios such as when there are no duplicates and no ignored IPs, when all IPs are ignored, and when there are duplicates but some of them are ignored.