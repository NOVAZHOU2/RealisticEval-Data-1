Sure! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function findDuplicateIPs(ipList, ignoreList) {
    /**
     * Find duplicate IPs in the given IP list excluding specified IPs to ignore.
     *
     * @param {Array} ipList - List of IP addresses (strings).
     * @param {Array} ignoreList - List of IP addresses to ignore (strings).
     * @returns {Array} A list of duplicate IPs excluding those in the ignore list.
     */
    
    // Convert ignoreList to a Set for faster lookups
    const ignoreSet = new Set(ignoreList);

    // Object to count occurrences of each IP
    const ipCount = {};

    // Count occurrences of each IP, excluding ignored IPs
    for (const ip of ipList) {
        if (!ignoreSet.has(ip)) {
            if (ip in ipCount) {
                ipCount[ip] += 1;
            } else {
                ipCount[ip] = 1;
            }
        }
    }

    // Collect duplicate IPs
    const duplicates = Object.entries(ipCount).filter(([ip, count]) => count > 1).map(([ip, count]) => ip);

    return duplicates;
}
```

### Explanation:
1. **Function Definition**: The function `findDuplicateIPs` is defined with two parameters: `ipList` and `ignoreList`.
2. **Ignore Set**: The `ignoreList` is converted to a `Set` for faster lookups using `new Set(ignoreList)`.
3. **IP Count Object**: An object `ipCount` is used to keep track of the count of each IP address.
4. **Counting IPs**: The loop iterates over `ipList`, checks if the IP is not in the `ignoreSet`, and updates the count in `ipCount`.
5. **Collecting Duplicates**: The `Object.entries(ipCount)` method is used to get an array of `[ip, count]` pairs. These pairs are filtered to include only those with a count greater than 1. Finally, the IP addresses are extracted from these pairs using `map`.

This JavaScript code should provide the same functionality as the original Python code.