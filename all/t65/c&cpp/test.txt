Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a C++ test suite using Catch2, ensuring that the functionality and logic of the tests are preserved.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro for defining test cases.

Here is the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <string>

// Function to find duplicate IPs in the given IP list excluding specified IPs to ignore.
std::vector<std::string> findDuplicateIPs(const std::vector<std::string>& ipList, const std::vector<std::string>& ignoreList) {
    // Convert ignoreList to an unordered_set for faster lookups
    std::unordered_set<std::string> ignoreSet(ignoreList.begin(), ignoreList.end());

    // Unordered map to count occurrences of each IP
    std::unordered_map<std::string, int> ipCount;

    // Count occurrences of each IP, excluding ignored IPs
    for (const auto& ip : ipList) {
        if (ignoreSet.find(ip) == ignoreSet.end()) {
            if (ipCount.find(ip) != ipCount.end()) {
                ipCount[ip]++;
            } else {
                ipCount[ip] = 1;
            }
        }
    }

    // Collect duplicate IPs
    std::vector<std::string> duplicates;
    for (const auto& entry : ipCount) {
        if (entry.second > 1) {
            duplicates.push_back(entry.first);
        }
    }

    return duplicates;
}

TEST_CASE("Test findDuplicateIPs function") {
    SECTION("Basic duplicates") {
        std::vector<std::string> ipList = {"192.168.1.1", "192.168.1.2", "192.168.1.1"};
        std::vector<std::string> ignoreList = {};
        REQUIRE(findDuplicateIPs(ipList, ignoreList) == std::vector<std::string>({"192.168.1.1"}));
    }

    SECTION("Ignored duplicates") {
        std::vector<std::string> ipList = {"192.168.1.1", "192.168.1.1", "192.168.1.2"};
        std::vector<std::string> ignoreList = {"192.168.1.1"};
        REQUIRE(findDuplicateIPs(ipList, ignoreList).empty());
    }

    SECTION("No duplicates") {
        std::vector<std::string> ipList = {"192.168.1.1", "192.168.1.2", "192.168.1.3"};
        std::vector<std::string> ignoreList = {};
        REQUIRE(findDuplicateIPs(ipList, ignoreList).empty());
    }

    SECTION("Mixed duplicates") {
        std::vector<std::string> ipList = {"192.168.1.1", "192.168.1.1", "10.0.0.1", "192.168.1.2"};
        std::vector<std::string> ignoreList = {"192.168.1.2"};
        REQUIRE(findDuplicateIPs(ipList, ignoreList) == std::vector<std::string>({"192.168.1.1"}));
    }

    SECTION("Empty input") {
        std::vector<std::string> ipList = {};
        std::vector<std::string> ignoreList = {};
        REQUIRE(findDuplicateIPs(ipList, ignoreList).empty());
    }

    SECTION("Only ignored IPs") {
        std::vector<std::string> ipList = {"192.168.1.1", "192.168.1.1"};
        std::vector<std::string> ignoreList = {"192.168.1.1"};
        REQUIRE(findDuplicateIPs(ipList, ignoreList).empty());
    }

    SECTION("All duplicates") {
        std::vector<std::string> ipList = {"192.168.1.1", "192.168.1.1", "192.168.1.1"};
        std::vector<std::string> ignoreList = {};
        REQUIRE(findDuplicateIPs(ipList, ignoreList) == std::vector<std::string>({"192.168.1.1"}));
    }
}
```

### Explanation:
1. **Headers**: The required headers (`<catch2/catch_test_macros.hpp>`, `<vector>`, `<unordered_set>`, `<unordered_map>`, `<string>`) are included at the beginning.
2. **Function Definition**: The `findDuplicateIPs` function is defined as before.
3. **Test Class**: The `TEST_CASE` macro is used to define the test suite, and `SECTION` macros are used to define individual test cases.
4. **Assertions**: The `REQUIRE` macro is used to assert the expected results. For comparing vectors, we use `==` to check equality directly.

This C++ code preserves the original functionality and logic of the Python unittest class, ensuring that the tests are equivalent and perform the same checks.