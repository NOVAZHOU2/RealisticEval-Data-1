Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of type annotations, comments, and documentation:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <string>

/**
 * Find duplicate IPs in the given IP list excluding specified IPs to ignore.
 *
 * @param ip_list A vector of IP addresses.
 * @param ignore_list A vector of IP addresses to ignore.
 * @return A vector of duplicate IPs excluding those in the ignore list.
 */
std::vector<std::string> findDuplicateIPs(const std::vector<std::string>& ipList, const std::vector<std::string>& ignoreList) {
    // Convert ignoreList to an unordered_set for faster lookups
    std::unordered_set<std::string> ignoreSet(ignoreList.begin(), ignoreList.end());

    // Unordered map to count occurrences of each IP
    std::unordered_map<std::string, int> ipCount;

    // Count occurrences of each IP, excluding ignored IPs
    for (const auto& ip : ipList) {
        if (ignoreSet.find(ip) == ignoreSet.end()) {
            if (ipCount.find(ip) != ipCount.end()) {
                ipCount[ip]++;
            } else {
                ipCount[ip] = 1;
            }
        }
    }

    // Collect duplicate IPs
    std::vector<std::string> duplicates;
    for (const auto& entry : ipCount) {
        if (entry.second > 1) {
            duplicates.push_back(entry.first);
        }
    }

    return duplicates;
}

int main() {
    // Example usage
    std::vector<std::string> ipList = {"192.168.1.1", "192.168.1.2", "192.168.1.1", "10.0.0.1", "10.0.0.1"};
    std::vector<std::string> ignoreList = {"192.168.1.2"};

    std::vector<std::string> duplicates = findDuplicateIPs(ipList, ignoreList);

    // Print the duplicates
    for (const auto& ip : duplicates) {
        std::cout << ip << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Headers**: The required headers (`<iostream>`, `<vector>`, `<unordered_set>`, `<unordered_map>`, `<string>`) are included at the beginning.
2. **Function Documentation**: The Python docstring is translated into a C++ multi-line comment using `/** */`.
3. **Function Definition**: The `findDuplicateIPs` function takes two `std::vector<std::string>` parameters: `ipList` and `ignoreList`.
4. **Ignore Set**: The `ignoreList` is converted to an `unordered_set` named `ignoreSet` for faster lookups.
5. **IP Count Map**: An `unordered_map` named `ipCount` is used to count occurrences of each IP address.
6. **Counting IP Occurrences**: The function iterates over `ipList` and counts occurrences of each IP, excluding those in `ignoreSet`.
7. **Collecting Duplicates**: Another loop collects all IP addresses with more than one occurrence into a `std::vector<std::string>` named `duplicates`.
8. **Main Function**: An example usage of the `findDuplicateIPs` function is provided in the `main` function, including printing the duplicates.

This C++ code preserves the original functionality and structure of the Python code, including the type annotations and documentation.