Certainly! Hereâ€™s the equivalent TypeScript code, including the conversion of the Python function signature, comments, and docstrings to TypeScript using JSDoc style comments:

```typescript
import { List } from "typescript";

/**
 * Find duplicate IPs in the given IP list excluding specified IPs to ignore.
 *
 * @param ipList - List of IP addresses.
 * @param ignoreList - List of IP addresses to ignore.
 * @returns A list of duplicate IPs excluding those in the ignore list.
 */
function findDuplicateIPs(ipList: string[], ignoreList: string[]): string[] {
    // Convert ignoreList to a Set for faster lookups
    const ignoreSet = new Set(ignoreList);

    // Object to count occurrences of each IP
    const ipCount: Record<string, number> = {};

    // Count occurrences of each IP, excluding ignored IPs
    for (const ip of ipList) {
        if (!ignoreSet.has(ip)) {
            if (ip in ipCount) {
                ipCount[ip] += 1;
            } else {
                ipCount[ip] = 1;
            }
        }
    }

    // Collect duplicate IPs
    const duplicates = Object.entries(ipCount).filter(([ip, count]) => count > 1).map(([ip]) => ip);

    return duplicates;
}

// Example usage
const ipList = ['192.168.1.1', '192.168.1.2', '192.168.1.1', '10.0.0.1'];
const ignoreList = ['192.168.1.2'];
console.log(findDuplicateIPs(ipList, ignoreList)); // Output: ['192.168.1.1']
```

### Explanation:
1. **Function Signature**:
   - The function `findDuplicateIPs` is defined with type annotations for the parameters and return type.

2. **JSDoc Comments**:
   - The docstring is converted to JSDoc style comments using `/** */`.
   - Parameters and return types are documented using `@param` and `@returns`.

3. **Set Conversion**:
   - `ignoreList` is converted to a `Set` for faster lookups.

4. **Object for IP Counts**:
   - `ipCount` is defined as a `Record<string, number>` to store IP addresses and their counts.

5. **Counting IP Occurrences**:
   - The loop iterates over `ipList`, checks if the IP is not in `ignoreSet`, and updates the count accordingly.

6. **Collecting Duplicates**:
   - `Object.entries(ipCount)` is used to get all entries of the object.
   - Filtering is done using `filter` to keep only IPs with a count greater than 1.
   - Mapping is used to extract the IP addresses from the filtered entries.

7. **Example Usage**:
   - An example usage is provided to demonstrate how the function can be called.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and best practices.