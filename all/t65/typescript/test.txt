Certainly! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class:

```typescript
import { findDuplicateIPs } from './findDuplicateIPs'; // Adjust the import path accordingly

describe('findDuplicateIPs', () => {
  it('should return duplicates excluding those in the ignore list', () => {
    const ipList = ['192.168.1.1', '10.0.0.1', '192.168.1.1', '172.16.0.1'];
    const ignoreList = ['10.0.0.1'];

    const result = findDuplicateIPs(ipList, ignoreList);

    expect(result).toEqual(['192.168.1.1']);
  });

  it('should handle empty input lists', () => {
    const ipList: string[] = [];
    const ignoreList: string[] = [];

    const result = findDuplicateIPs(ipList, ignoreList);

    expect(result).toEqual([]);
  });

  it('should handle no duplicates', () => {
    const ipList = ['192.168.1.1', '10.0.0.1', '172.16.0.1'];
    const ignoreList = ['10.0.0.1'];

    const result = findDuplicateIPs(ipList, ignoreList);

    expect(result).toEqual([]);
  });
});
```

In this example:
- The `describe` function groups related tests together.
- Each `it` function represents an individual test case.
- The `expect` function along with matchers like `.toEqual` is used to assert the expected outcomes.

Make sure you have Jest installed and properly configured in your project. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest
# or
yarn add --dev jest
```

And then update your `package.json` to include a test script:

```json
"scripts": {
  "test": "jest"
}
```

You can run the tests using:

```sh
npm test
# or
yarn test
```