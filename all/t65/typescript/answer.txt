Sure! Hereâ€™s the equivalent TypeScript code, ensuring that the functionality, structure, and logic remain consistent:

```typescript
function findDuplicateIPs(ipList: string[], ignoreList: string[]): string[] {
    // Convert ignoreList to a Set for faster lookups
    const ignoreSet = new Set(ignoreList);

    // Object to count occurrences of each IP
    const ipCount: Record<string, number> = {};

    // Count occurrences of each IP, excluding ignored IPs
    for (const ip of ipList) {
        if (!ignoreSet.has(ip)) {
            if (ip in ipCount) {
                ipCount[ip] += 1;
            } else {
                ipCount[ip] = 1;
            }
        }
    }

    // Collect duplicate IPs
    const duplicates = Object.entries(ipCount).filter(([ip, count]) => count > 1).map(([ip]) => ip);

    return duplicates;
}
```

### Explanation:
1. **Type Definitions**:
   - `ipList` and `ignoreList` are defined as arrays of strings (`string[]`).
   - The function returns an array of strings (`string[]`).

2. **Set Conversion**:
   - `ignoreList` is converted to a `Set` for faster lookups.

3. **Object for IP Counts**:
   - `ipCount` is defined as a `Record<string, number>` to store IP addresses and their counts.

4. **Counting IP Occurrences**:
   - The loop iterates over `ipList`, checks if the IP is not in `ignoreSet`, and updates the count accordingly.

5. **Collecting Duplicates**:
   - `Object.entries(ipCount)` is used to get all entries of the object.
   - Filtering is done using `filter` to keep only IPs with a count greater than 1.
   - Mapping is used to extract the IP addresses from the filtered entries.

This TypeScript code maintains the same functionality and logic as the original Python code.