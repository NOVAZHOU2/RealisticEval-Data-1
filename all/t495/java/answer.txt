Here's how you might translate that Python function into Java:

```java
import java.util.ArrayList;
import java.util.List;

public class Answer {
    
    public static String filterContentWithContext(String content, List<String> keywords, int linesBefore, int linesAfter) {
        
        // Convert the input content into an array of lines
        String[] lines = content.split("\n");
        
        // Create a new list to hold the filtered lines
        List<String> filteredLines = new ArrayList<>();
        
        // Iterate over each line in the original content
        for(int i=0; i<lines.length; i++) {
            
            // Check if the current line contains any of the keywords as whole words
            boolean containsKeyword = false;
            for(String keyword : keywords) {
                // Use a regex pattern to match the keyword as a whole word
                String patternString = "\\b" + Pattern.quote(keyword) + "\\b";
                Pattern pattern = Pattern.compile(patternString);
                Matcher matcher = pattern.matcher(lines[i]);
                
                if(matcher.find()) {
                    containsKeyword = true;
                    break;
                }
            }
            
            // If the current line contains a keyword, add it to the filtered list
            // and also add the required number of lines before and after it
            if(containsKeyword) {
                int startLine = Math.max(i - linesBefore, 0);
                int endLine = Math.min(i + linesAfter, lines.length-1);
                
                for(int j=startLine; j<=endLine; j++) {
                    filteredLines.add(lines[j]);
                }
            }
        }
        
        // Join all the filtered lines back together into a single string
        return String.join("\n", filteredLines);
    }

}
```

This Java code does essentially the same thing as your Python code. It splits the input `content` string into an array of individual lines, then iterates over those lines. For each line, it checks whether it contains any of the provided `keywords` as whole words using regular expressions. If a keyword is found, it adds the line itself and the appropriate number of lines before and after it to a new list of `filteredLines`. Finally, it joins all the lines in the `filteredLines` list back together into a single string and returns it.

Note that I've used Java's built-in `Pattern` and `Matcher` classes from the `java.util.regex` package to perform the keyword matching. Also, I've used Java's `ArrayList` and `Collections` classes instead of Python's `list` type, and Java's `split()` method instead of Python's `re.split()`.