To convert the provided Python unittest test class to a Java JUnit test case, we need to follow these steps:

1. Create a new Java class in the `org.real.temp` package.
2. Write the equivalent test methods using JUnit annotations and assertions.
3. Ensure that the method under test (`filter_content_with_context`) is accessible from the test class.

Here's how you can do it:

### Step 1: Create the Java Class

Create a new Java file named `Tester.java` in the `src/test/java/org/real/temp` directory.

### Step 2: Write the Test Methods

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;

public class Tester {

    @Test
    public void testFilterContentWithContext() {
        String content = "This is a sample content.\n" +
                         "It contains some keywords like 'sample' and 'content'.\n" +
                         "Another line with 'keywords'.\n" +
                         "Final line without keywords.";
        
        List<String> keywords = Arrays.asList("sample", "content");
        String result = filter_content_with_context(content, keywords);
        
        String expectedOutput = "This is a sample content.\n" +
                               "It contains some keywords like 'sample' and 'content'.\n" +
                               "Another line with 'keywords'.";
        
        assertEquals(expectedOutput, result.trim());
    }

    private String filter_content_with_context(
            String content,
            List<String> keywords,
            int linesBefore = 1,
            int linesAfter = 1
    ) {
        StringBuilder result = new StringBuilder();
        String[] lines = content.split("\n");

        for (int i = 0; i < lines.length; i++) {
            boolean containsKeyword = false;
            for (String keyword : keywords) {
                if (lines[i].contains(keyword)) {
                    containsKeyword = true;
                    break;
                }
            }

            if (containsKeyword) {
                int startLine = Math.max(0, i - linesBefore);
                int endLine = Math.min(lines.length, i + linesAfter + 1);

                for (int j = startLine; j < endLine; j++) {
                    result.append(lines[j]).append("\n");
                }
            }
        }

        return result.toString();
    }
}
```

### Explanation:

1. **Package Declaration**: The `@Test` annotation indicates that this class is a JUnit test class.
2. **Test Method**: The `testFilterContentWithContext` method tests the `filter_content_with_context` function.
3. **Assertions**: The `assertEquals` method is used to compare the actual output with the expected output.
4. **Method Implementation**: The `filter_content_with_context` method is implemented to match the functionality of the Python function.

### Step 3: Run the Tests

Make sure you have JUnit 5 dependencies in your `pom.xml` if you're using Maven:

```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
```

Then, run the tests using your IDE or build tool (e.g., Maven).

This should give you a good starting point for converting Python unittests to Java JUnit tests. Adjust the test cases as needed based on your specific requirements.