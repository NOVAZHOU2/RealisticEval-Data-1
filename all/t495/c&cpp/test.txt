Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <regex>
#include <set>
#include <sstream>
#include <catch2/catch_test_macros.hpp>

// Function to filter content with context using C++
std::string filter_content_with_context(
    const std::string& content,
    const std::vector<std::string>& keywords,
    int lines_before = 1,
    int lines_after = 1
) {
    // Split the content into individual lines
    std::istringstream iss(content);
    std::vector<std::string> lines;
    std::string line;
    while (std::getline(iss, line)) {
        lines.push_back(line);
    }

    std::set<int> matched_lines;  // Use a set to avoid duplicate lines

    // Iterate over each line to find matches
    for (size_t i = 0; i < lines.size(); ++i) {
        for (const auto& keyword : keywords) {
            // Use a regular expression to find whole word matches with exact case
            std::regex word_regex("\\b" + std::regex_replace(keyword, std::regex("\\\\|\\^|\\$|\\.|\\||\\?|\\*|\\+|\\(|\\)|\\[|\\]|\\{|\\}|\\-"), "\\$&") + "\\b");
            if (std::regex_search(lines[i], word_regex)) {
                // Determine the range of lines to include for context
                int start = std::max(static_cast<int>(i - lines_before), 0);
                int end = std::min(static_cast<int>(i + lines_after + 1), static_cast<int>(lines.size()));
                for (int j = start; j < end; ++j) {
                    matched_lines.insert(j);  // Add the context lines to the set
                }
            }
        }
    }

    // Extract the matched lines and their context, sorted by their original order
    std::vector<std::string> filtered_lines;
    for (int i : matched_lines) {
        filtered_lines.push_back(lines[i]);
    }

    // Join the filtered lines back into a single string
    std::string filtered_content;
    for (const auto& filtered_line : filtered_lines) {
        if (!filtered_content.empty()) {
            filtered_content += "\n";
        }
        filtered_content += filtered_line;
    }

    return filtered_content;
}

TEST_CASE("TestFilterContentWithContext", "[filter_content_with_context]") {
    SECTION("test_single_keyword_match") {
        std::string content = R"(Line one.
        This line contains a keyword.
        Line three.)";
        std::vector<std::string> keywords = {"keyword"};
        std::string expected_output = R"(Line one.
        This line contains a keyword.
        Line three.)";
        std::string result = filter_content_with_context(content, keywords, 1, 1);
        REQUIRE(result == expected_output);
    }

    SECTION("test_no_keyword_match") {
        std::string content = R"(Line one.
        Line two.
        Line three.)";
        std::vector<std::string> keywords = {"missing"};
        std::string expected_output = "";
        std::string result = filter_content_with_context(content, keywords, 1, 1);
        REQUIRE(result == expected_output);
    }

    SECTION("test_lines_before_and_after") {
        std::string content = R"(Line one.
        This line contains a keyword.
        Line three.
        Line four.
        Line five.)";
        std::vector<std::string> keywords = {"keyword"};
        std::string expected_output = R"(Line one.
        This line contains a keyword.
        Line three.)";
        std::string result = filter_content_with_context(content, keywords, 1, 1);
        REQUIRE(result == expected_output);
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Header Files**: The required header files (`<iostream>`, `<string>`, `<vector>`, `<regex>`, `<set>`, `<sstream>`, and `<catch2/catch_test_macros.hpp>`) are included at the beginning.

2. **Function Documentation**: The function `filter_content_with_context` is defined with the same parameters and functionality as the Python version.

3. **Catch2 Test Class**:
   - The `TEST_CASE` macro is used to define a test case named `TestFilterContentWithContext`.
   - Each `SECTION` corresponds to a specific test case from the Python unittest class.
   - The `REQUIRE` macro is used to assert the expected results.

4. **Test Cases**:
   - `test_single_keyword_match`: Tests a single keyword match with context lines.
   - `test_no_keyword_match`: Tests when no keywords match.
   - `test_lines_before_and_after`: Tests functionality with specified lines before and after.

5. **Main Function**: The `main` function initializes and runs the Catch2 test session.

This translation preserves the original functionality and logic of the Python unittest class while adhering to C++ syntax and conventions using the Catch2 testing framework.