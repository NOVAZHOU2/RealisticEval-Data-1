Certainly! Below is the equivalent C++ code signature for the provided Python function `filter_content_with_context`, keeping the comments intact:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <regex>

/**
 * Filters website content to include lines containing any of the specified keywords as whole words,
 * along with a specified number of lines before and after for context. This version uses regular expressions
 * to ensure exact, whole word matching and respects case sensitivity.
 *
 * @param content The full text content of the website.
 * @param keywords A list of strings to search for within the content.
 * @param lines_before Number of lines to include before a matching line.
 * @param lines_after Number of lines to include after a matching line.
 * @return A string containing the filtered content with additional context.
 */
std::string filterContentWithContext(const std::string& content, const std::vector<std::string>& keywords, int linesBefore = 1, int linesAfter = 1);
```

### Explanation:
- **Headers**: The necessary headers (`<iostream>`, `<string>`, `<vector>`, `<regex>`) are included at the top.
- **Function Signature**:
  - `std::string filterContentWithContext`: The return type is `std::string`.
  - `const std::string& content`: The first parameter is a constant reference to a `std::string` representing the full text content of the website.
  - `const std::vector<std::string>& keywords`: The second parameter is a constant reference to a vector of strings representing the keywords to search for.
  - `int linesBefore = 1`: The third parameter is an integer specifying the number of lines to include before a matching line, defaulting to 1.
  - `int linesAfter = 1`: The fourth parameter is an integer specifying the number of lines to include after a matching line, defaulting to 1.
- **Comments**: The docstring is preserved to provide documentation for the function.