Here's how you can convert the Python unittest test class into a Jest test case in JavaScript:

```javascript
const filterContentWithContext = require('./filterContentWithContext'); // Adjust path accordingly

describe('filterContentWithContext', () => {
    it('should return content with context when keyword is found', () => {
        const content = 'This is a sample content.\nWe need to find some keywords here.';
        const keywords = ['sample', 'keywords'];
        const result = filterContentWithContext(content, keywords);
        expect(result).toContain('sample');
        expect(result).toContain('keywords');
        expect(result).toContain('content.');
        expect(result).toContain('need to find');
    });

    it('should not return content without context when keyword is not found', () => {
        const content = 'This is a sample content.\nWe need to find some other words here.';
        const keywords = ['nonexistent', 'keywords'];
        const result = filterContentWithContext(content, keywords);
        expect(result).not.toContain('nonexistent');
        expect(result).not.toContain('keywords');
    });
});
```

In this example, I've assumed that `filterContentWithContext` function is exported from another file (`./filterContentWithContext`). Please adjust the import statement according to your actual setup. 

Also note that Jest uses `expect` instead of `assert` or `assertTrue`, and it has methods like `.toContain()` which checks if a certain substring exists in the returned string.