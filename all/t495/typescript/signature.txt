```typescript
import { match } from 'assert';

interface FilterOptions {
    linesBefore?: number;
    linesAfter?: number;
}

/**
 * Filters website content to include lines containing any of the specified keywords as whole words,
 * along with a specified number of lines before and after for context. This version uses regular expressions
 * to ensure exact, whole word matching and respects case sensitivity.
 *
 * @param content - The full text content of the website.
 * @param keywords - A list of strings to search for within the content.
 * @param options - Options to customize the filtering behavior.
 * @returns A string containing the filtered content with additional context.
 */
function filterContentWithContext(content: string, keywords: string[], options: FilterOptions = {}): string {
    const { linesBefore = 1, linesAfter = 1 } = options;

    // Regex pattern to find whole words in the keywords array
    const regexPattern = new RegExp(`\\b(${keywords.join('|')})\\b`, 'gi');

    // Splitting the content into an array of lines
    const lines = content.split('\n');

    let resultLines: string[] = [];

    lines.forEach((line, index) => {
        if (regexPattern.test(line)) {
            // Adding lines before the matched line
            for (let i = Math.max(0, index - linesBefore); i < index; i++) {
                resultLines.push(lines[i]);
            }
            resultLines.push(line);
            // Adding lines after the matched line
            for (let i = index + 1; i <= Math.min(lines.length - 1, index + linesAfter); i++) {
                resultLines.push(lines[i]);
            }
        }
    });

    return resultLines.join('\n');
}
```

In this TypeScript version:

- I've added interfaces and default parameter values to make the function more robust and easier to understand.
- I've used a regular expression to match whole words in the provided keywords.
- I've split the input `content` into individual lines and processed each line individually.
- I've collected the relevant lines that match the criteria and joined them back together to form the final result.

Please note that the TypeScript version might require additional type definitions or adjustments depending on your specific use case or project setup.