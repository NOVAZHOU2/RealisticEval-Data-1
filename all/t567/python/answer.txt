Hereâ€™s the equivalent Python code for the provided TypeScript function. The Python version uses the datetime module to handle dates and time calculations:
python
from datetime import datetime, timedelta

def get_relative_time(message_date: datetime) -> str:
    now = datetime.now()
    time_difference = now - message_date
    one_day = timedelta(days=1)
    
    # Calculate the number of days difference
    days_difference = time_difference // one_day
    
    # Check if the message was created today
    if days_difference == 0:
        return "Today"
    # Check if the message was created yesterday
    elif days_difference == 1:
        return "Yesterday"
    # Check if the message was created within the past week (not today or yesterday)
    elif days_difference < 7:
        days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
        return days_of_week[message_date.weekday()]  # Get the day of the week
    # If the message was created earlier than one week ago
    else:
        # Format the date to a readable string (e.g., "MM/DD/YYYY")
        return message_date.strftime("%m/%d/%Y")

# Example usage
message_date = datetime(2024, 10, 1, 10, 0, 0)  # Example date
print(get_relative_time(message_date))
Explanation of the Code:
Imports: The datetime and timedelta classes from the datetime module are imported for date manipulations.
Function Definition: The function get_relative_time takes a datetime object as input.
Current Time: The current date and time are fetched using datetime.now().
Time Difference: The difference between the current time and the provided message_date is calculated.
Days Calculation: The difference in days is calculated by dividing the time difference by one_day.
Conditions:
If the message was created today, it returns "Today".
If it was created yesterday, it returns "Yesterday".
If it was created within the last week but not today or yesterday, it retrieves the day of the week using message_date.weekday(), which returns an integer corresponding to the day.
For messages older than one week, it formats the date as "MM/DD/YYYY" using strftime.
Example Usage: The function is demonstrated with an example date for testing purposes.
This Python code replicates the functionality of the original TypeScript code, checking the relative time of a given date. Let me know if you need any further modifications or explanations!