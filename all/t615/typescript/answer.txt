Hereâ€™s how you can convert the provided Python code into equivalent TypeScript code, ensuring that types are properly defined and the structure is maintained:

```typescript
function calculate(values: number[], period: number): number {
    // Check if the number of values is less than the specified period
    if (values === null || values.length < period || period <= 0) {
        return NaN; // Return NaN for invalid input
    }

    let sumValues = 0; // Initialize the sum

    // Calculate the sum of the last 'period' values
    for (let i = values.length - period; i < values.length; i++) {
        sumValues += values[i];
    }

    // Return the average of the last 'period' values
    return sumValues / period;
}
```

### Key Differences and Adjustments:
1. **Type Annotations**: Python's type hints (`List[int]`) are replaced with TypeScript's type annotations (`number[]`).
2. **NaN Handling**: `float('nan')` in Python is replaced with `NaN` in TypeScript.
3. **Variable Declaration**: `sum_values` is declared using `let`, which is idiomatic in TypeScript for mutable variables.
4. **Loop Syntax**: The `for` loop syntax remains similar, but we explicitly use `let` for the loop variable in TypeScript. 

This TypeScript version maintains the same logic and structure as the original Python code.