Here’s how to convert the provided TypeScript function formatDate into Python. The Python version maintains the same functionality while adhering to Python's syntax and conventions.
TypeScript Code
typescript
/**
 * Converts a date string into a relative time description.
 *
 * @param {string} dateString - The date string to convert.
 * @returns {string} A user-friendly string representing the relative time difference from the current date.
 * @throws {Error} If the date string is invalid.
 */
function formatDate(dateString: string): string {
    const date: Date = new Date(dateString);
    if (isNaN(date.getTime())) {
        throw new Error('Invalid Date');
    }
    const currentDate: Date = new Date();
    const timeDifference: number = currentDate.getTime() - date.getTime();
    
    // Calculate time differences in seconds, minutes, hours, and days
    const secondsDifference: number = Math.floor(timeDifference / 1000);
    const minutesDifference: number = Math.floor(secondsDifference / 60);
    const hoursDifference: number = Math.floor(minutesDifference / 60);
    const daysDifference: number = Math.floor(hoursDifference / 24);
    
    // Determine and return the appropriate time description
    if (daysDifference > 0) {
        return `${daysDifference} day${daysDifference !== 1 ? "s" : ""} ago`;
    } else if (hoursDifference > 0) {
        return `${hoursDifference} hour${hoursDifference !== 1 ? "s" : ""} ago`;
    } else if (minutesDifference > 0) {
        return `${minutesDifference} minute${minutesDifference !== 1 ? "s" : ""} ago`;
    } else {
        return `${secondsDifference} second${secondsDifference !== 1 ? "s" : ""} ago`;
    }
}
Python Code
python
from datetime import datetime

def format_date(date_string: str) -> str:
    """
    Converts a date string into a relative time description.

    :param date_string: The date string to convert.
    :return: A user-friendly string representing the relative time difference from the current date.
    :raises ValueError: If the date string is invalid.
    """
    try:
        date = datetime.fromisoformat(date_string)  # Assuming the date string is in ISO format
    except ValueError:
        raise ValueError('Invalid Date')

    current_date = datetime.now()
    time_difference = current_date - date

    # Calculate time differences in seconds, minutes, hours, and days
    seconds_difference = int(time_difference.total_seconds())
    minutes_difference = seconds_difference // 60
    hours_difference = minutes_difference // 60
    days_difference = hours_difference // 24

    # Determine and return the appropriate time description
    if days_difference > 0:
        return f"{days_difference} day{'s' if days_difference != 1 else ''} ago"
    elif hours_difference > 0:
        return f"{hours_difference} hour{'s' if hours_difference != 1 else ''} ago"
    elif minutes_difference > 0:
        return f"{minutes_difference} minute{'s' if minutes_difference != 1 else ''} ago"
    else:
        return f"{seconds_difference} second{'s' if seconds_difference != 1 else ''} ago"
Explanation of the Python Code:
Imports:
The datetime module is imported from Python’s standard library to handle date and time operations.
Function Definition:
The function is defined using def and takes a single string parameter, date_string. It returns a string.
Error Handling:
The function attempts to convert the date string into a datetime object using fromisoformat(). This assumes the date string is in ISO format (e.g., "YYYY-MM-DDTHH:MM:SS"). If the date string is invalid, a ValueError is raised.
Current Date:
The current date and time is obtained using datetime.now().
Time Difference Calculation:
The time difference is calculated using subtraction, which returns a timedelta object. The total number of seconds is obtained using total_seconds(), and subsequent calculations for minutes, hours, and days are performed using integer division.
Time Description:
The appropriate time description is constructed using f-strings, incorporating pluralization as needed.
This Python function mimics the behavior of the TypeScript function while adhering to Python’s syntax and conventions.