To convert the provided TypeScript Jest test cases into Python unittest test cases, you can follow these steps:
Use the unittest framework for structuring the test cases.
Use a mocking library like unittest.mock to set the system time for consistent testing, similar to how jest.useFakeTimers is used in the TypeScript code.
Translate the assertions from Jest's expect to Python's assertion methods.
Here's how the Python version of the test cases would look:
python
import unittest
from unittest.mock import patch
from datetime import datetime, timedelta

# Assuming format_date function is defined elsewhere and imported
# from your_module import format_date

class TestFormatDate(unittest.TestCase):
    
    @patch('your_module.datetime')
    def setUp(self, mock_datetime):
        # Set the system time to a fixed date for consistent testing
        mock_datetime.now.return_value = datetime(2024, 8, 25, 12, 0, 0)

    def test_one_day_ago(self):
        date_string = '2024-08-24T12:00:00'
        result = format_date(date_string)
        self.assertIn(result, ['1 day ago', '24 hours ago'])

    def test_five_hours_ago(self):
        date_string = '2024-08-25T07:00:00'
        result = format_date(date_string)
        self.assertEqual(result, '5 hours ago')

    def test_two_minutes_ago(self):
        date_string = '2024-08-25T11:58:00'
        result = format_date(date_string)
        self.assertEqual(result, '2 minutes ago')

    def test_just_now(self):
        date_string = '2024-08-25T11:59:59'
        result = format_date(date_string)
        self.assertIn(result, ['1 second ago', '1 seconds ago'])

if __name__ == '__main__':
    unittest.main()
Explanation of the Code:
Imports:
unittest is imported to create and run tests.
patch from unittest.mock is used to mock the datetime class.
datetime is imported from datetime to work with date and time objects.
Test Class:
A class named TestFormatDate is created, which inherits from unittest.TestCase.
setUp Method:
The setUp method is called before each test. It uses patch to replace datetime.now with a fixed time (2024-08-25T12:00:00) for consistent testing.
Test Methods:
Each test case is defined as a method within the test class. Each method contains a specific test:
test_one_day_ago: Tests if the function returns either "1 day ago" or "24 hours ago" for a date exactly one day before.
test_five_hours_ago: Tests if the function returns "5 hours ago" for a date 5 hours before.
test_two_minutes_ago: Tests if the function returns "2 minutes ago" for a date 2 minutes before.
test_just_now: Tests if the function returns either "1 second ago" or "1 seconds ago" for a date within the last second.
Running the Tests:
The if __name__ == '__main__': block allows the tests to be run when the script is executed directly.
Notes:
Ensure that the format_date function is properly imported from your module where it is defined.
Adjust the import path for datetime and format_date as necessary based on your project structure.