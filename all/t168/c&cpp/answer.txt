Here's the equivalent C++ code for the TypeScript function you provided:

```cpp
#include <iostream>
#include <string>
#include <ctime>
#include <stdexcept>

std::string formatDate(const std::string& dateString) {
    // Convert the dateString to time_t
    struct tm tm = {};
    if (strptime(dateString.c_str(), "%Y-%m-%d %H:%M:%S", &tm) == nullptr) {
        throw std::invalid_argument("Invalid Date");
    }
    
    time_t inputTime = mktime(&tm);
    time_t currentTime = time(nullptr);
    
    // Calculate time difference in seconds
    double timeDifference = difftime(currentTime, inputTime);
    
    // Calculate time differences in seconds, minutes, hours, and days
    int secondsDifference = static_cast<int>(timeDifference);
    int minutesDifference = secondsDifference / 60;
    int hoursDifference = minutesDifference / 60;
    int daysDifference = hoursDifference / 24;

    // Determine and return the appropriate time description
    if (daysDifference > 0) {
        return std::to_string(daysDifference) + " day" + (daysDifference != 1 ? "s" : "") + " ago";
    } else if (hoursDifference > 0) {
        return std::to_string(hoursDifference) + " hour" + (hoursDifference != 1 ? "s" : "") + " ago";
    } else if (minutesDifference > 0) {
        return std::to_string(minutesDifference) + " minute" + (minutesDifference != 1 ? "s" : "") + " ago";
    } else {
        return std::to_string(secondsDifference) + " second" + (secondsDifference != 1 ? "s" : "") + " ago";
    }
}

int main() {
    try {
        std::string dateString = "2023-10-01 12:00:00"; // Example input
        std::cout << formatDate(dateString) << std::endl;
    } catch (const std::invalid_argument& e) {
        std::cerr << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Date Parsing**: The `strptime` function is used to parse the date string. The format string can be adjusted based on the expected input format.
2. **Time Difference Calculation**: The difference between the current time and the input time is calculated using `difftime`.
3. **String Construction**: The function constructs a user-friendly string similarly to the TypeScript version.
4. **Error Handling**: If the date string is invalid, an exception is thrown.

You can replace the date string in the `main` function with any valid date string that matches the format specified in `strptime`.