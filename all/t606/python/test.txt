Hereâ€™s the provided C++ Catch2 test case converted to a Python unit test using the unittest framework.
Converted Python Test Case
python
import math
import unittest

# Assuming calculate_steering_angle function is defined elsewhere
def calculate_steering_angle(angular_velocity: float, speed: float, wheelbase: float) -> float:
    if speed <= 0:
        raise ValueError("Speed must be greater than zero.")
    return math.atan((angular_velocity * wheelbase) / speed)

class Tester(unittest.TestCase):
    wheelbase = 2.5  # Setting wheelbase constant for all tests

    def test_normal_case(self):
        angular_velocity = 1.0  # radians/second
        speed = 10.0            # meters/second
        expected_angle = math.atan((angular_velocity * self.wheelbase) / speed)
        self.assertAlmostEqual(calculate_steering_angle(angular_velocity, speed, self.wheelbase), expected_angle)

    def test_zero_speed(self):
        angular_velocity = 1.0  # radians/second
        speed = 0.0             # meters/second
        with self.assertRaises(ValueError):
            calculate_steering_angle(angular_velocity, speed, self.wheelbase)

    def test_negative_speed(self):
        angular_velocity = 1.0  # radians/second
        speed = -5.0            # meters/second
        with self.assertRaises(ValueError):
            calculate_steering_angle(angular_velocity, speed, self.wheelbase)

    def test_zero_angular_velocity(self):
        angular_velocity = 0.0  # radians/second
        speed = 10.0            # meters/second
        expected_angle = 0.0    # Steering angle should be zero
        self.assertAlmostEqual(calculate_steering_angle(angular_velocity, speed, self.wheelbase), expected_angle)

    def test_large_values(self):
        angular_velocity = 100.0  # radians/second
        speed = 1000.0            # meters/second
        expected_angle = math.atan((angular_velocity * self.wheelbase) / speed)
        self.assertAlmostEqual(calculate_steering_angle(angular_velocity, speed, self.wheelbase), expected_angle)

    def test_high_angular_velocity(self):
        angular_velocity = 10.0  # radians/second
        speed = 1.0               # meters/second
        expected_angle = math.atan((angular_velocity * self.wheelbase) / speed)
        self.assertAlmostEqual(calculate_steering_angle(angular_velocity, speed, self.wheelbase), expected_angle)

if __name__ == "__main__":
    unittest.main()
Explanation of Changes
Imports:
Imported the math and unittest modules.
Function Definition:
The calculate_steering_angle function is assumed to be defined in the same module. Its implementation is included for completeness.
Class Definition:
The Tester class extends unittest.TestCase, allowing it to use the unit testing framework.
Test Cases:
Each SECTION in the C++ code is converted to a method prefixed with test_.
Normal Case: Uses self.assertAlmostEqual to check for floating-point equality.
Zero Speed and Negative Speed: Uses with self.assertRaises(ValueError) to verify exceptions are raised.
Zero Angular Velocity: Checks that the steering angle is zero when the angular velocity is zero.
Large Values: Validates that the calculated steering angle matches the expected value for large inputs.
High Angular Velocity: Checks that the calculated angle for high angular velocity is as expected.
Main Execution:
The if __name__ == "__main__": block allows the test to be run directly.
How to Run the Test
You can run this test by saving it in a Python file (e.g., test_steering_angle.py) and executing it with the command:
bash
python -m unittest test_steering_angle.py
This will run all the defined test cases and provide output regarding their success or failure.