Here's the equivalent TypeScript code for the provided Python function, ensuring that the functionality and logic remain consistent while adapting to TypeScript's syntax and type system:

```typescript
import * as fs from 'fs';
import * as csvParser from 'csv-parser';

type CsvRow = string[];

async function readCsv(filePath: string): Promise<CsvRow[]> {
    /**
     * Reads a CSV file and parses each line into a list of strings.
     *
     * @param filePath - The path to the CSV file.
     * @return A promise that resolves to a list of string arrays, where each array represents a line from the CSV.
     */
    return new Promise((resolve, reject) => {
        const csvData: CsvRow[] = [];
        
        fs.createReadStream(filePath)
            .pipe(csvParser())
            .on('data', (row: any) => {
                // Convert row object to string array
                csvData.push(Object.values(row));
            })
            .on('end', () => {
                resolve(csvData);
            })
            .on('error', (error) => {
                reject(error);
            });
    });
}

// Example usage
// (async () => {
//     const data = await readCsv('path/to/your/file.csv');
//     console.log(data);
// })();
```

### Key Differences Explained:

1. **Imports**: In TypeScript, we import the necessary modules (`fs` for file system operations and a CSV parsing library like `csv-parser`).

2. **Type Definitions**: The type `CsvRow` is defined as an array of strings. The function signature explicitly returns a `Promise` that resolves to an array of `CsvRow`.

3. **Asynchronous Handling**: File reading is handled asynchronously in TypeScript, hence the function returns a `Promise`. The `createReadStream` method is used to read the file, and we listen for data and end events.

4. **Data Parsing**: Each row is an object, so we convert it to an array of strings using `Object.values(row)`.

5. **Error Handling**: The `error` event is captured to reject the promise if any errors occur during file reading.

Feel free to adjust the usage example according to your needs!