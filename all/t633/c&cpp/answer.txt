Here's the equivalent C++ code that mirrors the functionality and structure of your provided Python code. The C++ code uses standard libraries to handle CSV file reading and data storage.

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

std::vector<std::vector<std::string>> read_csv(const std::string& file_path) {
    /**
     * Reads a CSV file and parses each line into a vector of strings.
     *
     * @param file_path: The path to the CSV file.
     * @return: A vector of vector of strings, where each vector represents a line from the CSV.
     */
    std::vector<std::vector<std::string>> csv_data;
    std::ifstream file(file_path);
    
    if (!file.is_open()) {
        std::cerr << "Error: Could not open file " << file_path << std::endl;
        return csv_data; // Return empty data on error
    }

    std::string line;
    while (std::getline(file, line)) {
        std::vector<std::string> row;
        std::stringstream ss(line);
        std::string item;

        while (std::getline(ss, item, ',')) { // Assuming CSV is comma-separated
            row.push_back(item);
        }
        csv_data.push_back(row);
    }

    file.close(); // Optional, as file will close automatically
    return csv_data;
}
```

### Key Adaptations:
1. **File Handling**: Uses `std::ifstream` for reading files, with error handling for file opening.
2. **String Streams**: Uses `std::stringstream` to split each line by commas, similar to Python's CSV reader.
3. **Data Structures**: Uses `std::vector` to store the data, analogous to Python lists.
4. **Type Declarations**: Explicitly declares types for variables and function parameters.
5. **Error Handling**: Includes basic error handling for file operations.

This C++ code retains the original logic and structure of the Python version while adapting to C++ syntax and conventions.