Sure! Below is the equivalent JavaScript code that matches the functionality, logic, and structure of the provided Python code:

```javascript
const re = require('re2'); // You can use 're2' for more efficient regex handling, or simply use native JavaScript regex

function splitIntoSentences(text) {
    /**
     * Split the input text string into sentences.
     *
     * @param {string} text - The input text to be split into sentences.
     * @returns {Array} - A list of sentences extracted from the input text, cleaned and stripped of leading/trailing whitespace.
     */

    // Check if the input is a string
    if (typeof text !== 'string') {
        throw new Error("Input must be a string.");
    }

    // Regular expression to split the text where there is a punctuation followed by space or end of string
    // This handles situations where punctuation might be followed by a quotation mark or other punctuation
    const sentenceDelimiters = /(?<=[.!?])\s+(?=[A-Z])|(?<=[.!?]["”’])\s+(?=[A-Z])/g;

    // Split the text using the defined regular expression
    const sentences = text.split(sentenceDelimiters);

    // Remove any leading or trailing whitespace from each sentence
    const cleanedSentences = sentences.filter(sentence => sentence.trim().length > 0).map(sentence => sentence.trim());

    // Return the cleaned list of sentences
    return cleanedSentences;
}

// Example usage
const text = "Hello world! This is an example. Isn't it great? Yes, it is.";
console.log(splitIntoSentences(text));
```

### Explanation:
1. **Importing `re`**: In JavaScript, we don't need to explicitly import a package like `re`. Instead, we use the native `RegExp` object to define the regular expression.
2. **Function Definition**: The function `splitIntoSentences` is defined with a docstring (using JSDoc format) to describe the parameters and return type.
3. **Type Check**: The input `text` is checked to ensure it is a string. If not, an error is thrown.
4. **Regular Expression**: The regular expression is defined using a similar pattern as in Python. It splits the text at punctuation followed by a space or end of string, handling cases with quotation marks.
5. **Splitting Text**: The `text` is split using the regular expression.
6. **Cleaning Sentences**: The resulting array of sentences is filtered to remove empty strings and trimmed to remove leading and trailing whitespace.
7. **Return**: The cleaned list of sentences is returned.

This should give you the same functionality as the Python code.