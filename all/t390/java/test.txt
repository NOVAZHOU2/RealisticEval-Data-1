Sure! Below is the equivalent Java test class using JUnit for the provided Python unittest class. I'll first provide the method `splitIntoSentences` in a Java class, and then the corresponding test class using JUnit.

### Java Method Implementation

First, let's implement the `splitIntoSentences` method in a Java class:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class SentenceSplitter {

    /**
     * Split the input text string into sentences.
     *
     * @param text The input text to be split into sentences.
     * @return A list of sentences extracted from the input text, cleaned and stripped of leading/trailing whitespace.
     */
    public static List<String> splitIntoSentences(String text) {
        // Implement the logic to split the text into sentences
        List<String> sentences = new ArrayList<>();
        String[] parts = text.split("\\.\\s*"); // Simple regex to split on periods followed by whitespace
        
        for (String part : parts) {
            if (!part.trim().isEmpty()) {
                sentences.add(part.trim());
            }
        }

        return sentences;
    }
}
```

### JUnit Test Class

Now, let's create the JUnit test class:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

public class Tester {

    @Test
    public void testSplitIntoSentences() {
        // Test case 1: Empty string
        List<String> emptyResult = SentenceSplitter.splitIntoSentences("");
        assertEquals(0, emptyResult.size());

        // Test case 2: Single sentence
        List<String> singleSentenceResult = SentenceSplitter.splitIntoSentences("Hello world.");
        assertEquals(1, singleSentenceResult.size());
        assertEquals("Hello world", singleSentenceResult.get(0));

        // Test case 3: Multiple sentences
        List<String> multipleSentencesResult = SentenceSplitter.splitIntoSentences("Hello world. How are you? It's a beautiful day.");
        assertEquals(3, multipleSentencesResult.size());
        assertEquals("Hello world", multipleSentencesResult.get(0));
        assertEquals("How are you", multipleSentencesResult.get(1));
        assertEquals("It's a beautiful day", multipleSentencesResult.get(2));

        // Test case 4: Leading/trailing whitespace
        List<String> whitespaceResult = SentenceSplitter.splitIntoSentences("  Hello world.  ");
        assertEquals(1, whitespaceResult.size());
        assertEquals("Hello world", whitespaceResult.get(0));

        // Test case 5: Empty sentences
        List<String> emptySentencesResult = SentenceSplitter.splitIntoSentences("Hello world...  ..  .");
        assertEquals(3, emptySentencesResult.size());
        assertEquals("Hello world", emptySentencesResult.get(0));
        assertEquals("", emptySentencesResult.get(1));
        assertEquals("", emptySentencesResult.get(2));
    }
}
```

### Explanation

1. **Java Method Implementation**:
   - The `splitIntoSentences` method splits the input text into sentences based on a simple regex pattern that matches periods followed by whitespace.
   - It trims each part to remove leading and trailing whitespace and adds non-empty parts to the list.

2. **JUnit Test Class**:
   - The `Tester` class contains a single test method `testSplitIntoSentences`.
   - This method includes several test cases to validate the behavior of `splitIntoSentences`:
     - An empty string should result in an empty list.
     - A single sentence should result in a list with one element.
     - Multiple sentences should result in a list with the correct number of elements and trimmed content.
     - Leading/trailing whitespace should be handled correctly.
     - Handling of empty sentences should also be tested.

This setup ensures that the functionality and logic of the tests are preserved while adapting to Java's syntax and JUnit framework.