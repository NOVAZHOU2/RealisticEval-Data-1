Sure, let's convert the Python unittest test class into a TypeScript test class using Jest. First, we need to define the function `splitIntoSentences` in TypeScript and then write the corresponding Jest test cases.

Here's how you can do it:

1. Define the `splitIntoSentences` function in TypeScript.
2. Write the Jest test cases for this function.

### TypeScript Function Definition

First, let's define the `splitIntoSentences` function in TypeScript:

```typescript
function splitIntoSentences(text: string): string[] {
    // Split the text into sentences based on punctuation marks
    const sentences = text.split(/[\.\?!]+/).map(sentence => sentence.trim());
    return sentences.filter(sentence => sentence.length > 0);
}
```

### Jest Test Class

Now, let's create the Jest test class:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('splitIntoSentences', () => {
    it('should split the text into sentences correctly', () => {
        const text = "Hello world. This is a test! Is it working?";
        const expectedSentences = ["Hello world", "This is a test", "Is it working"];
        expect(splitIntoSentences(text)).toEqual(expectedSentences);
    });

    it('should handle empty strings', () => {
        const text = "";
        const expectedSentences: string[] = [];
        expect(splitIntoSentences(text)).toEqual(expectedSentences);
    });

    it('should handle text with no punctuation', () => {
        const text = "This is a single sentence";
        const expectedSentences = ["This is a single sentence"];
        expect(splitIntoSentences(text)).toEqual(expectedSentences);
    });

    it('should trim leading and trailing whitespace', () => {
        const text = "  Leading and trailing spaces. ";
        const expectedSentences = ["Leading and trailing spaces"];
        expect(splitIntoSentences(text)).toEqual(expectedSentences);
    });
});
```

### Explanation

1. **Function Definition**: 
   - The `splitIntoSentences` function uses a regular expression `/[\.\?!]+/` to split the text into sentences based on punctuation marks.
   - It trims each sentence to remove leading and trailing whitespace.
   - It filters out any empty strings that may result from the splitting process.

2. **Jest Test Cases**:
   - `it('should split the text into sentences correctly')`: Tests if the function correctly splits a text with multiple sentences.
   - `it('should handle empty strings')`: Tests if the function handles an empty string correctly.
   - `it('should handle text with no punctuation')`: Tests if the function handles a single sentence without punctuation.
   - `it('should trim leading and trailing whitespace')`: Tests if the function trims leading and trailing whitespace correctly.

3. **Imports**:
   - We use `@jest/globals` to import the `describe`, `it`, and `expect` functions.

This setup ensures that the functionality and logic of the tests are preserved while adapting to TypeScript and Jest.