Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included:

### TypeScript Code

First, ensure you have Jest installed in your project:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Add the necessary Jest configuration to your `tsconfig.json` or `jest.config.js`:

```json
{
  "preset": "ts-jest",
  "testEnvironment": "node"
}
```

Now, here is the TypeScript test class using Jest:

```typescript
import { splitIntoSentences } from './path-to-split-into-sentences'; // Import the function

describe('TestSplitIntoSentences', () => {
  it('test_basic_splitting', () => {
    // Test splitting a basic text with clear punctuation
    const text = "Hello world! How are you? I am fine.";
    const expected = ["Hello world!", "How are you?", "I am fine."];
    const result = splitIntoSentences(text);
    expect(result).toEqual(expected);
  });

  it('test_complex_punctuation', () => {
    // Test splitting text that includes quotes and commas
    const text = 'He said, This is amazing! Then he left.';
    const expected = ['He said, This is amazing!', "Then he left."];
    const result = splitIntoSentences(text);
    expect(result).toEqual(expected);
  });

  it('test_with_no_punctuation', () => {
    // Test text that has no punctuation marks
    const text = "Hello world how are you";
    const expected = ["Hello world how are you"];
    const result = splitIntoSentences(text);
    expect(result).toEqual(expected);
  });

  it('test_empty_string', () => {
    // Test empty string input
    const text = "";
    const expected = [];
    const result = splitIntoSentences(text);
    expect(result).toEqual(expected);
  });
});
```

### Explanation:
1. **Import Function**: Import the `splitIntoSentences` function from the appropriate module.
2. **Describe Block**: Use Jest's `describe` block to group the tests.
3. **It Blocks**: Each test case is defined using Jest's `it` blocks.
4. **Assertions**: Use Jest's `expect` and `toEqual` assertions to verify the results.

### The `splitIntoSentences` Function

Here is the `splitIntoSentences` function in TypeScript:

```typescript
/**
 * Split the input text string into sentences.
 *
 * @param text - The input text to be split into sentences.
 * @returns An array of sentences extracted from the input text, cleaned and stripped of leading/trailing whitespace.
 */
function splitIntoSentences(text: string): string[] {
  // Check if the input is a string
  if (typeof text !== 'string') {
    throw new Error('Input must be a string.');
  }

  // Regular expression to split the text where there is a punctuation followed by space or end of string
  // This handles situations where punctuation might be followed by a quotation mark or other punctuation
  const sentenceDelimiters = /(?<=[.!?])\s+(?=[A-Z])|(?<=[.!?]["”’])\s+(?=[A-Z])/g;

  // Split the text using the defined regular expression
  const sentences = text.split(sentenceDelimiters);

  // Remove any leading or trailing whitespace from each sentence
  const cleanedSentences = sentences.filter(sentence => sentence.trim().length > 0).map(sentence => sentence.trim());

  // Return the cleaned list of sentences
  return cleanedSentences;
}

export { splitIntoSentences };
```

### Running the Tests

To run the tests, add a script to your `package.json`:

```json
"scripts": {
  "test": "jest"
}
```

Run the tests using:

```sh
npm test
```

This setup ensures that the tests are equivalent to the Python unittest tests and that they run correctly using Jest in TypeScript.