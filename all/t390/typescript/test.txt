Sure! Below is the equivalent TypeScript test case using Jest for the given Python `unittest` test class:

```typescript
import { describe, it, expect } from '@jest/globals';
import { splitIntoSentences } from './path-to-your-split-into-sentences-function'; // Adjust the path accordingly

describe('splitIntoSentences', () => {
  it('should split text into sentences', () => {
    const text = "Hello world! How are you? I'm fine.";
    const expectedOutput = ["Hello world!", "How are you?", "I'm fine."];

    const result = splitIntoSentences(text);

    expect(result).toEqual(expectedOutput);
  });

  it('should handle empty string', () => {
    const text = "";
    const expectedOutput: string[] = [];

    const result = splitIntoSentences(text);

    expect(result).toEqual(expectedOutput);
  });

  it('should handle single sentence', () => {
    const text = "This is a single sentence.";
    const expectedOutput = ["This is a single sentence."];

    const result = splitIntoSentences(text);

    expect(result).toEqual(expectedOutput);
  });

  it('should handle multiple sentences with punctuation', () => {
    const text = "Sentence one. Sentence two! Question? Exclamation!";
    const expectedOutput = ["Sentence one.", "Sentence two!", "Question?", "Exclamation!"];

    const result = splitIntoSentences(text);

    expect(result).toEqual(expectedOutput);
  });
});
```

### Explanation:
1. **Imports**: Import the necessary functions and modules from Jest (`@jest/globals`) and your function (`splitIntoSentences`).
2. **Describe Block**: Use `describe` to group related tests together.
3. **It Blocks**: Each `it` block represents an individual test case.
4. **Expectations**: Use `expect` to assert that the output of `splitIntoSentences` matches the expected output.

Make sure to adjust the import path (`./path-to-your-split-into-sentences-function`) to match where your `splitIntoSentences` function is located.