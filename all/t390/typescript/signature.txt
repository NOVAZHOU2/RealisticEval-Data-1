Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments and type annotations:

```typescript
/**
 * Split the input text string into sentences.
 *
 * @param text - The input text to be split into sentences.
 * @returns An array of sentences extracted from the input text, cleaned and stripped of leading/trailing whitespace.
 */
function splitIntoSentences(text: string): string[] {
    // Check if the input is a string
    if (typeof text !== 'string') {
        throw new Error('Input must be a string.');
    }

    // Regular expression to split the text where there is a punctuation followed by space or end of string
    // This handles situations where punctuation might be followed by a quotation mark or other punctuation
    const sentenceDelimiters = /(?<=[.!?])\s+(?=[A-Z])|(?<=[.!?]["”’])\s+(?=[A-Z])/g;

    // Split the text using the defined regular expression
    const sentences = text.split(sentenceDelimiters);

    // Remove any leading or trailing whitespace from each sentence
    const cleanedSentences = sentences.filter(sentence => sentence.trim().length > 0).map(sentence => sentence.trim());

    // Return the cleaned list of sentences
    return cleanedSentences;
}

// Example usage
const exampleText = "Hello world! This is a test. Isn't it great? Yes, it is.";
console.log(splitIntoSentences(exampleText));
```

### Explanation:
1. **Function Signature**: The function `splitIntoSentences` is defined with a parameter of type `string` and returns an array of strings (`string[]`).
2. **JSDoc Documentation**: The function is documented using JSDoc-style comments, which include descriptions of parameters and return values.
3. **Error Handling**: The function checks if the input is a string using `typeof` and throws an error if it is not.
4. **Regular Expression**: The regular expression is defined using TypeScript's regex syntax.
5. **Splitting and Cleaning Sentences**:
   - The text is split using the regular expression.
   - The resulting array is filtered to remove empty strings and then mapped to trim leading and trailing whitespace.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices.