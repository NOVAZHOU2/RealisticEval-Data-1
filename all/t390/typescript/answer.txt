Sure! Here is the equivalent TypeScript code for your Python function:

```typescript
function splitIntoSentences(text: string): string[] {
    /**
     * Split the input text string into sentences.
     *
     * @param {string} text - The input text to be split into sentences.
     * @returns {string[]} A list of sentences extracted from the input text, cleaned and stripped of leading/trailing whitespace.
     */
    
    // Regular expression to match sentence delimiters (periods, question marks, exclamation points)
    const sentenceDelimiterRegex = /(?<=[.!?])\s+/g;

    // Split the text into sentences using the regular expression
    let sentences = text.split(sentenceDelimiterRegex);

    // Clean and strip leading/trailing whitespace from each sentence
    sentences = sentences.map(sentence => sentence.trim());

    return sentences;
}
```

### Explanation:
- **Regular Expression**: `/(?<=[.!?])\s+/g` is used to identify sentence boundaries based on periods, question marks, and exclamation points.
  - `(?<=...)`: This is a positive lookbehind assertion that matches only if the preceding characters match the regex pattern inside it.
  - `[.!?]`: Matches any one of the specified characters (period, question mark, or exclamation point).
  - `\s+`: Matches one or more whitespace characters.
  - `g`: Global flag to find all occurrences in the string.
  
- **Splitting**: `text.split(sentenceDelimiterRegex)` splits the input text into an array of sentences at the identified delimiters.

- **Mapping**: `.map(sentence => sentence.trim())` removes any leading or trailing whitespace from each sentence.

This TypeScript function should work similarly to your Python function, splitting the input text into sentences and cleaning them.