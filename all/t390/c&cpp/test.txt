Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <vector>
#include <regex>

// Function to split the input text string into sentences
std::vector<std::string> split_into_sentences(const std::string& text) {
    // Check if the input is a string (in C++, this is always true since it's a function parameter)
    if (text.empty()) {
        throw std::invalid_argument("Input must be a non-empty string.");
    }

    // Regular expression to split the text where there is a punctuation followed by space or end of string
    // This handles situations where punctuation might be followed by a quotation mark or other punctuation
    std::regex sentence_delimiters(R"((?<=[.!?]["”’])\s+(?=[A-Z]))");

    // Split the text using the defined regular expression
    std::sregex_token_iterator iter(text.begin(), text.end(), sentence_delimiters, -1);
    std::sregex_token_iterator end;

    std::vector<std::string> sentences;
    for (; iter != end; ++iter) {
        std::string sentence = *iter;
        // Remove any leading or trailing whitespace from each sentence
        auto start = sentence.find_first_not_of(" \t\n\r\f\v");
        auto end = sentence.find_last_not_of(" \t\n\r\f\v");
        if (start != std::string::npos) {
            sentences.push_back(sentence.substr(start, (end - start + 1)));
        }
    }

    // Return the cleaned list of sentences
    return sentences;
}

TEST_CASE("TestSplitIntoSentences", "[split_into_sentences]") {
    SECTION("test_basic_splitting") {
        // Test splitting a basic text with clear punctuation
        std::string text = "Hello world! How are you? I am fine.";
        std::vector<std::string> expected = {"Hello world!", "How are you?", "I am fine."};
        std::vector<std::string> result = split_into_sentences(text);
        REQUIRE(result == expected);
    }

    SECTION("test_complex_punctuation") {
        // Test splitting text that includes quotes and commas
        std::string text = "He said, This is amazing! Then he left.";
        std::vector<std::string> expected = {"He said, This is amazing!", "Then he left."};
        std::vector<std::string> result = split_into_sentences(text);
        REQUIRE(result == expected);
    }

    SECTION("test_with_no_punctuation") {
        // Test text that has no punctuation marks
        std::string text = "Hello world how are you";
        std::vector<std::string> expected = {"Hello world how are you"};
        std::vector<std::string> result = split_into_sentences(text);
        REQUIRE(result == expected);
    }

    SECTION("test_empty_string") {
        // Test empty string input
        std::string text = "";
        std::vector<std::string> expected = {};
        std::vector<std::string> result = split_into_sentences(text);
        REQUIRE(result == expected);
    }
}
```

### Explanation:
1. **Header Files**: Includes necessary headers (`<catch2/catch_test_macros.hpp>`, `<string>`, `<vector>`, `<regex>`).
2. **Function Definition**: `split_into_sentences` takes a `const std::string&` as input and returns a `std::vector<std::string>`.
3. **Documentation**: Single-line comments (`//`) are used to describe the function and sections within the test cases.
4. **Regular Expression**: Uses a regex pattern to match sentence delimiters, similar to the Python version.
5. **Splitting Text**: Uses `std::sregex_token_iterator` to split the text based on the regex pattern.
6. **Whitespace Removal**: Removes leading and trailing whitespace from each sentence.
7. **Exception Handling**: Throws an exception if the input string is empty.
8. **Catch2 Test Suite**: Defines a test suite `TestSplitIntoSentences` with multiple sections to cover different test cases.
9. **Assertions**: Uses `REQUIRE` to check that the results match the expected values.

This C++ code maintains the same functionality and structure as the original Python unittest class, including the test cases and assertions.