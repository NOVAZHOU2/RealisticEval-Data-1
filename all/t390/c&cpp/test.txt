Sure! Below is the equivalent C++ code with the test class using Catch2. This includes the `split_into_sentences` function and the corresponding tests:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <vector>
#include <sstream>

// Function to split the input text string into sentences
std::vector<std::string> split_into_sentences(const std::string& text) {
    std::vector<std::string> sentences;
    std::istringstream iss(text);
    std::string sentence;
    while (getline(iss, sentence, '.')) {
        // Trim leading and trailing whitespace
        auto start = sentence.find_first_not_of(" \t\n\r\f\v");
        auto end = sentence.find_last_not_of(" \t\n\r\f\v");
        if (start != std::string::npos) {
            sentences.push_back(sentence.substr(start, (end - start + 1)));
        }
    }
    return sentences;
}

TEST_CASE("Test split_into_sentences") {
    SECTION("Empty string") {
        REQUIRE(split_into_sentences("").empty());
    }

    SECTION("Single sentence") {
        REQUIRE_THAT(split_into_sentences("This is a single sentence."),
                     Catch::Matchers::Equals(std::vector<std::string>{"This is a single sentence"}));
    }

    SECTION("Multiple sentences") {
        REQUIRE_THAT(split_into_sentences("This is the first sentence. This is the second sentence. This is the third sentence."),
                     Catch::Matchers::Equals(std::vector<std::string>{
                         "This is the first sentence",
                         "This is the second sentence",
                         "This is the third sentence"
                     }));
    }

    SECTION("Trailing period") {
        REQUIRE_THAT(split_into_sentences("This is a sentence with a trailing period..."),
                     Catch::Matchers::Equals(std::vector<std::string>{
                         "This is a sentence with a trailing period"
                     }));
    }

    SECTION("Leading and trailing spaces") {
        REQUIRE_THAT(split_into_sentences("   Leading and trailing spaces.   "),
                     Catch::Matchers::Equals(std::vector<std::string>{"Leading and trailing spaces"}));
    }

    SECTION("Consecutive periods") {
        REQUIRE_THAT(split_into_sentences("Consecutive periods.."),
                     Catch::Matchers::Equals(std::vector<std::string>{
                         "Consecutive periods",
                         ""
                     }));
    }
}
```

### Explanation:

1. **Function Definition**: 
   - The `split_into_sentences` function takes a string and returns a vector of strings representing the sentences in the input text.
   - It uses `std::istringstream` to split the text by periods (`.`).
   - It trims leading and trailing whitespace from each sentence before adding it to the result vector.

2. **Test Class**:
   - The `TEST_CASE` macro defines a test case named "Test split_into_sentences".
   - Each `SECTION` defines a specific scenario or test case.
   - `REQUIRE` is used to check boolean conditions.
   - `REQUIRE_THAT` with `Catch::Matchers::Equals` is used to compare vectors of strings.

3. **Assertions**:
   - The `REQUIRE` macro checks if the function returns an empty vector when given an empty string.
   - The `REQUIRE_THAT` macro checks if the function returns the expected vector of sentences for different inputs.

This setup ensures that the functionality and logic of the tests are preserved, making the transition from Python's unittest to C++'s Catch2 seamless.