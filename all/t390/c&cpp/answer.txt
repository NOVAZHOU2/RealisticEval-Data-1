Here is an example of how you might convert the Python function `split_into_sentences` into C++:

```c++
#include <string>
#include <vector>

std::vector<std::string> split_into_sentences(const std::string &text) {
    std::vector<std::string> sentences;
    size_t start = 0;
    while(start < text.size()) {
        size_t end = text.find_first_of(".!?;", start);
        if(end == std::string::npos) {
            end = text.size();
        }
        std::string sentence = text.substr(start, end - start + 1);
        sentence.erase(sentence.begin(), std::find_if(sentence.begin(), sentence.end(),
            [](unsigned char ch){ return !isspace(ch); }));
        sentence.erase(std::find_if(sentence.rbegin(), sentence.rend(),
            [](unsigned char ch){ return !isspace(ch); }).base(), sentence.end());
        sentences.push_back(sentence);
        start = end + 2;
    }
    return sentences;
}
```

This function splits the given string into sentences based on punctuation marks (`.` , `,`, `!`, `?`, `;`). It also trims any leading or trailing white spaces from each sentence before adding it to the result vector.

Please note that this is a simplified version and does not handle all edge cases like consecutive punctuation marks, quotation marks inside sentences etc. You may need to adjust it according to your specific requirements. 

Also, make sure to include the necessary header files in your actual implementation file and link against the standard library when compiling your C++ program.