Here’s how you can convert the provided C++ Catch2 test cases into equivalent test cases using JavaScript's Jest framework:

```javascript
const { reverseRange } = require('./path-to-your-module'); // Adjust the path as necessary

describe('reverseRange function', () => {
    test('Reverse entire array', () => {
        const v = [1, 2, 3, 4, 5];
        reverseRange(v, 0, 4);
        const expected = [5, 4, 3, 2, 1];
        expect(v).toEqual(expected);
    });

    test('Reverse subrange in the middle', () => {
        const v = [1, 2, 3, 4, 5, 6, 7, 8];
        reverseRange(v, 2, 5);
        const expected = [1, 2, 6, 5, 4, 3, 7, 8];
        expect(v).toEqual(expected);
    });

    test('Reverse a single element range', () => {
        const v = [1, 2, 3, 4, 5];
        reverseRange(v, 2, 2);
        const expected = [1, 2, 3, 4, 5];
        expect(v).toEqual(expected);
    });

    test('Reverse range with invalid indices', () => {
        const v = [1, 2, 3, 4, 5];
        reverseRange(v, -1, 3);  // Invalid start index
        const expected = [1, 2, 3, 4, 5]; // No change
        expect(v).toEqual(expected);
    });

    test('Reverse range at the end of the array', () => {
        const v = [1, 2, 3, 4, 5, 6];
        reverseRange(v, 3, 5);
        const expected = [1, 2, 3, 6, 5, 4];
        expect(v).toEqual(expected);
    });
});
```

### Key Changes:
1. **Test Structure**: The C++ `TEST_CASE` and `SECTION` are replaced with Jest's `describe` and `test` functions.
2. **Assertions**: The `REQUIRE` assertion is replaced with Jest’s `expect(...).toEqual(...)` to check for equality.
3. **Array Declaration**: JavaScript uses the `const` keyword for array declarations.
4. **Importing Functions**: Make sure to import the `reverseRange` function correctly from your module.

This structure maintains the logic and intent of the original C++ tests while adapting them for JavaScript and Jest.