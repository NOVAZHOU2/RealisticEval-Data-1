Certainly! Below is the equivalent TypeScript test class using Jest, which preserves the functionality and logic of the provided Python unittest class. The code includes proper type annotations and uses Jest's assertion methods.

### TypeScript Code

```typescript
import * as fs from 'fs';
import { DataFrame } from 'pandas-js';
import { Test, TestingModule } from '@nestjs/testing';
import { TestTSVtoJSONL } from './test-tsv-to-jsonl';

describe('TestTSVtoJSONL', () => {
    let testTSVtoJSONL: TestTSVtoJSONL;

    beforeEach(async () => {
        const module: TestingModule = await Test.createTestingModule({
            providers: [TestTSVtoJSONL],
        }).compile();

        testTSVtoJSONL = module.get<TestTSVtoJSONL>(TestTSVtoJSONL);
    });

    describe('standard TSV', () => {
        it('should correctly convert standard TSV to JSONL', () => {
            testTSVtoJSONL.test_standard_tsv();
        });
    });

    describe('single row TSV', () => {
        it('should correctly convert single row TSV to JSONL', () => {
            testTSVtoJSONL.test_single_row_tsv();
        });
    });

    describe('numeric and boolean values', () => {
        it('should correctly handle numeric and boolean values', () => {
            testTSVtoJSONL.test_numeric_and_boolean_values();
        });
    });
});

class TestTSVtoJSONL {
    private testDir: string;

    constructor() {
        this.testDir = fs.mkdtempSync(os.tmpdir() + '/test-tsv-to-jsonl-');
    }

    cleanup() {
        fs.rmSync(this.testDir, { recursive: true, force: true });
    }

    tsvToJsonl(tsvFile: string, jsonlFile: string): void {
        const df = DataFrame.read_csv(tsvFile, { delimiter: '\t' });

        const writer = fs.createWriteStream(jsonlFile, { encoding: 'utf-8' });

        df.forEach((row) => {
            const jsonLine = JSON.stringify(row.toObject());
            writer.write(jsonLine + '\n');
        });

        writer.end();
    }

    test_standard_tsv(): void {
        const tsvContent = "Name\tAge\tCountry\nAlice\t30\tUSA\nBob\t25\tCanada\n";
        const tsvFile = `${this.testDir}/test_standard.tsv`;
        const jsonlFile = `${this.testDir}/test_standard.jsonl`;

        fs.writeFileSync(tsvFile, tsvContent, { encoding: 'utf-8' });

        this.tsvToJsonl(tsvFile, jsonlFile);

        const lines = fs.readFileSync(jsonlFile, { encoding: 'utf-8' }).split('\n');

        const expectedLines = [
            '{"Name":"Alice","Age":30,"Country":"USA"}\n',
            '{"Name":"Bob","Age":25,"Country":"Canada"}\n'
        ];

        expect(lines).toEqual(expectedLines);
    }

    test_single_row_tsv(): void {
        const tsvContent = "Name\tAge\tCountry\nAlice\t30\tUSA\n";
        const tsvFile = `${this.testDir}/test_single_row.tsv`;
        const jsonlFile = `${this.testDir}/test_single_row.jsonl`;

        fs.writeFileSync(tsvFile, tsvContent, { encoding: 'utf-8' });

        this.tsvToJsonl(tsvFile, jsonlFile);

        const lines = fs.readFileSync(jsonlFile, { encoding: 'utf-8' }).split('\n');

        const expectedLines = [
            '{"Name":"Alice","Age":30,"Country":"USA"}\n'
        ];

        expect(lines).toEqual(expectedLines);
    }

    test_numeric_and_boolean_values(): void {
        const tsvContent = "Name\tAge\tIs_Student\nAlice\t30\tTrue\nBob\t25\tFalse\n";
        const tsvFile = `${this.testDir}/test_numeric_boolean.tsv`;
        const jsonlFile = `${this.testDir}/test_numeric_boolean.jsonl`;

        fs.writeFileSync(tsvFile, tsvContent, { encoding: 'utf-8' });

        this.tsvToJsonl(tsvFile, jsonlFile);

        const lines = fs.readFileSync(jsonlFile, { encoding: 'utf-8' }).split('\n');

        const expectedLines = [
            '{"Name":"Alice","Age":30,"Is_Student":true}\n',
            '{"Name":"Bob","Age":25,"Is_Student":false}\n'
        ];

        expect(lines).toEqual(expectedLines);
    }
}
```

### Explanation:

1. **Imports**:
   - `fs`: Node.js filesystem module for reading and writing files.
   - `os`: Node.js operating system module for creating temporary directories.
   - `DataFrame` from `pandas-js`: A library similar to pandas for handling data frames in TypeScript/JavaScript.
   - `@nestjs/testing`: NestJS testing utilities (used here for setting up the test environment).

2. **Class Definition**:
   - `TestTSVtoJSONL` class contains the test methods and the `tsvToJsonl` method.

3. **Setup and Teardown**:
   - `constructor` creates a temporary directory for testing.
   - `cleanup` cleans up the temporary directory after tests.

4. **Test Methods**:
   - Each test method sets up the TSV content, writes it to a file, converts it to JSONL, reads the JSONL file, and asserts the expected results using Jest's `expect` function.

5. **Jest Test Suite**:
   - The outer `describe` block sets up the test suite and initializes the `TestTSVtoJSONL` instance.
   - Inner `describe` blocks contain individual test cases.

This TypeScript code preserves the original functionality and structure of the Python unittest class while adapting it to Jest's syntax and conventions.