Here is your Python function translated into TypeScript with appropriate type annotations and comments preserved:

```typescript
import * as fs from 'fs';
import { parse } from 'csv-parse/sync';

/**
 * Convert TSV file to JSONL file.
 *
 * @param tsvFile - Path to the TSV file.
 * @param jsonlFile - Path to the JSONL file.
 */
function tsvToJsonl(tsvFile: string, jsonlFile: string): void {
    // Read the contents of the TSV file
    const data = fs.readFileSync(tsvFile, 'utf-8');

    // Parse the TSV data using csv-parse
    const records = parse(data, {
        delimiter: '\t', // Specify that the delimiter is a tab character
        columns: true   // Automatically infer column names from the first row
    });

    // Write each record to the JSONL file in a newline-separated format
    const jsonlContent = records.map(record => JSON.stringify(record)).join('\n');
    fs.writeFileSync(jsonlFile, jsonlContent);
}
```

### Explanation:
1. **Imports**: The `fs` module is imported for file operations, and `parse` from `csv-parse/sync` is used to parse the TSV file.
2. **Function Signature**: The function `tsvToJsonl` takes two parameters (`tsvFile` and `jsonlFile`) both of type `string`, and returns `void`.
3. **Comments**: Comments are preserved to explain what the function does and its parameters.

This TypeScript version maintains the same functionality as the original Python function but uses TypeScript's type system and Node.js's file system module.