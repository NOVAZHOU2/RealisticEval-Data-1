Certainly! Below is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments.

### TypeScript Code

```typescript
import * as fs from 'fs';
import { DataFrame } from 'pandas-js';

/**
 * Convert a TSV file to a JSONL file.
 *
 * @param tsvFile - The path to the TSV file.
 * @param jsonlFile - The path to the JSONL file.
 */
function tsvToJsonl(tsvFile: string, jsonlFile: string): void {
    // Read the TSV file
    const df = DataFrame.read_csv(tsvFile, { delimiter: '\t' });

    // Open the JSONL file for writing
    const writer = fs.createWriteStream(jsonlFile, { encoding: 'utf-8' });

    // Iterate over each row in the DataFrame
    df.forEach((row) => {
        // Convert each row to a JSON string
        const jsonLine = JSON.stringify(row.toObject());
        // Write the JSON line to the JSONL file
        writer.write(jsonLine + '\n');
    });

    // Close the writer stream
    writer.end();
}

// Example usage
tsvToJsonl('input.tsv', 'output.jsonl');
```

### Explanation:

1. **Imports**:
   - `fs`: Node.js filesystem module for reading and writing files.
   - `DataFrame` from `pandas-js`: A library similar to pandas for handling data frames in TypeScript/JavaScript.

2. **Function Definition**:
   - The function `tsvToJsonl` takes two parameters: `tsvFile` (the input TSV file path) and `jsonlFile` (the output JSONL file path).

3. **Documentation Comments**:
   - The JSDoc-style comments provide clear documentation for the function, its parameters, and its purpose.

4. **Reading the TSV File**:
   - Use `DataFrame.read_csv` to read the TSV file, specifying the delimiter as `\t`.

5. **Writing to the JSONL File**:
   - Create a writable stream using `fs.createWriteStream`.
   - Iterate over each row in the DataFrame using `forEach`.
   - Convert each row to a JSON string using `JSON.stringify`.
   - Write the JSON line to the JSONL file followed by a newline character.

6. **Closing the Writer Stream**:
   - Call `writer.end()` to close the writable stream.

### Example Usage

```typescript
// Example usage
tsvToJsonl('input.tsv', 'output.jsonl');
```

This TypeScript code preserves the original functionality and structure of the Python code while adapting it to TypeScript's syntax and conventions.