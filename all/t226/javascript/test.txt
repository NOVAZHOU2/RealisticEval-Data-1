Certainly! I will convert the given Python `unittest` test class into an equivalent Jest test suite, ensuring that the functionality and logic of the tests are maintained. I will also document any necessary changes due to language differences between Python and JavaScript.

Here is the converted Jest test suite:

```javascript
const os = require('os');
const fs = require('fs');
const path = require('path');

describe('TestTSVtoJSONL', () => {
    let testDir;

    beforeAll(() => {
        // Create a temporary directory for testing
        testDir = fs.mkdtempSync(os.tmpdir() + 'jest-test-');
    });

    afterAll(() => {
        // Clean up the temporary directory
        fs.rmSync(testDir, { recursive: true, force: true });
    });

    const tsv_to_jsonl = require('./tsv_to_jsonl'); // Import the tsv_to_jsonl function

    test('standard TSV conversion', () => {
        const tsvContent = "Name\tAge\tCountry\nAlice\t30\tUSA\nBob\t25\tCanada\n";
        const tsvFile = path.join(testDir, 'test_standard.tsv');
        const jsonlFile = path.join(testDir, 'test_standard.jsonl');

        fs.writeFileSync(tsvFile, tsvContent, 'utf-8');

        tsv_to_jsonl(tsvFile, jsonlFile);

        const lines = fs.readFileSync(jsonlFile, 'utf-8').split('\n');

        const expectedLines = [
            '{"Name":"Alice","Age":30,"Country":"USA"}\n',
            '{"Name":"Bob","Age":25,"Country":"Canada"}\n'
        ];

        expect(lines).toEqual(expectedLines);
    });

    test('single row TSV conversion', () => {
        const tsvContent = "Name\tAge\tCountry\nAlice\t30\tUSA\n";
        const tsvFile = path.join(testDir, 'test_single_row.tsv');
        const jsonlFile = path.join(testDir, 'test_single_row.jsonl');

        fs.writeFileSync(tsvFile, tsvContent, 'utf-8');

        tsv_to_jsonl(tsvFile, jsonlFile);

        const lines = fs.readFileSync(jsonlFile, 'utf-8').split('\n');

        const expectedLines = [
            '{"Name":"Alice","Age":30,"Country":"USA"}\n'
        ];

        expect(lines).toEqual(expectedLines);
    });

    test('numeric and boolean values TSV conversion', () => {
        const tsvContent = "Name\tAge\tIs_Student\nAlice\t30\tTrue\nBob\t25\tFalse\n";
        const tsvFile = path.join(testDir, 'test_numeric_boolean.tsv');
        const jsonlFile = path.join(testDir, 'test_numeric_boolean.jsonl');

        fs.writeFileSync(tsvFile, tsvContent, 'utf-8');

        tsv_to_jsonl(tsvFile, jsonlFile);

        const lines = fs.readFileSync(jsonlFile, 'utf-8').split('\n');

        const expectedLines = [
            '{"Name":"Alice","Age":30,"Is_Student":true}\n',
            '{"Name":"Bob","Age":25,"Is_Student":false}\n'
        ];

        expect(lines).toEqual(expectedLines);
    });
});
```

### Explanation:
1. **Setup and Teardown**:
   - `beforeAll` is used to create a temporary directory for testing.
   - `afterAll` is used to clean up the temporary directory.

2. **Test Cases**:
   - Each test case is defined using the `test` function from Jest.
   - The test cases follow the same structure as the Python `unittest` tests.

3. **File Operations**:
   - `fs.writeFileSync` is used to write content to the TSV file.
   - `fs.readFileSync` is used to read content from the JSONL file.
   - The content is split by newline characters to match the expected lines.

4. **Assertions**:
   - `expect` is used to assert that the actual lines match the expected lines.

5. **Importing the Function**:
   - The `tsv_to_jsonl` function is imported at the beginning of the test suite.

6. **Temporary Directory Management**:
   - `fs.mkdtempSync` is used to create a temporary directory.
   - `fs.rmSync` is used to remove the directory recursively.

This Jest test suite maintains the functionality and logic of the original Python `unittest` tests while adapting to JavaScript's Jest framework.