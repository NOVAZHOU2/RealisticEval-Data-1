Sure! Below is the equivalent C++ code that performs the same functionality as the provided Python script. This involves reading a TSV file, converting each row to a JSON object, and writing it to a JSON Lines (JSONL) file.

```cpp
#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

// Function to read a TSV file and convert it to JSON Lines format
void tsv_to_jsonl(const std::string& tsv_file, const std::string& jsonl_file) {
    // Open the TSV file for reading
    std::ifstream tsv(tsv_file);
    if (!tsv.is_open()) {
        std::cerr << "Failed to open TSV file: " << tsv_file << std::endl;
        return;
    }

    // Open the JSONL file for writing
    std::ofstream jsonl(jsonl_file);
    if (!jsonl.is_open()) {
        std::cerr << "Failed to open JSONL file: " << jsonl_file << std::endl;
        return;
    }

    std::string line;
    std::vector<std::string> headers;
    std::getline(tsv, line); // Read the header line
    std::istringstream iss(line);
    std::string header;
    while (std::getline(iss, header, '\t')) {
        headers.push_back(header);
    }

    while (std::getline(tsv, line)) {
        std::istringstream iss(line);
        json row;
        std::string value;
        for (size_t i = 0; i < headers.size(); ++i) {
            std::getline(iss, value, '\t');
            row[headers[i]] = value;
        }
        jsonl << row.dump() << '\n';
    }

    tsv.close();
    jsonl.close();
}

int main() {
    std::string tsv_file = "input.tsv";
    std::string jsonl_file = "output.jsonl";
    tsv_to_jsonl(tsv_file, jsonl_file);
    return 0;
}
```

### Explanation:
1. **Dependencies**: The code uses `nlohmann/json` for JSON handling.
2. **File Handling**: It opens the TSV file for reading and the JSONL file for writing using `std::ifstream` and `std::ofstream`.
3. **Reading Headers**: It reads the first line of the TSV file to get the headers.
4. **Row Processing**: Each subsequent line is processed by splitting it into values based on the tab delimiter (`\t`).
5. **JSON Conversion**: Each row is converted to a JSON object using `nlohmann::json`.
6. **Writing to JSONL**: Each JSON object is written to the JSONL file with a newline separator.

Make sure you have the `nlohmann/json` library installed and included in your project. You can include it via a package manager or download the single-header file and include it directly.