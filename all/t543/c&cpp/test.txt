Certainly! Below is the equivalent C++ Catch2 test case for the JavaScript Jest function `incrementNumber`.

First, ensure you have Catch2 installed and properly set up in your project. Then, you can create a test file with the following content:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

// Function to be tested
int incrementNumber(int num) {
    if (num <= 0) {
        return num;
    } else {
        return num + 1;
    }
}

TEST_CASE("Increment Number Test Cases", "[incrementNumber]") {
    // Test cases using Catch2
    REQUIRE(incrementNumber(5) == 6);       // Positive number
    REQUIRE(incrementNumber(-3) == -3);     // Non-positive number
    REQUIRE(incrementNumber(0) == 0);       // Edge case: zero
    REQUIRE(incrementNumber(100) == 101);   // Another positive number
}
```

### Explanation:
- **`#define CATCH_CONFIG_MAIN`**: This macro tells Catch2 to provide the main function.
- **`#include <catch2/catch.hpp>`**: Include the Catch2 header file.
- **`incrementNumber` function**: This is the function that needs to be tested. It behaves similarly to the JavaScript function provided.
- **`TEST_CASE` macro**: Defines a test case. The first argument is the name of the test case, and the second argument is a tag used for filtering tests.
- **`REQUIRE` macro**: Asserts that the condition is true. If the condition is false, the test will fail.

To run the test, compile your code with a compiler that supports C++17 (or later) and link against the Catch2 library. For example, using g++:

```sh
g++ -std=c++17 -o test_increment_number test_increment_number.cpp -lcatch2
./test_increment_number
```

This will execute the test cases and output the results.