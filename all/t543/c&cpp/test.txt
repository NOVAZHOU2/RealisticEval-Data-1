Sure! Below is the equivalent C++ test case using Catch2 for the provided JavaScript Jest function `incrementNumber`.

First, ensure you have Catch2 installed in your project. If not, you can add it via your package manager or download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2).

Here's the C++ test case:

```cpp
#include <catch2/catch.hpp>
#include "your_increment_number_function.h" // Include your implementation file

// Define the incrementNumber function here if it's not already defined
int incrementNumber(int num) {
    if (num <= 0) {
        return num;
    } else {
        return num + 1;
    }
}

TEST_CASE("Increment Number Test Cases", "[increment]") {
    SECTION("Non-positive numbers") {
        REQUIRE(incrementNumber(0) == 0);
        REQUIRE(incrementNumber(-5) == -5);
        REQUIRE(incrementNumber(-1) == -1);
    }

    SECTION("Positive numbers") {
        REQUIRE(incrementNumber(1) == 2);
        REQUIRE(incrementNumber(5) == 6);
        REQUIRE(incrementNumber(100) == 101);
    }
}
```

### Explanation:
1. **Include Catch2 Header**: The `#include <catch2/catch.hpp>` line includes the Catch2 header file necessary for writing tests.
2. **Define `incrementNumber` Function**: Ensure that the `incrementNumber` function is either defined in a separate header file (`your_increment_number_function.h`) or included directly in your test file.
3. **Test Case Structure**:
   - `TEST_CASE` defines a top-level test case with a name and tags.
   - `SECTION` divides the test case into smaller sections, each containing related test cases.
4. **Assertions**: `REQUIRE` is used to assert that the actual result matches the expected result.

Make sure to compile your test cases with the appropriate flags to link against Catch2. For example, if you're using g++, you might compile like this:

```sh
g++ -std=c++17 -I/path/to/catch2/include your_test_file.cpp -o your_test_executable
```

Replace `/path/to/catch2/include` with the actual path where the Catch2 headers are located.