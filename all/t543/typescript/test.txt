Sure! Below is the TypeScript version of your JavaScript Jest test case using `describe`:

```typescript
import { describe, it, expect } from '@jest/globals';

/**
 * Increments the entered number.
 * If the number is non-positive (<= 0), returns the original value.
 * If the number is positive, returns the value plus 1.
 *
 * @param {number} num - The number to increment.
 * @returns {number} - The incremented value or the original number.
 */
function incrementNumber(num: number): number {
    if (num <= 0) {
        return num;
    }
    return num + 1;
}

describe('incrementNumber function', () => {
    it('should return the original number if it is non-positive', () => {
        expect(incrementNumber(-5)).toBe(-5);
        expect(incrementNumber(0)).toBe(0);
    });

    it('should return the number plus one if it is positive', () => {
        expect(incrementNumber(1)).toBe(2);
        expect(incrementNumber(10)).toBe(11);
    });
});
```

In this TypeScript version:
- I've added type annotations to the `incrementNumber` function and its parameters.
- I've used the `@jest/globals` import to bring in the necessary Jest functions (`describe`, `it`, `expect`).
- I've written two tests within the `describe` block to cover both scenarios: when the input number is non-positive and when it is positive.

Make sure you have TypeScript and Jest set up in your project before running these tests.