Sure, here's how you can convert your JavaScript Jest test case to a Java JUnit test case:

### JavaScript Jest Test Case
```javascript
const incrementNumber = require('./incrementNumber');

test('increments positive numbers', () => {
    expect(incrementNumber(5)).toBe(6);
});

test('does not change non-positive numbers', () => {
    expect(incrementNumber(-3)).toBe(-3);
    expect(incrementNumber(0)).toBe(0);
});
```

### Java JUnit Test Case
First, make sure you have the necessary dependencies in your `pom.xml` file if you're using Maven:
```xml
<dependencies>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.8.1</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>5.8.1</version>
        <scope>test</scope>
    </dependency>
</dependencies>
```

Then, create your Java class and test case:

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    public int incrementNumber(int num) {
        if (num <= 0) {
            return num;
        } else {
            return num + 1;
        }
    }

    @Test
    public void testIncrementPositiveNumbers() {
        assertEquals(6, incrementNumber(5));
    }

    @Test
    public void testDoesNotChangeNonPositiveNumbers() {
        assertEquals(-3, incrementNumber(-3));
        assertEquals(0, incrementNumber(0));
    }
}
```

In this Java code:
- We define the `incrementNumber` method within the `Tester` class.
- We use JUnit annotations (`@Test`) to mark our test methods.
- We use `assertEquals` from JUnit to assert that the output of `incrementNumber` matches the expected results.

This should give you a good starting point for running tests in Java using JUnit.