Sure! Here is the equivalent Java code that sorts an array of objects alphabetically by a specified key:

```java
import java.util.Arrays;
import java.util.Comparator;

public class Main {

    /**
     * Sorts an array of objects alphabetically by a specified key.
     *
     * @param array The array of objects to be sorted.
     * @param key   The key in the objects to sort by.
     * @return The sorted array based on the specified key.
     */
    public static Object[] sortByKey(Object[] array, String key) {
        Arrays.sort(array, new Comparator<Object>() {
            @Override
            public int compare(Object a, Object b) {
                // Retrieve the string values from each object by the key, converting to lowercase for case-insensitive comparison
                String valueA = ((Map<String, String>) a).get(key) == null ? "" : ((Map<String, String>) a).get(key).toLowerCase();
                String valueB = ((Map<String, String>) b).get(key) == null ? "" : ((Map<String, String>) b).get(key).toLowerCase();

                // Compare the values to determine the order
                return valueA.compareTo(valueB);
            }
        });

        return array;
    }

    public static void main(String[] args) {
        // Example usage
        Object[] data = new Object[]{
            new java.util.HashMap<String, String>() {{
                put("name", "Alice");
            }},
            new java.util.HashMap<String, String>() {{
                put("name", "bob");
            }},
            new java.util.HashMap<String, String>() {{
                put("name", "Charlie");
            }}
        };

        Object[] sortedData = sortByKey(data, "name");
        System.out.println(Arrays.toString(sortedData));
    }
}
```

### Explanation:
1. **Comparator**: We use a `Comparator` to define the sorting logic.
2. **Case-Insensitive Comparison**: We convert the values to lowercase before comparing them.
3. **Null Handling**: We handle cases where the key might not exist or be null by providing a default empty string.

Make sure you have the necessary imports at the beginning of your Java file:

```java
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
```

This code assumes that the objects in the array are instances of `HashMap<String, String>`. If you are using a different type of object, you will need to adjust the casting and method calls accordingly.