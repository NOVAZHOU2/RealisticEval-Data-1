Certainly! Here is the JavaScript Jest test case converted to TypeScript, using Jest's `describe` and `test` functions:

```typescript
import { sortByKey } from './path/to/sortByKey'; // Import the sortByKey function

describe('sortByKey function', () => {
    test('should return an empty array when input is empty', () => {
        const result = sortByKey([], 'name');
        expect(result).toEqual([]);
    });

    test('should correctly handle an array with a single element', () => {
        const singleElementArray = [{ name: 'Apple' }];
        expect(sortByKey(singleElementArray, 'name')).toEqual([{ name: 'Apple' }]);
    });

    test('should sort an array of objects by the specified key', () => {
        const testData = [
            { name: 'banana' },
            { name: 'apple' },
            { name: 'orange' }
        ];
        const expected = [
            { name: 'apple' },
            { name: 'banana' },
            { name: 'orange' }
        ];
        expect(sortByKey(testData, 'name')).toEqual(expected);
    });

    test('should perform case-insensitive sorting', () => {
        const mixedCaseArray = [
            { name: 'banana' },
            { name: 'Apple' },
            { name: 'orange' }
        ];
        const expected = [
            { name: 'Apple' },
            { name: 'banana' },
            { name: 'orange' }
        ];
        expect(sortByKey(mixedCaseArray, 'name')).toEqual(expected);
    });
});
```

### Explanation:
1. **Import Statement**: 
   - Added an import statement at the top to import the `sortByKey` function from its module.
   
2. **Type Annotations**:
   - The test cases themselves do not require explicit type annotations because TypeScript will infer the types from the data structures used.

3. **Test Cases**:
   - Each test case remains the same, but TypeScript will now provide type checking for the data structures used in the tests.

This setup ensures that the test cases are properly typed and that the `sortByKey` function is imported correctly. If you need any additional type annotations or further refinements, feel free to let me know!