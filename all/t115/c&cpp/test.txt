Certainly! Below is the equivalent C++ test case using Catch2, which is a popular C++ testing framework. I'll provide the complete setup including the `sortByKey` function and the test cases.

### C++ Code with Catch2 Test Cases

First, make sure you have Catch2 installed. You can include it via a header-only library or install it through your package manager.

Here’s the complete code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <string>
#include <algorithm>

// Define the Object struct
struct Object {
    std::string key;
    int value; // Example additional field
};

// Helper function to convert a string to lowercase
std::string toLower(const std::string& str) {
    std::string lowerStr = str;
    std::transform(lowerStr.begin(), lowerStr.end(), lowerStr.begin(), ::tolower);
    return lowerStr;
}

/**
 * Sorts a vector of objects alphabetically by a specified key.
 *
 * @param {std::vector<Object>&} array - The vector of objects to be sorted.
 * @param {std::string} key - The key in the objects to sort by.
 * @returns {std::vector<Object>} The sorted vector based on the specified key.
 */
std::vector<Object> sortByKey(std::vector<Object>& array, const std::string& key) {
    // Custom comparator function
    auto compareByKey = [&key](const Object& a, const Object& b) {
        // Retrieve the string values from each object by the key, converting to lowercase for case-insensitive comparison
        std::string valueA = toLower(a.key);
        std::string valueB = toLower(b.key);

        // Compare the values to determine the order
        return valueA < valueB;
    };

    // Sort the array using the custom comparator
    std::sort(array.begin(), array.end(), compareByKey);

    return array;
}

TEST_CASE("sortByKey function", "[sortByKey]") {
    SECTION("should return an empty array when input is empty") {
        std::vector<Object> emptyArray;
        std::vector<Object> result = sortByKey(emptyArray, "name");
        REQUIRE(result.empty());
    }

    SECTION("should correctly handle an array with a single element") {
        std::vector<Object> singleElementArray = {{"Apple", 1}};
        std::vector<Object> expectedResult = {{"Apple", 1}};
        std::vector<Object> result = sortByKey(singleElementArray, "name");
        REQUIRE(result == expectedResult);
    }

    SECTION("should sort an array of objects by the specified key") {
        std::vector<Object> testData = {
            {"banana", 1},
            {"apple", 2},
            {"orange", 3}
        };
        std::vector<Object> expected = {
            {"apple", 2},
            {"banana", 1},
            {"orange", 3}
        };
        std::vector<Object> result = sortByKey(testData, "name");
        REQUIRE(result == expected);
    }

    SECTION("should perform case-insensitive sorting") {
        std::vector<Object> mixedCaseArray = {
            {"banana", 1},
            {"Apple", 2},
            {"orange", 3}
        };
        std::vector<Object> expected = {
            {"Apple", 2},
            {"banana", 1},
            {"orange", 3}
        };
        std::vector<Object> result = sortByKey(mixedCaseArray, "name");
        REQUIRE(result == expected);
    }
}
```

### Explanation:
1. **Header Files**: Include the necessary headers (`catch2/catch_test_macros.hpp`, `vector`, `string`, `algorithm`).
2. **Struct Definition**: Define the `Object` struct with `key` and `value` fields.
3. **Helper Function**: Define a helper function `toLower` to convert strings to lowercase.
4. **Sort Function**: Implement the `sortByKey` function with a custom comparator.
5. **Test Cases**: Use Catch2 to define test cases within a `TEST_CASE` block with multiple `SECTION`s.

### Running the Tests
To run the tests, you can compile the code with Catch2 support. Here’s an example command using g++:

```sh
g++ -std=c++17 -o test_program test_program.cpp -lcatch2
./test_program
```

Make sure you have the Catch2 library available in your build environment or include it via a header-only library.

This setup ensures that the tests are structured similarly to Jest tests and cover the same scenarios.