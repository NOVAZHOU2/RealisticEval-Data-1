Here's the equivalent Catch2 test case for the C++ function based on the provided JavaScript Jest test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>
#include <string>
#include <algorithm>
#include <cctype>

// Assuming the Object is defined like this:
struct Object {
    std::string name;
};

// Function to sort by key (stub for the actual implementation)
std::vector<Object> sortByKey(std::vector<Object>& array, const std::string& key);

TEST_CASE("sortByKey function", "[sortByKey]") {
    SECTION("should return an empty array when input is empty") {
        std::vector<Object> result = sortByKey({}, "name");
        REQUIRE(result.empty());
    }

    SECTION("should correctly handle an array with a single element") {
        std::vector<Object> singleElementArray = { { "Apple" } };
        REQUIRE(sortByKey(singleElementArray, "name") == singleElementArray);
    }

    SECTION("should sort an array of objects by the specified key") {
        std::vector<Object> testData = {
            { "banana" },
            { "apple" },
            { "orange" }
        };
        std::vector<Object> expected = {
            { "apple" },
            { "banana" },
            { "orange" }
        };
        REQUIRE(sortByKey(testData, "name") == expected);
    }

    SECTION("should perform case-insensitive sorting") {
        std::vector<Object> mixedCaseArray = {
            { "banana" },
            { "Apple" },
            { "orange" }
        };
        std::vector<Object> expected = {
            { "Apple" },
            { "banana" },
            { "orange" }
        };
        REQUIRE(sortByKey(mixedCaseArray, "name") == expected);
    }
}
```

### Notes:
- Ensure that the `Object` structure matches your data structure in the actual C++ implementation.
- The `sortByKey` function is a stub; you will need to implement it in your C++ code.
- This code uses the Catch2 testing framework, which you should have set up in your project.