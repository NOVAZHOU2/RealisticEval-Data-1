Sure! Here is the equivalent C++ code for sorting an array of objects (represented as a vector of structs) by a specified key:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

// Define a structure for the objects
struct Object {
    std::string key;
    int value; // Example additional field
};

// Function to sort the array of objects by a specified key
std::vector<Object> sortByKey(std::vector<Object>& array, const std::string& key) {
    // Custom comparator function
    auto compareByKey = [&key](const Object& a, const Object& b) {
        // Retrieve the string values from each object by the key, converting to lowercase for case-insensitive comparison
        std::string valueA = (a.key == key ? a.value : 0).toString().toLowerCase();
        std::string valueB = (b.key == key ? b.value : 0).toString().toLowerCase();

        // Compare the values to determine the order
        return valueA < valueB;
    };

    // Sort the array using the custom comparator
    std::sort(array.begin(), array.end(), compareByKey);

    return array;
}

int main() {
    // Example usage
    std::vector<Object> array = {
        {"apple", 1},
        {"Banana", 2},
        {"cherry", 3}
    };

    std::string key = "key";
    std::vector<Object> sortedArray = sortByKey(array, key);

    // Print the sorted array
    for (const auto& obj : sortedArray) {
        std::cout << obj.key << ": " << obj.value << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Struct Definition**: We define a `struct Object` with two fields: `key` and `value`.
2. **Comparator Function**: We create a lambda function `compareByKey` that compares two `Object` instances based on the specified key.
3. **Sorting**: We use `std::sort` with the custom comparator to sort the vector.
4. **Example Usage**: In the `main` function, we demonstrate how to use the `sortByKey` function.

Note: The example assumes that the `key` field is a string. If you need to handle different types or more complex structures, you may need to adjust the comparison logic accordingly.