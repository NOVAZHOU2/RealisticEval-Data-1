Here is the equivalent C++ code:

```c++
#include <iostream>

int mod_exp(int base, int exponent, int modulus) {
    if (modulus == 1)
        return 0;
    
    int result = 1;

    base = base % modulus;

    while (exponent > 0) {
        if (exponent & 1)
            result = (result * base) % modulus;

        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }

    return result;
}

int main() {
    std::cout << mod_exp(2, 3, 5);
    return 0;
}
```

And here is the equivalent C code:

```c
#include <stdio.h>

int mod_exp(int base, int exponent, int modulus) {
    if (modulus == 1)
        return 0;
    
    int result = 1;

    base = base % modulus;

    while (exponent > 0) {
        if (exponent & 1)
            result = (result * base) % modulus;

        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }

    return result;
}

int main() {
    printf("%d", mod_exp(2, 3, 5));
    return 0;
}
```
Both versions use the method known as "Exponentiation by Squaring" which allows them to calculate `(base^exponent) % modulus` in logarithmic time complexity.