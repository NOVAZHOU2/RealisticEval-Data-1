Sure! Below is the equivalent C++ test case using Catch2 for the provided Python `unittest` function:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <iostream>

// Function to perform modular exponentiation
int mod_exp(int base, int exponent, int modulus) {
    if (modulus == 1)
        return 0;
    long long result = 1;
    base = base % modulus;
    while (exponent > 0) {
        if (exponent & 1)
            result = (result * base) % modulus;
        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }
    return result;
}

TEST_CASE("Modular Exponentiation", "[mod_exp]") {
    REQUIRE(mod_exp(3, 5, 13) == 5);
    REQUIRE(mod_exp(7, 2, 13) == 10);
    REQUIRE(mod_exp(5, 3, 13) == 8);
    REQUIRE(mod_exp(4, 13, 101) == 64);
    REQUIRE(mod_exp(10, 0, 101) == 1);
    REQUIRE(mod_exp(2, 100, 101) == 1);
}
```

### Explanation:
1. **Include Catch2 Header**: We include the Catch2 header file which provides the testing framework.
2. **Function Definition**: The `mod_exp` function is defined in C++ and performs modular exponentiation similar to the Python version.
3. **Test Case**: We define a test case using the `TEST_CASE` macro from Catch2. This macro takes two arguments: the name of the test case and a tag that can be used to group tests.
4. **Assertions**: We use the `REQUIRE` macro to assert that the output of `mod_exp` matches the expected results.

To run these tests, you need to have Catch2 installed and set up in your project. If you're using a CMake-based project, you can add the following lines to your `CMakeLists.txt`:

```cmake
find_package(Catch2 REQUIRED)

add_executable(test_mod_exp test_mod_exp.cpp)
target_link_libraries(test_mod_exp Catch2::Catch2WithMain)
```

This will compile and link the test executable with Catch2, allowing you to run the tests using a command like `./test_mod_exp`.