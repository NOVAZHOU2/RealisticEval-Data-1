Here is the equivalent TypeScript code:

```typescript
function modExp(base: number, exponent: number, modulus: number): number {
    /**
     * Perform modular exponentiation: (base^exponent) % modulus efficiently.
     *
     * @param {number} base - The base value.
     * @param {number} exponent - The exponent value (should be non-negative).
     * @param {number} modulus - The modulus value (should be positive).
     * 
     * @returns {number} - The result of (base^exponent) % modulus.
     */
    
    if (modulus <= 0 || !Number.isInteger(modulus)) {
        throw new Error('Modulus must be a positive integer');
    }

    if (exponent < 0 || !Number.isInteger(exponent)) {
        throw new Error('Exponent must be a non-negative integer');
    }

    let result = 1;
    base = base % modulus;

    while (exponent > 0) {
        if (exponent % 2 === 1) {
            result = (result * base) % modulus;
        }
        exponent = Math.floor(exponent / 2);
        base = (base * base) % modulus;
    }

    return result;
}
```

This TypeScript function `modExp` performs the same operation as your Python function `mod_exp`. It uses the method known as "exponentiation by squaring" for efficient computation. This algorithm reduces the time complexity from O(n) to O(log n). Also, it checks if the input values are valid before performing the calculation.