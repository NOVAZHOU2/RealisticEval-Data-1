Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function modExp(base: number, exponent: number, modulus: number): number {
    if (modulus <= 0) {
        throw new Error("Modulus must be a positive integer.");
    }

    let result = 1;
    base = base % modulus;  // Ensure base is within the modulus

    while (exponent > 0) {
        // If exponent is odd, multiply the base with the result
        if (exponent % 2 === 1) {
            result = (result * base) % modulus;
        }

        // Right shift the exponent by 1 (equivalent to exponent //= 2)
        exponent = Math.floor(exponent / 2);
        // Square the base
        base = (base * base) % modulus;
    }

    return result;
}
```

### Explanation:
1. **Function Definition**: The function `modExp` is defined with explicit types for the parameters (`base`, `exponent`, and `modulus`) and the return type (`number`).

2. **Error Handling**: The function checks if the modulus is less than or equal to zero and throws an error if so. In TypeScript, we use `throw new Error` instead of raising a `ValueError`.

3. **Initialization**: The variables `result` and `base` are initialized similarly to the Python code.

4. **Loop**: The loop continues until the exponent is greater than zero. Inside the loop:
   - If the exponent is odd, the result is updated by multiplying it with the base and taking modulo `modulus`.
   - The exponent is right-shifted by 1 using `Math.floor(exponent / 2)` (equivalent to `exponent //= 2` in Python).
   - The base is squared and taken modulo `modulus`.

5. **Return Value**: The final result is returned.

This TypeScript code maintains the same functionality, structure, and logic as the original Python code.