Sure! Below is the equivalent TypeScript test case using Jest for the provided Python function `mod_exp`. Note that TypeScript does not have built-in support for modular exponentiation in the same way Python does with the `**` operator and `%` operator, so we'll need to implement it manually or use an existing library.

First, let's define the `mod_exp` function in TypeScript:

```typescript
function modExp(base: number, exponent: number, modulus: number): number {
    if (modulus <= 0) throw new Error("Modulus must be positive");
    if (exponent < 0) throw new Error("Exponent must be non-negative");

    let result = 1;
    base = base % modulus;

    while (exponent > 0) {
        if (exponent % 2 === 1) {
            result = (result * base) % modulus;
        }
        exponent = Math.floor(exponent / 2);
        base = (base * base) % modulus;
    }

    return result;
}
```

Now, let's write the Jest test cases for this function:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('modExp', () => {
    it('should calculate (base^exponent) % modulus correctly', () => {
        expect(modExp(2, 3, 5)).toBe(3);
        expect(modExp(5, 117, 19)).toBe(1);
        expect(modExp(1, 0, 101)).toBe(1);
        expect(modExp(2, 10, 11)).toBe(1);
        expect(modExp(7, 2, 5)).toBe(4);
    });

    it('should handle edge cases', () => {
        expect(() => modExp(2, -1, 5)).toThrowError("Exponent must be non-negative");
        expect(() => modExp(2, 3, 0)).toThrowError("Modulus must be positive");
    });
});
```

In this TypeScript code:
- We import the necessary functions from Jest (`describe`, `it`, `expect`).
- We define a `describe` block to group our tests together.
- Inside the `describe` block, we define two `it` blocks: one for testing the main functionality and another for testing edge cases.
- We use `expect` to assert that the output of `modExp` matches the expected results.
- We also use `expect(() => ...).toThrowError` to check that the function throws an error when given invalid input.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run the tests using the following command:

```sh
npx jest
# or
yarn jest
```

This will execute the test cases and provide you with the results.