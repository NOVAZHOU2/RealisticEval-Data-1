Certainly! Here is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Perform modular exponentiation: (base^exponent) % modulus efficiently.
 *
 * @param base - The base value.
 * @param exponent - The exponent value (should be non-negative).
 * @param modulus - The modulus value (should be positive).
 * @returns The result of (base^exponent) % modulus.
 * @throws {Error} If modulus is less than or equal to zero.
 */
function modExp(base: number, exponent: number, modulus: number): number {
    if (modulus <= 0) {
        throw new Error("Modulus must be a positive integer.");
    }

    let result = 1;
    base = base % modulus;  // Ensure base is within the modulus

    while (exponent > 0) {
        // If exponent is odd, multiply the base with the result
        if (exponent % 2 === 1) {
            result = (result * base) % modulus;
        }

        // Right shift the exponent by 1 (equivalent to exponent //= 2)
        exponent = Math.floor(exponent / 2);
        // Square the base
        base = (base * base) % modulus;
    }

    return result;
}
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc comment block is used to provide detailed documentation for the function.
   - It includes descriptions for each parameter (`@param`), the return type (`@returns`), and any exceptions thrown (`@throws`).

2. **Function Signature**:
   - The function signature `modExp` is defined with explicit types for the parameters (`base`, `exponent`, and `modulus`) and the return type (`number`).

3. **Error Handling**:
   - The function checks if the modulus is less than or equal to zero and throws an `Error` if so.

4. **Initialization**:
   - The variables `result` and `base` are initialized similarly to the Python code.

5. **Loop**:
   - The loop continues until the exponent is greater than zero.
   - Inside the loop:
     - If the exponent is odd, the result is updated by multiplying it with the base and taking modulo `modulus`.
     - The exponent is right-shifted by 1 using `Math.floor(exponent / 2)` (equivalent to `exponent //= 2` in Python).
     - The base is squared and taken modulo `modulus`.

6. **Return Value**:
   - The final result is returned.

This TypeScript code preserves the original functionality, structure, and documentation from the Python code.