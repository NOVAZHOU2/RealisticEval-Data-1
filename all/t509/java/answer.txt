Sure! Below is the equivalent Java code for the provided Python function `mod_exp`. The Java class is named `Answer` and it's placed in the package `org.real.temp`.

```java
package org.real.temp;

public class Answer {
    /**
     * Perform modular exponentiation: (base^exponent) % modulus efficiently.
     *
     * @param base      the base value
     * @param exponent  the exponent value (should be non-negative)
     * @param modulus   the modulus value (should be positive)
     * @return          the result of (base^exponent) % modulus
     */
    public static int modExp(int base, int exponent, int modulus) {
        if (modulus == 1) return 0;
        long result = 1;
        base = base % modulus;
        while (exponent > 0) {
            if ((exponent & 1) == 1) { // If exponent is odd, multiply base with result
                result = (result * base) % modulus;
            }
            exponent = exponent >> 1; // Divide exponent by 2
            base = (base * base) % modulus;
        }
        return (int) result;
    }

    public static void main(String[] args) {
        // Example usage
        int base = 3;
        int exponent = 5;
        int modulus = 13;
        System.out.println("Result of (" + base + "^" + exponent + ") % " + modulus + " is: " + modExp(base, exponent, modulus));
    }
}
```

### Explanation:
1. **Package Declaration**: The `package org.real.temp;` line specifies the package where the class `Answer` will reside.
2. **Class Definition**: The `public class Answer` defines the class that contains the `modExp` method.
3. **Method Signature**: The `public static int modExp(int base, int exponent, int modulus)` method performs the modular exponentiation using an efficient algorithm (Exponentiation by Squaring).
4. **Example Usage**: The `main` method demonstrates how to use the `modExp` method.

This Java code should work similarly to the original Python function, performing modular exponentiation efficiently.