Certainly! Here is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Perform modular exponentiation: (base^exponent) % modulus efficiently.
 *
 * @param {number} base - The base value.
 * @param {number} exponent - The exponent value (should be non-negative).
 * @param {number} modulus - The modulus value (should be positive).
 * @returns {number} The result of (base^exponent) % modulus.
 */
function modExp(base, exponent, modulus) {
    if (modulus <= 0) {
        throw new Error("Modulus must be a positive integer.");
    }

    let result = 1;
    base = base % modulus;  // Ensure base is within the modulus

    while (exponent > 0) {
        // If exponent is odd, multiply the base with the result
        if (exponent % 2 === 1) {
            result = (result * base) % modulus;
        }

        // Right shift the exponent by 1 (equivalent to exponent >>= 1)
        exponent >>= 1;
        // Square the base
        base = (base * base) % modulus;
    }

    return result;
}
```

### Explanation:
1. **JSDoc Comments**: The Python docstring has been converted to JSDoc comments, which are commonly used in JavaScript for documenting functions.
2. **Function Signature**: The Python function signature `def mod_exp(base:int, exponent:int, modulus:int) -> int:` has been translated to a JavaScript function signature with parameter types annotated in the JSDoc comment.
3. **Error Handling**: The error handling for the modulus being non-positive is preserved.
4. **Logic**: The core logic of the function remains the same, including the use of bitwise operations (`>>=`) and modular arithmetic (`%`).

This ensures that the JavaScript code maintains the same functionality, structure, and documentation as the original Python code.