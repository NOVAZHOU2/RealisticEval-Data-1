To convert the given Python `unittest` test class into a JavaScript test case using Jest, you can follow these steps:

1. Install Jest if you haven't already. You can do this using npm:
   ```sh
   npm install --save-dev jest
   ```

2. Create a new JavaScript file for your tests, e.g., `modExp.test.js`.

3. Write the JavaScript test cases using Jest syntax.

Here's an example of how you might write the test cases for the `mod_exp` function in JavaScript using Jest:

```javascript
// modExp.test.js

const { mod_exp } = require('./path-to-your-mod-exp-function'); // Adjust the path accordingly

describe('mod_exp', () => {
  it('should compute (base^exponent) % modulus correctly', () => {
    expect(mod_exp(2, 3, 5)).toBe(3);
    expect(mod_exp(7, 2, 5)).toBe(4);
    expect(mod_exp(5, 0, 13)).toBe(1);
    expect(mod_exp(3, 10, 17)).toBe(15);
    expect(mod_exp(2, 100, 101)).toBe(1);
  });

  it('should handle edge cases', () => {
    expect(() => mod_exp(2, -1, 5)).toThrowError('Exponent should be non-negative');
    expect(() => mod_exp(2, 3, 0)).toThrowError('Modulus should be positive');
  });
});
```

### Explanation:

- **`describe`**: This block groups related test cases together. In this case, all tests for the `mod_exp` function are grouped under the `mod_exp` describe block.
  
- **`it`**: Each `it` block represents a single test case. The first argument is a string describing what the test does, and the second argument is a function that contains the actual test logic.

- **`expect`**: This function is used to assert that the result of calling `mod_exp` matches the expected value. If the assertion fails, Jest will report the failure.

- **`toThrowError`**: This matcher checks if the function throws an error with the specified message when called with invalid arguments.

Make sure to adjust the import statement (`require('./path-to-your-mod-exp-function')`) to point to the correct location of your `mod_exp` function implementation.

After writing your test cases, you can run them using the following command:

```sh
npx jest
```

This will execute all the tests in your project and provide you with the results.