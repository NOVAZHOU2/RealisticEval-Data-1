Certainly! Hereâ€™s the equivalent Jest test suite in TypeScript for the provided Python unittest class. The test cases will be converted to Jest assertions, and the necessary type annotations will be included.

### TypeScript Code with Jest Tests

```typescript
import { topologicalSortDFS } from './topologicalSortDFS'; // Import the topologicalSortDFS function

describe('TestTopologicalSortDFS', () => {
    it('test_simple_chain', () => {
        const vertices = [1, 2, 3];
        const edges = [[1, 2], [2, 3]];
        expect(topologicalSortDFS(vertices, edges)).toEqual([1, 2, 3]);
    });

    it('test_disconnected_graph', () => {
        const vertices = [1, 2, 3, 4];
        const edges = [[1, 2]];
        const result = topologicalSortDFS(vertices, edges);
        expect(result.indexOf(1)).toBeLessThan(result.indexOf(2));
        expect(result).toContain(3);
        expect(result).toContain(4);
    });

    it('test_complex_graph', () => {
        const vertices = [1, 2, 3, 4, 5, 6];
        const edges = [
            [1, 2],
            [1, 3],
            [2, 4],
            [3, 4],
            [4, 5],
            [6, 1]
        ];
        const result = topologicalSortDFS(vertices, edges);
        expect(result.indexOf(1)).toBeLessThan(result.indexOf(2));
        expect(result.indexOf(1)).toBeLessThan(result.indexOf(3));
        expect(result.indexOf(2)).toBeLessThan(result.indexOf(4));
        expect(result.indexOf(3)).toBeLessThan(result.indexOf(4));
        expect(result.indexOf(4)).toBeLessThan(result.indexOf(5));
        expect(result.indexOf(6)).toBeLessThan(result.indexOf(1));
    });

    it('test_single_vertex', () => {
        const vertices = [1];
        const edges = [];
        expect(topologicalSortDFS(vertices, edges)).toEqual([1]);
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `topologicalSortDFS` function is imported from the appropriate module.

2. **Test Suite Description**:
   - The `describe` block sets up the test suite named `TestTopologicalSortDFS`.

3. **Test Cases**:
   - Each test case is defined using the `it` block, which takes a description and a test function.
   - The test functions use Jest assertions to verify the expected behavior of the `topologicalSortDFS` function.

4. **Assertions**:
   - `expect` is used to make assertions about the results of the function.
   - `toEqual` is used to check if the result matches an expected array.
   - `toContain` is used to check if an array contains a specific element.
   - `toBeLessThan` is used to check if one index is less than another.

### Example Test Cases:
1. **Simple Chain**:
   - Verifies that the topological sort of a simple chain `[1, 2, 3]` produces the expected result `[1, 2, 3]`.

2. **Disconnected Graph**:
   - Verifies that the topological sort of a disconnected graph `[1, 2, 3, 4]` with a single edge `[1, 2]` produces a result where `1` comes before `2`, and `3` and `4` are included.

3. **Complex Graph**:
   - Verifies that the topological sort of a complex graph `[1, 2, 3, 4, 5, 6]` with multiple edges produces a result where the order constraints are satisfied.

4. **Single Vertex**:
   - Verifies that the topological sort of a single vertex `[1]` produces the expected result `[1]`.

This TypeScript code with Jest tests ensures that the functionality and logic of the original Python unittest class are preserved, with appropriate adjustments for Jest assertions and TypeScript syntax.