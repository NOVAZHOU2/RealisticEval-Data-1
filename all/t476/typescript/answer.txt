Hereâ€™s the equivalent TypeScript code for the provided Python code:

```typescript
function topologicalSortDFS(vertices: number[], edges: [number, number][]): number[] {
    const graph = new Map<number, number[]>();
    const visited = new Set<number>();
    const result: number[] = []; // Use an array to store the result

    // Build the graph
    edges.forEach(([u, v]) => {
        if (!graph.has(u)) {
            graph.set(u, []);
        }
        graph.get(u)!.push(v);
    });

    // Recursive depth-first search function
    function dfs(node: number) {
        if (visited.has(node)) {
            return;
        }
        visited.add(node);

        const neighbors = graph.get(node);
        if (neighbors) {
            neighbors.forEach(neighbor => {
                if (!visited.has(neighbor)) {
                    dfs(neighbor);
                }
            });
        }

        result.unshift(node); // Add the node to the front of the result array
    }

    // Traverse all nodes
    vertices.forEach(vertex => {
        if (!visited.has(vertex)) {
            dfs(vertex);
        }
    });

    return result;
}
```

### Explanation:
1. **Graph Representation**: The `graph` is represented using a `Map` where keys are vertices and values are arrays of neighboring vertices.
2. **Visited Set**: The `visited` set keeps track of visited vertices.
3. **Result Array**: The `result` array stores the topologically sorted vertices. In TypeScript, we use an array instead of a deque, and we prepend elements to it using `unshift`.
4. **Depth-First Search Function (`dfs`)**: This function performs a depth-first search recursively. It marks a vertex as visited and then explores its neighbors. After exploring all neighbors, it adds the current vertex to the result array.
5. **Traversal of All Vertices**: We iterate over all vertices and call the `dfs` function on unvisited vertices.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate adjustments for TypeScript's syntax and standard library.