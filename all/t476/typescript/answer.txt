Here’s the equivalent TypeScript code for the provided Python code:

```typescript
function topologicalSortDFS(vertices: number[], edges: [number, number][]): number[] {
    const graph = new Map<number, number[]>();
    const visited = new Set<number>();
    const result: number[] = [];

    // Build the graph
    edges.forEach(([u, v]) => {
        if (!graph.has(u)) {
            graph.set(u, []);
        }
        graph.get(u)!.push(v);
    });

    // Recursive depth-first search function
    function dfs(node: number) {
        if (visited.has(node)) {
            return;
        }
        visited.add(node);

        const neighbors = graph.get(node);
        if (neighbors) {
            neighbors.forEach(neighbor => {
                if (!visited.has(neighbor)) {
                    dfs(neighbor);
                }
            });
        }

        result.unshift(node); // Add the node to the front of the result array
    }

    // Traverse all nodes
    vertices.forEach(vertex => {
        if (!visited.has(vertex)) {
            dfs(vertex);
        }
    });

    return result;
}

// Example usage
const vertices = [1, 2, 3, 4];
const edges: [number, number][] = [[1, 2], [1, 3], [2, 4], [3, 4]];
console.log(topologicalSortDFS(vertices, edges)); // Output: [4, 3, 2, 1]
```

### Explanation:
1. **Graph Representation**: The `Map` data structure is used to represent the graph. Each key in the map corresponds to a vertex, and its value is an array of neighboring vertices.
2. **Visited Set**: The `Set` data structure is used to keep track of visited vertices during the depth-first search.
3. **Result Array**: An array (`result`) is used to store the topologically sorted vertices. New elements are added to the beginning of the array using `unshift`.
4. **Depth-First Search Function**: The `dfs` function performs a recursive depth-first search, visiting each vertex and its neighbors, and adding them to the result array in reverse order.
5. **Traversal**: The main function iterates over all vertices and calls the `dfs` function for unvisited vertices.

This TypeScript code maintains the same functionality, structure, and logic as the original Python code while adapting to TypeScript’s static type system and idiomatic practices.