Certainly! Hereâ€™s the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Achieves topological sorting based on depth-first search.
 *
 * @param vertices - A list of vertices in the graph. Each vertex should be a unique integer.
 * @param edges - A list of tuples where each tuple represents a directed edge in the graph,
 *                formed as (start_vertex, end_vertex).
 * @returns A list of vertices in topological order. If the graph contains a cycle,
 *          and thus cannot have a valid topological ordering, an empty list is returned.
 */
function topologicalSortDFS(vertices: number[], edges: [number, number][]): number[] {
    const graph = new Map<number, number[]>();
    const visited = new Set<number>();
    const result: number[] = []; // Use an array to store the result

    // Build the graph
    edges.forEach(([u, v]) => {
        if (!graph.has(u)) {
            graph.set(u, []);
        }
        graph.get(u)!.push(v);
    });

    // Recursive depth-first search function
    function dfs(node: number) {
        if (visited.has(node)) {
            return;
        }
        visited.add(node);

        const neighbors = graph.get(node);
        if (neighbors) {
            neighbors.forEach(neighbor => {
                if (!visited.has(neighbor)) {
                    dfs(neighbor);
                }
            });
        }

        result.unshift(node); // Add the node to the front of the result array
    }

    // Traverse all nodes
    vertices.forEach(vertex => {
        if (!visited.has(vertex)) {
            dfs(vertex);
        }
    });

    return result;
}
```

### Explanation:
1. **Function Signature**:
   - The function signature includes JSDoc comments that describe the parameters and return type.
   - The parameter types are explicitly defined: `vertices` as `number[]` and `edges` as `[number, number][]`.

2. **Graph Representation**:
   - The `graph` is represented using a `Map<number, number[]>`, where keys are vertices and values are arrays of neighboring vertices.

3. **Visited Set**:
   - The `visited` set keeps track of visited vertices.

4. **Result Array**:
   - The `result` array stores the topologically sorted vertices. Elements are prepended to the array using `unshift`.

5. **Depth-First Search Function (`dfs`)**:
   - This function performs a depth-first search recursively. It marks a vertex as visited and then explores its neighbors. After exploring all neighbors, it adds the current vertex to the result array.

6. **Traversal of All Vertices**:
   - We iterate over all vertices and call the `dfs` function on unvisited vertices.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate adjustments for TypeScript syntax and conventions.