Certainly! Below is the equivalent C++ code for the provided Python function, including the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <deque>
#include <set>

// Function to perform topological sorting based on depth-first search
/**
 * Achieve topological sorting based on depth-first search.
 *
 * @param vertices A vector of vertices in the graph. Each vertex should be a unique integer.
 * @param edges A vector of pairs where each pair represents a directed edge in the graph
 *              and is formed as (start_vertex, end_vertex).
 *
 * @return A vector of vertices in topological order. If the graph contains a cycle,
 *         and thus cannot have a valid topological ordering, an empty vector is returned.
 */
std::vector<int> topological_sort_dfs(const std::vector<int>& vertices, const std::vector<std::pair<int, int>>& edges) {
    std::unordered_map<int, std::vector<int>> graph;
    std::set<int> visited;
    std::deque<int> result;

    // Build the graph
    for (const auto& edge : edges) {
        graph[edge.first].push_back(edge.second);
    }

    // Recursive depth-first search function
    void dfs(int node) {
        if (visited.find(node) != visited.end()) {
            return;
        }
        visited.insert(node);
        for (int neighbor : graph[node]) {
            if (visited.find(neighbor) == visited.end()) {
                dfs(neighbor);
            }
        }
        result.push_front(node);  // Add the node to the front of the result deque
    }

    // Traverse all nodes
    for (int vertex : vertices) {
        if (visited.find(vertex) == visited.end()) {
            dfs(vertex);
        }
    }

    return std::vector<int>(result.begin(), result.end());
}

int main() {
    // Example usage
    std::vector<int> vertices = {0, 1, 2, 3, 4};
    std::vector<std::pair<int, int>> edges = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};

    std::vector<int> sortedVertices = topological_sort_dfs(vertices, edges);

    // Print the sorted vertices
    for (int vertex : sortedVertices) {
        std::cout << vertex << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The function `topological_sort_dfs` takes two parameters: `vertices` (a vector of integers) and `edges` (a vector of pairs representing directed edges).
   - It returns a vector of integers representing the topological order.

2. **Documentation Comments**:
   - Multi-line comments (`/* ... */`) are used to document the function, parameters, and return values.
   - Single-line comments (`//`) are used for inline comments within the code.

3. **Data Structures**:
   - An `unordered_map` is used to represent the graph.
   - A `set` is used to track visited nodes.
   - A `deque` is used to store the result in reverse order.

4. **Recursive DFS Function**:
   - The `dfs` function is defined within the main function and performs the depth-first search recursively.

5. **Traversal**:
   - All vertices are traversed to ensure all components are considered.

6. **Result Conversion**:
   - The final result is converted from a `deque` to a `vector` before returning.

This C++ code preserves the original functionality and structure of the Python code while adhering to C++ syntax and documentation standards.