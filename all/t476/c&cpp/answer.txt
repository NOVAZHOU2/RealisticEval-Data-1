Sure! Below is the equivalent C++ code for the provided Python code. The code implements a topological sort using depth-first search (DFS). I'll ensure that the functionality, logic, and structure remain consistent while adapting to the syntax and features of C++.

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <deque>
#include <set>

// Function to perform topological sorting based on depth-first search
std::vector<int> topological_sort_dfs(const std::vector<int>& vertices, const std::vector<std::pair<int, int>>& edges) {
    std::unordered_map<int, std::vector<int>> graph;
    std::set<int> visited;
    std::deque<int> result;

    // Build the graph
    for (const auto& edge : edges) {
        graph[edge.first].push_back(edge.second);
    }

    // Recursive depth-first search function
    void dfs(int node) {
        if (visited.find(node) != visited.end()) {
            return;
        }
        visited.insert(node);
        for (int neighbor : graph[node]) {
            if (visited.find(neighbor) == visited.end()) {
                dfs(neighbor);
            }
        }
        result.push_front(node);  // Add the node to the front of the result deque
    }

    // Traverse all nodes
    for (int vertex : vertices) {
        if (visited.find(vertex) == visited.end()) {
            dfs(vertex);
        }
    }

    return std::vector<int>(result.begin(), result.end());
}

int main() {
    // Example usage
    std::vector<int> vertices = {0, 1, 2, 3, 4};
    std::vector<std::pair<int, int>> edges = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};

    std::vector<int> sortedVertices = topological_sort_dfs(vertices, edges);

    // Print the sorted vertices
    for (int vertex : sortedVertices) {
        std::cout << vertex << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Graph Representation**: The graph is represented using an `unordered_map` where each key is a vertex and the value is a vector of its neighbors.
2. **Visited Set**: A `set` is used to keep track of visited nodes during the DFS traversal.
3. **Result Storage**: A `deque` is used to store the result in reverse order (front insertion).
4. **DFS Function**: A recursive function `dfs` is defined to perform the depth-first search.
5. **Traversal**: All vertices are traversed to ensure all components are considered.
6. **Return Type**: The final result is converted from a `deque` to a `vector` before returning.

This C++ code maintains the same functionality and logic as the original Python code.