Sure! Below is the equivalent C++ code for the given Python code. The C++ version will maintain the same functionality, logic, and structure as the original Python code.

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <deque>

using namespace std;

// Function to perform depth-first search
void dfs(int node, const unordered_map<int, vector<int>>& graph, unordered_set<int>& visited, deque<int>& result) {
    if (visited.find(node) != visited.end()) {
        return;
    }
    visited.insert(node);
    for (int neighbor : graph.at(node)) {
        if (visited.find(neighbor) == visited.end()) {
            dfs(neighbor, graph, visited, result);
        }
    }
    result.push_front(node);  // Add node to the front of the deque
}

// Function to perform topological sort using DFS
vector<int> topological_sort_dfs(const vector<int>& vertices, const vector<pair<int, int>>& edges) {
    unordered_map<int, vector<int>> graph;
    unordered_set<int> visited;
    deque<int> result;

    // Build the graph
    for (const auto& edge : edges) {
        graph[edge.first].push_back(edge.second);
    }

    // Traverse all nodes
    for (int vertex : vertices) {
        if (visited.find(vertex) == visited.end()) {
            dfs(vertex, graph, visited, result);
        }
    }

    return vector<int>(result.begin(), result.end());
}

int main() {
    // Example usage
    vector<int> vertices = {0, 1, 2, 3, 4};
    vector<pair<int, int>> edges = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};

    vector<int> sorted_vertices = topological_sort_dfs(vertices, edges);

    // Print the result
    for (int vertex : sorted_vertices) {
        cout << vertex << " ";
    }
    cout << endl;

    return 0;
}
```

### Explanation:
- **Data Structures**:
  - `unordered_map` is used to represent the graph, similar to the `defaultdict(list)` in Python.
  - `unordered_set` is used to track visited nodes, similar to the `set` in Python.
  - `deque` is used to store the result, similar to the `deque` in Python.

- **DFS Function**:
  - The `dfs` function performs a depth-first search recursively.
  - It marks nodes as visited and adds them to the result deque in reverse order.

- **Topological Sort Function**:
  - The `topological_sort_dfs` function builds the graph and traverses all nodes using the `dfs` function.
  - It returns the result as a vector of integers.

- **Example Usage**:
  - In the `main` function, an example graph is defined with vertices and edges.
  - The `topological_sort_dfs` function is called with these inputs, and the sorted vertices are printed.