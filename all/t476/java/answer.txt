Below is the equivalent Java code for the provided Python code, organized within the package `org.real.temp` and the class `Answer`. The Java code maintains the same functionality, logic, and structure while adhering to Java's syntax and language features.

```java
package org.real.temp;

import java.util.*;

public class Answer {
    public static List<Integer> topologicalSortDFS(List<Integer> vertices, List<int[]> edges) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        Set<Integer> visited = new HashSet<>();
        Deque<Integer> result = new ArrayDeque<>();

        // Build the graph
        for (int[] edge : edges) {
            int start = edge[0];
            int end = edge[1];
            graph.computeIfAbsent(start, k -> new ArrayList<>()).add(end);
        }

        // Recursive depth-first search function
        class DFSHelper {
            void dfs(int node) {
                if (visited.contains(node)) {
                    return;
                }
                visited.add(node);
                List<Integer> neighbors = graph.getOrDefault(node, Collections.emptyList());
                for (int neighbor : neighbors) {
                    if (!visited.contains(neighbor)) {
                        dfs(neighbor);
                    }
                }
                result.addFirst(node);  // Add the node to the front of the result
            }
        }

        DFSHelper helper = new DFSHelper();

        // Traverse all nodes
        for (Integer vertex : vertices) {
            if (!visited.contains(vertex)) {
                helper.dfs(vertex);
            }
        }

        return new ArrayList<>(result);
    }

    public static void main(String[] args) {
        List<Integer> vertices = Arrays.asList(1, 2, 3, 4, 5);
        List<int[]> edges = Arrays.asList(
                new int[]{1, 2},
                new int[]{1, 3},
                new int[]{2, 4},
                new int[]{3, 4},
                new int[]{4, 5}
        );

        List<Integer> sortedVertices = topologicalSortDFS(vertices, edges);
        System.out.println(sortedVertices);
    }
}
```

### Explanation:
1. **Graph Representation**: The graph is represented using a `Map<Integer, List<Integer>>` where the key is a vertex and the value is a list of its neighbors.
2. **Visited Set**: A `HashSet<Integer>` is used to keep track of visited nodes during the depth-first search.
3. **Result**: An `ArrayDeque<Integer>` is used to store the result in reverse order (topological sort).
4. **Recursive DFS Helper Class**: A nested class `DFSHelper` is defined to perform the recursive depth-first search. This helps encapsulate the recursive logic and keeps the code organized.
5. **Main Method**: A simple `main` method is included to demonstrate how to call the `topologicalSortDFS` method and print the result.

This Java code preserves the functionality of the original Python code while adapting to Java's syntax and conventions.