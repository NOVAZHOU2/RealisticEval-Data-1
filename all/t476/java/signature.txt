Here's how you can translate the Python type hints into Java method signatures:

```java
import java.util.*;

public class TopologicalSort {

    /**
     * Achieve topological sorting, based on depth priority search
     *
     * @param vertices A list of vertices in the graph. Each vertex should be a unique integer.
     * @param edges    A list of tuples where each tuple represents a directed edge
     *                 in the graph and is formed as (startVertex, endVertex).
     * @return A list of vertices in topological order. If the graph contains a cycle,
     *         and thus cannot have a valid topological ordering, an empty list is returned.
     */
    public static List<Integer> topologicalSortDFS(List<Integer> vertices, List<List<Integer>> edges) {
        // Method implementation goes here...
    }
}
```

In Java, we use `List` instead of `List[int]`, `List[List[int]]` instead of `List[Tuple]`, and we don't have explicit function return types for parameters like in Python, so we just put them inside the parentheses after the method name. The method itself is declared with `static` keyword because it does not depend on any instance variables.