Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class is placed in the package `org.real.temp` and named `Tester`. It uses appropriate JUnit annotations and assertion methods to preserve the functionality and logic of the tests.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Deque;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collections;

public class Tester {

    private static final List<Integer> topologicalSortDFS(List<Integer> vertices, List<int[]> edges) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        Set<Integer> visited = new HashSet<>();
        Deque<Integer> result = new ArrayDeque<>();

        // Build the graph
        for (int[] edge : edges) {
            int start = edge[0];
            int end = edge[1];
            graph.computeIfAbsent(start, k -> new ArrayList<>()).add(end);
        }

        // Recursive depth-first search function
        class DFSHelper {
            void dfs(int node) {
                if (visited.contains(node)) {
                    return;
                }
                visited.add(node);
                List<Integer> neighbors = graph.getOrDefault(node, Collections.emptyList());
                for (int neighbor : neighbors) {
                    if (!visited.contains(neighbor)) {
                        dfs(neighbor);
                    }
                }
                result.addFirst(node);  // Add the node to the front of the result
            }
        }

        DFSHelper helper = new DFSHelper();

        // Traverse all nodes
        for (Integer vertex : vertices) {
            if (!visited.contains(vertex)) {
                helper.dfs(vertex);
            }
        }

        return new ArrayList<>(result);
    }

    @Test
    public void testSimpleChain() {
        List<Integer> vertices = Arrays.asList(1, 2, 3);
        List<int[]> edges = Arrays.asList(
                new int[]{1, 2},
                new int[]{2, 3}
        );
        assertEquals(Arrays.asList(1, 2, 3), topologicalSortDFS(vertices, edges));
    }

    @Test
    public void testDisconnectedGraph() {
        List<Integer> vertices = Arrays.asList(1, 2, 3, 4);
        List<int[]> edges = Arrays.asList(
                new int[]{1, 2}
        );
        List<Integer> result = topologicalSortDFS(vertices, edges);

        assertTrue(result.indexOf(1) < result.indexOf(2));
        assertTrue(result.contains(3) && result.contains(4));
    }

    @Test
    public void testComplexGraph() {
        List<Integer> vertices = Arrays.asList(1, 2, 3, 4, 5, 6);
        List<int[]> edges = Arrays.asList(
                new int[]{1, 2},
                new int[]{1, 3},
                new int[]{2, 4},
                new int[]{3, 4},
                new int[]{4, 5},
                new int[]{6, 1}
        );
        List<Integer> result = topologicalSortDFS(vertices, edges);

        assertTrue(result.indexOf(1) < result.indexOf(2));
        assertTrue(result.indexOf(1) < result.indexOf(3));
        assertTrue(result.indexOf(2) < result.indexOf(4));
        assertTrue(result.indexOf(3) < result.indexOf(4));
        assertTrue(result.indexOf(4) < result.indexOf(5));
        assertTrue(result.indexOf(6) < result.indexOf(1));
    }

    @Test
    public void testSingleVertex() {
        List<Integer> vertices = Arrays.asList(1);
        List<int[]> edges = new ArrayList<>();
        assertEquals(Arrays.asList(1), topologicalSortDFS(vertices, edges));
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.

2. **Class Definition**: The class `Tester` is defined with the necessary imports.

3. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.

4. **Static Method**: The `topologicalSortDFS` method is defined as a static method within the `Tester` class. This method performs the topological sort using depth-first search.

5. **Test Methods**:
   - **testSimpleChain**: Tests a simple chain of vertices and edges.
   - **testDisconnectedGraph**: Tests a disconnected graph with multiple possible correct answers.
   - **testComplexGraph**: Tests a complex graph with multiple dependencies.
   - **testSingleVertex**: Tests a single vertex with no edges.

6. **Assertions**:
   - `assertEquals` is used to check if the expected result matches the actual result.
   - `assertTrue` is used to verify conditions such as index comparisons and containment.

This Java code preserves the functionality and logic of the original Python unittest class while adhering to Java's syntax and conventions.