Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function topologicalSortDFS(vertices, edges) {
    /**
     * Achieve topological sorting based on depth-first search (DFS).
     *
     * @param {Array} vertices - An array of vertices in the graph. Each vertex should be a unique integer.
     * @param {Array} edges - An array of tuples where each tuple represents a directed edge
     *                        in the graph and is formed as [start_vertex, end_vertex].
     * @returns {Array} - An array of vertices in topological order. If the graph contains a cycle,
     *                    and thus cannot have a valid topological ordering, an empty array is returned.
     */

    const graph = new Map();
    const visited = new Set();
    const result = []; // Use an array to store the result

    // Build the graph
    edges.forEach(([u, v]) => {
        if (!graph.has(u)) {
            graph.set(u, []);
        }
        graph.get(u).push(v);
    });

    // Recursive depth-first search function
    function dfs(node) {
        if (visited.has(node)) {
            return;
        }
        visited.add(node);
        if (graph.has(node)) {
            graph.get(node).forEach(neighbor => {
                if (!visited.has(neighbor)) {
                    dfs(neighbor);
                }
            });
        }
        result.unshift(node); // Add the node to the front of the result array
    }

    // Traverse all nodes
    vertices.forEach(vertex => {
        if (!visited.has(vertex)) {
            dfs(vertex);
        }
    });

    return result;
}

// Example usage:
const vertices = [1, 2, 3, 4];
const edges = [[1, 2], [1, 3], [2, 4], [3, 4]];
console.log(topologicalSortDFS(vertices, edges));
```

### Explanation:
- **Graph Construction**: The `graph` is constructed using a `Map` object in JavaScript, which allows us to map vertices to arrays of their neighbors.
- **Visited Set**: The `visited` set tracks visited nodes.
- **Result Array**: The `result` array stores the final topological order. In JavaScript, we use `unshift` to prepend elements to the beginning of the array, which is equivalent to using `deque` with `appendleft` in Python.
- **Depth-First Search (DFS)**: The `dfs` function performs a recursive depth-first search, marking nodes as visited and adding them to the result array.

This JavaScript code should provide the same functionality as the Python code you provided.