Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Unittest Code

```python
import unittest

class TestTopologicalSortDFS(unittest.TestCase):
    def test_simple_chain(self):
        vertices = [1, 2, 3]
        edges = [(1, 2), (2, 3)]
        self.assertEqual(topological_sort_dfs(vertices, edges), [1, 2, 3])

    def test_disconnected_graph(self):
        vertices = [1, 2, 3, 4]
        edges = [(1, 2)]
        # There are multiple correct answers possible
        result = topological_sort_dfs(vertices, edges)
        self.assertTrue(result.index(1) < result.index(2))
        self.assertTrue(3 in result and 4 in result)

    def test_complex_graph(self):
        vertices = [1, 2, 3, 4, 5, 6]
        edges = [(1, 2), (1, 3), (2, 4), (3, 4), (4, 5), (6, 1)]
        result = topological_sort_dfs(vertices, edges)
        self.assertTrue(result.index(1) < result.index(2))
        self.assertTrue(result.index(1) < result.index(3))
        self.assertTrue(result.index(2) < result.index(4))
        self.assertTrue(result.index(3) < result.index(4))
        self.assertTrue(result.index(4) < result.index(5))
        self.assertTrue(result.index(6) < result.index(1))

    def test_single_vertex(self):
        vertices = [1]
        edges = []
        self.assertEqual(topological_sort_dfs(vertices, edges), [1])
```

### Equivalent Jest Test Suite

```javascript
const topologicalSortDFS = require('./topologicalSortDFS'); // Import the topologicalSortDFS function

describe('TestTopologicalSortDFS', () => {
    describe('test_simple_chain', () => {
        it('should sort a simple chain correctly', () => {
            const vertices = [1, 2, 3];
            const edges = [[1, 2], [2, 3]];
            expect(topologicalSortDFS(vertices, edges)).toEqual([1, 2, 3]);
        });
    });

    describe('test_disconnected_graph', () => {
        it('should handle a disconnected graph correctly', () => {
            const vertices = [1, 2, 3, 4];
            const edges = [[1, 2]];
            const result = topologicalSortDFS(vertices, edges);

            expect(result.indexOf(1)).toBeLessThan(result.indexOf(2));
            expect(result.includes(3) && result.includes(4)).toBeTruthy();
        });
    });

    describe('test_complex_graph', () => {
        it('should handle a complex graph correctly', () => {
            const vertices = [1, 2, 3, 4, 5, 6];
            const edges = [[1, 2], [1, 3], [2, 4], [3, 4], [4, 5], [6, 1]];
            const result = topologicalSortDFS(vertices, edges);

            expect(result.indexOf(1)).toBeLessThan(result.indexOf(2));
            expect(result.indexOf(1)).toBeLessThan(result.indexOf(3));
            expect(result.indexOf(2)).toBeLessThan(result.indexOf(4));
            expect(result.indexOf(3)).toBeLessThan(result.indexOf(4));
            expect(result.indexOf(4)).toBeLessThan(result.indexOf(5));
            expect(result.indexOf(6)).toBeLessThan(result.indexOf(1));
        });
    });

    describe('test_single_vertex', () => {
        it('should handle a single vertex correctly', () => {
            const vertices = [1];
            const edges = [];
            expect(topologicalSortDFS(vertices, edges)).toEqual([1]);
        });
    });
});
```

### Explanation:
1. **Import Statement**: The `topologicalSortDFS` function is imported at the beginning of the test file.
2. **Describe Blocks**: Each test case is wrapped in a `describe` block to group related tests together.
3. **It Blocks**: Each test case is defined within an `it` block, which provides a description of what the test does.
4. **Assertions**:
   - `expect(topologicalSortDFS(vertices, edges)).toEqual(expected)` is used to check equality.
   - `expect(result.indexOf(1)).toBeLessThan(result.indexOf(2))` is used to check the relative positions of elements.
   - `expect(result.includes(3) && result.includes(4)).toBeTruthy()` checks if the result includes specific elements.
5. **Structure**: The structure is kept clear and organized, with each test case clearly defined and documented.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adapting to Jest's syntax and conventions.