To convert the given Python `unittest` test class to a Jest test case using JavaScript, we need to follow these steps:

1. Define the function `topological_sort_dfs`.
2. Write Jest test cases that cover various scenarios, including a cyclic graph and a non-cyclic graph.

Here's how you can do it:

### Step 1: Define the Function

First, let's define the `topological_sort_dfs` function in JavaScript.

```javascript
function topologicalSortDFS(vertices, edges) {
    const adjList = new Map();
    const visited = new Set();
    const stack = [];

    // Initialize adjacency list
    for (const vertex of vertices) {
        adjList.set(vertex, []);
    }

    // Build adjacency list
    for (const [from, to] of edges) {
        adjList.get(from).push(to);
    }

    // DFS traversal
    function dfs(vertex) {
        if (!visited.has(vertex)) {
            visited.add(vertex);

            for (const neighbor of adjList.get(vertex)) {
                dfs(neighbor);
            }

            stack.push(vertex);
        }
    }

    // Perform DFS for all vertices
    for (const vertex of vertices) {
        dfs(vertex);
    }

    return stack.reverse();
}
```

### Step 2: Write Jest Test Cases

Next, let's write Jest test cases to verify the functionality of the `topologicalSortDFS` function.

```javascript
describe('Topological Sort DFS', () => {
    test('should return topological sort for a non-cyclic graph', () => {
        const vertices = [1, 2, 3, 4];
        const edges = [[1, 2], [1, 3], [2, 4], [3, 4]];
        const expected = [1, 3, 2, 4];
        expect(topologicalSortDFS(vertices, edges)).toEqual(expected);
    });

    test('should return an empty array for a cyclic graph', () => {
        const vertices = [1, 2, 3];
        const edges = [[1, 2], [2, 3], [3, 1]];
        const expected = [];
        expect(topologicalSortDFS(vertices, edges)).toEqual(expected);
    });
});
```

### Explanation

1. **Function Definition**:
   - The `topologicalSortDFS` function initializes an adjacency list and performs a depth-first search (DFS) to determine the topological order.
   - It uses a set to keep track of visited nodes and a stack to store the nodes in reverse topological order.

2. **Test Cases**:
   - The first test case checks if the function returns the correct topological order for a non-cyclic graph.
   - The second test case checks if the function returns an empty array for a cyclic graph, indicating that a valid topological ordering does not exist.

These test cases ensure that the `topologicalSortDFS` function works correctly for both cyclic and non-cyclic graphs.