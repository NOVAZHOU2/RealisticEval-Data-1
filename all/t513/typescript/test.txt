Certainly! Here is the equivalent Jest test class in TypeScript, ensuring that the functionality and logic of the tests are preserved. The Python unittest assertions are mapped to the appropriate Jest assertions.

### TypeScript Code

First, ensure you have Jest and the necessary TypeScript setup:

```sh
npm install --save-dev jest @types/jest ts-jest
npx jest --init
```

Then, create the TypeScript test file:

```typescript
import { isPhraseInStringIgnoreCase } from './your-function-file'; // Import your function

describe('isPhraseInStringIgnoreCase', () => {
    it('should match exact phrases case-insensitively', () => {
        expect(isPhraseInStringIgnoreCase("hello world", "Hello World")).toBe(true);
    });

    it('should match partial words case-insensitively', () => {
        expect(isPhraseInStringIgnoreCase("Hello", "saying Hello there")).toBe(true);
    });

    it('should match different cases', () => {
        expect(isPhraseInStringIgnoreCase("HELLO", "hello there!")).toBe(true);
        expect(isPhraseInStringIgnoreCase("world", "WORLD is great")).toBe(true);
    });

    it('should not match non-existent phrases', () => {
        expect(isPhraseInStringIgnoreCase("goodbye", "Hello world")).toBe(false);
        expect(isPhraseInStringIgnoreCase("hello", "goodbye world")).toBe(false);
    });
});
```

### Explanation:

1. **Import Function**: Import the `isPhraseInStringIgnoreCase` function from the file where it is defined.

2. **Describe Block**: Use the `describe` block to group the tests under a descriptive name.

3. **It Blocks**: Each test case is defined within an `it` block, which provides a clear description of what the test is checking.

4. **Expect Assertions**: Use `expect` with `toBe` to assert the expected outcomes of the tests.

### The `isPhraseInStringIgnoreCase` Function

Ensure that the `isPhraseInStringIgnoreCase` function is defined in a separate file, such as `your-function-file.ts`:

```typescript
import { escape as escapeRegex } from 'lodash';

/**
 * Check if the given phrase exists in the target string, ignoring case and allowing for variations in whitespace.
 *
 * @param phrase - The phrase to search for in the string.
 * @param string - The target string in which to search for the phrase.
 * @returns True if the phrase is found as a whole word in the string, False otherwise.
 */
function isPhraseInStringIgnoreCase(phrase: string, string: string): boolean {
    // Convert both phrase and string to lower case
    const lowerCasePhrase = phrase.toLowerCase();
    const lowerCaseString = string.toLowerCase();

    // Escape special characters in the phrase
    const escapedPhrase = escapeRegex(lowerCasePhrase);

    // Replace spaces in the phrase with \s+ to allow for any whitespace variations
    const escapedPhraseWithWhitespace = escapedPhrase.replace(/\\ /g, '\\s+');

    // Construct the regex pattern with word boundaries
    const pattern = new RegExp(`\\b${escapedPhraseWithWhitespace}\\b`, 'i');

    // Search for the pattern in the target string
    return pattern.test(lowerCaseString);
}

export { isPhraseInStringIgnoreCase };
```

### Running the Tests

To run the tests, add the following to your `package.json`:

```json
{
  "scripts": {
    "test": "jest"
  }
}
```

Then, run the tests:

```sh
npm test
```

This setup ensures that the tests are structured and executed correctly using Jest, and the function `isPhraseInStringIgnoreCase` is tested thoroughly.