Sure! Here is the equivalent TypeScript code:

```typescript
import { escape as escapeRegex } from 'lodash';

function isPhraseInStringIgnoreCase(phrase: string, string: string): boolean {
    /**
     * Check if the given phrase exists in the target string, ignoring case and allowing for variations in whitespace.
     *
     * @param phrase - The phrase to search for in the string.
     * @param string - The target string in which to search for the phrase.
     * @returns True if the phrase is found as a whole word in the string, False otherwise.
     */
    // Convert both phrase and string to lower case
    const lowerCasePhrase = phrase.toLowerCase();
    const lowerCaseString = string.toLowerCase();

    // Escape special characters in the phrase
    const escapedPhrase = escapeRegex(lowerCasePhrase);

    // Replace spaces in the phrase with \s+ to allow for any whitespace variations
    const escapedPhraseWithWhitespace = escapedPhrase.replace(/\\ /g, '\\s+');

    // Construct the regex pattern with word boundaries
    const pattern = new RegExp(`\\b${escapedPhraseWithWhitespace}\\b`, 'i');

    // Search for the pattern in the target string
    return pattern.test(lowerCaseString);
}

// Example usage
console.log(isPhraseInStringIgnoreCase('Hello World', 'hello   world'));  // true
console.log(isPhraseInStringIgnoreCase('Python', 'I love python programming'));  // true
console.log(isPhraseInStringIgnoreCase('TypeScript', 'I love JavaScript'));  // false
```

### Explanation:
1. **Import Statement**: TypeScript does not have a built-in `re` module like Python, so we use `lodash` for escaping special characters. You can install lodash using npm or yarn:
   ```sh
   npm install lodash
   ```

2. **Function Definition**: The function `isPhraseInStringIgnoreCase` is defined with explicit types for the parameters and return type.

3. **Lowercase Conversion**: Both `phrase` and `string` are converted to lowercase using the `toLowerCase()` method.

4. **Escaping Special Characters**: The `escape` function from lodash is used to escape special characters in the phrase.

5. **Replacing Spaces**: The `replace` method is used to replace escaped spaces (`\\ `) with `\s+`.

6. **Constructing Regex Pattern**: A regular expression is constructed with word boundaries (`\b`) and the `i` flag for case-insensitive matching.

7. **Searching for the Pattern**: The `test` method of the regular expression is used to check if the pattern matches the target string.

8. **Example Usage**: Provided examples demonstrate how to call the function and verify its correctness.