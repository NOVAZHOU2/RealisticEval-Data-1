Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function isPhraseInStringIgnoreCase(phrase, string) {
    /**
     * Check if the given phrase exists in the target string, ignoring case and allowing for variations in whitespace.
     *
     * @param {string} phrase - The phrase to search for in the string.
     * @param {string} string - The target string in which to search for the phrase.
     * @returns {boolean} - True if the phrase is found as a whole word in the string, False otherwise.
     */
    
    // Convert both phrase and string to lower case
    phrase = phrase.toLowerCase();
    string = string.toLowerCase();

    // Escape special characters in the phrase
    const escapeRegExp = (str) => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    let escapedPhrase = escapeRegExp(phrase);

    // Replace spaces in the phrase with \s+ to allow for any whitespace variations
    escapedPhrase = escapedPhrase.replace(/\\ /g, '\\s+');

    // Construct the regex pattern with word boundaries
    const pattern = new RegExp(`\\b${escapedPhrase}\\b`, 'g');

    // Search for the pattern in the target string
    return pattern.test(string);
}

// Example usage:
console.log(isPhraseInStringIgnoreCase("hello world", "Hello   World"));  // Should return true
console.log(isPhraseInStringIgnoreCase("test", "This is a test string"));  // Should return true
console.log(isPhraseInStringIgnoreCase("example", "Example string"));  // Should return true
console.log(isPhraseInStringIgnoreCase("example", "Example string example"));  // Should return true
console.log(isPhraseInStringIgnoreCase("example", "Example string example."));  // Should return false
```

### Explanation:
1. **Escape Special Characters**: The `escapeRegExp` function is used to escape special characters in the phrase.
2. **Replace Spaces**: The `replace` method is used to replace escaped spaces (`\\ `) with `\s+`.
3. **Construct Regex Pattern**: A regular expression is constructed using the `RegExp` constructor with word boundaries (`\b`) and the `g` flag for global search.
4. **Search for Pattern**: The `test` method of the regular expression is used to check if the pattern exists in the target string.

This JavaScript code should provide the same functionality as the original Python code.