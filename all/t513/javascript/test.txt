Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will convert each test case from Python's `unittest` framework to Jest, ensuring that the functionality and logic are preserved.

### Python Code

```python
import unittest

class TestIsPhraseInStringIgnoreCase(unittest.TestCase):

    def test_exact_match_case_insensitive(self):
        self.assertTrue(is_phrase_in_string_ignore_case("hello world", "Hello World"))

    def test_partial_word_match_case_insensitive(self):
        self.assertTrue(is_phrase_in_string_ignore_case("Hello", "saying Hello there"))

    def test_different_cases(self):
        self.assertTrue(is_phrase_in_string_ignore_case("HELLO", "hello there!"))
        self.assertTrue(is_phrase_in_string_ignore_case("world", "WORLD is great"))

    def test_non_existent_phrase(self):
        self.assertFalse(is_phrase_in_string_ignore_case("goodbye", "Hello world"))
        self.assertFalse(is_phrase_in_string_ignore_case("hello", "goodbye world"))
```

### JavaScript Code with Jest

```javascript
const isPhraseInStringIgnoreCase = require('./isPhraseInStringIgnoreCase'); // Import the function

describe('TestIsPhraseInStringIgnoreCase', () => {
    describe('test_exact_match_case_insensitive', () => {
        it('should find an exact match case-insensitively', () => {
            expect(isPhraseInStringIgnoreCase("hello world", "Hello World")).toBe(true);
        });
    });

    describe('test_partial_word_match_case_insensitive', () => {
        it('should find a partial word match case-insensitively', () => {
            expect(isPhraseInStringIgnoreCase("Hello", "saying Hello there")).toBe(true);
        });
    });

    describe('test_different_cases', () => {
        it('should find phrases with different cases', () => {
            expect(isPhraseInStringIgnoreCase("HELLO", "hello there!")).toBe(true);
            expect(isPhraseInStringIgnoreCase("world", "WORLD is great")).toBe(true);
        });
    });

    describe('test_non_existent_phrase', () => {
        it('should not find non-existent phrases', () => {
            expect(isPhraseInStringIgnoreCase("goodbye", "Hello world")).toBe(false);
            expect(isPhraseInStringIgnoreCase("hello", "goodbye world")).toBe(false);
        });
    });
});

// Example implementation of isPhraseInStringIgnoreCase function
function isPhraseInStringIgnoreCase(phrase, string) {
    // Convert both phrase and string to lower case
    phrase = phrase.toLowerCase();
    string = string.toLowerCase();

    // Escape special characters in the phrase
    const escapeRegExp = (str) => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    let escapedPhrase = escapeRegExp(phrase);

    // Replace spaces in the phrase with \s+ to allow for any whitespace variations
    escapedPhrase = escapedPhrase.replace(/\\ /g, '\\s+');

    // Construct the regex pattern with word boundaries
    const pattern = new RegExp(`\\b${escapedPhrase}\\b`, 'i');

    // Search for the pattern in the target string
    return pattern.test(string);
}

module.exports = isPhraseInStringIgnoreCase;
```

### Explanation:
1. **Import Function**: The `isPhraseInStringIgnoreCase` function is imported at the beginning of the test file.
2. **Describe Blocks**: Each test case is wrapped in a `describe` block to group related tests.
3. **It Blocks**: Each test case is defined using an `it` block, which contains the actual assertions.
4. **Assertions**: The `expect` function is used to make assertions, similar to `assertTrue` and `assertFalse` in Python's `unittest`.

### File Structure:
- **isPhraseInStringIgnoreCase.js**: This file contains the implementation of the `isPhraseInStringIgnoreCase` function.
- **testIsPhraseInStringIgnoreCase.js**: This file contains the Jest test suite.

By following this structure, the Jest tests maintain the same functionality and logic as the original Python unittest tests.