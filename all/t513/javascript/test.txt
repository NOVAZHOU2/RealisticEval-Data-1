Sure, here's how you can convert the Python unittest test class to a Jest test case using JavaScript:

```javascript
const isPhraseInStringIgnoreCase = require('./path-to-your-function'); // Adjust the path accordingly

describe('isPhraseInStringIgnoreCase', () => {
  it('should return true when the phrase is found as a whole word in the string, ignoring case and allowing for variations in whitespace', () => {
    expect(isPhraseInStringIgnoreCase('hello world', 'Hello World')).toBe(true);
    expect(isPhraseInStringIgnoreCase('test phrase', 'This is a test phrase with extra spaces')).toBe(true);
    expect(isPhraseInStringIgnoreCase('another phrase', 'Another Phrase With Different Case')).toBe(true);
  });

  it('should return false when the phrase is not found as a whole word in the string', () => {
    expect(isPhraseInStringIgnoreCase('missing phrase', 'This does not contain the missing phrase')).toBe(false);
    expect(isPhraseInStringIgnoreCase('partial match', 'Partial Match with Extra Words')).toBe(false);
    expect(isPhraseInStringIgnoreCase('case sensitive', 'Case Sensitive Does Not Match')).toBe(false);
  });
});
```

Make sure to replace `'./path-to-your-function'` with the actual path to your `isPhraseInStringIgnoreCase` function file.

This Jest test suite includes two main `it` blocks:
1. One that checks for cases where the phrase is found as a whole word in the string, considering case insensitivity and variations in whitespace.
2. Another that checks for cases where the phrase is not found in the string.