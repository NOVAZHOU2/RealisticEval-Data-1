Hereâ€™s the equivalent Java code for the provided Python script, organized within the `org.real.temp` package and the `Answer` class:

```java
package org.real.temp;

import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class Answer {

    /**
     * Check if the given phrase exists in the target string, ignoring case and allowing for variations in whitespace.
     *
     * @param phrase The phrase to search for in the string.
     * @param string The target string in which to search for the phrase.
     * @return True if the phrase is found as a whole word in the string, False otherwise.
     */
    public static boolean isPhraseInStringIgnoreCase(String phrase, String string) {
        // Convert both phrase and string to lower case
        phrase = phrase.toLowerCase();
        string = string.toLowerCase();

        // Escape special characters in the phrase
        String escapedPhrase = Pattern.quote(phrase);

        // Replace spaces in the phrase with \s+ to allow for any whitespace variations
        escapedPhrase = escapedPhrase.replace("\\ ", "\\s+");

        // Construct the regex pattern with word boundaries
        String pattern = "\\b" + escapedPhrase + "\\b";

        // Compile the pattern and create a matcher for the target string
        Pattern compiledPattern = Pattern.compile(pattern);
        Matcher matcher = compiledPattern.matcher(string);

        // Search for the pattern in the target string
        return matcher.find();
    }

    // Example usage
    public static void main(String[] args) {
        System.out.println(isPhraseInStringIgnoreCase("hello world", "Hello   World")); // true
        System.out.println(isPhraseInStringIgnoreCase("hello", "Hello World")); // false
    }
}
```

### Explanation:
1. **Import Statements**: The necessary imports (`Pattern` and `Matcher`) from the `java.util.regex` package are included at the beginning of the code.
2. **Method Signature**: The method `isPhraseInStringIgnoreCase` is defined with the appropriate signature, taking two `String` parameters and returning a `boolean`.
3. **Lowercase Conversion**: Both the `phrase` and `string` are converted to lowercase using the `toLowerCase()` method.
4. **Escaping Special Characters**: The `Pattern.quote()` method is used to escape special characters in the `phrase`.
5. **Replacing Spaces**: The `replace` method is used to replace spaces in the escaped phrase with `\s+` to allow for variations in whitespace.
6. **Constructing the Regex Pattern**: The regex pattern is constructed by concatenating the escaped phrase with word boundaries (`\\b`).
7. **Searching for the Pattern**: A `Pattern` object is created with the compiled regex pattern, and a `Matcher` object is used to find the pattern in the target string.
8. **Example Usage**: A `main` method is provided to demonstrate how to call the `isPhraseInStringIgnoreCase` method with example inputs.