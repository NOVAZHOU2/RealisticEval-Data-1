Sure, here's the equivalent Java code signature with the same comments:

```java
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 * Check if the given phrase exists in the target string, ignoring case and allowing for variations in whitespace.
 *
 * @param phrase The phrase to search for in the string.
 * @param string The target string in which to search for the phrase.
 * @return true if the phrase is found as a whole word in the string, false otherwise.
 */
public class PhraseSearch {
    
    public static boolean isPhraseInStringIgnoreCase(String phrase, String string) {
        // Replace all whitespace characters in both phrase and string with a single space
        String cleanedPhrase = phrase.replaceAll("\\s+", " ");
        String cleanedString = string.replaceAll("\\s+", " ");
        
        // Create a regex pattern to match the phrase as a whole word, ignoring case
        Pattern pattern = Pattern.compile("\\b" + Pattern.quote(cleanedPhrase) + "\\b", Pattern.CASE_INSENSITIVE);
        
        // Create a matcher for the cleaned string
        Matcher matcher = pattern.matcher(cleanedString);
        
        // Return true if the phrase is found as a whole word, false otherwise
        return matcher.find();
    }
}
```

### Explanation:
1. **Imports**: We use `java.util.regex` package for handling regular expressions.
2. **Class Definition**: We define a class `PhraseSearch` to encapsulate our method.
3. **Method Signature**: The method `isPhraseInStringIgnoreCase` takes two `String` parameters (`phrase` and `string`) and returns a `boolean`.
4. **Whitespace Handling**: Both `phrase` and `string` are cleaned by replacing multiple whitespace characters with a single space using `replaceAll("\\s+", " ")`.
5. **Regex Pattern**: A regex pattern is created to match the phrase as a whole word (`\\b` denotes word boundaries) while ignoring case (`Pattern.CASE_INSENSITIVE`).
6. **Matcher**: A `Matcher` object is used to find matches of the pattern in the cleaned string.
7. **Return Value**: The method returns `true` if the phrase is found as a whole word, otherwise `false`.