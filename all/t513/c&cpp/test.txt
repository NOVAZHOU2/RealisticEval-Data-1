Sure! Below is an equivalent C++ unit test using Catch2 for the provided Python unittest function `is_phrase_in_string_ignore_case`. 

First, let's define the function in C++:

```cpp
#include <string>
#include <regex>

bool isPhraseInStringIgnoreCase(const std::string& phrase, const std::string& str) {
    // Create a regex pattern that matches the phrase ignoring case and allowing for variations in whitespace
    std::string pattern = "\\b" + std::regex_replace(phrase, std::regex("\\s+"), "\\s*") + "\\b";
    std::regex re(pattern, std::regex_constants::icase);

    // Search for the pattern in the string
    return std::regex_search(str, re);
}
```

Now, let's write the Catch2 test cases for this function:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file

#include "catch.hpp"
#include <string>
#include <regex>

// Function definition from above
bool isPhraseInStringIgnoreCase(const std::string& phrase, const std::string& str);

TEST_CASE("Test isPhraseInStringIgnoreCase", "[isPhraseInStringIgnoreCase]") {
    REQUIRE(isPhraseInStringIgnoreCase("hello world", "Hello World"));  // Case-insensitive match
    REQUIRE(!isPhraseInStringIgnoreCase("hello world", "hello there"));  // Not found
    REQUIRE(isPhraseInStringIgnoreCase("hello world", "   hello world   "));  // Leading/trailing spaces
    REQUIRE(isPhraseInStringIgnoreCase("hello world", "hello\nworld"));  // Whitespace variations
    REQUIRE(!isPhraseInStringIgnoreCase("hello world", "helloworld"));  // No space between words
    REQUIRE(!isPhraseInStringIgnoreCase("hello world", "world hello"));  // Different order of words
}
```

### Explanation:

1. **Function Definition**:
   - `isPhraseInStringIgnoreCase` takes two strings (`phrase` and `str`) and checks if the phrase exists in the string, ignoring case and allowing for variations in whitespace.
   - It constructs a regular expression pattern that matches the phrase with optional whitespace around it and performs a case-insensitive search.

2. **Catch2 Test Cases**:
   - Each `REQUIRE` statement tests a specific scenario to ensure the function behaves as expected.
   - The first `REQUIRE` checks for a case-insensitive match.
   - The second `REQUIRE` checks for a non-match when the phrase is not present.
   - The third `REQUIRE` checks for matching with leading and trailing spaces.
   - The fourth `REQUIRE` checks for matching with different whitespace characters.
   - The fifth `REQUIRE` checks for no space between words.
   - The sixth `REQUIRE` checks for a different order of words.

Make sure you have Catch2 installed and properly set up in your project to compile and run these tests.