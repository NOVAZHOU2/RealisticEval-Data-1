```cpp
#include <regex>
#include <string>

/**
 * Check if the given phrase exists in the target string, ignoring case and allowing for variations in whitespace.
 *
 * @param phrase The phrase to search for in the string.
 * @param str The target string in which to search for the phrase.
 * @return True if the phrase is found as a whole word in the string, False otherwise.
 */
bool isPhraseInStringIgnoreCase(const std::string& phrase, const std::string& str) {
    // Create a regex pattern that matches the phrase with optional whitespace around it, case-insensitively
    std::string pattern = "\\b" + phrase + "\\b";
    std::regex regex(pattern, std::regex_constants::icase);

    // Use regex_search to check if the pattern is found in the string
    return std::regex_search(str, regex);
}
```

This C++ function `isPhraseInStringIgnoreCase` takes two parameters, both of type `std::string`. It uses the `<regex>` library to create a regular expression pattern that matches the given phrase, considering optional whitespace around it and ignoring case sensitivity. The function then searches the provided string for this pattern using `std::regex_search`, returning `true` if the phrase is found as a whole word and `false` otherwise.