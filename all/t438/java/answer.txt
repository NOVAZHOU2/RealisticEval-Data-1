Sure, here's how you can convert the Python code to Java:

```java
package org.real.temp;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Answer {

    public static Map<String, List<String>> readCsvToDataFrame(String filePath) throws IOException {
        /*
         * Reads a CSV file and converts it to a Java Map where each key is a column name 
         * and the value is a list of strings representing the values in that column.
         *
         * @param filePath The path to the CSV file.
         * @return A map containing the data from the CSV file.
         */
        
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        String line = reader.readLine(); // Read the header line
        String[] headers = line.split(",");
        
        Map<String, List<String>> dataframe = new HashMap<>();
        for (String header : headers) {
            dataframe.put(header, new ArrayList<>());
        }
        
        while ((line = reader.readLine()) != null) {
            String[] values = line.split(",");
            for (int i = 0; i < headers.length; i++) {
                dataframe.get(headers[i]).add(values[i]);
            }
        }
        
        reader.close();
        return dataframe;
    }
}
```

This Java method reads a CSV file and converts its content into a `Map` where each key corresponds to a column name and the associated value is a list of strings representing the data in that column. Note that this is a simplified version compared to a full-fledged DataFrame implementation in Python. If you need more advanced functionality like handling different data types or complex operations, additional code would be required.