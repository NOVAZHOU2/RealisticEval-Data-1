Sure! Hereâ€™s the equivalent Java code for the given Python function, including the necessary imports and Javadoc comments:

```java
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;

import java.util.ArrayList;
import java.util.List;

public class CsvReader {

    /**
     * Reads a CSV file and converts it to a List of Lists, which represents the rows and columns.
     * This is similar to a pandas DataFrame in Python.
     *
     * @param filePath The path to the CSV file.
     * @return A List of Lists representing the data from the CSV file.
     * @throws IOException if an I/O error occurs reading from the file or a malformed or unmappable byte sequence is read.
     */
    public static List<List<String>> readCsvToDataframe(String filePath) throws IOException {
        List<List<String>> dataframe = new ArrayList<>();

        try (CSVParser parser = CSVParser.parse(new File(filePath), CSVFormat.DEFAULT.withFirstRecordAsHeader())) {
            for (CSVRecord record : parser) {
                List<String> row = new ArrayList<>();
                for (String value : record) {
                    row.add(value);
                }
                dataframe.add(row);
            }
        }

        return dataframe;
    }
}
```

### Explanation:
1. **Imports**:
   - `java.io.File` and `java.io.IOException`: Used for handling file operations and potential I/O errors.
   - `java.nio.file.Files` and `java.nio.file.Paths`: Used for working with files and paths.
   - `org.apache.commons.csv.CSVFormat`, `org.apache.commons.csv.CSVParser`, and `org.apache.commons.csv.CSVRecord`: Used for parsing CSV files.

2. **Class Definition**:
   - The Python function has been converted into a static method within a `CsvReader` class.

3. **Javadoc Comments**:
   - The Python docstring has been converted into JavaDoc comments to provide documentation for the method.

4. **Functionality**:
   - The method reads the CSV file using `CSVParser` from Apache Commons CSV library.
   - It parses each row and adds it to a list of lists (`List<List<String>>`), which serves as a rough equivalent to a pandas DataFrame in Java.

5. **Error Handling**:
   - The method throws an `IOException` if there are any issues reading the file.

This conversion preserves the original functionality and provides a clear and structured Java equivalent.