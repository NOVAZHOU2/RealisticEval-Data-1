Hereâ€™s the equivalent C++ code using the `cpp-csv-parser` library for parsing CSV files. You can install the library via GitHub or another package manager suitable for your project.

First, ensure you have the `cpp-csv-parser` library installed and included in your project.

```cpp
#include <iostream>
#include <string>
#include <csv-parser/csv.hpp> // Assuming you've installed cpp-csv-parser

// Function to read a CSV file and convert it to a vector of vectors (as a simple representation of a DataFrame)
std::vector<std::vector<std::string>> read_csv_to_dataframe(const std::string& file_path) {
    try {
        csv::CSVReader reader;
        std::vector<std::vector<std::string>> dataframe;

        // Read the CSV file
        reader.parse(file_path, [&](const csv::CSVRow &row) {
            dataframe.push_back(row);
        });

        return dataframe;
    } catch (const std::filesystem::filesystem_error& e) {
        std::cout << "Error: The file '" << file_path << "' was not found." << std::endl;
    } catch (const csv::CSVException& e) {
        std::cout << "Error: Could not parse the file." << std::endl;
    } catch (const std::exception& e) {
        std::cout << "An error occurred: " << e.what() << std::endl;
    }

    // Return an empty vector if there was an error
    return {};
}

int main() {
    std::string file_path = "example.csv"; // Replace with the actual file path
    auto dataframe = read_csv_to_dataframe(file_path);

    // Print the contents of the dataframe
    for (const auto& row : dataframe) {
        for (const auto& cell : row) {
            std::cout << cell << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Headers**: Include necessary headers such as `<iostream>`, `<string>`, and `<csv-parser/csv.hpp>` to use the `cpp-csv-parser` library.
2. **Function Definition**: Define the `read_csv_to_dataframe` function that takes a file path and returns a vector of vectors representing the CSV data.
3. **Error Handling**: Use try-catch blocks to handle various exceptions like file not found, parsing errors, and general exceptions.
4. **CSV Parsing**: Use the `csv::CSVReader` class to parse the CSV file and populate the `dataframe`.
5. **Main Function**: In the `main` function, call `read_csv_to_dataframe` and print the contents of the resulting `dataframe`.

This code provides a basic equivalent of the Python functionality in C++, using a similar structure and handling potential errors.