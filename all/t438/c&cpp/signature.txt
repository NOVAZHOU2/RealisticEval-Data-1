Here is the equivalent C++ code for the provided Python function, including the translation of comments and docstring into C++ comments:

```cpp
#include <fstream>
#include <sstream>
#include <string>
#include <vector>

// A simple structure to mimic a DataFrame
struct DataFrame {
    std::vector<std::vector<std::string>> data;
    std::vector<std::string> columns;

    // Constructor to initialize the DataFrame with column names and data
    DataFrame(const std::vector<std::string>& cols, const std::vector<std::vector<std::string>>& dat)
        : columns(cols), data(dat) {}
};

/**
 * Reads a CSV file and converts it to a DataFrame-like structure.
 *
 * @param file_path The path to the CSV file.
 * @return DataFrame containing the data from the CSV file.
 */
DataFrame read_csv_to_dataframe(const std::string& file_path) {
    std::ifstream file(file_path);
    if (!file.is_open()) {
        throw std::runtime_error("Could not open file: " + file_path);
    }

    std::string line;
    std::vector<std::string> headers;
    std::vector<std::vector<std::string>> data;
    bool header_read = false;

    while (std::getline(file, line)) {
        std::stringstream ss(line);
        std::string cell;
        std::vector<std::string> row;
        while (std::getline(ss, cell, ',')) {
            row.push_back(cell);
        }
        if (!header_read) {
            headers = row;
            header_read = true;
        } else {
            data.push_back(row);
        }
    }

    file.close();
    return DataFrame(headers, data);
}
```

### Explanation:
1. **Imports**: In C++, we use `#include` directives to include necessary libraries. Here, we include `<fstream>` for file handling, `<sstream>` for string stream operations, and `<string>` and `<vector>` for basic data structures.
2. **DataFrame Structure**: Since C++ does not have an exact equivalent to pandas DataFrame, we create a simple `struct` named `DataFrame` which holds a vector of vectors to represent the data and a vector of strings to represent the column names.
3. **Function Definition**: The function `read_csv_to_dataframe` reads the CSV file and constructs a `DataFrame` object. It uses `std::ifstream` to open the file, `std::getline` to read lines, and `std::stringstream` to split each line into cells based on commas.
4. **Comments and Documentation**: The Python docstring is converted into a C++ style multi-line comment using `/** */`, and the arguments and return types are documented appropriately.
5. **Error Handling**: If the file cannot be opened, a `std::runtime_error` is thrown with a descriptive message.