Here is your Python function converted to C++ code:

```cpp
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

// Define a structure for DataFrame row
struct Row {
    std::vector<std::string> values;
};

// Define a class for DataFrame
class DataFrame {
public:
    // Method to add a row to the DataFrame
    void AddRow(const Row& row) {
        rows.push_back(row);
    }

    // Method to get the number of rows in the DataFrame
    size_t GetRowCount() const {
        return rows.size();
    }

private:
    std::vector<Row> rows;
};

/**
 * @brief Reads a CSV file and converts it to a DataFrame.
 *
 * @param file_path The path to the CSV file.
 * @return DataFrame A DataFrame containing the data from the CSV file.
 */
DataFrame ReadCSVToDataFrame(const std::string& file_path) {
    DataFrame df;

    std::ifstream file(file_path);
    if (!file.is_open()) {
        throw std::runtime_error("Could not open file");
    }

    std::string line;
    while (std::getline(file, line)) {
        Row row;
        std::stringstream ss(line);
        std::string value;
        while (std::getline(ss, value, ',')) {
            row.values.push_back(value);
        }
        df.AddRow(row);
    }

    return df;
}
```

This C++ code reads a CSV file and converts it into a `DataFrame` object. It defines a `Row` struct to represent each row of the DataFrame and a `DataFrame` class to store multiple rows. The `ReadCSVToDataFrame` function opens the specified CSV file, reads its contents line by line, splits each line into individual values using commas as delimiters, creates a `Row` object with these values, and adds it to the `DataFrame`. Finally, it returns the `DataFrame` object containing all the data from the CSV file.