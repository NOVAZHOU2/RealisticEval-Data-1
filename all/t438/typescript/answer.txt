Sure! Here's how you can convert your Python function to TypeScript using the `pandas` library for TypeScript, which is provided by `@pnp/pandas`. Note that TypeScript doesn't have direct support for reading CSV files like Python does with `pandas`, so we'll use the `fetch` API to read the file content and then parse it using `pandas`.

First, make sure you have the necessary packages installed:

```bash
npm install @pnp/pandas
```

Here's the equivalent TypeScript code:

```typescript
import { DataFrame } from '@pnp/pandas';

async function readCsvToDataFrame(filePath: string): Promise<DataFrame> {
    /**
     * Reads a CSV file and converts it to a pandas DataFrame.
     *
     * @param filePath - The path to the CSV file.
     * @returns A promise resolving to a DataFrame containing the data from the CSV file.
     */
    
    try {
        // Fetch the CSV file content
        const response = await fetch(filePath);
        if (!response.ok) {
            throw new Error(`Failed to load CSV file: ${filePath}`);
        }
        
        // Read the text content of the file
        const csvText = await response.text();
        
        // Parse the CSV text into a DataFrame
        const df = new DataFrame(csvText);
        
        return df;
    } catch (error) {
        console.error('Error reading CSV file:', error);
        throw error;
    }
}

// Example usage:
(async () => {
    try {
        const filePath = 'path/to/your/file.csv';
        const dataframe = await readCsvToDataFrame(filePath);
        console.log(dataframe);
    } catch (error) {
        console.error('An error occurred:', error);
    }
})();
```

In this TypeScript code:
- We use the `fetch` API to asynchronously read the CSV file content.
- We then parse the CSV text into a `DataFrame` using the `@pnp/pandas` library.
- The function returns a `Promise` that resolves to the `DataFrame`.

Make sure to replace `'path/to/your/file.csv'` with the actual path to your CSV file when calling the `readCsvToDataFrame` function.