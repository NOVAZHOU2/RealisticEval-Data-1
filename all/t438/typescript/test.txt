Sure, here's how you can convert the given Python function into a TypeScript function along with Jest tests:

First, let's define the TypeScript function `readCsvToDataFrame` which reads a CSV file and converts it to a DataFrame using a library like `papaparse` or `csv-parser`. For this example, I'll use `papaparse`.

### 1. Install the required packages

```sh
npm install papaparse
npm install --save-dev jest @types/jest
```

### 2. Define the function in TypeScript

Create a file called `readCsvToDataFrame.ts`:

```typescript
import Papa from 'papaparse';

interface DataFrame {
  columns: string[];
  data: any[][];
}

function readCsvToDataFrame(file: string): Promise<DataFrame> {
  return new Promise((resolve, reject) => {
    Papa.parse(file, {
      header: true,
      download: true,
      complete: (results) => {
        const columns = results.meta.fields;
        const data = results.data;
        resolve({ columns, data });
      },
      error: (error) => {
        reject(error);
      },
    });
  });
}

export default readCsvToDataFrame;
```

### 3. Create the Jest test suite

Create a file called `readCsvToDataFrame.test.ts`:

```typescript
import readCsvToDataFrame from './readCsvToDataFrame';

describe('readCsvToDataFrame', () => {
  const mockFileContent = `Name,Age,City
Alice,25,New York
Bob,30,Los Angeles`;

  beforeEach(() => {
    // Mock the file content
    global.fetch = jest.fn().mockResolvedValue({
      text: () => Promise.resolve(mockFileContent),
    });
  });

  afterEach(() => {
    // Reset the mocks after each test
    jest.restoreAllMocks();
  });

  it('should correctly parse the CSV file', async () => {
    const fileUrl = 'http://example.com/data.csv';
    const result = await readCsvToDataFrame(fileUrl);

    expect(result).toEqual({
      columns: ['Name', 'Age', 'City'],
      data: [
        { Name: 'Alice', Age: '25', City: 'New York' },
        { Name: 'Bob', Age: '30', City: 'Los Angeles' },
      ],
    });
  });

  it('should handle errors when parsing the CSV file', async () => {
    const fileUrl = 'http://example.com/bad-data.csv';
    global.fetch.mockRejectedValue(new Error('Network error'));

    await expect(readCsvToDataFrame(fileUrl)).rejects.toThrow('Network error');
  });
});
```

### Explanation

1. **Function Definition**: 
   - The `readCsvToDataFrame` function uses `Papa.parse` to parse the CSV file.
   - It returns a Promise that resolves with the parsed data or rejects with an error.

2. **Test Suite**:
   - We set up a mock file content for testing purposes.
   - In `beforeEach`, we mock the `fetch` function to return the mock file content.
   - In `afterEach`, we restore all mocks to prevent side effects.
   - We have two test cases:
     - One checks if the CSV file is correctly parsed.
     - Another checks if errors are handled properly.

This setup ensures that the functionality and logic of the tests are preserved while adapting to TypeScript and Jest.