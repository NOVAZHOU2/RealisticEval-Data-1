Sure! Below is the equivalent TypeScript test case using Jest for the provided Python unittest test class. Note that I'll assume you have a similar function in TypeScript that reads a CSV file and converts it to a DataFrame-like structure.

```typescript
import * as fs from 'fs';
import { parse } from 'csv-parse/sync';

// Assuming you have a similar function in TypeScript
function readCsvToDataFrame(filePath: string): any[] {
    const csvData = fs.readFileSync(filePath, 'utf8');
    return parse(csvData, { columns: true });
}

describe('readCsvToDataFrame', () => {
    test('should read and convert CSV file to DataFrame', () => {
        // Mock the file system to simulate reading a CSV file
        const mockFilePath = './test/data.csv';
        const mockFileContent = `name,age\nAlice,30\nBob,25`;
        fs.writeFileSync(mockFilePath, mockFileContent);

        const result = readCsvToDataFrame(mockFilePath);

        expect(result).toEqual([
            { name: 'Alice', age: '30' },
            { name: 'Bob', age: '25' }
        ]);

        // Clean up the mock file after the test
        fs.unlinkSync(mockFilePath);
    });

    test('should handle empty CSV file', () => {
        const mockFilePath = './test/empty_data.csv';
        const mockFileContent = '';
        fs.writeFileSync(mockFilePath, mockFileContent);

        const result = readCsvToDataFrame(mockFilePath);

        expect(result).toEqual([]);

        // Clean up the mock file after the test
        fs.unlinkSync(mockFilePath);
    });

    test('should throw error if file does not exist', () => {
        const nonExistentFilePath = './test/non_existent_file.csv';

        expect(() => readCsvToDataFrame(nonExistentFilePath)).toThrowError('ENOENT: no such file or directory');

        // No need to clean up since the file does not exist
    });
});
```

### Explanation:

1. **Mocking File System**: We use Node.js's `fs` module to create mock files for testing purposes. This allows us to simulate reading CSV files without accessing the actual file system.

2. **Reading CSV Data**: The `readCsvToDataFrame` function reads the CSV content from the file and uses the `csv-parse` library to parse the CSV data into an array of objects (simulating a DataFrame).

3. **Tests**:
   - **Read and Convert CSV File**: Tests that the function correctly reads a CSV file and converts it to a DataFrame-like structure.
   - **Handle Empty CSV File**: Tests that the function returns an empty array when the CSV file is empty.
   - **Throw Error if File Does Not Exist**: Tests that the function throws an error if the specified file does not exist.

4. **Clean Up**: After each test, we clean up the mock files to ensure there are no leftover files affecting subsequent tests.

Make sure you have the `csv-parse` package installed in your project. You can install it using npm or yarn:

```sh
npm install csv-parse
# or
yarn add csv-parse
```

This should give you a good starting point for testing your TypeScript function using Jest.