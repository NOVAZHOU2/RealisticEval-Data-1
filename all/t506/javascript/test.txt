Certainly! Here is the equivalent Jest test suite for the given Python unittest class. I will convert each test case and ensure that the functionality and logic are preserved.

### Python Code

```python
import unittest

def snake_to_camel(snake_str: str) -> str:
    """
    Convert a snake_case string to CamelCase.

    Args:
        snake_str (str): The snake_case string to convert.

    Returns:
        str: The converted CamelCase string.
    """
    words = snake_str.split('_')
    camel_case_str = ''.join(word.capitalize() for word in words)
    return camel_case_str

class TestSnakeToCamel(unittest.TestCase):
    def test_basic_conversion(self):
        """ Test basic snake_case to CamelCase conversion. """
        self.assertEqual(snake_to_camel("hello_world"), "HelloWorld")

    def test_multiple_words(self):
        """ Test conversion of a snake_case string with multiple words. """
        self.assertEqual(snake_to_camel("this_is_a_test"), "ThisIsATest")

    def test_with_numbers(self):
        """ Test conversion with numbers in the string. """
        self.assertEqual(snake_to_camel("convert_this_123_string"), "ConvertThis123String")

    def test_leading_trailing_underscores(self):
        """ Test conversion with leading and trailing underscores. """
        self.assertEqual(snake_to_camel("_leading_and_trailing_"), "LeadingAndTrailing")
        self.assertEqual(snake_to_camel("___multiple___underscores___"), "MultipleUnderscores")

    def test_empty_string(self):
        """ Test conversion of an empty string. """
        self.assertEqual(snake_to_camel(""), "")

if __name__ == '__main__':
    unittest.main()
```

### JavaScript Code with Jest

```javascript
// Define the function to convert snake_case to CamelCase
function snakeToCamel(snakeStr) {
    // Split the snake_case string into words
    const words = snakeStr.split('_');
    // Capitalize the first letter of each word and join them
    const camelCaseStr = words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join('');
    return camelCaseStr;
}

// Jest test suite
describe('Test snakeToCamel', () => {
    test('test basic snake_case to CamelCase conversion', () => {
        expect(snakeToCamel("hello_world")).toBe("HelloWorld");
    });

    test('test conversion of a snake_case string with multiple words', () => {
        expect(snakeToCamel("this_is_a_test")).toBe("ThisIsATest");
    });

    test('test conversion with numbers in the string', () => {
        expect(snakeToCamel("convert_this_123_string")).toBe("ConvertThis123String");
    });

    test('test conversion with leading and trailing underscores', () => {
        expect(snakeToCamel("_leading_and_trailing_")).toBe("LeadingAndTrailing");
        expect(snakeToCamel("___multiple___underscores___")).toBe("MultipleUnderscores");
    });

    test('test conversion of an empty string', () => {
        expect(snakeToCamel("")).toBe("");
    });
});
```

### Explanation

1. **Function Definition**:
   - The `snakeToCamel` function is defined similarly to the Python version, with the same logic for converting snake_case strings to CamelCase.

2. **Jest Test Suite**:
   - The `describe` block is used to group related tests.
   - Each test case is defined using the `test` function, which is equivalent to a single `unittest.TestCase` method.
   - Assertions are made using `expect` and `toBe`, which are equivalent to `self.assertEqual` in Python.

3. **Test Cases**:
   - Each test case from the Python unittest class is translated into a corresponding Jest test case.
   - The descriptions in the test cases are kept similar to the docstrings in the Python unittest methods.

This ensures that the functionality and logic of the tests are preserved while adapting to the Jest testing framework.