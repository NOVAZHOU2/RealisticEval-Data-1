Certainly! Here is the equivalent C++ code for the given Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <sstream>
#include <vector>

// Function to convert a snake_case string to CamelCase.
// 
// Args:
//     snake_str (std::string): The snake_case string to convert.
// 
// Returns:
//     std::string: The converted CamelCase string.
std::string snake_to_camel(const std::string& snake_str) {
    std::istringstream iss(snake_str); // Use istringstream to split the string
    std::vector<std::string> words;
    std::string word;

    // Split the snake_case string into words
    while (std::getline(iss, word, '_')) {
        words.push_back(word);
    }

    // Capitalize the first letter of each word and join them
    std::string camel_case_str;
    for (const auto& w : words) {
        if (!w.empty()) {
            w[0] = std::toupper(w[0]); // Capitalize the first character
            camel_case_str += w;
        }
    }

    return camel_case_str;
}

int main() {
    // Example usage
    std::string snake_str = "example_snake_case_string";
    std::string camel_case_str = snake_to_camel(snake_str);
    std::cout << "Converted string: " << camel_case_str << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**: Included `<iostream>`, `<string>`, `<sstream>`, and `<vector>` for input/output, string manipulation, string splitting, and vector usage respectively.
2. **Function Signature**:
   - The function `snake_to_camel` takes a `const std::string&` as its argument.
   - It returns a `std::string`.
3. **Comments and Documentation**:
   - The Python docstring is translated into C++ comments using `//` for single-line comments and `/* */` for multi-line comments.
4. **String Splitting**: Used `std::istringstream` to split the input string by underscores (`_`).
5. **Capitalization**: Capitalized the first letter of each word using `std::toupper`.
6. **Joining Words**: Concatenated the capitalized words to form the CamelCase string.
7. **Main Function**: Demonstrated how to use the `snake_to_camel` function with an example string.

This ensures that the functionality, logic, and structure of the Python code are preserved in the C++ version.