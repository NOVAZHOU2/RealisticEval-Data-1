Sure! Below is an example of how you can translate your Python unittest test class into a C++ test case using Catch2. First, let's define the function `snake_to_camel` in C++. Then, we'll write the corresponding test cases using Catch2.

### C++ Code

```cpp
#include <string>
#include <sstream>
#include <cctype>

std::string snake_to_camel(const std::string& snake_str) {
    std::stringstream ss;
    bool next_upper = false;

    for (char ch : snake_str) {
        if (ch == '_') {
            next_upper = true;
        } else {
            if (next_upper) {
                ss << static_cast<char>(toupper(ch));
                next_upper = false;
            } else {
                ss << ch;
            }
        }
    }

    return ss.str();
}
```

### Catch2 Test Cases

To write the test cases using Catch2, you need to include the Catch2 header and write the tests within the `TEST_CASE` macro. Here's an example:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"

#include "snake_to_camel.h"  // Include the header where snake_to_camel is defined

TEST_CASE("Snake to Camel Conversion") {
    REQUIRE(snake_to_camel("hello_world") == "HelloWorld");
    REQUIRE(snake_to_camel("this_is_a_test_string") == "ThisIsATestString");
    REQUIRE(snake_to_camel("singleword") == "Singleword");
    REQUIRE(snake_to_camel("") == "");
    REQUIRE(snake_to_camel("with__multiple___underscores") == "WithMultipleUnderscores");
    REQUIRE(snake_to_camel("alreadyCamelCase") == "AlreadyCamelCase");  // Should handle already camel-cased strings
}
```

### Explanation

1. **Function Definition**: The `snake_to_camel` function converts a snake_case string to CamelCase by iterating through each character and converting underscores to uppercase letters while removing them.
2. **Catch2 Test Cases**:
   - `CATCH_CONFIG_MAIN`: This macro tells Catch to automatically generate a main function that runs all the tests.
   - `#include "catch.hpp"`: Includes the Catch2 library.
   - `#include "snake_to_camel.h"`: Includes the header file where `snake_to_camel` is defined.
   - `TEST_CASE("Snake to Camel Conversion")`: Defines a test case with a descriptive name.
   - `REQUIRE`: A macro used to assert that the condition is true. If it's not, the test will fail.

Make sure you have Catch2 installed in your project. You can download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2). Once you have it set up, compile and run your test cases.