Sure! Below is the equivalent TypeScript test case using Jest for the provided Python `snake_to_camel` function:

```typescript
// Assuming you have a function named snakeToCamel in your project
import { snakeToCamel } from './path-to-your-snakeToCamel-function';

describe('snakeToCamel', () => {
  it('converts snake_case to CamelCase', () => {
    expect(snakeToCamel('hello_world')).toBe('HelloWorld');
    expect(snakeToCamel('this_is_a_test_string')).toBe('ThisIsATestString');
    expect(snakeToCamel('singleword')).toBe('Singleword');
    expect(snakeToCamel('with_numbers_123')).toBe('WithNumbers123');
    expect(snakeToCamel('alreadyCamel')).toBe('AlreadyCamel'); // This should ideally be a test case for an invalid input or expected behavior
  });

  it('handles empty string', () => {
    expect(snakeToCamel('')).toBe('');
  });

  it('handles string with only underscores', () => {
    expect(snakeToCamel('__multiple___underscores__')).toBe('MultipleUnderscores');
  });
});
```

In this example:
- We import the `snakeToCamel` function from the appropriate file.
- We use `describe` to group related tests together.
- We use `it` to define individual test cases.
- We use `expect` to assert the expected outcomes of the `snakeToCamel` function.

Make sure to replace `'./path-to-your-snakeToCamel-function'` with the actual path to where your `snakeToCamel` function is located.