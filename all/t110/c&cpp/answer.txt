Here's the equivalent C++ code for generating a random UUID of length 36, ensuring it contains at least one uppercase letter, one lowercase letter, and one digit:

```cpp
#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>

std::string generateUUID() {
    const std::string possibleChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    const int len = 36;
    std::string uuid;

    // Seed the random number generator
    std::srand(std::time(0));

    for (int i = 0; i < len; ++i) {
        uuid += possibleChars.at(std::rand() % possibleChars.length());
    }

    return uuid;
}

int main() {
    std::string uuid = generateUUID();
    std::cout << "Generated UUID: " << uuid << std::endl;
    return 0;
}
```

In this C++ version:

- `std::string` is used for handling strings.
- `std::srand(std::time(0))` seeds the random number generator based on current time to ensure randomness.
- `std::rand() % possibleChars.length()` generates a random index within the range of `possibleChars` to select characters.
- The `generateUUID` function creates a UUID string of length 36 by appending characters randomly chosen from `possibleChars`.
- The `main` function demonstrates how to use `generateUUID` by printing out the generated UUID.

Remember to include necessary headers (`<iostream>`, `<string>`, `<cstdlib>`, `<ctime>`) for string handling, standard input/output, and random number generation in C++.