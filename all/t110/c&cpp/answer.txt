Sure! Here is the equivalent C++ code for generating a random UUID of length 36 with at least one uppercase letter, one lowercase letter, and one digit:

```cpp
#include <iostream>
#include <string>
#include <random>
#include <cassert>

// Function to generate a random UUID of length 36
std::string generateUUID() {
    // Define the characters that can appear in the UUID
    const std::string possibleChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    // Initialize an empty string to build the UUID
    std::string uuid;

    // Use a random number generator
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, possibleChars.size() - 1);

    // Generate 36 characters for the UUID
    for (int i = 0; i < 36; i++) {
        uuid += possibleChars[dis(gen)];
    }

    // Ensure the UUID contains at least one uppercase letter, one lowercase letter, and one digit
    bool hasUppercase = false, hasLowercase = false, hasDigit = false;
    for (char& c : uuid) {
        if (isupper(c)) hasUppercase = true;
        if (islower(c)) hasLowercase = true;
        if (isdigit(c)) hasDigit = true;
    }

    // If any of the required characters are missing, regenerate the UUID
    while (!hasUppercase || !hasLowercase || !hasDigit) {
        uuid.clear();
        for (int i = 0; i < 36; i++) {
            uuid += possibleChars[dis(gen)];
        }
        hasUppercase = false, hasLowercase = false, hasDigit = false;
        for (char& c : uuid) {
            if (isupper(c)) hasUppercase = true;
            if (islower(c)) hasLowercase = true;
            if (isdigit(c)) hasDigit = true;
        }
    }

    // Return the generated UUID
    return uuid;
}

int main() {
    // Test the function
    std::string uuid = generateUUID();
    std::cout << "Generated UUID: " << uuid << std::endl;

    // Verify the UUID meets the requirements
    assert(uuid.length() == 36);
    bool hasUppercase = false, hasLowercase = false, hasDigit = false;
    for (char c : uuid) {
        if (isupper(c)) hasUppercase = true;
        if (islower(c)) hasLowercase = true;
        if (isdigit(c)) hasDigit = true;
    }
    assert(hasUppercase && hasLowercase && hasDigit);

    return 0;
}
```

This C++ code does the following:
1. Defines the set of possible characters for the UUID.
2. Uses a random number generator to generate 36 characters.
3. Ensures that the UUID contains at least one uppercase letter, one lowercase letter, and one digit.
4. If the UUID does not meet the requirements, it regenerates the UUID until it does.
5. Includes assertions to verify the correctness of the generated UUID.