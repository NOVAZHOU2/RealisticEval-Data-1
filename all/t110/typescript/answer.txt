Certainly! Here is the JavaScript code converted to TypeScript:

```typescript
/**
 * Generate a random UUID of length 36
 * The UUID must contain at least one uppercase letter, one lowercase letter, and one digit.
 *
 * @returns {string} A 36-character UUID string.
 */
function generateUUID(): string {
    // Define the characters that can appear in the UUID
    const possibleChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    // Initialize an empty string to build the UUID
    let uuid = "";

    // Generate 36 characters for the UUID
    for (let i = 0; i < 36; i++) {
        uuid += possibleChars.charAt(Math.floor(Math.random() * possibleChars.length));
    }

    // Ensure the UUID contains at least one uppercase letter, one lowercase letter, and one digit
    if (!/[A-Z]/.test(uuid)) {
        uuid = uuid.substring(0, 1) + possibleChars.charAt(Math.floor(Math.random() * 26) + 65) + uuid.substring(2);
    }
    if (!/[a-z]/.test(uuid)) {
        uuid = uuid.substring(0, 2) + possibleChars.charAt(Math.floor(Math.random() * 26) + 97) + uuid.substring(3);
    }
    if (!/\d/.test(uuid)) {
        uuid = uuid.substring(0, 3) + possibleChars.charAt(Math.floor(Math.random() * 10) + 48) + uuid.substring(4);
    }

    // Return the generated UUID
    return uuid;
}
```

### Explanation:
1. **Type Annotations**: The function `generateUUID` now has a return type annotation `: string`.
2. **Ensure Requirements**: Added checks to ensure the UUID contains at least one uppercase letter, one lowercase letter, and one digit. If any of these conditions are not met, the UUID is modified accordingly.

This ensures that the generated UUID meets the specified requirements.