Certainly! Here is the equivalent C++ code for sorting an array of objects by the `timestamp` property:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <map>
#include <ctime>

// Define a structure for the objects with a timestamp
struct Object {
    std::string timestamp;
};

// Comparator function to sort objects by their timestamp
bool compareByTimestamp(const Object& a, const Object& b) {
    // Convert timestamp strings to time_t objects for comparison
    std::tm tm_a = {};
    std::istringstream ss_a(a.timestamp);
    ss_a >> std::get_time(&tm_a, "%Y-%m-%d %H:%M:%S"); // Adjust format as needed
    std::time_t timestampA = std::mktime(&tm_a);

    std::tm tm_b = {};
    std::istringstream ss_b(b.timestamp);
    ss_b >> std::get_time(&tm_b, "%Y-%m-%d %H:%M:%S"); // Adjust format as needed
    std::time_t timestampB = std::mktime(&tm_b);

    // Return true if a should come before b
    return timestampA < timestampB;
}

/**
 * Sorts a vector of objects by the timestamp property.
 *
 * @param vector<Object>& objects - The vector of objects to be sorted.
 * @returns vector<Object> The sorted vector, based on the timestamp property.
 */
std::vector<Object> sortByTimestamp(std::vector<Object>& objects) {
    std::sort(objects.begin(), objects.end(), compareByTimestamp);
    return objects;
}

int main() {
    // Example usage
    std::vector<Object> objects = {
        {"2023-10-01 12:00:00"},
        {"2023-09-30 15:30:00"},
        {"2023-10-02 08:45:00"}
    };

    std::vector<Object> sortedObjects = sortByTimestamp(objects);

    // Print sorted objects
    for (const auto& obj : sortedObjects) {
        std::cout << obj.timestamp << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Struct Definition**: We define a struct `Object` with a single member `timestamp`.
2. **Comparator Function**: We define a comparator function `compareByTimestamp` that compares two `Object` instances based on their `timestamp` property.
3. **Sorting Function**: The `sortByTimestamp` function sorts the vector of `Object` instances using the `std::sort` algorithm and the custom comparator.
4. **Example Usage**: In the `main` function, we create a vector of `Object` instances, sort them, and print the sorted timestamps.

Make sure to adjust the date-time parsing format (`"%Y-%m-%d %H:%M:%S"`) according to your specific timestamp format.