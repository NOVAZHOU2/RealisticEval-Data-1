Here's how you can convert the provided JavaScript code into Java:

```java
import java.util.Arrays;
import java.util.Comparator;

class MyObject {
    private String timestamp;

    public MyObject(String timestamp) {
        this.timestamp = timestamp;
    }

    public String getTimestamp() {
        return timestamp;
    }
}

public class SortByTimestamp {

    /**
     * Sorts an array of MyObject by the timestamp property.
     *
     * @param array - The array of MyObject to be sorted.
     * @return The sorted array, based on the timestamp property.
     */
    public static MyObject[] sortByTimestamp(MyObject[] array) {
        Arrays.sort(array, new Comparator<MyObject>() {
            @Override
            public int compare(MyObject a, MyObject b) {
                long timestampA = new java.util.Date(a.getTimestamp()).getTime();
                long timestampB = new java.util.Date(b.getTimestamp()).getTime();
                return Long.compare(timestampA, timestampB);
            }
        });
        return array;
    }

    public static void main(String[] args) {
        MyObject[] objects = {
            new MyObject("2023-10-10T10:00:00Z"),
            new MyObject("2023-10-12T10:00:00Z"),
            new MyObject("2023-10-11T10:00:00Z")
        };

        MyObject[] sortedObjects = sortByTimestamp(objects);

        for (MyObject obj : sortedObjects) {
            System.out.println(obj.getTimestamp());
        }
    }
}
```

### Explanation:
1. **Class Definition**: I created a `MyObject` class to hold the `timestamp` property.
2. **Sorting Method**: The `sortByTimestamp` method sorts an array of `MyObject` using `Arrays.sort()` with a custom `Comparator`.
3. **Date Conversion**: The timestamps are converted from strings to `Date` objects, and the time values are compared to sort the objects.
4. **Main Method**: Added a `main` method to demonstrate sorting an example array of `MyObject`. 

Make sure to adapt the `timestamp` format in the constructor if necessary!