Here's the equivalent C++ code using the Catch2 framework for the provided Python unittest class:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

// Assume the bezier function is declared somewhere above or included
float bezier(float t, float p0, float p1, float p2, float p3);

TEST_CASE("Test Bezier Curve", "[bezier]") {
    
    SECTION("Bezier at t=0 should return the first control point p0") {
        REQUIRE(bezier(0, 1, 3, 3, 1) == Approx(1.0).epsilon(0.001));
    }

    SECTION("Bezier at t=1 should return the last control point p3") {
        REQUIRE(bezier(1, 1, 3, 3, 1) == Approx(1.0).epsilon(0.001));
    }

    SECTION("Bezier at t=0.5 should return the correct middle value") {
        float expected = 1.0 * 0.125 + 3 * 0.375 + 3 * 0.375 + 1 * 0.125; // Calculate manually for t=0.5
        REQUIRE(bezier(0.5, 1, 3, 3, 1) == Approx(expected).epsilon(0.001));
    }

    SECTION("Bezier with all control points the same should return that value") {
        REQUIRE(bezier(0.5, 2, 2, 2, 2) == Approx(2.0).epsilon(0.001));
    }
}
```

### Key Changes:
- **Catch2 Setup**: Included `#define CATCH_CONFIG_MAIN` to create a main function for testing.
- **Test Structure**: Used `TEST_CASE` and `SECTION` macros for organizing tests.
- **Assertions**: Used `REQUIRE` with `Approx` to compare floating-point values, accommodating for precision differences with `epsilon`.