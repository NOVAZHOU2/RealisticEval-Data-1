Here’s the equivalent Jest test class in TypeScript for the provided Python `unittest` class:

```typescript
import { bezier } from './bezier'; // Adjust the import based on your file structure

describe('TestAnswer', () => {
    
    test('bezier at start', () => {
        expect(bezier(0, 1, 3, 3, 1)).toBeCloseTo(1.0, 3);
    });

    test('bezier at end', () => {
        expect(bezier(1, 1, 3, 3, 1)).toBeCloseTo(1.0, 3);
    });

    test('bezier at middle', () => {
        const expected = 1.0 * 0.125 + 3 * 0.375 + 3 * 0.375 + 1 * 0.125; // Calculate manually for t=0.5
        expect(bezier(0.5, 1, 3, 3, 1)).toBeCloseTo(expected, 3);
    });

    test('bezier with identical control points', () => {
        expect(bezier(0.5, 2, 2, 2, 2)).toBeCloseTo(2.0, 3);
    });
});
```

### Changes Made:
1. **Jest Syntax**: Used Jest's `describe` and `test` functions instead of `unittest.TestCase`.
2. **Assertions**: Replaced `self.assertAlmostEqual` with `expect(...).toBeCloseTo(...)` for floating-point comparisons.
3. **Imports**: Added an import statement for the `bezier` function, assuming it’s defined in a separate file.
4. **Type Annotations**: TypeScript automatically infers types, but you can add specific annotations if needed in your function definitions.

This Jest code preserves the original logic and functionality of the tests from the Python code.