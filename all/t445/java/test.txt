Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class is placed in the package `org.real.temp` and named `Tester`. It includes appropriate JUnit annotations and assertion methods to ensure the functionality and logic of the tests are preserved.

### Java Code

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

/**
 * Test class for the createRotMatrix method.
 */
public class Tester {

    /**
     * Test rotation around the X-axis for 90 degrees.
     */
    @Test
    public void testRotationX90Degrees() {
        double[][] expectedMatrix = {
            {1, 0, 0, 0},
            {0, 0, -1, 0},
            {0, 1, 0, 0},
            {0, 0, 0, 1}
        };
        double[][] resultMatrix = createRotMatrix(90, "x");
        assertArrayEquals(expectedMatrix, resultMatrix, 1e-6);
    }

    /**
     * Test rotation around the Y-axis for 180 degrees.
     */
    @Test
    public void testRotationY180Degrees() {
        double[][] expectedMatrix = {
            {-1, 0, 0, 0},
            {0, 1, 0, 0},
            {0, 0, -1, 0},
            {0, 0, 0, 1}
        };
        double[][] resultMatrix = createRotMatrix(180, "y");
        assertArrayEquals(expectedMatrix, resultMatrix, 1e-6);
    }

    /**
     * Test rotation around the Z-axis for 270 degrees (or -90 degrees).
     */
    @Test
    public void testRotationZ270Degrees() {
        double[][] expectedMatrix = {
            {0, 1, 0, 0},
            {-1, 0, 0, 0},
            {0, 0, 1, 0},
            {0, 0, 0, 1}
        };
        double[][] resultMatrix = createRotMatrix(270, "z");
        assertArrayEquals(expectedMatrix, resultMatrix, 1e-6);
    }

    /**
     * Test behavior with invalid axis input.
     */
    @Test
    public void testInvalidAxis() {
        assertThrows(IllegalArgumentException.class, () -> {
            createRotMatrix(90, "a");
        });
    }

    /**
     * Test zero degree rotation which should lead to the identity matrix.
     */
    @Test
    public void testZeroRotation() {
        double[][] expectedMatrix = {
            {1, 0, 0, 0},
            {0, 1, 0, 0},
            {0, 0, 1, 0},
            {0, 0, 0, 1}
        };
        double[][] resultMatrix = createRotMatrix(0, "x");
        assertArrayEquals(expectedMatrix, resultMatrix, 1e-6);
    }

    // Helper method to create the rotation matrix
    private double[][] createRotMatrix(double angleDeg, String axis) {
        // Convert angle from degrees to radians
        double angleRad = Math.toRadians(angleDeg);

        // Define the rotation matrix based on the specified axis
        double[][] rotationMatrix;
        switch (axis.toUpperCase()) {
            case "X":
                rotationMatrix = new double[][]{
                    {1, 0, 0, 0},
                    {0, Math.cos(angleRad), -Math.sin(angleRad), 0},
                    {0, Math.sin(angleRad), Math.cos(angleRad), 0},
                    {0, 0, 0, 1}
                };
                break;
            case "Y":
                rotationMatrix = new double[][]{
                    {Math.cos(angleRad), 0, Math.sin(angleRad), 0},
                    {0, 1, 0, 0},
                    {-Math.sin(angleRad), 0, Math.cos(angleRad), 0},
                    {0, 0, 0, 1}
                };
                break;
            case "Z":
                rotationMatrix = new double[][]{
                    {Math.cos(angleRad), -Math.sin(angleRad), 0, 0},
                    {Math.sin(angleRad), Math.cos(angleRad), 0, 0},
                    {0, 0, 1, 0},
                    {0, 0, 0, 1}
                };
                break;
            default:
                throw new IllegalArgumentException("Invalid axis. Must be one of 'X', 'Y', or 'Z'.");
        }

        return rotationMatrix;
    }

    // Helper method to compare arrays with a tolerance
    private static void assertArrayEquals(double[][] expected, double[][] actual, double delta) {
        assertEquals(expected.length, actual.length);
        for (int i = 0; i < expected.length; i++) {
            assertEquals(expected[i].length, actual[i].length);
            for (int j = 0; j < expected[i].length; j++) {
                assertEquals(expected[i][j], actual[i][j], delta);
            }
        }
    }
}
```

### Explanation:
1. **Package and Class Definition**:
   - The Java test class is defined within the package `org.real.temp` and named `Tester`.

2. **JUnit Annotations**:
   - Each test method is annotated with `@Test` to indicate it is a test method.

3. **Test Methods**:
   - Each test method is implemented to match the functionality of the corresponding Python test methods.
   - The `assertArrayEquals` method is used to compare the expected and actual matrices with a tolerance (`delta`).

4. **Helper Method `createRotMatrix`**:
   - The `createRotMatrix` method is included within the test class to simulate the behavior of the Python function being tested.

5. **Assertion Methods**:
   - The `assertArrayEquals` method is used to compare arrays with a tolerance, ensuring that floating-point comparisons are handled correctly.

6. **Error Handling**:
   - The `testInvalidAxis` method uses `assertThrows` to verify that an `IllegalArgumentException` is thrown when an invalid axis is provided.

This Java code preserves the original functionality and structure of the Python unittest class while adhering to JUnit's conventions and syntax.