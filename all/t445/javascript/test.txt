Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and assertion methods.

### Python Code

```python
import unittest
import numpy as np
from numpy.testing import assert_array_almost_equal

class TestCreateRotMatrix(unittest.TestCase):
    def test_rotation_x_90_degrees(self):
        """ Test rotation around X-axis for 90 degrees """
        expected_matrix = np.array([
            [1, 0, 0, 0],
            [0, 0, -1, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 1]
        ])
        result_matrix = create_rot_matrix(90, 'x')
        assert_array_almost_equal(result_matrix, expected_matrix)

    def test_rotation_y_180_degrees(self):
        """ Test rotation around Y-axis for 180 degrees """
        expected_matrix = np.array([
            [-1, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, -1, 0],
            [0, 0, 0, 1]
        ])
        result_matrix = create_rot_matrix(180, 'y')
        assert_array_almost_equal(result_matrix, expected_matrix)

    def test_rotation_z_270_degrees(self):
        """ Test rotation around Z-axis for 270 degrees (or -90 degrees) """
        expected_matrix = np.array([
            [0, 1, 0, 0],
            [-1, 0, 0, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 1]
        ])
        result_matrix = create_rot_matrix(270, 'z')
        assert_array_almost_equal(result_matrix, expected_matrix)

    def test_invalid_axis(self):
        """ Test behavior with invalid axis input """
        with self.assertRaises(ValueError):
            create_rot_matrix(90, 'a')

    def test_zero_rotation(self):
        """ Test zero degree rotation which should lead to identity matrix """
        expected_matrix = np.eye(4)
        result_matrix = create_rot_matrix(0, 'x')
        assert_array_almost_equal(result_matrix, expected_matrix)
```

### Equivalent Jest Test Suite

```javascript
const expect = require('expect'); // Import expect from Jest

describe('TestCreateRotMatrix', () => {
    it('test_rotation_x_90_degrees', () => {
        /** Test rotation around X-axis for 90 degrees */
        const expectedMatrix = [
            [1, 0, 0, 0],
            [0, 0, -1, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 1]
        ];
        const resultMatrix = createRotMatrix(90, 'x');
        expect(resultMatrix).toEqual(expectedMatrix);
    });

    it('test_rotation_y_180_degrees', () => {
        /** Test rotation around Y-axis for 180 degrees */
        const expectedMatrix = [
            [-1, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, -1, 0],
            [0, 0, 0, 1]
        ];
        const resultMatrix = createRotMatrix(180, 'y');
        expect(resultMatrix).toEqual(expectedMatrix);
    });

    it('test_rotation_z_270_degrees', () => {
        /** Test rotation around Z-axis for 270 degrees (or -90 degrees) */
        const expectedMatrix = [
            [0, 1, 0, 0],
            [-1, 0, 0, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 1]
        ];
        const resultMatrix = createRotMatrix(270, 'z');
        expect(resultMatrix).toEqual(expectedMatrix);
    });

    it('test_invalid_axis', () => {
        /** Test behavior with invalid axis input */
        expect(() => createRotMatrix(90, 'a')).toThrow('Invalid axis. Must be one of \'X\', \'Y\', or \'Z\'.');
    });

    it('test_zero_rotation', () => {
        /** Test zero degree rotation which should lead to identity matrix */
        const expectedMatrix = [
            [1, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 1]
        ];
        const resultMatrix = createRotMatrix(0, 'x');
        expect(resultMatrix).toEqual(expectedMatrix);
    });
});
```

### Explanation:
1. **Import `expect`**: Jest uses `expect` for assertions. We import it from Jest.
2. **Describe Block**: The `describe` block is used to group the tests together.
3. **It Blocks**: Each `it` block represents a single test case.
4. **Assertions**:
   - `expect(resultMatrix).toEqual(expectedMatrix)`: This checks if the `resultMatrix` is equal to the `expectedMatrix`. Note that `toEqual` is used for deep equality checks.
   - `expect(() => createRotMatrix(90, 'a')).toThrow('Invalid axis. Must be one of \'X\', \'Y\', or \'Z\'.')`: This checks if the function throws the expected error message.

This ensures that the Jest test suite maintains the same functionality and logic as the original Python unittest class.