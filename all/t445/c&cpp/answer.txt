Sure! Below is the equivalent C++ code for the given Python function. This code uses the `<cmath>` library for trigonometric functions and creates a rotation matrix based on the specified axis.

```cpp
#include <iostream>
#include <cmath>
#include <cassert>

// Define a 4x4 matrix using a 2D array
typedef double Matrix[4][4];

void create_rot_matrix(double angle_deg, const char* axis, Matrix& rotation_matrix) {
    // Convert angle from degrees to radians
    double angle_rad = angle_deg * M_PI / 180.0;

    // Initialize the rotation matrix with identity values
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            rotation_matrix[i][j] = (i == j) ? 1.0 : 0.0;
        }
    }

    // Define the rotation matrix based on the specified axis
    if (axis[0] == 'x') {
        rotation_matrix[1][1] = cos(angle_rad);
        rotation_matrix[1][2] = -sin(angle_rad);
        rotation_matrix[2][1] = sin(angle_rad);
        rotation_matrix[2][2] = cos(angle_rad);
    } else if (axis[0] == 'y') {
        rotation_matrix[0][0] = cos(angle_rad);
        rotation_matrix[0][2] = sin(angle_rad);
        rotation_matrix[2][0] = -sin(angle_rad);
        rotation_matrix[2][2] = cos(angle_rad);
    } else if (axis[0] == 'z') {
        rotation_matrix[0][0] = cos(angle_rad);
        rotation_matrix[0][1] = -sin(angle_rad);
        rotation_matrix[1][0] = sin(angle_rad);
        rotation_matrix[1][1] = cos(angle_rad);
    } else {
        throw std::invalid_argument("Invalid axis. Must be one of 'X', 'Y', or 'Z'.");
    }
}

int main() {
    Matrix rotation_matrix;
    double angle_deg = 90.0;
    const char* axis = "x";

    try {
        create_rot_matrix(angle_deg, axis, rotation_matrix);

        // Print the resulting rotation matrix
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                std::cout << rotation_matrix[i][j] << " ";
            }
            std::cout << std::endl;
        }
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Matrix Definition**: A `Matrix` is defined as a 2D array to represent a 4x4 matrix.
2. **Function Definition**: The `create_rot_matrix` function takes an angle in degrees, an axis as a `char*`, and a reference to a `Matrix`.
3. **Angle Conversion**: The angle is converted from degrees to radians.
4. **Initialization**: The matrix is initialized as an identity matrix.
5. **Rotation Matrix Calculation**: Based on the specified axis, the appropriate elements of the matrix are updated.
6. **Exception Handling**: If an invalid axis is provided, an exception is thrown.
7. **Main Function**: The `main` function demonstrates how to use the `create_rot_matrix` function and prints the resulting rotation matrix.