Sure! Below is the equivalent C++ code for the provided Python function. This code creates a 4x4 pose matrix representing a rotation about a given axis.

```cpp
#include <iostream>
#include <cmath>
#include <cassert>

// A simple 4x4 matrix class for demonstration purposes
class Matrix4x4 {
public:
    double data[4][4];

    Matrix4x4() {
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                data[i][j] = 0;
            }
        }
    }

    void setIdentity() {
        for (int i = 0; i < 4; ++i) {
            data[i][i] = 1;
        }
    }

    void print() const {
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                std::cout << data[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
};

Matrix4x4 createRotMatrix(double angle_deg, char axis) {
    // Convert angle from degrees to radians
    double angle_rad = angle_deg * M_PI / 180.0;

    // Initialize the rotation matrix
    Matrix4x4 rotation_matrix;
    rotation_matrix.setIdentity();

    switch (axis) {
        case 'x':
            rotation_matrix.data[1][1] = cos(angle_rad);
            rotation_matrix.data[1][2] = -sin(angle_rad);
            rotation_matrix.data[2][1] = sin(angle_rad);
            rotation_matrix.data[2][2] = cos(angle_rad);
            break;
        case 'y':
            rotation_matrix.data[0][0] = cos(angle_rad);
            rotation_matrix.data[0][2] = sin(angle_rad);
            rotation_matrix.data[2][0] = -sin(angle_rad);
            rotation_matrix.data[2][2] = cos(angle_rad);
            break;
        case 'z':
            rotation_matrix.data[0][0] = cos(angle_rad);
            rotation_matrix.data[0][1] = -sin(angle_rad);
            rotation_matrix.data[1][0] = sin(angle_rad);
            rotation_matrix.data[1][1] = cos(angle_rad);
            break;
        default:
            throw std::invalid_argument("Invalid axis. Must be one of 'x', 'y', or 'z'.");
    }

    return rotation_matrix;
}

int main() {
    try {
        Matrix4x4 matrix = createRotMatrix(45.0, 'x');
        matrix.print();
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Matrix4x4 Class**: A simple 4x4 matrix class is defined to represent the rotation matrix.
2. **createRotMatrix Function**: This function takes an angle in degrees and an axis ('x', 'y', or 'z') and returns a 4x4 rotation matrix.
3. **Conversion from Degrees to Radians**: The angle is converted from degrees to radians using `M_PI` from `<cmath>`.
4. **Switch Statement**: Depending on the axis, the appropriate elements of the rotation matrix are updated.
5. **Exception Handling**: An `std::invalid_argument` exception is thrown if the axis is not one of 'x', 'y', or 'z'.
6. **Main Function**: Demonstrates how to use the `createRotMatrix` function and prints the resulting matrix.

This code should provide the same functionality as the original Python code but adapted to C++ syntax and features.