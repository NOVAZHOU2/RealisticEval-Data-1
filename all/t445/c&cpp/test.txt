Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The tests will preserve the functionality and logic of the original Python tests, including the use of appropriate assertions.

First, ensure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

Here is the C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <cmath>
#include "Matrix4x4.h"  // Include your Matrix4x4 class

// A helper function to compare two matrices
bool matricesAlmostEqual(const Matrix4x4& mat1, const Matrix4x4& mat2, double epsilon = 1e-6) {
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            if (std::abs(mat1.data[i][j] - mat2.data[i][j]) > epsilon) {
                return false;
            }
        }
    }
    return true;
}

TEST_CASE("TestCreateRotMatrix", "[rotation]") {
    SECTION("test_rotation_x_90_degrees") {
        // Test rotation around X-axis for 90 degrees
        Matrix4x4 expected_matrix;
        expected_matrix.data[0][0] = 1;
        expected_matrix.data[1][1] = 0;
        expected_matrix.data[1][2] = -1;
        expected_matrix.data[2][1] = 1;
        expected_matrix.data[2][2] = 0;
        expected_matrix.data[3][3] = 1;

        Matrix4x4 result_matrix = createRotMatrix(90.0, 'X');
        REQUIRE(matricesAlmostEqual(result_matrix, expected_matrix));
    }

    SECTION("test_rotation_y_180_degrees") {
        // Test rotation around Y-axis for 180 degrees
        Matrix4x4 expected_matrix;
        expected_matrix.data[0][0] = -1;
        expected_matrix.data[1][1] = 1;
        expected_matrix.data[2][2] = -1;
        expected_matrix.data[3][3] = 1;

        Matrix4x4 result_matrix = createRotMatrix(180.0, 'Y');
        REQUIRE(matricesAlmostEqual(result_matrix, expected_matrix));
    }

    SECTION("test_rotation_z_270_degrees") {
        // Test rotation around Z-axis for 270 degrees (or -90 degrees)
        Matrix4x4 expected_matrix;
        expected_matrix.data[0][0] = 0;
        expected_matrix.data[0][1] = 1;
        expected_matrix.data[1][0] = -1;
        expected_matrix.data[1][1] = 0;
        expected_matrix.data[2][2] = 1;
        expected_matrix.data[3][3] = 1;

        Matrix4x4 result_matrix = createRotMatrix(270.0, 'Z');
        REQUIRE(matricesAlmostEqual(result_matrix, expected_matrix));
    }

    SECTION("test_invalid_axis") {
        // Test behavior with invalid axis input
        REQUIRE_THROWS_AS(createRotMatrix(90.0, 'A'), std::invalid_argument);
    }

    SECTION("test_zero_rotation") {
        // Test zero degree rotation which should lead to identity matrix
        Matrix4x4 expected_matrix;
        expected_matrix.setIdentity();

        Matrix4x4 result_matrix = createRotMatrix(0.0, 'X');
        REQUIRE(matricesAlmostEqual(result_matrix, expected_matrix));
    }
}

// The Matrix4x4 class definition (assuming it is in Matrix4x4.h)
class Matrix4x4 {
public:
    double data[4][4];

    Matrix4x4() {
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                data[i][j] = 0;
            }
        }
    }

    void setIdentity() {
        for (int i = 0; i < 4; ++i) {
            data[i][i] = 1;
        }
    }
};

// The createRotMatrix function definition
Matrix4x4 createRotMatrix(double angle_deg, char axis) {
    double angle_rad = angle_deg * M_PI / 180.0;

    Matrix4x4 rotation_matrix;
    rotation_matrix.setIdentity();

    switch (axis) {
        case 'X':
            rotation_matrix.data[1][1] = cos(angle_rad);
            rotation_matrix.data[1][2] = -sin(angle_rad);
            rotation_matrix.data[2][1] = sin(angle_rad);
            rotation_matrix.data[2][2] = cos(angle_rad);
            break;
        case 'Y':
            rotation_matrix.data[0][0] = cos(angle_rad);
            rotation_matrix.data[0][2] = sin(angle_rad);
            rotation_matrix.data[2][0] = -sin(angle_rad);
            rotation_matrix.data[2][2] = cos(angle_rad);
            break;
        case 'Z':
            rotation_matrix.data[0][0] = cos(angle_rad);
            rotation_matrix.data[0][1] = -sin(angle_rad);
            rotation_matrix.data[1][0] = sin(angle_rad);
            rotation_matrix.data[1][1] = cos(angle_rad);
            break;
        default:
            throw std::invalid_argument("Invalid axis. Must be one of 'X', 'Y', or 'Z'.");
    }

    return rotation_matrix;
}

// Main function to run the tests
int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Catch2 Setup**: The Catch2 framework is included at the beginning of the file.
2. **Helper Function**: A helper function `matricesAlmostEqual` is defined to compare two matrices for approximate equality.
3. **Test Sections**:
   - `test_rotation_x_90_degrees`: Tests rotation around the X-axis for 90 degrees.
   - `test_rotation_y_180_degrees`: Tests rotation around the Y-axis for 180 degrees.
   - `test_rotation_z_270_degrees`: Tests rotation around the Z-axis for 270 degrees.
   - `test_invalid_axis`: Tests behavior with an invalid axis input.
   - `test_zero_rotation`: Tests zero-degree rotation, which should result in the identity matrix.
4. **Assertions**:
   - `REQUIRE(matricesAlmostEqual(...))`: Used to check if the matrices are approximately equal.
   - `REQUIRE_THROWS_AS(...)` : Used to check if the function throws the expected exception.
5. **Matrix4x4 Class**: The `Matrix4x4` class is defined to represent the 4x4 matrix.
6. **createRotMatrix Function**: The function `createRotMatrix` is defined to create the rotation matrix.
7. **Main Function**: The `main` function runs the Catch2 tests.

This setup ensures that the tests are equivalent to the original Python tests and adhere to C++ conventions and the Catch2 testing framework.