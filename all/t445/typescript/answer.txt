Sure! Below is the equivalent TypeScript code for the provided Python function. This includes proper type definitions and adjustments for TypeScript's static type system:

```typescript
import * as math from 'mathjs';

/**
 * Create a pose matrix representing a rotation about a given axis.
 * Generated by ChatGPT-4, we make no assumptions about its correctness.
 *
 * @param angleDeg - Rotation angle in degrees.
 * @param axis - Axis to rotate about, must be one of 'X', 'Y', or 'Z'.
 * @returns A 4x4 pose matrix representing the rotation.
 */
function createRotMatrix(angleDeg: number, axis: 'X' | 'Y' | 'Z'): number[][] {
    // Convert angle from degrees to radians
    const angleRad = math.unit(angleDeg, 'deg').toNumber('rad');

    // Define the rotation matrix based on the specified axis
    let rotationMatrix: number[][];

    switch (axis.toUpperCase()) {
        case 'X':
            rotationMatrix = [
                [1, 0, 0, 0],
                [0, math.cos(angleRad), -math.sin(angleRad), 0],
                [0, math.sin(angleRad), math.cos(angleRad), 0],
                [0, 0, 0, 1]
            ];
            break;
        case 'Y':
            rotationMatrix = [
                [math.cos(angleRad), 0, math.sin(angleRad), 0],
                [0, 1, 0, 0],
                [-math.sin(angleRad), 0, math.cos(angleRad), 0],
                [0, 0, 0, 1]
            ];
            break;
        case 'Z':
            rotationMatrix = [
                [math.cos(angleRad), -math.sin(angleRad), 0, 0],
                [math.sin(angleRad), math.cos(angleRad), 0, 0],
                [0, 0, 1, 0],
                [0, 0, 0, 1]
            ];
            break;
        default:
            throw new Error("Invalid axis. Must be one of 'X', 'Y', or 'Z'.");
    }

    return rotationMatrix;
}

// Example usage
const angleDeg = 90;
const axis = 'X';
const rotMatrix = createRotMatrix(angleDeg, axis);
console.log(rotMatrix);
```

### Explanation:
1. **Imports**: We use `mathjs` for mathematical operations, including converting degrees to radians.
2. **Type Annotations**: The function parameters and return type are explicitly annotated to match TypeScript's static typing.
3. **Switch Statement**: We use a `switch` statement with the `toUpperCase()` method to handle the axis parameter case-insensitively.
4. **Error Handling**: We throw an error if the axis is not one of `'X'`, `'Y'`, or `'Z'`.
5. **Example Usage**: Provided example usage demonstrates how to call the function and print the result.

This code ensures that the functionality, structure, and logic remain consistent with the original Python code while adhering to TypeScript conventions.