Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included to match the Python unittest framework.

### TypeScript Code

First, ensure you have the necessary dependencies installed:
```sh
npm install mathjs jest @types/jest ts-jest
```

Then, configure Jest in your `tsconfig.json` and `jest.config.js` files:

#### `tsconfig.json`
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "target": "es6",
    "outDir": "./dist",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

#### `jest.config.js`
```js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest'
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
};
```

### TypeScript Test Class

Here is the TypeScript test class using Jest:

```typescript
import { createRotMatrix } from './createRotMatrix'; // Import the createRotMatrix function
import * as math from 'mathjs';

describe('TestCreateRotMatrix', () => {
  it('test_rotation_x_90_degrees', () => {
    /** Test rotation around X-axis for 90 degrees */
    const expectedMatrix = [
      [1, 0, 0, 0],
      [0, 0, -1, 0],
      [0, 1, 0, 0],
      [0, 0, 0, 1]
    ];
    const resultMatrix = createRotMatrix(90, 'X');
    expect(resultMatrix).toEqual(expectedMatrix);
  });

  it('test_rotation_y_180_degrees', () => {
    /** Test rotation around Y-axis for 180 degrees */
    const expectedMatrix = [
      [-1, 0, 0, 0],
      [0, 1, 0, 0],
      [0, 0, -1, 0],
      [0, 0, 0, 1]
    ];
    const resultMatrix = createRotMatrix(180, 'Y');
    expect(resultMatrix).toEqual(expectedMatrix);
  });

  it('test_rotation_z_270_degrees', () => {
    /** Test rotation around Z-axis for 270 degrees (or -90 degrees) */
    const expectedMatrix = [
      [0, 1, 0, 0],
      [-1, 0, 0, 0],
      [0, 0, 1, 0],
      [0, 0, 0, 1]
    ];
    const resultMatrix = createRotMatrix(270, 'Z');
    expect(resultMatrix).toEqual(expectedMatrix);
  });

  it('test_invalid_axis', () => {
    /** Test behavior with invalid axis input */
    expect(() => createRotMatrix(90, 'A')).toThrow('Invalid axis. Must be one of \'X\', \'Y\', or \'Z\'.');
  });

  it('test_zero_rotation', () => {
    /** Test zero degree rotation which should lead to identity matrix */
    const expectedMatrix = [
      [1, 0, 0, 0],
      [0, 1, 0, 0],
      [0, 0, 1, 0],
      [0, 0, 0, 1]
    ];
    const resultMatrix = createRotMatrix(0, 'X');
    expect(resultMatrix).toEqual(expectedMatrix);
  });
});
```

### Explanation:
1. **Imports**:
   - Import the `createRotMatrix` function from the relevant file.
   - Import `mathjs` for mathematical operations.

2. **Jest Describe Block**:
   - Use `describe` to group the tests under a single test suite.

3. **Test Cases**:
   - Each `it` block represents a test case.
   - Use `expect` to assert the expected outcomes.
   - For matrix comparisons, use `toEqual` to check equality.

4. **Error Handling**:
   - Use `toThrow` to check for the expected error message when passing an invalid axis.

This TypeScript code preserves the original functionality and logic of the Python unittest test cases, with appropriate adjustments for Jest's assertion methods and TypeScript's static type system.