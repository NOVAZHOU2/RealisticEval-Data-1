Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite with appropriate assertions.

### Python Code:
```python
import unittest

class TestConvertToCommaSeparated(unittest.TestCase):
    def test_basic_separators(self):
        self.assertEqual(convert_to_comma_separated("apple;banana*orange/mango"), "apple,banana,orange,mango",
                         "Failed to convert basic separators.")

    def test_mixed_separators(self):
        self.assertEqual(convert_to_comma_separated("grapes;lemon/melon*kiwi;litchi"), "grapes,lemon,melon,kiwi,litchi",
                         "Failed to convert mixed separators in a string.")

    def test_mixed_separators2(self):
        self.assertEqual(convert_to_comma_separated("grapes/lemon/melon*kiwi*litchi"), "grapes,lemon,melon,kiwi,litchi",
                         "Failed to convert mixed separators in a string.")

    def test_no_separators(self):
        self.assertEqual(convert_to_comma_separated("watermelon"), "watermelon",
                         "Failed when no separators are present.")
```

### Equivalent C++ Code Using Catch2:

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <regex>

// Converts input strings that contain multiple separators (for example, *, ;, /) to comma-separated formatted strings
std::string convert_to_comma_separated(const std::string& input_string) {
    // The pattern includes *, ;, /, -, :
    std::regex pattern("[\\*;/-:]");
    std::string comma_separated_string = std::regex_replace(input_string, pattern, ",");
    return comma_separated_string;
}

TEST_CASE("TestConvertToCommaSeparated", "[convert_to_comma_separated]") {
    SECTION("test_basic_separators") {
        CHECK(convert_to_comma_separated("apple;banana*orange/mango") == "apple,banana,orange,mango");
        INFO("Failed to convert basic separators.");
    }

    SECTION("test_mixed_separators") {
        CHECK(convert_to_comma_separated("grapes;lemon/melon*kiwi;litchi") == "grapes,lemon,melon,kiwi,litchi");
        INFO("Failed to convert mixed separators in a string.");
    }

    SECTION("test_mixed_separators2") {
        CHECK(convert_to_comma_separated("grapes/lemon/melon*kiwi*litchi") == "grapes,lemon,melon,kiwi,litchi");
        INFO("Failed to convert mixed separators in a string.");
    }

    SECTION("test_no_separators") {
        CHECK(convert_to_comma_separated("watermelon") == "watermelon");
        INFO("Failed when no separators are present.");
    }
}
```

### Explanation:
1. **Headers**: Include the necessary headers (`<catch2/catch_test_macros.hpp>`, `<string>`, `<regex>`).
2. **Function Definition**: The `convert_to_comma_separated` function is defined to perform the conversion.
3. **Test Case**: The `TEST_CASE` macro is used to define a test case named `TestConvertToCommaSeperated`.
4. **Sections**: Each section corresponds to a specific test case from the Python unittest class.
5. **Assertions**: The `CHECK` macro is used to assert the expected results. `INFO` is used to provide additional information if the test fails.

This C++ code uses Catch2 to perform the same tests as the Python unittest class, ensuring that the functionality and logic are preserved.