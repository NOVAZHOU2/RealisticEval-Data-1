Sure! Below is the equivalent C++ code for your Python function `convert_to_comma_separated`. This C++ code uses the `<string>` and `<algorithm>` libraries to achieve the same functionality.

```cpp
#include <iostream>
#include <string>
#include <algorithm>

std::string convertToCommaSeparated(const std::string& inputString) {
    std::string result = inputString;
    
    // Replace '*', ';', '/', '-', ':' with ','
    std::replace(result.begin(), result.end(), '*', ',');
    std::replace(result.begin(), result.end(), ';', ',');
    std::replace(result.begin(), result.end(), '/', ',');
    std::replace(result.begin(), result.end(), '-', ',');
    std::replace(result.begin(), result.end(), ':', ',');

    return result;
}

int main() {
    std::string input = "example*string;with/separators-and:colons";
    std::string output = convertToCommaSeparated(input);
    std::cout << "Input: " << input << std::endl;
    std::cout << "Output: " << output << std::endl;
    return 0;
}
```

### Explanation:
1. **Include Necessary Headers**: We include the necessary headers (`<iostream>`, `<string>`, and `<algorithm>`) for input/output operations, string manipulation, and algorithmic functions respectively.
2. **Function Definition**:
   - `convertToCommaSeparated` takes a constant reference to a `std::string` as its parameter and returns a `std::string`.
   - Inside the function, we create a copy of the input string called `result`.
   - We use the `std::replace` function from the `<algorithm>` library to replace each of the specified characters (`'*'`, `';'`, `'/'`, `'-'`, `':'`) with a comma in the `result` string.
3. **Main Function**:
   - In the `main` function, we demonstrate the usage of `convertToCommaSeparated` by passing an example string and printing both the input and output.

This C++ code should work similarly to your original Python function, converting any occurrences of the specified separators into commas.