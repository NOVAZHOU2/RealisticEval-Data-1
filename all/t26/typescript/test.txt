Certainly! Here is the equivalent TypeScript code using Jest for testing the `convertToCommaSeparated` function. The test cases will be written using Jest's assertion methods to ensure the functionality is preserved.

### TypeScript Code with Jest Testing

First, ensure you have Jest installed in your project:
```sh
npm install --save-dev jest ts-jest @types/jest
```

Add the necessary Jest configuration to your `tsconfig.json`:
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react",
    "lib": ["es6", "dom"]
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"],
  "jest": {
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    },
    "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.tsx?$",
    "moduleFileExtensions": ["ts", "tsx", "js", "jsx", "json", "node"]
  }
}
```

### TypeScript Function and Jest Tests

Here is the TypeScript code with Jest tests:

```typescript
import { replace } from 'lodash';

/**
 * Converts an input string with multiple separators to a comma-separated string.
 * Now handles additional separators: hyphens (-) and colons (:).
 *
 * @param inputString - The input string containing various separators like *, ;, /, -, :.
 * @returns A comma-separated string where all specified separators have been replaced with commas.
 */
function convertToCommaSeparated(inputString: string): string {
    // The pattern includes *, ;, /, -, :
    const pattern = /[\*;\/\-:]/g;  // Correctly escaped hyphen and included colon in the character class
    const commaSeparatedString = inputString.replace(pattern, ',');
    return commaSeparatedString;
}

describe('convertToCommaSeparated', () => {
    it('should convert basic separators', () => {
        expect(convertToCommaSeparated("apple;banana*orange/mango")).toBe("apple,banana,orange,mango");
    });

    it('should convert mixed separators in a string', () => {
        expect(convertToCommaSeparated("grapes;lemon/melon*kiwi;litchi")).toBe("grapes,lemon,melon,kiwi,litchi");
    });

    it('should convert mixed separators in another string', () => {
        expect(convertToCommaSeparated("grapes/lemon/melon*kiwi*litchi")).toBe("grapes,lemon,melon,kiwi,litchi");
    });

    it('should handle strings without separators', () => {
        expect(convertToCommaSeparated("watermelon")).toBe("watermelon");
    });
});
```

### Explanation:
1. **Function Definition**: The `convertToCommaSeparated` function is defined with a clear type signature for the input parameter (`inputString`) and the return type (`string`).

2. **JSDoc Documentation**: The JSDoc-style documentation comment is added to provide detailed information about the function, its parameters, and return value.

3. **Regular Expression Pattern**: The regular expression pattern `[\*;\/\-:]` is used to match the specified separators.

4. **String Replacement**: The `replace` method is used to replace all occurrences of the specified separators with commas.

5. **Jest Testing**: The `describe` block is used to group the test cases, and each test case uses `it` blocks with `expect` assertions to verify the expected behavior.

6. **Example Usage**: Each test case checks the function against different input strings to ensure it behaves correctly.

This TypeScript code preserves the original functionality and structure of the Python code, ensuring that the input string is converted to a comma-separated string by replacing the specified separators. The Jest tests ensure that the function works as expected.