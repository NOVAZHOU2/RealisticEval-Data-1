Sure! Below is the equivalent TypeScript test case using Jest for the provided Python unittest test class:

```typescript
import { describe, it, expect } from '@jest/globals';

function convertToCommaSeparated(inputString: string): string {
    /**
     * Convert input strings that contain multiple separators (for example, * ; /) to comma-separated formatted strings
     *
     * @param inputString - The input string containing various separators like *, ;, /, -, :
     * @returns A comma-separated string where all specified separators have been replaced with commas.
     */
    return inputString.replace(/[*;\/\-:]/g, ',');
}

describe('convertToCommaSeparated', () => {
    it('should replace multiple separators with commas', () => {
        const input = "apple*banana;cherry/orange\\grape";
        const expectedOutput = "apple,banana,cherry,orange,grape";
        expect(convertToCommaSeparated(input)).toBe(expectedOutput);
    });

    it('should handle empty string', () => {
        const input = "";
        const expectedOutput = "";
        expect(convertToCommaSeparated(input)).toBe(expectedOutput);
    });

    it('should not replace other characters', () => {
        const input = "hello world!";
        const expectedOutput = "hello world!";
        expect(convertToCommaSeparated(input)).toBe(expectedOutput);
    });
});
```

### Explanation:
1. **Function Definition**: The `convertToCommaSeparated` function is defined in TypeScript. It uses a regular expression to replace all occurrences of the specified separators (`*, ;, /, -, :`) with commas.

2. **Test Suite**: We use Jest's `describe` and `it` functions to create a test suite for our function.

3. **Tests**:
   - **Multiple Separators**: This test checks if the function correctly replaces multiple separators with commas.
   - **Empty String**: This test ensures that an empty string returns an empty string.
   - **No Replacements Needed**: This test verifies that the function does not modify strings without any of the specified separators.

This TypeScript test case should work similarly to your original Python unittest test class.