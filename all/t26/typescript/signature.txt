Certainly! Here is the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Converts an input string with multiple separators to a comma-separated string.
 * Now handles additional separators: hyphens (-) and colons (:).
 *
 * @param inputString - The input string containing various separators like *, ;, /, -, :.
 * @returns A comma-separated string where all specified separators have been replaced with commas.
 */
function convertToCommaSeparated(inputString: string): string {
    // The pattern includes *, ;, /, -, :
    const pattern = /[\*;\/\-:]/g;  // Correctly escaped hyphen and included colon in the character class
    const commaSeparatedString = inputString.replace(pattern, ',');
    return commaSeparatedString;
}

// Example usage
console.log(convertToCommaSeparated("a*b;c/d-e:f"));  // Output: "a,b,c,d,e,f"
```

### Explanation:
1. **Function Definition**: The function `convertToCommaSeparated` is defined with a clear type signature for the input parameter (`inputString`) and the return type (`string`).

2. **JSDoc Documentation**: The JSDoc-style documentation comment is added to provide detailed information about the function, its parameters, and return value.

3. **Regular Expression Pattern**: The regular expression pattern `[\*;\/\-:]` is used to match the specified separators. Note that in TypeScript (and JavaScript), you need to use forward slashes to define regex patterns.

4. **String Replacement**: The `replace` method is used to replace all occurrences of the specified separators with commas.

5. **Example Usage**: An example usage of the function is provided to demonstrate how it works.

This TypeScript code preserves the original functionality and structure of the Python code, ensuring that the input string is converted to a comma-separated string by replacing the specified separators.