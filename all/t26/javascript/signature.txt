Certainly! Here is the equivalent JavaScript code with the function signature and comments rewritten to conform to JavaScript documentation standards using JSDoc format:

```javascript
/**
 * Converts input strings that contain multiple separators (for example, *, ;, /) to comma-separated formatted strings.
 *
 * @param {string} inputString - The input string containing various separators like *, ;, /, -, :
 * @returns {string} A comma-separated string where all specified separators have been replaced with commas.
 */
function convertToCommaSeparated(inputString) {
    // The pattern includes *, ;, /, -, :
    const pattern = /[\*;\/\-:]/g;  // Correctly escaped hyphen and included colon in the character class
    const commaSeparatedString = inputString.replace(pattern, ',');
    return commaSeparatedString;
}

// Example usage
console.log(convertToCommaSeparated("a*b;c/d-e:f"));  // Output: "a,b,c,d,e,f"
```

### Explanation:
1. **Function Definition**:
   - The function is defined using the `function` keyword.
   - The function name `convertToCommaSeparated` follows camelCase convention.

2. **JSDoc Documentation**:
   - The JSDoc comment block provides a clear description of the function's purpose, parameters, and return value.
   - The `@param` tag specifies the parameter type and description.
   - The `@returns` tag specifies the return type and description.

3. **Pattern Creation**:
   - The regular expression pattern `[\*;\/\-:]` is created using a JavaScript regex literal.
   - The `g` flag ensures that all occurrences are replaced globally.

4. **String Replacement**:
   - The `replace` method is used on the `inputString` to replace all occurrences of the specified separators with commas.

5. **Return Statement**:
   - The modified string is returned from the function.

6. **Example Usage**:
   - An example call to the function demonstrates how it works with a sample input string.

This JavaScript code preserves the purpose and structure of the original Python code while adhering to JavaScript documentation standards.