Sure! Here is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function convertToCommaSeparated(inputString) {
    /**
     * Converts an input string with multiple separators to a comma-separated string.
     * Now handles additional separators: hyphens (-) and colons (:).
     *
     * @param {string} inputString - The input string containing various separators like *, ;, /, -, :
     * @returns {string} A comma-separated string where all specified separators have been replaced with commas.
     */
    // The pattern includes *, ;, /, -, :
    const pattern = /[\*;\/\-:]/g;  // Correctly escaped hyphen and included colon in the character class
    const commaSeparatedString = inputString.replace(pattern, ',');
    return commaSeparatedString;
}

// Example usage
console.log(convertToCommaSeparated("a*b;c/d-e:f"));  // Output: "a,b,c,d,e,f"
```

### Explanation:
1. **Function Definition**: 
   - In JavaScript, we use `function` keyword to define a function.
   - The function name is `convertToCommaSeparated`, which follows camelCase convention.

2. **Documentation**:
   - The JSDoc comment provides a clear description of the function's purpose, parameters, and return value.

3. **Pattern Creation**:
   - The regular expression pattern `[\*;\/\-:]` is created using a JavaScript regex literal.
   - The `g` flag ensures that all occurrences are replaced globally.

4. **String Replacement**:
   - The `replace` method is used on the `inputString` to replace all occurrences of the specified separators with commas.

5. **Return Statement**:
   - The modified string is returned from the function.

6. **Example Usage**:
   - An example call to the function demonstrates how it works with a sample input string.

This JavaScript code should behave identically to the original Python code when given the same input.