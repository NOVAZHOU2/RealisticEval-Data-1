First, let's convert the Python function `find_placeholders` to JavaScript:

```javascript
function findPlaceholders(text) {
    const regex = /\{\{(\s*[\w\s]+\s*)\}\}/g;
    const matches = [];
    let match;

    while ((match = regex.exec(text)) !== null) {
        matches.push(match[1].trim());
    }

    return matches;
}

module.exports = findPlaceholders;
```

Next, we will create a test file for this function using Jest. We'll define the equivalent test cases and ensure that the logic is maintained.

Hereâ€™s how you can write the Jest test suite:

```javascript
const findPlaceholders = require('./findPlaceholders');

describe('findPlaceholders', () => {
    it('should correctly identify placeholders', () => {
        const text = 'Hello {{ world }}! This is a test {{ example }}.';
        const expected = ['world', 'example'];
        expect(findPlaceholders(text)).toEqual(expected);
    });

    it('should handle empty strings', () => {
        const text = '';
        const expected = [];
        expect(findPlaceholders(text)).toEqual(expected);
    });

    it('should handle strings without placeholders', () => {
        const text = 'No placeholders here.';
        const expected = [];
        expect(findPlaceholders(text)).toEqual(expected);
    });

    it('should handle multiple placeholders', () => {
        const text = 'Multiple {{ placeholders }} and {{ more }} placeholders.';
        const expected = ['placeholders', 'more'];
        expect(findPlaceholders(text)).toEqual(expected);
    });

    it('should handle placeholders with spaces', () => {
        const text = 'Placeholder {{ with spaces }} and {{ another one }}.';
        const expected = ['with spaces', 'another one'];
        expect(findPlaceholders(text)).toEqual(expected);
    });
});
```

### Explanation:
1. **Function Definition**:
   - The `findPlaceholders` function is defined to match placeholders in the format `{{ placeholder }}`.
   - It uses a regular expression to find all occurrences of placeholders and returns them as an array.

2. **Test Cases**:
   - Each `it` block defines a specific test case.
   - The `expect` function is used to assert the expected behavior of the `findPlaceholders` function.

3. **Data Points**:
   - Different inputs are tested to cover various scenarios such as empty strings, strings without placeholders, strings with multiple placeholders, and placeholders with spaces.

4. **Mapping Assertions**:
   - The `toEqual` matcher is used to ensure that the returned array matches the expected array.

This setup ensures that the functionality and logic of the original Python unittest are preserved in the Jest test suite.