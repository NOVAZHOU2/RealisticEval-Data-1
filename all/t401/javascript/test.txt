Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will convert each test case and ensure that the functionality and logic are preserved. I'll also document any necessary changes due to language differences between Python and JavaScript.

### Python Code:
```python
import unittest

class TestFindPlaceholders(unittest.TestCase):

    def test_multiple_placeholders(self):
        """Test string with multiple placeholders."""
        input_text = "Here are some placeholders: {{ placeholder1 }}, {{ placeholder2 }}, and {{ placeholder3 }}."
        expected_output = ['placeholder1', 'placeholder2', 'placeholder3']
        self.assertEqual(find_placeholders(input_text), expected_output)

    def test_no_placeholders(self):
        """Test string with no placeholders."""
        input_text = "This string has no placeholders."
        expected_output = []
        self.assertEqual(find_placeholders(input_text), expected_output)

    def test_single_placeholder(self):
        """Test string with a single placeholder."""
        input_text = "The only placeholder is {{ singlePlaceholder }}."
        expected_output = ['singlePlaceholder']
        self.assertEqual(find_placeholders(input_text), expected_output)

    def test_placeholder_with_spaces(self):
        """Test string with placeholders that have extra spaces."""
        input_text = "Placeholders with spaces: {{  placeholder_with_spaces  }} and {{ placeholder2 }}."
        expected_output = ['placeholder_with_spaces', 'placeholder2']
        self.assertEqual(find_placeholders(input_text), expected_output)
```

### JavaScript Code with Jest Testing Framework:

```javascript
// Import the function to be tested
const findPlaceholders = require('./findPlaceholders');

describe('TestFindPlaceholders', () => {
    it('test string with multiple placeholders', () => {
        const inputText = "Here are some placeholders: {{ placeholder1 }}, {{ placeholder2 }}, and {{ placeholder3 }}.";
        const expectedOutput = ['placeholder1', 'placeholder2', 'placeholder3'];
        expect(findPlaceholders(inputText)).toEqual(expectedOutput);
    });

    it('test string with no placeholders', () => {
        const inputText = "This string has no placeholders.";
        const expectedOutput = [];
        expect(findPlaceholders(inputText)).toEqual(expectedOutput);
    });

    it('test string with a single placeholder', () => {
        const inputText = "The only placeholder is {{ singlePlaceholder }}.";
        const expectedOutput = ['singlePlaceholder'];
        expect(findPlaceholders(inputText)).toEqual(expectedOutput);
    });

    it('test string with placeholders that have extra spaces', () => {
        const inputText = "Placeholders with spaces: {{  placeholder_with_spaces  }} and {{ placeholder2 }}.";
        const expectedOutput = ['placeholder_with_spaces', 'placeholder2'];
        expect(findPlaceholders(inputText)).toEqual(expectedOutput);
    });
});
```

### Explanation:
1. **Import the Function**:
   - The `findPlaceholders` function is imported from the file `findPlaceholders.js`.

2. **Describe Block**:
   - The `describe` block is used to group the test cases under a common description.

3. **It Blocks**:
   - Each `it` block represents a specific test case.
   - The description of each test case is provided as a string argument to `it`.

4. **Expect Assertions**:
   - The `expect` function is used to assert the expected output.
   - `toEqual` is used to check if the actual output matches the expected output.

### Helper Function `findPlaceholders`:
Ensure that the `findPlaceholders` function is implemented correctly in JavaScript. Here is the implementation:

```javascript
/**
 * Find and return an array of all placeholders in the format {{ placeholder }} from the input text.
 *
 * @param {string} text - The input string containing potential placeholders.
 * @returns {Array} An array of matching placeholders.
 */
function findPlaceholders(text) {
    // Use a regular expression to find placeholders in the specified format
    const placeholders = text.matchAll(/{{\s*([\w\s]+)\s*}}/g);
    const results = [];
    for (const match of placeholders) {
        results.push(match[1].trim());
    }
    return results;
}

module.exports = findPlaceholders;
```

### Summary:
- The Jest test suite is structured using `describe` and `it` blocks.
- Each test case uses `expect` with `toEqual` to verify the correctness of the `findPlaceholders` function.
- The `findPlaceholders` function is implemented to handle placeholders with and without spaces.

This conversion ensures that the functionality and logic of the tests are preserved while adhering to Jest's testing conventions.