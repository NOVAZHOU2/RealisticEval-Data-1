Sure! Below is the equivalent JavaScript code for the provided Python function:

```javascript
function findPlaceholders(text) {
    /**
     * Find and return an array of all placeholders in the format {{ placeholder }} from the input text.
     *
     * @param {string} text - The input string containing potential placeholders.
     * @returns {Array} - An array of matching placeholders.
     */

    // Regular expression to match placeholders
    const regex = /{{\s*[^{}]*\s*}}/g;

    // Find all matches using regex
    let matches;
    const result = [];

    while ((matches = regex.exec(text)) !== null) {
        result.push(matches[0].trim());
    }

    return result;
}

// Example usage:
const text = "This is a sample text with placeholders like {{ example1 }} and {{ example2 }}.";
console.log(findPlaceholders(text));
```

### Explanation:
- **Regular Expression**: `/{{\s*[^{}]*\s*}}/g`
  - This regex pattern is used to match placeholders that start with `{{`, followed by any number of whitespace characters (`\s*`), then any non-curly brace characters (`[^{}]`), more whitespace characters (`\s*`), and end with `}}`.
  
- **regex.exec(text)**: This method executes the regular expression search again on the same string. It returns the next result or `null` if there are no more matches.

- **result.push(matches[0].trim())**: Each matched placeholder is trimmed of leading/trailing whitespace and added to the `result` array.

- **while ((matches = regex.exec(text)) !== null)**: This loop continues until there are no more matches found.

This JavaScript function should work similarly to your original Python function, extracting placeholders from the given text.