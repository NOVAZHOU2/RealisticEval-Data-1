Here's the converted C++ code:

```cpp
#include <regex>
#include <string>
#include <vector>

// Find and return a list of all placeholders in the format {{ placeholder }} from the input text.
//
// Parameters:
//     text: The input string containing potential placeholders.
//
// Returns:
//     A vector of matching placeholders.
std::vector<std::string> find_placeholders(const std::string& text) {
    std::vector<std::string> placeholders;
    std::regex pattern("\\{\\{\\s*(.*?)\\s*\\}\\}");
    std::smatch matches;

    auto begin = std::sregex_iterator(text.begin(), text.end(), pattern);
    auto end = std::sregex_iterator();

    for (std::sregex_iterator i = begin; i != end; ++i) {
        std::smatch match = *i;
        placeholders.push_back(match[1]);
    }

    return placeholders;
}
```

In this translation, I used `std::regex` and `std::smatch` from the C++ Standard Library to find the placeholders in the given text. The function returns a `std::vector<std::string>` which is equivalent to returning a list of strings in Python. The comments and documentation have been adjusted to fit C++ conventions.