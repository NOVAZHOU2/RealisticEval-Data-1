Certainly! Below is the C++ version of your Python function `find_placeholders` with appropriate comments:

```cpp
#include <iostream>
#include <regex>
#include <vector>
#include <string>

/**
 * @brief Find and return a list of all placeholders in the format {{ placeholder }} from the input text.
 *
 * @param text The input string containing potential placeholders.
 * @return std::vector<std::string> A vector of matching placeholders.
 */
std::vector<std::string> findPlaceholders(const std::string& text) {
    // Define the regular expression pattern for placeholders
    std::regex pattern(R"(\{\{([^{}]+)\}\})");

    // Create a vector to store the found placeholders
    std::vector<std::string> placeholders;

    // Iterate through all matches in the input text
    auto words_begin = std::sregex_iterator(text.begin(), text.end(), pattern);
    auto words_end = std::sregex_iterator();

    for (std::sregex_iterator i = words_begin; i != words_end; ++i) {
        std::smatch match = *i;
        placeholders.push_back(match.str(1)); // Add the captured group (placeholder name)
    }

    return placeholders;
}

int main() {
    std::string text = "This is a test with {{ placeholder1 }} and {{ placeholder2 }}.";
    std::vector<std::string> placeholders = findPlaceholders(text);

    for (const std::string& placeholder : placeholders) {
        std::cout << placeholder << std::endl;
    }

    return 0;
}
```

### Explanation:
- **Regular Expression**: The pattern `R"(\{\{([^{}]+)\}\})"` is used to match placeholders in the format `{{ placeholder }}`. It captures the content inside the double curly braces.
- **Vector**: A `std::vector<std::string>` is used to store the matched placeholders.
- **Regex Iterator**: `std::sregex_iterator` is used to iterate over all matches of the regular expression in the input string.
- **Capturing Group**: `match.str(1)` extracts the content inside the double curly braces, which is the actual placeholder name.

This C++ code should provide similar functionality to your original Python function.