Here is an equivalent C++ code using regular expressions:

```c++
#include <iostream>
#include <regex>
#include <string>
#include <vector>

std::vector<std::string> findPlaceholders(const std::string& text) {
    std::regex pattern(R"(\{\{.*?\}\})");
    std::sregex_iterator iter(text.begin(), text.end(), pattern);
    std::sregex_iterator end;
    
    std::vector<std::string> result;
    while(iter != end) {
        result.push_back((*iter)[0].str());
        ++iter;
    }
    
    return result;
}

int main() {
    std::string text = "This is a test string with placeholders like {{name}} and {{age}}, and some normal text.";
    std::vector<std::string> placeholders = findPlaceholders(text);

    for(std::string s : placeholders) {
        std::cout << s << '\n';
    }

    return 0;
}
```

Please note that the above C++ code assumes that you have C++11 or later installed, because it uses `std::regex` which was introduced in C++11. If you're compiling on an older version of C++, you may need to use a different regex library or upgrade your compiler. 

Also, please be aware that the C++ code does not handle escaping curly braces within the placeholder content as the Python code does. This might cause incorrect results if there are nested curly braces in the placeholder content. If such cases can occur in your actual usage, additional logic will be needed to handle them correctly.