Below is the equivalent C++ code using Catch2 for the provided Python unittest code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <vector>
#include <regex>

// Function to find placeholders in the given text
std::vector<std::string> find_placeholders(const std::string& text) {
    std::vector<std::string> placeholders;
    std::regex pattern(R"(\{\{ (\w+) \}\})");
    std::smatch matches;

    std::string::const_iterator searchStart(text.cbegin());
    while (std::regex_search(searchStart, text.cend(), matches, pattern)) {
        placeholders.push_back(matches[0]);
        searchStart = matches.suffix().first;
    }

    return placeholders;
}

// Test fixture for find_placeholders function
TEST_CASE("find_placeholders") {
    // Test case 1: Empty string
    SECTION("Empty string should return empty vector") {
        auto result = find_placeholders("");
        REQUIRE(result.empty());
    }

    // Test case 2: String with no placeholders
    SECTION("String without placeholders should return empty vector") {
        auto result = find_placeholders("This is a test string.");
        REQUIRE(result.empty());
    }

    // Test case 3: String with placeholders
    SECTION("String with placeholders should return them") {
        auto result = find_placeholders("Hello {{ world }}, how are you {{ doing }}?");
        REQUIRE(result == std::vector<std::string>({"{{ world }}", "{{ doing }}"}));
    }
}
```

### Explanation:
1. **Function Definition**: The `find_placeholders` function takes a string as input and returns a vector of strings containing all the placeholders found in the format `{{ placeholder }}`.

2. **Regular Expression Pattern**: The regular expression pattern `\{\{ (\w+) \}\}` is used to match the placeholders in the format `{{ placeholder }}`. The parentheses capture the actual placeholder name.

3. **Regex Search Loop**: The loop continues searching for matches until no more matches are found. Each match is added to the `placeholders` vector.

4. **Test Cases**:
   - **Empty String**: Tests if an empty string returns an empty vector.
   - **No Placeholders**: Tests if a string with no placeholders returns an empty vector.
   - **With Placeholders**: Tests if a string with placeholders returns the correct vector of placeholders.

5. **Assertions**: `REQUIRE` is used to assert the expected results for each test case.