Sure! Here is the equivalent TypeScript code, including the definition of the function `findPlaceholders` with proper typing:

```typescript
import * as re from 'xregexp';

function findPlaceholders(text: string): string[] {
    /**
     * Find and return a list of all placeholders in the format {{ placeholder }} from the input text.
     *
     * @param text - The input string containing potential placeholders.
     * @returns An array of matching placeholders.
     */
    // Use a regular expression to find placeholders in the specified format
    const placeholders = re.match(text, /{{\s*([\w]+)\s*}}/g);
    return placeholders ? placeholders.map(match => match.trim()) : [];
}

// Example usage
const exampleText = "Hello, {{ name }}! Welcome to {{ place }}.";
console.log(findPlaceholders(exampleText));
```

### Explanation:
1. **Importing Regular Expression Library**: TypeScript does not have a built-in `re` module like Python, so we use `xregexp` which provides similar functionality. You can install it using npm or yarn.
2. **Function Definition**: The function `findPlaceholders` is defined with a parameter `text` of type `string` and returns an array of strings (`string[]`).
3. **Regular Expression**: The regular expression `/{{\s*([\w]+)\s*}}/g` is used to find all occurrences of placeholders in the specified format.
4. **Return Value**: The function returns an array of matching placeholders. If no matches are found, it returns an empty array.

To use this code, you need to install `xregexp`:
```sh
npm install xregexp
```

This setup ensures that the TypeScript code is equivalent in functionality to the provided Python code.