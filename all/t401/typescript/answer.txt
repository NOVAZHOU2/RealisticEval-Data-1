Sure! Here is the equivalent TypeScript code, converted with proper type definitions and adjusted for TypeScript's syntax:

```typescript
import * as re from 'xregexp';

function findPlaceholders(text: string): string[] {
    /**
     * Find and return an array of all placeholders in the format {{ placeholder }} from the input text.
     *
     * @param text - The input string containing potential placeholders.
     * @returns An array of matching placeholders.
     */
    // Use a regular expression to find placeholders in the specified format
    const placeholders = re.match(text, /\{\{\s*([\w]+)\s*\}\}/g);
    return placeholders ? placeholders.map(match => match.trim().substring(2, match.length - 2).trim()) : [];
}

// Example usage
const exampleText = "Hello, {{ name }}! Welcome to {{ place }}.";
console.log(findPlaceholders(exampleText));
```

### Explanation:
1. **Imports**: TypeScript does not have a built-in `re` module like Python. Instead, we use `xregexp` which provides similar functionality. You need to install `xregexp` via npm or yarn before running this code.
   ```sh
   npm install xregexp
   ```

2. **Function Definition**: The function `findPlaceholders` is defined with a parameter and return type annotation (`string` for the input and `string[]` for the output).

3. **Regular Expression**: The regular expression used to find placeholders is slightly different to handle the whitespace and the exact format `{{ ... }}`. The `g` flag is used to perform a global search.

4. **Placeholder Extraction**: The placeholders are extracted using the `map` function to trim and remove the surrounding double curly braces.

5. **Return Value**: If no matches are found, it returns an empty array. If matches are found, it returns the array of placeholders.

This conversion ensures that the functionality remains the same while adapting to TypeScript's static type system and idiomatic practices.