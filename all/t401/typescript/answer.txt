Sure, here is the equivalent TypeScript code for your Python function:

```typescript
function findPlaceholders(text: string): string[] {
    /**
     * Find and return an array of all placeholders in the format {{ placeholder }} from the input text.
     *
     * @param {string} text - The input string containing potential placeholders.
     * @returns {string[]} An array of matching placeholders.
     */
    
    const regex = /\{\{([^}]+)\}\}/g;
    let match: RegExpExecArray | null;
    const placeholders: string[] = [];

    while ((match = regex.exec(text)) !== null) {
        placeholders.push(match[1]);
    }

    return placeholders;
}
```

### Explanation:
- **Regex Pattern**: `\{\{([^}]+)\}\}`
  - `{{`: Matches the literal characters "{{".
  - `([^}]+)`: Captures one or more characters that are not "}" into a group.
  - `\}}`: Matches the literal characters "}}".

- **RegExpExecArray**: This type represents the result of calling the `exec()` method on a regular expression.

- **Loop**: The `while` loop iterates over all matches found by the regex pattern, adding each captured placeholder to the `placeholders` array.

- **Return**: Finally, the function returns the array of placeholders.

This TypeScript function should work similarly to your original Python function.