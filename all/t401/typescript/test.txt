Certainly! Here’s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest test cases will be converted to Jest test cases with appropriate assertions and type annotations.

### TypeScript Code with Jest Tests

First, ensure you have Jest installed in your project:
```sh
npm install --save-dev jest ts-jest @types/jest
```

Add Jest configuration to your `tsconfig.json`:
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "target": "es6",
    "outDir": "./dist",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

Add Jest configuration to your `jest.config.js`:
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
};
```

Now, let’s write the TypeScript test class:

```typescript
import { findPlaceholders } from './path/to/findPlaceholders'; // Import the findPlaceholders function

describe('TestFindPlaceholders', () => {
  it('test string with multiple placeholders', () => {
    const inputText = "Here are some placeholders: {{ placeholder1 }}, {{ placeholder2 }}, and {{ placeholder3 }}.";
    const expectedOutput = ['placeholder1', 'placeholder2', 'placeholder3'];
    expect(findPlaceholders(inputText)).toEqual(expectedOutput);
  });

  it('test string with no placeholders', () => {
    const inputText = "This string has no placeholders.";
    const expectedOutput = [];
    expect(findPlaceholders(inputText)).toEqual(expectedOutput);
  });

  it('test string with a single placeholder', () => {
    const inputText = "The only placeholder is {{ singlePlaceholder }}.";
    const expectedOutput = ['singlePlaceholder'];
    expect(findPlaceholders(inputText)).toEqual(expectedOutput);
  });

  it('test string with placeholders that have extra spaces', () => {
    const inputText = "Placeholders with spaces: {{  placeholder_with_spaces  }} and {{ placeholder2 }}.";
    const expectedOutput = ['placeholder_with_spaces', 'placeholder2'];
    expect(findPlaceholders(inputText)).toEqual(expectedOutput);
  });
});
```

### Explanation:
1. **Importing the Function**:
   - Import the `findPlaceholders` function from the appropriate path.

2. **Jest Describe Block**:
   - Use the `describe` block to group the test cases under a common description.

3. **Test Cases**:
   - Each test case is defined using the `it` function.
   - The `expect` function is used to assert the expected output using `toEqual`.

### Example Usage
Here’s how you can run the tests:

1. **Install Dependencies**:
   ```sh
   npm install --save-dev jest ts-jest @types/jest
   ```

2. **Configure Jest**:
   - Update your `tsconfig.json` and `jest.config.js` files as shown above.

3. **Run Tests**:
   ```sh
   npx jest
   ```

This setup ensures that the TypeScript tests are equivalent to the provided Python unittest test cases, preserving the functionality and logic of the tests.