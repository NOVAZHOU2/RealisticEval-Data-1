Certainly! Here is the equivalent Java code with proper Javadoc comments and method signature:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * A class to find placeholders in a given text.
 */
public class Answer {

    /**
     * Finds and returns a list of all placeholders in the format {{ placeholder }} from the input text.
     *
     * @param text The input string containing potential placeholders.
     * @return A list of matching placeholders.
     */
    public static List<String> findPlaceholders(String text) {
        // Use a regular expression to find placeholders in the specified format
        List<String> placeholders = new ArrayList<>();
        Pattern pattern = Pattern.compile("\\{\\{\\s*([\\w]+)\\s*}}");
        Matcher matcher = pattern.matcher(text);

        while (matcher.find()) {
            placeholders.add(matcher.group(1));
        }

        return placeholders;
    }

    // Example usage
    public static void main(String[] args) {
        String exampleText = "Hello, {{name}}! Welcome to {{place}}.";
        List<String> placeholders = findPlaceholders(exampleText);
        System.out.println(placeholders);
    }
}
```

### Explanation:
1. **Package Declaration**: 
   ```java
   package org.real.temp;
   ```

2. **Class Definition**:
   ```java
   public class Answer {
   ```

3. **Javadoc Comments**:
   ```java
   /**
    * Finds and returns a list of all placeholders in the format {{ placeholder }} from the input text.
    *
    * @param text The input string containing potential placeholders.
    * @return A list of matching placeholders.
    */
   ```

4. **Method Definition**:
   ```java
   public static List<String> findPlaceholders(String text) {
       // Use a regular expression to find placeholders in the specified format
       List<String> placeholders = new ArrayList<>();
       Pattern pattern = Pattern.compile("\\{\\{\\s*([\\w]+)\\s*}}");
       Matcher matcher = pattern.matcher(text);

       while (matcher.find()) {
           placeholders.add(matcher.group(1));
       }

       return placeholders;
   }
   ```

5. **Example Usage**:
   ```java
   public static void main(String[] args) {
       String exampleText = "Hello, {{name}}! Welcome to {{place}}.";
       List<String> placeholders = findPlaceholders(exampleText);
       System.out.println(placeholders);
   }
   ```

This Java code preserves the functionality and structure of the original Python code, including the use of regular expressions to find placeholders in the specified format. The Javadoc comments provide clear documentation for the method.