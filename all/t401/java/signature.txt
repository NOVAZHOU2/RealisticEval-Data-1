Here is the equivalent Java code with comments:

```java
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Finds and returns a list of all placeholders in the format {{ placeholder }} from the input text.
 *
 * @param text the input string containing potential placeholders
 * @return a list of matching placeholders
 */
public List<String> findPlaceholders(String text) {
    // Create a Pattern object for regular expression
    Pattern pattern = Pattern.compile("\\{\\{[^}]*\\}\\}");

    // Create a Matcher object for input string
    Matcher matcher = pattern.matcher(text);

    // Initialize an empty ArrayList to store matched placeholders
    List<String> placeholders = new ArrayList<>();

    // Loop through all matches found by the Matcher
    while (matcher.find()) {
        // Add each match to the list
        placeholders.add(matcher.group());
    }

    // Return the list of matched placeholders
    return placeholders;
}
```
Please note that in Java, we use `List` instead of `list`, `Pattern` and `Matcher` classes from `java.util.regex` package for regex operations, and `ArrayList` class from `java.util` package for storing the results. Also, Python's `re.findall()` function is replaced by Java's `Matcher.find()` method inside a loop which continuously finds matches until there are no more matches left.