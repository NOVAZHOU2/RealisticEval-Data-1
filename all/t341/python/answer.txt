Hereâ€™s how to convert the provided TypeScript function into Python code. The Python version uses similar logic and regex for parsing the input string.
python
import re

def convert_time_hms_string_to_ms(time_str: str) -> int:
    """ 
    Converts a time string in the format "XhYmZs" (hours, minutes, seconds) into milliseconds.
    
    Args:
        time_str (str): The input string representing the time duration.
    
    Returns:
        int: The time in milliseconds.
    
    Raises:
        ValueError: If the input string does not match the expected format.
    """
    # Regular expression to parse the string for hours, minutes, and seconds
    regex = r'(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?'
    match = re.match(regex, time_str)
    
    # Raise an error if the string does not match the expected format
    if not match:
        raise ValueError(f'Cannot convert hms string "{time_str}" to ms!')

    # Parse hours, minutes, and seconds, defaulting to 0 if any group is missing
    hours = int(match.group(1) or '0')
    minutes = int(match.group(2) or '0')
    seconds = int(match.group(3) or '0')

    # Calculate the total milliseconds
    total_milliseconds = ((hours * 60 + minutes) * 60 + seconds) * 1000
    return total_milliseconds
Explanation of the Python Code:
Imports:
The re module is imported to use regular expressions for parsing the input string.
Function Definition:
The function convert_time_hms_string_to_ms is defined to take a single argument time_str of type str and return an integer.
Docstring:
The docstring describes the function's purpose, input arguments, return value, and possible exceptions.
Regular Expression:
The regex pattern r'(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?' is used to capture optional groups for hours, minutes, and seconds from the input string.
Matching the Regex:
The re.match function is used to match the input string against the regex pattern. If no match is found, a ValueError is raised, similar to throwing an error in TypeScript.
Parsing Values:
The group method retrieves matched groups for hours, minutes, and seconds, defaulting to '0' if any group is missing. The results are converted to integers.
Calculating Milliseconds:
The total milliseconds are calculated based on the formula and returned.
Example Usage:
You can use the function as follows:
python
try:
    print(convert_time_hms_string_to_ms("2h30m45s"))  # Output: 9045000
    print(convert_time_hms_string_to_ms("45m"))        # Output: 2700000
    print(convert_time_hms_string_to_ms("20s"))         # Output: 20000
    print(convert_time_hms_string_to_ms("5h"))          # Output: 18000000
except ValueError as e:
    print(e)
This will convert the input time strings into milliseconds as intended.