Here's the equivalent C++ code for the provided TypeScript function:

```cpp
#include <iostream>
#include <regex>
#include <stdexcept>
#include <string>

long long convertTimeHmsStringToMs(const std::string& str) {
    // Regular expression to parse the string for hours, minutes, and seconds
    std::regex regex(R"((?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?)");
    std::smatch match;

    // Throw an error if the string does not match the expected format
    if (!std::regex_match(str, match, regex)) {
        throw std::invalid_argument("Cannot convert hms string \"" + str + "\" to ms!");
    }

    // Parse hours, minutes, and seconds, defaulting to 0 if any group is missing
    int hours = match[1].length() ? std::stoi(match[1].str()) : 0;
    int minutes = match[2].length() ? std::stoi(match[2].str()) : 0;
    int seconds = match[3].length() ? std::stoi(match[3].str()) : 0;

    // Calculate the total milliseconds
    long long totalMilliseconds = ((hours * 60 + minutes) * 60 + seconds) * 1000;
    return totalMilliseconds;
}

int main() {
    try {
        std::string timeString = "2h30m15s";
        long long milliseconds = convertTimeHmsStringToMs(timeString);
        std::cout << "Milliseconds: " << milliseconds << std::endl;
    } catch (const std::invalid_argument& e) {
        std::cerr << e.what() << std::endl;
    }
    return 0;
}
```

### Explanation:
- **Includes**: The code includes the necessary headers for handling strings, regular expressions, exceptions, and I/O.
- **Function**: `convertTimeHmsStringToMs` takes a string input and uses regex to match hours, minutes, and seconds.
- **Error Handling**: If the string does not match the expected format, it throws an `invalid_argument` exception.
- **Parsing**: It checks if each time component exists and converts them to integers, defaulting to `0` if absent.
- **Calculation**: The total milliseconds are calculated similarly to the TypeScript version.
- **Main Function**: Demonstrates usage of the conversion function and handles any exceptions.