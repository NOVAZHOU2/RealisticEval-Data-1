Sure! Here's how you can convert the JavaScript Jest test case to a TypeScript Jest test case using `describe`:

```typescript
import * as fs from 'fs';
import * as path from 'path';

/**
 * Converts the data object to JSON format and saves it to the specified file path.
 * @param {Object} data - The data object to be converted to JSON.
 * @param {string} outputFilePath - The file path where the JSON will be saved.
 */
function saveAsJSON(data: any, outputFilePath: string): void {
    const jsonContent = JSON.stringify(data, null, 2);
    fs.writeFileSync(outputFilePath, jsonContent);
}

// Test suite for saveAsJSON function
describe('saveAsJSON', () => {
    let tempFilePath: string;

    beforeEach(() => {
        // Create a temporary file path for testing
        tempFilePath = path.join(__dirname, 'temp.json');
    });

    afterEach(() => {
        // Clean up the temporary file after each test
        if (fs.existsSync(tempFilePath)) {
            fs.unlinkSync(tempFilePath);
        }
    });

    it('should save an object as JSON to the specified file path', () => {
        const testData = { name: 'John', age: 30 };
        saveAsJSON(testData, tempFilePath);

        expect(fs.existsSync(tempFilePath)).toBe(true);
        const fileContent = fs.readFileSync(tempFilePath, 'utf8');
        expect(fileContent).toEqual(JSON.stringify(testData, null, 2));
    });
});
```

### Explanation:
1. **Imports**: We import `fs` and `path` modules from Node.js to handle file operations and path manipulations respectively.
2. **TypeScript Function**: The `saveAsJSON` function is updated to accept type parameters (`any` for `data` and `string` for `outputFilePath`) and return `void`.
3. **Test Suite**: We use `describe` to create a test suite named `'saveAsJSON'`.
4. **Before/After Hooks**:
   - `beforeEach`: Creates a temporary file path before each test.
   - `afterEach`: Deletes the temporary file after each test to clean up.
5. **Test Case**: The `it` function contains a test case that checks if the `saveAsJSON` function correctly saves an object as JSON to the specified file path.

This TypeScript test case ensures that the `saveAsJSON` function works as expected when saving JSON data to a file.