Sure! Here's how you can convert your JavaScript code to TypeScript:

```typescript
import * as fs from 'fs';

/**
 * Converts the data object to JSON format and saves it to the specified file path.
 * @param {Record<string, any>} data - The data object to be converted to JSON.
 * @param {string} outputFilePath - The file path where the JSON will be saved.
 */
function saveAsJSON(data: Record<string, any>, outputFilePath: string): void {
    try {
        const jsonData = JSON.stringify(data, null, 2);
        fs.writeFileSync(outputFilePath, jsonData);
        console.log(`Data has been written to ${outputFilePath}`);
    } catch (error) {
        console.error(`Error writing to file: ${error}`);
    }
}
```

### Explanation:
1. **Importing `fs` module**: We use `import * as fs from 'fs';` instead of `const fs = require('fs');`.
2. **Type Annotations**:
   - `data: Record<string, any>`: This specifies that `data` is an object with string keys and values of any type.
   - `outputFilePath: string`: This specifies that `outputFilePath` is a string representing the file path.
   - `void`: This indicates that the function does not return anything.
3. **Error Handling**: Added a try-catch block to handle potential errors when writing to the file.

This TypeScript version maintains the functionality of your original JavaScript function while adding type safety.