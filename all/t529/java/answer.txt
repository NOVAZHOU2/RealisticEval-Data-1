Sure! Here is the equivalent Java code for your JavaScript function:

```java
import java.io.FileWriter;
import java.io.IOException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class JsonSaver {

    /**
     * Converts the data object to JSON format and saves it to the specified file path.
     * @param data - The data object to be converted to JSON.
     * @param outputFilePath - The file path where the JSON will be saved.
     * @throws IOException If an I/O error occurs while writing to the file.
     */
    public static void saveAsJSON(Object data, String outputFilePath) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        try (FileWriter writer = new FileWriter(outputFilePath)) {
            objectMapper.writeValue(writer, data);
        }
    }

    public static void main(String[] args) {
        // Example usage:
        try {
            MyDataClass myData = new MyDataClass(); // Replace with your actual data class
            saveAsJSON(myData, "output.json");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class MyDataClass {
    private String name;
    private int age;

    // Constructor, getters, and setters
    public MyDataClass() {
        this.name = "John Doe";
        this.age = 30;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}
```

### Explanation:
1. **Imports**: 
   - `java.io.FileWriter` and `java.io.IOException` for file handling.
   - `com.fasterxml.jackson.databind.ObjectMapper` for converting Java objects to JSON.

2. **saveAsJSON Method**:
   - Takes a `data` object and an `outputFilePath`.
   - Uses `ObjectMapper` to convert the `data` object to JSON and write it to the specified file using `FileWriter`.

3. **Example Usage**:
   - A simple example of how to use the `saveAsJSON` method is provided in the `main` method. You need to replace `MyDataClass` with your actual data class.

Make sure you have the Jackson library included in your project. If you're using Maven, add the following dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.13.0</version> <!-- Use the latest version -->
</dependency>
```

If you're using Gradle, add the following to your `build.gradle`:

```groovy
implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0' // Use the latest version
```

This should give you a good starting point for saving JSON data from Java.