To convert the given JavaScript Jest test case to a C++ Catch2 test case, we need to implement the `saveAsJSON` function in C++ and then write a corresponding test case using Catch2.

Here's how you can do it:

1. **Implement the `saveAsJSON` function in C++:**
   We'll use the `<fstream>` library for file operations and `<nlohmann/json.hpp>` (a popular JSON library for C++) to handle JSON conversion.

2. **Write the Catch2 test case:**

Let's start with the implementation of `saveAsJSON`:

```cpp
#include <fstream>
#include <iostream>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

void saveAsJSON(const json& data, const std::string& outputFilePath) {
    std::ofstream outFile(outputFilePath);
    if (!outFile.is_open()) {
        throw std::runtime_error("Failed to open file for writing");
    }
    outFile << data.dump(4); // Pretty print JSON with 4 spaces indentation
    outFile.close();
}
```

Now, let's write the Catch2 test case:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch2/catch.hpp"

TEST_CASE("Save JSON to file", "[file]") {
    // Create some sample data
    json data = {
        {"name", "John"},
        {"age", 30},
        {"city", "New York"}
    };

    // Define the output file path
    std::string outputFilePath = "output.json";

    // Call the function to save the JSON
    try {
        saveAsJSON(data, outputFilePath);

        // Verify that the file was written successfully
        std::ifstream inFile(outputFilePath);
        REQUIRE(inFile.is_open());

        // Read back the content from the file
        std::stringstream buffer;
        buffer << inFile.rdbuf();
        std::string fileContent = buffer.str();

        // Check if the file content matches the expected JSON
        std::string expectedJson = R"({
            "name": "John",
            "age": 30,
            "city": "New York"
        })";
        REQUIRE(fileContent == expectedJson);

        // Clean up the file
        inFile.close();
        std::remove(outputFilePath.c_str());
    } catch (const std::exception& e) {
        FAIL(e.what());
    }
}
```

### Explanation:
1. **Implementation of `saveAsJSON`:**
   - We use `std::ofstream` to create an output file stream.
   - If the file cannot be opened, we throw a `std::runtime_error`.
   - We serialize the JSON data using `data.dump(4)` to get a pretty-printed JSON string and write it to the file.
   - Finally, we close the file stream.

2. **Catch2 Test Case:**
   - We define a sample JSON object.
   - Specify the output file path.
   - Call `saveAsJSON` and verify that the file is created successfully.
   - Read the content of the file back and compare it with the expected JSON string.
   - Clean up by removing the output file after the test.

This should give you a good starting point for converting your JavaScript Jest test case to a C++ Catch2 test case.