Sure! Below is the equivalent Python unit test case using the `unittest` framework for the JavaScript function you provided.

```python
import unittest
import json

def save_as_json(data, output_file_path):
    with open(output_file_path, 'w') as file:
        json.dump(data, file)

class TestSaveAsJson(unittest.TestCase):

    def test_save_as_json(self):
        # Define the data object
        data = {
            "name": "John",
            "age": 30,
            "city": "New York"
        }

        # Specify the output file path
        output_file_path = 'output.json'

        # Call the function
        save_as_json(data, output_file_path)

        # Read the content of the output file
        with open(output_file_path, 'r') as file:
            content = json.load(file)

        # Check if the content matches the expected data
        self.assertEqual(content, data)

        # Clean up: remove the output file after testing
        import os
        os.remove(output_file_path)

if __name__ == '__main__':
    unittest.main()
```

### Explanation:

1. **Function Definition**: The `save_as_json` function in Python uses the `json.dump` method to write the data object to a JSON file.

2. **Test Case Class**: The `TestSaveAsJson` class inherits from `unittest.TestCase`.

3. **Test Method**: The `test_save_as_json` method contains the actual test logic.
   - It defines a sample data object.
   - Specifies the output file path.
   - Calls the `save_as_json` function.
   - Reads the content of the output file and checks if it matches the expected data using `self.assertEqual`.
   - Cleans up by removing the output file after the test.

4. **Running the Tests**: The `if __name__ == '__main__':` block ensures that the tests are run when the script is executed directly.

This should give you a good starting point for your Python unit test case using `unittest`.