To convert the provided JavaScript code to Python, we will use the built-in json module for handling JSON data and the open function for file operations. Hereâ€™s the equivalent Python code:
Converted Python Code
python
import json

def save_as_json(data, output_file_path):
    """
    Converts the data object to JSON format and saves it to the specified file path.

    Args:
        data (dict): The data object to be converted to JSON.
        output_file_path (str): The file path where the JSON will be saved.
    """
    try:
        # Convert data to JSON string with 2-space indentation
        json_data = json.dumps(data, indent=2)
        
        # Write the JSON string to the specified file path
        with open(output_file_path, 'w', encoding='utf-8') as json_file:
            json_file.write(json_data)
        
        print(f"Data successfully saved to {output_file_path}")
    except Exception as error:
        print(f"Error saving data to file: {error}")

# Example usage
if __name__ == "__main__":
    sample_data = {
        "name": "John Doe",
        "age": 30,
        "city": "New York"
    }
    save_as_json(sample_data, 'output.json')
Explanation of the Python Code:
Imports:
The json module is imported to handle JSON serialization.
Function Definition:
The function is defined using def save_as_json(data, output_file_path): in Python.
The docstring explains the purpose of the function, the expected types for parameters, and their meanings, similar to JSDoc comments in JavaScript.
JSON Serialization:
json.dumps(data, indent=2) is used to convert the data dictionary into a JSON string with a 2-space indentation.
File Writing:
The with open(output_file_path, 'w', encoding='utf-8') as json_file: context manager is used to open the file for writing. This ensures that the file is properly closed after writing, even if an error occurs.
The JSON string is written to the file using json_file.write(json_data).
Error Handling:
A try block is used to catch any exceptions that may occur during the JSON serialization or file writing. If an error occurs, an error message is printed.
Example Usage:
A sample dictionary (sample_data) is provided to demonstrate how to use the save_as_json function, and it saves the JSON data to output.json.
Running the Python Code
To run the Python code, save it in a file (e.g., save_as_json.py) and execute it:
bash
python save_as_json.py
This will create a file named output.json in the same directory, containing the serialized JSON data.