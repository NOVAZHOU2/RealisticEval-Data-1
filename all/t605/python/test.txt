Hereâ€™s how to convert the provided C++ Catch2 test cases into Python's unittest framework, using a class named Tester in the package org.real.temp. The tests will cover valid BMI calculations and handle invalid inputs.
Converted Python unittest Code
python
import unittest

def calculate_bmi(weight: float, height: float) -> float:
    """
    Calculates the Body Mass Index (BMI) based on weight and height.
    """
    if weight <= 0:
        raise ValueError("Weight must be greater than zero.")
    if height <= 0:
        raise ValueError("Height must be greater than zero.")
    
    bmi = weight / (height * height)
    return bmi

class Tester(unittest.TestCase):
    
    # Test case for valid inputs with expected BMI value
    def test_valid_bmi_calculations(self):
        # Normal weight
        self.assertAlmostEqual(calculate_bmi(70, 1.75), 22.86, delta=0.01)  # 70 kg, 1.75 m
        
        # Underweight
        self.assertAlmostEqual(calculate_bmi(50, 1.75), 16.33, delta=0.01)  # 50 kg, 1.75 m
        
        # Overweight
        self.assertAlmostEqual(calculate_bmi(80, 1.75), 26.12, delta=0.01)  # 80 kg, 1.75 m
        
        # Obesity
        self.assertAlmostEqual(calculate_bmi(100, 1.75), 32.65, delta=0.01)  # 100 kg, 1.75 m

    # Test case for invalid inputs
    def test_invalid_bmi_calculations(self):
        # Negative weight
        with self.assertRaises(ValueError) as context:
            calculate_bmi(-70, 1.75)
        self.assertEqual(str(context.exception), "Weight must be greater than zero.")

        # Zero height
        with self.assertRaises(ValueError) as context:
            calculate_bmi(70, 0)
        self.assertEqual(str(context.exception), "Height must be greater than zero.")

        # Negative height
        with self.assertRaises(ValueError) as context:
            calculate_bmi(70, -1.75)
        self.assertEqual(str(context.exception), "Height must be greater than zero.")

if __name__ == '__main__':
    unittest.main()
Explanation of the Code
Function Definition:
The calculate_bmi function is included to perform the actual BMI calculations, with error handling for invalid inputs.
Unit Test Class:
A class named Tester is created that inherits from unittest.TestCase, encapsulating all the test cases.
Valid BMI Tests:
The test_valid_bmi_calculations method checks various valid weights and heights using self.assertAlmostEqual, allowing for a small difference (epsilon) specified by delta=0.01.
Invalid BMI Tests:
The test_invalid_bmi_calculations method checks for expected exceptions when invalid inputs are provided using self.assertRaises. Each test verifies that the appropriate exception message is raised.
Main Block:
The if __name__ == '__main__': block allows the tests to be run when the script is executed directly.
Running the Tests
You can run the tests by saving the code into a Python file (e.g., test_bmi.py) and executing it in a terminal or command prompt with:
bash
python test_bmi.py
This will run all defined tests, providing output indicating which tests passed or failed.