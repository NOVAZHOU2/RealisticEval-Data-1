Here's the TypeScript version of the given C++ code that calculates the Body Mass Index (BMI):

```typescript
/**
 * @brief Calculates the Body Mass Index (BMI) based on weight and height.
 *
 * The BMI is calculated using the formula:
 *
 *      BMI = weight (kg) / (height (m) * height (m))
 *
 * @param weight The weight of the individual in kilograms.
 * @param height The height of the individual in meters.
 *
 * @returns The calculated BMI value as a number.
 *
 * @throws Error if weight or height is less than or equal to zero,
 *                since these values must be positive.
 */
function calculateBMI(weight: number, height: number): number {
    // Validate weight and height
    if (weight <= 0) {
        throw new Error("Weight must be greater than zero.");
    }
    if (height <= 0) {
        throw new Error("Height must be greater than zero.");
    }

    // Calculate BMI
    const bmi = weight / (height * height);
    return bmi; // Return the calculated BMI value
}

// Example usage:
try {
    const bmi = calculateBMI(70, 1.75);
    console.log(`The calculated BMI is: ${bmi}`);
} catch (error) {
    console.error(error.message);
}
```

### Changes and Adaptations:
1. **Function Declaration**: The `double` return type in C++ is replaced with `number` in TypeScript.
2. **Error Handling**: In TypeScript, we use the `Error` object to throw exceptions.
3. **Type Annotations**: The parameters `weight` and `height` are explicitly typed as `number`.
4. **Example Usage**: Added a sample usage of the `calculateBMI` function to demonstrate how it can be called and handle potential errors. 

This code maintains the same logic and functionality as the original C++ implementation while conforming to TypeScript best practices.