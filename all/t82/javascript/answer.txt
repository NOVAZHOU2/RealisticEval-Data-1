Sure! I'll convert the given Python code into equivalent JavaScript code using appropriate libraries and structures. The main functionalities we need to replicate are:

1. Creating a directed graph.
2. Finding simple cycles in the graph.
3. Filtering cycles based on their length and uniqueness.
4. Grouping cycles by their size.

Here's the equivalent JavaScript code using the `graphology` library for graph operations:

First, you need to install the `graphology` library:
```sh
npm install graphology
```

Now, here's the JavaScript code:

```javascript
const { Graph } = require('graphology');

class Graph {
  constructor(edges) {
    this.graph = new Graph({ type: 'directed' });
    edges.forEach(([source, target]) => {
      this.graph.addEdge(source, target);
    });
  }

  cyclesBySize(filterRepeatNodes = true) {
    const allCycles = this.findAllSimpleCycles();
    const cycles = allCycles.filter(cycle => cycle.length > 2);

    if (filterRepeatNodes) {
      cycles.filter(cycle => new Set(cycle).size === cycle.length);
    }

    const uniqueCycles = Array.from(new Set(cycles.map(cycle => JSON.stringify(cycle)))).map(strCycle => JSON.parse(strCycle));
    const uniqueCyclesBySize = {};

    uniqueCycles.forEach(cycle => {
      const size = cycle.length;
      if (!uniqueCyclesBySize[size]) {
        uniqueCyclesBySize[size] = [];
      }
      uniqueCyclesBySize[size].push(this.graph.subgraph(cycle));
    });

    return uniqueCyclesBySize;
  }

  findAllSimpleCycles() {
    const cycles = [];
    const stack = [];
    const onCycle = cycle => cycles.push(cycle);
    this.graph.forEachNode(node => {
      this.graph.forEachOutgoingEdge(node, edge => {
        const target = this.graph.getOpposite(node, edge);
        if (!stack.includes(target)) {
          stack.push(target);
          this.graph.traverseSimplePaths(node, target, onCycle);
          stack.pop();
        }
      });
    });
    return cycles;
  }
}

// Example usage
const edges = [
  ['A', 'B'],
  ['B', 'C'],
  ['C', 'D'],
  ['D', 'A'],
  ['B', 'D']
];

const graph = new Graph(edges);
console.log(graph.cyclesBySize());
```

### Explanation:
1. **Graph Construction**:
   - We use the `graphology` library to create a directed graph.
   - The `constructor` initializes the graph and adds edges.

2. **Finding Simple Cycles**:
   - The `findAllSimpleCycles` method uses the `traverseSimplePaths` function to find all simple cycles.

3. **Filtering Cycles**:
   - The `cyclesBySize` method filters cycles based on their length and uniqueness.
   - It uses a `Set` to ensure uniqueness and groups cycles by their size.

4. **Subgraph Creation**:
   - The `subgraph` method creates subgraphs based on the cycles found.

This should provide the same functionality as the original Python code.