Here's how you can convert your Python code into JavaScript using the `networkx` library and `jsnetworkx` package:

```javascript
const { DiGraph } = require('jsnetworkx');

class Graph {
    constructor(edges) {
        this.graph = new DiGraph();
        for (let [u, v] of edges) {
            this.graph.addEdge(u, v);
        }
    }

    async cyclesBySize(filterRepeatNodes = true) {
        let result = {};

        // Get all cycles in the graph
        let cycles = await this.findCycles();

        // Filter out cycles with repeated nodes if needed
        if (filterRepeatNodes) {
            cycles = cycles.filter(cycle => Array.from(new Set(cycle)).length === cycle.length);
        }

        // Group cycles by their size
        for (let cycle of cycles) {
            let size = cycle.length;
            if (!result[size]) {
                result[size] = [];
            }
            result[size].push(this.subgraph(cycle));
        }

        return result;
    }

    async findCycles() {
        // Implement cycle finding algorithm here
        // This is a placeholder function and needs to be replaced with actual implementation
        throw new Error("Cycle finding algorithm not implemented");
    }

    subgraph(nodes) {
        let sg = new DiGraph();
        for (let node of nodes) {
            sg.addNode(node);
            for (let neighbor of this.graph.neighbors(node)) {
                if (nodes.includes(neighbor)) {
                    sg.addEdge(node, neighbor);
                }
            }
        }
        return sg;
    }
}
```

Please note that the `findCycles()` method is a placeholder and should be replaced with an actual implementation of a cycle-finding algorithm for directed graphs. The `jsnetworkx` library does not provide built-in support for cycle detection in directed graphs like `networkx`. You may need to implement your own cycle detection logic or use other libraries/packages specifically designed for graph analysis in JavaScript/Node.js environments.