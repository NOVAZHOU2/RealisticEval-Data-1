Certainly! I will convert the given Python `unittest` test class into an equivalent Jest test suite, ensuring that the functionality and logic of the tests are maintained. I will also document any necessary changes due to language differences between Python and JavaScript.

### Python Code

```python
import unittest
from collections import defaultdict

class Graph:
    def __init__(self, edges):
        self.graph = defaultdict(list)
        for edge in edges:
            self.graph[edge[0]].append(edge[1])

    def cycles_by_size(self, filter_repeat_nodes=True) -> defaultdict:
        # Implementation of cycles_by_size method
        pass

class TestGraphCycles(unittest.TestCase):
    def test_empty_graph(self):
        g = Graph([])
        self.assertEqual(g.cycles_by_size(), defaultdict(list),
                         "Failed: Expected an empty defaultdict for an empty graph.")

    def test_graph_no_cycles(self):
        g = Graph([(1, 2), (2, 3)])
        self.assertEqual(g.cycles_by_size(), defaultdict(list),
                         "Failed: Expected an empty defaultdict for a graph with no cycles.")

    def test_simple_cycles(self):
        g = Graph([(1, 2), (2, 3), (3, 1)])
        results = g.cycles_by_size()
        self.assertEqual(len(results[3]), 1, "Failed: Expected one cycle of length 3.")
        self.assertIn(list(results[3][0].nodes()), [[1, 2, 3]], "Failed: Expected cycle nodes to match.")

    def test_multiple_cycles(self):
        g = Graph([(1, 2), (2, 3), (3, 1), (3, 4), (4, 1)])
        results = g.cycles_by_size()
        self.assertEqual(len(results[3]), 1, "Failed: Expected one cycle of length 3.")
        self.assertEqual(len(results[4]), 1, "Failed: Expected one cycle of length 4.")
```

### Equivalent Jest Test Suite

Here is the equivalent Jest test suite:

1. **Install Required Libraries**:
   ```sh
   npm install graphology
   ```

2. **JavaScript Code**

```javascript
const { Graph } = require('graphology');

class Graph {
  constructor(edges) {
    this.graph = new Graph({ type: 'directed' });
    edges.forEach(([source, target]) => {
      this.graph.addEdge(source, target);
    });
  }

  cyclesBySize(filterRepeatNodes = true) {
    const allCycles = this.findAllSimpleCycles();
    const cycles = allCycles.filter(cycle => cycle.length > 2);

    if (filterRepeatNodes) {
      cycles.filter(cycle => new Set(cycle).size === cycle.length);
    }

    const uniqueCycles = Array.from(new Set(cycles.map(cycle => JSON.stringify(cycle)))).map(strCycle => JSON.parse(strCycle));
    const uniqueCyclesBySize = {};

    uniqueCycles.forEach(cycle => {
      const size = cycle.length;
      if (!uniqueCyclesBySize[size]) {
        uniqueCyclesBySize[size] = [];
      }
      uniqueCyclesBySize[size].push(this.graph.subgraph(cycle));
    });

    return uniqueCyclesBySize;
  }

  findAllSimpleCycles() {
    const cycles = [];
    const stack = [];
    const onCycle = cycle => cycles.push(cycle);
    this.graph.forEachNode(node => {
      this.graph.forEachOutgoingEdge(node, edge => {
        const target = this.graph.getOpposite(node, edge);
        if (!stack.includes(target)) {
          stack.push(target);
          this.graph.traverseSimplePaths(node, target, onCycle);
          stack.pop();
        }
      });
    });
    return cycles;
  }
}

describe('TestGraphCycles', () => {
  it('test_empty_graph', () => {
    const g = new Graph([]);
    expect(g.cyclesBySize()).toEqual({});
    expect(g.cyclesBySize()).toStrictEqual({});
  });

  it('test_graph_no_cycles', () => {
    const g = new Graph([[1, 2], [2, 3]]);
    expect(g.cyclesBySize()).toEqual({});
    expect(g.cyclesBySize()).toStrictEqual({});
  });

  it('test_simple_cycles', () => {
    const g = new Graph([[1, 2], [2, 3], [3, 1]]);
    const results = g.cyclesBySize();
    expect(Object.keys(results).length).toBe(1);
    expect(results[3]).toHaveLength(1);
    expect(results[3][0].nodes()).toEqual([1, 2, 3]);
  });

  it('test_multiple_cycles', () => {
    const g = new Graph([[1, 2], [2, 3], [3, 1], [3, 4], [4, 1]]);
    const results = g.cyclesBySize();
    expect(Object.keys(results).length).toBe(2);
    expect(results[3]).toHaveLength(1);
    expect(results[4]).toHaveLength(1);
  });
});

// Example usage
const edges = [
  [1, 2],
  [2, 3],
  [3, 1],
  [3, 4],
  [4, 1]
];

const graph = new Graph(edges);
console.log(graph.cyclesBySize());
```

### Explanation:
1. **Class Definition**:
   - The `Graph` class is defined with methods to construct the graph and find cycles.

2. **Jest Test Suite**:
   - The `describe` block defines the test suite `TestGraphCycles`.
   - Each `it` block represents a test case.

3. **Test Cases**:
   - `test_empty_graph`: Tests an empty graph.
   - `test_graph_no_cycles`: Tests a graph with no cycles.
   - `test_simple_cycles`: Tests a graph with a single cycle.
   - `test_multiple_cycles`: Tests a graph with multiple cycles.

4. **Assertions**:
   - `expect(g.cyclesBySize()).toEqual({})` checks if the result is an empty object.
   - `expect(g.cyclesBySize()).toStrictEqual({})` ensures deep equality.
   - `expect(Object.keys(results).length).toBe(1)` checks the number of keys in the result.
   - `expect(results[3]).toHaveLength(1)` checks the length of the cycles.
   - `expect(results[3][0].nodes()).toEqual([1, 2, 3])` checks the nodes of the cycle.

This conversion maintains the functionality and logic of the original Python tests while adapting them to Jest's syntax and assertions.