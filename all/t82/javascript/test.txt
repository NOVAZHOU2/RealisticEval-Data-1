Sure! Below is the equivalent JavaScript test case using Jest for the provided Python `unittest` test class. Note that since the original Python code uses `networkx`, we'll need to use a similar library in JavaScript, such as `js-networkx`.

First, ensure you have `js-networkx` installed:

```bash
npm install js-networkx
```

Then, create your JavaScript test file (e.g., `testGraph.js`):

```javascript
const { DiGraph } = require('js-networkx');
const { describe, it, expect } = require('@jest/globals');

class Graph {
    constructor(edges) {
        this.graph = new DiGraph();
        this.graph.addEdgesFrom(edges);
    }

    cyclesBySize(filterRepeatNodes = true) {
        const cycles = [];
        const cycleFinder = (node, path = []) => {
            if (this.graph.hasNode(node)) {
                path.push(node);
                if (!filterRepeatNodes || [...new Set(path)].length === path.length) {
                    if (path.length > 2 && !cycles.some(cycle => cycle.every((n, i) => n === path[i]))) {
                        cycles.push([...path]);
                    }
                }
                this.graph.successors(node).forEach(successor => {
                    if (!path.includes(successor)) {
                        cycleFinder(successor, [...path]);
                    }
                });
            }
        };

        this.graph.nodes().forEach(node => cycleFinder(node));
        return cycles.reduce((acc, cycle) => {
            const size = cycle.length;
            if (!acc[size]) acc[size] = [];
            acc[size].push(new DiGraph());
            acc[size][acc[size].length - 1].addEdgesFrom(cycle.map((n, i) => [cycle[(i + 1) % cycle.length], n]));
            return acc;
        }, {});
    }
}

describe('Graph', () => {
    let graph;

    beforeEach(() => {
        graph = new Graph([
            ['A', 'B'],
            ['B', 'C'],
            ['C', 'D'],
            ['D', 'A'],
            ['E', 'F'],
            ['F', 'G']
        ]);
    });

    it('should find cycles by size without filtering repeat nodes', () => {
        const result = graph.cyclesBySize(false);
        expect(result[4]).toEqual([['A', 'B', 'C', 'D', 'A']]);
        expect(result[3]).toEqual([['E', 'F', 'G'], ['B', 'C', 'D', 'A']]);
    });

    it('should find cycles by size with filtering repeat nodes', () => {
        const result = graph.cyclesBySize(true);
        expect(result[4]).toEqual([['A', 'B', 'C', 'D', 'A']]);
        expect(result[3]).toEqual([]);
    });
});
```

### Explanation:

1. **Class Definition**: The `Graph` class is defined similarly to the Python version, but using `js-networkx`.
2. **Cycle Finder**: The `cyclesBySize` method finds all cycles in the graph and returns them grouped by their size.
3. **Testing with Jest**:
   - We use Jest's `describe`, `it`, and `expect` functions to write our tests.
   - We initialize the `Graph` instance before each test using `beforeEach`.
   - We then test two scenarios: one with filtering repeat nodes (`false`) and one without (`true`).

This should give you a good starting point for testing your JavaScript code using Jest. Adjust the test cases as needed based on your specific requirements.