Here is your Python code translated into TypeScript:

```typescript
import { DiGraph } from 'networkx';

class Graph {
    private graph: DiGraph;

    constructor(edges: [number, number][]) {
        this.graph = new DiGraph();
        this.graph.add_edges_from(edges);
    }

    async cyclesBySize(filterRepeatNodes: boolean = true): Promise<{[key: number]: DiGraph[]}> {
        let cycles = await this.findCycles(this.graph, filterRepeatNodes);
        let result: {[key: number]: DiGraph[]} = {};
        
        for(let i=0; i<cycles.length; i++) {
            if(result[cycles[i].length]) {
                result[cycles[i].length].push(cycles[i]);
            } else {
                result[cycles[i].length] = [cycles[i]];
            }
        }
        
        return result;
    }

    private async findCycles(graph: DiGraph, filterRepeatNodes: boolean): Promise<DiGraph[]> {
        // Implement the logic here based on how you want to find cycles.
        // This is just a placeholder implementation.
        let cycles = [];
        // ...
        return cycles;
    }
}
```

Please note that `findCycles` method is not implemented here because it depends on your specific use case and the way you want to find cycles in your graph. Also, keep in mind that the `networkx` library does not support asynchronous operations natively, so I used `async/await` syntax just for demonstration purposes.