Certainly! Here is the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation comments:

```typescript
import { DiGraph } from 'networkx';

/**
 * Represents an edge in the graph.
 */
interface Edge {
  source: any;
  target: any;
}

/**
 * A class representing a directed graph.
 */
class Graph {
  private graph: DiGraph;

  /**
   * Initializes the graph with a set of edges.
   *
   * @param edges - An array of edges represented as objects with `source` and `target`.
   */
  constructor(edges: Edge[]) {
    this.graph = new DiGraph();
    edges.forEach(edge => {
      this.graph.addEdge(edge.source, edge.target);
    });
  }

  /**
   * Finds all unique cycles in the graph that are larger than size 2, optionally filtering out cycles with repeated nodes.
   *
   * @param filterRepeatNodes - If true, filters out cycles where any node appears more than once.
   * @returns A dictionary mapping each cycle size to a list of subgraph objects representing each unique cycle of that size.
   */
  public cyclesBySize(filterRepeatNodes: boolean = true): Record<any, DiGraph[]> {
    const allCycles = Array.from(this.graph.simpleCycles());
    const cycles = allCycles.filter(cycle => cycle.length > 2);

    if (filterRepeatNodes) {
      cycles.filter(cycle => new Set(cycle).size === cycle.length);
    }

    const uniqueCycles = Array.from(new Set(cycles.map(cycle => JSON.stringify(cycle)))).map(cycleStr => JSON.parse(cycleStr));
    const uniqueCyclesBySize: Record<any, DiGraph[]> = {};

    uniqueCycles.forEach(cycle => {
      const size = cycle.length;
      const subgraph = this.graph.subgraph(cycle);
      if (!uniqueCyclesBySize[size]) {
        uniqueCyclesBySize[size] = [];
      }
      uniqueCyclesBySize[size].push(subgraph);
    });

    return uniqueCyclesBySize;
  }
}
```

### Explanation:
1. **Imports**:
   - `DiGraph` from `networkx` is used to represent the directed graph.

2. **Edge Interface**:
   - An interface `Edge` is defined to represent the edges with `source` and `target`.

3. **Constructor**:
   - The constructor takes an array of edges and initializes the graph using `DiGraph`.

4. **JSDoc Comments**:
   - JSDoc comments are added to provide detailed documentation for the class and methods.

5. **cyclesBySize Method**:
   - This method finds all simple cycles in the graph.
   - It filters out cycles based on their length and whether they contain repeated nodes.
   - It uses a `Set` to check for repeated nodes.
   - Unique cycles are determined using `JSON.stringify` and `JSON.parse` to handle uniqueness.
   - The result is stored in a `Record<any, DiGraph[]>` object, which maps sizes to arrays of subgraphs.

6. **Type Annotations**:
   - Proper type annotations are used throughout the code to ensure type safety.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate adjustments for TypeScript's static type system and idiomatic practices.