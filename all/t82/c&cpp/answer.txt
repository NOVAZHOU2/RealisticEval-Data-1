Sure! Below is the equivalent C++ code for the given Python code. This code uses the Boost.Graph library to handle graph operations since C++ does not have a direct equivalent to NetworkX.

First, you need to install the Boost C++ libraries. You can download and install it from the official website (https://www.boost.org/).

Here's the C++ code:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/cycles.hpp>

using namespace std;

typedef boost::adjacency_list<boost::vecS, boost::vecS, boost::directedS> Graph;
typedef boost::graph_traits<Graph>::vertex_descriptor Vertex;
typedef boost::graph_traits<Graph>::edge_descriptor Edge;

class Graph {
public:
    Graph(const vector<pair<int, int>>& edges) {
        for (const auto& edge : edges) {
            add_edge(edge.first, edge.second, g);
        }
    }

    map<int, vector<Graph>> cycles_by_size(bool filter_repeat_nodes = true) const {
        vector<set<Vertex>> all_cycles;
        boost::find_cycle(g, std::back_inserter(all_cycles));

        vector<set<Vertex>> cycles;
        for (const auto& cycle : all_cycles) {
            if (cycle.size() > 2) {
                cycles.push_back(cycle);
            }
        }

        if (filter_repeat_nodes) {
            vector<set<Vertex>> filtered_cycles;
            for (const auto& cycle : cycles) {
                set<Vertex> unique_cycle(cycle.begin(), cycle.end());
                if (unique_cycle.size() == cycle.size()) {
                    filtered_cycles.push_back(unique_cycle);
                }
            }
            cycles = filtered_cycles;
        }

        map<int, vector<Graph>> unique_cycles_by_size;
        for (const auto& cycle : cycles) {
            int size = cycle.size();
            Graph subgraph;
            for (const auto& vertex : cycle) {
                add_vertex(vertex, subgraph);
            }
            for (const auto& vertex : cycle) {
                for (auto adj_vertex : cycle) {
                    if (adj_vertex != vertex && boost::edge(vertex, adj_vertex, g).second) {
                        add_edge(vertex, adj_vertex, subgraph);
                    }
                }
            }
            unique_cycles_by_size[size].push_back(subgraph);
        }

        return unique_cycles_by_size;
    }

private:
    Graph g;
};

int main() {
    vector<pair<int, int>> edges = {{1, 2}, {2, 3}, {3, 1}, {4, 5}, {5, 6}, {6, 4}};
    Graph graph(edges);

    auto cycles_by_size = graph.cycles_by_size(true);

    for (const auto& entry : cycles_by_size) {
        cout << "Size: " << entry.first << endl;
        for (const auto& subgraph : entry.second) {
            cout << "Subgraph: ";
            for (Vertex v : boost::make_iterator_range(vertices(subgraph))) {
                cout << v << " ";
            }
            cout << endl;
        }
    }

    return 0;
}
```

### Explanation:
1. **Graph Representation**: The `Graph` class uses the Boost Graph Library (`boost::adjacency_list`) to represent a directed graph.
2. **Cycle Detection**: The `find_cycle` function from Boost is used to find all simple cycles in the graph.
3. **Filtering Cycles**: The cycles are filtered based on their length and uniqueness.
4. **Result Mapping**: The cycles are stored in a `std::map` where the key is the size of the cycle and the value is a vector of subgraphs.

This code should provide similar functionality to the original Python code using C++ and the Boost Graph Library.