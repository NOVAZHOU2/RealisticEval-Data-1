Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The test cases will be converted to use Catch2's assertion mechanisms and will preserve the functionality and logic of the original Python tests.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed. You can include Catch2 by adding the header file and ensuring your project is configured to use it.

Here's the complete C++ code:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/cycles.hpp>
#include <catch2/catch_test_macros.hpp>

// Define the graph type using Boost Graph Library
typedef boost::adjacency_list<boost::vecS, boost::vecS, boost::directedS> Graph;
typedef boost::graph_traits<Graph>::vertex_descriptor Vertex;

class Graph {
public:
    // Constructor that initializes the graph with a list of edges
    explicit Graph(const std::vector<std::pair<int, int>>& edges) {
        for (const auto& edge : edges) {
            add_edge(edge.first, edge.second, g);
        }
    }

    // Function to find all unique cycles in the graph that are larger than size 2,
    // optionally filtering out cycles with repeated nodes.
    std::map<int, std::vector<Graph>> cycles_by_size(bool filter_repeat_nodes = true) const {
        /*
         * Finds all unique cycles in the graph that are larger than size 2, optionally filtering out cycles with repeated nodes.
         *
         * Args:
         *     filter_repeat_nodes (bool): If true, filters out cycles where any node appears more than once.
         *
         * Returns:
         *     std::map<int, std::vector<Graph>>: A map mapping each cycle size to a vector of subgraph objects representing
         *         each unique cycle of that size.
         */
        std::vector<std::set<Vertex>> all_cycles;
        boost::find_cycle(g, std::back_inserter(all_cycles));

        std::vector<std::set<Vertex>> cycles;
        for (const auto& cycle : all_cycles) {
            if (cycle.size() > 2) {
                cycles.push_back(cycle);
            }
        }

        if (filter_repeat_nodes) {
            std::vector<std::set<Vertex>> filtered_cycles;
            for (const auto& cycle : cycles) {
                std::set<Vertex> unique_cycle(cycle.begin(), cycle.end());
                if (unique_cycle.size() == cycle.size()) {
                    filtered_cycles.push_back(unique_cycle);
                }
            }
            cycles = filtered_cycles;
        }

        std::map<int, std::vector<Graph>> unique_cycles_by_size;
        for (const auto& cycle : cycles) {
            int size = cycle.size();
            Graph subgraph;
            for (const auto& vertex : cycle) {
                add_vertex(vertex, subgraph);
            }
            for (const auto& vertex : cycle) {
                for (auto adj_vertex : cycle) {
                    if (adj_vertex != vertex && boost::edge(vertex, adj_vertex, g).second) {
                        add_edge(vertex, adj_vertex, subgraph);
                    }
                }
            }
            unique_cycles_by_size[size].push_back(subgraph);
        }

        return unique_cycles_by_size;
    }

private:
    Graph g; // The internal graph representation
};

TEST_CASE("TestGraphCycles", "[Graph]") {
    SECTION("test_empty_graph") {
        Graph g({});
        auto result = g.cycles_by_size();
        REQUIRE(result.empty());
    }

    SECTION("test_graph_no_cycles") {
        Graph g({{1, 2}, {2, 3}});
        auto result = g.cycles_by_size();
        REQUIRE(result.empty());
    }

    SECTION("test_simple_cycles") {
        Graph g({{1, 2}, {2, 3}, {3, 1}});
        auto result = g.cycles_by_size();
        REQUIRE(result.count(3) == 1);
        REQUIRE(result.at(3).size() == 1);
        REQUIRE(std::all_of(result.at(3).begin(), result.at(3).end(), [](const Graph& subgraph) {
            std::vector<Vertex> nodes(boost::num_vertices(subgraph));
            boost::iota(nodes, 0); // Initialize nodes with indices
            std::sort(nodes.begin(), nodes.end(), [&subgraph](Vertex u, Vertex v) {
                return boost::degree(u, subgraph) < boost::degree(v, subgraph);
            });
            return nodes == std::vector<Vertex>({1, 2, 3});
        }));
    }

    SECTION("test_multiple_cycles") {
        Graph g({{1, 2}, {2, 3}, {3, 1}, {3, 4}, {4, 1}});
        auto result = g.cycles_by_size();
        REQUIRE(result.count(3) == 1);
        REQUIRE(result.at(3).size() == 1);
        REQUIRE(result.count(4) == 1);
        REQUIRE(result.at(4).size() == 1);
    }
}

int main(int argc, char* argv[]) {
    Catch::Session().run(argc, argv);
    return 0;
}
```

### Explanation:
1. **Graph Class**: The `Graph` class is defined similarly to the Python version, using the Boost Graph Library.
2. **Constructor**: The constructor initializes the graph with a list of edges.
3. **Function `cycles_by_size`**: This function finds all unique cycles in the graph that are larger than size 2, optionally filtering out cycles with repeated nodes.
4. **Catch2 Test Cases**:
   - `test_empty_graph`: Tests an empty graph and ensures the result is an empty map.
   - `test_graph_no_cycles`: Tests a graph with no cycles and ensures the result is an empty map.
   - `test_simple_cycles`: Tests a simple cycle and ensures there is one cycle of length 3.
   - `test_multiple_cycles`: Tests a graph with multiple cycles and ensures there is one cycle of length 3 and one cycle of length 4.

### Assertions:
- `REQUIRE(result.empty())`: Ensures the result is an empty map.
- `REQUIRE(result.count(3) == 1)`: Ensures there is one cycle of length 3.
- `REQUIRE(result.at(3).size() == 1)`: Ensures there is one subgraph in the result for cycles of length 3.
- `REQUIRE(std::all_of(...))`: Ensures the nodes of the subgraph match the expected nodes.

This code preserves the functionality and logic of the original Python tests while using the Catch2 testing framework in C++.