To convert the given Python unittest test class to a Java JUnit test case, you need to follow these steps:

1. Define the `Graph` class in Java.
2. Create a JUnit test class named `Tester`.
3. Write test methods for the `cycles_by_size` method.

Here's how you can do it:

### Step 1: Define the `Graph` Class in Java

```java
import org.jgrapht.Graph;
import org.jgrapht.graph.DefaultDirectedGraph;
import org.jgrapht.graph.DefaultEdge;

import java.util.*;

public class Graph {
    private Graph<DefaultEdge> graph;

    public Graph(List<Edge> edges) {
        graph = new DefaultDirectedGraph<>(DefaultEdge.class);
        for (Edge edge : edges) {
            graph.addVertex(edge.getSource());
            graph.addVertex(edge.getDestination());
            graph.addEdge(edge.getSource(), edge.getDestination());
        }
    }

    public Map<Integer, List<Graph<DefaultEdge>>> cyclesBySize(boolean filterRepeatNodes) {
        // Implement the logic here
        return Collections.emptyMap(); // Placeholder
    }

    static class Edge {
        private String source;
        private String destination;

        public Edge(String source, String destination) {
            this.source = source;
            this.destination = destination;
        }

        public String getSource() {
            return source;
        }

        public String getDestination() {
            return destination;
        }
    }
}
```

### Step 2: Create a JUnit Test Class Named `Tester`

```java
import org.junit.jupiter.api.Test;
import org.jgrapht.Graph;
import org.jgrapht.graph.DefaultDirectedGraph;
import org.jgrapht.graph.DefaultEdge;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class Tester {

    @Test
    public void testCyclesBySize() {
        List<Graph.Edge> edges = Arrays.asList(
                new Graph.Edge("A", "B"),
                new Graph.Edge("B", "C"),
                new Graph.Edge("C", "A"),
                new Graph.Edge("D", "E")
        );

        Graph graph = new Graph(edges);

        Map<Integer, List<Graph<DefaultEdge>>> result = graph.cyclesBySize(true);

        assertNotNull(result);
        assertTrue(result.containsKey(3));
        assertEquals(1, result.get(3).size());

        result = graph.cyclesBySize(false);
        assertNotNull(result);
        assertTrue(result.containsKey(3));
        assertEquals(1, result.get(3).size());
    }
}
```

### Explanation:

1. **Graph Class**:
   - The `Graph` class is defined using the JGraphT library, which provides a directed graph implementation.
   - The `cyclesBySize` method is left as a placeholder for you to implement the actual logic.

2. **Tester Class**:
   - The `Tester` class contains a single test method `testCyclesBySize`.
   - It creates a sample graph and tests the `cyclesBySize` method with both `filterRepeatNodes` set to `true` and `false`.

Make sure to include the JGraphT library in your project dependencies if you haven't already. You can add it to your `pom.xml` file if you're using Maven:

```xml
<dependency>
    <groupId>org.jgrapht</groupId>
    <artifactId>jgrapht-core</artifactId>
    <version>1.5.0</version>
</dependency>
```

This should give you a good starting point for converting your Python unittest test class to a Java JUnit test case.