Here is the equivalent Java code for your JavaScript class:

```java
import java.util.Random;

public class SeededRandom {
    private long seed;
    private Random random;

    /**
     * Initializes a new instance of the SeededRandom class with a given seed.
     * @param seed - The initial seed value for the random number generator.
     */
    public SeededRandom(long seed) {
        this.seed = seed;
        this.random = new Random(seed);
    }

    /**
     * Generates a random number between 0 and 1 using a Linear Congruential Generator (LCG) algorithm.
     * @return A pseudo-random number between 0 (inclusive) and 1 (exclusive).
     */
    public double rand() {
        return random.nextDouble();
    }
}
```

Please note that Java's `Random` class uses a different algorithm than the one you provided in your JavaScript code. If you need to implement the exact same LCG algorithm, you will have to do so manually in Java. Here is an example of how to do that:

```java
public class SeededRandom {
    private static final long A = 1664525L;
    private static final long C = 1013904223L;
    private static final long M = 4294967296L; // 2^32
    private long seed;

    /**
     * Initializes a new instance of the SeededRandom class with a given seed.
     * @param seed - The initial seed value for the random number generator.
     */
    public SeededRandom(long seed) {
        this.seed = seed & 0xFFFFFFFFL; // Ensure the seed is within 32 bits
    }

    /**
     * Generates a random number between 0 and 1 using a Linear Congruential Generator (LCG) algorithm.
     * @return A pseudo-random number between 0 (inclusive) and 1 (exclusive).
     */
    public double rand() {
        seed = (A * seed + C) % M;
        return (double) seed / M;
    }
}
```
This implementation should give you the same sequence of pseudo-random numbers as your JavaScript code when used with the same seed.