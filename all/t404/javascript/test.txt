Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python unittest Code:

```python
import unittest

class TestMatrixPower(unittest.TestCase):

    def test_identity_matrix(self):
        # Testing the power function with an identity matrix
        matrix = [[1, 0], [0, 1]]
        expected = [[1, 0], [0, 1]]
        result = power(matrix, 1)
        self.assertEqual(result, expected)

    def test_zero_power(self):
        # Testing matrix to the power of zero (should return identity)
        matrix = [[2, 3], [1, 4]]
        expected = [[1, 0], [0, 1]]
        result = power(matrix, 0)
        self.assertEqual(result, expected)

    def test_positive_power(self):
        # Testing matrix to a positive power
        matrix = [[2, 1], [1, 3]]
        expected = [[5, 5], [5, 10]]  # This is the result of matrix^2
        result = power(matrix, 2)
        self.assertEqual(result, expected)

    def test_negative_power(self):
        # Testing matrix to a negative power (should raise ValueError)
        matrix = [[2, 1], [1, 3]]
        with self.assertRaises(ValueError):
            power(matrix, -1)
```

### Equivalent Jest Test Suite:

```javascript
const power = require('./power'); // Assuming the power function is defined in a separate file

describe('TestMatrixPower', () => {
    describe('test_identity_matrix', () => {
        it('should return the identity matrix when raised to the power of 1', () => {
            const matrix = [[1, 0], [0, 1]];
            const expected = [[1, 0], [0, 1]];
            const result = power(matrix, 1);
            expect(result).toEqual(expected);
        });
    });

    describe('test_zero_power', () => {
        it('should return the identity matrix when raised to the power of 0', () => {
            const matrix = [[2, 3], [1, 4]];
            const expected = [[1, 0], [0, 1]];
            const result = power(matrix, 0);
            expect(result).toEqual(expected);
        });
    });

    describe('test_positive_power', () => {
        it('should correctly compute the power of a matrix', () => {
            const matrix = [[2, 1], [1, 3]];
            const expected = [[5, 5], [5, 10]]; // This is the result of matrix^2
            const result = power(matrix, 2);
            expect(result).toEqual(expected);
        });
    });

    describe('test_negative_power', () => {
        it('should throw an error when raised to a negative power', () => {
            const matrix = [[2, 1], [1, 3]];
            expect(() => power(matrix, -1)).toThrow('The exponent n must be a non-negative integer.');
        });
    });
});
```

### Explanation:
1. **Import Statements**:
   - The `power` function is assumed to be defined in a separate file and imported at the beginning of the test suite.

2. **describe Blocks**:
   - Each test case is wrapped in a `describe` block to group related tests together.
   - Each `describe` block contains an `it` block that defines the specific test case.

3. **Assertions**:
   - `expect(result).toEqual(expected)` is used to check if the result matches the expected value.
   - `expect(() => power(matrix, -1)).toThrow('The exponent n must be a non-negative integer.')` is used to check if the function throws the expected error message.

4. **Structure**:
   - The structure follows Jest's conventions, where each test case is clearly defined and documented using JSDoc-style comments.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adapting to Jest's syntax and conventions.