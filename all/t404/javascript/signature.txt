Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Computes the n-th power of a matrix using the fast exponentiation method.
 * 
 * @param {Array<Array<number>>} matrix - A square matrix to be exponentiated.
 * @param {number} n - The exponent to raise the matrix to. Must be a non-negative integer.
 * 
 * @returns {Array<Array<number>>} The matrix raised to the power of n.
 * 
 * @throws {Error} If n is negative.
 * @throws {TypeError} If matrix is not a list of lists or n is not an integer.
 */
function power(matrix, n) {
    if (n < 0) {
        throw new Error("The exponent n must be a non-negative integer.");
    }
    if (!Number.isInteger(n)) {
        throw new TypeError("The exponent n must be an integer.");
    }

    // Identity matrix of the same size as the input matrix
    const size = matrix.length;
    const result = Array.from({ length: size }, (_, i) =>
        Array.from({ length: size }, (_, j) => (i === j ? 1 : 0))
    );

    let base = matrix.map(row => row.slice());

    while (n > 0) {
        if (n % 2 === 1) {
            result = multiplyMatrices(result, base);
        }
        base = multiplyMatrices(base, base);
        n = Math.floor(n / 2);
    }

    return result;
}

// Helper function for matrix multiplication
function multiplyMatrices(A, B) {
    // Multiplies two matrices A and B and returns the result.
    return A.map(A_row => 
        B[0].map((_, colIndex) => 
            A_row.reduce((sum, a, rowIndex) => 
                sum + a * B[rowIndex][colIndex], 0)
        )
    );
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comments provide detailed documentation for the function parameters, return values, and possible exceptions.
   - The `@param`, `@returns`, and `@throws` tags are used to document the function's behavior.

2. **Function Signature**:
   - The function `power` takes two arguments: `matrix` and `n`.
   - The function `multiplyMatrices` is a helper function used within `power`.

3. **Error Handling**:
   - The function checks if `n` is a non-negative integer and throws appropriate errors if the conditions are not met.

4. **Matrix Operations**:
   - The identity matrix is created using `Array.from` and nested `Array.from` calls.
   - The fast exponentiation method is implemented using a while loop and the `multiplyMatrices` helper function.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JSDoc standards for documentation.