Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function multiplyMatrices(A, B) {
    // Multiplies two matrices A and B and returns the result.
    return A.map(A_row => 
        B[0].map((_, colIndex) => 
            A_row.reduce((sum, a, rowIndex) => sum + a * B[rowIndex][colIndex], 0)
        )
    );
}

function power(matrix, n) {
    /**
     * Computes the n-th power of a matrix using the fast exponentiation method.
     *
     * @param {Array<Array<number>>} matrix - A square matrix to be exponentiated.
     * @param {number} n - The exponent to raise the matrix to. Must be a non-negative integer.
     *
     * @returns {Array<Array<number>>} The matrix raised to the power of n.
     *
     * @throws {Error} If n is negative.
     * @throws {TypeError} If matrix is not a list of lists or n is not an integer.
     */
    if (n < 0) {
        throw new Error("The exponent n must be a non-negative integer.");
    }
    if (!Number.isInteger(n)) {
        throw new TypeError("The exponent n must be an integer.");
    }

    // Identity matrix of the same size as the input matrix
    const size = matrix.length;
    const result = Array.from({ length: size }, (_, i) =>
        Array.from({ length: size }, (_, j) => (i === j ? 1 : 0))
    );

    let base = matrix.slice();

    while (n > 0) {
        if (n % 2 === 1) {
            result = multiplyMatrices(result, base);
        }
        base = multiplyMatrices(base, base);
        n = Math.floor(n / 2);
    }

    return result;
}
```

### Explanation:

1. **multiplyMatrices Function**:
   - `A.map(A_row => ...)` iterates over each row of matrix `A`.
   - `B[0].map((_, colIndex) => ...)` iterates over each column index of matrix `B`.
   - `A_row.reduce((sum, a, rowIndex) => sum + a * B[rowIndex][colIndex], 0)` computes the dot product of the corresponding rows and columns.

2. **power Function**:
   - Checks if `n` is negative or not an integer and throws appropriate errors.
   - Creates an identity matrix using `Array.from`.
   - Uses `slice()` to create a shallow copy of the input matrix.
   - Performs the fast exponentiation algorithm by repeatedly multiplying the base matrix and updating the result matrix.

This JavaScript code should function identically to the provided Python code.