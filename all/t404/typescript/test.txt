Certainly! Below is the equivalent Jest test class in TypeScript, which preserves the functionality and logic of the provided Python unittest class. The test cases are mapped to Jest assertions, and the necessary type annotations are included.

### TypeScript Code with Jest Tests

```typescript
import { power } from './matrixPower'; // Import the power function from the matrixPower module

describe('TestMatrixPower', () => {
    describe('test_identity_matrix', () => {
        it('should return the identity matrix when the power is 1', () => {
            const matrix: number[][] = [[1, 0], [0, 1]];
            const expected: number[][] = [[1, 0], [0, 1]];
            const result = power(matrix, 1);
            expect(result).toEqual(expected);
        });
    });

    describe('test_zero_power', () => {
        it('should return the identity matrix when the power is 0', () => {
            const matrix: number[][] = [[2, 3], [1, 4]];
            const expected: number[][] = [[1, 0], [0, 1]];
            const result = power(matrix, 0);
            expect(result).toEqual(expected);
        });
    });

    describe('test_positive_power', () => {
        it('should correctly compute the power of a matrix for a positive exponent', () => {
            const matrix: number[][] = [[2, 1], [1, 3]];
            const expected: number[][] = [[5, 5], [5, 10]]; // This is the result of matrix^2
            const result = power(matrix, 2);
            expect(result).toEqual(expected);
        });
    });

    describe('test_negative_power', () => {
        it('should throw an error when the power is negative', () => {
            const matrix: number[][] = [[2, 1], [1, 3]];
            expect(() => power(matrix, -1)).toThrow('The exponent n must be a non-negative integer.');
        });
    });
});

// Utility function to multiply matrices (for reference)
function multiplyMatrices(A: number[][], B: number[][]): number[][] {
    const result: number[][] = [];
    for (let i = 0; i < A.length; i++) {
        const row: number[] = [];
        for (let j = 0; j < B[0].length; j++) {
            let sum = 0;
            for (let k = 0; k < A[0].length; k++) {
                sum += A[i][k] * B[k][j];
            }
            row.push(sum);
        }
        result.push(row);
    }
    return result;
}

// Power function implementation (for reference)
function power(matrix: number[][], n: number): number[][] {
    if (n < 0) {
        throw new Error('The exponent n must be a non-negative integer.');
    }
    if (!Number.isInteger(n)) {
        throw new TypeError('The exponent n must be an integer.');
    }

    // Identity matrix of the same size as the input matrix
    const result: number[][] = matrix.map((_, i) =>
        matrix.map((_, j) => i === j ? 1 : 0)
    );

    let base = [...matrix];

    while (n > 0) {
        if (n % 2 === 1) {
            result = multiplyMatrices(result, base);
        }
        base = multiplyMatrices(base, base);
        n = Math.floor(n / 2);
    }

    return result;
}
```

### Explanation:
1. **Importing the Power Function**:
   - The `power` function is imported from the `matrixPower` module.

2. **Describe Blocks**:
   - Each test case is wrapped in a `describe` block for better organization.
   - Each `it` block contains a specific test case.

3. **Test Cases**:
   - `test_identity_matrix`: Tests the power function with an identity matrix.
   - `test_zero_power`: Tests the power function with a zero exponent.
   - `test_positive_power`: Tests the power function with a positive exponent.
   - `test_negative_power`: Tests the power function with a negative exponent and expects an error.

4. **Assertions**:
   - `expect(result).toEqual(expected)` is used to check if the result matches the expected value.
   - `expect(() => power(matrix, -1)).toThrow('The exponent n must be a non-negative integer.')` is used to check if the function throws the expected error message.

5. **Utility Functions**:
   - `multiplyMatrices` is included for reference and can be used within the `power` function.

This TypeScript code preserves the functionality and logic of the original Python unittest class while adapting to Jest's testing framework and TypeScript's static type system.