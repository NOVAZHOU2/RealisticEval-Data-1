Certainly! Below is the TypeScript code equivalent to the provided Python code, including the conversion of the function signature, comments, and docstrings to TypeScript documentation using the JSDoc style:

```typescript
/**
 * Computes the n-th power of a matrix using the fast exponentiation method.
 *
 * @param matrix - A square matrix to be exponentiated.
 * @param n - The exponent to raise the matrix to. Must be a non-negative integer.
 * @returns The matrix raised to the power of n.
 * @throws {Error} If n is negative.
 * @throws {TypeError} If matrix is not a list of lists or n is not an integer.
 */
function power(matrix: number[][], n: number): number[][] {
    if (n < 0) {
        throw new Error("The exponent n must be a non-negative integer.");
    }
    if (!Number.isInteger(n)) {
        throw new TypeError("The exponent n must be an integer.");
    }

    // Identity matrix of the same size as the input matrix
    const result: number[][] = matrix.map((_, i) =>
        matrix.map((_, j) => i === j ? 1 : 0)
    );

    let base = [...matrix];

    while (n > 0) {
        if (n % 2 === 1) {
            result = multiplyMatrices(result, base);
        }
        base = multiplyMatrices(base, base);
        n = Math.floor(n / 2);
    }

    return result;
}

/**
 * Multiplies two matrices A and B and returns the result.
 * @param A - The first matrix.
 * @param B - The second matrix.
 * @returns The resulting matrix.
 */
function multiplyMatrices(A: number[][], B: number[][]): number[][] {
    const result: number[][] = [];
    for (let i = 0; i < A.length; i++) {
        const row: number[] = [];
        for (let j = 0; j < B[0].length; j++) {
            let sum = 0;
            for (let k = 0; k < A[0].length; k++) {
                sum += A[i][k] * B[k][j];
            }
            row.push(sum);
        }
        result.push(row);
    }
    return result;
}
```

### Explanation:
1. **Type Definitions**:
   - `matrix` is typed as `number[][]` to represent a 2D array of numbers.
   - `n` is typed as `number`.

2. **Function `power`**:
   - The function `power` includes JSDoc comments to document the parameters, return type, and possible exceptions.
   - It checks if `n` is a non-negative integer and throws appropriate errors if not.
   - It initializes an identity matrix of the same size as the input matrix.
   - It performs the fast exponentiation by repeatedly squaring the base matrix and multiplying it with the result matrix when `n` is odd.

3. **Function `multiplyMatrices`**:
   - This function multiplies two matrices `A` and `B`.
   - It uses nested loops to iterate over the rows and columns of the matrices and calculates the dot product of corresponding rows and columns.

4. **JSDoc Comments**:
   - The JSDoc comments provide clear documentation for each function, including parameter descriptions, return types, and possible exceptions.

This TypeScript code preserves the original functionality and structure of the Python code while adapting to TypeScript's static type system and idiomatic practices.