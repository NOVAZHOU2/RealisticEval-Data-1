Certainly! Below is the TypeScript code equivalent to the provided Python code:

```typescript
type Matrix = number[][];

function multiplyMatrices(A: Matrix, B: Matrix): Matrix {
    const result: Matrix = [];
    for (let i = 0; i < A.length; i++) {
        const row: number[] = [];
        for (let j = 0; j < B[0].length; j++) {
            let sum = 0;
            for (let k = 0; k < A[0].length; k++) {
                sum += A[i][k] * B[k][j];
            }
            row.push(sum);
        }
        result.push(row);
    }
    return result;
}

function power(matrix: Matrix, n: number): Matrix {
    if (n < 0) {
        throw new Error("The exponent n must be a non-negative integer.");
    }
    if (!Number.isInteger(n)) {
        throw new TypeError("The exponent n must be an integer.");
    }

    // Identity matrix of the same size as the input matrix
    const result: Matrix = matrix.map((_, i) => 
        matrix.map((_, j) => i === j ? 1 : 0)
    );

    let base = [...matrix];

    while (n > 0) {
        if (n % 2 === 1) {
            result = multiplyMatrices(result, base);
        }
        base = multiplyMatrices(base, base);
        n = Math.floor(n / 2);
    }

    return result;
}
```

### Explanation:
1. **Type Definitions**:
   - `Matrix` is defined as `number[][]` to represent a 2D array of numbers.

2. **Function `multiplyMatrices`**:
   - This function multiplies two matrices `A` and `B`.
   - It uses nested loops to iterate over the rows and columns of the matrices and calculates the dot product of corresponding rows and columns.

3. **Function `power`**:
   - This function computes the `n`-th power of a matrix using the fast exponentiation method.
   - It checks if `n` is a non-negative integer and throws appropriate errors if not.
   - It initializes an identity matrix of the same size as the input matrix.
   - It performs the fast exponentiation by repeatedly squaring the base matrix and multiplying it with the result matrix when `n` is odd.

4. **Error Handling**:
   - The function `power` throws an error if `n` is negative and a `TypeError` if `n` is not an integer.

This TypeScript code maintains the functionality, structure, and logic of the original Python code while adapting to TypeScript's static type system and idiomatic practices.