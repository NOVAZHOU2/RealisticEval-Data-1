Certainly! Here is the equivalent TypeScript code for the given Python functions:

```typescript
function multiplyMatrices(A: number[][], B: number[][]): number[][] {
    // Multiplies two matrices A and B and returns the result.
    return A.map(A_row =>
        B[0].map((_, colIndex) => 
            A_row.reduce((sum, a, rowIndex) => sum + a * B[rowIndex][colIndex], 0)
        )
    );
}

function power(matrix: number[][], n: number): number[][] {
    /**
     * Computes the n-th power of a matrix using the fast exponentiation method.
     *
     * @param matrix - A square matrix to be exponentiated.
     * @param n - The exponent to raise the matrix to. Must be a non-negative integer.
     * @returns The matrix raised to the power of n.
     * @throws {Error} If n is negative or if matrix is not a list of lists.
     */
    if (n < 0) {
        throw new Error("The exponent n must be a non-negative integer.");
    }
    if (!Number.isInteger(n)) {
        throw new Error("The exponent n must be an integer.");
    }

    const size = matrix.length;
    const result: number[][] = Array.from({ length: size }, () => 
        Array.from({ length: size }, (_, index) => (index === 0 ? 1 : 0))
    );

    let base = matrix.map(row => [...row]);

    while (n > 0) {
        if (n % 2 === 1) {
            result = multiplyMatrices(result, base);
        }
        base = multiplyMatrices(base, base);
        n = Math.floor(n / 2);
    }

    return result;
}
```

### Explanation:

1. **Type Definitions**:
   - All function parameters and return types are explicitly defined with TypeScript types (`number[][]` for matrices and `number` for integers).

2. **Function `multiplyMatrices`**:
   - This function multiplies two matrices using the standard matrix multiplication algorithm.
   - It uses `.map()` and `.reduce()` to perform the operations.

3. **Function `power`**:
   - This function computes the n-th power of a matrix using the fast exponentiation method.
   - It checks if `n` is a non-negative integer and throws appropriate errors if the conditions are not met.
   - It initializes the identity matrix using `Array.from()`.
   - It uses a loop to perform the fast exponentiation by repeatedly squaring the base matrix and multiplying it with the result matrix when `n` is odd.

4. **Error Handling**:
   - The function `power` throws an error if `n` is negative or not an integer.

This TypeScript code maintains the functionality, structure, and logic of the original Python code while adhering to TypeScript's static type system and idiomatic practices.