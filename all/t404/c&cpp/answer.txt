Here is the equivalent C++ code for the provided Python code:

```cpp
#include <iostream>
#include <vector>
#include <stdexcept>

using namespace std;

vector<vector<int>> multiply_matrices(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int rowsA = A.size();
    int colsA = A[0].size();
    int colsB = B[0].size();

    vector<vector<int>> result(rowsA, vector<int>(colsB, 0));

    for (int i = 0; i < rowsA; ++i) {
        for (int j = 0; j < colsB; ++j) {
            for (int k = 0; k < colsA; ++k) {
                result[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    return result;
}

vector<vector<int>> power(const vector<vector<int>>& matrix, int n) {
    if (n < 0) {
        throw invalid_argument("The exponent n must be a non-negative integer.");
    }

    int size = matrix.size();

    // Identity matrix of the same size as the input matrix
    vector<vector<int>> result(size, vector<int>(size, 0));
    for (int i = 0; i < size; ++i) {
        result[i][i] = 1;
    }

    vector<vector<int>> base = matrix;

    while (n > 0) {
        if (n % 2 == 1) {
            result = multiply_matrices(result, base);
        }
        base = multiply_matrices(base, base);
        n /= 2;
    }

    return result;
}

int main() {
    // Example usage
    vector<vector<int>> matrix = {{1, 2}, {3, 4}};
    int n = 2;

    try {
        vector<vector<int>> result = power(matrix, n);
        for (const auto& row : result) {
            for (int val : row) {
                cout << val << " ";
            }
            cout << endl;
        }
    } catch (const exception& e) {
        cerr << "Error: " << e.what() << endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Definitions**:
   - `multiply_matrices`: This function multiplies two matrices `A` and `B` and returns the result.
   - `power`: This function computes the `n`-th power of a matrix using the fast exponentiation method.

2. **Error Handling**:
   - In the `power` function, if `n` is negative, it throws a `std::invalid_argument`.
   - No specific check is needed for the type of `n` since it is always an `int` in C++.

3. **Identity Matrix Creation**:
   - An identity matrix of the same size as the input matrix is created using nested loops.

4. **Fast Exponentiation**:
   - The fast exponentiation algorithm is implemented using a loop that repeatedly squares the base matrix and multiplies it with the result matrix when `n` is odd.

5. **Example Usage**:
   - In the `main` function, an example matrix and exponent are used to demonstrate the functionality of the `power` function.
   - Error handling is included to catch and print any exceptions thrown during execution.

This code maintains the functionality and logic of the original Python code while adhering to C++ syntax and features.