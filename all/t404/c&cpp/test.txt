Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager like vcpkg.

Here is the complete C++ code with the Catch2 test suite:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <stdexcept>

// Matrix multiplication function
std::vector<std::vector<int>> multiply_matrices(const std::vector<std::vector<int>>& A, const std::vector<std::vector<int>>& B);

// Function to compute the n-th power of a matrix using fast exponentiation
std::vector<std::vector<int>> power(const std::vector<std::vector<int>>& matrix, int n);

TEST_CASE("Test Matrix Power", "[matrix_power]") {
    SECTION("Identity Matrix") {
        // Testing the power function with an identity matrix
        std::vector<std::vector<int>> matrix = {{1, 0}, {0, 1}};
        std::vector<std::vector<int>> expected = {{1, 0}, {0, 1}};
        auto result = power(matrix, 1);
        REQUIRE(result == expected);
    }

    SECTION("Zero Power") {
        // Testing matrix to the power of zero (should return identity)
        std::vector<std::vector<int>> matrix = {{2, 3}, {1, 4}};
        std::vector<std::vector<int>> expected = {{1, 0}, {0, 1}};
        auto result = power(matrix, 0);
        REQUIRE(result == expected);
    }

    SECTION("Positive Power") {
        // Testing matrix to a positive power
        std::vector<std::vector<int>> matrix = {{2, 1}, {1, 3}};
        std::vector<std::vector<int>> expected = {{5, 5}, {5, 10}};  // This is the result of matrix^2
        auto result = power(matrix, 2);
        REQUIRE(result == expected);
    }

    SECTION("Negative Power") {
        // Testing matrix to a negative power (should throw std::invalid_argument)
        std::vector<std::vector<int>> matrix = {{2, 1}, {1, 3}};
        REQUIRE_THROWS_AS(power(matrix, -1), std::invalid_argument);
    }
}

// Helper function to multiply two matrices
std::vector<std::vector<int>> multiply_matrices(const std::vector<std::vector<int>>& A, const std::vector<std::vector<int>>& B) {
    int rowsA = A.size();
    int colsA = A[0].size();
    int colsB = B[0].size();

    std::vector<std::vector<int>> result(rowsA, std::vector<int>(colsB, 0));

    for (int i = 0; i < rowsA; ++i) {
        for (int j = 0; j < colsB; ++j) {
            for (int k = 0; k < colsA; ++k) {
                result[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    return result;
}

// Function to compute the n-th power of a matrix using fast exponentiation
std::vector<std::vector<int>> power(const std::vector<std::vector<int>>& matrix, int n) {
    if (n < 0) {
        throw std::invalid_argument("The exponent n must be a non-negative integer.");
    }

    int size = matrix.size();
    std::vector<std::vector<int>> result(size, std::vector<int>(size, 0));

    // Initialize identity matrix
    for (int i = 0; i < size; ++i) {
        result[i][i] = 1;
    }

    std::vector<std::vector<int>> base = matrix;

    while (n > 0) {
        if (n % 2 == 1) {
            result = multiply_matrices(result, base);
        }
        base = multiply_matrices(base, base);
        n /= 2;
    }

    return result;
}

int main() {
    // Run Catch2 tests
    int result = Catch::Session().run();
    return result;
}
```

### Explanation:
1. **Catch2 Test Class**:
   - The `TEST_CASE` macro defines a test case named "Test Matrix Power".
   - Each `SECTION` within the test case represents a specific test scenario.
   - Assertions are performed using `REQUIRE` for equality checks and `REQUIRE_THROWS_AS` for exception checks.

2. **Matrix Multiplication Function**:
   - The `multiply_matrices` function performs matrix multiplication using nested loops.

3. **Power Function**:
   - The `power` function computes the n-th power of a matrix using fast exponentiation.
   - It initializes an identity matrix and uses a while loop to perform the exponentiation.
   - It throws a `std::invalid_argument` if the exponent `n` is negative.

4. **Main Function**:
   - The `main` function runs the Catch2 tests and returns the test results.

This code ensures that the functionality and logic of the tests are preserved while adapting to the syntax and features of C++ and the Catch2 testing framework.