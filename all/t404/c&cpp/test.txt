Sure! Below is the conversion of the Python function `power` into C++ along with a test suite using the Catch2 testing framework. I'll include the necessary headers, define the function, and write the tests.

### C++ Code

First, let's define the function `power` in C++:

```cpp
#include <vector>
#include <stdexcept>
#include <catch2/catch_test_macros.hpp>

std::vector<std::vector<int>> power(const std::vector<std::vector<int>>& matrix, int n) {
    if (n < 0) {
        throw std::invalid_argument("Exponent must be a non-negative integer.");
    }

    // Initialize the result as the identity matrix
    std::vector<std::vector<int>> result(matrix.size(), std::vector<int>(matrix.size(), 0));
    for (size_t i = 0; i < matrix.size(); ++i) {
        result[i][i] = 1;
    }

    std::vector<std::vector<int>> temp = matrix;

    while (n > 0) {
        if (n % 2 == 1) {
            result = multiply(result, temp);
        }
        temp = multiply(temp, temp);
        n /= 2;
    }

    return result;
}

// Helper function to multiply two matrices
std::vector<std::vector<int>> multiply(const std::vector<std::vector<int>>& a, const std::vector<std::vector<int>>& b) {
    size_t size = a.size();
    std::vector<std::vector<int>> product(size, std::vector<int>(size, 0));

    for (size_t i = 0; i < size; ++i) {
        for (size_t j = 0; j < size; ++j) {
            for (size_t k = 0; k < size; ++k) {
                product[i][j] += a[i][k] * b[k][j];
            }
        }
    }

    return product;
}

// Test Suite using Catch2
TEST_CASE("Test Power Function", "[power]") {
    SECTION("Identity Matrix") {
        std::vector<std::vector<int>> matrix = {{1, 0}, {0, 1}};
        auto result = power(matrix, 3);
        REQUIRE(result == (std::vector<std::vector<int>>{{1, 0}, {0, 1}}));
    }

    SECTION("Square Matrix") {
        std::vector<std::vector<int>> matrix = {{1, 2}, {3, 4}};
        auto result = power(matrix, 2);
        REQUIRE(result == (std::vector<std::vector<int>>{{7, 10}, {15, 22}}));
    }

    SECTION("Negative Exponent") {
        std::vector<std::vector<int>> matrix = {{1, 2}, {3, 4}};
        REQUIRE_THROWS_AS(power(matrix, -1), std::invalid_argument);
    }

    SECTION("Non-square Matrix") {
        std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}};
        REQUIRE_THROWS_AS(power(matrix, 2), std::invalid_argument);
    }
}
```

### Explanation

1. **Headers**: We include the necessary headers (`<vector>`, `<stdexcept>`, `<catch2/catch_test_macros.hpp>`).

2. **Function Definition**: The `power` function computes the n-th power of a matrix using the fast exponentiation method. It checks for invalid input and initializes the result as the identity matrix. It uses a helper function `multiply` to perform matrix multiplication.

3. **Multiply Function**: The `multiply` function takes two matrices and returns their product.

4. **Test Suite**: The `TEST_CASE` macro defines a test case named "Test Power Function". Inside it, we have multiple `SECTION`s to test different scenarios:
   - **Identity Matrix**: Tests the power of the identity matrix.
   - **Square Matrix**: Tests the power of a non-identity square matrix.
   - **Negative Exponent**: Tests the function with a negative exponent.
   - **Non-square Matrix**: Tests the function with a non-square matrix.

This setup ensures that the functionality and logic of the original Python unittest are preserved in the C++ Catch2 test suite.