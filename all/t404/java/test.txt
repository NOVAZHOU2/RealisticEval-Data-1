Here's how you can convert your Python unittest test class to a Java JUnit test case:

```java
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class Tester {
    
    @Test(expected = IllegalArgumentException.class)
    public void testNegativeExponent() {
        int[][] matrix = {{1, 2}, {3, 4}};
        MatrixPower.power(matrix, -1);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testNonIntegerExponent() {
        int[][] matrix = {{1, 2}, {3, 4}};
        MatrixPower.power(matrix, 1.5);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testNonMatrixInput() {
        Object[] input = {"not", "a", "matrix"};
        MatrixPower.power(input, 2);
    }
    
    // Add more tests for other scenarios...
}
```

Note that in Java, we don't have direct equivalents to Python's `ValueError` and `TypeError`, so I've used `IllegalArgumentException` instead. Also, since Java doesn't support function overloading like Python, you might need to create separate methods for different types of inputs if necessary.

Please replace `MatrixPower.power()` with your actual method call which should compute the power of a matrix.