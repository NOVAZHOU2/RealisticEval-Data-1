Certainly! Below is the equivalent Java test class using JUnit. The test class will be placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

### Java Test Class Using JUnit

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

public class Tester {

    @Test
    public void testIdentityMatrix() {
        // Testing the power function with an identity matrix
        List<List<Integer>> matrix = new ArrayList<>();
        matrix.add(new ArrayList<>(List.of(1, 0)));
        matrix.add(new ArrayList<>(List.of(0, 1)));

        List<List<Integer>> expected = new ArrayList<>();
        expected.add(new ArrayList<>(List.of(1, 0)));
        expected.add(new ArrayList<>(List.of(0, 1)));

        List<List<Integer>> result = power(matrix, 1);
        assertEquals(expected, result);
    }

    @Test
    public void testZeroPower() {
        // Testing matrix to the power of zero (should return identity)
        List<List<Integer>> matrix = new ArrayList<>();
        matrix.add(new ArrayList<>(List.of(2, 3)));
        matrix.add(new ArrayList<>(List.of(1, 4)));

        List<List<Integer>> expected = new ArrayList<>();
        expected.add(new ArrayList<>(List.of(1, 0)));
        expected.add(new ArrayList<>(List.of(0, 1)));

        List<List<Integer>> result = power(matrix, 0);
        assertEquals(expected, result);
    }

    @Test
    public void testPositivePower() {
        // Testing matrix to a positive power
        List<List<Integer>> matrix = new ArrayList<>();
        matrix.add(new ArrayList<>(List.of(2, 1)));
        matrix.add(new ArrayList<>(List.of(1, 3)));

        List<List<Integer>> expected = new ArrayList<>();
        expected.add(new ArrayList<>(List.of(5, 5)));
        expected.add(new ArrayList<>(List.of(5, 10)));  // This is the result of matrix^2

        List<List<Integer>> result = power(matrix, 2);
        assertEquals(expected, result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testNegativePower() {
        // Testing matrix to a negative power (should raise IllegalArgumentException)
        List<List<Integer>> matrix = new ArrayList<>();
        matrix.add(new ArrayList<>(List.of(2, 1)));
        matrix.add(new ArrayList<>(List.of(1, 3)));

        power(matrix, -1);
    }

    // Helper method for matrix multiplication
    private List<List<Integer>> multiplyMatrices(List<List<Integer>> A, List<List<Integer>> B) {
        int rowsA = A.size();
        int colsA = A.get(0).size();
        int colsB = B.get(0).size();

        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < rowsA; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < colsB; j++) {
                int sum = 0;
                for (int k = 0; k < colsA; k++) {
                    sum += A.get(i).get(k) * B.get(k).get(j);
                }
                row.add(sum);
            }
            result.add(row);
        }
        return result;
    }

    // Method to compute the n-th power of a matrix using fast exponentiation
    private List<List<Integer>> power(List<List<Integer>> matrix, int n) throws IllegalArgumentException {
        if (n < 0) {
            throw new IllegalArgumentException("The exponent n must be a non-negative integer.");
        }

        // Identity matrix of the same size as the input matrix
        List<List<Integer>> result = new ArrayList<>();
        int size = matrix.size();
        for (int i = 0; i < size; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < size; j++) {
                row.add(i == j ? 1 : 0);
            }
            result.add(row);
        }

        List<List<Integer>> base = new ArrayList<>(matrix);

        while (n > 0) {
            if (n % 2 == 1) {
                result = multiplyMatrices(result, base);
            }
            base = multiplyMatrices(base, base);
            n /= 2;
        }

        return result;
    }
}
```

### Explanation:
1. **JUnit Annotations**: The Python `unittest` decorators (`@test`) are replaced with JUnit annotations (`@Test`).
2. **Assertion Methods**: The Python `assertEqual` method is replaced with the JUnit `assertEquals` method.
3. **Exception Handling**: The Python `assertRaises` context manager is replaced with the JUnit `expected` attribute on the `@Test` annotation.
4. **Helper Methods**: The `multiplyMatrices` and `power` methods are included as private helper methods to perform matrix multiplication and exponentiation.
5. **Test Methods**: Each test method is annotated with `@Test` and contains the necessary assertions to validate the behavior of the `power` method.

This Java code preserves the original functionality and structure of the Python test class while adhering to JUnit conventions and best practices.