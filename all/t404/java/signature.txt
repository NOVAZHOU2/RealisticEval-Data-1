Sure, here is the equivalent Java code for the given Python function, including appropriate comments and Javadoc:

```java
import java.util.List;
import java.util.ArrayList;

public class MatrixOperations {

    /**
     * Computes the n-th power of a matrix using the fast exponentiation method.
     *
     * @param matrix A square matrix to be exponentiated.
     * @param n The exponent to raise the matrix to. Must be a non-negative integer.
     * @return The matrix raised to the power of n.
     * @throws IllegalArgumentException If n is negative.
     * @throws IllegalArgumentException If matrix is not a list of lists or n is not an integer.
     */
    public static List<List<Integer>> power(List<List<Integer>> matrix, int n) throws IllegalArgumentException {
        if (n < 0) {
            throw new IllegalArgumentException("Exponent must be a non-negative integer.");
        }
        
        // Check if matrix is a square matrix
        if (matrix == null || matrix.isEmpty() || matrix.size() != matrix.get(0).size()) {
            throw new IllegalArgumentException("Matrix must be a square matrix.");
        }

        // Base case
        if (n == 0) {
            List<List<Integer>> identity = new ArrayList<>();
            for (int i = 0; i < matrix.size(); i++) {
                List<Integer> row = new ArrayList<>();
                for (int j = 0; j < matrix.size(); j++) {
                    row.add(i == j ? 1 : 0);
                }
                identity.add(row);
            }
            return identity;
        }

        // Recursive case
        if (n % 2 == 0) {
            return power(power(matrix, n / 2), 2);
        } else {
            return multiply(matrix, power(matrix, n - 1));
        }
    }

    /**
     * Multiplies two matrices.
     *
     * @param a The first matrix.
     * @param b The second matrix.
     * @return The result of multiplying a by b.
     */
    private static List<List<Integer>> multiply(List<List<Integer>> a, List<List<Integer>> b) {
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < a.size(); i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < b.get(0).size(); j++) {
                int sum = 0;
                for (int k = 0; k < a.get(0).size(); k++) {
                    sum += a.get(i).get(k) * b.get(k).get(j);
                }
                row.add(sum);
            }
            result.add(row);
        }
        return result;
    }
}
```

This Java code defines a `MatrixOperations` class with a `power` method that computes the n-th power of a matrix, and a helper `multiply` method to handle matrix multiplication. The Javadoc comments provide detailed documentation for the methods, including parameter descriptions, return values, and possible exceptions.