Certainly! Below is the equivalent Java code for the given Python function, including appropriate Javadoc comments and type conversions:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Answer {

    /**
     * Computes the n-th power of a matrix using the fast exponentiation method.
     *
     * @param matrix A square matrix to be exponentiated.
     * @param n      The exponent to raise the matrix to. Must be a non-negative integer.
     * @return The matrix raised to the power of n.
     * @throws IllegalArgumentException If n is negative or if matrix is not a valid square matrix.
     */
    public static List<List<Integer>> power(List<List<Integer>> matrix, int n) throws IllegalArgumentException {
        if (n < 0) {
            throw new IllegalArgumentException("The exponent n must be a non-negative integer.");
        }

        // Identity matrix of the same size as the input matrix
        List<List<Integer>> result = new ArrayList<>();
        int size = matrix.size();
        for (int i = 0; i < size; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < size; j++) {
                row.add(i == j ? 1 : 0);
            }
            result.add(row);
        }

        List<List<Integer>> base = new ArrayList<>(matrix);

        while (n > 0) {
            if (n % 2 == 1) {
                result = multiplyMatrices(result, base);
            }
            base = multiplyMatrices(base, base);
            n /= 2;
        }

        return result;
    }

    /**
     * Multiplies two matrices A and B and returns the result.
     *
     * @param A The first matrix.
     * @param B The second matrix.
     * @return The result of multiplying A and B.
     */
    private static List<List<Integer>> multiplyMatrices(List<List<Integer>> A, List<List<Integer>> B) {
        int rowsA = A.size();
        int colsA = A.get(0).size();
        int colsB = B.get(0).size();

        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < rowsA; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < colsB; j++) {
                int sum = 0;
                for (int k = 0; k < colsA; k++) {
                    sum += A.get(i).get(k) * B.get(k).get(j);
                }
                row.add(sum);
            }
            result.add(row);
        }
        return result;
    }

    public static void main(String[] args) {
        // Example usage
        List<List<Integer>> matrix = new ArrayList<>();
        matrix.add(new ArrayList<>(List.of(1, 2)));
        matrix.add(new ArrayList<>(List.of(3, 4)));

        int n = 2;
        try {
            List<List<Integer>> result = power(matrix, n);
            System.out.println("Result: " + result);
        } catch (IllegalArgumentException e) {
            System.err.println(e.getMessage());
        }
    }
}
```

### Explanation:
1. **Javadoc Comments**: The Python docstring has been converted into Javadoc comments, providing clear documentation for the `power` method.
2. **Type Conversions**: The Python type annotations `List[List[int]]` and `int` have been translated into Java types `List<List<Integer>>` and `int`.
3. **Exception Handling**: The Python `ValueError` and `TypeError` have been replaced with a single `IllegalArgumentException` in Java.
4. **Method Structure**: The `power` method is defined with appropriate parameter types and throws an exception if the input is invalid.
5. **Helper Method**: The `multiplyMatrices` method is included as a private helper method to perform matrix multiplication.
6. **Main Method**: An example usage of the `power` method is provided in the `main` method.

This Java code preserves the original functionality and structure of the Python code while adhering to Java conventions and best practices.