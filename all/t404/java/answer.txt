Below is the equivalent Java code for the provided Python code, organized within the package `org.real.temp` and the class `Answer`. It includes necessary type declarations, method signatures, and exception handling.

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Answer {

    public static List<List<Integer>> multiplyMatrices(List<List<Integer>> A, List<List<Integer>> B) {
        int rowsA = A.size();
        int colsA = A.get(0).size();
        int colsB = B.get(0).size();

        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < rowsA; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < colsB; j++) {
                int sum = 0;
                for (int k = 0; k < colsA; k++) {
                    sum += A.get(i).get(k) * B.get(k).get(j);
                }
                row.add(sum);
            }
            result.add(row);
        }

        return result;
    }

    public static List<List<Integer>> power(List<List<Integer>> matrix, int n) throws IllegalArgumentException {
        if (n < 0) {
            throw new IllegalArgumentException("The exponent n must be a non-negative integer.");
        }

        List<List<Integer>> result = identityMatrix(matrix.size());
        List<List<Integer>> base = new ArrayList<>(matrix);

        while (n > 0) {
            if (n % 2 == 1) {
                result = multiplyMatrices(result, base);
            }
            base = multiplyMatrices(base, base);
            n /= 2;
        }

        return result;
    }

    private static List<List<Integer>> identityMatrix(int size) {
        List<List<Integer>> identity = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < size; j++) {
                row.add((i == j) ? 1 : 0);
            }
            identity.add(row);
        }
        return identity;
    }

    public static void main(String[] args) {
        // Example usage
        List<List<Integer>> A = new ArrayList<>();
        A.add(new ArrayList<>(List.of(1, 2)));
        A.add(new ArrayList<>(List.of(3, 4)));

        List<List<Integer>> B = new ArrayList<>();
        B.add(new ArrayList<>(List.of(5, 6)));
        B.add(new ArrayList<>(List.of(7, 8)));

        List<List<Integer>> result = multiplyMatrices(A, B);
        System.out.println("Result of multiplying A and B:");
        result.forEach(row -> System.out.println(row));

        List<List<Integer>> C = new ArrayList<>();
        C.add(new ArrayList<>(List.of(1, 2)));
        C.add(new ArrayList<>(List.of(3, 4)));

        try {
            List<List<Integer>> powered = power(C, 2);
            System.out.println("C^2:");
            powered.forEach(row -> System.out.println(row));
        } catch (IllegalArgumentException e) {
            System.err.println(e.getMessage());
        }
    }
}
```

### Explanation:

1. **multiplyMatrices Method**: This method multiplies two matrices `A` and `B` and returns the result. It iterates over the rows and columns of the matrices to perform the multiplication.

2. **power Method**: This method computes the `n`-th power of a matrix using the fast exponentiation method. It checks if the exponent `n` is non-negative and throws an `IllegalArgumentException` if it is negative. It initializes the result matrix as the identity matrix and then performs the fast exponentiation process.

3. **identityMatrix Method**: This helper method generates an identity matrix of the given size.

4. **main Method**: This method demonstrates how to use the `multiplyMatrices` and `power` methods with example matrices.

This Java code maintains the functionality and logic of the original Python code while adhering to Java's syntax and language conventions.