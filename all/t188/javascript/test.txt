Hereâ€™s how you can convert the provided C++ Catch2 test cases into equivalent Jest test cases in JavaScript:

```javascript
// Function to check if an array is sorted
function isSorted(arr) {
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] < arr[i - 1]) {
            return false;
        }
    }
    return true;
}

// Test suite for shellSort
describe('Shell sort', () => {
    test('Basic functionality', () => {
        // Test Case 1: Already sorted array
        let arr1 = [1, 2, 3, 4, 5];
        shellSort(arr1);
        expect(isSorted(arr1)).toBe(true);

        // Test Case 2: Reverse sorted array
        let arr2 = [5, 4, 3, 2, 1];
        shellSort(arr2);
        expect(isSorted(arr2)).toBe(true);

        // Test Case 3: Array with duplicate elements
        let arr3 = [4, 2, 2, 4, 1];
        shellSort(arr3);
        expect(isSorted(arr3)).toBe(true);

        // Test Case 4: Array with negative numbers
        let arr4 = [-3, -1, -4, -2, 0];
        shellSort(arr4);
        expect(isSorted(arr4)).toBe(true);

        // Test Case 5: Empty array
        let arr5 = [];
        shellSort(arr5);
        expect(isSorted(arr5)).toBe(true);
    });
});
```

### Key Changes:
1. **Test Structure**: Converted `TEST_CASE` and `SECTION` from Catch2 into `describe` and `test` blocks in Jest.
2. **Assertions**: Used `expect(...).toBe(true)` for assertions instead of `REQUIRE(...)` in Catch2.
3. **Function Definitions**: The `isSorted` function was translated directly from C++ to JavaScript.
4. **Array Length**: Used `arr.length` instead of `arr.size()`.

This Jest test suite maintains the same logic and functionality as the original Catch2 tests.