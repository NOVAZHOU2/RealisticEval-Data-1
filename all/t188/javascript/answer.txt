Hereâ€™s the translated C++ code into JavaScript, maintaining the same logic and functionality while adapting to JavaScript conventions:

```javascript
// Shell sort function
function shellSort(arr) {
    const n = arr.length;

    // Start with a large gap, then reduce the gap
    for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) {
        // Perform a gapped insertion sort
        for (let i = gap; i < n; i++) {
            const temp = arr[i];

            // Shift earlier gap-sorted elements up until the correct location for arr[i] is found
            let j;
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
                arr[j] = arr[j - gap];
            }

            // Put temp (the original arr[i]) in its correct location
            arr[j] = temp;
        }
    }
}

// Function to print an array
function printArray(arr) {
    console.log(arr.join(' '));
}

// Example usage
const arr = [12, 34, 54, 2, 3];
console.log("Original array:");
printArray(arr);
shellSort(arr);
console.log("Sorted array:");
printArray(arr);
```

### Key Changes:
1. **Function Definition**: Used the `function` keyword for defining functions in JavaScript.
2. **Array Length**: Used `arr.length` instead of `arr.size()`.
3. **Math.floor**: Used `Math.floor()` to ensure the gap is an integer.
4. **Console Output**: Used `console.log` for output instead of `std::cout`.
5. **Array Join**: Used `arr.join(' ')` to convert the array to a string for printing. 

This code should work identically in terms of logic to the original C++ version.