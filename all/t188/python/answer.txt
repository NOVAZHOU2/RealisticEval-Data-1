Here’s the Python equivalent of the provided C++ code, which implements the Shell Sort algorithm and includes a function to print an array. The C++ constructs have been translated into Python syntax appropriately.
Converted Python Code:
python
def shell_sort(arr):
    """Shell sort function."""
    n = len(arr)  # Get the size of the array
    # Start with a large gap, then reduce the gap
    gap = n // 2  
    while gap > 0:
        # Perform a gapped insertion sort
        for i in range(gap, n):
            temp = arr[i]
            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            # Put temp (the original arr[i]) in its correct location
            arr[j] = temp
        gap //= 2  # Reduce the gap

def print_array(arr):
    """Function to print an array."""
    for num in arr:
        print(num, end=" ")
    print()  # Print newline at the end

# Example usage:
if __name__ == "__main__":
    example_array = [12, 34, 54, 2, 3]
    print("Original array:")
    print_array(example_array)
    shell_sort(example_array)
    print("Sorted array:")
    print_array(example_array)
Explanation of Changes:
Function Declaration: The shellSort function has been renamed to shell_sort to follow Python's naming conventions (PEP 8).
Array Length: The C++ arr.size() is replaced by len(arr) in Python to get the length of the list.
Gap Calculation: The integer division operator // is used in Python to calculate the initial gap, similar to n / 2 in C++.
Loops: The for-loops and while-loops are adjusted to Python syntax:
C++ style for (int i = ...; i < n; i++) is replaced with Python's for i in range(...).
The inner loop uses a while loop for shifting elements, following the same logic.
Print Function: The C++ printArray function is converted to print_array, utilizing Python’s print() function with end=" " to achieve a similar output format.
Main Block: An example usage is included at the end of the script, which demonstrates sorting an example array. This is common in Python scripts to allow for direct execution.
This Python code will perform the same sorting operations as the original C++ code and will output the sorted array accordingly.