Sure! Below is the equivalent TypeScript test case using Jest for the given Python unittest test class:

```typescript
import { describe, it, expect } from '@jest/globals';

function convertToShortFormat(inputStr: string): string {
    /**
     * Converts a string concatenated with underscores to a short format.
     * For example:
     *     input: f1_p1_g1_b1_c1
     *     output: fpgbc
     * Args:
     *     input_str (str): The input string with segments separated by underscores.
     *
     * Returns:
     *     str: A short format string derived from the first characters of each segment.
     */
    return inputStr.split('_').map(segment => segment[0]).join('');
}

describe('convertToShortFormat', () => {
    it('should convert "f1_p1_g1_b1_c1" to "fpgbc"', () => {
        const result = convertToShortFormat('f1_p1_g1_b1_c1');
        expect(result).toBe('fpgbc');
    });

    it('should handle empty string', () => {
        const result = convertToShortFormat('');
        expect(result).toBe('');
    });

    it('should handle string without underscores', () => {
        const result = convertToShortFormat('abcdefg');
        expect(result).toBe('abcdefg');
    });

    it('should handle string with multiple consecutive underscores', () => {
        const result = convertToShortFormat('a__b___c____d');
        expect(result).toBe('abcd');
    });
});
```

In this TypeScript test case:
- We import `describe`, `it`, and `expect` from `@jest/globals`.
- We define the `convertToShortFormat` function, which performs the same operation as in the Python code.
- We create a `describe` block to group related tests together.
- We use `it` blocks to write individual test cases.
- We use `expect` to assert that the function's output matches the expected result.