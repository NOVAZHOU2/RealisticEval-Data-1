Certainly! Here is the equivalent TypeScript test class using Jest, along with the necessary setup and imports:

1. **Convert the Python unittest test class to a Jest test suite**.
2. **Map the `assertEqual` method to Jest's `expect` assertions**.
3. **Include the necessary imports and type annotations**.

Hereâ€™s the TypeScript code:

```typescript
import { convertToShortFormat } from './path/to/convertToShortFormat'; // Import the function

describe('TestConvertToShortFormat', () => {
    it('test basic case', () => {
        // Test a standard input with mixed characters.
        expect(convertToShortFormat("f1_p1_g1_b1_c1")).toBe("fpgbc");
    });

    it('test multiple segments', () => {
        // Test input with multiple segments.
        expect(convertToShortFormat("a2_b3_c4")).toBe("abc");
    });

    it('test non-alphanumeric', () => {
        // Test input with non-alphanumeric characters.
        expect(convertToShortFormat("hello_world_test")).toBe("hwt");
    });

    it('test single segment', () => {
        // Test a single segment input.
        expect(convertToShortFormat("single")).toBe("s");
    });
});
```

### Explanation:
1. **Imports**:
   - Import the `convertToShortFormat` function from the appropriate module.
   - Jest is typically included via a project setup, so no additional Jest import is needed here.

2. **Test Suite**:
   - Use `describe` to group the tests under a descriptive name.
   - Each test case is defined using `it`, which takes a description and a test function.

3. **Assertions**:
   - Map `assertEqual` to Jest's `expect` assertions.
   - Use `toBe` to check for exact equality.

### Example Usage:
Assuming you have the `convertToShortFormat` function defined in another file (e.g., `convertToShortFormat.ts`), you can import it and run the tests using Jest.

#### `convertToShortFormat.ts`:
```typescript
export function convertToShortFormat(inputStr: string): string {
    // Split the input string by underscores
    const segments = inputStr.split('_');

    // Extract the first character from each segment and join them
    const shortFormat = segments.map(segment => segment[0]).join('');

    return shortFormat;
}
```

#### Running the Tests:
1. Ensure Jest is installed in your project:
   ```sh
   npm install --save-dev jest @types/jest ts-jest
   ```

2. Configure Jest in your `package.json`:
   ```json
   {
     "scripts": {
       "test": "jest"
     },
     "devDependencies": {
       "jest": "^27.0.0",
       "ts-jest": "^27.0.0",
       "@types/jest": "^27.0.0"
     }
   }
   ```

3. Run the tests:
   ```sh
   npm test
   ```

This setup ensures that the tests are executed correctly and that the functionality is preserved.