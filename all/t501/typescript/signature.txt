Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation:

```typescript
/**
 * Converts a string concatenated with underscores to a short format.
 * For example:
 *   input: f1_p1_g1_b1_c1
 *   output: fpgbc
 * 
 * @param inputStr - The input string with segments separated by underscores.
 * @returns A short format string derived from the first characters of each segment.
 */
function convertToShortFormat(inputStr: string): string {
    // Split the input string by underscores
    const segments = inputStr.split('_');

    // Extract the first character from each segment and join them
    const shortFormat = segments.map(segment => segment[0]).join('');

    return shortFormat;
}

// Example usage
console.log(convertToShortFormat("f1_p1_g1_b1_c1"));  // Output: "fpgbc"
```

### Explanation:
- **Function Name**: The function name `convert_to_short_format` is converted to `convertToShortFormat` to follow the camelCase naming convention in TypeScript.
- **Type Annotations**: The parameter `inputStr` is explicitly typed as `string`, and the function return type is also `string`.
- **JSDoc Comments**: The Python docstring is converted to JSDoc-style comments, providing detailed documentation for the function, its parameters, and its return value.
- **Implementation**: The logic remains the same, using `split` to split the input string into segments, `map` to extract the first character of each segment, and `join` to concatenate these characters into the final short format string.

This TypeScript code preserves the original functionality and structure while adhering to TypeScript conventions and best practices.