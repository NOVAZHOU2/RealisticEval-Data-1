Here is the equivalent C++ code that maintains the same functionality, logic, and structure as the provided Python code:

```cpp
#include <iostream>
#include <string>
#include <sstream>

// Function to convert a string concatenated with underscores to a short format
std::string convert_to_short_format(const std::string& input_str) {
    std::istringstream iss(input_str);
    std::string segment;
    std::string short_format;

    // Split the input string by underscores and extract the first character from each segment
    while (std::getline(iss, segment, '_')) {
        if (!segment.empty()) {
            short_format += segment[0];
        }
    }

    return short_format;
}

// Function to test the correctness of the convert_to_short_format function
void test_convert_to_short_format() {
    assert(convert_to_short_format("example_string_with_underscores") == "eswu");
    assert(convert_to_short_format("another_example") == "aex");
    assert(convert_to_short_format("test") == "t");
    assert(convert_to_short_format("_leading_underscore") == "ls");
    assert(convert_to_short_format("trailing_underscore_") == "tu");
    assert(convert_to_short_format("") == "");
    assert(convert_to_short_format("single") == "s");

    std::cout << "All tests passed successfully." << std::endl;
}

int main() {
    test_convert_to_short_format();
    return 0;
}
```

This C++ code uses `std::istringstream` to split the input string by underscores and then constructs the short format string by appending the first character of each segment. The `test_convert_to_short_format` function includes several test cases to verify the correctness of the implementation.