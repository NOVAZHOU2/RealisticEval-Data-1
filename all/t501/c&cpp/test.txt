To convert your Python unittest test class to a C++ Catch2 test case, you'll need to follow these steps:

1. Define a function in C++ that performs the same operation as `convert_to_short_format` in Python.
2. Write a Catch2 test case to verify the correctness of the function.

Here's how you can do it:

### Step 1: Implement the Function in C++

```cpp
#include <string>

std::string convert_to_short_format(const std::string& input_str) {
    if (input_str.empty()) return "";

    std::string result;
    for (char ch : input_str) {
        if (ch == '_') continue;
        result += ch;
    }
    return result;
}
```

### Step 2: Write a Catch2 Test Case

First, make sure you have Catch2 installed and properly set up in your project. Then, create a new test file (e.g., `test_convert_to_short.cpp`) and add the following code:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"

// Include the header where convert_to_short_format is defined
#include "your_header_file.h"  // Replace with the actual path to your header file

TEST_CASE("Convert to Short Format", "[convert_to_short]") {
    REQUIRE(convert_to_short_format("f1_p1_g1_b1_c1") == "fpgbc");
    REQUIRE(convert_to_short_format("") == "");
    REQUIRE(convert_to_short_format("_leading_underscore") == "leadingunderscore");
    REQUIRE(convert_to_short_format("trailing_underscore_") == "trailingunderscore");
    REQUIRE(convert_to_short_format("__multiple__underscores__") == "multipleunderscores");
    REQUIRE(convert_to_short_format("no_underscores") == "nounderscores");
}
```

### Explanation

- **CATCH_CONFIG_MAIN**: This macro tells Catch to generate the `main()` function automatically. Only include this in one source file.
- **TEST_CASE**: Defines a test case with a name and a tag.
- **REQUIRE**: Asserts that the condition is true; if not, the test will fail.

Make sure to replace `"your_header_file.h"` with the actual path to the header file where `convert_to_short_format` is defined.

Now, you should be able to compile and run your tests using Catch2. If everything is set up correctly, running the tests should pass all the cases.