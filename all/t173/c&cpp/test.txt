Hereâ€™s the equivalent test class using Catch2 in C++ for the provided Python unittest code:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <vector>

// Assuming cubic_bezier is defined elsewhere
std::vector<double> cubic_bezier(double t, const std::vector<double>& p0, 
                                  const std::vector<double>& p1, 
                                  const std::vector<double>& p2, 
                                  const std::vector<double>& p3);

TEST_CASE("Cubic Bezier Curve Tests") {
    SECTION("t = 0") {
        std::vector<double> p0 = {0.0, 0.0};
        std::vector<double> p1 = {0.0, 1.0};
        std::vector<double> p2 = {1.0, 1.0};
        std::vector<double> p3 = {1.0, 0.0};
        double t = 0.0;
        std::vector<double> expected = {0.0, 0.0};
        REQUIRE(cubic_bezier(t, p0, p1, p2, p3) == Approx(expected).epsilon(1e-9));
    }

    SECTION("t = 1") {
        std::vector<double> p0 = {0.0, 0.0};
        std::vector<double> p1 = {0.0, 1.0};
        std::vector<double> p2 = {1.0, 1.0};
        std::vector<double> p3 = {1.0, 0.0};
        double t = 1.0;
        std::vector<double> expected = {1.0, 0.0};
        REQUIRE(cubic_bezier(t, p0, p1, p2, p3) == Approx(expected).epsilon(1e-9));
    }

    SECTION("t = 0.5") {
        std::vector<double> p0 = {0.0, 0.0};
        std::vector<double> p1 = {0.0, 1.0};
        std::vector<double> p2 = {1.0, 1.0};
        std::vector<double> p3 = {1.0, 0.0};
        double t = 0.5;
        std::vector<double> expected = {0.5, 0.75};
        REQUIRE(cubic_bezier(t, p0, p1, p2, p3) == Approx(expected).epsilon(1e-9));
    }

    SECTION("Mid point") {
        std::vector<double> p0 = {0.0, 0.0};
        std::vector<double> p1 = {1.0, 1.0};
        std::vector<double> p2 = {2.0, 1.0};
        std::vector<double> p3 = {3.0, 0.0};
        double t = 0.5;
        std::vector<double> expected = {1.5, 0.75};
        REQUIRE(cubic_bezier(t, p0, p1, p2, p3) == Approx(expected).epsilon(1e-9));
    }

    SECTION("Arbitrary t = 0.75") {
        std::vector<double> p0 = {0.0, 0.0};
        std::vector<double> p1 = {0.0, 2.0};
        std::vector<double> p2 = {2.0, 2.0};
        std::vector<double> p3 = {2.0, 0.0};
        double t = 0.75;
        std::vector<double> expected = {1.6875, 1.125};
        REQUIRE(cubic_bezier(t, p0, p1, p2, p3) == Approx(expected).epsilon(1e-9));
    }
}
```

### Explanation:

- **Catch2 Setup**: We include the Catch2 header and define `CATCH_CONFIG_MAIN` to create a main function for running the tests.
- **Test Cases**: Each `SECTION` represents a test case. The `REQUIRE` macro is used to assert that the output of `cubic_bezier` matches the expected output within a small epsilon (similar to `assertAlmostEqual` in Python).
- **Vectors**: We use `std::vector<double>` to represent the points, similar to the lists in Python. 

This code maintains the structure and logic of the original Python tests while adapting to C++ syntax and conventions.