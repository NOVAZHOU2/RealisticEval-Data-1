Hereâ€™s the equivalent Jest test class based on the provided Python `unittest` class, with comments on the changes made during the conversion:

```javascript
const { cubicBezier } = require('./cubicBezier'); // Adjust the path as necessary

describe('Cubic Bezier', () => {
    test('should return correct point for t = 0', () => {
        const p0 = [0.0, 0.0];
        const p1 = [0.0, 1.0];
        const p2 = [1.0, 1.0];
        const p3 = [1.0, 0.0];
        const t = 0.0;
        const expected = [0.0, 0.0];
        expect(cubicBezier(t, p0, p1, p2, p3)).toEqual(expected);
    });

    test('should return correct point for t = 1', () => {
        const p0 = [0.0, 0.0];
        const p1 = [0.0, 1.0];
        const p2 = [1.0, 1.0];
        const p3 = [1.0, 0.0];
        const t = 1.0;
        const expected = [1.0, 0.0];
        expect(cubicBezier(t, p0, p1, p2, p3)).toEqual(expected);
    });

    test('should return correct point for t = 0.5', () => {
        const p0 = [0.0, 0.0];
        const p1 = [0.0, 1.0];
        const p2 = [1.0, 1.0];
        const p3 = [1.0, 0.0];
        const t = 0.5;
        const expected = [0.5, 0.75];
        expect(cubicBezier(t, p0, p1, p2, p3)).toBeCloseTo(expected[0], 9);
        expect(cubicBezier(t, p0, p1, p2, p3)[1]).toBeCloseTo(expected[1], 9);
    });

    test('should return correct mid-point', () => {
        const p0 = [0.0, 0.0];
        const p1 = [1.0, 1.0];
        const p2 = [2.0, 1.0];
        const p3 = [3.0, 0.0];
        const t = 0.5;
        const expected = [1.5, 0.75];
        expect(cubicBezier(t, p0, p1, p2, p3)).toBeCloseTo(expected[0], 9);
        expect(cubicBezier(t, p0, p1, p2, p3)[1]).toBeCloseTo(expected[1], 9);
    });

    test('should return correct point for arbitrary t', () => {
        const p0 = [0.0, 0.0];
        const p1 = [0.0, 2.0];
        const p2 = [2.0, 2.0];
        const p3 = [2.0, 0.0];
        const t = 0.75;
        const expected = [1.6875, 1.125];
        expect(cubicBezier(t, p0, p1, p2, p3)).toBeCloseTo(expected[0], 9);
        expect(cubicBezier(t, p0, p1, p2, p3)[1]).toBeCloseTo(expected[1], 9);
    });
});
```

### Key Changes and Explanations:

1. **Importing the Function**: In Python, functions are imported using `from ... import ...`. In JavaScript, the equivalent is typically done with `require()` or `import`.

2. **Test Structure**: 
   - `unittest.TestCase` is replaced by `describe()` and `test()` blocks in Jest. Each test case corresponds to a `test()` within the `describe()` block.
   
3. **Assertions**:
   - `self.assertAlmostEqual(...)` in Python is replaced with `toEqual(...)` for direct comparisons.
   - Since Jest does not have a direct equivalent for precision-based assertions, we use `toBeCloseTo(expected, precision)` to assert floating-point values with a specific precision.

4. **Jest's Functionality**: Jest is generally more straightforward, allowing for easy chaining and better handling of asynchronous code, although it's not directly applicable here. 

5. **Array Access**: The element access in assertions (e.g., `expected[0]`) is similar in both languages.

Make sure you have the `cubicBezier` function defined in the appropriate file to run these tests successfully. Adjust the import path based on your project's structure.