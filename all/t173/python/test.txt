Hereâ€™s the conversion of your Java JUnit test cases into Python's unittest framework. The structure of the test cases is maintained, and the assertions have been adapted to Python's syntax.
Converted Python Code using unittest
python
import unittest
from typing import List
from your_module import Answer  # Replace 'your_module' with the actual module name where the Answer class is defined.

class TestCubicBezier(unittest.TestCase):
    def test_cubic_bezier_t0(self):
        p0 = [0.0, 0.0]
        p1 = [0.0, 1.0]
        p2 = [1.0, 1.0]
        p3 = [1.0, 0.0]
        t = 0.0
        expected = [0.0, 0.0]
        self.assertAlmostEqual(Answer.cubic_bezier(t, p0, p1, p2, p3), expected)

    def test_cubic_bezier_t1(self):
        p0 = [0.0, 0.0]
        p1 = [0.0, 1.0]
        p2 = [1.0, 1.0]
        p3 = [1.0, 0.0]
        t = 1.0
        expected = [1.0, 0.0]
        self.assertAlmostEqual(Answer.cubic_bezier(t, p0, p1, p2, p3), expected)

    def test_cubic_bezier_t0_5(self):
        p0 = [0.0, 0.0]
        p1 = [0.0, 1.0]
        p2 = [1.0, 1.0]
        p3 = [1.0, 0.0]
        t = 0.5
        expected = [0.5, 0.75]
        self.assertAlmostEqual(Answer.cubic_bezier(t, p0, p1, p2, p3), expected, places=9)

    def test_cubic_bezier_mid_point(self):
        p0 = [0.0, 0.0]
        p1 = [1.0, 1.0]
        p2 = [2.0, 1.0]
        p3 = [3.0, 0.0]
        t = 0.5
        expected = [1.5, 0.75]
        self.assertAlmostEqual(Answer.cubic_bezier(t, p0, p1, p2, p3), expected, places=9)

    def test_cubic_bezier_arbitrary_t(self):
        p0 = [0.0, 0.0]
        p1 = [0.0, 2.0]
        p2 = [2.0, 2.0]
        p3 = [2.0, 0.0]
        t = 0.75
        expected = [1.6875, 1.125]
        self.assertAlmostEqual(Answer.cubic_bezier(t, p0, p1, p2, p3), expected, places=9)

if __name__ == '__main__':
    unittest.main()
Breakdown of the Conversion
Import Statements:
unittest is imported to facilitate unit testing in Python.
The Answer class is imported from the appropriate module (replace 'your_module' with the actual name).
Class Definition:
The Java class Tester is converted to TestCubicBezier, which follows Python's convention for naming test classes.
Test Methods:
Each test method in Java is converted to a method in Python, prefixed with test_.
Instead of assertArrayEquals, assertAlmostEqual is used to compare floating-point numbers. If you need to compare lists, you might use a loop or numpy for better handling.
Assertion:
The precision in floating-point comparison is handled by specifying places=9 in assertAlmostEqual, which checks equality up to 9 decimal places.
Main Block:
unittest.main() is included to run the tests when the script is executed directly.
Running the Tests
To execute the tests, save the code into a file (e.g., test_cubic_bezier.py) and run it using Python:
bash
python test_cubic_bezier.py
This will execute all the test cases and display the results in the console.