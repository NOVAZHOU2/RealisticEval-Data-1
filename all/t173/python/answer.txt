Here’s the conversion of the provided Java cubicBezier function into Python code. The Java method has been translated into a static method of a Python class called Answer. The syntax has been adjusted to fit Python conventions, including the use of lists instead of arrays.
python
class Answer:
    @staticmethod
    def cubic_bezier(t: float, p0: list, p1: list, p2: list, p3: list) -> list:
        """
        Calculate the coordinates of a cubic Bézier curve at a given parameter t (typically between 0 and 1).

        Args:
            t (float): A float representing the parameter along the curve, where 0 <= t <= 1.
            p0 (list): A list of size 2 representing the x and y coordinates of the start point.
            p1 (list): A list of size 2 representing the x and y coordinates of the first control point.
            p2 (list): A list of size 2 representing the x and y coordinates of the second control point.
            p3 (list): A list of size 2 representing the x and y coordinates of the end point.

        Returns:
            list: A list of size 2 containing the x and y coordinates of the point on the curve corresponding to the parameter t.
        """
        x = ((1 - t) ** 3) * p0[0] \
            + 3 * ((1 - t) ** 2) * t * p1[0] \
            + 3 * (1 - t) * (t ** 2) * p2[0] \
            + (t ** 3) * p3[0]

        y = ((1 - t) ** 3) * p0[1] \
            + 3 * ((1 - t) ** 2) * t * p1[1] \
            + 3 * (1 - t) * (t ** 2) * p2[1] \
            + (t ** 3) * p3[1]

        return [x, y]
Explanation of the Conversion:
Class Definition: The Java class Answer is translated into a Python class with the same name.
Static Method: The method cubicBezier is defined as a static method using the @staticmethod decorator.
Parameter Types:
The method accepts t as a float and the control points p0, p1, p2, and p3 as lists of floats. In Python, we typically use lists instead of arrays.
The function's parameters and return type are annotated for clarity.
Mathematical Operations:
The mathematical operations (like powers and multiplications) are directly translated from Java to Python, with Python's ** operator used for exponentiation.
Return Statement: The method returns a list containing the x and y coordinates.
Usage:
To use this method, you would call it like this:
python
point = Answer.cubic_bezier(0.5, [0, 0], [1, 2], [2, 2], [3, 0])
print(point)  # Output will be the coordinates on the Bézier curve at t=0.5
This implementation should maintain the same functionality as the original Java method while adhering to Python syntax and conventions.