Here's the equivalent Jest test class in TypeScript for the provided Python `unittest` code:

```typescript
import { cubicBezier } from './path-to-your-cubicBezier'; // Adjust the import path as necessary

describe('CubicBezier', () => {
    it('calculates correct point at t = 0', () => {
        const p0: [number, number] = [0.0, 0.0];
        const p1: [number, number] = [0.0, 1.0];
        const p2: [number, number] = [1.0, 1.0];
        const p3: [number, number] = [1.0, 0.0];
        const t = 0.0;
        const expected: [number, number] = [0.0, 0.0];
        expect(cubicBezier(t, p0, p1, p2, p3)).toEqual(expected);
    });

    it('calculates correct point at t = 1', () => {
        const p0: [number, number] = [0.0, 0.0];
        const p1: [number, number] = [0.0, 1.0];
        const p2: [number, number] = [1.0, 1.0];
        const p3: [number, number] = [1.0, 0.0];
        const t = 1.0;
        const expected: [number, number] = [1.0, 0.0];
        expect(cubicBezier(t, p0, p1, p2, p3)).toEqual(expected);
    });

    it('calculates correct point at t = 0.5', () => {
        const p0: [number, number] = [0.0, 0.0];
        const p1: [number, number] = [0.0, 1.0];
        const p2: [number, number] = [1.0, 1.0];
        const p3: [number, number] = [1.0, 0.0];
        const t = 0.5;
        const expected: [number, number] = [0.5, 0.75];
        expect(cubicBezier(t, p0, p1, p2, p3)).toBeCloseTo(expected[0], 9);
        expect(cubicBezier(t, p0, p1, p2, p3)[1]).toBeCloseTo(expected[1], 9);
    });

    it('calculates correct midpoint', () => {
        const p0: [number, number] = [0.0, 0.0];
        const p1: [number, number] = [1.0, 1.0];
        const p2: [number, number] = [2.0, 1.0];
        const p3: [number, number] = [3.0, 0.0];
        const t = 0.5;
        const expected: [number, number] = [1.5, 0.75];
        expect(cubicBezier(t, p0, p1, p2, p3)).toBeCloseTo(expected[0], 9);
        expect(cubicBezier(t, p0, p1, p2, p3)[1]).toBeCloseTo(expected[1], 9);
    });

    it('calculates correct point for arbitrary t', () => {
        const p0: [number, number] = [0.0, 0.0];
        const p1: [number, number] = [0.0, 2.0];
        const p2: [number, number] = [2.0, 2.0];
        const p3: [number, number] = [2.0, 0.0];
        const t = 0.75;
        const expected: [number, number] = [1.6875, 1.125];
        expect(cubicBezier(t, p0, p1, p2, p3)).toBeCloseTo(expected[0], 9);
        expect(cubicBezier(t, p0, p1, p2, p3)[1]).toBeCloseTo(expected[1], 9);
    });
});
```

### Key Changes:
1. **Test Framework**: Switched from `unittest` to `jest` with `describe` and `it` blocks.
2. **Assertions**: Used `toEqual` for exact matches and `toBeCloseTo` for floating-point comparisons with precision.
3. **Type Annotations**: Added type annotations for points and expected results using TypeScript's syntax. 
4. **Import Statement**: Adjusted the import statement to include the `cubicBezier` function.