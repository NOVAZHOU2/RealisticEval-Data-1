Here’s the equivalent TypeScript code for the provided Python function, including appropriate type annotations and documentation comments:

```typescript
/**
 * Calculate the coordinates of a cubic Bézier curve at a given parameter t (typically between 0 and 1).
 *
 * @param t - A number representing the parameter along the curve, where 0 <= t <= 1.
 * @param p0 - An array of size 2 representing the x and y coordinates of the start point.
 * @param p1 - An array of size 2 representing the x and y coordinates of the first control point.
 * @param p2 - An array of size 2 representing the x and y coordinates of the second control point.
 * @param p3 - An array of size 2 representing the x and y coordinates of the end point.
 * @returns An array of size 2 containing the x and y coordinates of the point on the curve corresponding to the parameter t.
 */
function cubicBezier(t: number, p0: [number, number], p1: [number, number], p2: [number, number], p3: [number, number]): [number, number] {
    const x = ((1 - t) ** 3) * p0[0] +
              3 * ((1 - t) ** 2) * t * p1[0] +
              3 * (1 - t) * (t ** 2) * p2[0] +
              (t ** 3) * p3[0];

    const y = ((1 - t) ** 3) * p0[1] +
              3 * ((1 - t) ** 2) * t * p1[1] +
              3 * (1 - t) * (t ** 2) * p2[1] +
              (t ** 3) * p3[1];

    return [x, y];
}
```

### Key Changes:
1. **Type Annotations**: Python `float` is translated to TypeScript `number`. Python `list` is specified as an array of tuples in TypeScript using `[number, number]`.
2. **Documentation**: The Python docstring has been converted to TypeScript's JSDoc style comments.
3. **Return Type**: The function's return type is specified as `[number, number]` to indicate an array of two numbers.