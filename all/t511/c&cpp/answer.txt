Sure! Below is the equivalent C++ code that converts a hexadecimal color code to an ANSI escape code:

```cpp
#include <iostream>
#include <string>
#include <sstream>

std::string hexToAnsi(const std::string& hexColor) {
    if (hexColor.length() != 7 || hexColor[0] != '#') {
        return "";
    }

    int r, g, b;
    std::stringstream ss(hexColor.substr(1));
    ss >> std::hex >> r >> g >> b;

    return "\x1b[38;2;" + std::to_string(r) + ";" + std::to_string(g) + ";" + std::to_string(b) + "m";
}

int main() {
    std::string hexColor = "#FF5733";
    std::string ansiCode = hexToAnsi(hexColor);
    std::cout << ansiCode << "Hello, World!" << "\x1b[0m" << std::endl; // Reset to default color

    return 0;
}
```

### Explanation:
1. **Input Validation**: The function checks if the input string is a valid hexadecimal color code (starts with `#` and has exactly six characters).
2. **Hexadecimal Conversion**: It extracts the red, green, and blue components from the hexadecimal string using a stringstream.
3. **ANSI Escape Code Generation**: It constructs the ANSI escape code using the extracted RGB values.
4. **Main Function**: Demonstrates how to use the `hexToAnsi` function and prints colored text followed by resetting to the default color.

This C++ code should work on any platform that supports ANSI escape codes.