Certainly! Below is the equivalent TypeScript test class using Jest, which preserves the functionality and logic of the provided Python unittest class. The code includes appropriate Jest assertions and type annotations.

### TypeScript Code with Jest Testing

```typescript
import { hexToAnsi } from './hexToAnsi'; // Import the hexToAnsi function

describe('TestHexToAnsi', () => {
    describe('testValidColors', () => {
        it('should correctly convert valid hex color inputs', () => {
            expect(hexToAnsi('#FF5733')).toBe('\x1b[38;2;255;87;51m');
            expect(hexToAnsi('#00FF00')).toBe('\x1b[38;2;0;255;0m');
            expect(hexToAnsi('#0000FF')).toBe('\x1b[38;2;0;0;255m');
        });
    });

    describe('testBlackAndWhite', () => {
        it('should correctly handle black and white colors', () => {
            expect(hexToAnsi('#000000')).toBe('\x1b[38;2;0;0;0m'); // Black
            expect(hexToAnsi('#FFFFFF')).toBe('\x1b[38;2;255;255;255m'); // White
        });
    });
});

// hexToAnsi function implementation
function hexToAnsi(hexColor: string): string {
    // Check if the input is a valid hex color
    if (hexColor.length !== 7 || hexColor[0] !== '#') {
        throw new Error("Invalid hex color format. Use '#RRGGBB'.");
    }

    // Extract the red, green, and blue components from the hex string
    const r = parseInt(hexColor.substring(1, 3), 16);
    const g = parseInt(hexColor.substring(3, 5), 16);
    const b = parseInt(hexColor.substring(5, 7), 16);

    // Create the ANSI escape code
    const ansiCode = `\x1b[38;2;${r};${g};${b}m`;

    return ansiCode;
}

export { hexToAnsi };
```

### Explanation:
1. **Import Statements**: The `hexToAnsi` function is imported from the file `hexToAnsi.ts`.
2. **Describe Blocks**: The `describe` blocks are used to group related tests.
3. **It Blocks**: Each `it` block contains a specific test case.
4. **Expect Assertions**: The `expect` function is used with `toBe` to check the equality of the expected and actual values.
5. **Function Implementation**: The `hexToAnsi` function is implemented with proper type annotations and logic to convert hexadecimal colors to ANSI escape codes.

### Jest Configuration
To run the tests, you need to have Jest installed and configured in your project. Hereâ€™s how you can set up Jest:

1. **Install Jest**:
   ```sh
   npm install --save-dev jest @types/jest ts-jest
   ```

2. **Configure Jest in `tsconfig.json`**:
   ```json
   {
     "compilerOptions": {
       "module": "commonjs",
       "outDir": "./dist",
       "baseUrl": "./",
       "paths": {
         "*": ["node_modules/*", "src/types/*"]
       }
     },
     "include": ["src/**/*"],
     "exclude": ["node_modules", "**/*.spec.ts"]
   }
   ```

3. **Configure Jest in `jest.config.js`**:
   ```javascript
   module.exports = {
     preset: 'ts-jest',
     testEnvironment: 'node',
     roots: ['<rootDir>/src'],
     transform: {
       '^.+\\.tsx?$': 'ts-jest'
     },
     testRegex: '(/__tests__/.*|(\\.|/)(test|spec))\\.tsx?$',
     moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
   };
   ```

4. **Run Tests**:
   ```sh
   npx jest
   ```

This setup ensures that the tests are executed correctly using Jest, and the TypeScript code is properly compiled and tested.