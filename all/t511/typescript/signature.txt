Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Convert a hexadecimal color code to an ANSI escape code.
 *
 * @param hexColor - A string representing the hexadecimal color code, e.g., '#FF5733'.
 * @returns An ANSI escape code for the specified RGB color.
 */
function hexToAnsi(hexColor: string): string {
    // Check if the input is a valid hex color
    if (hexColor.length !== 7 || hexColor[0] !== '#') {
        throw new Error("Invalid hex color format. Use '#RRGGBB'.");
    }

    // Extract the red, green, and blue components from the hex string
    const r = parseInt(hexColor.substring(1, 3), 16);
    const g = parseInt(hexColor.substring(3, 5), 16);
    const b = parseInt(hexColor.substring(5, 7), 16);

    // Create the ANSI escape code
    const ansiCode = `\x1b[38;2;${r};${g};${b}m`;

    return ansiCode;
}

// Example usage
console.log(hexToAnsi('#FF5733'));
```

### Explanation:
1. **Function Definition**: The function `hexToAnsi` is defined with a single parameter `hexColor` of type `string`.
2. **JSDoc Documentation**:
   - The JSDoc comment block provides detailed documentation for the function, including the parameter and return type descriptions.
   - The `@param` tag describes the parameter `hexColor`.
   - The `@returns` tag describes the return value.
3. **Validation**: The function checks if the input string is a valid hexadecimal color code by verifying its length and the leading `#`.
4. **Conversion**: The red (`r`), green (`g`), and blue (`b`) components are extracted from the hexadecimal string using `parseInt` with base 16.
5. **ANSI Code Creation**: The ANSI escape code is constructed using template literals.
6. **Return Value**: The function returns the ANSI escape code as a string.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices.