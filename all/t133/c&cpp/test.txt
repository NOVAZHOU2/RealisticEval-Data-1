Hereâ€™s how you can convert the provided JavaScript Jest test cases into C++ Catch2 test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>

// Function declaration
bool isSignificantNumber(const std::string& input);

TEST_CASE("isSignificantNumber") {
    SECTION("should return true for a valid significant number with exactly 5 digits") {
        REQUIRE(isSignificantNumber("12345") == true);
    }

    SECTION("should return false for a number with leading zero") {
        REQUIRE(isSignificantNumber("01234") == false);
    }

    SECTION("should return true for a valid significant number with exactly 18 digits") {
        REQUIRE(isSignificantNumber("123456789012345678") == true);
    }

    SECTION("should return false for a number with less than 5 digits") {
        REQUIRE(isSignificantNumber("123") == false);
    }

    SECTION("should return false for a number with more than 18 digits") {
        REQUIRE(isSignificantNumber("1234567890123456789") == false);
    }

    SECTION("should return false for a number containing non-digit characters") {
        REQUIRE(isSignificantNumber("1234a") == false);
    }

    SECTION("should return false for a single zero") {
        REQUIRE(isSignificantNumber("0") == false);
    }

    SECTION("should return false for non-string input") {
        // Since C++ is statically typed, this case needs a different approach.
        // We cannot directly pass a non-string type to the function.
        // Therefore, we will just skip this specific test.
        // You might want to handle this case in a different way in your implementation.
    }
}
```

### Explanation:
1. **Catch2 Setup**: The `#define CATCH_CONFIG_MAIN` line allows Catch2 to provide a main function.
2. **Test Structure**: Each test case uses `SECTION` to define individual test scenarios, similar to `test` in Jest.
3. **Assertions**: The `REQUIRE` macro checks conditions and will fail the test if the condition is false.
4. **Non-string Input**: C++ is statically typed, so you can't directly pass non-string types to a function expecting a string. You may choose to skip that specific test or handle it in a way that suits your implementation.