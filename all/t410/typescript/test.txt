Certainly! Below is the equivalent Jest test class in TypeScript for the provided Python unittest class. The test cases are preserved, and the necessary adjustments are made to map Python's `unittest` assertions to Jest's assertions.

### TypeScript Code

```typescript
import { checkXorSum } from './path/to/checkXorSum'; // Import the checkXorSum function

describe('TestCheckXorSum', () => {
    /**
     * Test with combination values that produce the expected XOR sums.
     */
    it('test correct XOR sums', () => {
        const combination: number[][] = [
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        ];
        expect(checkXorSum(combination)).toBe(false);
    });

    /**
     * Test with combination values that do not meet the expected XOR sums.
     */
    it('test incorrect XOR sums', () => {
        const combination: number[][] = [
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00]
        ];
        expect(checkXorSum(combination)).toBe(false);
    });

    /**
     * Test with a combination where all values are zero.
     */
    it('test edge case with zero', () => {
        const combination: number[][] = [[0, 0, 0, 0, 0, 0, 0, 0]];
        expect(checkXorSum(combination)).toBe(false);
    });

    /**
     * Test with large numbers in the combination.
     */
    it('test large numbers', () => {
        const combination: number[][] = [
            [0x6b000000, 0x00000000, 0x00000012, 0x00000000, 0x76000000, 0x00000000, 0x00000000, 0x00000000],
            [0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000]
        ];
        expect(checkXorSum(combination)).toBe(false);
    });

    /**
     * Test with a combination that contains multiple rows.
     */
    it('test multiple rows', () => {
        const combination: number[][] = [
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00]
        ];
        expect(checkXorSum(combination)).toBe(true);
    });
});
```

### Explanation:

1. **Importing `checkXorSum`**:
   - The `checkXorSum` function is imported from the appropriate module.

2. **Describe Block**:
   - The `describe` block is used to group the test cases under a common description.

3. **Test Cases**:
   - Each test case is defined using the `it` function, which takes a description and a callback function containing the test logic.
   - The test cases are structured similarly to the Python unittest class, with descriptive names and comments.

4. **Assertions**:
   - The `expect` function is used with Jest's assertion methods to verify the expected outcomes.
   - `expect(checkXorSum(combination)).toBe(expectedValue)` is used to check the return value of `checkXorSum`.

5. **Data Structures**:
   - The `combination` arrays are defined as `number[][]` to represent the 2D arrays.

This TypeScript code preserves the original functionality and structure of the Python unittest class while adapting it to Jest's testing framework.