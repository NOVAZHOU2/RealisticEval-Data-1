Sure, here's how you can convert the Python `unittest` test class to TypeScript using Jest:

```typescript
import { expect } from '@jest/globals';
import * as np from 'numpy';

describe('check_xor_sum', () => {
  it('should return true for valid combinations', () => {
    const combination = np.array([
      [1, 0, 1],
      [0, 1, 0],
      [1, 1, 1]
    ]);

    const result = check_xor_sum(combination);
    expect(result).toBe(true);
  });

  it('should return false for invalid combinations', () => {
    const combination = np.array([
      [1, 0, 1],
      [0, 1, 0],
      [0, 0, 0]
    ]);

    const result = check_xor_sum(combination);
    expect(result).toBe(false);
  });
});

function check_xor_sum(combination: np.ndarray): boolean {
  // Implement your logic here based on the provided Python function
  // For example:
  const xorSumColumn1 = combination[:, 0].reduce((acc, val) => acc ^ val, 0);
  const xorSumColumn2 = combination[:, 1].reduce((acc, val) => acc ^ val, 0);
  const xorSumColumn3 = combination[:, 2].reduce((acc, val) => acc ^ val, 0);

  return xorSumColumn1 === 0 && xorSumColumn2 === 1 && xorSumColumn3 === 0;
}
```

In this TypeScript code, we're using Jest for testing and assuming that the `numpy` library is available in TypeScript. If not, you might need to find an appropriate npm package or implement the necessary functions manually.

The `check_xor_sum` function is implemented similarly to the original Python function, but with TypeScript syntax and type annotations. The `it` blocks serve as test cases, similar to the `assert` statements in the original Python code.