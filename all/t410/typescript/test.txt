Firstly, we'll need to define the function in TypeScript, then we can proceed with the conversion of the unittest to jest tests. Since the Python code provided does not include a test class or any specific details about the columns or required XOR sum values, I'll complete the conversion based on the given function description:

TypeScript version of the function:

```typescript
import * as _ from 'lodash';
import { strict as assert } from 'assert';

function checkXorSum(combination: number[][]): boolean {
    /**
     * Checks the XOR sums of specific columns in a given combination array.
     *
     * @param combination - A 2D array where each column corresponds to a specific value.
     * 
     * @returns true if the XOR sums of the specified columns match the required values; otherwise, false.
     */
    const requiredXorSums = [0, 1, 0]; // Example required XOR sums for columns 0, 1, and 2
    const columnIndicesToCheck = [0, 1, 2]; // Example columns to check

    const xorSums = columnIndicesToCheck.map((colIndex) => {
        return combination.reduce((acc, curr) => acc ^ curr[colIndex], 0);
    });

    return _.isEqual(xorSums, requiredXorSums);
}
```

Now let's write the Jest test cases:

```typescript
import { checkXorSum } from './path-to-your-function'; // Adjust path accordingly

describe('checkXorSum', () => {
    it('should return true when the XOR sums of the specified columns match the required values', () => {
        const combination = [
            [1, 0, 1],
            [1, 1, 0],
            [0, 1, 1]
        ];
        const result = checkXorSum(combination);
        expect(result).toBe(true);
    });

    it('should return false when the XOR sums of the specified columns do not match the required values', () => {
        const combination = [
            [1, 1, 1],
            [1, 1, 1],
            [0, 1, 1]
        ];
        const result = checkXorSum(combination);
        expect(result).toBe(false);
    });
});
```

In the Jest test cases, we're using `describe` to group the tests and `it` to describe each test case. The `expect` function is used to make assertions about the expected outcomes of the tests. 

Please adjust the paths and data according to your actual use case.