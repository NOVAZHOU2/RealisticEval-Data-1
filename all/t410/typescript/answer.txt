Sure! Let's convert the provided Python code into TypeScript, ensuring we maintain the same functionality and logic. We'll need to use the appropriate TypeScript/JavaScript libraries or functions to handle the array operations similar to NumPy.

Hereâ€™s the TypeScript code:

```typescript
import { ndarray, all } from 'ndarray';

/**
 * Checks the XOR sums of specific columns in a given combination array.
 *
 * @param combination - A 2D array where each column corresponds to a specific value.
 * @returns {boolean} - True if the XOR sums of the specified columns match the required values; otherwise, False.
 */
function checkXorSum(combination: number[][]): boolean {
    // Convert the 2D array to an ndarray and ensure it contains integers
    const ndCombination = ndarray(combination, { dtype: 'int32' });

    // Calculate XOR sums for specified columns
    const xorSum036 = ndCombination.index((i, j) => j === 0 || j === 3 || j === 6).reduce((acc, val) => acc ^ val, 0);
    const xorSum147 = ndCombination.index((i, j) => j === 1 || j === 4 || j === 7).reduce((acc, val) => acc ^ val, 0);
    const xorSum25 = ndCombination.index((i, j) => j === 2 || j === 5).reduce((acc, val) => acc ^ val, 0);

    // Check if the XOR sums match the expected values
    return (xorSum036 === 0x6b && xorSum147 === 0x76 && xorSum25 === 0x12);
}

// Example usage
const combination = [
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [10, 11, 12, 13, 14, 15, 16, 17, 18],
    [19, 20, 21, 22, 23, 24, 25, 26, 27]
];

console.log(checkXorSum(combination));
```

### Explanation:
1. **Importing `ndarray`**: The `ndarray` package provides a way to work with multi-dimensional arrays similar to NumPy in Python.
2. **Function Definition**: The function `checkXorSum` takes a 2D array (`number[][]`) as input and returns a boolean.
3. **Converting to `ndarray`**: The input `combination` is converted to an `ndarray` with integer data type (`dtype: 'int32'`).
4. **Calculating XOR Sums**: The XOR sums for the specified columns are calculated using `.index()` and `.reduce()` methods.
5. **Checking XOR Sums**: The XOR sums are checked against the expected values (0x6b, 0x76, 0x12) and the function returns a boolean result.

This TypeScript code maintains the same functionality and logic as the original Python code.