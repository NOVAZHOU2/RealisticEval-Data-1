Here is your Python function converted into TypeScript:

```typescript
function checkXorSum(combination: number[][]): boolean {
    // Initialize an empty array for storing XOR results
    let xorResults: number[] = [];

    // Loop through each row of the combination matrix
    for(let i = 0; i < combination.length; i++) {
        // For each row, loop through each column and perform XOR operation
        for(let j = 0; j < combination[i].length; j++) {
            // If it's the first row, simply add the value to the result array
            if(i === 0) {
                xorResults.push(combination[i][j]);
            } else {
                // For subsequent rows, perform XOR operation with the previous result
                xorResults[j] ^= combination[i][j];
            }
        }
    }

    // Check if all XOR results are zero
    return xorResults.every(result => result === 0);
}
```

Please note that in this code, we're assuming that you want to compute the XOR sum of all elements in each column across the entire 2D array. The 'every' method is used to ensure that every element in the 'xorResults' array is equal to zero. 

If your actual requirement is different (for example, only certain columns or rows need to be checked), please provide more details so I can adjust the code accordingly.