Certainly! Below is the equivalent TypeScript code for the provided Python function. We will use TypeScript along with the `numpy` equivalent library called `mathjs` for matrix operations.

First, you need to install `mathjs`:

```bash
npm install mathjs
```

Here is the TypeScript code:

```typescript
import * as math from 'mathjs';

/**
 * Checks the XOR sums of specific columns in a given combination array.
 *
 * @param combination - A 2D array where each column corresponds to a specific value.
 * @returns true if the XOR sums of the specified columns match the required values; otherwise, false.
 */
function checkXorSum(combination: number[][]): boolean {
    // Ensure that combination is an array of integers
    const intCombination = combination.map(row => row.map(num => Math.floor(num)));

    // Calculate XOR sums for specified columns
    const xorSum036 = intCombination.map(row => row[0] ^ row[3] ^ row[6]);
    const xorSum147 = intCombination.map(row => row[1] ^ row[4] ^ row[7]);
    const xorSum25 = intCombination.map(row => row[2] ^ row[5]);

    // Check if the XOR sums match the expected values
    return xorSum036.every(val => val === 0x6b) &&
           xorSum147.every(val => val === 0x76) &&
           xorSum25.every(val => val === 0x12);
}

// Example usage
const combination: number[][] = [
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9]
];

console.log(checkXorSum(combination));
```

### Explanation:
1. **Importing `mathjs`**: The `mathjs` library is used for mathematical operations.
2. **Function Definition**: The `checkXorSum` function takes a 2D array (`combination`) as input and returns a boolean.
3. **Type Annotations**: The input `combination` is explicitly typed as `number[][]`.
4. **Converting to Integers**: Each element in the `combination` array is converted to an integer using `Math.floor`.
5. **Calculating XOR Sums**: The XOR sums for the specified columns are calculated using `.map` and bitwise XOR operations.
6. **Checking XOR Sums**: The `every` method is used to check if all elements in the XOR sums arrays match the expected values.

This TypeScript code maintains the same functionality and logic as the original Python code, while adapting it to TypeScript's static type system and idiomatic practices.