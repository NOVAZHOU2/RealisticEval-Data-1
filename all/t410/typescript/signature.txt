Sure, I can help you convert that Python function signature into TypeScript code. Given that TypeScript does not have direct support for NumPy, we'll use an equivalent library such as `mathjs` which provides similar functionalities. Let's translate the function and add the appropriate TypeScript documentation comments.

Here's the equivalent TypeScript code:

```typescript
import { matrix, Matrix } from 'mathjs';

/**
 * Checks the XOR sums of specific columns in a given combination matrix.
 *
 * @param combination - A 2D matrix where each column corresponds to a specific value.
 * @returns {boolean} - True if the XOR sums of the specified columns match the required values; otherwise, False.
 */
function checkXorSum(combination: Matrix<boolean>): boolean {
    // Assuming the logic to compute XOR sums remains the same,
    // we need to implement it using mathjs functions.
    // For simplicity, this function assumes the existence of a method to compute XOR sums.
    // Replace this with actual implementation details.
    return computeXorSums(combination);
}

// Example helper function for computing XOR sums (for illustration purposes)
function computeXorSums(combination: Matrix<boolean>): boolean {
    // Implement the XOR sum computation logic here.
    // This is a placeholder implementation.
    // You would replace this with the actual logic based on your requirements.
    return true;
}
```

### Explanation:
1. **Import**: We import `matrix` and `Matrix` from `mathjs`.
2. **Function Signature**: The function `checkXorSum` takes a `Matrix<boolean>` as its argument and returns a `boolean`.
3. **Documentation Comments**: The JSDoc style comments are added to describe the function parameters and return type.
4. **Helper Function**: An example helper function `computeXorSums` is provided to illustrate where the actual XOR sum computation logic would go.

Make sure to implement the actual logic for computing XOR sums according to your specific requirements.