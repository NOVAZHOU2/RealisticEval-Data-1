Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments and type annotations.

### TypeScript Code

```typescript
import * as math from 'mathjs';

/**
 * Checks the XOR sums of specific columns in a given combination array.
 *
 * @param combination - A 2D array where each column corresponds to a specific value.
 * @returns true if the XOR sums of the specified columns match the required values; otherwise, false.
 */
function checkXorSum(combination: number[][]): boolean {
    // Ensure that combination is an array of integers
    const intCombination = combination.map(row => row.map(num => Math.floor(num)));

    // Calculate XOR sums for specified columns
    const xorSum036 = intCombination.map(row => row[0] ^ row[3] ^ row[6]);
    const xorSum147 = intCombination.map(row => row[1] ^ row[4] ^ row[7]);
    const xorSum25 = intCombination.map(row => row[2] ^ row[5]);

    // Check if the XOR sums match the expected values
    return xorSum036.every(val => val === 0x6b) &&
           xorSum147.every(val => val === 0x76) &&
           xorSum25.every(val => val === 0x12);
}

// Example usage
const combination: number[][] = [
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9]
];

console.log(checkXorSum(combination));
```

### Explanation:

1. **Importing `mathjs`**:
   - The `mathjs` library is imported for mathematical operations, although it is not directly used here. If you need additional mathematical functions, you can use `mathjs`.

2. **Function Definition**:
   - The `checkXorSum` function is defined with a parameter `combination` of type `number[][]`, which represents a 2D array of numbers.

3. **JSDoc Documentation**:
   - The function is documented using JSDoc-style comments, providing clear descriptions of the parameters and return type.

4. **Type Conversion**:
   - The `combination` array is converted to an array of integers using `Math.floor`. This ensures that all elements are integers.

5. **Calculating XOR Sums**:
   - The XOR sums for the specified columns are calculated using `.map` and bitwise XOR operations.

6. **Checking XOR Sums**:
   - The `every` method is used to check if all elements in the XOR sums arrays match the expected values.

### Example Usage

The example usage demonstrates how to call the `checkXorSum` function with a sample 2D array.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices.