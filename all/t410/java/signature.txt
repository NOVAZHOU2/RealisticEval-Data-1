Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
import java.util.Arrays;

/**
 * A class that provides methods to check the XOR sums of specific columns in a given combination array.
 */
public class Answer {

    /**
     * Checks the XOR sums of specific columns in a given combination array.
     *
     * @param combination A 2D integer array where each column corresponds to a specific value.
     * @return true if the XOR sums of the specified columns match the required values; otherwise, false.
     */
    public static boolean checkXorSum(int[][] combination) {
        // Ensure that combination is an array of integers
        // In Java, it is already an array of integers, so no conversion is needed

        // Calculate XOR sums for specified columns
        int[] xorSum036 = new int[combination.length];
        int[] xorSum147 = new int[combination.length];
        int[] xorSum25 = new int[combination.length];

        for (int i = 0; i < combination.length; i++) {
            xorSum036[i] = combination[i][0] ^ combination[i][3] ^ combination[i][6];
            xorSum147[i] = combination[i][1] ^ combination[i][4] ^ combination[i][7];
            xorSum25[i] = combination[i][2] ^ combination[i][5];
        }

        // Check if the XOR sums match the expected values
        return Arrays.stream(xorSum036).allMatch(x -> x == 0x6b) &&
               Arrays.stream(xorSum147).allMatch(x -> x == 0x76) &&
               Arrays.stream(xorSum25).allMatch(x -> x == 0x12);
    }

    public static void main(String[] args) {
        // Example usage
        int[][] combination = {
            {0, 1, 2, 3, 4, 5, 6, 7},
            {1, 0, 3, 2, 5, 4, 7, 6}
        };

        boolean result = checkXorSum(combination);
        System.out.println("Result: " + result);
    }
}
```

### Explanation:
1. **Class Definition**: The class `Answer` is defined with the appropriate Javadoc comment.
2. **Method Definition**: The `checkXorSum` method is defined with the appropriate Javadoc comment.
3. **Type Annotations**: The Python type annotation `np.ndarray` is translated to `int[][]` in Java.
4. **Javadoc Comments**: The Python docstring is converted to Javadoc comments.
5. **XOR Sums Calculation**: The XOR sums are calculated using a loop.
6. **Checking Expected Values**: The `Arrays.stream` method is used to check if all elements in the XOR sum arrays match the expected values.
7. **Main Method**: An example usage is included to demonstrate how to call the `checkXorSum` method.

This Java code preserves the original functionality and structure of the Python code while adhering to Java's conventions and syntax.