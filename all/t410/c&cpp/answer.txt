Certainly! Below is the equivalent C++ code for the provided Python function. This code assumes you have access to the C++ standard library and Eigen for handling matrix operations, which is a popular choice for matrix computations similar to NumPy arrays.

Hereâ€™s the C++ version:

```cpp
#include <Eigen/Dense>
#include <iostream>

// Function to check XOR sums of specific columns in a given combination matrix.
bool check_xor_sum(const Eigen::ArrayXi& combination) {
    // Ensure that combination is an array of integers (Eigen handles this internally).

    // Calculate XOR sums for specified columns
    Eigen::ArrayXi xor_sum_0_3_6 = (combination.col(0) ^ combination.col(3) ^ combination.col(6)).eval();
    Eigen::ArrayXi xor_sum_1_4_7 = (combination.col(1) ^ combination.col(4) ^ combination.col(7)).eval();
    Eigen::ArrayXi xor_sum_2_5 = (combination.col(2) ^ combination.col(5)).eval();

    // Check if the XOR sums match the expected values
    bool all_match = true;
    all_match &= (xor_sum_0_3_6 == 0x6b).all();
    all_match &= (xor_sum_1_4_7 == 0x76).all();
    all_match &= (xor_sum_2_5 == 0x12).all();

    return all_match;
}

int main() {
    // Example usage
    Eigen::ArrayXi combination(3, 8);  // Example 3x8 matrix
    // Populate the matrix with example data
    combination << 0, 1, 2, 3, 4, 5, 6, 7,
                   8, 9, 10, 11, 12, 13, 14, 15,
                   16, 17, 18, 19, 20, 21, 22, 23;

    bool result = check_xor_sum(combination);
    std::cout << "Result: " << (result ? "True" : "False") << std::endl;

    return 0;
}
```

### Explanation:
1. **Eigen Library**: We use the Eigen library to handle matrix operations similar to NumPy arrays.
2. **Function Definition**: The `check_xor_sum` function takes an `Eigen::ArrayXi` (an integer array) as input.
3. **XOR Sums Calculation**: We calculate the XOR sums for the specified columns using bitwise XOR operations.
4. **Comparison**: We compare the calculated XOR sums with the expected values using `.all()` method from Eigen.
5. **Main Function**: An example usage is provided in the `main` function to demonstrate how to call the `check_xor_sum` function.

This code ensures that the functionality, logic, and structure remain consistent with the original Python code while adapting to the syntax and features of C++ and Eigen.