Certainly! Below is the equivalent C++ code for the provided Python function. The code will perform the same operations using C++ syntax and libraries:

```cpp
#include <iostream>
#include <vector>
#include <numeric> // For std::accumulate
#include <bitset>  // For bit manipulation

// Function to calculate the XOR sum of elements in a vector
int xorSum(const std::vector<int>& vec) {
    return std::accumulate(vec.begin(), vec.end(), 0, std::bit_or<>());
}

bool checkXorSum(const std::vector<std::vector<int>>& combination) {
    // Ensure that combination is a 2D vector of integers (already integers here)

    // Calculate XOR sums for specified columns
    std::vector<int> col0, col3, col6, col1, col4, col7, col2, col5;
    for (const auto& row : combination) {
        col0.push_back(row[0]);
        col3.push_back(row[3]);
        col6.push_back(row[6]);
        col1.push_back(row[1]);
        col4.push_back(row[4]);
        col7.push_back(row[7]);
        col2.push_back(row[2]);
        col5.push_back(row[5]);
    }

    int xor_sum_0_3_6 = xorSum(col0) ^ xorSum(col3) ^ xorSum(col6);
    int xor_sum_1_4_7 = xorSum(col1) ^ xorSum(col4) ^ xorSum(col7);
    int xor_sum_2_5 = xorSum(col2) ^ xorSum(col5);

    // Check if the XOR sums match the expected values
    return (xor_sum_0_3_6 == 0x6b) &&
           (xor_sum_1_4_7 == 0x76) &&
           (xor_sum_2_5 == 0x12);
}

int main() {
    // Example usage
    std::vector<std::vector<int>> combination = {
        {1, 2, 3, 4, 5, 6, 7, 8},
        {9, 10, 11, 12, 13, 14, 15, 16}
    };

    bool result = checkXorSum(combination);
    std::cout << "Result: " << (result ? "True" : "False") << std::endl;

    return 0;
}
```

### Explanation:
1. **xorSum Function**: This function calculates the XOR sum of elements in a vector using `std::accumulate` with `std::bit_or<>()`.
2. **checkXorSum Function**: This function extracts the specified columns from the input 2D vector and calculates the XOR sums for those columns. It then checks if these sums match the expected values (`0x6b`, `0x76`, and `0x12`).
3. **Main Function**: This demonstrates how to use the `checkXorSum` function with a sample 2D vector and prints the result.

This code ensures that the functionality remains consistent with the original Python code while adapting to C++ syntax and standard library functions.