Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <Eigen/Dense>

// Function to check XOR sums of specific columns in a given combination matrix.
bool check_xor_sum(const Eigen::ArrayXi& combination) {
    // Ensure that combination is an array of integers (Eigen handles this internally).

    // Calculate XOR sums for specified columns
    Eigen::ArrayXi xor_sum_0_3_6 = (combination.col(0) ^ combination.col(3) ^ combination.col(6)).eval();
    Eigen::ArrayXi xor_sum_1_4_7 = (combination.col(1) ^ combination.col(4) ^ combination.col(7)).eval();
    Eigen::ArrayXi xor_sum_2_5 = (combination.col(2) ^ combination.col(5)).eval();

    // Check if the XOR sums match the expected values
    bool all_match = true;
    all_match &= (xor_sum_0_3_6 == 0x6b).all();
    all_match &= (xor_sum_1_4_7 == 0x76).all();
    all_match &= (xor_sum_2_5 == 0x12).all();

    return all_match;
}

TEST_CASE("TestCheckXorSum", "[check_xor_sum]") {
    SECTION("test_correct_xor_sums") {
        // Test with combination values that produce the expected XOR sums.
        Eigen::ArrayXi combination(2, 8);
        combination << 0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00;
        REQUIRE_FALSE(check_xor_sum(combination));
    }

    SECTION("test_incorrect_xor_sums") {
        // Test with combination values that do not meet the expected XOR sums.
        Eigen::ArrayXi combination(2, 8);
        combination << 0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00;
        REQUIRE_FALSE(check_xor_sum(combination));
    }

    SECTION("test_edge_case_with_zero") {
        // Test with a combination where all values are zero.
        Eigen::ArrayXi combination(1, 8);
        combination.setZero();
        REQUIRE_FALSE(check_xor_sum(combination));
    }

    SECTION("test_large_numbers") {
        // Test with large numbers in the combination.
        Eigen::ArrayXi combination(2, 8);
        combination << 0x6b000000, 0x00000000, 0x00000012, 0x00000000, 0x76000000, 0x00000000, 0x00000000, 0x00000000,
                       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000;
        REQUIRE_FALSE(check_xor_sum(combination));
    }

    SECTION("test_multiple_rows") {
        // Test with a combination that contains multiple rows.
        Eigen::ArrayXi combination(3, 8);
        combination << 0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00,
                       0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00,
                       0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00;
        REQUIRE(check_xor_sum(combination));
    }
}
```

### Explanation:
1. **Header Inclusion**: We include the necessary headers (`catch2/catch_test_macros.hpp` and `Eigen/Dense`).
2. **Function Definition**: The `check_xor_sum` function is defined to take a 2D Eigen array (`Eigen::ArrayXi`) as input.
3. **Test Class**: The `TEST_CASE` macro is used to define a test case named `TestCheckXorSum`.
4. **Sections**: Each `SECTION` within the test case corresponds to a specific test scenario.
5. **Assertions**: The `REQUIRE_FALSE` and `REQUIRE` macros are used to assert the expected behavior of the `check_xor_sum` function.
6. **Data Initialization**: The test data is initialized using Eigen arrays to match the structure of the NumPy arrays in the Python code.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to the syntax and features of C++ and the Catch2 testing framework.