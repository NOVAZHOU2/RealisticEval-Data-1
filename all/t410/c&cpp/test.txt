First, let's create a C++ program that includes the necessary headers and defines the function `check_xor_sum`. We'll use Catch2 for the testing framework and `std::vector` to represent the 2D array since C++ does not have a direct equivalent to NumPy arrays. 

Here's how you can define the `check_xor_sum` function and write tests for it using Catch2:

1. Include the necessary headers.
2. Define the `check_xor_sum` function.
3. Write tests using Catch2.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>

// Function to calculate the XOR sum of specific columns in a 2D vector
bool check_xor_sum(const std::vector<std::vector<int>>& combination) {
    // Initialize XOR sums for each column
    int col0_xor = 0;
    int col1_xor = 0;
    int col2_xor = 0;

    // Calculate the XOR sum for each column
    for (const auto& row : combination) {
        col0_xor ^= row[0];
        col1_xor ^= row[1];
        col2_xor ^= row[2];
    }

    // Check if the XOR sums match the required values
    return (col0_xor == 0) && (col1_xor == 1) && (col2_xor == 1);
}

TEST_CASE("Check XOR sums of specific columns") {
    SECTION("Valid combination") {
        std::vector<std::vector<int>> combination = {{0, 1, 1}, {0, 1, 1}};
        REQUIRE(check_xor_sum(combination));
    }

    SECTION("Invalid combination") {
        std::vector<std::vector<int>> combination = {{1, 1, 1}, {0, 1, 1}};
        REQUIRE_FALSE(check_xor_sum(combination));
    }
}
```

### Explanation

1. **Headers**: We include the necessary headers for Catch2 and `vector`.

2. **Function Definition**: The `check_xor_sum` function takes a 2D vector (`std::vector<std::vector<int>>`) as input and calculates the XOR sum for each column. It then checks if these XOR sums match the required values (0 for the first column, 1 for the second and third columns).

3. **Tests**:
   - **Valid Combination**: We test with a valid combination that should return `true`.
   - **Invalid Combination**: We test with an invalid combination that should return `false`.

This setup ensures that the functionality and logic of the original Python tests are preserved in C++ using Catch2.