Certainly! Below is the equivalent C++ code for the provided Python function, including the necessary comments and documentation. We will use the Eigen library to handle matrix operations similar to NumPy arrays.

### C++ Code

```cpp
#include <Eigen/Dense>
#include <iostream>

// Function to check XOR sums of specific columns in a given combination matrix.
/**
 * Checks the XOR sums of specific columns in a given combination array.
 *
 * @param combination A 2D Eigen array where each column corresponds to a specific value.
 * @return True if the XOR sums of the specified columns match the required values; otherwise, False.
 */
bool check_xor_sum(const Eigen::ArrayXi& combination) {
    // Ensure that combination is an array of integers (Eigen handles this internally).

    // Calculate XOR sums for specified columns
    Eigen::ArrayXi xor_sum_0_3_6 = (combination.col(0) ^ combination.col(3) ^ combination.col(6)).eval();
    Eigen::ArrayXi xor_sum_1_4_7 = (combination.col(1) ^ combination.col(4) ^ combination.col(7)).eval();
    Eigen::ArrayXi xor_sum_2_5 = (combination.col(2) ^ combination.col(5)).eval();

    // Check if the XOR sums match the expected values
    bool all_match = true;
    all_match &= (xor_sum_0_3_6 == 0x6b).all();
    all_match &= (xor_sum_1_4_7 == 0x76).all();
    all_match &= (xor_sum_2_5 == 0x12).all();

    return all_match;
}

int main() {
    // Example usage
    Eigen::ArrayXi combination(3, 8);  // Example 3x8 matrix
    // Populate the matrix with example data
    combination << 0, 1, 2, 3, 4, 5, 6, 7,
                   8, 9, 10, 11, 12, 13, 14, 15,
                   16, 17, 18, 19, 20, 21, 22, 23;

    bool result = check_xor_sum(combination);
    std::cout << "Result: " << (result ? "True" : "False") << std::endl;

    return 0;
}
```

### Explanation:
1. **Header Inclusion**: We include the necessary headers (`Eigen/Dense` and `iostream`) at the beginning of the file.
2. **Function Documentation**: The function `check_xor_sum` is documented using C++ style comments.
3. **Function Signature**: The function signature is defined to take a 2D Eigen array (`Eigen::ArrayXi`) as input.
4. **XOR Sums Calculation**: The XOR sums are calculated using bitwise XOR operations on the specified columns.
5. **Comparison**: The calculated XOR sums are compared with the expected values using the `.all()` method from Eigen.
6. **Main Function**: An example usage is provided in the `main` function to demonstrate how to call the `check_xor_sum` function.

This code preserves the original purpose and structure of the Python code while adapting it to C++ and Eigen.