To convert the provided Python `unittest` test class into a JavaScript test case using Jest, we need to follow these steps:

1. Import necessary packages.
2. Define the function `check_xor_sum`.
3. Write Jest test cases to verify the functionality of the `check_xor_sum` function.

Here's how you can do it:

### Step 1: Import Necessary Packages

In JavaScript, you don't need to import packages like NumPy for basic operations because JavaScript has built-in support for arrays and bitwise operations. However, if you need more advanced mathematical operations, you might consider using libraries like `mathjs`.

For this example, let's assume we will stick with native JavaScript functions.

### Step 2: Define the Function `check_xor_sum`

```javascript
function check_xor_sum(combination) {
    /**
     * Checks the XOR sums of specific columns in a given combination array.
     *
     * @param {Array<Array<number>>} combination - A 2D array where each sub-array corresponds
     *                                            to a specific value.
     * @returns {boolean} True if the XOR sums of the specified columns match the required
     *                   values; otherwise, False.
     */
    const expectedXorSums = [0, 1, 2]; // Example expected XOR sums for simplicity

    // Calculate the actual XOR sums for the first three columns
    const actualXorSums = [
        combination[0].reduce((acc, val) => acc ^ val, 0),
        combination[1].reduce((acc, val) => acc ^ val, 0),
        combination[2].reduce((acc, val) => acc ^ val, 0)
    ];

    // Check if the actual XOR sums match the expected XOR sums
    return JSON.stringify(actualXorSums) === JSON.stringify(expectedXorSums);
}
```

### Step 3: Write Jest Test Cases

```javascript
const { check_xor_sum } = require('./path_to_your_file'); // Adjust the path accordingly

describe('check_xor_sum', () => {
    test('should return true for correct XOR sums', () => {
        const combination = [
            [0, 1, 0],
            [1, 0, 1],
            [0, 1, 0]
        ];
        expect(check_xor_sum(combination)).toBe(true);
    });

    test('should return false for incorrect XOR sums', () => {
        const combination = [
            [0, 1, 0],
            [1, 0, 1],
            [1, 1, 0] // Incorrect XOR sum for the third column
        ];
        expect(check_xor_sum(combination)).toBe(false);
    });
});
```

### Explanation

1. **Function Definition**: The `check_xor_sum` function is defined to take a 2D array (`combination`) and calculate the XOR sums of the first three columns. It then compares these sums with expected values and returns `true` or `false`.

2. **Jest Test Cases**:
   - The `describe` block groups related tests together.
   - Each `test` block contains a description and an assertion.
   - We use `expect` to assert that the output of `check_xor_sum` matches the expected result.

Make sure to adjust the file path in `require('./path_to_your_file')` to point to the location of your JavaScript file containing the `check_xor_sum` function.