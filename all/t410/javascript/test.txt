Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import unittest
import numpy as np

def check_xor_sum(combination):
    """
    Checks the XOR sums of specific columns in a given combination array.

    Args:
        combination (np.ndarray): A 2D numpy array where each column corresponds
                                  to a specific value.

    Returns:
        bool: True if the XOR sums of the specified columns match the required
              values; otherwise, False.
    """
    combination = combination.astype(int)  # Ensure that combination is an array of integers

    # Calculate XOR sums for specified columns
    xor_sum_0_3_6 = combination[:, 0] ^ combination[:, 3] ^ combination[:, 6]
    xor_sum_1_4_7 = combination[:, 1] ^ combination[:, 4] ^ combination[:, 7]
    xor_sum_2_5 = combination[:, 2] ^ combination[:, 5]

    # Check if the XOR sums match the expected values
    return (np.all(xor_sum_0_3_6 == 0x6b) and
            np.all(xor_sum_1_4_7 == 0x76) and
            np.all(xor_sum_2_5 == 0x12))

class TestCheckXorSum(unittest.TestCase):

    def test_correct_xor_sums(self):
        """ Test with combination values that produce the expected XOR sums. """
        combination = np.array([
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        ])
        self.assertFalse(check_xor_sum(combination))

    def test_incorrect_xor_sums(self):
        """ Test with combination values that do not meet the expected XOR sums. """
        combination = np.array([
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00]
        ])
        self.assertFalse(check_xor_sum(combination))

    def test_edge_case_with_zero(self):
        """ Test with a combination where all values are zero. """
        combination = np.zeros((1, 8), dtype=int)  # 1 row of zeros
        self.assertFalse(check_xor_sum(combination))

    def test_large_numbers(self):
        """ Test with large numbers in the combination. """
        combination = np.array([
            [0x6b000000, 0x00000000, 0x00000012, 0x00000000, 0x76000000, 0x00000000, 0x00000000, 0x00000000],
            [0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000]
        ])
        self.assertFalse(check_xor_sum(combination))

    def test_multiple_rows(self):
        """ Test with a combination that contains multiple rows. """
        combination = np.array([
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00]
        ])
        self.assertTrue(check_xor_sum(combination))
```

### Equivalent Jest Test Suite:

```javascript
const checkXorSum = require('./checkXorSum'); // Import the checkXorSum function

describe('TestCheckXorSum', () => {
    it('test_correct_xor_sums', () => {
        /** Test with combination values that produce the expected XOR sums. */
        const combination = [
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        ];
        expect(checkXorSum(combination)).toBe(false);
    });

    it('test_incorrect_xor_sums', () => {
        /** Test with combination values that do not meet the expected XOR sums. */
        const combination = [
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00]
        ];
        expect(checkXorSum(combination)).toBe(false);
    });

    it('test_edge_case_with_zero', () => {
        /** Test with a combination where all values are zero. */
        const combination = [[0, 0, 0, 0, 0, 0, 0, 0]]; // 1 row of zeros
        expect(checkXorSum(combination)).toBe(false);
    });

    it('test_large_numbers', () => {
        /** Test with large numbers in the combination. */
        const combination = [
            [0x6b000000, 0x00000000, 0x00000012, 0x00000000, 0x76000000, 0x00000000, 0x00000000, 0x00000000],
            [0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000]
        ];
        expect(checkXorSum(combination)).toBe(false);
    });

    it('test_multiple_rows', () => {
        /** Test with a combination that contains multiple rows. */
        const combination = [
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00],
            [0x6b, 0x00, 0x12, 0x00, 0x76, 0x00, 0x00, 0x00]
        ];
        expect(checkXorSum(combination)).toBe(true);
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `checkXorSum` function is imported using `require` or `import` depending on your module system.

2. **Describe Block**:
   - The `describe` block groups the tests under a common name (`TestCheckXorSum`).

3. **It Blocks**:
   - Each `it` block represents a single test case.
   - The descriptions are provided as comments within the `it` blocks.

4. **Assertions**:
   - The `expect` function is used to assert the expected behavior of the `checkXorSum` function.
   - `toBe` is used to check for strict equality.

This Jest test suite maintains the functionality and logic of the original Python unittest class, ensuring that all assertions are appropriately mapped to Jest equivalents.