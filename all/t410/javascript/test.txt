Sure, let's start by converting the Python function `check_xor_sum` to JavaScript. Since we're dealing with a NumPy array in Python, we'll use JavaScript arrays and the `bitwise XOR` operator (`^`) for the conversion.

Here's the JavaScript version of the function:

```javascript
function checkXorSum(combination) {
    /**
     * Checks the XOR sums of specific columns in a given combination array.
     *
     * @param {Array<Array<number>>} combination - A 2D array where each column corresponds
     *                                             to a specific value.
     * 
     * @returns {boolean} - True if the XOR sums of the specified columns match the required
     *                      values; otherwise, False.
     */
    
    // Define the required XOR sums for each column
    const requiredXorSums = [1, 0, 1]; // Example values, adjust as needed

    // Calculate the XOR sum for each column
    const xorSums = combination[0].map((_, colIndex) => {
        return combination.reduce((acc, row) => acc ^ row[colIndex], 0);
    });

    // Check if the calculated XOR sums match the required XOR sums
    return xorSums.every((xorSum, index) => xorSum === requiredXorSums[index]);
}
```

Now, let's create the Jest test class to verify the functionality of `checkXorSum`. We will use Jest's `describe`, `test`, and `expect` functions to write our tests.

```javascript
const checkXorSum = require('./path/to/checkXorSum'); // Adjust the path as needed

describe('checkXorSum', () => {
    it('should return true for valid XOR sums', () => {
        const combination = [
            [1, 0, 1],
            [0, 1, 0],
            [1, 1, 1]
        ];
        expect(checkXorSum(combination)).toBe(true);
    });

    it('should return false for invalid XOR sums', () => {
        const combination = [
            [1, 0, 1],
            [0, 1, 0],
            [1, 1, 0]
        ];
        expect(checkXorSum(combination)).toBe(false);
    });
});
```

### Explanation of Changes:
1. **Function Conversion**:
   - The Python function `check_xor_sum` has been converted to a JavaScript function `checkXorSum`.
   - The `np.ndarray` type is replaced with a 2D JavaScript array.

2. **Bitwise XOR Calculation**:
   - In Python, we used the `^` operator directly on the elements of the NumPy array.
   - In JavaScript, we use the same `^` operator but within a loop to calculate the XOR sum for each column.

3. **Test Cases**:
   - The test cases are designed to cover both scenarios: when the XOR sums are correct and incorrect.
   - We use Jest's `describe`, `it`, and `expect` functions to structure the tests.

4. **Required XOR Sums**:
   - In the Python version, the required XOR sums were implicitly defined based on the test data.
   - In the JavaScript version, we define them explicitly as `requiredXorSums`.

This setup ensures that the functionality and logic of the tests are preserved while adapting to the JavaScript environment.