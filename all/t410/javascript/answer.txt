To convert the given Python code into JavaScript, we need to ensure that the functionality, logic, and structure remain consistent. Since JavaScript does not have a direct equivalent for NumPy arrays, we will use standard JavaScript arrays and implement the necessary operations manually.

Here is the equivalent JavaScript code:

```javascript
function checkXorSum(combination) {
    /**
     * Checks the XOR sums of specific columns in a given combination array.
     *
     * @param {Array<Array<number>>} combination - A 2D array where each column corresponds to a specific value.
     * @returns {boolean} - True if the XOR sums of the specified columns match the required values; otherwise, false.
     */

    // Ensure that combination is an array of integers
    combination = combination.map(row => row.map(item => Math.floor(item)));

    // Calculate XOR sums for specified columns
    const xorSum036 = combination.map(row => row[0] ^ row[3] ^ row[6]);
    const xorSum147 = combination.map(row => row[1] ^ row[4] ^ row[7]);
    const xorSum25 = combination.map(row => row[2] ^ row[5]);

    // Check if the XOR sums match the expected values
    const allMatch036 = xorSum036.every(value => value === 0x6b);
    const allMatch147 = xorSum147.every(value => value === 0x76);
    const allMatch25 = xorSum25.every(value => value === 0x12);

    return allMatch036 && allMatch147 && allMatch25;
}
```

### Explanation:
1. **Input Conversion**: The `combination` array is converted to an array of integers using `Math.floor(item)` to ensure that all elements are integers.
2. **XOR Sums Calculation**:
   - `xorSum036`: Calculates the XOR sum for columns 0, 3, and 6 for each row.
   - `xorSum147`: Calculates the XOR sum for columns 1, 4, and 7 for each row.
   - `xorSum25`: Calculates the XOR sum for columns 2 and 5 for each row.
3. **Matching Expected Values**:
   - `allMatch036`: Checks if all values in `xorSum036` match `0x6b`.
   - `allMatch147`: Checks if all values in `xorSum147` match `0x76`.
   - `allMatch25`: Checks if all values in `xorSum25` match `0x12`.
4. **Final Return**: Returns `true` if all checks pass, otherwise `false`.

This JavaScript function should provide the same functionality as the original Python function.