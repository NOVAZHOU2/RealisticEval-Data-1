To convert the provided Python code into JavaScript, we need to handle arrays and bitwise operations in a similar manner. Since JavaScript does not have a direct equivalent for NumPy arrays, we will use standard JavaScript arrays and leverage the `Array.prototype.reduce` method to perform the XOR operations. Here is the equivalent JavaScript code:

```javascript
function checkXorSum(combination) {
    /**
     * Checks the XOR sums of specific columns in a given combination array.
     *
     * @param {number[][]} combination - A 2D array where each column corresponds to a specific value.
     * @returns {boolean} - True if the XOR sums of the specified columns match the required values; otherwise, false.
     */

    // Ensure that combination elements are integers
    combination = combination.map(row => row.map(item => Math.trunc(item)));

    // Calculate XOR sums for specified columns
    const xorSum0_3_6 = combination.map(row => row[0] ^ row[3] ^ row[6]);
    const xorSum1_4_7 = combination.map(row => row[1] ^ row[4] ^ row[7]);
    const xorSum2_5 = combination.map(row => row[2] ^ row[5]);

    // Check if the XOR sums match the expected values
    const allMatch = (xorSum, expectedValue) => xorSum.every(value => value === expectedValue);

    return (
        allMatch(xorSum0_3_6, 0x6b) &&
        allMatch(xorSum1_4_7, 0x76) &&
        allMatch(xorSum2_5, 0x12)
    );
}

// Example usage:
const combination = [
    [0, 1, 2, 3, 4, 5, 6, 7],
    [1, 1, 1, 1, 1, 1, 1, 1],
    // ... more rows
];

console.log(checkXorSum(combination));
```

### Explanation:
1. **Type Conversion**: The JavaScript function converts each element of the input array to an integer using `Math.trunc(item)`.
2. **XOR Sums Calculation**: We calculate the XOR sums for the specified columns using `.map()` to apply the XOR operation on each row.
3. **Matching Expected Values**: We define a helper function `allMatch` to check if every value in an array matches the expected value.
4. **Final Check**: We use the `allMatch` function to verify if all calculated XOR sums match the expected values (0x6b, 0x76, and 0x12).

This ensures that the logic and functionality of the original Python code are preserved in JavaScript.