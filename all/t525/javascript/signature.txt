Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Flip the point cloud across a specified axis.
 *
 * @param {Array<Array<number>>} pointCloud - A N x 3 array representing the 3D point cloud.
 * @param {number} axis - An integer specifying the axis to flip (0 for x, 1 for y, 2 for z).
 * @returns {Array<Array<number>>} A N x 3 array of the flipped point cloud.
 */
function flipPointCloud(pointCloud, axis) {
    // Validate the axis input
    if (axis !== 0 && axis !== 1 && axis !== 2) {
        throw new Error("Axis must be 0 (x-axis), 1 (y-axis), or 2 (z-axis).");
    }

    // Create a scaling factor array with -1 for the specified axis and 1 for others
    const flipFactors = [1, 1, 1];
    flipFactors[axis] = -1;

    // Flip the point cloud by multiplying with the scaling factor array
    const flippedPointCloud = pointCloud.map(row => {
        return row.map((value, index) => value * flipFactors[index]);
    });

    return flippedPointCloud;
}

// Example usage:
const pointCloud = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];

const axis = 1; // Flip along the y-axis

try {
    const flippedPointCloud = flipPointCloud(pointCloud, axis);
    console.log(flippedPointCloud);
} catch (error) {
    console.error(error.message);
}
```

### Explanation:
1. **JSDoc Comments**:
   - The function documentation is rewritten using JSDoc format.
   - The `@param` tags describe the parameters and their types.
   - The `@returns` tag describes the return type.

2. **Function Signature**:
   - The function `flipPointCloud` takes two parameters: `pointCloud` and `axis`.
   - The types of these parameters are specified in the JSDoc comments.

3. **Validation**:
   - The function checks if the `axis` parameter is valid (0, 1, or 2) and throws an error if it is not.

4. **Scaling Factors**:
   - An array `flipFactors` is created with `-1` for the specified `axis` and `1` for the other axes.

5. **Flipping**:
   - The function maps over each row in the `pointCloud` and multiplies each element by the corresponding value in `flipFactors`.

6. **Example Usage**:
   - An example usage is provided to demonstrate how to call the function and handle any potential errors.

This ensures that the JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JavaScript documentation standards.