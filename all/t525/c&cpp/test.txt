To convert your Python `unittest` test class to a C++ test case using Catch2, you'll need to follow these steps:

1. **Include Necessary Headers**: Include Catch2 headers and any other necessary libraries.
2. **Define the Function**: Ensure that the function `flip_point_cloud` is available in your C++ project.
3. **Write Test Cases**: Use Catch2's macros to write test cases for the `flip_point_cloud` function.

Hereâ€™s how you can do it:

### Step 1: Include Necessary Headers

```cpp
#include <catch2/catch.hpp>
#include <Eigen/Dense> // Assuming Eigen is used for matrix operations
```

### Step 2: Define the Function

Ensure that the function `flip_point_cloud` is defined somewhere in your project. For simplicity, let's assume it's defined in a file named `point_cloud.cpp`.

```cpp
// point_cloud.cpp
#include "point_cloud.h"

Eigen::MatrixXd flip_point_cloud(const Eigen::MatrixXd& point_cloud, int axis) {
    Eigen::MatrixXd flipped = point_cloud;
    if (axis == 0) {
        flipped.col(0) *= -1;
    } else if (axis == 1) {
        flipped.col(1) *= -1;
    } else if (axis == 2) {
        flipped.col(2) *= -1;
    }
    return flipped;
}
```

### Step 3: Write Test Cases

Create a new file named `test_point_cloud.cpp` and write your test cases using Catch2 macros.

```cpp
// test_point_cloud.cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include "point_cloud.h" // Include the header where flip_point_cloud is declared

TEST_CASE("Flip Point Cloud Across X Axis", "[flip_point_cloud]") {
    Eigen::MatrixXd point_cloud(3, 3);
    point_cloud << 1, 2, 3,
                    4, 5, 6,
                    7, 8, 9;

    Eigen::MatrixXd expected_result(3, 3);
    expected_result << -1, 2, 3,
                       -4, 5, 6,
                       -7, 8, 9;

    Eigen::MatrixXd result = flip_point_cloud(point_cloud, 0);

    REQUIRE(result.isApprox(expected_result));
}

TEST_CASE("Flip Point Cloud Across Y Axis", "[flip_point_cloud]") {
    Eigen::MatrixXd point_cloud(3, 3);
    point_cloud << 1, 2, 3,
                    4, 5, 6,
                    7, 8, 9;

    Eigen::MatrixXd expected_result(3, 3);
    expected_result << 1, -2, 3,
                       4, -5, 6,
                       7, -8, 9;

    Eigen::MatrixXd result = flip_point_cloud(point_cloud, 1);

    REQUIRE(result.isApprox(expected_result));
}

TEST_CASE("Flip Point Cloud Across Z Axis", "[flip_point_cloud]") {
    Eigen::MatrixXd point_cloud(3, 3);
    point_cloud << 1, 2, 3,
                    4, 5, 6,
                    7, 8, 9;

    Eigen::MatrixXd expected_result(3, 3);
    expected_result << 1, 2, -3,
                       4, 5, -6,
                       7, 8, -9;

    Eigen::MatrixXd result = flip_point_cloud(point_cloud, 2);

    REQUIRE(result.isApprox(expected_result));
}
```

### Explanation

- **Catch2 Macros**:
  - `#define CATCH_CONFIG_MAIN`: This macro tells Catch2 to generate the main function.
  - `TEST_CASE("Description", "[tag]")`: Defines a test case with a description and optional tags.
  - `REQUIRE(condition)`: Checks if the condition is true; if not, the test fails.

- **Eigen Library**:
  - The Eigen library is used here for matrix operations. Make sure you have Eigen installed and properly linked in your project.

This should give you a good starting point for converting your Python tests to C++ using Catch2. Adjust the paths and dependencies according to your specific project setup.