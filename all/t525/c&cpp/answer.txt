Sure! Below is the equivalent C++ code that achieves the same functionality as your Python function `flip_point_cloud`. This code uses the Eigen library for handling matrices and arrays efficiently.

First, make sure you have the Eigen library installed. You can install it via vcpkg or conan, or simply download it from [Eigen's official website](http://eigen.tuxfamily.org/).

Here is the C++ code:

```cpp
#include <iostream>
#include <Eigen/Dense>

Eigen::MatrixXd flip_point_cloud(const Eigen::MatrixXd& point_cloud, int axis) {
    if (point_cloud.cols() != 3) {
        throw std::invalid_argument("Point cloud must be a Nx3 matrix.");
    }

    Eigen::MatrixXd flipped_point_cloud = point_cloud;

    switch (axis) {
        case 0: // Flip along x-axis
            flipped_point_cloud.rowwise() *= -1;
            break;
        case 1: // Flip along y-axis
            flipped_point_cloud.col(1).array() *= -1;
            break;
        case 2: // Flip along z-axis
            flipped_point_cloud.col(2).array() *= -1;
            break;
        default:
            throw std::invalid_argument("Invalid axis. Axis must be 0, 1, or 2.");
    }

    return flipped_point_cloud;
}

int main() {
    // Example usage
    Eigen::MatrixXd point_cloud(4, 3);
    point_cloud << 1, 2, 3,
                   4, 5, 6,
                   7, 8, 9,
                   10, 11, 12;

    int axis = 1; // Flip along y-axis

    try {
        Eigen::MatrixXd flipped_point_cloud = flip_point_cloud(point_cloud, axis);

        std::cout << "Original Point Cloud:\n" << point_cloud << "\n";
        std::cout << "Flipped Point Cloud:\n" << flipped_point_cloud << "\n";
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << "\n";
    }

    return 0;
}
```

### Explanation:
1. **Eigen Library**: The code uses the Eigen library to handle matrices and vectors. Ensure you have it installed and properly linked in your project.
2. **Function Definition**:
   - `flip_point_cloud` takes an `Eigen::MatrixXd` representing the point cloud and an integer `axis`.
   - It checks if the number of columns in the point cloud is 3.
   - Depending on the value of `axis`, it flips the point cloud accordingly.
3. **Main Function**:
   - An example point cloud is defined and passed to the `flip_point_cloud` function.
   - The original and flipped point clouds are printed to the console.

Make sure to compile the code with the Eigen library included. For example, using g++, you can compile it with:

```sh
g++ -I /path/to/eigen your_code.cpp -o your_program
```

Replace `/path/to/eigen` with the actual path to the Eigen headers.