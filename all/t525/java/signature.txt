Here is how you can write the Java code with equivalent functionality:

```java
import java.util.Arrays;

public class Main {
    /**
     * Flip the point cloud across a specified axis.
     *
     * @param pointCloud A double array representing the 3D point cloud.
     * @param axis       An integer specifying the axis to flip (0 for x, 1 for y, 2 for z).
     * @return A double array of the flipped point cloud.
     */
    public static double[][] flipPointCloud(double[][] pointCloud, int axis) {
        if (pointCloud == null || pointCloud.length == 0 || pointCloud[0].length != 3) {
            throw new IllegalArgumentException("Invalid input");
        }
        
        int n = pointCloud.length;
        double[][] flippedPointCloud = new double[n][3];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                if (j == axis) {
                    flippedPointCloud[i][j] = -pointCloud[i][j];
                } else {
                    flippedPointCloud[i][j] = pointCloud[i][j];
                }
            }
        }
        
        return flippedPointCloud;
    }

    public static void main(String[] args) {
        double[][] pointCloud = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}};
        int axis = 1;
        double[][] result = flipPointCloud(pointCloud, axis);
        System.out.println(Arrays.deepToString(result));
    }
}
```

This Java code does exactly what your Python code does. It takes a 2D array of doubles representing a point cloud and an integer specifying which axis to flip (0 for x, 1 for y, 2 for z). It then returns a new 2D array with the points flipped across the specified axis. Note that this implementation assumes that the input point cloud is well-formed (i.e., it has at least one point and each point has three coordinates). If these assumptions do not hold, the method throws an `IllegalArgumentException`.