Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

### Java Code:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertThrows;

/**
 * Test class for verifying the correctness of the flipPointCloud method.
 */
public class Tester {

    /**
     * Test flipping the point cloud across the x-axis.
     */
    @Test
    public void testFlipXAxis() {
        double[][] pointCloud = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}};
        double[][] expectedOutput = {{1.0, -2.0, 3.0}, {4.0, -5.0, 6.0}};
        assertArrayEquals(expectedOutput, flipPointCloud(pointCloud, 1), 1e-6);
    }

    /**
     * Test flipping the point cloud across the y-axis.
     */
    @Test
    public void testFlipYAxis() {
        double[][] pointCloud = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}};
        double[][] expectedOutput = {{-1.0, 2.0, 3.0}, {-4.0, 5.0, 6.0}};
        assertArrayEquals(expectedOutput, flipPointCloud(pointCloud, 0), 1e-6);
    }

    /**
     * Test flipping the point cloud across the z-axis.
     */
    @Test
    public void testFlipZAxis() {
        double[][] pointCloud = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}};
        double[][] expectedOutput = {{1.0, 2.0, -3.0}, {4.0, 5.0, -6.0}};
        assertArrayEquals(expectedOutput, flipPointCloud(pointCloud, 2), 1e-6);
    }

    /**
     * Test handling of an invalid axis.
     */
    @Test
    public void testInvalidAxis() {
        double[][] pointCloud = {{1.0, 2.0, 3.0}};
        assertThrows(IllegalArgumentException.class, () -> flipPointCloud(pointCloud, 3));
    }

    /**
     * Test flipping an empty point cloud.
     */
    @Test
    public void testEmptyPointCloud() {
        double[][] pointCloud = new double[0][3]; // Empty point cloud with shape (0, 3)
        double[][] expectedOutput = new double[0][3]; // Expect the output to be the same
        assertArrayEquals(expectedOutput, flipPointCloud(pointCloud, 0), 1e-6);
    }
}

/**
 * Utility method to compare two 2D arrays.
 */
public static void assertArrayEquals(double[][] expected, double[][] actual, double delta) {
    if (expected.length != actual.length) {
        throw new AssertionError("Arrays have different lengths: " + expected.length + " vs " + actual.length);
    }
    for (int i = 0; i < expected.length; i++) {
        if (expected[i].length != actual[i].length) {
            throw new AssertionError("Arrays have different lengths at index " + i + ": " + expected[i].length + " vs " + actual[i].length);
        }
        for (int j = 0; j < expected[i].length; j++) {
            if (Math.abs(expected[i][j] - actual[i][j]) > delta) {
                throw new AssertionError("Arrays differ at index [" + i + "][" + j + "]: " + expected[i][j] + " vs " + actual[i][j]);
            }
        }
    }
}

/**
 * Method to flip the point cloud across a specified axis.
 *
 * @param pointCloud A N x 3 array representing the 3D point cloud.
 * @param axis       An integer specifying the axis to flip (0 for x, 1 for y, 2 for z).
 * @return A N x 3 array of the flipped point cloud.
 */
public static double[][] flipPointCloud(double[][] pointCloud, int axis) {
    // Validate the axis input
    if (axis < 0 || axis > 2) {
        throw new IllegalArgumentException("Axis must be 0 (x-axis), 1 (y-axis), or 2 (z-axis).");
    }

    // Create a scaling factor array with -1 for the specified axis and 1 for others
    double[] flipFactors = new double[pointCloud[0].length];
    for (int i = 0; i < pointCloud[0].length; i++) {
        flipFactors[i] = (i == axis) ? -1 : 1;
    }

    // Flip the point cloud by multiplying with the scaling factor array
    double[][] flippedPointCloud = new double[pointCloud.length][pointCloud[0].length];
    for (int i = 0; i < pointCloud.length; i++) {
        for (int j = 0; j < pointCloud[0].length; j++) {
            flippedPointCloud[i][j] = pointCloud[i][j] * flipFactors[j];
        }
    }

    return flippedPointCloud;
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.

2. **Class Definition**: The test class `Tester` is defined with a public access modifier.

3. **JUnit Annotations**:
   - Each test method is annotated with `@Test` to indicate that it is a test case.

4. **Javadoc Comments**:
   - Each test method has a Javadoc comment explaining its purpose.

5. **Assertion Methods**:
   - `assertArrayEquals` is used to compare 2D arrays with a tolerance (`delta`) to handle floating-point comparisons.
   - `assertThrows` is used to verify that an exception is thrown when an invalid axis is provided.

6. **Utility Method**:
   - `assertArrayEquals` is a utility method to compare two 2D arrays with a tolerance.

7. **Method Implementation**:
   - The `flipPointCloud` method is implemented to flip the point cloud across a specified axis.

8. **Test Cases**:
   - Each test case verifies the correctness of the `flipPointCloud` method for different scenarios, including flipping across the x, y, and z axes, handling invalid axes, and testing an empty point cloud.

This Java code preserves the original functionality and structure of the Python test cases while adhering to JUnit conventions and best practices.