To convert the given Python unittest test class to a Java JUnit test case, you'll need to follow these steps:

1. Create a new Java class named `Tester` in the package `org.real.temp`.
2. Write the necessary imports for JUnit and any other required libraries.
3. Implement the equivalent test methods using JUnit annotations.

Here's how you can do it:

```java
package org.real.temp;

import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.Test;
import java.util.Arrays;

public class Tester {

    // Assuming flipPointCloud method is implemented somewhere in your project
    private static native void flipPointCloud(double[] pointCloud, int axis);

    @Before
    public void setUp() {
        // Load the native library if needed
        System.loadLibrary("yourNativeLibraryName");
    }

    @Test
    public void testFlipPointCloudXAxis() {
        double[] pointCloud = {1.0, 2.0, 3.0, -1.0, -2.0, -3.0};
        flipPointCloud(pointCloud, 0);
        double[] expected = {-1.0, 2.0, 3.0, 1.0, -2.0, -3.0};
        assertEquals(Arrays.toString(expected), Arrays.toString(pointCloud));
    }

    @Test
    public void testFlipPointCloudYAxis() {
        double[] pointCloud = {1.0, 2.0, 3.0, -1.0, -2.0, -3.0};
        flipPointCloud(pointCloud, 1);
        double[] expected = {1.0, -2.0, 3.0, -1.0, 2.0, -3.0};
        assertEquals(Arrays.toString(expected), Arrays.toString(pointCloud));
    }

    @Test
    public void testFlipPointCloudZAxis() {
        double[] pointCloud = {1.0, 2.0, 3.0, -1.0, -2.0, -3.0};
        flipPointCloud(pointCloud, 2);
        double[] expected = {1.0, 2.0, -3.0, -1.0, -2.0, 3.0};
        assertEquals(Arrays.toString(expected), Arrays.toString(pointCloud));
    }
}
```

### Explanation:

1. **Package Declaration**: The class is declared within the `org.real.temp` package.
2. **Imports**: The necessary imports for JUnit and `Arrays` are included.
3. **Native Method**: Since the original Python function uses NumPy arrays, we assume that there is a corresponding native method (`flipPointCloud`) implemented in C/C++ and loaded using `System.loadLibrary`.
4. **Setup Method**: The `setUp` method is used to load the native library if necessary.
5. **Test Methods**: Each test method checks the flipping behavior along one of the axes (x, y, z). The `assertEquals` method from JUnit is used to verify that the output matches the expected result.

Make sure to replace `"yourNativeLibraryName"` with the actual name of your native library. If the `flipPointCloud` method is not native, you will need to implement it in Java or another language that can be called from Java.