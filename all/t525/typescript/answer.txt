Here is how you can convert your Python code into TypeScript using TypeScript's `TypedArray`:

```typescript
function flipPointCloud(pointCloud: Float32Array, axis: number): Float32Array {
    // Check if axis is valid
    if(axis < 0 || axis > 2){
        throw new Error("Invalid axis");
    }

    const n = pointCloud.length / 3;
    const result = new Float32Array(n * 3);

    for(let i = 0; i < n; i++){
        let index = i * 3;

        switch(axis){
            case 0:
                result[index] = -pointCloud[index];
                result[index + 1] = pointCloud[index + 1];
                result[index + 2] = pointCloud[index + 2];
                break;
            case 1:
                result[index] = pointCloud[index];
                result[index + 1] = -pointCloud[index + 1];
                result[index + 2] = pointCloud[index + 2];
                break;
            case 2:
                result[index] = pointCloud[index];
                result[index + 1] = pointCloud[index + 1];
                result[index + 2] = -pointCloud[index + 2];
                break;
        }
    }

    return result;
}
```

Please note that in TypeScript, arrays are zero-indexed and we don't have a direct equivalent to NumPy's ndarray. Instead, we use typed arrays (`Float32Array`, `Int32Array`, etc.) which provide a more efficient way to handle large numerical data sets. Also, there is no direct way to check the type or shape of an array in TypeScript like we do with numpy arrays, so you need to ensure that the input is correct when calling the function.