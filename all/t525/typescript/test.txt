Certainly! Below is the equivalent TypeScript test class using Jest. We will convert the provided Python unittest class into a Jest test suite, ensuring that the functionality and logic of the tests are preserved. We will use TensorFlow.js tensors to handle numerical operations, similar to the previous conversion.

First, you need to install the necessary dependencies:

```bash
npm install @tensorflow/tfjs jest
```

Here is the TypeScript code:

```typescript
import * as tf from '@tensorflow/tfjs';
import { flipPointCloud } from './path-to-flip-point-cloud-function'; // Import your flipPointCloud function

describe('TestFlipPointCloud', () => {
    it('test_flip_x_axis', () => {
        /** Test flipping the point cloud across the x-axis. */
        const pointCloud = tf.tensor2d([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]);
        const expectedOutput = tf.tensor2d([[1.0, -2.0, 3.0], [4.0, -5.0, 6.0]]);
        const flippedPointCloud = flipPointCloud(pointCloud, 1);
        expect(flippedPointCloud).toEqual(expectedOutput);
    });

    it('test_flip_y_axis', () => {
        /** Test flipping the point cloud across the y-axis. */
        const pointCloud = tf.tensor2d([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]);
        const expectedOutput = tf.tensor2d([[-1.0, 2.0, 3.0], [-4.0, 5.0, 6.0]]);
        const flippedPointCloud = flipPointCloud(pointCloud, 0);
        expect(flippedPointCloud).toEqual(expectedOutput);
    });

    it('test_flip_z_axis', () => {
        /** Test flipping the point cloud across the z-axis. */
        const pointCloud = tf.tensor2d([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]);
        const expectedOutput = tf.tensor2d([[1.0, 2.0, -3.0], [4.0, 5.0, -6.0]]);
        const flippedPointCloud = flipPointCloud(pointCloud, 2);
        expect(flippedPointCloud).toEqual(expectedOutput);
    });

    it('test_invalid_axis', () => {
        /** Test handling of an invalid axis. */
        const pointCloud = tf.tensor2d([[1.0, 2.0, 3.0]]);
        expect(() => flipPointCloud(pointCloud, 3)).toThrowError(/Axis must be 0 \(x-axis\), 1 \(y-axis\), or 2 \(z-axis\)/);
    });

    it('test_empty_point_cloud', () => {
        /** Test flipping an empty point cloud. */
        const pointCloud = tf.tensor2d([], [0, 3]); // Empty point cloud with shape (0, 3)
        const expectedOutput = tf.tensor2d([], [0, 3]); // Expect the output to be the same
        const flippedPointCloud = flipPointCloud(pointCloud, 0);
        expect(flippedPointCloud).toEqual(expectedOutput);
    });
});
```

### Explanation:
1. **Imports**: We import TensorFlow.js using `import * as tf from '@tensorflow/tfjs';` and the `flipPointCloud` function from the appropriate module.
2. **Test Suite**: We use `describe` to define the test suite named `TestFlipPointCloud`.
3. **Test Cases**:
   - `it('test_flip_x_axis', ...)` tests flipping the point cloud across the x-axis.
   - `it('test_flip_y_axis', ...)` tests flipping the point cloud across the y-axis.
   - `it('test_flip_z_axis', ...)` tests flipping the point cloud across the z-axis.
   - `it('test_invalid_axis', ...)` tests handling of an invalid axis.
   - `it('test_empty_point_cloud', ...)` tests flipping an empty point cloud.
4. **Assertions**: We use `expect` and `toEqual` to compare the actual and expected outputs. For the invalid axis test, we use `toThrowError` to check for the expected error message.
5. **Tensor Creation**: We create tensors using `tf.tensor2d` to represent the point clouds and expected outputs.

This TypeScript code closely mirrors the functionality of the original Python unittest class, using TensorFlow.js tensors instead of NumPy arrays and Jest assertions instead of `unittest` assertions.