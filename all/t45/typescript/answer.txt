Sure! Here is the equivalent TypeScript code:

```typescript
import { DateTime } from 'luxon';

function get Current_Date_Info(testDate?: DateTime): { year: number; month: string; week_of_the_month: number; day_of_the_week: string } {
    const today = testDate ? testDate.toJSDate() : DateTime.local().toJSDate();

    const year = today.getFullYear();
    const month = DateTime.local(today.getFullYear(), today.getMonth() + 1).toFormat('MMMM');
    const dayOfWeek = DateTime.local(today.getFullYear(), today.getMonth() + 1, today.getDate()).toFormat('cccc');

    // Calculate the week of the month
    const firstDayOfMonth = DateTime.local(today.getFullYear(), today.getMonth() + 1, 1);
    const firstDayWeekday = firstDayOfMonth.weekday;
    const weekOfMonth = Math.ceil((today.getDate() + firstDayWeekday - 1) / 7);

    return {
        year,
        month,
        week_of_the_month: weekOfMonth,
        day_of_the_week: dayOfWeek
    };
}

// Example usage
const testDate = DateTime.fromISO('2023-10-15');
console.log(get_Current_Date_Info(testDate));
```

### Explanation:
1. **Imports**: 
   - We use `DateTime` from the `luxon` library to handle dates and times in TypeScript. This library provides comprehensive date-time handling similar to Python's `datetime` module.

2. **Function Definition**:
   - The function `get_Current_Date_Info` is defined with an optional parameter `testDate` of type `DateTime`.
   - If `testDate` is not provided, it uses the current local date and time.

3. **Date and Time Information**:
   - `year`: Extracted using `getFullYear()`.
   - `month`: Formatted using `toFormat('MMMM')` to get the full month name.
   - `dayOfWeek`: Formatted using `toFormat('cccc')` to get the full day of the week name.

4. **Week of the Month Calculation**:
   - `firstDayOfMonth`: Created using `DateTime.local()` with the year and month.
   - `firstDayWeekday`: Extracted using `weekday`.
   - `weekOfMonth`: Calculated using the formula `(today.getDate() + firstDayWeekday - 1) / 7`.

5. **Return Object**:
   - The function returns an object with the required properties: `year`, `month`, `week_of_the_month`, and `day_of_the_week`.

6. **Example Usage**:
   - An example usage is provided at the end to demonstrate how to call the function with a specific date.

This TypeScript code maintains the same functionality and logic as the Python code, while adapting to TypeScript's static type system and idiomatic practices.