Here is the C++ version of your Python function:

```cpp
#include <ctime>
#include <string>

struct DateInfo {
    int year;
    std::string month;
    int weekOfMonth;
    std::string dayOfWeek;
};

DateInfo getCurrentDateInfo(std::tm* testDate = nullptr) {
    /*
    Returns the current time information including year, month, week of the month, and day of. eg {
            'year': 2024,
            'month': 'February',
            'week_of_the_month': 5,
            'day_of_the_week': 'Thursday'
        }

    Args:
        testDate (std::tm*): The date to compute information for, defaults to today's date if not provided.

    Returns:
        DateInfo: A struct containing the year, month, week of the month, and day of the week.
    */

    std::time_t now = std::time(nullptr);
    std::tm localTime = *std::localtime(&now);

    if (testDate != nullptr) {
        localTime = *testDate;
    }

    DateInfo info;
    info.year = localTime.tm_year + 1900;

    char buffer[80];
    std::strftime(buffer, sizeof(buffer), "%B", &localTime);
    info.month = std::string(buffer);

    info.weekOfMonth = ((localTime.tm_mday - 1) / 7) + 1;

    std::strftime(buffer, sizeof(buffer), "%A", &localTime);
    info.dayOfWeek = std::string(buffer);

    return info;
}
```
Note that in C++, we don't have built-in support for date manipulation like Python does. So, we use the `<ctime>` library which provides functions such as `std::localtime` to convert a time value into broken-down time. We also define a `DateInfo` structure to store the result, similar to how you would return a dictionary in Python. 

Also note that the `std::tm` struct is used instead of `datetime.date` in Python. This struct represents a calendar date (year, month, day) plus time (hour, minute, second).