Certainly! Below is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The test cases are converted to use JUnit annotations and assertions, ensuring that the functionality and logic of the tests are preserved.

### Java Test Class Using JUnit

```java
package org.real.temp;

import java.time.LocalDate;
import java.time.DayOfWeek;
import java.util.Map;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Tester {

    private static final Map<String, Object> getExpectedResult(LocalDate date) {
        int year = date.getYear();
        String month = date.getMonth().name();
        String dayOfWeek = date.getDayOfWeek().name();

        // Calculate the week of the month
        LocalDate firstDayOfMonth = date.withDayOfMonth(1);
        DayOfWeek firstDayWeekday = firstDayOfMonth.getDayOfWeek();
        int dayOfWeekInMonth = date.getDayOfMonth() + (firstDayWeekday.getValue() - 1);
        int weekOfMonth = (int) Math.ceil(dayOfWeekInMonth / 7.0);

        Map<String, Object> info = new HashMap<>();
        info.put("year", year);
        info.put("month", month);
        info.put("week_of_the_month", weekOfMonth);
        info.put("day_of_the_week", dayOfWeek);

        return info;
    }

    @Test
    public void testBeginningOfMonth() {
        LocalDate testDate = LocalDate.of(2023, 1, 1);
        Map<String, Object> result = getExpectedResult(testDate);
        Map<String, Object> expected = Map.of(
            "year", 2023,
            "month", "January",
            "week_of_the_month", 1,
            "day_of_the_week", "SUNDAY"
        );
        assertEquals(expected, result);
    }

    @Test
    public void testMiddleOfMonth() {
        LocalDate testDate = LocalDate.of(2023, 1, 15);
        Map<String, Object> result = getExpectedResult(testDate);
        Map<String, Object> expected = Map.of(
            "year", 2023,
            "month", "January",
            "week_of_the_month", 3,
            "day_of_the_week", "SUNDAY"
        );
        assertEquals(expected, result);
    }

    @Test
    public void testLeapYear() {
        LocalDate testDate = LocalDate.of(2024, 2, 29);
        Map<String, Object> result = getExpectedResult(testDate);
        Map<String, Object> expected = Map.of(
            "year", 2024,
            "month", "FEBRUARY",
            "week_of_the_month", 5,
            "day_of_the_week", "THURSDAY"
        );
        assertEquals(expected, result);
    }

    @Test
    public void testChangeOfYear() {
        LocalDate testDate = LocalDate.of(2022, 12, 31);
        Map<String, Object> result = getExpectedResult(testDate);
        Map<String, Object> expected = Map.of(
            "year", 2022,
            "month", "DECEMBER",
            "week_of_the_month", 5,
            "day_of_the_week", "SATURDAY"
        );
        assertEquals(expected, result);
    }
}
```

### Explanation:
1. **Imports**:
   - `java.time.LocalDate`: For handling dates.
   - `java.time.DayOfWeek`: For handling days of the week.
   - `java.util.Map`: For the generic type of the map.
   - `org.junit.Test`: For defining test methods.
   - `org.junit.Assert.assertEquals`: For asserting equality.

2. **JUnit Annotations**:
   - `@Test`: Marks each method as a test case.

3. **Helper Method**:
   - `getExpectedResult`: This method calculates the expected result for a given date, similar to the Python function `get_current_date_info`.

4. **Test Methods**:
   - Each test method (`testBeginningOfMonth`, `testMiddleOfMonth`, `testLeapYear`, `testChangeOfYear`) creates a `LocalDate` object and calls `getExpectedResult` to get the expected result.
   - The expected result is compared with the actual result using `assertEquals`.

5. **Assertions**:
   - `assertEquals` is used to verify that the expected result matches the actual result.

This Java test class preserves the functionality and logic of the original Python test cases while adhering to JUnit's syntax and conventions.