Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import unittest
import datetime


class TestGetCurrentDateInfo(unittest.TestCase):

    def test_beginning_of_month(self):
        result = get_current_date_info(datetime.date(2023, 1, 1))
        expected = {
            'year': 2023,
            'month': 'January',
            'week_of_the_month': 1,
            'day_of_the_week': 'Sunday'
        }
        self.assertEqual(result, expected)

    def test_middle_of_month(self):
        result = get_current_date_info(datetime.date(2023, 1, 15))
        expected = {
            'year': 2023,
            'month': 'January',
            'week_of_the_month': 3,
            'day_of_the_week': 'Sunday'
        }
        self.assertEqual(result, expected)

    def test_leap_year(self):
        result = get_current_date_info(datetime.date(2024, 2, 29))
        expected = {
            'year': 2024,
            'month': 'February',
            'week_of_the_month': 5,
            'day_of_the_week': 'Thursday'
        }
        self.assertEqual(result, expected)

    def test_change_of_year(self):
        result = get_current_date_info(datetime.date(2022, 12, 31))
        expected = {
            'year': 2022,
            'month': 'December',
            'week_of_the_month': 5,
            'day_of_the_week': 'Saturday'
        }
        self.assertEqual(result, expected)
```

### Equivalent Jest Test Suite:

```javascript
const { get_current_date_info } = require('./path/to/get_current_date_info');

describe('TestGetCurrentDateInfo', () => {
    describe('test_beginning_of_month', () => {
        it('should return correct info for the beginning of the month', () => {
            const result = get_current_date_info(new Date(2023, 0, 1));
            const expected = {
                'year': 2023,
                'month': 'January',
                'week_of_the_month': 1,
                'day_of_the_week': 'Sunday'
            };
            expect(result).toEqual(expected);
        });
    });

    describe('test_middle_of_month', () => {
        it('should return correct info for the middle of the month', () => {
            const result = get_current_date_info(new Date(2023, 0, 15));
            const expected = {
                'year': 2023,
                'month': 'January',
                'week_of_the_month': 3,
                'day_of_the_week': 'Sunday'
            };
            expect(result).toEqual(expected);
        });
    });

    describe('test_leap_year', () => {
        it('should return correct info for a leap year', () => {
            const result = get_current_date_info(new Date(2024, 1, 29));
            const expected = {
                'year': 2024,
                'month': 'February',
                'week_of_the_month': 5,
                'day_of_the_week': 'Thursday'
            };
            expect(result).toEqual(expected);
        });
    });

    describe('test_change_of_year', () => {
        it('should return correct info for the end of the year', () => {
            const result = get_current_date_info(new Date(2022, 11, 31));
            const expected = {
                'year': 2022,
                'month': 'December',
                'week_of_the_month': 5,
                'day_of_the_week': 'Saturday'
            };
            expect(result).toEqual(expected);
        });
    });
});

// Helper functions (if needed)
function getMonthName(monthIndex) {
    const monthNames = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
    ];
    return monthNames[monthIndex];
}

function getDayOfWeek(dayIndex) {
    const dayNames = [
        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
    ];
    return dayNames[dayIndex];
}
```

### Explanation:
1. **Importing the Function**: The `get_current_date_info` function is imported from the relevant module.
2. **Describe Blocks**: Each test case is wrapped in a `describe` block for better organization and readability.
3. **It Blocks**: Each test case is defined using `it` blocks, which provide a clear description of what each test does.
4. **Date Creation**: Dates are created using `new Date(year, monthIndex, day)` where `monthIndex` is zero-based (e.g., January is 0).
5. **Assertions**: The `expect` function is used to assert that the result matches the expected value using `toEqual`.

### Notes:
- **Month Index**: In JavaScript, the month index is zero-based, so `new Date(2023, 0, 1)` represents January 1, 2023.
- **Helper Functions**: If the `get_current_date_info` function relies on helper functions like `getMonthName` and `getDayOfWeek`, they are included for completeness.

This ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.