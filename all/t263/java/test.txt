Sure! Below is the equivalent Java code using JUnit for testing the `MatrixTraversal` class. I'll place the test class in the package `org.real.temp` and name it `Tester`. The functionality and logic of the tests will be preserved, and I'll use appropriate JUnit annotations and assertion methods.

First, let's define the `MatrixTraversal` class:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class MatrixTraversal {
    
    public List<Integer> spiralTraversal(List<List<Integer>> matrix) {
        List<Integer> result = new ArrayList<>();
        
        if (matrix == null || matrix.isEmpty() || matrix.get(0).isEmpty()) {
            return result;
        }
        
        int top = 0;
        int bottom = matrix.size() - 1;
        int left = 0;
        int right = matrix.get(0).size() - 1;
        
        while (top <= bottom && left <= right) {
            // Traverse right
            for (int i = left; i <= right; i++) {
                result.add(matrix.get(top).get(i));
            }
            top++;
            
            // Traverse down
            for (int i = top; i <= bottom; i++) {
                result.add(matrix.get(i).get(right));
            }
            right--;
            
            if (top <= bottom) {
                // Traverse left
                for (int i = right; i >= left; i--) {
                    result.add(matrix.get(bottom).get(i));
                }
                bottom--;
            }
            
            if (left <= right) {
                // Traverse up
                for (int i = bottom; i >= top; i--) {
                    result.add(matrix.get(i).get(left));
                }
                left++;
            }
        }
        
        return result;
    }
}
```

Now, let's create the JUnit test class `Tester`:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.Arrays;
import java.util.List;

public class Tester {
    
    private MatrixTraversal traversal = new MatrixTraversal();
    
    @Test
    public void testSpiralTraversal() {
        // Test case 1: Basic 3x3 matrix
        List<List<Integer>> matrix1 = Arrays.asList(
            Arrays.asList(1, 2, 3),
            Arrays.asList(4, 5, 6),
            Arrays.asList(7, 8, 9)
        );
        List<Integer> expected1 = Arrays.asList(1, 2, 3, 6, 9, 8, 7, 4, 5);
        assertEquals(expected1, traversal.spiralTraversal(matrix1));
        
        // Test case 2: Empty matrix
        List<List<Integer>> matrix2 = Arrays.asList();
        List<Integer> expected2 = Arrays.asList();
        assertEquals(expected2, traversal.spiralTraversal(matrix2));
        
        // Test case 3: Single element matrix
        List<List<Integer>> matrix3 = Arrays.asList(Arrays.asList(1));
        List<Integer> expected3 = Arrays.asList(1);
        assertEquals(expected3, traversal.spiralTraversal(matrix3));
        
        // Test case 4: 1xN matrix
        List<List<Integer>> matrix4 = Arrays.asList(Arrays.asList(1, 2, 3, 4));
        List<Integer> expected4 = Arrays.asList(1, 2, 3, 4);
        assertEquals(expected4, traversal.spiralTraversal(matrix4));
        
        // Test case 5: Nx1 matrix
        List<List<Integer>> matrix5 = Arrays.asList(
            Arrays.asList(1),
            Arrays.asList(2),
            Arrays.asList(3),
            Arrays.asList(4)
        );
        List<Integer> expected5 = Arrays.asList(1, 2, 3, 4);
        assertEquals(expected5, traversal.spiralTraversal(matrix5));
    }
}
```

In this solution, we have defined the `MatrixTraversal` class with the `spiralTraversal` method, which performs the spiral traversal of a given matrix. We then created a JUnit test class `Tester` that includes several test cases to verify the correctness of the `spiralTraversal` method. Each test case uses the `assertEquals` method to compare the expected result with the actual result obtained from the `spiralTraversal` method.