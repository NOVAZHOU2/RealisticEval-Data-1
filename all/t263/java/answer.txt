Certainly! Below is the equivalent Java code organized with the package `org.real.temp` and the class name `Answer`. The functionality, logic, and structure have been preserved while adapting to Java's syntax and language features:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Answer {
    
    public List<Integer> spiralTraversal(List<List<Integer>> matrix) {
        if (matrix.isEmpty()) {
            return new ArrayList<>();
        }

        int m = matrix.size();
        int n = matrix.get(0).size();

        int rowStart = 0, rowEnd = m - 1;
        int colStart = 0, colEnd = n - 1;

        List<Integer> result = new ArrayList<>();

        while (rowStart <= rowEnd && colStart <= colEnd) {
            // Traverse Right along the top row
            for (int j = colStart; j <= colEnd; j++) {
                result.add(matrix.get(rowStart).get(j));
            }
            rowStart++;

            // Traverse Down along the right column
            for (int i = rowStart; i <= rowEnd; i++) {
                result.add(matrix.get(i).get(colEnd));
            }
            colEnd--;

            // Traverse Left along the bottom row, if still within bounds
            if (rowStart <= rowEnd) {
                for (int j = colEnd; j >= colStart; j--) {
                    result.add(matrix.get(rowEnd).get(j));
                }
                rowEnd--;
            }

            // Traverse Up along the left column, if still within bounds
            if (colStart <= colEnd) {
                for (int i = rowEnd; i >= rowStart; i--) {
                    result.add(matrix.get(i).get(colStart));
                }
                colStart++;
            }
        }

        return result;
    }

    public static void main(String[] args) {
        Answer answer = new Answer();

        List<List<Integer>> matrix = new ArrayList<>();
        matrix.add(List.of(1, 2, 3));
        matrix.add(List.of(4, 5, 6));
        matrix.add(List.of(7, 8, 9));

        List<Integer> result = answer.spiralTraversal(matrix);
        System.out.println(result); // Output: [1, 2, 3, 6, 9, 8, 7, 4, 5]
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Class Definition**: The class `Answer` is defined within the package.
3. **Method Signature**: The method `spiralTraversal` is defined to take a `List<List<Integer>>` matrix and return a `List<Integer>` containing the elements in spiral order.
4. **Initialization**: The method initializes variables `m`, `n`, `rowStart`, `rowEnd`, `colStart`, `colEnd`, and `result`.
5. **Spiral Traversal Logic**: The logic for traversing the matrix in a spiral order is implemented using nested loops.
6. **Main Method**: The `main` method demonstrates how to use the `spiralTraversal` method by creating a sample matrix and printing the result.

This Java code preserves the functionality and logic of the original Python code while adhering to Java's syntax and conventions.