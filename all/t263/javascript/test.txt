Sure, I can help you convert your Python unittest test class to a JavaScript test case using Jest. Below is an example of how you might write such a test case:

```javascript
// Assuming you have a file named matrixTraversal.js with the following content:
const { spiralTraversal } = require('./matrixTraversal');

describe('Matrix Traversal', () => {
  it('should traverse a 3x3 matrix in spiral order', () => {
    const matrix = [
      [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9]
    ];
    expect(spiralTraversal(matrix)).toEqual([1, 2, 3, 6, 9, 8, 7, 4, 5]);
  });

  it('should handle a 2x2 matrix', () => {
    const matrix = [
      [1, 2],
      [3, 4]
    ];
    expect(spiralTraversal(matrix)).toEqual([1, 2, 4, 3]);
  });

  it('should handle a 1x1 matrix', () => {
    const matrix = [[1]];
    expect(spiralTraversal(matrix)).toEqual([1]);
  });

  it('should handle an empty matrix', () => {
    const matrix = [];
    expect(spiralTraversal(matrix)).toEqual([]);
  });
});
```

In this example, we're assuming that the `spiralTraversal` function is exported from a module named `matrixTraversal.js`. If your actual implementation is different, you'll need to adjust the import statement accordingly.

The `describe` function groups related tests together, and each `it` function defines a single test case. The `expect` function is used to assert that the output of the `spiralTraversal` function matches the expected result.