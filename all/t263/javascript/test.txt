Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Unittest Code

```python
import unittest

class TestMatrixTraversal(unittest.TestCase):
    def setUp(self):
        self.mt = MatrixTraversal()

    def test_empty_matrix(self):
        # 异常值测试：空矩阵
        self.assertEqual(self.mt.spiral_traversal([]), [], "Should return an empty list for an empty matrix")

    def test_single_element_matrix(self):
        # 基本逻辑功能测试：单元素矩阵
        matrix = [[42]]
        self.assertEqual(self.mt.spiral_traversal(matrix), [42], "Should return the single element in the matrix")

    def test_single_row_matrix(self):
        # 边界值测试：单行矩阵
        matrix = [[1, 2, 3, 4, 5]]
        self.assertEqual(self.mt.spiral_traversal(matrix), [1, 2, 3, 4, 5], "Should return all elements in a single row")

    def test_single_column_matrix(self):
        # 边界值测试：单列矩阵
        matrix = [[1], [2], [3], [4], [5]]
        self.assertEqual(self.mt.spiral_traversal(matrix), [1, 2, 3, 4, 5], "Should return all elements in a single column")

    def test_general_case(self):
        # 基本逻辑功能测试：多行多列矩阵
        matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        self.assertEqual(self.mt.spiral_traversal(matrix), [1, 2, 3, 6, 9, 8, 7, 4, 5], "Should return elements in spiral order for a general case matrix")
```

### Equivalent Jest Test Suite

```javascript
const MatrixTraversal = require('./MatrixTraversal'); // Import the MatrixTraversal class

describe('MatrixTraversal', () => {
    let mt;

    beforeEach(() => {
        mt = new MatrixTraversal();
    });

    it('should handle an empty matrix', () => {
        // 异常值测试：空矩阵
        expect(mt.spiral_traversal([])).toEqual([], 'Should return an empty list for an empty matrix');
    });

    it('should handle a single element matrix', () => {
        // 基本逻辑功能测试：单元素矩阵
        const matrix = [[42]];
        expect(mt.spiral_traversal(matrix)).toEqual([42], 'Should return the single element in the matrix');
    });

    it('should handle a single row matrix', () => {
        // 边界值测试：单行矩阵
        const matrix = [[1, 2, 3, 4, 5]];
        expect(mt.spiral_traversal(matrix)).toEqual([1, 2, 3, 4, 5], 'Should return all elements in a single row');
    });

    it('should handle a single column matrix', () => {
        // 边界值测试：单列矩阵
        const matrix = [[1], [2], [3], [4], [5]];
        expect(mt.spiral_traversal(matrix)).toEqual([1, 2, 3, 4, 5], 'Should return all elements in a single column');
    });

    it('should handle a general case matrix', () => {
        // 基本逻辑功能测试：多行多列矩阵
        const matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
        expect(mt.spiral_traversal(matrix)).toEqual([1, 2, 3, 6, 9, 8, 7, 4, 5], 'Should return elements in spiral order for a general case matrix');
    });
});
```

### Explanation:
1. **Importing the Class**: The `MatrixTraversal` class is imported at the beginning of the test file.
2. **Describe Block**: The `describe` block is used to group the tests under the `MatrixTraversal` class.
3. **BeforeEach Hook**: The `beforeEach` hook initializes the `MatrixTraversal` instance before each test.
4. **Test Cases**:
   - Each test case uses the `it` function to describe the test scenario.
   - The `expect` function is used to assert the expected behavior of the `spiral_traversal` method.
   - The `toEqual` matcher is used to compare arrays.
   - Comments are included to explain the purpose of each test case, matching the original Python comments.

This ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.