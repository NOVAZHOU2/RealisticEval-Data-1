Here is the equivalent TypeScript code:

```typescript
interface Matrix {
    [key: number]: number[];
}

class MatrixTraversal {
    spiralTraversal(matrix: Matrix[]): number[] {
        let result: number[] = [];
        if (matrix.length === 0) return result;

        let top = 0;
        let bottom = matrix.length - 1;
        let left = 0;
        let right = matrix[0].length - 1;

        while (top <= bottom && left <= right) {
            for (let i = left; i <= right; i++) {
                result.push(matrix[top][i]);
            }
            top++;

            for (let i = top; i <= bottom; i++) {
                result.push(matrix[i][right]);
            }
            right--;

            if (top <= bottom) {
                for (let i = right; i >= left; i--) {
                    result.push(matrix[bottom][i]);
                }
                bottom--;
            }

            if (left <= right) {
                for (let i = bottom; i >= top; i--) {
                    result.push(matrix[i][left]);
                }
                left++;
            }
        }

        return result;
    }
}
```

This TypeScript code defines an interface `Matrix` which represents a 2D array where each element is a number. The class `MatrixTraversal` contains the method `spiralTraversal` which takes a matrix as input and returns a list of numbers in spiral order.