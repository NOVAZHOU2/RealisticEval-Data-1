Hereâ€™s the equivalent TypeScript code for the provided Python class `MatrixTraversal`:

```typescript
class MatrixTraversal {
  spiralTraversal(matrix: number[][]): number[] {
    /**
     * Traverse a given m x n matrix in a spiral order and return all elements as an array.
     *
     * The function starts at the top-left corner of the matrix and traverses it in a
     * clockwise spiral order, moving right across the top row, down the right column,
     * left across the bottom row, and up the left column, repeating this process
     * until all elements are traversed.
     *
     * @param matrix - A 2D array representing the matrix with m rows and n columns.
     * @returns An array of numbers representing the elements of the matrix
     *          in the order they were traversed.
     */
    if (!matrix.length) {
      return [];
    }

    const m = matrix.length;
    const n = matrix[0].length;
    let rowStart = 0;
    let rowEnd = m - 1;
    let colStart = 0;
    let colEnd = n - 1;
    const result: number[] = [];

    while (rowStart <= rowEnd && colStart <= colEnd) {
      // Traverse Right along the top row
      for (let j = colStart; j <= colEnd; j++) {
        result.push(matrix[rowStart][j]);
      }
      rowStart++;

      // Traverse Down along the right column
      for (let i = rowStart; i <= rowEnd; i++) {
        result.push(matrix[i][colEnd]);
      }
      colEnd--;

      // Traverse Left along the bottom row, if still within bounds
      if (rowStart <= rowEnd) {
        for (let j = colEnd; j >= colStart; j--) {
          result.push(matrix[rowEnd][j]);
        }
        rowEnd--;
      }

      // Traverse Up along the left column, if still within bounds
      if (colStart <= colEnd) {
        for (let i = rowEnd; i >= rowStart; i--) {
          result.push(matrix[i][colStart]);
        }
        colStart++;
      }
    }

    return result;
  }
}
```

### Explanation:
1. **Class Definition**: The class `MatrixTraversal` is defined similarly to the Python class.
2. **Method Definition**: The method `spiralTraversal` is defined with the appropriate type annotations.
3. **Type Annotations**:
   - `matrix: number[][]`: This represents a 2D array of numbers.
   - `result: number[]`: This is an array to store the results.
4. **Control Flow**: The logic remains the same, with loops and conditions adjusted for TypeScript syntax.
5. **Return Type**: The method returns an array of numbers (`number[]`) as specified in the Python docstring.

This TypeScript code maintains the functionality and logic of the original Python code while adhering to TypeScript's static type system.