Here's how you can convert the Python unittest test class into a TypeScript test case using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('MatrixTraversal', () => {
    it('should traverse a 3x3 matrix in spiral order', () => {
        const matrix = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ];
        const expectedOutput = [1, 2, 3, 6, 9, 8, 7, 4, 5];
        // Assuming the function is implemented and available as 'spiralTraverse'
        const result = spiralTraverse(matrix);
        expect(result).toEqual(expectedOutput);
    });

    it('should handle an empty matrix', () => {
        const matrix: number[][] = [];
        const expectedOutput: number[] = [];
        const result = spiralTraverse(matrix);
        expect(result).toEqual(expectedOutput);
    });

    it('should handle a single-element matrix', () => {
        const matrix = [[7]];
        const expectedOutput = [7];
        const result = spiralTraverse(matrix);
        expect(result).toEqual(expectedOutput);
    });
});

// Assuming the implementation of the function
function spiralTraverse(matrix: number[][]): number[] {
    let result: number[] = [];
    while (matrix.length) {
        result.push(...matrix.shift()!); // Take the first row and remove it from the matrix
        if (matrix.length && matrix[0].length) {
            for (let i = 0; i < matrix.length; i++) {
                result.push(matrix[i].pop()!); // Take the last element of each remaining row
            }
        }
        if (matrix.length) {
            result.push(...matrix.pop()!.reverse()); // Take the last row and remove it from the matrix, then reverse it
        }
        if (matrix.length && matrix[0].length) {
            for (let i = matrix.length - 1; i >= 0; i--) {
                result.push(matrix[i].shift()!); // Take the first element of each remaining row
            }
        }
    }
    return result;
}
```

This TypeScript code uses Jest for testing. It includes three test cases that check the `spiralTraverse` function with different matrices. Make sure to replace `spiralTraverse` with your actual function name or implement the function if it doesn't exist yet.