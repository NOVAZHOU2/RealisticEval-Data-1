Sure, hereâ€™s the conversion of the `MatrixTraversal` class to TypeScript using Jest for testing:

First, let's define the `MatrixTraversal` class in TypeScript:

```typescript
class MatrixTraversal {
    spiralTraversal(matrix: number[][]): number[] {
        const result: number[] = [];
        if (matrix.length === 0 || matrix[0].length === 0) return result;

        let top = 0;
        let bottom = matrix.length - 1;
        let left = 0;
        let right = matrix[0].length - 1;

        while (top <= bottom && left <= right) {
            // Traverse right across the top row
            for (let i = left; i <= right; i++) {
                result.push(matrix[top][i]);
            }
            top++;

            // Traverse down the right column
            for (let i = top; i <= bottom; i++) {
                result.push(matrix[i][right]);
            }
            right--;

            // Traverse left across the bottom row
            if (top <= bottom) {
                for (let i = right; i >= left; i--) {
                    result.push(matrix[bottom][i]);
                }
                bottom--;
            }

            // Traverse up the left column
            if (left <= right) {
                for (let i = bottom; i >= top; i--) {
                    result.push(matrix[i][left]);
                }
                left++;
            }
        }

        return result;
    }
}
```

Now, let's write the Jest test class to verify the functionality of `spiralTraversal`:

```typescript
import { MatrixTraversal } from './path-to-matrix-traversal-class'; // Update the path accordingly

describe('MatrixTraversal', () => {
    let matrixTraversal: MatrixTraversal;

    beforeEach(() => {
        matrixTraversal = new MatrixTraversal();
    });

    it('should traverse a 3x3 matrix in spiral order', () => {
        const matrix = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ];
        const expectedResult = [1, 2, 3, 6, 9, 8, 7, 4, 5];
        expect(matrixTraversal.spiralTraversal(matrix)).toEqual(expectedResult);
    });

    it('should traverse a 2x3 matrix in spiral order', () => {
        const matrix = [
            [1, 2, 3],
            [4, 5, 6]
        ];
        const expectedResult = [1, 2, 3, 6, 5, 4];
        expect(matrixTraversal.spiralTraversal(matrix)).toEqual(expectedResult);
    });

    it('should handle an empty matrix', () => {
        const matrix: number[][] = [];
        const expectedResult: number[] = [];
        expect(matrixTraversal.spiralTraversal(matrix)).toEqual(expectedResult);
    });

    it('should handle a single-element matrix', () => {
        const matrix = [[1]];
        const expectedResult = [1];
        expect(matrixTraversal.spiralTraversal(matrix)).toEqual(expectedResult);
    });

    it('should handle a 1x3 matrix in spiral order', () => {
        const matrix = [
            [1, 2, 3]
        ];
        const expectedResult = [1, 2, 3];
        expect(matrixTraversal.spiralTraversal(matrix)).toEqual(expectedResult);
    });

    it('should handle a 3x1 matrix in spiral order', () => {
        const matrix = [
            [1],
            [2],
            [3]
        ];
        const expectedResult = [1, 2, 3];
        expect(matrixTraversal.spiralTraversal(matrix)).toEqual(expectedResult);
    });
});
```

In this solution:
- We define the `MatrixTraversal` class in TypeScript.
- We create a Jest test suite (`describe`) for `MatrixTraversal`.
- Each test case uses `beforeEach` to instantiate a new `MatrixTraversal` object before each test.
- We use `expect` and `toEqual` to check if the output of `spiralTraversal` matches the expected results.