Here is an equivalent C++ version of your Python code:

```c++
#include <vector>
using namespace std;

class MatrixTraversal {
public:
    vector<int> spiralTraver(vector<vector<int>>& matrix) {
        vector<int> result;
        int top = 0, bottom = matrix.size() - 1, left = 0, right = matrix[0].size() - 1;

        while (top <= bottom && left <= right) {
            // traverse from left to right along the top row
            for (int i = left; i <= right; ++i)
                result.push_back(matrix[top][i]);
            ++top;

            // traverse downwards along the right column
            for (int i = top; i <= bottom; ++i)
                result.push_back(matrix[i][right]);
            --right;

            if (top <= bottom) { 
                // traverse from right to left along the bottom row
                for (int i = right; i >= left; --i)
                    result.push_back(matrix[bottom][i]);
                --bottom;
            }

            if (left <= right) { 
                // traverse upwards along the left column
                for (int i = bottom; i >= top; --i)
                    result.push_back(matrix[i][left]);
                ++left;
            }
        }

        return result;
    }
};
```

And here's the same functionality implemented in C:

```c
#include <stdlib.h>

void spiralTraversal(int** matrix, int matrixSize, int* matrixColSize, int* returnSize) {
    *returnSize = matrixSize * matrixColSize[0];
    int* result = malloc(*returnSize * sizeof(int));
    
    int top = 0, bottom = matrixSize - 1, left = 0, right = matrixColSize[0] - 1;

    while (top <= bottom && left <= right) {
        // traverse from left to right along the top row
        for (int i = left; i <= right; ++i)
            result[(top * matrixColSize[0]) + i] = matrix[top][i];
        ++top;

        // traverse downwards along the right column
        for (int i = top; i <= bottom; ++i)
            result[(i * matrixColSize[0]) + right] = matrix[i][right];
        --right;

        if (top <= bottom) { 
            // traverse from right to left along the bottom row
            for (int i = right; i >= left; --i)
                result[(bottom * matrixColSize[0]) + i] = matrix[bottom][i];
            --bottom;
        }

        if (left <= right) { 
            // traverse upwards along the left column
            for (int i = bottom; i >= top; --i)
                result[(i * matrixColSize[0]) + left] = matrix[i][left];
            ++left;
        }
    }

    *returnSize = *returnSize;
}
```
Please note that you should free the allocated memory after use in both C and C++.