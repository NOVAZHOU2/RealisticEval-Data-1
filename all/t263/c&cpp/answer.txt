Certainly! Below is the equivalent C++ code for the provided Python class `MatrixTraversal` and its method `spiral_traversal`. The C++ version will use standard C++ libraries and features to achieve the same functionality:

```cpp
#include <iostream>
#include <vector>
#include <cassert>

class MatrixTraversal {
public:
    std::vector<int> spiral_traversal(const std::vector<std::vector<int>>& matrix) {
        if (matrix.empty()) {
            return {};
        }

        int m = matrix.size();
        int n = matrix[0].size();
        int row_start = 0;
        int row_end = m - 1;
        int col_start = 0;
        int col_end = n - 1;
        std::vector<int> result;

        while (row_start <= row_end && col_start <= col_end) {
            // Traverse Right along the top row
            for (int j = col_start; j <= col_end; ++j) {
                result.push_back(matrix[row_start][j]);
            }
            row_start++;

            // Traverse Down along the right column
            for (int i = row_start; i <= row_end; ++i) {
                result.push_back(matrix[i][col_end]);
            }
            col_end--;

            // Traverse Left along the bottom row, if still within bounds
            if (row_start <= row_end) {
                for (int j = col_end; j >= col_start; --j) {
                    result.push_back(matrix[row_end][j]);
                }
                row_end--;
            }

            // Traverse Up along the left column, if still within bounds
            if (col_start <= col_end) {
                for (int i = row_end; i >= row_start; --i) {
                    result.push_back(matrix[i][col_start]);
                }
                col_start++;
            }
        }

        return result;
    }
};

// Function to test the spiral traversal
void test_spiral_traversal() {
    MatrixTraversal mt;
    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    std::vector<int> expected = {1, 2, 3, 6, 9, 8, 7, 4, 5};
    assert(mt.spiral_traversal(matrix) == expected);

    std::vector<std::vector<int>> empty_matrix = {};
    assert(mt.spiral_traversal(empty_matrix).empty());

    std::cout << "All tests passed successfully." << std::endl;
}

int main() {
    test_spiral_traversal();
    return 0;
}
```

### Explanation:
1. **Class Definition**: The `MatrixTraversal` class is defined with a method `spiral_traversal` that takes a 2D vector of integers and returns a 1D vector of integers representing the elements traversed in spiral order.

2. **Initialization**: The dimensions of the matrix (`m` and `n`) and the starting and ending indices for rows and columns are initialized.

3. **Traversal Loop**: The loop iterates over the matrix in a spiral order, appending elements to the `result` vector.

4. **Testing**: A `test_spiral_traversal` function is provided to verify the correctness of the implementation using assertions.

This C++ code maintains the same functionality and logic as the original Python code but adapts to C++ syntax and features.