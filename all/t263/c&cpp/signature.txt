Certainly! Below is the equivalent C++ code for the provided Python class `MatrixTraversal` and its method `spiral_traversal`. The code includes appropriate C++ type translations, comments, and documentation.

```cpp
#include <iostream>
#include <vector>
#include <cassert>

class MatrixTraversal {
public:
    // Traverse a given m x n matrix in a spiral order and return all elements as a vector.
    // The function starts at the top-left corner of the matrix and traverses it in a
    // clockwise spiral order, moving right across the top row, down the right column,
    // left across the bottom row, and up the left column, repeating this process
    // until all elements are traversed.
    //
    // Args:
    //     matrix (const std::vector<std::vector<int>>&): A 2D vector representing the matrix with m rows and n columns.
    //
    // Returns:
    //     std::vector<int>: A vector of integers representing the elements of the matrix
    //     in the order they were traversed.
    std::vector<int> spiral_traversal(const std::vector<std::vector<int>>& matrix) {
        if (matrix.empty()) {
            return {};
        }

        int m = matrix.size();
        int n = matrix[0].size();
        int row_start = 0, row_end = m - 1;
        int col_start = 0, col_end = n - 1;
        std::vector<int> result;

        while (row_start <= row_end && col_start <= col_end) {
            // Traverse Right along the top row
            for (int j = col_start; j <= col_end; ++j) {
                result.push_back(matrix[row_start][j]);
            }
            row_start++;

            // Traverse Down along the right column
            for (int i = row_start; i <= row_end; ++i) {
                result.push_back(matrix[i][col_end]);
            }
            col_end--;

            // Traverse Left along the bottom row, if still within bounds
            if (row_start <= row_end) {
                for (int j = col_end; j >= col_start; --j) {
                    result.push_back(matrix[row_end][j]);
                }
                row_end--;
            }

            // Traverse Up along the left column, if still within bounds
            if (col_start <= col_end) {
                for (int i = row_end; i >= row_start; --i) {
                    result.push_back(matrix[i][col_start]);
                }
                col_start++;
            }
        }

        return result;
    }
};

// Function to test the spiral traversal
void test_spiral_traversal() {
    MatrixTraversal mt;
    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    std::vector<int> expected = {1, 2, 3, 6, 9, 8, 7, 4, 5};
    assert(mt.spiral_traversal(matrix) == expected);

    std::vector<std::vector<int>> empty_matrix = {};
    assert(mt.spiral_traversal(empty_matrix).empty());

    std::cout << "All tests passed successfully." << std::endl;
}

int main() {
    test_spiral_traversal();
    return 0;
}
```

### Explanation:
1. **Class Definition**: The `MatrixTraversal` class is defined with a single public method `spiral_traversal`.
2. **Function Documentation**: The method `spiral_traversal` includes a detailed comment block that explains the purpose, arguments, and return value, similar to the Python docstring.
3. **Function Parameters**: The method takes a 2D vector `matrix` as input and returns a 1D vector `result` containing the elements in spiral order.
4. **Initialization**: The dimensions of the matrix (`m` and `n`) and the boundaries (`row_start`, `row_end`, `col_start`, `col_end`) are initialized.
5. **Traversal Logic**:
   - **Right Traversal**: Traverse the top row from `col_start` to `col_end`.
   - **Down Traversal**: Traverse the right column from `row_start` to `row_end`.
   - **Left Traversal**: Traverse the bottom row from `col_end` to `col_start` if still within bounds.
   - **Up Traversal**: Traverse the left column from `row_end` to `row_start` if still within bounds.
6. **Return Result**: Return the `result` vector containing the elements in spiral order.
7. **Test Function**: A test function `test_spiral_traversal` is included to verify the correctness of the implementation using assertions.

This C++ code preserves the original functionality and structure of the Python code while adapting to C++ syntax and documentation standards.