To convert the provided Python unittest test class into an equivalent test class using Catch2 in C++, we need to create a similar structure that includes the necessary headers, defines the test cases, and uses appropriate assertions. Below is the equivalent C++ code using Catch2:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <iostream>

class MatrixTraversal {
public:
    std::vector<int> spiral_traversal(const std::vector<std::vector<int>>& matrix) {
        std::vector<int> result;
        if (matrix.empty() || matrix[0].empty()) return result;

        int top = 0, bottom = matrix.size() - 1;
        int left = 0, right = matrix[0].size() - 1;

        while (top <= bottom && left <= right) {
            // Traverse right
            for (int i = left; i <= right; ++i) {
                result.push_back(matrix[top][i]);
            }
            top++;

            // Traverse down
            for (int i = top; i <= bottom; ++i) {
                result.push_back(matrix[i][right]);
            }
            right--;

            if (top <= bottom) {
                // Traverse left
                for (int i = right; i >= left; --i) {
                    result.push_back(matrix[bottom][i]);
                }
                bottom--;
            }

            if (left <= right) {
                // Traverse up
                for (int i = bottom; i >= top; --i) {
                    result.push_back(matrix[i][left]);
                }
                left++;
            }
        }

        return result;
    }
};

TEST_CASE("Test Spiral Traversal") {
    MatrixTraversal traversal;

    SECTION("Empty Matrix") {
        std::vector<std::vector<int>> matrix = {};
        REQUIRE(traversal.spiral_traversal(matrix) == std::vector<int>());
    }

    SECTION("Single Element Matrix") {
        std::vector<std::vector<int>> matrix = {{5}};
        REQUIRE(traversal.spiral_traversal(matrix) == std::vector<int>({5}));
    }

    SECTION("Matrix with One Row") {
        std::vector<std::vector<int>> matrix = {{1, 2, 3}};
        REQUIRE(traversal.spiral_traversal(matrix) == std::vector<int>({1, 2, 3}));
    }

    SECTION("Matrix with One Column") {
        std::vector<std::vector<int>> matrix = {{1}, {2}, {3}};
        REQUIRE(traversal.spiral_traversal(matrix) == std::vector<int>({1, 2, 3}));
    }

    SECTION("Square Matrix") {
        std::vector<std::vector<int>> matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        REQUIRE(traversal.spiral_traversal(matrix) == std::vector<int>({1, 2, 3, 6, 9, 8, 7, 4, 5}));
    }

    SECTION("Non-Square Matrix") {
        std::vector<std::vector<int>> matrix = {
            {1, 2, 3, 4},
            {5, 6, 7, 8},
            {9, 10, 11, 12}
        };
        REQUIRE(traversal.spiral_traversal(matrix) == std::vector<int>({1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7}));
    }
}
```

### Explanation:
1. **Headers**: We include the necessary headers for Catch2 (`catch2/catch_test_macros.hpp`) and the standard C++ library headers (`<vector>` and `<iostream>`).

2. **Class Definition**: We define the `MatrixTraversal` class with the `spiral_traversal` method, which takes a 2D vector as input and returns a 1D vector of integers representing the spiral traversal of the matrix.

3. **TEST_CASE and SECTION**: We use the `TEST_CASE` macro to define the overall test case and `SECTION` macros to define individual test sections. Each section tests a specific scenario (e.g., empty matrix, single element matrix, one-row matrix, etc.).

4. **Assertions**: We use the `REQUIRE` macro to assert the expected results of each test case. This ensures that the output of `spiral_traversal` matches the expected spiral traversal sequence.

This conversion preserves the functionality and logic of the original Python unittest class while adapting it to the Catch2 testing framework in C++.