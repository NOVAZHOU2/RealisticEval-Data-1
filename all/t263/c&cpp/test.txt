Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>

class MatrixTraversal {
public:
    // Traverse a given m x n matrix in a spiral order and return all elements as a vector.
    // The function starts at the top-left corner of the matrix and traverses it in a
    // clockwise spiral order, moving right across the top row, down the right column,
    // left across the bottom row, and up the left column, repeating this process
    // until all elements are traversed.
    //
    // Args:
    //     matrix (const std::vector<std::vector<int>>&): A 2D vector representing the matrix with m rows and n columns.
    //
    // Returns:
    //     std::vector<int>: A vector of integers representing the elements of the matrix
    //     in the order they were traversed.
    std::vector<int> spiral_traversal(const std::vector<std::vector<int>>& matrix) {
        if (matrix.empty()) {
            return {};
        }

        int m = matrix.size();
        int n = matrix[0].size();
        int row_start = 0, row_end = m - 1;
        int col_start = 0, col_end = n - 1;
        std::vector<int> result;

        while (row_start <= row_end && col_start <= col_end) {
            // Traverse Right along the top row
            for (int j = col_start; j <= col_end; ++j) {
                result.push_back(matrix[row_start][j]);
            }
            row_start++;

            // Traverse Down along the right column
            for (int i = row_start; i <= row_end; ++i) {
                result.push_back(matrix[i][col_end]);
            }
            col_end--;

            // Traverse Left along the bottom row, if still within bounds
            if (row_start <= row_end) {
                for (int j = col_end; j >= col_start; --j) {
                    result.push_back(matrix[row_end][j]);
                }
                row_end--;
            }

            // Traverse Up along the left column, if still within bounds
            if (col_start <= col_end) {
                for (int i = row_end; i >= row_start; --i) {
                    result.push_back(matrix[i][col_start]);
                }
                col_start++;
            }
        }

        return result;
    }
};

TEST_CASE("TestMatrixTraversal", "[MatrixTraversal]") {
    MatrixTraversal mt;

    SECTION("Empty matrix") {
        // 异常值测试：空矩阵
        REQUIRE(mt.spiral_traversal({}) == std::vector<int>{});
    }

    SECTION("Single element matrix") {
        // 基本逻辑功能测试：单元素矩阵
        std::vector<std::vector<int>> matrix = {{42}};
        REQUIRE(mt.spiral_traversal(matrix) == std::vector<int>{42});
    }

    SECTION("Single row matrix") {
        // 边界值测试：单行矩阵
        std::vector<std::vector<int>> matrix = {{1, 2, 3, 4, 5}};
        REQUIRE(mt.spiral_traversal(matrix) == std::vector<int>{1, 2, 3, 4, 5});
    }

    SECTION("Single column matrix") {
        // 边界值测试：单列矩阵
        std::vector<std::vector<int>> matrix = {{1}, {2}, {3}, {4}, {5}};
        REQUIRE(mt.spiral_traversal(matrix) == std::vector<int>{1, 2, 3, 4, 5});
    }

    SECTION("General case") {
        // 基本逻辑功能测试：多行多列矩阵
        std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        REQUIRE(mt.spiral_traversal(matrix) == std::vector<int>{1, 2, 3, 6, 9, 8, 7, 4, 5});
    }
}
```

### Explanation:
1. **Class Definition**: The `MatrixTraversal` class is defined with the `spiral_traversal` method.
2. **Function Documentation**: The method `spiral_traversal` includes a detailed comment block that explains the purpose, arguments, and return value, similar to the Python docstring.
3. **Test Class**: The `TEST_CASE` macro is used to define a test case named `TestMatrixTraversal`.
4. **Sections**: Each `SECTION` within the test case corresponds to a specific test scenario.
5. **Assertions**: The `REQUIRE` macro is used for assertions, which checks that the expected results match the actual results.
6. **Test Scenarios**:
   - **Empty Matrix**: Tests an empty matrix.
   - **Single Element Matrix**: Tests a matrix with a single element.
   - **Single Row Matrix**: Tests a matrix with a single row.
   - **Single Column Matrix**: Tests a matrix with a single column.
   - **General Case**: Tests a matrix with multiple rows and columns.

This C++ code preserves the original functionality and logic of the Python unittest class while adapting to the syntax and features of the Catch2 testing framework.