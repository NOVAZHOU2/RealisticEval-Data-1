Hereâ€™s the C++ class `PriorityQueue` converted into TypeScript, with the function signatures and comments appropriately adapted:

```typescript
/**
 * Implement a priority queue
 */
class PriorityQueue {
    // Constructor
    constructor() {}

    // Function to insert a new element into the priority queue
    public insert(value: number): void {

    }

    // Function to get and remove the minimum element from the priority queue
    public extractMin(): number {

    }

    // Function to peek at the minimum element without removing it
    public peekMin(): number {

    }

    // Function to check if the priority queue is empty
    public isEmpty(): boolean {

    }

    // Function to get the size of the priority queue
    public size(): number {

    }

    // Function to print the contents of the priority queue (for debugging purposes)
    public print(): void {

    }
}
```

### Key Changes Made:
1. **Access Modifiers**: Added `public` to methods to match TypeScript's visibility syntax.
2. **Constructor**: Kept the constructor syntax compatible with TypeScript, no need for a body if it's empty.
3. **Type Annotations**: Changed parameter and return types to TypeScript equivalents (`number` and `void`).
4. **Comment Syntax**: Converted C++ comments into TypeScript-style comments (single-line and multi-line comments remain unchanged).

This TypeScript version preserves the structure and functionality of the original C++ class.