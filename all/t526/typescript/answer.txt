Here is your Python function translated into TypeScript:

```typescript
import { countBy } from 'lodash';

function minWindow(s: string, t: string): string {
    const targetCounts = countBy(t);
    let required = Object.keys(targetCounts).length;
    let left = 0, right = 0;
    let formed = 0;
    let ans = [-1, 0, 0];
    
    while(right < s.length){
        const char = s[right];
        const count = targetCounts[char] || 0;

        if(count > 0){
            targetCounts[char]--;
            if(targetCounts[char] === 0) formed++;
        }
        
        while(formed === required){
            const windowLength = right - left + 1;
            if(ans[0] === -1 || windowLength < ans[0]){
                ans = [windowLength, left, right];
            }

            const startChar = s[left];
            const startCount = targetCounts[startChar] || 0;

            if(startCount >= 0){
                targetCounts[startChar]++;
                if(targetCounts[startChar] > 0) formed--;
            }
            
            left++;
        }
        
        right++;
    }

    return ans[0] === -1 ? "" : s.substring(ans[1], ans[2] + 1);
}
```

This function uses the `countBy` function from the `lodash` library to count the occurrences of each character in the `t` string. Then it slides a window over the `s` string and checks if the current window contains all characters of `t`. If so, it tries to minimize the window size by moving the left pointer to the right until the window no longer contains all characters of `t`. The smallest window found during this process is returned. If no such window is found, an empty string is returned.