Sure! Here is how you can convert your Python unit test class to TypeScript using Jest:

```typescript
import { minWindow } from './minWindow'; // Adjust the import path accordingly

describe('minWindow', () => {
  it('should return the minimum window substring containing all characters of t', () => {
    expect(minWindow("ADOBECODEBANC", "ABC")).toBe("BANC");
  });

  it('should return an empty string if no valid window is found', () => {
    expect(minWindow("a", "aa")).toBe("");
  });

  it('should handle cases where the target string has repeated characters', () => {
    expect(minWindow("aa", "aa")).toBe("aa");
  });

  it('should handle cases where the target string is longer than the source string', () => {
    expect(minWindow("abcde", "fgh")).toBe("");
  });
});
```

In this example, I've assumed that the function `minWindow` is located in a file named `minWindow.ts`. You'll need to adjust the import path accordingly based on your project structure.

This TypeScript code uses Jest's `describe`, `it`, and `expect` functions to create tests that mirror your original Python unittest class. Each `it` block represents a single test case, and `expect` is used to assert the expected outcomes.