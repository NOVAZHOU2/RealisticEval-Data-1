Sure! Here's how you can convert the given Python code into Java:

```java
package org.real.temp;

import java.util.HashMap;
import java.util.Map;

public class Answer {
    public static String minWindow(String s, String t) {
        // Create maps to store character counts
        Map<Character, Integer> targetMap = new HashMap<>();
        Map<Character, Integer> currentMap = new HashMap<>();

        // Populate the target map with character counts from t
        for (char c : t.toCharArray()) {
            targetMap.put(c, targetMap.getOrDefault(c, 0) + 1);
        }

        int required = targetMap.size();
        int formed = 0;
        int left = 0, right = 0;
        int ans[] = {-1, 0, 0}; // {length, left, right}

        while (right < s.length()) {
            char c = s.charAt(right++);
            currentMap.put(c, currentMap.getOrDefault(c, 0) + 1);

            if (targetMap.containsKey(c) && currentMap.get(c).equals(targetMap.get(c))) {
                formed++;
            }

            while (left <= right && formed == required) {
                if (ans[0] == -1 || right - left < ans[0]) {
                    ans[0] = right - left;
                    ans[1] = left;
                    ans[2] = right;
                }

                char d = s.charAt(left++);
                if (currentMap.containsKey(d)) {
                    currentMap.put(d, currentMap.get(d) - 1);
                    if (currentMap.get(d) < targetMap.get(d)) {
                        formed--;
                    }
                }
            }
        }

        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2]);
    }

    public static void main(String[] args) {
        System.out.println(minWindow("ADOBECODEBANC", "ABC")); // Output: "BANC"
        System.out.println(minWindow("a", "a")); // Output: "a"
        System.out.println(minWindow("a", "aa")); // Output: ""
    }
}
```

### Explanation:
1. **Imports**: Import necessary classes like `HashMap` and `Map`.
2. **Maps**: Use `HashMap` to count the frequency of each character in both `t` and the current window of `s`.
3. **Variables**:
   - `targetMap`: Stores the frequency of each character in `t`.
   - `currentMap`: Stores the frequency of each character in the current window of `s`.
   - `required`: Number of unique characters in `t`.
   - `formed`: Number of unique characters currently matched in the window.
   - `left` and `right`: Pointers to define the current window.
   - `ans`: Array to store the result `{length, left, right}`.
4. **Sliding Window**:
   - Expand the window by moving the `right` pointer.
   - Contract the window by moving the `left` pointer when all characters in `t` are matched.
5. **Result**: Return the minimum window substring or an empty string if no valid window is found.

This Java implementation follows the logic of the original Python function using a sliding window approach.