Here is the equivalent C++ code for the provided Python code:

```cpp
#include <iostream>
#include <string>
#include <unordered_map>
#include <climits>

std::string min_window(const std::string& s, const std::string& t) {
    // If the length of s is less than t, return an empty string
    if (s.length() < t.length()) {
        return "";
    }

    // Count characters in t
    std::unordered_map<char, int> substring_counter;
    for (char c : t) {
        substring_counter[c]++;
    }

    // Counter for the current window
    std::unordered_map<char, int> counter;

    // Initialize pointers and variables for the minimum window
    int l = 0, r = 0;
    int min_length = INT_MAX;
    std::string min_string = "";

    // Iterate over s using the right pointer
    for (r = 0; r < s.length(); ++r) {
        char char_r = s[r];
        // If the character is in the substring_counter, update the current counter
        if (substring_counter.find(char_r) != substring_counter.end()) {
            counter[char_r]++;
        }

        // Check if the current window contains all characters in t
        while (counter.size() == substring_counter.size() &&
               std::all_of(substring_counter.begin(), substring_counter.end(),
                           [&counter](const std::pair<char, int>& p) { return counter[p.first] >= p.second; })) {

            // Update the minimum window if a smaller one is found
            if (r - l + 1 < min_length) {
                min_length = r - l + 1;
                min_string = s.substr(l, r - l + 1);
            }

            // Move the left pointer to try to shrink the window
            char char_l = s[l];
            if (substring_counter.find(char_l) != substring_counter.end()) {
                counter[char_l]--;
                if (counter[char_l] == 0) {
                    counter.erase(char_l);
                }
            }
            l++;
        }
    }

    // Return the minimum window found or an empty string if none exists
    return min_string;
}

int main() {
    std::string s = "ADOBECODEBANC";
    std::string t = "ABC";
    std::cout << "Minimum window substring: " << min_window(s, t) << std::endl;
    return 0;
}
```

### Explanation:
1. **Importing Libraries**: The necessary libraries (`<iostream>`, `<string>`, `<unordered_map>`, `<climits>`) are included at the beginning.
2. **Function Definition**: The function `min_window` takes two strings `s` and `t` as parameters and returns a string.
3. **Character Counting**:
   - A map `substring_counter` is used to count the characters in `t`.
   - Another map `counter` is used to count the characters in the current window.
4. **Initialization**:
   - Initialize pointers `l` and `r` to track the start and end of the window.
   - Initialize `min_length` to `INT_MAX` and `min_string` to an empty string.
5. **Iterating Over `s`**:
   - Use a loop to iterate over `s` with the right pointer `r`.
   - Update the `counter` if the character is in `substring_counter`.
6. **Checking Window Completeness**:
   - Use a nested loop to check if the current window contains all characters in `t`.
   - Update the minimum window if a smaller one is found.
7. **Shrinking the Window**:
   - Move the left pointer `l` to try to shrink the window.
8. **Returning the Result**:
   - Return the minimum window found or an empty string if none exists.

This C++ code maintains the same functionality and logic as the original Python code.