Sure! Here's how you can translate the Python function signature into a C++ function signature while keeping the comments intact:

```cpp
#include <string>
#include <unordered_map>

/**
 * Find the minimum window substring in `s` that contains all characters of `t`.
 *
 * @param s The input string in which to search for the substring.
 * @param t The target string whose characters must be included in the substring.
 * @return The minimum window substring of `s` that contains all characters of `t`. Returns an empty string if no such substring exists.
 */
std::string minWindow(const std::string& s, const std::string& t);
```

### Explanation:
- **Include Headers**: We include `<string>` for handling strings and `<unordered_map>` for using the `std::unordered_map` (equivalent to Python's `Counter`).
- **Function Signature**:
  - `std::string minWindow(const std::string& s, const std::string& t);`
    - `const std::string& s`: A constant reference to the input string `s`.
    - `const std::string& t`: A constant reference to the target string `t`.
    - `std::string`: The return type is a string representing the minimum window substring.
- **Comments**: The docstring is kept to explain the purpose, parameters, and return value of the function.

This C++ function signature maintains the functionality and clarity of the original Python function signature.