Here's the equivalent Jest test code for the provided C++ Catch2 test cases, preserving the logic and functionality:

```javascript
// Helper function to check if the array is sorted
function isSorted(arr) {
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] < arr[i - 1]) {
            return false;
        }
    }
    return true;
}

// Test cases
describe('Hill Sort', () => {
    test('Sort an already sorted array', () => {
        const arr = [1, 2, 3, 4, 5];
        hillSort(arr);
        expect(isSorted(arr)).toBe(true);
    });

    test('Sort an array in reverse order', () => {
        const arr = [5, 4, 3, 2, 1];
        hillSort(arr);
        expect(isSorted(arr)).toBe(true);
    });

    test('Sort an array with duplicate values', () => {
        const arr = [3, 1, 2, 3, 2];
        hillSort(arr);
        expect(isSorted(arr)).toBe(true);
    });

    test('Sort an array with all identical values', () => {
        const arr = [1, 1, 1, 1, 1];
        hillSort(arr);
        expect(isSorted(arr)).toBe(true);
    });

    test('Sort an empty array', () => {
        const arr = [];
        hillSort(arr);
        expect(isSorted(arr)).toBe(true);
    });

    test('Sort an array with one element', () => {
        const arr = [42];
        hillSort(arr);
        expect(isSorted(arr)).toBe(true);
    });

    test('Sort a large random array', () => {
        const arr = [3, 7, 2, 5, 1, 4, 6, 0, 9, 8];
        hillSort(arr);
        expect(isSorted(arr)).toBe(true);
    });
});
```

### Key Changes:
1. **Test Framework Structure**: Used `describe` and `test` from Jest instead of `TEST_CASE` and `SECTION`.
2. **Assertions**: Changed `REQUIRE` to `expect(...).toBe(...)`.
3. **Array Length Access**: Used `.length` for arrays instead of `.size()`.
4. **Function Declarations**: Kept the `isSorted` function as is but adapted to JavaScript syntax.