Here's the JavaScript translation of the provided C++ code that performs Hill sort (Shell sort). I've adapted the syntax and conventions to fit JavaScript best practices.

```javascript
// Function to perform Hill sort (Shell sort)
function hillSort(arr) {
    const n = arr.length;

    // Start with a large gap, then reduce the gap
    for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) {
        // Do a gapped insertion sort for this gap size
        for (let i = gap; i < n; i++) {
            // Save the value to be inserted
            const temp = arr[i];
            let j;

            // Shift earlier gap-sorted elements up until the correct location for arr[i] is found
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
                arr[j] = arr[j - gap];
            }

            // Put temp (the original arr[i]) in its correct location
            arr[j] = temp;
        }
    }
}

// Example usage:
const array = [5, 3, 8, 6, 2];
hillSort(array);
console.log(array); // Output: [2, 3, 5, 6, 8]
```

### Key Changes:
1. **Function Declaration**: JavaScript uses the `function` keyword for function declarations.
2. **Array Length**: Accessed using `.length` instead of `.size()`.
3. **Gap Calculation**: Used `Math.floor()` for integer division.
4. **Variable Declarations**: Used `const` for constants and `let` for variables that can change.
5. **Example Usage**: Added a simple example to demonstrate how to call the `hillSort` function and log the result.