Here's the equivalent Python code for the provided C++ implementation of the Hill Sort (also known as Shell Sort). The structure and logic are preserved, with comments adapted to Python's style.
python
def hill_sort(arr):
    """
    Function to perform Hill sort (Shell sort).

    :param arr: A list of integers to be sorted.
    """
    n = len(arr)  # Get the size of the array

    # Start with a large gap, then reduce the gap
    gap = n // 2  # Initial gap size
    while gap > 0:
        # Do a gapped insertion sort for this gap size
        for i in range(gap, n):
            # Save the value to be inserted
            temp = arr[i]
            j = i

            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap

            # Put temp (the original arr[i]) in its correct location
            arr[j] = temp

        gap //= 2  # Reduce the gap size

# Example usage
if __name__ == "__main__":
    sample_array = [5, 2, 9, 1, 5, 6]
    hill_sort(sample_array)
    print("Sorted array:", sample_array)
Explanation:
Function Definition:
The function hill_sort takes a list of integers as input and sorts it in place.
Gap Calculation:
The initial gap is set to half the size of the array (n // 2), following the logic from the C++ code.
Sorting Logic:
A while loop is used to perform the gapped insertion sort. For each gap size, it iterates through the array and shifts the elements as needed to insert the current element (temp) in its correct position.
Comments:
The comments are converted to Python style, explaining each part of the algorithm.
Example Usage:
An example usage is provided at the end to demonstrate how to call the hill_sort function and display the sorted array.
You can run this Python code in any Python environment, and it will perform the Hill Sort algorithm on the provided sample array.