Sure! Below is the equivalent Java code for your Python function. The Java class `Answer` will be placed in the package `org.real.temp`.

```java
package org.real.temp;

public class Answer {

    /**
     * Computes and returns the size of an object in bytes in memory.
     *
     * @param obj the object whose size in bytes is to be computed
     * @return the size of the object in bytes in memory
     */
    public static long sizeInBytes(Object obj) {
        // This is a placeholder implementation. In practice, you would need to use some library or method
        // to compute the actual memory usage of an object in Java.
        // For simplicity, we return 0 here.
        return 0;
    }

    public static void main(String[] args) {
        // Example usage
        Object exampleObject = new Object();
        long size = sizeInBytes(exampleObject);
        System.out.println("Size of the object in bytes: " + size);
    }
}
```

### Explanation:
1. **Package Declaration**: The `package org.real.temp;` statement specifies the package where the `Answer` class resides.
2. **Class Definition**: The `public class Answer { ... }` defines the `Answer` class.
3. **Method Signature**: The `public static long sizeInBytes(Object obj)` method has the same signature as your Python function. It takes an `Object` as an argument and returns a `long` value representing the size in bytes.
4. **Documentation Comment**: The Javadoc-style comment above the method provides documentation similar to your Python docstring.
5. **Placeholder Implementation**: The current implementation simply returns `0`. In a real-world scenario, you would need to use a library or custom method to accurately measure the memory usage of an object in Java.

If you need an accurate measurement of an object's memory footprint, consider using libraries like `jamm` (Java Agent for Memory Measurement). Here is an example using `jamm`:

```java
package org.real.temp;

import com.github.jbellis.jamm.MemoryMeter;

public class Answer {

    private static final MemoryMeter meter = new MemoryMeter();

    /**
     * Computes and returns the size of an object in bytes in memory.
     *
     * @param obj the object whose size in bytes is to be computed
     * @return the size of the object in bytes in memory
     */
    public static long sizeInBytes(Object obj) {
        return meter.measure(obj);
    }

    public static void main(String[] args) {
        // Example usage
        Object exampleObject = new Object();
        long size = sizeInBytes(exampleObject);
        System.out.println("Size of the object in bytes: " + size);
    }
}
```

In this version, the `MemoryMeter` class from the `jamm` library is used to measure the memory usage of the object. Make sure to include the `jamm` dependency in your project.