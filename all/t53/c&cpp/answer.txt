Certainly! Below is the equivalent C++ code for the provided Python function. Since C++ does not have a direct equivalent to Python's `sys.getsizeof()`, we will use `sizeof` to determine the size of an object in bytes. Note that C++ does not support the same level of introspection as Python, so the `obj` parameter will need to be a specific type rather than a generic "any" type.

Hereâ€™s the C++ code:

```cpp
#include <iostream>

// Function to compute and return the size of an object in bytes.
template<typename T>
size_t size_in_bytes(const T& obj) {
    /**
     * Computes and returns the size of an object in bytes.
     *
     * Args:
     * obj (T): The object to measure the memory size of.
     *
     * Returns:
     * size_t: The size of the object in bytes.
     */
    return sizeof(obj);
}

int main() {
    // Example usage
    int exampleInt = 42;
    std::cout << "Size of int: " << size_in_bytes(exampleInt) << " bytes" << std::endl;

    double exampleDouble = 3.14;
    std::cout << "Size of double: " << size_in_bytes(exampleDouble) << " bytes" << std::endl;

    return 0;
}
```

### Explanation:
1. **Template Function**: The `size_in_bytes` function is defined as a template function to handle different types of objects.
2. **`sizeof` Operator**: The `sizeof` operator is used to get the size of the object in bytes.
3. **Example Usage**: In the `main` function, examples are provided to demonstrate how to use the `size_in_bytes` function with different data types.

This code should provide the same functionality as the Python code but adapted to C++ syntax and features.