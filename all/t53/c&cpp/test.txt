Sure! Below is the equivalent C++ unit test case using Catch2 for the `size_in_bytes` function. Note that Catch2 is a header-only library, so you need to include it in your project.

First, ensure you have Catch2 installed or included in your project. If you're using a build system like CMake, you can add Catch2 as a subdirectory:

```cmake
add_subdirectory(path/to/catch2)
```

Here's the C++ test case:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"

#include <iostream>
#include <cstdlib>

// Assuming size_in_bytes is defined somewhere in your codebase
int size_in_bytes(const void* obj) {
    return sizeof(*obj);
}

TEST_CASE("Size in Bytes", "[size]") {
    int a = 42;
    REQUIRE(size_in_bytes(&a) == sizeof(int));

    double b = 3.14;
    REQUIRE(size_in_bytes(&b) == sizeof(double));

    std::string c = "Hello";
    REQUIRE(size_in_bytes(c.c_str()) == sizeof(char) * c.length());

    // Add more tests as needed
}
```

### Explanation:

1. **Include Catch2**: The `#define CATCH_CONFIG_MAIN` directive tells Catch2 to generate the `main` function for you. Include the Catch2 header.
   
2. **Define `size_in_bytes`**: This function should be defined somewhere in your codebase. For simplicity, I've added a basic implementation here.

3. **Test Cases**:
   - `TEST_CASE("Size in Bytes", "[size]")`: Defines a test case with a name and a tag.
   - `REQUIRE(size_in_bytes(&a) == sizeof(int))`: Uses `REQUIRE` to check if the size of an integer matches the expected value.
   - Similar checks are performed for a double and a string.

This setup will allow you to run the test cases using a C++ compiler and a build system that supports C++. Make sure to link against any necessary libraries (e.g., pthreads on some systems).