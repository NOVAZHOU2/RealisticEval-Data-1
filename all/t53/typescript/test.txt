Certainly! Below is the equivalent TypeScript code using Jest for the provided Python unittest test class. We will ensure that the functionality and logic of the tests are preserved, and we will map the Python `assertEqual` method to the appropriate Jest assertions.

### Python Code:
```python
import unittest
import sys

def size_in_bytes(obj) -> int:
    """
    Computes and returns the size of an object in bytes in memory.

    Args:
        obj (any): The object to measure the memory size of.

    Returns:
        int: The size of the object in bytes in memory.
    """
    return sys.getsizeof(obj)


class TestSizeInBytes(unittest.TestCase):

    def test_size_of_integer(self):
        # Test the size of an integer
        integer_value = 42
        expected_size = sys.getsizeof(integer_value)
        result_size = size_in_bytes(integer_value)
        self.assertEqual(result_size, expected_size)

    def test_size_of_string(self):
        # Test the size of a string
        string_value = "Hello, world!"
        expected_size = sys.getsizeof(string_value)
        result_size = size_in_bytes(string_value)
        self.assertEqual(result_size, expected_size)

    def test_size_of_list(self):
        # Test the size of a list
        list_value = [1, 2, 3, 4, 5]
        expected_size = sys.getsizeof(list_value)
        result_size = size_in_bytes(list_value)
        self.assertEqual(result_size, expected_size)

    def test_size_of_dictionary(self):
        # Test the size of a dictionary
        dict_value = {'key1': 'value1', 'key2': 'value2'}
        expected_size = sys.getsizeof(dict_value)
        result_size = size_in_bytes(dict_value)
        self.assertEqual(result_size, expected_size)

    def test_size_of_custom_object(self):
        # Test the size of a custom object
        class CustomObject:
            def __init__(self):
                self.attr1 = 'a'
                self.attr2 = 123
        custom_obj = CustomObject()
        expected_size = sys.getsizeof(custom_obj)  # Note: Does not include size of attributes unless explicitly calculated
        result_size = size_in_bytes(custom_obj)
        self.assertEqual(result_size, expected_size)
```

### Equivalent TypeScript Code Using Jest:

#### `sizeInBytes.ts`
```typescript
import { deepSizeOf } from 'deep-size-of';

/**
 * Computes and returns the size of an object in bytes in memory.
 *
 * @param obj - The object to measure the memory size of.
 * @returns The size of the object in bytes in memory.
 */
function sizeInBytes(obj: any): number {
    return deepSizeOf(obj);
}

export default sizeInBytes;
```

#### `testSizeInBytes.ts`
```typescript
import sizeInBytes from './sizeInBytes';
import { deepSizeOf } from 'deep-size-of';

describe('TestSizeInBytes', () => {
    describe('testSizeOfInteger', () => {
        it('should correctly compute the size of an integer', () => {
            const integerValue = 42;
            const expectedSize = deepSizeOf(integerValue);
            const resultSize = sizeInBytes(integerValue);
            expect(resultSize).toBe(expectedSize);
        });
    });

    describe('testSizeOfString', () => {
        it('should correctly compute the size of a string', () => {
            const stringValue = 'Hello, world!';
            const expectedSize = deepSizeOf(stringValue);
            const resultSize = sizeInBytes(stringValue);
            expect(resultSize).toBe(expectedSize);
        });
    });

    describe('testSizeOfList', () => {
        it('should correctly compute the size of a list', () => {
            const listValue = [1, 2, 3, 4, 5];
            const expectedSize = deepSizeOf(listValue);
            const resultSize = sizeInBytes(listValue);
            expect(resultSize).toBe(expectedSize);
        });
    });

    describe('testSizeOfDictionary', () => {
        it('should correctly compute the size of a dictionary', () => {
            const dictValue = { key1: 'value1', key2: 'value2' };
            const expectedSize = deepSizeOf(dictValue);
            const resultSize = sizeInBytes(dictValue);
            expect(resultSize).toBe(expectedSize);
        });
    });

    describe('testSizeOfCustomObject', () => {
        it('should correctly compute the size of a custom object', () => {
            class CustomObject {
                attr1: string;
                attr2: number;

                constructor() {
                    this.attr1 = 'a';
                    this.attr2 = 123;
                }
            }

            const customObj = new CustomObject();
            const expectedSize = deepSizeOf(customObj);
            const resultSize = sizeInBytes(customObj);
            expect(resultSize).toBe(expectedSize);
        });
    });
});
```

### Explanation:
1. **Function Definition**: The `sizeInBytes` function is defined with a single parameter `obj` of type `any`. It uses the `deepSizeOf` function from the `deep-size-of` package to compute the size of the object.
2. **Jest Test Cases**:
   - Each test case is defined using `describe` and `it` blocks.
   - The `expect` method is used to assert the equality of the computed size and the expected size.
3. **Custom Object**: A custom object class is defined in TypeScript, and its size is computed using `deepSizeOf`.

### Dependencies:
- `deep-size-of`: This package is used to approximate the size of objects in TypeScript/JavaScript. You can install it using npm:
  ```sh
  npm install deep-size-of
  ```

This setup ensures that the tests are equivalent and maintain the same functionality as the original Python unittests.