Certainly! Below is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments.

### Python Code:
```python
def size_in_bytes(obj) -> int:
    """
    Computes and returns the size of an object in bytes in memory.

    Args:
        obj (any): The object to measure the memory size of.

    Returns:
        int: The size of the object in bytes in memory.
    """
    import sys
    return sys.getsizeof(obj)
```

### Equivalent TypeScript Code:
```typescript
/**
 * Computes and returns the size of an object in bytes in memory.
 *
 * @param obj - The object to measure the memory size of.
 * @returns The size of the object in bytes in memory.
 */
function sizeInBytes(obj: any): number {
    // Since TypeScript runs in the browser or Node.js, we need to use a different approach
    // to approximate the size of an object in bytes.
    const jsonString = JSON.stringify(obj);
    return new Blob([jsonString]).size;
}

// Example usage
console.log(sizeInBytes({ key: 'value' })); // Example object
```

### Explanation:
1. **Function Definition**: The function `sizeInBytes` is defined with a single parameter `obj` of type `any`.
2. **JSDoc Documentation**: The Python docstring is converted to JSDoc-style comments.
3. **JSON Stringification**: The object is converted to a JSON string using `JSON.stringify`.
4. **Blob Size Calculation**: A `Blob` is created with the JSON string, and its size is returned using the `size` property of the `Blob`.

This approach provides a reasonable approximation of the size of the object in bytes. While it may not be as precise as `sys.getsizeof` in Python, it gives a good estimate for most cases.

If you are running this in a Node.js environment, you might need to handle Blob creation differently, depending on your specific setup. For example, you can use a library like `buffer` to create a Buffer instance and get its length:

```typescript
import { Buffer } from 'buffer';

/**
 * Computes and returns the size of an object in bytes in memory.
 *
 * @param obj - The object to measure the memory size of.
 * @returns The size of the object in bytes in memory.
 */
function sizeInBytes(obj: any): number {
    const jsonString = JSON.stringify(obj);
    return Buffer.from(jsonString).length;
}

// Example usage
console.log(sizeInBytes({ key: 'value' })); // Example object
```

This alternative approach uses the `Buffer` class from Node.js to calculate the length of the JSON string, which is a common way to measure the size of data in Node.js environments.