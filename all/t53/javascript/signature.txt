Certainly! I'll convert the given Python function signature and comments into equivalent JavaScript syntax, including JSDoc comments for documentation.

### Python Code

```python
def size_in_bytes(obj) -> int:
    """
    Computes and returns the size of an object in bytes in memory.

    Args:
        obj (any): The object to measure the memory size of.

    Returns:
        int: The size of the object in bytes in memory.
    """
```

### Equivalent JavaScript Code with JSDoc Comments

```javascript
/**
 * Computes and returns the size of an object in bytes in memory.
 *
 * @param {any} obj - The object to measure the memory size of.
 * @returns {number} The size of the object in bytes in memory.
 */
function sizeInBytes(obj) {
    // Implementation goes here
    // For demonstration purposes, we will use a simple estimation
    if (typeof obj === 'number') {
        return 8; // Assuming 64-bit floating point number
    } else if (typeof obj === 'string') {
        return obj.length * 2; // Assuming 2 bytes per character
    } else if (typeof obj === 'boolean') {
        return 1; // Assuming 1 byte
    } else if (typeof obj === 'undefined' || obj === null) {
        return 0;
    } else if (Array.isArray(obj)) {
        let size = 8; // Array header size
        for (let item of obj) {
            size += sizeInBytes(item);
        }
        return size;
    } else if (typeof obj === 'object') {
        let size = 8; // Object header size
        for (let key in obj) {
            if (obj.hasOwnProperty(key)) {
                size += key.length * 2 + 2; // Key size + overhead
                size += sizeInBytes(obj[key]);
            }
        }
        return size;
    } else {
        throw new Error('Unsupported type');
    }
}

// Example usage
console.log(sizeInBytes(123)); // Should print 8
console.log(sizeInBytes("Hello")); // Should print 10 (5 characters * 2 bytes)
console.log(sizeInBytes([1, 2, 3])); // Should print 24 (8 + 8 + 8)
```

### Explanation

1. **Function Signature**:
   - The Python function `size_in_bytes` is converted to `sizeInBytes` in JavaScript.
   - The return type annotation `-> int` is not directly supported in JavaScript, but we use JSDoc to document the return type.

2. **JSDoc Comments**:
   - The JSDoc comments provide a clear description of the function, its parameters, and its return value.
   - The `@param` tag documents the parameter `obj`.
   - The `@returns` tag documents the return value.

3. **Implementation**:
   - The implementation uses simple estimations for primitive types and iterates over arrays and objects to compute their sizes.

This conversion ensures that the functionality, logic, and structure of the original Python code are preserved in JavaScript, along with proper documentation using JSDoc.