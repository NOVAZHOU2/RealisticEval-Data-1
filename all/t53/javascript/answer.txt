Sure, I can help you convert the Python code to JavaScript while maintaining the functionality, logic, and structure as closely as possible. 

The Python function `size_in_bytes` computes the size of an object in bytes using the `sys.getsizeof()` method. In JavaScript, we don't have a direct equivalent for `sys.getsizeof()`, but we can simulate a similar functionality by estimating the size of primitive values or objects using some approximations or libraries.

Here's how you can achieve something similar in JavaScript:

1. **Primitive Values**: We can estimate the size of primitive values directly.
2. **Objects**: For objects, we can use a library like `object-sizeof` to get a more accurate size.

### Using Primitive Value Estimation

```javascript
function sizeInBytes(obj) {
    /**
     * Computes and returns the estimated size of an object in bytes.
     * 
     * Args:
     * obj (any): The object to measure the memory size of.
     * 
     * Returns:
     * int: The estimated size of the object in bytes.
     */
    if (typeof obj === 'number') {
        return 8; // Assuming 64-bit floating point number
    } else if (typeof obj === 'string') {
        return obj.length * 2; // Assuming 2 bytes per character
    } else if (typeof obj === 'boolean') {
        return 1; // Assuming 1 byte
    } else if (typeof obj === 'undefined' || obj === null) {
        return 0;
    } else if (Array.isArray(obj)) {
        let size = 8; // Array header size
        for (let item of obj) {
            size += sizeInBytes(item);
        }
        return size;
    } else if (typeof obj === 'object') {
        let size = 8; // Object header size
        for (let key in obj) {
            if (obj.hasOwnProperty(key)) {
                size += key.length * 2 + 2; // Key size + overhead
                size += sizeInBytes(obj[key]);
            }
        }
        return size;
    } else {
        throw new Error('Unsupported type');
    }
}

// Example usage
console.log(sizeInBytes(123)); // Should print 8
console.log(sizeInBytes("Hello")); // Should print 10 (5 characters * 2 bytes)
console.log(sizeInBytes([1, 2, 3])); // Should print 24 (8 + 8 + 8)
```

### Using Library (`object-sizeof`)

If you want a more accurate measurement, you can use a library like `object-sizeof`.

First, install the library:

```sh
npm install object-sizeof
```

Then, use it in your code:

```javascript
const sizeof = require('object-sizeof');

function sizeInBytes(obj) {
    /**
     * Computes and returns the size of an object in bytes using the object-sizeof library.
     * 
     * Args:
     * obj (any): The object to measure the memory size of.
     * 
     * Returns:
     * int: The size of the object in bytes.
     */
    return sizeof(obj);
}

// Example usage
console.log(sizeInBytes(123)); // Should print the size of a number
console.log(sizeInBytes("Hello")); // Should print the size of a string
console.log(sizeInBytes([1, 2, 3])); // Should print the size of an array
```

This approach provides a more accurate measurement of the object's size in bytes.