Certainly! I'll convert the given Python `unittest` test class into an equivalent Jest test suite, ensuring that the functionality and logic of the tests are maintained. I'll also document any necessary changes due to language differences between Python and JavaScript.

### Python Code

```python
import unittest
import sys

def size_in_bytes(obj):
    """
    Computes and returns the size of an object in bytes in memory.

    Args:
        obj (any): The object to measure the memory size of.

    Returns:
        int: The size of the object in bytes in memory.
    """
    return sys.getsizeof(obj)

class TestSizeInBytes(unittest.TestCase):

    def test_size_of_integer(self):
        # Test the size of an integer
        integer_value = 42
        expected_size = sys.getsizeof(integer_value)
        result_size = size_in_bytes(integer_value)
        self.assertEqual(result_size, expected_size)

    def test_size_of_string(self):
        # Test the size of a string
        string_value = "Hello, world!"
        expected_size = sys.getsizeof(string_value)
        result_size = size_in_bytes(string_value)
        self.assertEqual(result_size, expected_size)

    def test_size_of_list(self):
        # Test the size of a list
        list_value = [1, 2, 3, 4, 5]
        expected_size = sys.getsizeof(list_value)
        result_size = size_in_bytes(list_value)
        self.assertEqual(result_size, expected_size)

    def test_size_of_dictionary(self):
        # Test the size of a dictionary
        dict_value = {'key1': 'value1', 'key2': 'value2'}
        expected_size = sys.getsizeof(dict_value)
        result_size = size_in_bytes(dict_value)
        self.assertEqual(result_size, expected_size)

    def test_size_of_custom_object(self):
        # Test the size of a custom object
        class CustomObject:
            def __init__(self):
                self.attr1 = 'a'
                self.attr2 = 123
        custom_obj = CustomObject()
        expected_size = sys.getsizeof(custom_obj)  # Note: Does not include size of attributes unless explicitly calculated
        result_size = size_in_bytes(custom_obj)
        self.assertEqual(result_size, expected_size)
```

### Equivalent Jest Test Suite

```javascript
const sizeInBytes = require('./sizeInBytes'); // Import the sizeInBytes function

describe('TestSizeInBytes', () => {
    describe('test_size_of_integer', () => {
        it('should correctly compute the size of an integer', () => {
            const integerValue = 42;
            const expectedSize = sizeInBytes(integerValue);
            const resultSize = sizeInBytes(integerValue);
            expect(resultSize).toEqual(expectedSize);
        });
    });

    describe('test_size_of_string', () => {
        it('should correctly compute the size of a string', () => {
            const stringValue = "Hello, world!";
            const expectedSize = sizeInBytes(stringValue);
            const resultSize = sizeInBytes(stringValue);
            expect(resultSize).toEqual(expectedSize);
        });
    });

    describe('test_size_of_list', () => {
        it('should correctly compute the size of a list', () => {
            const listValue = [1, 2, 3, 4, 5];
            const expectedSize = sizeInBytes(listValue);
            const resultSize = sizeInBytes(listValue);
            expect(resultSize).toEqual(expectedSize);
        });
    });

    describe('test_size_of_dictionary', () => {
        it('should correctly compute the size of a dictionary', () => {
            const dictValue = { key1: 'value1', key2: 'value2' };
            const expectedSize = sizeInBytes(dictValue);
            const resultSize = sizeInBytes(dictValue);
            expect(resultSize).toEqual(expectedSize);
        });
    });

    describe('test_size_of_custom_object', () => {
        it('should correctly compute the size of a custom object', () => {
            class CustomObject {
                constructor() {
                    this.attr1 = 'a';
                    this.attr2 = 123;
                }
            }

            const customObj = new CustomObject();
            const expectedSize = sizeInBytes(customObj);
            const resultSize = sizeInBytes(customObj);
            expect(resultSize).toEqual(expectedSize);
        });
    });
});

// sizeInBytes.js
module.exports = function sizeInBytes(obj) {
    /**
     * Computes and returns the size of an object in bytes in memory.
     *
     * @param {any} obj - The object to measure the memory size of.
     * @returns {number} The size of the object in bytes in memory.
     */
    // Since there is no direct equivalent of sys.getsizeof in JavaScript,
    // we will use a simple estimation for demonstration purposes.
    if (typeof obj === 'number') {
        return 8; // Assuming 64-bit floating point number
    } else if (typeof obj === 'string') {
        return obj.length * 2; // Assuming 2 bytes per character
    } else if (typeof obj === 'boolean') {
        return 1; // Assuming 1 byte
    } else if (typeof obj === 'undefined' || obj === null) {
        return 0;
    } else if (Array.isArray(obj)) {
        let size = 8; // Array header size
        for (let item of obj) {
            size += sizeInBytes(item);
        }
        return size;
    } else if (typeof obj === 'object') {
        let size = 8; // Object header size
        for (let key in obj) {
            if (obj.hasOwnProperty(key)) {
                size += key.length * 2 + 2; // Key size + overhead
                size += sizeInBytes(obj[key]);
            }
        }
        return size;
    } else {
        throw new Error('Unsupported type');
    }
};
```

### Explanation

1. **Importing the Function**:
   - The `sizeInBytes` function is imported at the beginning of the Jest test file.

2. **Test Structure**:
   - Each test case is defined within a `describe` block, which groups related tests together.
   - Each test case is defined using `it` blocks, which contain the actual assertions.

3. **Assertions**:
   - The `expect` function is used to make assertions, similar to `self.assertEqual` in Python.
   - The `toEqual` matcher is used to check equality.

4. **Custom Object**:
   - The custom object definition is included within the test case to ensure it is scoped correctly.

5. **Function Definition**:
   - The `sizeInBytes` function is implemented in a separate file (`sizeInBytes.js`) and exported for use in the test suite.

This conversion ensures that the functionality and logic of the tests are maintained, and the structure is clear and follows Jest conventions.