Here's the equivalent Python code using the unittest framework to implement the test cases from the provided C++ Catch2 test code. The Python code will use the previously defined trapezoidal_rule function to perform the tests.
Python unittest Code
python
import unittest
import math

# Assuming the trapezoidal_rule function is defined somewhere above in the same module
# If it's in another module, you would import it like:
# from your_module import trapezoidal_rule

def trapezoidal_rule(func, a: float, b: float, n: int) -> float:
    if n <= 0:
        raise ValueError("Number of subintervals must be greater than 0.")
    h = (b - a) / n  # Step size
    integral = 0.5 * (func(a) + func(b))  # Initial trapezoid (half end heights)

    for i in range(1, n):
        integral += func(a + i * h)

    integral *= h
    return integral


class Tester(unittest.TestCase):
    def test_constant_function(self):
        """ Test Case 1: Integration of a constant function (f(x) = 1) over [0, 1] """
        self.assertAlmostEqual(trapezoidal_rule(lambda x: 1.0, 0.0, 1.0, 100), 1.0, delta=1e-6)

    def test_linear_function(self):
        """ Test Case 2: Integration of a linear function (f(x) = x) over [0, 1] """
        self.assertAlmostEqual(trapezoidal_rule(lambda x: x, 0.0, 1.0, 100), 0.5, delta=1e-6)

    def test_quadratic_function(self):
        """ Test Case 3: Integration of a quadratic function (f(x) = x^2) over [0, 1] """
        self.assertAlmostEqual(trapezoidal_rule(lambda x: x * x, 0.0, 1.0, 1000), 1.0 / 3.0, delta=1e-6)

    def test_sine_function(self):
        """ Test Case 4: Integration of the sine function (f(x) = sin(x)) over [0, Ï€] """
        self.assertAlmostEqual(trapezoidal_rule(lambda x: math.sin(x), 0.0, math.pi, 1000), 2.0, delta=1e-6)

    def test_exponential_function(self):
        """ Test Case 5: Integration of an exponential function (f(x) = exp(x)) over [0, 1] """
        self.assertAlmostEqual(trapezoidal_rule(lambda x: math.exp(x), 0.0, 1.0, 1000), math.exp(1.0) - 1.0, delta=1e-6)


if __name__ == "__main__":
    unittest.main()
Key Components:
Import Statements:
unittest for the testing framework.
math for mathematical functions such as sin and exp.
Test Class Definition:
A class Tester is created, inheriting from unittest.TestCase.
Test Cases:
Each test case corresponds to one of the tests in the original C++ code.
The assertAlmostEqual method is used to compare floating-point values, allowing for a tolerance level (delta) to account for precision issues.
Lambda Functions:
Lambda functions are used to define the test functions directly within the test cases, similar to how the C++ code uses inline functions.
Main Block:
The unittest.main() function is called to execute the tests when the script is run.
Running the Tests:
To run these tests, save the code in a .py file and execute it using a Python interpreter. The unittest framework will automatically discover and run the test cases. If all tests pass, you'll see a success message in the terminal.