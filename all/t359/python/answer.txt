Here's the provided C++ code converted to Python. The function calculates the integral approximation of a given function on a specified interval using the trapezoidal rule of numerical integration.
Python Code
python
from typing import Callable

def trapezoidal_rule(func: Callable[[float], float], a: float, b: float, n: int) -> float:
    """
    Calculate the integral approximation of a given function on a given interval [a,b] using the trapezoidal rule.

    This function calculates the integral approximation of a given mathematical function over
    the interval [a, b] using the trapezoidal rule of numerical integration. The interval is divided
    into a specified number of subintervals, and the area under the curve is approximated by trapezoids.

    :param func: The function to integrate, represented as a callable that takes a float and returns a float.
    :param a: The lower bound of the integration interval.
    :param b: The upper bound of the integration interval.
    :param n: The number of subintervals to use in the approximation (more intervals yield higher accuracy).
    :return: The approximate value of the integral over the interval [a, b].
    """
    if n <= 0:
        raise ValueError("Number of subintervals must be greater than 0.")

    h = (b - a) / n  # Step size
    integral = 0.5 * (func(a) + func(b))  # Initial trapezoid (half end heights)

    for i in range(1, n):
        integral += func(a + i * h)

    integral *= h
    return integral
Explanation:
Imports:
The code imports Callable from typing to specify the type of the function parameter.
Function Definition:
The trapezoidal_rule function takes four parameters: func (the function to integrate), a (the lower bound), b (the upper bound), and n (the number of subintervals).
Docstring:
A docstring provides a description of the function, its parameters, and its return value, similar to the comments in the C++ code.
Error Handling:
The function raises a ValueError if n is less than or equal to zero, mirroring the error handling in the C++ version.
Trapezoidal Rule Calculation:
The step size h is calculated, and the initial area is set by taking the average of the function values at the endpoints a and b.
A loop iterates over the range from 1 to n-1, adding the function values at each subinterval to the integral approximation.
Finally, the integral is multiplied by h to get the final result.
Usage Example:
You can use this function as follows:
python
# Example function to integrate
def my_function(x: float) -> float:
    return x**2  # Example: f(x) = x^2

# Calculate the integral of my_function from 0 to 1 using 100 subintervals
result = trapezoidal_rule(my_function, 0, 1, 100)
print("Approximate integral:", result)
This example defines a simple function 
f(x)=x
2
 and calculates its integral from 0 to 1 using 100 subintervals. The result is printed to the console.