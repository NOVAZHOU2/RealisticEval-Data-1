Hereâ€™s the C++ code signature converted to Python, with the comments changed to Python-style comments:
python
def trapezoidal_rule(func, a: float, b: float, n: int) -> float:
    """
    Calculate the integral approximation of a given function on a given interval [a,b] using the trapezoidal rule of numerical integration.

    :param func: The function to integrate, represented as a callable that takes a float and returns a float.
    :param a: The lower bound of the integration interval.
    :param b: The upper bound of the integration interval.
    :param n: The number of subintervals to use in the approximation (more intervals yield higher accuracy).
    :return: The approximate value of the integral over the interval [a, b].
    """
Key Changes:
Function Signature:
The function signature is converted from C++ to Python, changing the const std::function<double(double)& to a generic callable type. In Python, you do not need to declare the type of the function in the parameter list explicitly (as func will just be a callable).
Type Annotations:
The parameters a, b, and n are annotated with their respective types (float for a and b, and int for n), and the return type is also annotated as float.
Docstring:
The comment block has been changed to a docstring in Python format.
The @param and @return tags are converted to the format suitable for Python docstrings, which can be used by documentation generators and IDEs for better readability and usability.
This maintains the essence and clarity of the original C++ comments while adapting them to Python's conventions.