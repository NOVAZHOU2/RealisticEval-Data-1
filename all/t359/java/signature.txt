Hereâ€™s the equivalent Java code, maintaining the functionality and structure of the original C++ code:

```java
package org.real.temp;

/**
 * @brief Calculate the integral approximation of a given function on a given interval [a,b] using the trapezoidal rule of numerical integration
 *
 * This method calculates the integral approximation of a given mathematical function over
 * the interval [a, b] using the trapezoidal rule of numerical integration. The interval is divided
 * into a specified number of subintervals, and the area under the curve is approximated by trapezoids.
 *
 * @param func The function to integrate, represented as a java.util.function.Function<Double, Double>.
 * @param a The lower bound of the integration interval.
 * @param b The upper bound of the integration interval.
 * @param n The number of subintervals to use in the approximation (more intervals yield higher accuracy).
 * @return The approximate value of the integral over the interval [a, b].
 * @throws IllegalArgumentException if the number of subintervals is less than or equal to 0.
 */
public static double trapezoidalRule(java.util.function.Function<Double, Double> func, double a, double b, int n) {
    if (n <= 0) {
        throw new IllegalArgumentException("Number of subintervals must be greater than 0.");
    }

    double h = (b - a) / n; // Step size
    double integral = 0.5 * (func.apply(a) + func.apply(b)); // Initial trapezoid (half end heights)

    for (int i = 1; i < n; ++i) {
        integral += func.apply(a + i * h);
    }

    integral *= h;
    return integral;
}
```