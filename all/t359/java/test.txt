Here’s the equivalent JUnit test class in Java, maintaining the functionality and logic of the original C++ test cases:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.function.Function;

public class Tester {

    @Test
    public void testTrapezoidalRuleConstantFunction() {
        // Test Case 1: Integration of a constant function (f(x) = 1) over [0, 1]
        double result = Answer.trapezoidalRule(x -> 1.0, 0.0, 1.0, 100);
        assertEquals(1.0, result, 1e-6);
    }

    @Test
    public void testTrapezoidalRuleLinearFunction() {
        // Test Case 2: Integration of a linear function (f(x) = x) over [0, 1]
        double result = Answer.trapezoidalRule(x -> x, 0.0, 1.0, 100);
        assertEquals(0.5, result, 1e-6);
    }

    @Test
    public void testTrapezoidalRuleQuadraticFunction() {
        // Test Case 3: Integration of a quadratic function (f(x) = x^2) over [0, 1]
        double result = Answer.trapezoidalRule(x -> x * x, 0.0, 1.0, 1000);
        assertEquals(1.0 / 3.0, result, 1e-6);
    }

    @Test
    public void testTrapezoidalRuleSineFunction() {
        // Test Case 4: Integration of the sine function (f(x) = sin(x)) over [0, π]
        double result = Answer.trapezoidalRule(Math::sin, 0.0, Math.PI, 1000);
        assertEquals(2.0, result, 1e-6);
    }

    @Test
    public void testTrapezoidalRuleExponentialFunction() {
        // Test Case 5: Integration of an exponential function (f(x) = exp(x)) over [0, 1]
        double result = Answer.trapezoidalRule(Math::exp, 0.0, 1.0, 1000);
        assertEquals(Math.exp(1.0) - 1.0, result, 1e-6);
    }
}
```

### Key Points
- Each test method is annotated with `@Test`.
- The assertions use `assertEquals` to compare expected and actual results, allowing for a delta to handle floating-point precision.
- Lambda expressions are used to define the functions being tested, similar to the C++ lambda functions.
- The methods are called on the `Answer` class, which is assumed to contain the `trapezoidalRule` method defined earlier.