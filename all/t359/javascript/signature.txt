Hereâ€™s the equivalent JavaScript version of your C++ function:

```javascript
/**
 * @brief Calculate the integral approximation of a given function on a given interval [a,b] using the trapezoidal rule of numerical integration
 *
 * @param {function} func The function to integrate.
 * @param {number} a The lower bound of the integration interval.
 * @param {number} b The upper bound of the integration interval.
 * @param {number} n The number of subintervals to use in the approximation (more intervals yield higher accuracy).
 * @return {number} The approximate value of the integral over the interval [a, b].
 */
function trapezoidalRule(func, a, b, n) {
    if (n <= 0) {
        throw new Error("Number of subintervals must be greater than 0.");
    }

    const h = (b - a) / n; // Step size
    let integral = 0.5 * (func(a) + func(b)); // Initial trapezoid (half end heights)

    for (let i = 1; i < n; ++i) {
        integral += func(a + i * h);
    }

    integral *= h;
    return integral;
}
```

This translation maintains the functionality while adapting to JavaScript syntax and conventions.