Hereâ€™s how you can convert the provided C++ Catch2 test cases into equivalent Jest test cases in JavaScript, preserving the logic and functionality:

```javascript
const { parseHttpRequestLine } = require('./yourModule'); // Adjust the path as necessary

describe('parseHttpRequestLine', () => {
    test('Valid POST request line', () => {
        const response = "POST /api/data HTTP/1.1\r\n";
        const parsedInfo = parseHttpRequestLine(response);

        expect(parsedInfo.method).toBe("POST");
        expect(parsedInfo.url).toBe("/api/data");
        expect(parsedInfo.http_version).toBe("HTTP/1.1");
    });

    test('PUT request line', () => {
        const response = "PUT /api/update HTTP/2.0\r\n";
        const parsedInfo = parseHttpRequestLine(response);

        expect(parsedInfo.method).toBe("PUT");
        expect(parsedInfo.url).toBe("/api/update");
        expect(parsedInfo.http_version).toBe("HTTP/2.0");
    });

    test('DELETE request line', () => {
        const response = "DELETE /api/delete HTTP/1.1\r\n";
        const parsedInfo = parseHttpRequestLine(response);

        expect(parsedInfo.method).toBe("DELETE");
        expect(parsedInfo.url).toBe("/api/delete");
        expect(parsedInfo.http_version).toBe("HTTP/1.1");
    });

    test('Malformed request line', () => {
        const response = "INVALID REQUEST LINE\r\n";
        const parsedInfo = parseHttpRequestLine(response);

        expect(Object.keys(parsedInfo).length).toBe(0);  // Expect empty result for malformed request
    });
});
```

### Key Changes Made:
1. **Test Structure**: Used `describe` and `test` to organize test cases in Jest.
2. **Assertions**: Changed `REQUIRE` to `expect` with appropriate matchers (`toBe` and checking object length).
3. **Module Import**: Added a require statement to import the function being tested, assuming it's in another module.
4. **Empty Check**: Adjusted the check for an empty result by using `Object.keys(parsedInfo).length`.

This conversion maintains the original functionality while adapting to Jest's syntax and conventions.