Here’s the equivalent test class using the Catch2 framework in C++, converted from the provided Python `unittest` code:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <cmath>  // For std::abs

// Declaration of the function to be tested
double find_t_for_x(double target_x, std::tuple<double, double> p0, std::tuple<double, double> p1, std::tuple<double, double> p2);

// Test case for the function find_t_for_x
TEST_CASE("Find t for x on Bézier curve", "[find_t_for_x]") {
    const double TOLERANCE = 1e-6;

    SECTION("At start of the curve") {
        double p0 = 0.0;
        double p1 = 0.5;
        double p2 = 1.0;
        double target_x = 0.0;
        double t = find_t_for_x(target_x, std::make_tuple(p0, 0.0), std::make_tuple(p1, 0.0), std::make_tuple(p2, 0.0));
        REQUIRE(std::abs(t - 0.0) < TOLERANCE);
    }

    SECTION("At end of the curve") {
        double p0 = 0.0;
        double p1 = 0.5;
        double p2 = 1.0;
        double target_x = 1.0;
        double t = find_t_for_x(target_x, std::make_tuple(p0, 0.0), std::make_tuple(p1, 0.0), std::make_tuple(p2, 0.0));
        REQUIRE(std::abs(t - 1.0) < TOLERANCE);
    }

    SECTION("Mid curve") {
        double p0 = 0.0;
        double p1 = 0.5;
        double p2 = 1.0;
        double target_x = 0.25;
        double t = find_t_for_x(target_x, std::make_tuple(p0, 0.0), std::make_tuple(p1, 0.0), std::make_tuple(p2, 0.0));
        REQUIRE(std::abs(t - 0.25) < TOLERANCE);
    }

    SECTION("Near mid curve") {
        double p0 = 0.0;
        double p1 = 1.0;
        double p2 = 2.0;
        double target_x = 1.5;
        double t = find_t_for_x(target_x, std::make_tuple(p0, 0.0), std::make_tuple(p1, 0.0), std::make_tuple(p2, 0.0));
        REQUIRE(std::abs(t - 0.75) < TOLERANCE);
    }
}
```

### Key Changes:
1. **Include Catch2 Header**: The `#include <catch2/catch.hpp>` directive is necessary to use the Catch2 testing framework.
2. **TEST_CASE and SECTION**: Catch2 uses `TEST_CASE` to define a group of tests, and `SECTION` to define sub-tests within that group.
3. **Assertions**: The `REQUIRE` macro is used for assertions, replacing `assertAlmostEqual` with a check using `std::abs` to compare floating-point numbers within a tolerance.
4. **Tuple Creation**: Used `std::make_tuple` to create tuples for control points, similar to how tuples are handled in Python.

This C++ code can be compiled and run using Catch2 to validate the functionality of the `find_t_for_x` function in various scenarios.