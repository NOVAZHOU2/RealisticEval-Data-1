Here’s the equivalent C++ code for the provided Python functions. The conversion ensures that the functionality, logic, and structure remain consistent while adhering to C++ syntax and features:

```cpp
#include <iostream>
#include <cmath>
#include <array>

double bezier_curve(double t, const std::array<double, 2>& p0, const std::array<double, 2>& p1, const std::array<double, 2>& p2) {
    // Calculate the value of the Bézier curve at parameter t
    double one_minus_t = 1.0 - t;
    return (one_minus_t * one_minus_t) * p0[0] + (2 * one_minus_t * t) * p1[0] + (t * t) * p2[0];
}

double find_t_for_x(double target_x, const std::array<double, 2>& p0, const std::array<double, 2>& p1, const std::array<double, 2>& p2) {
    double t0 = 0.0;
    double t1 = 1.0;
    const double tolerance = 1e-6;
    const int max_iterations = 100;

    double x0 = bezier_curve(t0, p0, p1, p2) - target_x;
    double x1 = bezier_curve(t1, p0, p1, p2) - target_x;

    for (int i = 0; i < max_iterations; ++i) {
        if (std::abs(x1 - x0) < tolerance) {
            break;
        }

        double t2 = t1 - x1 * (t1 - t0) / (x1 - x0);
        double x2 = bezier_curve(t2, p0, p1, p2) - target_x;

        if (std::abs(x2) < tolerance) {
            return t2;
        }

        t0 = t1;
        x0 = x1;
        t1 = t2;
        x1 = x2;
    }

    return t1;  // Return the best approximation found
}

int main() {
    // Example usage
    std::array<double, 2> p0 = {0.0, 0.0};
    std::array<double, 2> p1 = {1.0, 2.0};
    std::array<double, 2> p2 = {2.0, 0.0};
    
    double target_x = 1.0;
    double t = find_t_for_x(target_x, p0, p1, p2);
    
    std::cout << "Parameter t for target x = " << target_x << " is: " << t << std::endl;
    return 0;
}
```

### Explanation:
1. **Function Signatures**: The function signatures in C++ specify types for parameters and return values.
2. **Arrays for Control Points**: I used `std::array<double, 2>` to represent the control points `p0`, `p1`, and `p2`.
3. **Loops and Conditionals**: C++ uses `for` loops and `if` statements similarly to Python, but requires explicit type declarations and semicolons.
4. **Absolute Value Calculation**: Used `std::abs` for calculating the absolute value.
5. **Main Function**: Included a `main` function to demonstrate how to use the `find_t_for_x` function, which is common in C++ programs. 

You can compile and run this C++ code to achieve the same functionality as the original Python implementation.