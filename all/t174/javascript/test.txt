Here's the equivalent test class using Jest, with necessary changes documented:

```javascript
// Import the function to be tested
const { findTForX } = require('./yourModule'); // Adjust the import based on your file structure

describe('TestFindTForX', () => {
    const TOLERANCE = 1e-6;

    test('findTForX at start', () => {
        const p0 = 0.0;
        const p1 = 0.5;
        const p2 = 1.0;
        const targetX = 0.0;
        const t = findTForX(targetX, p0, p1, p2);
        expect(Math.abs(t - 0.0)).toBeLessThanOrEqual(TOLERANCE);
    });

    test('findTForX at end', () => {
        const p0 = 0.0;
        const p1 = 0.5;
        const p2 = 1.0;
        const targetX = 1.0;
        const t = findTForX(targetX, p0, p1, p2);
        expect(Math.abs(t - 1.0)).toBeLessThanOrEqual(TOLERANCE);
    });

    test('findTForX mid curve', () => {
        const p0 = 0.0;
        const p1 = 0.5;
        const p2 = 1.0;
        const targetX = 0.25;
        const t = findTForX(targetX, p0, p1, p2);
        expect(Math.abs(t - 0.25)).toBeLessThanOrEqual(TOLERANCE);
    });

    test('findTForX near mid curve', () => {
        const p0 = 0.0;
        const p1 = 1.0;
        const p2 = 2.0;
        const targetX = 1.5;
        const t = findTForX(targetX, p0, p1, p2);
        expect(Math.abs(t - 0.75)).toBeLessThanOrEqual(TOLERANCE);
    });
});
```

### Key Changes Explained:
1. **Test Structure**: In Python's `unittest`, test cases are organized within a class that inherits from `unittest.TestCase`. In Jest, tests are organized using `describe` and `test` functions.

2. **Assertions**: 
   - The method `assertAlmostEqual` from Python is replaced with a combination of `Math.abs` and `toBeLessThanOrEqual` in Jest to check for approximate equality within a tolerance.

3. **Imports**: 
   - In Python, functions are imported directly using `import`. In JavaScript, you typically use `require` or `import` statements to bring in the functions you want to test.

4. **Method Names**: Python's naming convention typically uses underscores (`_`), while JavaScript commonly uses camelCase. The function name `find_t_for_x` is changed to `findTForX` in JavaScript.

These changes ensure that the functionality and logic of the tests are preserved while conforming to the conventions of the respective testing frameworks.