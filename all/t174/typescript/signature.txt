Here’s the equivalent TypeScript code for the provided Python function signature, along with the appropriate JSDoc documentation comments:

```typescript
type Point = [number, number]; // Tuple type for 2D points

/**
 * Find the parameter t corresponding to a given x-coordinate target_x
 * on a quadratic Bézier curve defined by control points p0, p1, and p2.
 *
 * @param targetX - The x-coordinate for which we want to find the corresponding parameter t.
 * @param p0 - The first control point of the Bézier curve.
 * @param p1 - The second control point of the Bézier curve.
 * @param p2 - The third control point of the Bézier curve.
 * @returns The parameter t (in the range [0, 1]) for which the Bézier curve
 *          evaluated at t is closest to target_x.
 */
function findTForX(targetX: number, p0: Point, p1: Point, p2: Point): number {
    // Function implementation goes here
}
```

### Changes Made:
1. **Type Definitions**: Created a `Point` type as a tuple of two numbers, which is equivalent to `Tuple[float, float]` in Python.

2. **Function Signature**: Converted the Python function signature into TypeScript format. The parameters' names and types are directly translated.

3. **JSDoc Comments**: Translated the Python docstring into JSDoc format, using `@param` for parameters and `@returns` for the return type, making sure to maintain the original descriptions.

This structure will help ensure clarity in TypeScript while preserving the intent and details from the Python code.