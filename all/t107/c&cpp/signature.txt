Certainly! Hereâ€™s the equivalent C++ code signature with the same comments and structure:

```cpp
#include <vector>
#include <algorithm>

/**
 * Finds the median of a given vector of numbers.
 * 
 * @param vec The vector of numbers to find the median of.
 */
void findMedian(std::vector<int>& vec) {
    // Sort the vector in ascending order
    std::sort(vec.begin(), vec.end());
    
    int n = vec.size();
    int midIndex = n / 2;

    // Determine if the vector length is even or odd and return the median
    if (n % 2 == 0) {
        // Even number of elements: average the two middle elements
        double median = (vec[midIndex - 1] + vec[midIndex]) / 2.0;
        // You can do something with the median here, e.g., print it or store it
        // For example:
        // std::cout << "Median: " << median << std::endl;
    } else {
        // Odd number of elements: return the middle element
        double median = vec[midIndex];
        // You can do something with the median here, e.g., print it or store it
        // For example:
        // std::cout << "Median: " << median << std::endl;
    }
}

int main() {
    // Example usage with a large vector
    std::vector<int> largeVector;
    largeVector.reserve(10001);

    for (int i = 0; i < 10001; ++i) {
        largeVector.push_back(static_cast<int>(std::floor(10000 * static_cast<double>(rand()) / RAND_MAX)));
    }

    findMedian(largeVector);

    return 0;
}
```

### Explanation:
1. **Header Files**: We include necessary headers (`vector`, `algorithm`).
2. **Function Definition**: The `findMedian` function takes a reference to a vector of integers and calculates the median.
3. **Sorting**: We use `std::sort` to sort the vector in ascending order.
4. **Median Calculation**:
   - If the size of the vector is even, we calculate the average of the two middle elements.
   - If the size of the vector is odd, we return the middle element.
5. **Example Usage**:
   - We create a vector of 10001 random integers between 0 and 9999.
   - We call the `findMedian` function.

The function `findMedian` does not return a value but instead performs the calculation and can optionally print or store the median. This matches the JavaScript signature where the function does not return a value but performs some action with the median.