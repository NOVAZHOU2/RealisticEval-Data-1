Here's the equivalent C++ code for your JavaScript function that finds the median of an array of numbers:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>

double findMedian(std::vector<int>& arr) {
    // Sort the array in ascending order
    std::sort(arr.begin(), arr.end());

    size_t n = arr.size();
    size_t midIndex = n / 2;

    // Determine if the array length is even or odd and return the median
    if (n % 2 == 0) {
        // Even number of elements: average the two middle elements
        return (arr[midIndex - 1] + arr[midIndex]) / 2.0;
    } else {
        // Odd number of elements: return the middle element
        return arr[midIndex];
    }
}

int main() {
    // Example usage with a large array
    std::vector<int> largeArray(10001);
    
    // Fill the array with random numbers
    std::generate(largeArray.begin(), largeArray.end(), []() {
        return rand() % 10000; // Random number between 0 and 9999
    });

    double median = findMedian(largeArray);
    std::cout << "Median: " << median << std::endl;

    return 0;
}
```

### Explanation:
1. **Includes and Namespace**: The necessary headers for I/O, vector operations, and algorithms are included.
2. **Function Definition**: The `findMedian` function takes a reference to a vector of integers and returns the median.
3. **Sorting**: The vector is sorted using `std::sort`.
4. **Median Calculation**: The median is calculated based on whether the size of the vector is even or odd.
5. **Main Function**: In `main`, a vector of 10,001 random integers is created and filled, then the median is calculated and printed.

Make sure to include `<cstdlib>` if you use `rand()`, and remember that `rand()` needs to be seeded for better randomness, which you can do with `srand(time(0));` at the beginning of your `main()` function.