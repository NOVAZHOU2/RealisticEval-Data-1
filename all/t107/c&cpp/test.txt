Certainly! Here’s how you can convert the Jest test cases to C++ using Catch2 for testing. Catch2 is a popular C++ testing framework that provides a similar level of readability and functionality to Jest.

First, make sure you have Catch2 installed in your project. You can include Catch2 by adding the header file and ensuring your build system includes the necessary dependencies.

Here’s the complete C++ code with the Catch2 test cases:

### C++ Code with Catch2 Test Cases

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <algorithm>

/**
 * Finds the median of a given vector of numbers.
 * 
 * @param vec The vector of numbers to find the median of.
 */
double findMedian(std::vector<int>& vec) {
    // Sort the vector in ascending order
    std::sort(vec.begin(), vec.end());
    
    int n = vec.size();
    int midIndex = n / 2;

    // Determine if the vector length is even or odd and return the median
    if (n % 2 == 0) {
        // Even number of elements: average the two middle elements
        return (vec[midIndex - 1] + vec[midIndex]) / 2.0;
    } else {
        // Odd number of elements: return the middle element
        return vec[midIndex];
    }
}

TEST_CASE("findMedian", "[findMedian]") {
    SECTION("should find the median of a large array with 10001 random elements") {
        std::vector<int> largeArray;
        largeArray.reserve(10001);

        for (int i = 0; i < 10001; ++i) {
            largeArray.push_back(static_cast<int>(std::floor(10000 * static_cast<double>(rand()) / RAND_MAX)));
        }

        double medianLargeArray = findMedian(largeArray);
        REQUIRE(typeid(medianLargeArray) == typeid(double)); // Check if the median is a number
    }

    SECTION("should return 3 for an array with odd number of elements") {
        std::vector<int> arr1 = {3, 1, 4, 1, 5, 9, 2};
        double median1 = findMedian(arr1);
        REQUIRE(median1 == 3);
    }

    SECTION("should return 6 for an array with even number of elements") {
        std::vector<int> arr2 = {10, 2, 3, 5, 7, 8};
        double median2 = findMedian(arr2);
        REQUIRE(median2 == 6);
    }

    SECTION("should return 2 for an array with duplicate elements") {
        std::vector<int> arr3 = {1, 2, 2, 2, 3};
        double median3 = findMedian(arr3);
        REQUIRE(median3 == 2);
    }

    SECTION("should return 0 for an array with negative and positive numbers") {
        std::vector<int> arr4 = {-5, -10, 0, 5, 10};
        double median4 = findMedian(arr4);
        REQUIRE(median4 == 0);
    }

    SECTION("should return the only element for an array with a single element") {
        std::vector<int> arr5 = {42};
        double median5 = findMedian(arr5);
        REQUIRE(median5 == 42);
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Catch2 Header**: Include the Catch2 header file.
2. **Function Definition**: The `findMedian` function takes a reference to a vector of integers and returns the median as a `double`.
3. **Test Cases**:
   - Each `SECTION` within the `TEST_CASE` defines a specific test case.
   - The test cases cover various scenarios, including large arrays, odd and even numbers of elements, duplicate elements, and negative numbers.
   - `REQUIRE` is used to assert the expected conditions.

### Running the Tests:
To run the tests, you need to compile your code with Catch2 support. Here’s an example of how to set up your build system (e.g., CMake):

#### CMake Example:
```cmake
cmake_minimum_required(VERSION 3.10)
project(MedianFinder)

# Add Catch2
include(FetchContent)
FetchContent_Declare(
    catch2
    GIT_REPOSITORY https://github.com/catchorg/Catch2.git
    GIT_TAG v2.13.8
)
FetchContent_MakeAvailable(catch2)

add_executable(MedianFinder main.cpp)

target_link_libraries(MedianFinder PRIVATE catch2)
```

This setup ensures that your project includes and links against Catch2, allowing you to run the tests.