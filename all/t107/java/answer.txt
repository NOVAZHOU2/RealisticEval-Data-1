Sure! Hereâ€™s the equivalent Java code for finding the median of an array of numbers:

```java
import java.util.Arrays;

public class MedianFinder {

    /**
     * Finds the median of a given array of numbers.
     *
     * @param arr The array of numbers to find the median of.
     * @return The median of the array.
     */
    public static double findMedian(int[] arr) {
        // Sort the array in ascending order
        Arrays.sort(arr);

        int n = arr.length;
        int midIndex = n / 2;

        // Determine if the array length is even or odd and return the median
        if (n % 2 == 0) {
            // Even number of elements: average the two middle elements
            return (arr[midIndex - 1] + arr[midIndex]) / 2.0;
        } else {
            // Odd number of elements: return the middle element
            return arr[midIndex];
        }
    }

    public static void main(String[] args) {
        // Example usage with a large array
        int[] largeArray = new int[10001];
        for (int i = 0; i < largeArray.length; i++) {
            largeArray[i] = (int) (Math.random() * 10000);
        }

        double median = findMedian(largeArray);
        System.out.println("Median: " + median);
    }
}
```

### Explanation:
1. **Sorting**: `Arrays.sort(arr)` is used to sort the array in ascending order.
2. **Median Calculation**:
   - If the length of the array is even, it calculates the average of the two middle elements.
   - If the length of the array is odd, it returns the middle element.
3. **Example Usage**:
   - A large array of 10,001 elements is created and filled with random numbers between 0 and 9999.
   - The `findMedian` method is called with this array, and the result is printed.

This should work similarly to your JavaScript code.