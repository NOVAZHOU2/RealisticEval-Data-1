Hereâ€™s the equivalent test code in JavaScript using the Jest framework, converted from the provided C++ Catch2 test cases:

```javascript
describe("minChangesToSymmetric function", () => {

    test("Already Symmetric Matrix", () => {
        const matrix = [
            ['a', 'b', 'c'],
            ['b', 'e', 'f'],
            ['c', 'f', 'i']
        ];
        expect(minChangesToSymmetric(matrix)).toBe(0);
    });

    test("One Change Needed", () => {
        const matrix = [
            ['a', 'b', 'c'],
            ['d', 'e', 'f'],
            ['c', 'h', 'i']
        ];
        expect(minChangesToSymmetric(matrix)).toBe(2);
    });

    test("All Different Elements", () => {
        const matrix = [
            ['a', 'b', 'c'],
            ['d', 'e', 'f'],
            ['g', 'h', 'i']
        ];
        expect(minChangesToSymmetric(matrix)).toBe(3);
    });

    test("Large Symmetric Matrix", () => {
        const matrix = [
            ['a', 'b', 'c', 'd'],
            ['b', 'e', 'f', 'g'],
            ['c', 'f', 'h', 'i'],
            ['d', 'g', 'i', 'j']
        ];
        expect(minChangesToSymmetric(matrix)).toBe(0);
    });

    test("Multiple Changes Needed", () => {
        const matrix = [
            ['a', 'x', 'c', 'd'],
            ['y', 'e', 'f', 'g'],
            ['z', 'h', 'i', 'j'],
            ['d', 'g', 'k', 'l']
        ];
        expect(minChangesToSymmetric(matrix)).toBe(4);
    });
});
```

### Key Differences and Adaptations:
1. **Test Structure**: The `TEST_CASE` macro is replaced with `describe`, and `SECTION` is replaced with individual `test` calls in Jest.
2. **Assertions**: The C++ `REQUIRE` assertion is replaced with Jest's `expect(...).toBe(...)` for value checking.
3. **Matrix Declaration**: The array initialization syntax remains similar, but it's tailored for JavaScript's array format.

This Jest test suite will verify the functionality of the `minChangesToSymmetric` function in a manner consistent with the original C++ tests.