Here's the TypeScript equivalent of the provided C++ code, ensuring that the logic and functionality remain the same while adapting to TypeScript conventions:

```typescript
function minChangesToSymmetric(matrix: string[][]): number {
    const n: number = matrix.length;
    let minChanges: number = 0;

    // Traverse only the upper triangle of the matrix, excluding the diagonal
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            // If the corresponding elements are not equal, they need to be changed
            if (matrix[i][j] !== matrix[j][i]) {
                minChanges++;
                // Optionally, you can change matrix[i][j] to matrix[j][i] or vice versa to make it symmetric
                // Uncomment the line below if you want to actually modify the matrix
                // matrix[i][j] = matrix[j][i];
            }
        }
    }

    return minChanges;
}
```

### Key Changes:

1. **Type Annotations**: TypeScript uses type annotations (e.g., `string[][]` for a 2D array of strings).
2. **Variable Declarations**: Used `const` for constants and `let` for variables that can change, aligning with best practices in TypeScript.
3. **Equality Operators**: Used strict equality `!==` instead of `!=` to ensure type checking. 

You can call this function with a 2D array of strings (representing characters) to determine the minimum changes needed to make the matrix symmetric.