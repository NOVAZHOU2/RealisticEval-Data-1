Certainly! Here is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`.

### Java Code:

```java
import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class Tester {

    @Test
    public void testZeroRotation() {
        // Test with zero rotation for all axes
        double[][] R = eulerToRotationMatrix(0, 0, 0);
        double[][] expected = {
            {1, 0, 0},
            {0, 1, 0},
            {0, 0, 1}
        };
        assertArrayEquals(expected, R, 1e-6);
    }

    @Test
    public void testRotationAboutX() {
        // Test rotation about the x-axis
        double[][] R = eulerToRotationMatrix(90, 0, 0);
        double[][] expected = {
            {1, 0, 0},
            {0, 0, -1},
            {0, 1, 0}
        };
        assertArrayEquals(expected, R, 1e-6);
    }

    @Test
    public void testRotationAboutY() {
        // Test rotation about the y-axis
        double[][] R = eulerToRotationMatrix(90, 0, 0);
        double[][] expected = {
            {0, 0, 1},
            {0, 1, 0},
            {-1, 0, 0}
        };
        assertArrayEquals(expected, R, 1e-6);
    }

    @Test
    public void testRotationAboutZ() {
        // Test rotation about the z-axis
        double[][] R = eulerToRotationMatrix(0, 0, 90);
        double[][] expected = {
            {0, -1, 0},
            {1, 0, 0},
            {0, 0, 1}
        };
        assertArrayEquals(expected, R, 1e-6);
    }

    @Test
    public void testCombinedRotation() {
        // Test combined rotation
        double[][] R = eulerToRotationMatrix(30, 45, 60);
        double[][] expected = {
            {0.35355339, -0.5732233, 0.73919892},
            {0.61237244, 0.73919892, 0.28033009},
            {-0.70710678, 0.35355339, 0.61237244}
        };
        assertArrayEquals(expected, R, 1e-5);
    }

    // Helper method to perform matrix multiplication
    private static double[][] multiplyMatrices(double[][] a, double[][] b) {
        int rowsA = a.length;
        int colsA = a[0].length;
        int rowsB = b.length;
        int colsB = b[0].length;

        if (colsA != rowsB) {
            throw new IllegalArgumentException("The number of columns in the first matrix must equal the number of rows in the second matrix.");
        }

        double[][] result = new double[rowsA][colsB];

        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                for (int k = 0; k < colsA; k++) {
                    result[i][j] += a[i][k] * b[k][j];
                }
            }
        }

        return result;
    }

    // Method to convert Euler angles to a rotation matrix
    private static double[][] eulerToRotationMatrix(double roll, double pitch, double yaw) {
        // Convert degrees to radians
        roll = Math.toRadians(roll);
        pitch = Math.toRadians(pitch);
        yaw = Math.toRadians(yaw);

        // Rotation matrix around x-axis (roll)
        double[][] Rx = {
            {1, 0, 0},
            {0, Math.cos(roll), -Math.sin(roll)},
            {0, Math.sin(roll), Math.cos(roll)}
        };

        // Rotation matrix around y-axis (pitch)
        double[][] Ry = {
            {Math.cos(pitch), 0, Math.sin(pitch)},
            {0, 1, 0},
            {-Math.sin(pitch), 0, Math.cos(pitch)}
        };

        // Rotation matrix around z-axis (yaw)
        double[][] Rz = {
            {Math.cos(yaw), -Math.sin(yaw), 0},
            {Math.sin(yaw), Math.cos(yaw), 0},
            {0, 0, 1}
        };

        // Combined rotation matrix, R = Rz * Ry * Rx
        double[][] R = multiplyMatrices(multiplyMatrices(Rz, Ry), Rx);

        return R;
    }

    // Custom assertArrayEquals method to compare double arrays with a tolerance
    private static void assertArrayEquals(double[][] expected, double[][] actual, double delta) {
        assertEquals(expected.length, actual.length, "Arrays have different lengths");

        for (int i = 0; i < expected.length; i++) {
            assertEquals(expected[i].length, actual[i].length, "Arrays have different lengths at index " + i);

            for (int j = 0; j < expected[i].length; j++) {
                assertEquals(expected[i][j], actual[i][j], delta, "Values differ at index [" + i + "][" + j + "]");
            }
        }
    }
}
```

### Explanation:
1. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.
2. **Assertion Methods**: The `assertArrayEquals` method is used to compare double arrays with a specified tolerance (`delta`). This method is implemented to handle the comparison of double arrays.
3. **Helper Methods**: The `multiplyMatrices` method is included to perform matrix multiplication, and the `eulerToRotationMatrix` method is defined to calculate the rotation matrix.
4. **Custom Assertion Method**: A custom `assertArrayEquals` method is defined to compare double arrays with a tolerance, ensuring that floating-point comparisons are handled correctly.

This Java code preserves the functionality and logic of the original Python unittest class while adhering to Java's syntax and best practices.