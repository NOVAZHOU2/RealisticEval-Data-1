Here is the equivalent Java code with the same functionality and comments:

```java
import org.apache.commons.math3.geometry.euclidean.threed.Rotation;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

public class Main {
    /**
     * Convert Euler angles (roll, pitch, yaw) to a rotation matrix.
     *
     * @param roll  Rotation around the x-axis in degrees.
     * @param pitch Rotation around the y-axis in degrees.
     * @param yaw   Rotation around the z-axis in degrees.
     * @return A 3x3 rotation matrix.
     */
    public static double[][] eulerToRotationMatrix(double roll, double pitch, double yaw) {
        // Convert degrees to radians
        double rollRad = Math.toRadians(roll);
        double pitchRad = Math.toRadians(pitch);
        double yawRad = Math.toRadians(yaw);

        // Create rotation vectors for each axis
        Vector3D xAxis = new Vector3D(1, 0, 0);
        Vector3D yAxis = new Vector3D(0, 1, 0);
        Vector3D zAxis = new Vector3D(0, 0, 1);

        // Create rotations for each axis
        Rotation rollRot = new Rotation(xAxis, rollRad, true);
        Rotation pitchRot = new Rotation(yAxis, pitchRad, true);
        Rotation yawRot = new Rotation(zAxis, yawRad, true);

        // Combine rotations into one transformation
        Rotation combinedRot = yawRot.applyTo(pitchRot.applyTo(rollRot));

        // Get the rotation matrix from the combined rotation
        double[][] rotationMatrix = new double[3][3];
        rotationMatrix[0] = combinedRot.getDirection().toArray();
        rotationMatrix[1] = combinedRot.getDirection().crossProduct(Vector3D.PLUS_K).toArray();
        rotationMatrix[2] = Vector3D.PLUS_K.toArray();

        return rotationMatrix;
    }
}
```

This Java code uses the Apache Commons Math library to handle rotations and vector operations. Make sure you have the Apache Commons Math library included in your project dependencies. The `eulerToRotationMatrix` function converts Euler angles to a 3x3 rotation matrix, similar to the Python function.