Certainly! Below is the equivalent TypeScript test class using Jest. This includes the necessary imports, type annotations, and Jest assertions to match the functionality and logic of the provided Python unittest class.

First, ensure you have Jest and the necessary dependencies installed:

```bash
npm install --save-dev jest @types/jest mathjs
```

Then, configure Jest in your project by adding a `jest.config.js` file if you haven't already:

```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
};
```

Now, here is the TypeScript code for the test class:

```typescript
import { Matrix, math } from 'mathjs';

/**
 * Convert Euler angles (roll, pitch, yaw) to a rotation matrix.
 *
 * @param roll - Rotation around the x-axis in degrees.
 * @param pitch - Rotation around the y-axis in degrees.
 * @param yaw - Rotation around the z-axis in degrees.
 * @returns A 3x3 rotation matrix.
 */
function eulerToRotationMatrix(roll: number, pitch: number, yaw: number): Matrix {
    // Convert degrees to radians
    const rollRad = math.unit(roll, 'deg').toNumber('rad');
    const pitchRad = math.unit(pitch, 'deg').toNumber('rad');
    const yawRad = math.unit(yaw, 'deg').toNumber('rad');

    // Rotation matrix around x-axis (roll)
    const Rx = math.matrix([
        [1, 0, 0],
        [0, math.cos(rollRad), -math.sin(rollRad)],
        [0, math.sin(rollRad), math.cos(rollRad)]
    ]);

    // Rotation matrix around y-axis (pitch)
    const Ry = math.matrix([
        [math.cos(pitchRad), 0, math.sin(pitchRad)],
        [0, 1, 0],
        [-math.sin(pitchRad), 0, math.cos(pitchRad)]
    ]);

    // Rotation matrix around z-axis (yaw)
    const Rz = math.matrix([
        [math.cos(yawRad), -math.sin(yawRad), 0],
        [math.sin(yawRad), math.cos(yawRad), 0],
        [0, 0, 1]
    ]);

    // Combined rotation matrix, R = Rz * Ry * Rx
    const R = math.multiply(Rz, math.multiply(Ry, Rx));

    return R;
}

describe('TestEulerToRotationMatrix', () => {
    it('test_zero_rotation', () => {
        // Test with zero rotation for all axes
        const R = eulerToRotationMatrix(0, 0, 0);
        const identityMatrix = math.matrix([
            [1, 0, 0],
            [0, 1, 0],
            [0, 0, 1]
        ]);
        expect(math.equal(R, identityMatrix)).toBe(true);
    });

    it('test_rotation_about_x', () => {
        // Test rotation about the x-axis
        const R = eulerToRotationMatrix(90, 0, 0);
        const expected = math.matrix([
            [1, 0, 0],
            [0, 0, -1],
            [0, 1, 0]
        ]);
        expect(math.equal(R, expected)).toBe(true);
    });

    it('test_rotation_about_y', () => {
        // Test rotation about the y-axis
        const R = eulerToRotationMatrix(0, 90, 0);
        const expected = math.matrix([
            [0, 0, 1],
            [0, 1, 0],
            [-1, 0, 0]
        ]);
        expect(math.equal(R, expected)).toBe(true);
    });

    it('test_rotation_about_z', () => {
        // Test rotation about the z-axis
        const R = eulerToRotationMatrix(0, 0, 90);
        const expected = math.matrix([
            [0, -1, 0],
            [1, 0, 0],
            [0, 0, 1]
        ]);
        expect(math.equal(R, expected)).toBe(true);
    });

    it('test_combined_rotation', () => {
        // Test combined rotation
        const R = eulerToRotationMatrix(30, 45, 60);
        const expected = math.matrix([
            [0.35355339, -0.5732233, 0.73919892],
            [0.61237244, 0.73919892, 0.28033009],
            [-0.70710678, 0.35355339, 0.61237244]
        ]);
        expect(math.equal(R, expected, { relTol: 1e-5 })).toBe(true);
    });
});

// Example usage
const roll = 45; // Degrees
const pitch = 30; // Degrees
const yaw = 60; // Degrees

const rotationMatrix = eulerToRotationMatrix(roll, pitch, yaw);
console.log(rotationMatrix.toString());
```

### Explanation:
1. **Imports**: We import `Matrix` and `math` from the `mathjs` library to handle matrix operations and trigonometric functions.
2. **Function Definition**: The `eulerToRotationMatrix` function takes three parameters (`roll`, `pitch`, `yaw`) and returns a 3x3 rotation matrix.
3. **Jest Test Suite**: We use `describe` to define a test suite named `TestEulerToRotationMatrix`.
4. **Test Cases**:
   - `test_zero_rotation`: Tests with zero rotation for all axes.
   - `test_rotation_about_x`: Tests rotation about the x-axis.
   - `test_rotation_about_y`: Tests rotation about the y-axis.
   - `test_rotation_about_z`: Tests rotation about the z-axis.
   - `test_combined_rotation`: Tests combined rotation.
5. **Assertions**: We use `expect` and `math.equal` to compare the resulting matrices with the expected matrices. The `relTol` parameter is used to specify the relative tolerance for floating-point comparisons.

This TypeScript code preserves the original functionality and logic of the Python unittest class while adapting it to Jest's testing framework and using `mathjs` for matrix operations.