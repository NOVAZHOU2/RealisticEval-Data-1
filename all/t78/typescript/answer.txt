Sure! Here's how you can convert the given Python function to TypeScript:

```typescript
function eulerToRotationMatrix(roll: number, pitch: number, yaw: number): number[][] {
    /**
     * Convert Euler angles (roll, pitch, yaw) to a rotation matrix.
     *
     * @param {number} roll - Rotation around the x-axis in degrees.
     * @param {number} pitch - Rotation around the y-axis in degrees.
     * @param {number} yaw - Rotation around the z-axis in degrees.
     * @returns {number[][]} - A 3x3 rotation matrix.
     */

    // Convert degrees to radians
    const deg2rad = (deg: number) => deg * (Math.PI / 180);
    roll = deg2rad(roll);
    pitch = deg2rad(pitch);
    yaw = deg2rad(yaw);

    // Calculate the rotation matrices for each axis
    const Rx = [
        [1, 0, 0],
        [0, Math.cos(roll), -Math.sin(roll)],
        [0, Math.sin(roll), Math.cos(roll)]
    ];

    const Ry = [
        [Math.cos(pitch), 0, Math.sin(pitch)],
        [0, 1, 0],
        [-Math.sin(pitch), 0, Math.cos(pitch)]
    ];

    const Rz = [
        [Math.cos(yaw), -Math.sin(yaw), 0],
        [Math.sin(yaw), Math.cos(yaw), 0],
        [0, 0, 1]
    ];

    // Multiply the rotation matrices
    const R = multiplyMatrices(Rz, multiplyMatrices(Ry, Rx));

    return R;
}

// Helper function to multiply two matrices
function multiplyMatrices(A: number[][], B: number[][]): number[][] {
    const result: number[][] = [];
    for (let i = 0; i < A.length; i++) {
        result[i] = [];
        for (let j = 0; j < B[0].length; j++) {
            let sum = 0;
            for (let k = 0; k < B.length; k++) {
                sum += A[i][k] * B[k][j];
            }
            result[i][j] = sum;
        }
    }
    return result;
}
```

This TypeScript code defines a function `eulerToRotationMatrix` that converts Euler angles (roll, pitch, yaw) to a 3x3 rotation matrix. The helper function `multiplyMatrices` is used to perform matrix multiplication.