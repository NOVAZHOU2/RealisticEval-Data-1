Certainly! Below is the equivalent TypeScript code for the given Python function, including proper type annotations and JSDoc-style documentation comments. We will use the `mathjs` library for matrix operations and trigonometric functions.

First, you need to install the `mathjs` package:

```bash
npm install mathjs
```

Here is the TypeScript code:

```typescript
import { Matrix, math } from 'mathjs';

/**
 * Convert Euler angles (roll, pitch, yaw) to a rotation matrix.
 *
 * @param roll - Rotation around the x-axis in degrees.
 * @param pitch - Rotation around the y-axis in degrees.
 * @param yaw - Rotation around the z-axis in degrees.
 * @returns A 3x3 rotation matrix.
 */
function eulerToRotationMatrix(roll: number, pitch: number, yaw: number): Matrix {
    // Convert degrees to radians
    const rollRad = math.unit(roll, 'deg').toNumber('rad');
    const pitchRad = math.unit(pitch, 'deg').toNumber('rad');
    const yawRad = math.unit(yaw, 'deg').toNumber('rad');

    // Rotation matrix around x-axis (roll)
    const Rx = math.matrix([
        [1, 0, 0],
        [0, math.cos(rollRad), -math.sin(rollRad)],
        [0, math.sin(rollRad), math.cos(rollRad)]
    ]);

    // Rotation matrix around y-axis (pitch)
    const Ry = math.matrix([
        [math.cos(pitchRad), 0, math.sin(pitchRad)],
        [0, 1, 0],
        [-math.sin(pitchRad), 0, math.cos(pitchRad)]
    ]);

    // Rotation matrix around z-axis (yaw)
    const Rz = math.matrix([
        [math.cos(yawRad), -math.sin(yawRad), 0],
        [math.sin(yawRad), math.cos(yawRad), 0],
        [0, 0, 1]
    ]);

    // Combined rotation matrix, R = Rz * Ry * Rx
    const R = math.multiply(Rz, math.multiply(Ry, Rx));

    return R;
}

// Example usage
const roll = 45; // Degrees
const pitch = 30; // Degrees
const yaw = 60; // Degrees

const rotationMatrix = eulerToRotationMatrix(roll, pitch, yaw);
console.log(rotationMatrix.toString());
```

### Explanation:
1. **Imports**: We import `Matrix` and `math` from the `mathjs` library to handle matrix operations and trigonometric functions.
2. **Function Definition**: The `eulerToRotationMatrix` function takes three parameters (`roll`, `pitch`, `yaw`) and returns a 3x3 rotation matrix.
3. **JSDoc Documentation**: The function is documented using JSDoc-style comments, which provide clear descriptions of the parameters and return value.
4. **Conversion to Radians**: We use `math.unit` to convert degrees to radians.
5. **Rotation Matrices**: We create matrices for each axis using the `math.matrix` function.
6. **Combined Rotation Matrix**: We multiply the matrices together using `math.multiply`.
7. **Example Usage**: An example usage is provided at the end to demonstrate how to call the function and print the resulting rotation matrix.

This TypeScript code preserves the original functionality and structure of the Python code while adapting it to TypeScript's static type system and using `mathjs` for matrix operations.