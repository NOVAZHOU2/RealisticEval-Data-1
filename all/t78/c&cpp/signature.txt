Certainly! Below is the equivalent C++ code for the given Python function, including the conversion of function signatures, type annotations, and comments. The code uses the `<cmath>` library for trigonometric functions and the `<Eigen>` library for handling matrices.

### C++ Code

```cpp
#include <iostream>
#include <cmath> // For sin, cos, and M_PI
#include <Eigen/Dense> // For matrix operations

using Eigen::Matrix3f; // Define a 3x3 float matrix

/**
 * Convert Euler angles (roll, pitch, yaw) to a rotation matrix.
 *
 * @param roll The rotation around the x-axis in degrees.
 * @param pitch The rotation around the y-axis in degrees.
 * @param yaw The rotation around the z-axis in degrees.
 *
 * @return A 3x3 rotation matrix.
 */
Matrix3f euler_to_rotation_matrix(float roll, float pitch, float yaw) {
    // Convert degrees to radians
    float roll_rad = roll * M_PI / 180.0f;
    float pitch_rad = pitch * M_PI / 180.0f;
    float yaw_rad = yaw * M_PI / 180.0f;

    // Rotation matrix around x-axis (roll)
    Matrix3f Rx;
    Rx << 1, 0, 0,
          0, std::cos(roll_rad), -std::sin(roll_rad),
          0, std::sin(roll_rad), std::cos(roll_rad);

    // Rotation matrix around y-axis (pitch)
    Matrix3f Ry;
    Ry << std::cos(pitch_rad), 0, std::sin(pitch_rad),
          0, 1, 0,
          -std::sin(pitch_rad), 0, std::cos(pitch_rad);

    // Rotation matrix around z-axis (yaw)
    Matrix3f Rz;
    Rz << std::cos(yaw_rad), -std::sin(yaw_rad), 0,
          std::sin(yaw_rad), std::cos(yaw_rad), 0,
          0, 0, 1;

    // Combined rotation matrix, R = Rz * Ry * Rx
    Matrix3f R = Rz * Ry * Rx;

    return R;
}

int main() {
    // Example usage
    float roll = 45.0f; // Degrees
    float pitch = 30.0f; // Degrees
    float yaw = 60.0f; // Degrees

    Matrix3f rotation_matrix = euler_to_rotation_matrix(roll, pitch, yaw);

    std::cout << "Rotation Matrix:\n" << rotation_matrix << std::endl;

    return 0;
}
```

### Explanation:
1. **Include Libraries**: The code includes `<cmath>` for trigonometric functions and `<Eigen/Dense>` for matrix operations.
2. **Type Definitions**: `Matrix3f` is defined using `Eigen::Matrix3f`, which represents a 3x3 matrix with float elements.
3. **Function Definition**: The function `euler_to_rotation_matrix` takes three floats representing Euler angles in degrees and returns a 3x3 rotation matrix.
4. **Comments and Documentation**:
   - Multi-line comments are used for the function documentation.
   - Single-line comments are used for inline comments.
5. **Conversion to Radians**: The Euler angles are converted from degrees to radians.
6. **Rotation Matrices**: Individual rotation matrices around the x, y, and z axes are created using Eigen's matrix construction syntax.
7. **Combined Rotation Matrix**: The combined rotation matrix is computed by multiplying the individual rotation matrices.
8. **Example Usage**: In the `main` function, an example is provided to demonstrate how to use the `euler_to_rotation_matrix` function.

### CMake Configuration (Optional)
If you are using CMake to build your project, you can add the following lines to your `CMakeLists.txt` file to ensure that the Eigen library is linked correctly:

```cmake
cmake_minimum_required(VERSION 3.10)
project(EulerToRotationMatrix)

# Find Eigen3
find_package(Eigen3 REQUIRED)

# Add executable
add_executable(EulerToRotationMatrix main.cpp)

# Link Eigen3
target_include_directories(EulerToRotationMatrix PRIVATE ${EIGEN3_INCLUDE_DIRS})
```

This configuration ensures that the Eigen headers are included correctly during compilation.