Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The test cases are converted to use Catch2 assertions and the Eigen library for matrix operations.

### C++ Code with Catch2 and Eigen

1. **Include Required Libraries**
2. **Define the Test Class**
3. **Implement the Tests**

Hereâ€™s the complete code:

```cpp
#include <iostream>
#include <cmath>
#include <Eigen/Dense>
#include <catch2/catch_test_macros.hpp>

using Eigen::Matrix3f; // Define a 3x3 float matrix

/**
 * Convert Euler angles (roll, pitch, yaw) to a rotation matrix.
 *
 * @param roll The rotation around the x-axis in degrees.
 * @param pitch The rotation around the y-axis in degrees.
 * @param yaw The rotation around the z-axis in degrees.
 *
 * @return A 3x3 rotation matrix.
 */
Matrix3f euler_to_rotation_matrix(float roll, float pitch, float yaw) {
    // Convert degrees to radians
    float roll_rad = roll * M_PI / 180.0f;
    float pitch_rad = pitch * M_PI / 180.0f;
    float yaw_rad = yaw * M_PI / 180.0f;

    // Rotation matrix around x-axis (roll)
    Matrix3f Rx;
    Rx << 1, 0, 0,
          0, std::cos(roll_rad), -std::sin(roll_rad),
          0, std::sin(roll_rad), std::cos(roll_rad);

    // Rotation matrix around y-axis (pitch)
    Matrix3f Ry;
    Ry << std::cos(pitch_rad), 0, std::sin(pitch_rad),
          0, 1, 0,
          -std::sin(pitch_rad), 0, std::cos(pitch_rad);

    // Rotation matrix around z-axis (yaw)
    Matrix3f Rz;
    Rz << std::cos(yaw_rad), -std::sin(yaw_rad), 0,
          std::sin(yaw_rad), std::cos(yaw_rad), 0,
          0, 0, 1;

    // Combined rotation matrix, R = Rz * Ry * Rx
    Matrix3f R = Rz * Ry * Rx;

    return R;
}

TEST_CASE("Test Euler to Rotation Matrix") {
    SECTION("Zero Rotation") {
        // Test with zero rotation for all axes
        Matrix3f R = euler_to_rotation_matrix(0, 0, 0);
        Matrix3f expected = Matrix3f::Identity();
        REQUIRE_THAT(R, Catch::Approx(expected).epsilon(1e-6));
    }

    SECTION("Rotation About X") {
        // Test rotation about the x-axis
        Matrix3f R = euler_to_rotation_matrix(90, 0, 0);
        Matrix3f expected = Matrix3f::Zero();
        expected << 1, 0, 0,
                    0, 0, -1,
                    0, 1, 0;
        REQUIRE_THAT(R, Catch::Approx(expected).epsilon(1e-6));
    }

    SECTION("Rotation About Y") {
        // Test rotation about the y-axis
        Matrix3f R = euler_to_rotation_matrix(0, 90, 0);
        Matrix3f expected = Matrix3f::Zero();
        expected << 0, 0, 1,
                    0, 1, 0,
                    -1, 0, 0;
        REQUIRE_THAT(R, Catch::Approx(expected).epsilon(1e-6));
    }

    SECTION("Rotation About Z") {
        // Test rotation about the z-axis
        Matrix3f R = euler_to_rotation_matrix(0, 0, 90);
        Matrix3f expected = Matrix3f::Zero();
        expected << 0, -1, 0,
                    1, 0, 0,
                    0, 0, 1;
        REQUIRE_THAT(R, Catch::Approx(expected).epsilon(1e-6));
    }

    SECTION("Combined Rotation") {
        // Test combined rotation
        Matrix3f R = euler_to_rotation_matrix(30, 45, 60);
        Matrix3f expected = Matrix3f::Zero();
        expected << 0.35355339, -0.5732233, 0.73919892,
                    0.61237244, 0.73919892, 0.28033009,
                    -0.70710678, 0.35355339, 0.61237244;
        REQUIRE_THAT(R, Catch::Approx(expected).epsilon(1e-5));
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Include Libraries**:
   - `<iostream>` for basic I/O.
   - `<cmath>` for trigonometric functions.
   - `<Eigen/Dense>` for matrix operations.
   - `<catch2/catch_test_macros.hpp>` for Catch2 testing framework.

2. **Type Definitions**:
   - `Matrix3f` is defined using `Eigen::Matrix3f`, which represents a 3x3 matrix with float elements.

3. **Function Definition**:
   - `euler_to_rotation_matrix` takes three floats representing Euler angles in degrees and returns a 3x3 rotation matrix.

4. **Test Class**:
   - The `TEST_CASE` macro defines a test case.
   - Each `SECTION` within the test case defines a specific test scenario.
   - Assertions are performed using `REQUIRE_THAT` with `Catch::Approx` to compare floating-point values with a specified epsilon value.

5. **Main Function**:
   - The `main` function initializes and runs the Catch2 test session.

### CMake Configuration (Optional)
If you are using CMake to build your project, you can add the following lines to your `CMakeLists.txt` file to ensure that the Eigen and Catch2 libraries are linked correctly:

```cmake
cmake_minimum_required(VERSION 3.10)
project(EulerToRotationMatrix)

# Find Eigen3
find_package(Eigen3 REQUIRED)

# Find Catch2
find_package(Catch2 REQUIRED)

# Add executable
add_executable(EulerToRotationMatrix main.cpp)

# Link Eigen3
target_include_directories(EulerToRotationMatrix PRIVATE ${EIGEN3_INCLUDE_DIRS})

# Link Catch2
target_link_libraries(EulerToRotationMatrix PRIVATE Catch2::Catch2)
```

This configuration ensures that the Eigen and Catch2 headers and libraries are included correctly during compilation.