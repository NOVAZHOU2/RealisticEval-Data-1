Sure! Below is the equivalent C++ code for converting Euler angles (roll, pitch, yaw) to a rotation matrix using standard libraries and mathematical functions.

```cpp
#include <iostream>
#include <cmath>

// Function to convert degrees to radians
double deg2rad(double degree) {
    return degree * M_PI / 180.0;
}

// Function to create a 3x3 identity matrix
void identityMatrix(double matrix[3][3]) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            matrix[i][j] = (i == j) ? 1.0 : 0.0;
        }
    }
}

// Function to multiply two 3x3 matrices
void multiplyMatrices(const double matrixA[3][3], const double matrixB[3][3], double result[3][3]) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            result[i][j] = 0.0;
            for (int k = 0; k < 3; ++k) {
                result[i][j] += matrixA[i][k] * matrixB[k][j];
            }
        }
    }
}

// Function to convert Euler angles to a rotation matrix
void eulerToRotationMatrix(double roll, double pitch, double yaw, double rotationMatrix[3][3]) {
    // Convert degrees to radians
    roll = deg2rad(roll);
    pitch = deg2rad(pitch);
    yaw = deg2rad(yaw);

    // Create individual rotation matrices for each axis
    double Rx[3][3];
    double Ry[3][3];
    double Rz[3][3];

    identityMatrix(Rx);
    identityMatrix(Ry);
    identityMatrix(Rz);

    Rx[1][1] = cos(roll);
    Rx[1][2] = -sin(roll);
    Rx[2][1] = sin(roll);
    Rx[2][2] = cos(roll);

    Ry[0][0] = cos(pitch);
    Ry[0][2] = sin(pitch);
    Ry[2][0] = -sin(pitch);
    Ry[2][2] = cos(pitch);

    Rz[0][0] = cos(yaw);
    Rz[0][1] = -sin(yaw);
    Rz[1][0] = sin(yaw);
    Rz[1][1] = cos(yaw);

    // Combine the rotations
    double temp[3][3];
    multiplyMatrices(Rx, Ry, temp);
    multiplyMatrices(temp, Rz, rotationMatrix);
}

int main() {
    double roll = 30.0;
    double pitch = 45.0;
    double yaw = 60.0;

    double rotationMatrix[3][3];
    eulerToRotationMatrix(roll, pitch, yaw, rotationMatrix);

    std::cout << "Rotation Matrix:\n";
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            std::cout << rotationMatrix[i][j] << " ";
        }
        std::cout << "\n";
    }

    return 0;
}
```

### Explanation:
1. **deg2rad**: Converts degrees to radians.
2. **identityMatrix**: Initializes a 3x3 matrix to the identity matrix.
3. **multiplyMatrices**: Multiplies two 3x3 matrices.
4. **eulerToRotationMatrix**: Converts Euler angles to a rotation matrix using the individual rotation matrices for each axis (Rx, Ry, Rz).

This C++ code performs the same operations as the provided Python function but uses basic C++ syntax and libraries. The `main` function demonstrates how to use the `eulerToRotationMatrix` function.