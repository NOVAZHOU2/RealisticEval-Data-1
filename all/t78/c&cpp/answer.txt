Certainly! Below is the equivalent C++ code for converting Euler angles to a rotation matrix. This code uses the `<cmath>` library for trigonometric functions and the `<Eigen>` library for handling matrices, which is a popular C++ template library for linear algebra.

First, make sure you have Eigen installed. You can include it in your project by adding the Eigen header files.

Here's the C++ code:

```cpp
#include <iostream>
#include <cmath> // For sin, cos, and M_PI
#include <Eigen/Dense> // For matrix operations

using Eigen::Matrix3f; // Define a 3x3 float matrix

// Function to convert Euler angles (roll, pitch, yaw) to a rotation matrix
Matrix3f euler_to_rotation_matrix(float roll, float pitch, float yaw) {
    // Convert degrees to radians
    float roll_rad = roll * M_PI / 180.0f;
    float pitch_rad = pitch * M_PI / 180.0f;
    float yaw_rad = yaw * M_PI / 180.0f;

    // Rotation matrix around x-axis (roll)
    Matrix3f Rx;
    Rx << 1, 0, 0,
          0, std::cos(roll_rad), -std::sin(roll_rad),
          0, std::sin(roll_rad), std::cos(roll_rad);

    // Rotation matrix around y-axis (pitch)
    Matrix3f Ry;
    Ry << std::cos(pitch_rad), 0, std::sin(pitch_rad),
          0, 1, 0,
          -std::sin(pitch_rad), 0, std::cos(pitch_rad);

    // Rotation matrix around z-axis (yaw)
    Matrix3f Rz;
    Rz << std::cos(yaw_rad), -std::sin(yaw_rad), 0,
          std::sin(yaw_rad), std::cos(yaw_rad), 0,
          0, 0, 1;

    // Combined rotation matrix, R = Rz * Ry * Rx
    Matrix3f R = Rz * Ry * Rx;

    return R;
}

int main() {
    // Example usage
    float roll = 45.0f; // Degrees
    float pitch = 30.0f; // Degrees
    float yaw = 60.0f; // Degrees

    Matrix3f rotation_matrix = euler_to_rotation_matrix(roll, pitch, yaw);

    std::cout << "Rotation Matrix:\n" << rotation_matrix << std::endl;

    return 0;
}
```

### Explanation:
1. **Import Libraries**: The code includes `<cmath>` for trigonometric functions and `<Eigen/Dense>` for matrix operations.
2. **Type Definitions**: `Matrix3f` is defined using `Eigen::Matrix3f`, which represents a 3x3 matrix with float elements.
3. **Function Definition**: The function `euler_to_rotation_matrix` takes three floats representing Euler angles in degrees and returns a 3x3 rotation matrix.
4. **Conversion to Radians**: The Euler angles are converted from degrees to radians.
5. **Rotation Matrices**: Individual rotation matrices around the x, y, and z axes are created using Eigen's matrix construction syntax.
6. **Combined Rotation Matrix**: The combined rotation matrix is computed by multiplying the individual rotation matrices.
7. **Example Usage**: In the `main` function, an example is provided to demonstrate how to use the `euler_to_rotation_matrix` function.

Make sure to link against the Eigen library when compiling your program. If you're using a build system like CMake, you can add the following lines to your `CMakeLists.txt` file:

```cmake
find_package(Eigen3 REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR})
```

This will ensure that the Eigen headers are included correctly during compilation.