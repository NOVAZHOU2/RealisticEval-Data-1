Hereâ€™s the equivalent C++ code that mirrors the functionality of the provided Python code. It uses standard libraries for file handling and string manipulation, ensuring the logic and structure remain consistent:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>

void write_csv_to_file(const std::vector<std::string>& strings, const std::string& file_path) {
    /**
     * Formats a list of strings into a single-line CSV string and writes it to a specified file.
     *
     * @param strings: Vector of strings to be formatted into CSV.
     * @param file_path: The file path where the CSV string should be written.
     */

    // Join the list of strings into a single line CSV formatted string
    std::ostringstream csv_stream;
    for (size_t i = 0; i < strings.size(); ++i) {
        csv_stream << strings[i];
        if (i < strings.size() - 1) {
            csv_stream << ",";
        }
    }
    std::string csv_string = csv_stream.str();

    // Write the CSV string to the specified file
    try {
        std::ofstream file(file_path);
        if (!file) {
            throw std::ios_base::failure("Error opening file");
        }
        file << csv_string;
        file.close();
        std::cout << "CSV written to file: " << file_path << std::endl;
    } catch (const std::ios_base::failure& e) {
        std::cout << "Error writing to file: " << e.what() << std::endl;
    }
}
```

### Explanation:
1. **Includes and Namespaces**: We include necessary headers for input/output (`<iostream>`), file handling (`<fstream>`), string manipulations (`<string>`), and a string stream (`<sstream>`).
  
2. **Function Definition**: The function `write_csv_to_file` takes a vector of strings and a file path, similar to the Python function.

3. **CSV String Formation**: A `std::ostringstream` is used to concatenate the strings into a single CSV format. We handle the comma placement within a loop.

4. **File Writing**: We use `std::ofstream` to handle file writing. If the file cannot be opened, an exception is thrown.

5. **Error Handling**: We catch `std::ios_base::failure` to handle any file I/O errors, similar to how the Python code handles exceptions. 

This code maintains the original functionality while adhering to C++ conventions and idioms.