Here’s how you can convert the provided Python code into TypeScript while maintaining its functionality, structure, and logic:

```typescript
import * as fs from 'fs';

/**
 * Formats a list of strings into a single-line CSV string and writes it to a specified file.
 *
 * @param strings - Array of strings to be formatted into CSV.
 * @param filePath - The file path where the CSV string should be written.
 */
function writeCsvToFile(strings: string[], filePath: string): void {
    // Join the array of strings into a single line CSV formatted string
    const csvString = strings.join(',');

    // Write the CSV string to the specified file
    try {
        fs.writeFileSync(filePath, csvString);
        console.log(`CSV written to file: ${filePath}`);
    } catch (error) {
        console.error(`Error writing to file: ${error}`);
    }
}
```

### Key Differences Explained:
1. **Imports**: TypeScript uses the `import` statement for modules, in this case, importing `fs` for file system operations.
2. **Function Signature**: TypeScript explicitly defines types for parameters and the return type (`void`).
3. **File Writing**: Instead of using a context manager (`with` statement) like in Python, TypeScript uses `fs.writeFileSync()` for synchronous file writing.
4. **Error Handling**: Similar to Python’s `try-except`, TypeScript uses a `try-catch` block for error handling, but the syntax for logging errors is slightly different. 

This TypeScript function behaves similarly to the original Python function, writing a CSV formatted string to a specified file path.