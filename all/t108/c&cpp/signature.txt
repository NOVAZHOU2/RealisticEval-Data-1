Certainly! Here's the equivalent C++ code signature with the comments preserved, along with an example implementation that returns the sorted scores, names, and IDs in a structured format similar to the JavaScript code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>
#include <map>

// Define a structure to hold image data
struct ImageData {
    int score;
    std::string name;
    std::string id;
};

// Function to reorder the data based on scores
std::map<std::string, std::vector<std::string>> reorderData(
    const std::vector<int>& imageScores,
    const std::vector<std::string>& imageNames,
    const std::vector<std::string>& imageIDs)
{
    // Combine the scores, names, and IDs into a vector of ImageData structs
    std::vector<ImageData> imageData;
    for (size_t i = 0; i < imageScores.size(); ++i) {
        imageData.emplace_back(imageScores[i], imageNames[i], imageIDs[i]);
    }

    // Sort the vector of ImageData structs by score in ascending order
    std::sort(imageData.begin(), imageData.end(), [](const ImageData& a, const ImageData& b) {
        return a.score < b.score;
    });

    // Extract sorted scores, names, and IDs into separate vectors
    std::vector<int> resultScores;
    std::vector<std::string> resultNames;
    std::vector<std::string> resultIDs;

    for (const auto& data : imageData) {
        resultScores.push_back(data.score);
        resultNames.push_back(data.name);
        resultIDs.push_back(data.id);
    }

    // Create a map to return the sorted arrays
    std::map<std::string, std::vector<std::string>> result;
    result["resultScores"] = vector_to_string(resultScores);
    result["resultNames"] = resultNames;
    result["resultIDs"] = resultIDs;

    // Helper function to convert vector<int> to vector<string>
    std::vector<std::string> vector_to_string(const std::vector<int>& vec) {
        std::vector<std::string> strVec;
        for (int num : vec) {
            strVec.push_back(std::to_string(num));
        }
        return strVec;
    }

    // Return the sorted arrays
    return result;
}

// Example usage
int main() {
    std::vector<int> imageScores = {10, 5, 8};
    std::vector<std::string> imageNames = {"ImageA", "ImageB", "ImageC"};
    std::vector<std::string> imageIDs = {"ID1", "ID2", "ID3"};

    auto result = reorderData(imageScores, imageNames, imageIDs);

    // Print the sorted results
    std::cout << "Sorted Scores: ";
    for (const auto& score : result["resultScores"]) {
        std::cout << score << " ";
    }
    std::cout << "\nSorted Names: ";
    for (const auto& name : result["resultNames"]) {
        std::cout << name << " ";
    }
    std::cout << "\nSorted IDs: ";
    for (const auto& id : result["resultIDs"]) {
        std::cout << id << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **ImageData Struct**: A struct `ImageData` is defined to hold the score, name, and ID of each image.
2. **Combine Data**: The input vectors `imageScores`, `imageNames`, and `imageIDs` are combined into a vector of `ImageData` structs.
3. **Sort Data**: The vector of `ImageData` structs is sorted based on the `score` field using a lambda function.
4. **Extract Sorted Data**: Separate vectors are created to store the sorted scores, names, and IDs.
5. **Return Result**: The sorted scores, names, and IDs are returned in a `std::map<std::string, std::vector<std::string>>` format, similar to the JavaScript object.

The `vector_to_string` helper function converts the vector of integers to a vector of strings to match the JavaScript object format. This ensures that the output matches the expected format `{ resultScores, resultNames, resultIDs }`.