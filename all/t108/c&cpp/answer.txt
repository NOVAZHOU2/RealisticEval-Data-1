Sure! Here is the equivalent C++ code for sorting the images in ascending order based on their scores and returning the reordered image scores, names, and IDs:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>

// Define a structure to hold image data
struct ImageData {
    int score;
    std::string name;
    std::string id;
};

// Function to reorder the data based on scores
std::tuple<std::vector<int>, std::vector<std::string>, std::vector<std::string>> reorderData(
    const std::vector<int>& imageScores,
    const std::vector<std::string>& imageNames,
    const std::vector<std::string>& imageIDs)
{
    // Combine the scores, names, and IDs into a vector of ImageData structs
    std::vector<ImageData> imageData;
    for (size_t i = 0; i < imageScores.size(); ++i) {
        imageData.emplace_back(imageScores[i], imageNames[i], imageIDs[i]);
    }

    // Sort the vector of ImageData structs by score in ascending order
    std::sort(imageData.begin(), imageData.end(), [](const ImageData& a, const ImageData& b) {
        return a.score < b.score;
    });

    // Extract sorted scores, names, and IDs into separate vectors
    std::vector<int> resultScores;
    std::vector<std::string> resultNames;
    std::vector<std::string> resultIDs;

    for (const auto& data : imageData) {
        resultScores.push_back(data.score);
        resultNames.push_back(data.name);
        resultIDs.push_back(data.id);
    }

    // Return the sorted arrays
    return std::make_tuple(resultScores, resultNames, resultIDs);
}

// Example usage
int main() {
    std::vector<int> imageScores = {10, 5, 8};
    std::vector<std::string> imageNames = {"ImageA", "ImageB", "ImageC"};
    std::vector<std::string> imageIDs = {"ID1", "ID2", "ID3"};

    auto [sortedScores, sortedNames, sortedIDs] = reorderData(imageScores, imageNames, imageIDs);

    // Print the sorted results
    for (size_t i = 0; i < sortedScores.size(); ++i) {
        std::cout << "Score: " << sortedScores[i] << ", Name: " << sortedNames[i] << ", ID: " << sortedIDs[i] << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **ImageData Struct**: A struct `ImageData` is defined to hold the score, name, and ID of each image.
2. **Combine Data**: The input vectors `imageScores`, `imageNames`, and `imageIDs` are combined into a vector of `ImageData` structs.
3. **Sort Data**: The vector of `ImageData` structs is sorted based on the `score` field using a lambda function.
4. **Extract Sorted Data**: Separate vectors are created to store the sorted scores, names, and IDs.
5. **Return Result**: The sorted scores, names, and IDs are returned as a tuple.

This code should achieve the same functionality as the provided JavaScript code.