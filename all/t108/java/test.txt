Certainly! Here is the equivalent JUnit 4 test case for the `reorderData` method in Java:

```java
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Tester {

    private static final Map<String, Object> EMPTY_RESULT = new HashMap<>();

    @Before
    public void setUp() {
        // Initialize the empty result map for convenience
        EMPTY_RESULT.put("resultScores", new int[0]);
        EMPTY_RESULT.put("resultNames", new String[0]);
        EMPTY_RESULT.put("resultIDs", new String[0]);
    }

    @Test
    public void shouldReorderTheQuestionBasedOnScoresInAscendingOrder() {
        int[] imageScores = {90, 85, 95};
        String[] imageNames = {"image1.png", "image2.png", "image3.png"};
        String[] imageIDs = {"id1", "id2", "id3"};

        Map<String, Object> result = reorderData(imageScores, imageNames, imageIDs);

        assertEquals(Arrays.asList(85, 90, 95), result.get("resultScores"));
        assertEquals(Arrays.asList("image2.png", "image1.png", "image3.png"), result.get("resultNames"));
        assertEquals(Arrays.asList("id2", "id1", "id3"), result.get("resultIDs"));
    }

    @Test
    public void shouldReturnTheSameOrderIfScoresAreAlreadyInAscendingOrder() {
        int[] imageScores = {70, 75, 80};
        String[] imageNames = {"imageA.png", "imageB.png", "imageC.png"};
        String[] imageIDs = {"idA", "idB", "idC"};

        Map<String, Object> result = reorderData(imageScores, imageNames, imageIDs);

        assertEquals(Arrays.asList(70, 75, 80), result.get("resultScores"));
        assertEquals(Arrays.asList("imageA.png", "imageB.png", "imageC.png"), result.get("resultNames"));
        assertEquals(Arrays.asList("idA", "idB", "idC"), result.get("resultIDs"));
    }

    @Test
    public void shouldHandleAnArrayWithOnlyOneElement() {
        int[] imageScores = {50};
        String[] imageNames = {"imageSingle.png"};
        String[] imageIDs = {"idSingle"};

        Map<String, Object> result = reorderData(imageScores, imageNames, imageIDs);

        assertEquals(Arrays.asList(50), result.get("resultScores"));
        assertEquals(Arrays.asList("imageSingle.png"), result.get("resultNames"));
        assertEquals(Arrays.asList("idSingle"), result.get("resultIDs"));
    }

    @Test
    public void shouldHandleAnEmptyArray() {
        int[] imageScores = {};
        String[] imageNames = {};
        String[] imageIDs = {};

        Map<String, Object> result = reorderData(imageScores, imageNames, imageIDs);

        assertEquals(EMPTY_RESULT.get("resultScores"), result.get("resultScores"));
        assertEquals(EMPTY_RESULT.get("resultNames"), result.get("resultNames"));
        assertEquals(EMPTY_RESULT.get("resultIDs"), result.get("resultIDs"));
    }

    @Test
    public void shouldReorderCorrectlyWhenThereAreDuplicateScores() {
        int[] imageScores = {88, 88, 92};
        String[] imageNames = {"image1.png", "image2.png", "image3.png"};
        String[] imageIDs = {"id1", "id2", "id3"};

        Map<String, Object> result = reorderData(imageScores, imageNames, imageIDs);

        assertEquals(Arrays.asList(88, 88, 92), result.get("resultScores"));
        assertEquals(Arrays.asList("image1.png", "image2.png", "image3.png"), result.get("resultNames"));
        assertEquals(Arrays.asList("id1", "id2", "id3"), result.get("resultIDs"));
    }
}
```

### Explanation:
1. **JUnit Setup**:
   - The `@Before` annotation sets up the `EMPTY_RESULT` map for convenience.
   
2. **Test Methods**:
   - Each test method corresponds to a specific scenario described in the Jest tests.
   - The `assertEquals` method is used to verify that the expected results match the actual results.

3. **Helper Methods**:
   - The `setUp` method initializes the `EMPTY_RESULT` map to make assertions easier.

4. **Assertions**:
   - The `assertEquals` method is used to compare lists created from arrays using `Arrays.asList`.

This Java code uses JUnit 4 to replicate the behavior of the Jest tests and ensures that the `reorderData` method works as expected.