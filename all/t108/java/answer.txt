Certainly! Here is the equivalent Java code for sorting the images based on their scores and returning the reordered image scores, names, and IDs:

```java
import java.util.*;

public class ImageSorter {

    /**
     * Sort the images in ascending order based on their scores and return the reordered image score, name, and ID.
     *
     * @param imageScores Array of image scores.
     * @param imageNames  Array of image names corresponding to the scores.
     * @param imageIDs    Array of image IDs corresponding to the scores.
     * @return A Map containing the sorted scores, names, and IDs.
     */
    public static Map<String, Object> reorderData(int[] imageScores, String[] imageNames, String[] imageIDs) {
        // Combine the scores, names, and IDs into a list of ImageData objects
        List<ImageData> imageData = new ArrayList<>();
        for (int i = 0; i < imageScores.length; i++) {
            imageData.add(new ImageData(imageScores[i], imageNames[i], imageIDs[i]));
        }

        // Sort the list of ImageData objects by score in ascending order
        imageData.sort(Comparator.comparingInt(ImageData::getScore));

        // Extract sorted scores, names, and IDs into separate lists
        List<Integer> resultScores = imageData.stream().mapToInt(ImageData::getScore).boxed().collect(Collectors.toList());
        List<String> resultNames = imageData.stream().map(ImageData::getName).collect(Collectors.toList());
        List<String> resultIDs = imageData.stream().map(ImageData::getId).collect(Collectors.toList());

        // Return the sorted lists in a map
        Map<String, Object> result = new HashMap<>();
        result.put("resultScores", resultScores);
        result.put("resultNames", resultNames);
        result.put("resultIDs", resultIDs);

        return result;
    }

    // Inner class to represent image data
    private static class ImageData {
        private int score;
        private String name;
        private String id;

        public ImageData(int score, String name, String id) {
            this.score = score;
            this.name = name;
            this.id = id;
        }

        public int getScore() {
            return score;
        }

        public String getName() {
            return name;
        }

        public String getId() {
            return id;
        }
    }

    // Example usage
    public static void main(String[] args) {
        int[] imageScores = {10, 5, 8};
        String[] imageNames = {"ImageA", "ImageB", "ImageC"};
        String[] imageIDs = {"ID1", "ID2", "ID3"};

        Map<String, Object> result = reorderData(imageScores, imageNames, imageIDs);

        System.out.println(result.get("resultScores"));
        System.out.println(result.get("resultNames"));
        System.out.println(result.get("resultIDs"));
    }
}
```

### Explanation:
1. **ImageData Class**: This inner class represents an image with its score, name, and ID.
2. **reorderData Method**:
   - Combines the input arrays into a list of `ImageData` objects.
   - Sorts the list of `ImageData` objects based on the score in ascending order.
   - Extracts the sorted scores, names, and IDs into separate lists.
   - Returns the sorted lists in a map.
3. **Main Method**: Demonstrates how to use the `reorderData` method with example data.

This Java code should achieve the same functionality as the provided JavaScript code.