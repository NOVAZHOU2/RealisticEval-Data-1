Here is the equivalent Python code for the provided JavaScript function reorderData:
JavaScript Code:
javascript
/** 
 * Sort the images in ascending order based on their scores and return the reordered image score, name, and ID 
 * 
 * @param {number[]} imageScores - Array of image scores. 
 * @param {string[]} imageNames - Array of image names corresponding to the scores. 
 * @param {string[]} imageIDs - Array of image IDs corresponding to the scores. 
 * @returns {Object} An object containing the sorted scores, names, and IDs. 
 */
function reorderData(imageScores, imageNames, imageIDs) {
    // Combine the scores, names, and IDs into a single array of objects
    const imageData = imageScores.map((score, index) => ({
        score,
        name: imageNames[index],
        id: imageIDs[index],
    }));

    // Sort the array of objects by score in ascending order
    imageData.sort((a, b) => a.score - b.score);

    // Extract sorted scores, names, and IDs into separate arrays
    const resultScores = imageData.map(data => data.score);
    const resultNames = imageData.map(data => data.name);
    const resultIDs = imageData.map(data => data.id);

    // Return the sorted arrays
    return { resultScores, resultNames, resultIDs };
}
Python Code:
python
def reorder_data(image_scores, image_names, image_ids):
    """
    Sort the images in ascending order based on their scores and return the reordered image score, name, and ID.

    Args:
        image_scores (list of float): Array of image scores.
        image_names (list of str): Array of image names corresponding to the scores.
        image_ids (list of str): Array of image IDs corresponding to the scores.

    Returns:
        dict: A dictionary containing the sorted scores, names, and IDs.
    """

    # Combine the scores, names, and IDs into a list of dictionaries
    image_data = [
        {'score': score, 'name': image_names[i], 'id': image_ids[i]}
        for i, score in enumerate(image_scores)
    ]

    # Sort the list of dictionaries by score in ascending order
    image_data.sort(key=lambda x: x['score'])

    # Extract sorted scores, names, and IDs into separate lists
    result_scores = [data['score'] for data in image_data]
    result_names = [data['name'] for data in image_data]
    result_ids = [data['id'] for data in image_data]

    # Return the sorted arrays as a dictionary
    return {'resultScores': result_scores, 'resultNames': result_names, 'resultIDs': result_ids}
Explanation of Changes:
Function Definition:
The JavaScript function reorderData is translated to a Python function def reorder_data.
Parameter Types:
Python uses type hints in the docstring to describe the input parameters and their types.
Data Structure:
The map function in JavaScript is replaced by a list comprehension in Python to create image_data, which combines scores, names, and IDs.
Sorting:
The sorting in Python is done using the sort method with a key function that extracts the score from each dictionary.
Extracting Values:
The extraction of sorted scores, names, and IDs from the sorted list of dictionaries is done using list comprehensions.
Return Statement:
The return statement creates a dictionary in Python, which is equivalent to the object returned in JavaScript.
Usage Example:
You can use the function as follows:
python
image_scores = [5.0, 3.0, 4.5]
image_names = ["Image1", "Image2", "Image3"]
image_ids = ["id1", "id2", "id3"]

result = reorder_data(image_scores, image_names, image_ids)
print(result)
Output:
This will output a dictionary containing sorted scores, names, and IDs:
python
{
    'resultScores': [3.0, 4.5, 5.0],
    'resultNames': ['Image2', 'Image3', 'Image1'],
    'resultIDs': ['id2', 'id3', 'id1']
}
Feel free to test the code and modify it as needed!