Sure, I can help you convert the given Python unittest test class to a C++ test case using Catch2. Below is an example of how you might write a test case for the `convert_file_size` function in C++ using Catch2:

```cpp
#include <catch2/catch.hpp>
#include <string>

// Function to be tested
std::string convert_file_size(int size_bytes);

// Test cases
TEST_CASE("Convert file size to human-readable format", "[convert_file_size]") {
    REQUIRE(convert_file_size(2120) == "2KB");
    REQUIRE(convert_file_size(1048576) == "1MB");
    REQUIRE(convert_file_size(1073741824) == "1GB");
    // Add more test cases as needed
}
```

In this example, we've used the `TEST_CASE` macro from Catch2 to define a test case. Each `REQUIRE` statement checks if the output of `convert_file_size` matches the expected value.

Make sure you have Catch2 installed and properly set up in your project. If you're using a build system like CMake, you'll need to link against Catch2 in your `CMakeLists.txt` file.

Here's an example of what your `CMakeLists.txt` might look like:

```cmake
cmake_minimum_required(VERSION 3.10)
project(FileSizeConverter)

find_package(Catch2 REQUIRED)

add_executable(file_size_converter_test test_file_size_converter.cpp)

target_link_libraries(file_size_converter_test PRIVATE Catch2::Catch2WithMain)
```

This setup assumes that your test file is named `test_file_size_converter.cpp`. Adjust the file names and paths according to your project structure.