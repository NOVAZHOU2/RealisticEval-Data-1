Certainly! Here is the equivalent C++ code for the provided Python function, including the conversion of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <vector>
#include <string>

/**
 * Converts a file size in bytes to a human-readable format.
 * For example:
 *     input: 2120
 *     output: 2KB
 *
 * @param size_bytes The size in bytes to be converted.
 * @return The converted size in a human-readable format (e.g., "2KB", "1MB").
 */
std::string convert_file_size(long long size_bytes) {
    // Define the size units
    const std::vector<std::string> units = {"B", "KB", "MB", "GB", "TB"};

    // Handle the case when size is 0 bytes
    if (size_bytes == 0) {
        return "0B";
    }

    // Calculate the appropriate unit
    int index = 0;
    while (size_bytes >= 1024 && index < units.size() - 1) {
        size_bytes /= 1024;
        index++;
    }

    // Return the formatted size with the appropriate unit
    return std::to_string(static_cast<long>(size_bytes)) + units[index];
}

int main() {
    // Example usage
    long long size = 2120; // Example file size in bytes
    std::cout << convert_file_size(size) << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `def convert_file_size(size_bytes: int) -> str:` is translated to `std::string convert_file_size(long long size_bytes)` in C++.
   - The `long long` type is used to handle very large file sizes.

2. **Documentation Comments**:
   - The Python docstring is converted to a multi-line comment block using `/** ... */`.
   - The `Args` and `Returns` sections are translated into C++ documentation style.

3. **Single-Line Comments**:
   - Single-line comments in Python are translated to `//` in C++.

4. **Variable Definitions**:
   - The `units` vector is defined as `const std::vector<std::string> units = {"B", "KB", "MB", "GB", "TB"};`.

5. **Conditional Statements and Loops**:
   - The conditional statements and loops are directly translated to their C++ equivalents.

6. **String Concatenation**:
   - The final result is constructed using `std::to_string` to convert the integer to a string and then concatenated with the unit from the vector.

This C++ code preserves the original functionality and structure of the Python code while adhering to C++ syntax and documentation standards.