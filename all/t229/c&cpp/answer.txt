Sure! Here is the equivalent C++ code for the provided Python function:

```cpp
#include <iostream>
#include <vector>
#include <string>

std::string convert_file_size(long long size_bytes) {
    // Define the size units
    const std::vector<std::string> units = {"B", "KB", "MB", "GB", "TB"};

    // Handle the case when size is 0 bytes
    if (size_bytes == 0) {
        return "0B";
    }

    // Calculate the appropriate unit
    int index = 0;
    while (size_bytes >= 1024 && index < units.size() - 1) {
        size_bytes /= 1024;
        index++;
    }

    // Return the formatted size with the appropriate unit
    return std::to_string(static_cast<long>(size_bytes)) + units[index];
}

int main() {
    // Example usage
    long long size = 5000000; // Example file size in bytes
    std::cout << convert_file_size(size) << std::endl;

    return 0;
}
```

### Explanation:
1. **Type Declarations**: In C++, we need to specify the types explicitly. The `size_bytes` parameter is declared as `long long` to handle very large file sizes.
2. **Vector for Units**: A `std::vector<std::string>` is used to store the units, similar to the Python list.
3. **Handling Zero Size**: The check for `size_bytes == 0` is handled similarly to the Python code.
4. **While Loop**: The while loop is used to calculate the appropriate unit, just like in the Python code.
5. **String Concatenation**: The formatted size is created using `std::to_string` to convert the integer to a string and then concatenated with the unit from the vector.

This C++ code should provide the same functionality as the Python code.