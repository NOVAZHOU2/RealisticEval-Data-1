Sure! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class:

```typescript
import { describe, it, expect } from '@jest/globals';

function convertFileSize(sizeBytes: number): string {
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    if (sizeBytes === 0) return '0B';
    const i = Math.floor(Math.log(sizeBytes) / Math.log(1024));
    return parseFloat((sizeBytes / Math.pow(1024, i)).toFixed(2)) + sizes[i];
}

describe('convertFileSize', () => {
    it('should convert 2120 bytes to 2KB', () => {
        expect(convertFileSize(2120)).toBe('2.05KB');
    });

    it('should convert 1024 bytes to 1KB', () => {
        expect(convertFileSize(1024)).toBe('1.00KB');
    });

    it('should convert 1048576 bytes to 1MB', () => {
        expect(convertFileSize(1048576)).toBe('1.00MB');
    });

    it('should convert 1073741824 bytes to 1GB', () => {
        expect(convertFileSize(1073741824)).toBe('1.00GB');
    });

    it('should convert 1099511627776 bytes to 1TB', () => {
        expect(convertFileSize(1099511627776)).toBe('1.00TB');
    });

    it('should handle 0 bytes correctly', () => {
        expect(convertFileSize(0)).toBe('0B');
    });
});
```

In this TypeScript code:
- We define the `convertFileSize` function which converts file sizes from bytes to a human-readable format.
- We use Jest's `describe` and `it` functions to create test cases.
- Each `it` block contains an assertion using `expect` to verify that the `convertFileSize` function returns the correct result for different input values.