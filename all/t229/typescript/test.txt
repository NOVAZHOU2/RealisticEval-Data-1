Certainly! Below is the equivalent Jest test suite in TypeScript for the provided Python unittest class. The test cases will use Jest's assertion methods to ensure the functionality and logic are preserved.

### TypeScript Code with Jest Testing

First, ensure you have Jest and TypeScript set up in your project. You can install them using npm:

```sh
npm install --save-dev jest @types/jest ts-jest
```

Add Jest configuration to your `tsconfig.json` and `jest.config.js` files:

```json
// tsconfig.json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "skipLibCheck": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

```js
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest',
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
};
```

Now, here is the TypeScript code with Jest tests:

```typescript
import { convertFileSize } from './path/to/convertFileSize'; // Import the convertFileSize function

describe('TestFileSizeConverter', () => {
  it('should handle zero bytes', () => {
    expect(convertFileSize(0)).toBe("0B");
  });

  it('should handle bytes less than 1KB', () => {
    expect(convertFileSize(512)).toBe("512B");
  });

  it('should handle exactly 1KB', () => {
    expect(convertFileSize(1024)).toBe("1KB");
  });

  it('should handle 2KB', () => {
    expect(convertFileSize(2048)).toBe("2KB");
  });

  it('should handle exactly 1MB', () => {
    expect(convertFileSize(1048576)).toBe("1MB");
  });

  it('should handle 5MB', () => {
    expect(convertFileSize(5242880)).toBe("5MB");
  });

  it('should handle exactly 1GB', () => {
    expect(convertFileSize(1073741824)).toBe("1GB");
  });
});
```

### Explanation:
1. **Import Statement**: Import the `convertFileSize` function from the appropriate path.
2. **Describe Block**: Use the `describe` block to group the test cases under a descriptive name.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Expect Assertions**: Use Jest's `expect` assertions to verify the expected behavior of the `convertFileSize` function.

### Running the Tests
To run the tests, you can use the following command:

```sh
npx jest
```

This setup ensures that the tests are structured similarly to the Python unittest class and uses Jest's powerful assertion methods to validate the functionality of the `convertFileSize` function.