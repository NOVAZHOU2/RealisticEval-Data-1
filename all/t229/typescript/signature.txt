Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Converts a file size in bytes to a human-readable format.
 * For example:
 *   input: 2120
 *   output: 2KB
 * 
 * @param sizeBytes - The size in bytes to be converted.
 * @returns The converted size in a human-readable format (e.g., "2KB", "1MB").
 */
function convertFileSize(sizeBytes: number): string {
    // Define the size units
    const units: string[] = ['B', 'KB', 'MB', 'GB', 'TB'];

    // Handle the case when size is 0 bytes
    if (sizeBytes === 0) {
        return "0B";
    }

    // Calculate the appropriate unit
    let index = 0;
    while (sizeBytes >= 1024 && index < units.length - 1) {
        sizeBytes /= 1024;
        index += 1;
    }

    // Return the formatted size with the appropriate unit
    return `${Math.floor(sizeBytes)}${units[index]}`;
}

// Example usage
console.log(convertFileSize(1550)); // Output: "1KB"
console.log(convertFileSize(1049026)); // Output: "1MB"
```

### Explanation:
1. **Function Definition**: The function `convertFileSize` is defined with a single parameter `sizeBytes` of type `number`.
2. **JSDoc Documentation**:
   - The JSDoc comment block provides a description of the function.
   - It includes examples of input and output.
   - The `@param` tag documents the parameter `sizeBytes`.
   - The `@returns` tag documents the return value.
3. **Units Array**: An array `units` is defined with the units of measurement.
4. **Zero Bytes Check**: If `sizeBytes` is zero, it returns `"0B"`.
5. **Unit Calculation**: A loop is used to determine the appropriate unit by dividing `sizeBytes` by 1024 until it is less than 1024 or the maximum index is reached.
6. **Formatted Output**: The final size is formatted using template literals and returned.

This TypeScript code preserves the original functionality and structure of the Python code, with proper type annotations and JSDoc documentation.