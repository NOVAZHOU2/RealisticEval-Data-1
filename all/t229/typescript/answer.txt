Certainly! Below is the TypeScript code that is equivalent to the provided Python code:

```typescript
function convertFileSize(sizeBytes: number): string {
    // Define the size units
    const units: string[] = ['B', 'KB', 'MB', 'GB', 'TB'];

    // Handle the case when size is 0 bytes
    if (sizeBytes === 0) {
        return "0B";
    }

    // Calculate the appropriate unit
    let index = 0;
    while (sizeBytes >= 1024 && index < units.length - 1) {
        sizeBytes /= 1024;
        index += 1;
    }

    // Return the formatted size with the appropriate unit
    return `${Math.floor(sizeBytes)}${units[index]}`;
}

// Example usage
console.log(convertFileSize(1550)); // Output: "1KB"
console.log(convertFileSize(1049026)); // Output: "1MB"
```

### Explanation:
1. **Function Definition**: The function `convertFileSize` is defined with a single parameter `sizeBytes` of type `number`.
2. **Units Array**: An array `units` is defined with the units of measurement.
3. **Zero Bytes Check**: If `sizeBytes` is zero, it returns `"0B"`.
4. **Unit Calculation**: A loop is used to determine the appropriate unit by dividing `sizeBytes` by 1024 until it is less than 1024 or the maximum index is reached.
5. **Formatted Output**: The final size is formatted using template literals and returned.

This TypeScript code maintains the same functionality and logic as the Python code, with proper type definitions and idiomatic TypeScript syntax.