Certainly! Hereâ€™s the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

/**
 * A utility class for converting file sizes to human-readable formats.
 */
public class Answer {

    /**
     * Converts a file size in bytes to a human-readable format.
     * For example:
     *     input: 2120
     *     output: 2KB
     *
     * @param sizeBytes The size in bytes to be converted.
     * @return The converted size in a human-readable format (e.g., "2KB", "1MB").
     */
    public static String convertFileSize(long sizeBytes) {
        // Define the size units
        String[] units = {"B", "KB", "MB", "GB", "TB"};

        // Handle the case when size is 0 bytes
        if (sizeBytes == 0) {
            return "0B";
        }

        // Calculate the appropriate unit
        int index = 0;
        while (sizeBytes >= 1024 && index < units.length - 1) {
            sizeBytes /= 1024;
            index++;
        }

        // Return the formatted size with the appropriate unit
        return String.format("%d%s", sizeBytes, units[index]);
    }

    public static void main(String[] args) {
        // Example usage
        System.out.println(convertFileSize(1550)); // Output: 1KB
        System.out.println(convertFileSize(1049026)); // Output: 1MB
    }
}
```

### Explanation:
1. **Package Declaration**: The code starts with the package declaration `package org.real.temp;`.
2. **Class Definition**: The class `Answer` is defined.
3. **Javadoc Comments**: The method `convertFileSize` includes detailed Javadoc comments that explain the purpose, parameters, and return value.
4. **Method Signature**: The method `convertFileSize` is declared as `static` and takes a `long` parameter `sizeBytes`, returning a `String`.
5. **Units Array**: An array `units` is defined to hold the units of measurement.
6. **Zero Size Handling**: If `sizeBytes` is zero, it returns `"0B"`.
7. **Unit Calculation**: A loop calculates the appropriate unit by dividing `sizeBytes` by 1024 until it is less than 1024 or the maximum index is reached.
8. **Formatted Output**: The method returns a formatted string using `String.format` to concatenate the size and the unit.

This Java code preserves the original functionality and structure of the Python code, including the comments and documentation.