Certainly! Here is the equivalent Jest test suite for the given Python `unittest` test class. I'll convert each test method and ensure that the functionality and logic are maintained.

### Python Code

```python
import unittest

class TestFileSizeConverter(unittest.TestCase):

    def test_zero_bytes(self):
        self.assertEqual(convert_file_size(0), "0B")

    def test_bytes_less_than_1KB(self):
        self.assertEqual(convert_file_size(512), "512B")

    def test_exactly_1KB(self):
        self.assertEqual(convert_file_size(1024), "1KB")

    def test_2KB(self):
        self.assertEqual(convert_file_size(2048), "2KB")

    def test_exactly_1MB(self):
        self.assertEqual(convert_file_size(1048576), "1MB")

    def test_5MB(self):
        self.assertEqual(convert_file_size(5242880), "5MB")

    def test_exactly_1GB(self):
        self.assertEqual(convert_file_size(1073741824), "1GB")
```

### JavaScript Code with Jest

First, ensure you have Jest installed in your project:

```sh
npm install --save-dev jest
```

Then, create a test file (e.g., `fileSizeConverter.test.js`) and include the following code:

```javascript
// Import the function to be tested
const { convertFileSize } = require('./fileSizeConverter');

describe('TestFileSizeConverter', () => {
    test('test_zero_bytes', () => {
        expect(convertFileSize(0)).toBe("0B");
    });

    test('test_bytes_less_than_1KB', () => {
        expect(convertFileSize(512)).toBe("512B");
    });

    test('test_exactly_1KB', () => {
        expect(convertFileSize(1024)).toBe("1KB");
    });

    test('test_2KB', () => {
        expect(convertFileSize(2048)).toBe("2KB");
    });

    test('test_exactly_1MB', () => {
        expect(convertFileSize(1048576)).toBe("1MB");
    });

    test('test_5MB', () => {
        expect(convertFileSize(5242880)).toBe("5MB");
    });

    test('test_exactly_1GB', () => {
        expect(convertFileSize(1073741824)).toBe("1GB");
    });
});
```

### Explanation

1. **Importing the Function**: The `convertFileSize` function is imported from the module where it is defined (`fileSizeConverter.js`).

2. **Describe Block**: The `describe` block is used to group the tests under a single test suite named `TestFileSizeConverter`.

3. **Test Cases**: Each test case is defined using the `test` function, which takes a description and a callback function containing the assertions.

4. **Assertions**: The `expect` function is used to make assertions. In this case, `toBe` is used to check for exact string equality.

### Example `fileSizeConverter.js`

Here is an example implementation of the `convertFileSize` function:

```javascript
// fileSizeConverter.js

/**
 * Converts a file size in bytes to a human-readable format.
 * For example:
 *     input: 2120
 *     output: 2KB
 * 
 * @param {number} sizeBytes - The size in bytes to be converted.
 * @returns {string} The converted size in a human-readable format (e.g., "2KB", "1MB").
 */
function convertFileSize(sizeBytes) {
    const units = ['B', 'KB', 'MB', 'GB', 'TB'];

    if (sizeBytes === 0) {
        return "0B";
    }

    let index = 0;
    while (sizeBytes >= 1024 && index < units.length - 1) {
        sizeBytes /= 1024;
        index += 1;
    }

    return `${Math.floor(sizeBytes)}${units[index]}`;
}

module.exports = { convertFileSize };
```

This setup ensures that the functionality and logic of the tests are preserved, and the structure is clear and well-documented.