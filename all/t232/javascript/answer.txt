Sure, here's the equivalent JavaScript code for the given Python function:

```javascript
function convertHmsToMilliseconds(timeStr) {
    /**
     * Convert a time duration string in the format 'XhYminZs' to milliseconds.
     *
     * This function takes a string representing a time duration, where hours, minutes, and seconds
     * are optionally provided, and converts this duration into the equivalent number of milliseconds.
     *
     * @param {string} timeStr - A string representing the time duration, e.g., '1h20min30s'.
     * @returns {number | null} - The equivalent duration in milliseconds, or null if the input is invalid.
     */
    // Regex to match hours, minutes, and seconds
    const regex = /^(?:(\d+)h)?(?:(\d+)min)?(?:(\d+)s)?$/;
    const match = timeStr.match(regex);

    if (!match) {
        console.log(`remindme.js: Cannot convert time string "${timeStr}" to milliseconds!`);
        return null;
    }

    // Extract hours, minutes, and seconds from the regex groups, defaulting to 0 if not present
    const hours = match[1] ? parseInt(match[1], 10) : 0;
    const minutes = match[2] ? parseInt(match[2], 10) : 0;
    const seconds = match[3] ? parseInt(match[3], 10) : 0;

    // Calculate the total duration in milliseconds
    const totalMilliseconds = (hours * 60 * 60 + minutes * 60 + seconds) * 1000;

    return totalMilliseconds;
}

// Example usage
console.log(convertHmsToMilliseconds('1h20min30s')); // Output: 4830000
console.log(convertHmsToMilliseconds('20min30s'));   // Output: 1230000
console.log(convertHmsToMilliseconds('30s'));        // Output: 30000
console.log(convertHmsToMilliseconds('invalid'));    // Output: null
```

### Explanation:
1. **Regex Pattern**: The regular expression pattern `r'^(?:(\d+)h)?(?:(\d+)min)?(?:(\d+)s)?$'` is converted to JavaScript as `/(?:(\d+)h)?(?:(\d+)min)?(?:(\d+)s)?/`.
2. **Matching**: The `re.search` method in Python is replaced with the `String.prototype.match` method in JavaScript.
3. **Group Extraction**: In JavaScript, the matched groups are accessed via the array returned by `match`. If a group is not present, it will be `undefined`, so we use a ternary operator to default to `0`.
4. **Calculation**: The total duration is calculated by converting hours, minutes, and seconds to milliseconds and summing them up.
5. **Error Handling**: If the input string does not match the expected format, the function logs an error message and returns `null`.

This should provide the same functionality and logic as the original Python code.