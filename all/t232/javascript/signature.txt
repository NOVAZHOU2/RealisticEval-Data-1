Certainly! Here is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Convert a time duration string in the format 'XhYminZs' to milliseconds.
 *
 * This function takes a string representing a time duration, where hours, minutes, and seconds
 * are optionally provided, and converts this duration into the equivalent number of milliseconds.
 *
 * @param {string} timeStr - A string representing the time duration, e.g., '1h20min30s'.
 * @returns {number | null} - The equivalent duration in milliseconds, or null if the input is invalid.
 */
function convertHmsToMilliseconds(timeStr) {
    // Regex to match hours, minutes, and seconds
    const regex = /^(?:(\d+)h)?(?:(\d+)min)?(?:(\d+)s)?$/;
    const match = timeStr.match(regex);

    if (!match) {
        console.log(`remindme.js: Cannot convert time string "${timeStr}" to milliseconds!`);
        return null;
    }

    // Extract hours, minutes, and seconds from the regex groups, defaulting to 0 if not present
    const hours = match[1] ? parseInt(match[1], 10) : 0;
    const minutes = match[2] ? parseInt(match[2], 10) : 0;
    const seconds = match[3] ? parseInt(match[3], 10) : 0;

    // Calculate the total duration in milliseconds
    const totalMilliseconds = (hours * 60 * 60 + minutes * 60 + seconds) * 1000;

    return totalMilliseconds;
}

// Example usage
console.log(convertHmsToMilliseconds('1h20min30s')); // Output: 4830000
console.log(convertHmsToMilliseconds('20min30s'));   // Output: 1230000
console.log(convertHmsToMilliseconds('30s'));        // Output: 30000
console.log(convertHmsToMilliseconds('invalid'));    // Output: null
```

### Explanation:
1. **Function Signature**:
   - The Python function signature `def convert_hms_to_milliseconds(time_str: str) -> Optional[int]:` is translated to the JavaScript function signature `function convertHmsToMilliseconds(timeStr)`.

2. **JSDoc Comments**:
   - The Python docstring is rewritten using JSDoc format.
   - The `@param` tag is used to describe the parameter `timeStr`.
   - The `@returns` tag is used to describe the return type, which can be either a number or null.

3. **Regex Pattern**:
   - The regex pattern `r'^(?:(\d+)h)?(?:(\d+)min)?(?:(\d+)s)?$'` is translated to the JavaScript regex pattern `/^(?:(\d+)h)?(?:(\d+)min)?(?:(\d+)s)?$/`.

4. **Matching**:
   - The `re.search` method in Python is replaced with the `String.prototype.match` method in JavaScript.

5. **Group Extraction**:
   - The matched groups are extracted using the array returned by `match`. If a group is not present, it will be `undefined`, so we use a ternary operator to default to `0`.

6. **Calculation**:
   - The total duration is calculated by converting hours, minutes, and seconds to milliseconds and summing them up.

7. **Error Handling**:
   - If the input string does not match the expected format, the function logs an error message and returns `null`.

This conversion ensures that the functionality, logic, and structure of the original Python code are preserved in JavaScript, with appropriate JSDoc comments.