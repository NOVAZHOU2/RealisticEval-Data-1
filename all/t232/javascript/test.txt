Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I'll ensure that the functionality and logic of the tests are maintained, and I'll document any necessary changes due to language differences between Python and JavaScript.

### Python unittest Code:

```python
import unittest

class TestConvertHmsToMilliseconds(unittest.TestCase):

    def test_basic_conversion(self):
        self.assertEqual(convert_hms_to_milliseconds("1h20min30s"), 4830000, "Should convert 1h20min30s to 4830000 milliseconds")

    def test_no_hours_or_minutes(self):
        self.assertEqual(convert_hms_to_milliseconds("30s"), 30000, "Should convert 30s to 30000 milliseconds")

    def test_invalid_format(self):
        self.assertIsNone(convert_hms_to_milliseconds("1hour20minutes"), "Should return None for invalid time format")

    def test_edge_case_max_one_day(self):
        self.assertEqual(convert_hms_to_milliseconds("23h59min59s"), 86399000, "Should convert 23h59min59s to 86399000 milliseconds")

    def test_exceeding_one_day(self):
        self.assertEqual(convert_hms_to_milliseconds("24h1min"), 86460000,
                         "Should correctly convert 24h1min to 86460000 milliseconds")
```

### Equivalent Jest Test Suite:

```javascript
const convertHmsToMilliseconds = require('./convertHmsToMilliseconds'); // Import the function to be tested

describe('TestConvertHmsToMilliseconds', () => {
    test('test_basic_conversion', () => {
        expect(convertHmsToMilliseconds("1h20min30s")).toBe(4830000);
    });

    test('test_no_hours_or_minutes', () => {
        expect(convertHmsToMilliseconds("30s")).toBe(30000);
    });

    test('test_invalid_format', () => {
        expect(convertHmsToMilliseconds("1hour20minutes")).toBeNull();
    });

    test('test_edge_case_max_one_day', () => {
        expect(convertHmsToMilliseconds("23h59min59s")).toBe(86399000);
    });

    test('test_exceeding_one_day', () => {
        expect(convertHmsToMilliseconds("24h1min")).toBe(86460000);
    });
});
```

### Explanation:

1. **Importing the Function**:
   - In Python, the function `convert_hms_to_milliseconds` is assumed to be defined in the same file or imported from another module. In JavaScript, we need to explicitly import the function using `require` or `import`.

2. **Describe Block**:
   - The `unittest.TestCase` class is replaced with a `describe` block in Jest to group the tests together.

3. **Test Cases**:
   - Each `test` function in Jest corresponds to a method in the Python `unittest.TestCase` class.
   - The `test` function takes a description and a callback function containing the assertions.

4. **Assertions**:
   - The `assertEqual` method in Python is replaced with `expect(...).toBe(...)` in Jest.
   - The `assertIsNone` method in Python is replaced with `expect(...).toBeNull()` in Jest.

5. **Documentation**:
   - The test descriptions are included as strings within the `test` function calls to maintain clarity and readability.

### Example Usage:

Ensure that the `convertHmsToMilliseconds` function is properly exported from the module where it is defined. For example:

```javascript
// convertHmsToMilliseconds.js

/**
 * Convert a time duration string in the format 'XhYminZs' to milliseconds.
 *
 * This function takes a string representing a time duration, where hours, minutes, and seconds
 * are optionally provided, and converts this duration into the equivalent number of milliseconds.
 *
 * @param {string} timeStr - A string representing the time duration, e.g., '1h20min30s'.
 * @returns {number | null} - The equivalent duration in milliseconds, or null if the input is invalid.
 */
function convertHmsToMilliseconds(timeStr) {
    // Regex to match hours, minutes, and seconds
    const regex = /^(?:(\d+)h)?(?:(\d+)min)?(?:(\d+)s)?$/;
    const match = timeStr.match(regex);

    if (!match) {
        console.log(`remindme.js: Cannot convert time string "${timeStr}" to milliseconds!`);
        return null;
    }

    // Extract hours, minutes, and seconds from the regex groups, defaulting to 0 if not present
    const hours = match[1] ? parseInt(match[1], 10) : 0;
    const minutes = match[2] ? parseInt(match[2], 10) : 0;
    const seconds = match[3] ? parseInt(match[3], 10) : 0;

    // Calculate the total duration in milliseconds
    const totalMilliseconds = (hours * 60 * 60 + minutes * 60 + seconds) * 1000;

    return totalMilliseconds;
}

module.exports = convertHmsToMilliseconds;
```

By following these steps, the Jest test suite maintains the functionality and logic of the original Python unittest class, ensuring that all assertions are appropriately mapped to their Jest equivalents.