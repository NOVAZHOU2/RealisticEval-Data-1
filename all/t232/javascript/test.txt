Sure! Below is an example of how you can write a Jest test case for the `convert_hms_to_milliseconds` function in JavaScript:

```javascript
const convertHmsToMilliseconds = require('./path-to-your-function'); // Adjust the path accordingly

describe('convertHmsToMilliseconds', () => {
  it('should convert "1h20min30s" to milliseconds', () => {
    expect(convertHmsToMilliseconds('1h20min30s')).toBe(5400000);
  });

  it('should convert "2h" to milliseconds', () => {
    expect(convertHmsToMilliseconds('2h')).toBe(7200000);
  });

  it('should convert "30min" to milliseconds', () => {
    expect(convertHmsToMilliseconds('30min')).toBe(1800000);
  });

  it('should convert "45s" to milliseconds', () => {
    expect(convertHmsToMilliseconds('45s')).toBe(45000);
  });

  it('should return null for invalid input', () => {
    expect(convertHmsToMilliseconds('invalid_input')).toBeNull();
    expect(convertHmsToMilliseconds('1h20min')).toBeNull();
    expect(convertHmsToMilliseconds('h20min30s')).toBeNull();
    expect(convertHmsToMilliseconds('1h20s')).toBeNull();
    expect(convertHmsToMilliseconds('1h20min30')).toBeNull();
  });
});
```

### Explanation:
- **Importing the Function**: Replace `'./path-to-your-function'` with the actual path to your `convert_hms_to_milliseconds` function.
- **Describe Block**: Groups related tests together.
- **It Blocks**: Individual test cases. Each `it` block describes what should be tested and uses `expect` to assert the expected outcome.
- **Expectations**: Checks if the output of `convertHmsToMilliseconds` matches the expected value using various test cases, including valid and invalid inputs.

Make sure you have Jest installed in your project. If not, you can install it using npm:

```sh
npm install --save-dev jest
```

Then, you can run your tests using:

```sh
npx jest
```