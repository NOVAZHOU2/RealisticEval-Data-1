Here's how you can write the same functionality in C++:

```cpp
#include <iostream>
#include <string>
#include <regex>

int convertHmsToMilliseconds(const std::string& timeStr) {
    std::smatch match;
    std::regex pattern("(\\d+)h(\\d+)min(\\d+)s");

    if (std::regex_search(timeStr, match, pattern)) {
        int hours = std::stoi(match[1]);
        int minutes = std::stoi(match[2]);
        int seconds = std::stoi(match[3]);

        return ((hours * 60 + minutes) * 60 + seconds) * 1000;
    } else {
        std::cerr << "Invalid input format." << std::endl;
        return -1; // Return an error code for invalid input
    }
}

int main() {
    std::string timeStr = "1h20min30s";
    int milliseconds = convertHmsToMilliseconds(timeStr);
    
    if (milliseconds != -1) {
        std::cout << "Time in milliseconds: " << milliseconds << std::endl;
    }

    return 0;
}
```

And here's the equivalent C code:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <regex.h>

int convertHmsToMilliseconds(char* timeStr) {
    regex_t regex;
    regmatch_t matches[4];
    char pattern[] = "(\\d+)h(\\d+)min(\\d+)s";

    if (regcomp(&regex, pattern, REG_EXTENDED) != 0) {
        printf("Could not compile regex.\n");
        return -1; // Return an error code for regex compilation failure
    }

    if (regexec(&regex, timeStr, 4, matches, 0) == 0) {
        int hours = atoi(timeStr + matches[1].rm_so);
        int minutes = atoi(timeStr + matches[2].rm_so);
        int seconds = atoi(timeStr + matches[3].rm_so);

        regfree(&regex);
        return ((hours * 60 + minutes) * 60 + seconds) * 1000;
    } else {
        printf("Invalid input format.\n");
        regfree(&regex);
        return -1; // Return an error code for invalid input
    }
}

int main() {
    char timeStr[] = "1h20min30s";
    int milliseconds = convertHmsToMilliseconds(timeStr);
    
    if (milliseconds != -1) {
        printf("Time in milliseconds: %d\n", milliseconds);
    }

    return 0;
}
```

Note that both C++ and C codes assume that the input string will always be well-formed according to the specified format ('XhYminZs'). If you want to handle errors more gracefully when the input is invalid, you would need to add additional checks and possibly use exception handling in C++.