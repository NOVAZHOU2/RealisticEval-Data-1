Certainly! Here is the equivalent C++ code for the given Python function, including appropriate comments and type translations:

```cpp
#include <iostream>
#include <regex>
#include <string>
#include <optional>

// Function to convert a time duration string in the format 'XhYminZs' to milliseconds.
// This function takes a string representing a time duration, where hours, minutes, and seconds
// are optionally provided, and converts this duration into the equivalent number of milliseconds.
//
// Args:
//     time_str (const std::string&): A string representing the time duration, e.g., '1h20min30s'.
//
// Returns:
//     std::optional<int>: The equivalent duration in milliseconds, or std::nullopt if the input is invalid.
std::optional<int> convert_hms_to_milliseconds(const std::string& time_str) {
    // Regex to match hours, minutes, and seconds
    std::regex regex("^(?:(\\d+)h)?(?:(\\d+)min)?(?:(\\d+)s)?$");
    std::smatch match;

    if (!std::regex_search(time_str, match, regex)) {
        std::cout << "remindme.cpp: Cannot convert time string \"" << time_str << "\" to milliseconds!" << std::endl;
        return std::nullopt;
    }

    // Extract hours, minutes, and seconds from the regex groups, defaulting to 0 if not present
    int hours = match[1].matched ? std::stoi(match[1]) : 0;
    int minutes = match[2].matched ? std::stoi(match[2]) : 0;
    int seconds = match[3].matched ? std::stoi(match[3]) : 0;

    // Calculate the total duration in milliseconds
    int total_milliseconds = (hours * 3600 + minutes * 60 + seconds) * 1000;

    return total_milliseconds;
}

int main() {
    // Example usage
    auto result = convert_hms_to_milliseconds("1h20min30s");
    if (result) {
        std::cout << "Converted time in milliseconds: " << *result << std::endl;
    } else {
        std::cout << "Invalid input." << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Headers**: The required headers (`<iostream>`, `<regex>`, `<string>`, `<optional>`) are included at the beginning.
2. **Function Definition**: The function `convert_hms_to_milliseconds` is defined with a `const std::string&` parameter and returns `std::optional<int>`.
3. **Comments and Documentation**:
   - Multi-line comments are used to document the function's purpose, arguments, and return values.
   - Single-line comments are used for inline explanations.
4. **Regex Matching**: The regex pattern is defined using `std::regex` and matched using `std::regex_search`. The results are stored in `std::smatch`.
5. **Extraction and Calculation**: Hours, minutes, and seconds are extracted from the regex match groups and converted to integers. If a group is not present, it defaults to 0.
6. **Return Value**: The function returns the total duration in milliseconds wrapped in `std::optional<int>`.
7. **Main Function**: An example usage of the function is shown in the `main` function, demonstrating how to handle the returned `std::optional<int>` value.

This translation preserves the original functionality and structure of the Python code while adhering to C++ syntax and conventions.