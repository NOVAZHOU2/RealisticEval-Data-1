Certainly! Here is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Convert a time duration string in the format 'XhYminZs' to milliseconds.
 *
 * This function takes a string representing a time duration, where hours, minutes, and seconds
 * are optionally provided, and converts this duration into the equivalent number of milliseconds.
 *
 * @param timeStr - A string representing the time duration, e.g., '1h20min30s'.
 * @returns The equivalent duration in milliseconds, or null if the input is invalid.
 */
function convertHmsToMilliseconds(timeStr: string): number | null {
    const regex = /^(?:(\d+)h)?(?:(\d+)min)?(?:(\d+)s)?$/;
    const match = timeStr.match(regex);

    if (!match) {
        console.log(`remindme.ts: Cannot convert time string "${timeStr}" to milliseconds!`);
        return null;
    }

    // Extract hours, minutes, and seconds from the regex groups, defaulting to 0 if not present
    const [_, hoursStr, minutesStr, secondsStr] = match;
    const hours = hoursStr ? parseInt(hoursStr, 10) : 0;
    const minutes = minutesStr ? parseInt(minutesStr, 10) : 0;
    const seconds = secondsStr ? parseInt(secondsStr, 10) : 0;

    // Convert to milliseconds
    const totalMilliseconds = (hours * 60 * 60 + minutes * 60 + seconds) * 1000;

    return totalMilliseconds;
}

// Example usage
console.log(convertHmsToMilliseconds('1h20min30s')); // Should output 4830000
console.log(convertHmsToMilliseconds('20min30s'));   // Should output 1230000
console.log(convertHmsToMilliseconds('invalid'));    // Should output null
```

### Explanation:
1. **Function Signature**:
   - The function `convertHmsToMilliseconds` is defined with a parameter `timeStr` of type `string`.
   - The return type is specified as `number | null`, which corresponds to the Python `Optional[int]`.

2. **JSDoc Documentation**:
   - The JSDoc comment block is used to document the function, its parameters, and its return type.
   - The `@param` tag is used to describe the parameter `timeStr`.
   - The `@returns` tag is used to describe the return value.

3. **Regex Matching**:
   - The regular expression `regex` is defined to match the time string format.
   - The `match` method is used to find matches in the input string.

4. **Extracting Values**:
   - Destructuring assignment is used to extract the matched groups.
   - Default values are set to 0 if the group is not present.

5. **Conversion to Milliseconds**:
   - The extracted values are converted to integers and then to milliseconds.

6. **Error Handling**:
   - If the input string does not match the expected format, a message is logged to the console, and `null` is returned.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and documentation standards.