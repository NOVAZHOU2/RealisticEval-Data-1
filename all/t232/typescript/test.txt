Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included:

### TypeScript Code

```typescript
import { convertHmsToMilliseconds } from './path/to/convertHmsToMilliseconds'; // Import the function to be tested

describe('TestConvertHmsToMilliseconds', () => {
  it('should convert 1h20min30s to 4830000 milliseconds', () => {
    expect(convertHmsToMilliseconds('1h20min30s')).toBe(4830000);
  });

  it('should convert 30s to 30000 milliseconds', () => {
    expect(convertHmsToMilliseconds('30s')).toBe(30000);
  });

  it('should return null for invalid time format', () => {
    expect(convertHmsToMilliseconds('1hour20minutes')).toBeNull();
  });

  it('should convert 23h59min59s to 86399000 milliseconds', () => {
    expect(convertHmsToMilliseconds('23h59min59s')).toBe(86399000);
  });

  it('should correctly convert 24h1min to 86460000 milliseconds', () => {
    expect(convertHmsToMilliseconds('24h1min')).toBe(86460000);
  });
});
```

### Explanation:

1. **Import Statement**:
   - Import the `convertHmsToMilliseconds` function from the appropriate module.

2. **Describe Block**:
   - Use the `describe` function to group the tests under a descriptive name (`TestConvertHmsToMilliseconds`).

3. **Test Cases**:
   - Each test case is defined using the `it` function, which takes a description and a callback function containing the assertions.
   - The `expect` function is used to perform assertions.

4. **Assertions**:
   - `expect(convertHmsToMilliseconds('1h20min30s')).toBe(4830000)` checks that the function returns the expected value.
   - `expect(convertHmsToMilliseconds('30s')).toBe(30000)` checks that the function returns the expected value.
   - `expect(convertHmsToMilliseconds('1hour20minutes')).toBeNull()` checks that the function returns `null` for an invalid format.
   - `expect(convertHmsToMilliseconds('23h59min59s')).toBe(86399000)` checks that the function returns the expected value.
   - `expect(convertHmsToMilliseconds('24h1min')).toBe(86460000)` checks that the function returns the expected value.

### Example Usage

Here is the complete TypeScript file, including the function definition and the test suite:

#### `convertHmsToMilliseconds.ts`

```typescript
/**
 * Convert a time duration string in the format 'XhYminZs' to milliseconds.
 *
 * This function takes a string representing a time duration, where hours, minutes, and seconds
 * are optionally provided, and converts this duration into the equivalent number of milliseconds.
 *
 * @param timeStr - A string representing the time duration, e.g., '1h20min30s'.
 * @returns The equivalent duration in milliseconds, or null if the input is invalid.
 */
export function convertHmsToMilliseconds(timeStr: string): number | null {
    const regex = /^(?:(\d+)h)?(?:(\d+)min)?(?:(\d+)s)?$/;
    const match = timeStr.match(regex);

    if (!match) {
        console.log(`remindme.ts: Cannot convert time string "${timeStr}" to milliseconds!`);
        return null;
    }

    // Extract hours, minutes, and seconds from the regex groups, defaulting to 0 if not present
    const [_, hoursStr, minutesStr, secondsStr] = match;
    const hours = hoursStr ? parseInt(hoursStr, 10) : 0;
    const minutes = minutesStr ? parseInt(minutesStr, 10) : 0;
    const seconds = secondsStr ? parseInt(secondsStr, 10) : 0;

    // Convert to milliseconds
    const totalMilliseconds = (hours * 60 * 60 + minutes * 60 + seconds) * 1000;

    return totalMilliseconds;
}
```

#### `testConvertHmsToMilliseconds.spec.ts`

```typescript
import { convertHmsToMilliseconds } from './convertHmsToMilliseconds';

describe('TestConvertHmsToMilliseconds', () => {
  it('should convert 1h20min30s to 4830000 milliseconds', () => {
    expect(convertHmsToMilliseconds('1h20min30s')).toBe(4830000);
  });

  it('should convert 30s to 30000 milliseconds', () => {
    expect(convertHmsToMilliseconds('30s')).toBe(30000);
  });

  it('should return null for invalid time format', () => {
    expect(convertHmsToMilliseconds('1hour20minutes')).toBeNull();
  });

  it('should convert 23h59min59s to 86399000 milliseconds', () => {
    expect(convertHmsToMilliseconds('23h59min59s')).toBe(86399000);
  });

  it('should correctly convert 24h1min to 86460000 milliseconds', () => {
    expect(convertHmsToMilliseconds('24h1min')).toBe(86460000);
  });
});
```

### Running the Tests

To run the tests, you can use the following command in your project directory:

```sh
npm test
```

This setup ensures that the tests are structured and executed correctly using Jest, maintaining the same functionality and logic as the original Python unittest code.