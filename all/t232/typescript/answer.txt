Sure! Here is the equivalent TypeScript code for the provided Python code:

```typescript
import { match } from "assert";

function convertHmsToMilliseconds(timeStr: string): number | null {
    /**
     * Convert a time duration string in the format 'XhYminZs' to milliseconds.
     *
     * This function takes a string representing a time duration, where hours, minutes, and seconds
     * are optionally provided, and converts this duration into the equivalent number of milliseconds.
     *
     * @param timeStr - A string representing the time duration, e.g., '1h20min30s'.
     * @returns The equivalent duration in milliseconds, or null if the input is invalid.
     */
    const regex = /^(?:(\d+)h)?(?:(\d+)min)?(?:(\d+)s)?$/;
    const match = timeStr.match(regex);

    if (!match) {
        console.log(`remindme.ts: Cannot convert time string "${timeStr}" to milliseconds!`);
        return null;
    }

    // Extract hours, minutes, and seconds from the regex groups, defaulting to 0 if not present
    const [_, hoursStr, minutesStr, secondsStr] = match;
    const hours = hoursStr ? parseInt(hoursStr, 10) : 0;
    const minutes = minutesStr ? parseInt(minutesStr, 10) : 0;
    const seconds = secondsStr ? parseInt(secondsStr, 10) : 0;

    // Convert to milliseconds
    const totalMilliseconds = (hours * 60 * 60 + minutes * 60 + seconds) * 1000;

    return totalMilliseconds;
}

// Example usage
console.log(convertHmsToMilliseconds('1h20min30s')); // Should output 4830000
console.log(convertHmsToMilliseconds('20min30s'));   // Should output 1230000
console.log(convertHmsToMilliseconds('invalid'));    // Should output null
```

### Explanation:
1. **Import Statement**: TypeScript does not require importing `re` as it uses native JavaScript regular expressions.
2. **Function Definition**: The function `convertHmsToMilliseconds` is defined with a type signature indicating it returns either a number or null.
3. **Regex Matching**: The `match` method is used to find matches in the input string.
4. **Extracting Values**: The destructuring assignment is used to extract the matched groups, with default values set to 0 if the group is not present.
5. **Conversion to Milliseconds**: The extracted values are converted to milliseconds using the appropriate calculations.
6. **Error Handling**: If the input string does not match the expected format, a message is logged to the console, and `null` is returned.

This TypeScript code maintains the same functionality and logic as the original Python code.