Here's how you can convert the given Python code to TypeScript:

```typescript
function convertHmsToMilliseconds(timeStr: string): number | null {
    /**
     * Convert a time duration string in the format 'XhYminZs' to milliseconds.
     *
     * This function takes a string representing a time duration, where hours, minutes, and seconds
     * are optionally provided, and converts this duration into the equivalent number of milliseconds.
     *
     * @param {string} timeStr - A string representing the time duration, e.g., '1h20min30s'.
     * @returns {(number | null)} The equivalent duration in milliseconds, or null if the input is invalid.
     */
    
    // Regular expression to match the pattern XhYminZs
    const regex = /^(\d+)h(\d+)min(\d+)s$/;
    const matches = timeStr.match(regex);

    if (!matches) {
        return null; // Return null for invalid input
    }

    // Extract hours, minutes, and seconds from the matched groups
    const [hours, minutes, seconds] = matches.slice(1).map(Number);

    // Calculate total milliseconds
    const milliseconds = (hours * 60 * 60 + minutes * 60 + seconds) * 1000;

    return milliseconds;
}
```

### Explanation:
- **Regex Pattern**: The regular expression `^(\d+)h(\d+)min(\d+)s$` is used to validate the input string format. It ensures that the string starts with one or more digits followed by 'h', then one or more digits followed by 'min', and finally one or more digits followed by 's'.
  
- **Match Function**: The `match` method is used to extract parts of the string that match the regular expression. If no match is found, it returns `null`.

- **TypeScript Types**: In TypeScript, we use `number | null` to indicate that the function can return either a number or `null`. The `Number` constructor is used to convert the matched string parts into numbers.

- **Calculation**: The function calculates the total milliseconds by converting hours, minutes, and seconds to milliseconds and summing them up.

This TypeScript version maintains the functionality and type safety of the original Python function.