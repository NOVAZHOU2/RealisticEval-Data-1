Here’s the equivalent TypeScript Jest test suite for the provided C++ Catch2 test cases:

```typescript
// Test cases for the Queue class
import { Queue } from './Queue'; // Adjust the import according to your project structure

describe("Queue Operations", () => {
    let queue: Queue;

    beforeEach(() => {
        queue = new Queue(); // Create a new queue instance before each test
    });

    test("Queue should be empty initially", () => {
        expect(queue.isEmpty()).toBe(true);
    });

    test("Enqueue elements", () => {
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        expect(queue.isEmpty()).toBe(false);
        expect(queue.front()).toBe(10); // Front element should be 10
    });

    test("Dequeue elements", () => {
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        const value = queue.dequeue();
        expect(value).toBe(10); // First dequeued element should be 10
        expect(queue.front()).toBe(20); // Now front should be 20
    });

    test("Dequeue from an empty queue", () => {
        const value = queue.dequeue();
        expect(value).toBe(-1); // Should indicate that the queue is empty
    });

    test("Front element of an empty queue", () => {
        const frontValue = queue.front();
        expect(frontValue).toBe(-1); // Should indicate that the queue is empty
    });

    test("Queue should become empty after dequeuing all elements", () => {
        queue.enqueue(10);
        queue.enqueue(20);

        queue.dequeue(); // Remove 10
        queue.dequeue(); // Remove 20

        expect(queue.isEmpty()).toBe(true); // Queue should be empty
    });
});
```

### Key Adjustments Made:
- **Imports**: Adjusted for TypeScript’s module system.
- **Test Structure**: Used Jest's `describe` and `test` functions instead of Catch2's `TEST_CASE` and `SECTION`.
- **Assertions**: Converted `REQUIRE` assertions to Jest's `expect` syntax.

Feel free to reach out if you need more details or further modifications!