Hereâ€™s the Python equivalent of the provided C++ code, which implements a queue using a linked list structure. The code has been adapted to follow Python conventions, including using the None keyword and managing memory automatically (since Python has garbage collection).
python
class Node:
    """Node structure for linked list."""
    def __init__(self, val):
        """Initialize the node with data and a pointer to the next node."""
        self.data = val  # Data value of the node
        self.next = None  # Pointer to the next node in the linked list


class Queue:
    """Queue class using a linked list."""
    def __init__(self):
        """Initialize the queue."""
        self.head = None  # Pointer to the front of the queue
        self.tail = None  # Pointer to the end of the queue

    def is_empty(self):
        """Check if the queue is empty."""
        return self.head is None  # Queue is empty if head is None

    def enqueue(self, value):
        """Add an element to the end of the queue."""
        new_node = Node(value)  # Create a new node
        if self.tail:
            self.tail.next = new_node  # Link the new node at the end
        else:
            self.head = new_node  # If the queue is empty, the new node is also the head
        self.tail = new_node  # Update the tail to the new node

    def dequeue(self):
        """Remove and return the front element of the queue."""
        if self.is_empty():
            print("Queue is empty. Cannot dequeue.")
            return None  # Return None instead of -1 for invalid value
        temp = self.head  # Temporarily store the head node
        value = self.head.data  # Get the data from the head node
        self.head = self.head.next  # Move head to the next node
        if self.head is None:  # If the queue becomes empty
            self.tail = None  # Update the tail as well
        return value  # Return the dequeued value

    def front(self):
        """Get the front element without removing it."""
        if self.is_empty():
            print("Queue is empty. Cannot access front.")
            return None  # Return None instead of -1 for invalid value
        return self.head.data  # Return the front value
Explanation of the Code:
Node Class:
The Node class represents an individual node in the linked list.
It has two attributes: data, which stores the node's value, and next, which points to the next node in the list.
Queue Class:
The Queue class represents the queue data structure.
It initializes two pointers: head, pointing to the front of the queue, and tail, pointing to the end of the queue.
Methods:
is_empty(): Returns True if the queue is empty (i.e., head is None).
enqueue(value): Adds a new value to the end of the queue by creating a new Node. It updates the tail pointer and links the new node appropriately.
dequeue(): Removes the front element from the queue and returns its value. It also handles updating the head and tail pointers accordingly. If the queue is empty, it prints a message and returns None.
front(): Returns the value of the front element without removing it. It checks if the queue is empty before returning the value.
Notes:
In Python, memory management is handled automatically, so there is no need for manual deletion of nodes as done in C++ with delete.
Error handling is done using print statements instead of error streams, which is a common practice in Python.
Instead of using -1 as an invalid value, the code returns None to indicate that the queue is empty, which is more idiomatic in Python.