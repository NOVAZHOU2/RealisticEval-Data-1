Hereâ€™s the equivalent JavaScript test code using Jest, converting the provided C++ Catch2 test cases while maintaining the same logic and functionality:

```javascript
// Test cases for the Queue class
const Queue = require('./Queue'); // Adjust the path as needed

describe("Queue Operations", () => {
    let queue;

    beforeEach(() => {
        queue = new Queue(); // Create a new queue before each test
    });

    test("Queue should be empty initially", () => {
        expect(queue.isEmpty()).toBe(true);
    });

    test("Enqueue elements", () => {
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        expect(queue.isEmpty()).toBe(false);
        expect(queue.front()).toBe(10); // Front element should be 10
    });

    test("Dequeue elements", () => {
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        const value = queue.dequeue();
        expect(value).toBe(10); // First dequeued element should be 10
        expect(queue.front()).toBe(20); // Now front should be 20
    });

    test("Dequeue from an empty queue", () => {
        const value = queue.dequeue();
        expect(value).toBe(null); // Should indicate that the queue is empty
    });

    test("Front element of an empty queue", () => {
        const frontValue = queue.front();
        expect(frontValue).toBe(null); // Should indicate that the queue is empty
    });

    test("Queue should become empty after dequeuing all elements", () => {
        queue.enqueue(10);
        queue.enqueue(20);

        queue.dequeue(); // Remove 10
        queue.dequeue(); // Remove 20

        expect(queue.isEmpty()).toBe(true); // Queue should be empty
    });
});
```

### Changes Made:
1. **Test Framework Setup**: Used `describe` and `test` from Jest instead of `TEST_CASE` and `SECTION`.
2. **Assertions**: Replaced `REQUIRE` with `expect(...).toBe(...)` for assertions.
3. **Initialization**: Added a `beforeEach` hook to create a new `Queue` instance before each test.
4. **Return Values**: Adjusted return values in error cases to `null` instead of `-1`, which is more idiomatic in JavaScript.

This JavaScript code retains the structure and intent of the original C++ tests while adapting them to the Jest framework.