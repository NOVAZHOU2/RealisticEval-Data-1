Sure! Hereâ€™s the equivalent Python code that replicates the functionality of the provided C++ code. The function get_days_in_month calculates the number of days in a specified month of a given year, accounting for leap years and raising a ValueError if the month is invalid.
python
def get_days_in_month(year, month):
    """
    Returns the number of days in a given month of a given year.
    
    This function accounts for leap years when determining the number of 
    days in February. It raises a ValueError if the month is invalid.
    
    Args:
        year (int): The year to check (should be a positive integer).
        month (int): The month to check (1 for January, 12 for December).
        
    Returns:
        int: The number of days in the specified month of the specified year.
        
    Raises:
        ValueError: If the month is not between 1 and 12.
    """
    # Array storing the number of days in each month (index 0 is unused)
    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    
    # Validate month input
    if month < 1 or month > 12:
        raise ValueError("Month must be between 1 and 12")
    
    # Adjust for leap years if the month is February (month == 2)
    if month == 2:
        is_leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
        return 29 if is_leap_year else 28  # Return 29 if leap year, otherwise 28
    
    # Return the number of days in the specified month
    return days_in_month[month]

# Example usage:
try:
    year = 2024
    month = 2
    days = get_days_in_month(year, month)
    print(f"There are {days} days in {month}/{year}.")
except ValueError as e:
    print(e)
Explanation of the Code
Function Definition: The function get_days_in_month(year, month) takes two parameters: year and month.
Days in Each Month: The list days_in_month holds the number of days for each month, with the first index unused.
Month Validation: It checks if the month is between 1 and 12. If not, it raises a ValueError.
Leap Year Calculation: If the month is February, it checks if the year is a leap year using the rules of leap years:
A year is a leap year if it is divisible by 4 but not by 100, or it is divisible by 400.
Return Values: The function returns the correct number of days based on the month and whether it's a leap year or not.
Usage
An example usage is provided at the end of the script, which demonstrates how to call the function and handle any potential exceptions.