Hereâ€™s the translated C++ code into JavaScript, maintaining the same logic and functionality while adhering to JavaScript conventions and best practices:

```javascript
/**
 * @brief Returns the number of days in a given month of a given year.
 *
 * This function accounts for leap years when determining the number of
 * days in February. It throws an error if the month is invalid.
 *
 * @param {number} year The year to check (should be a positive integer).
 * @param {number} month The month to check (1 for January, 12 for December).
 * @return {number} The number of days in the specified month of the specified year.
 * @throws {RangeError} If the month is not between 1 and 12.
 */
function getDaysInMonth(year, month) {
    // Array storing the number of days in each month (index 0 is unused)
    const daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    // Validate month input
    if (month < 1 || month > 12) {
        throw new RangeError("Month must be between 1 and 12");
    }

    // Adjust for leap years if the month is February (month === 2)
    if (month === 2) {
        const isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
        return isLeapYear ? 29 : 28; // Return 29 if leap year, otherwise 28
    }

    // Return the number of days in the specified month
    return daysInMonth[month];
}
```

### Key Changes:
1. **Syntax Adjustments**: 
   - Changed `int` type declarations to `number`.
   - Used `const` for the `daysInMonth` array to ensure it cannot be reassigned.

2. **Error Handling**: 
   - Used `RangeError` instead of `std::invalid_argument` to throw an error in JavaScript.

3. **Strict Equality**: 
   - Used `===` for comparison to adhere to JavaScript best practices.

4. **Commenting Style**: 
   - Used JSDoc style comments for documentation. 

This JavaScript function behaves the same way as the original C++ function, accurately calculating the number of days in a specified month while handling leap years.