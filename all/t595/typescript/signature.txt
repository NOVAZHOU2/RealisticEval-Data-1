Hereâ€™s the TypeScript version of the provided C++ function, with comments converted to TypeScript style and type declarations adjusted accordingly:

```typescript
/**
 * @brief Returns the number of days in a given month of a given year.
 *
 * This function accounts for leap years when determining the number of
 * days in February. It throws an error if the month is invalid.
 *
 * @param year The year to check (should be a positive integer).
 * @param month The month to check (1 for January, 12 for December).
 * @return number The number of days in the specified month of the specified year.
 * @throws Error If the month is not between 1 and 12.
 */
function getDaysInMonth(year: number, month: number): number {
    // Array storing the number of days in each month (index 0 is unused)
    const daysInMonth: number[] = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    // Validate month input
    if (month < 1 || month > 12) {
        throw new Error("Month must be between 1 and 12");
    }

    // Adjust for leap years if the month is February (month == 2)
    if (month === 2) {
        const isLeapYear: boolean = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
        return isLeapYear ? 29 : 28; // Return 29 if leap year, otherwise 28
    }

    // Return the number of days in the specified month
    return daysInMonth[month];
}
```

### Key Changes:
1. **Type Annotations**: TypeScript uses `number` instead of `int`.
2. **Error Handling**: Instead of `std::invalid_argument`, we throw a generic `Error`.
3. **Comment Syntax**: Converted C++ style comments to TypeScript-style comments.
4. **Array Declaration**: Used TypeScript syntax for array initialization. 

This maintains the logic and functionality of the original C++ code while adapting it to TypeScript conventions.