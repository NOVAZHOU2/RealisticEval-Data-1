Sure, hereâ€™s the Java version of the given Python code, organized within the `org.real.temp` package and the `Answer` class:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;

public class Answer {

    /**
     * Calculates the minimum number of removals needed to make all elements in the list unique.
     * 
     * @param nums The list of integers.
     * @return The minimum number of removals required.
     */
    public static int minRemovalsToMakeUnique(List<Integer> nums) {
        List<Integer> numbers = new ArrayList<>();
        int minimumDistinct = 0;
        
        for (int number : nums) {
            if (numbers.contains(number)) {
                minimumDistinct++;
                numbers.remove(Integer.valueOf(number));
            }
            numbers.add(number);
        }
        
        return minimumDistinct;
    }

    public static void main(String[] args) {
        // Example usage
        List<Integer> nums = List.of(1, 2, 2, 3, 4, 4, 5);
        System.out.println(minRemovalsToMakeUnique(nums)); // Output will be the minimum number of removals
    }
}
```

### Explanation:
- **Package Declaration**: The code starts with the package declaration `package org.real.temp;`.
- **Class Definition**: The `Answer` class is defined within this package.
- **Method Signature**: The `minRemovalsToMakeUnique` method takes a `List<Integer>` as input and returns an `int`.
- **ArrayList Usage**: An `ArrayList` named `numbers` is used to store the elements.
- **Loop and Logic**: The loop iterates over each element in the input list `nums`. If the current number is already present in `numbers`, it is removed and `minimumDistinct` is incremented. Finally, the updated number is added to `numbers`.
- **Main Method**: A `main` method is included for testing purposes, demonstrating how to call the `minRemovalsToMakeUnique` method.

This Java code maintains the same functionality and logic as the original Python code, adapted to Java's syntax and conventions.