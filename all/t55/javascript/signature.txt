Certainly! I will convert the given Python function signature and comments into equivalent JavaScript syntax, including JSDoc comments for documentation.

Here's the converted JavaScript code:

```javascript
/**
 * Calculates the minimum number of elements to delete so that the elements in the array are not duplicate.
 * 
 * Example:
 *   input: [3, 3, 1, 2, 2, 1]
 *   output: 3
 *
 * @param {Array<number>} nums - Integer array of numbers
 * @returns {number} The minimum number of moves to make every value in nums unique
 */
function minRemovalsToMakeUnique(nums) {
    let numbers = [];
    let minimumDistinct = 0;
    for (let number of nums) {
        let index = numbers.indexOf(number);
        if (index !== -1) {
            minimumDistinct += 1;
            numbers.splice(index, 1);
        }
        numbers.push(number);
    }
    return minimumDistinct;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block provides a description of the function, an example, and details about the parameters and return type.
   - The `@param` tag specifies the parameter `nums` and its type (`Array<number>`).
   - The `@returns` tag specifies the return type (`number`).

2. **Function Definition**:
   - The function `minRemovalsToMakeUnique` takes an array `nums` as input.

3. **Variables**:
   - `numbers`: An array to store the processed numbers.
   - `minimumDistinct`: A counter to keep track of the number of distinct elements that need to be added.

4. **Loop Through Input Array**:
   - Iterate over each element `number` in the input array `nums`.

5. **Check for Duplicates**:
   - Use `indexOf` to find the index of `number` in `numbers`.
   - If the index is not `-1`, it means `number` is already in `numbers`.

6. **Remove Duplicate and Increment Counter**:
   - If `number` is found, increment `minimumDistinct` by 1 and remove `number` from `numbers` using `splice`.

7. **Add Current Number**:
   - Add `number` to `numbers` regardless of whether it was a duplicate or not.

8. **Return Result**:
   - Return the final count of `minimumDistinct`.

This JavaScript code preserves the functionality, logic, and structure of the original Python code, and includes proper JSDoc comments for documentation.