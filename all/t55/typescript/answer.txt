Certainly! Below is the equivalent TypeScript code for the given Python function. We'll use TypeScript's type system and adjust the logic to fit TypeScript conventions.

```typescript
function minRemovalsToMakeUnique(nums: number[]): number {
    let numbers: Set<number> = new Set();
    let minimumDistinct: number = 0;

    for (let number of nums) {
        if (numbers.has(number)) {
            minimumDistinct += 1;
        } else {
            numbers.add(number);
        }
    }

    return minimumDistinct;
}
```

### Explanation:
1. **Type Annotations**: The function `minRemovalsToMakeUnique` takes an array of numbers (`number[]`) and returns a number.
2. **Set Data Structure**: Instead of using an array to track unique numbers and manually removing duplicates, we use a `Set` which automatically ensures uniqueness.
3. **Logic**:
   - For each number in the input array `nums`, we check if it already exists in the `Set`.
   - If it does, we increment `minimumDistinct`.
   - If it doesn't, we add it to the `Set`.

This approach maintains the same functionality as the original Python code but leverages TypeScript's `Set` for more efficient and cleaner code.