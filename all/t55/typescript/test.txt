Certainly! Below is the equivalent Jest test suite in TypeScript for the provided Python unittest class. The test cases will use Jest's assertion methods to ensure the functionality is preserved.

### TypeScript Code with Jest Tests

First, ensure you have Jest and TypeScript set up in your project. You can install them using npm:

```sh
npm install --save-dev jest @types/jest ts-jest
```

Add Jest configuration to your `tsconfig.json` and `jest.config.js` files:

```json
// tsconfig.json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "skipLibCheck": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

```js
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  testRegex: '.*\\.spec\\.ts$',
  moduleFileExtensions: ['ts', 'js', 'json', 'node']
};
```

Now, here is the TypeScript code with Jest tests:

```typescript
import { minRemovalsToMakeUnique } from './path/to/your/function'; // Adjust the path as needed

describe('minRemovalsToMakeUnique', () => {
  it('test with a basic array where multiple removals are needed', () => {
    expect(minRemovalsToMakeUnique([3, 3, 1, 2, 2, 1])).toBe(3);
  });

  it('test an array where all elements are identical', () => {
    expect(minRemovalsToMakeUnique([4, 4, 4, 4])).toBe(3);
  });

  it('test an array where all elements are already unique', () => {
    expect(minRemovalsToMakeUnique([1, 2, 3, 4])).toBe(0);
  });

  it('test an empty array', () => {
    expect(minRemovalsToMakeUnique([])).toBe(0);
  });

  it('test a more complex case with a larger array', () => {
    expect(minRemovalsToMakeUnique([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])).toBe(6);
  });
});
```

### Explanation:
1. **Import Function**: Import the `minRemovalsToMakeUnique` function from the file where it is defined.
2. **Describe Block**: Use Jest's `describe` block to group the test cases.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Expect Assertions**: Use Jest's `expect` assertions to verify the expected outcomes.

### Running the Tests
To run the tests, execute the following command in your terminal:

```sh
npx jest
```

This setup ensures that the tests are structured and documented clearly, and the functionality is preserved when converting from Python unittest to TypeScript Jest.