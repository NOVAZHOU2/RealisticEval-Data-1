Certainly! Let's convert the given Python function into its equivalent C++ version, including comments and documentation standards.

Here is the equivalent C++ code:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>

// Function to calculate the minimum number of elements to delete so that the elements in the array are not duplicate.
// Example:
//     Input: [3, 3, 1, 2, 2, 1]
//     Output: 3

int min_removals_to_make_unique(const std::vector<int>& nums) {
    /*
        Given an integer array, calculate the minimum number of elements to delete so that the elements in the array are not duplicate.
        
        Args:
            nums (const std::vector<int>&): integer array of nums
        
        Returns:
            int: minimum number of moves to make every value in nums unique
    */

    std::unordered_set<int> numbers;
    int minimumDistinct = 0;

    for (int number : nums) {
        if (numbers.find(number) != numbers.end()) {
            minimumDistinct += 1;
        } else {
            numbers.insert(number);
        }
    }

    return minimumDistinct;
}

int main() {
    std::vector<int> nums = {3, 3, 1, 2, 2, 1};
    std::cout << "Minimum removals to make unique: " << min_removals_to_make_unique(nums) << std::endl;
    return 0;
}
```

### Explanation:
1. **Headers**:
   - `#include <iostream>` for input/output operations.
   - `#include <vector>` for using vectors.
   - `#include <unordered_set>` for using sets.

2. **Function Documentation**:
   - The function `min_removals_to_make_unique` is documented using both single-line and multi-line comments.
   - The purpose, example, arguments, and return values are clearly described.

3. **Function Definition**:
   - The function `min_removals_to_make_unique` takes a constant reference to a vector of integers (`const std::vector<int>& nums`) and returns an integer representing the minimum number of removals needed to make the elements unique.

4. **Data Structures**:
   - An `unordered_set<int>` named `numbers` is used to keep track of unique numbers encountered so far.
   - An integer `minimumDistinct` is used to count the number of duplicates encountered.

5. **Loop**:
   - A range-based for loop iterates over each element in the `nums` vector.
   - If the current number is already in the set, it increments `minimumDistinct`.
   - Otherwise, it inserts the number into the set.

6. **Main Function**:
   - A sample vector `nums` is created.
   - The function `min_removals_to_make_unique` is called with `nums`, and the result is printed.

This C++ code preserves the original purpose and structure of the Python code, including the comments and documentation.