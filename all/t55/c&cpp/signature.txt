Here is your Python function translated into C++ with comments kept:

```cpp
#include <vector>
#include <algorithm>

// Function declaration
int min_removals_to_make_unique(std::vector<int>& nums);

/**
 * @brief Calculate the minimum number of elements to delete so that the elements in the vector are not duplicate.
 *
 * Example:
 *      Input: {3, 3, 1, 2, 2, 1}
 *      Output: 3
 *
 * @param nums The vector of integers.
 * @return Minimum number of moves to make every value in nums unique.
 */
int min_removals_to_make_unique(std::vector<int>& nums) {
    // Sort the vector
    std::sort(nums.begin(), nums.end());

    int count = 0;
    for(int i=1; i<nums.size(); ++i){
        if(nums[i] == nums[i-1]){
            ++count;
            // If there's a duplicate, increase the current element by 1 to make it unique and increment the counter
            while(i+1 < nums.size() && nums[i] >= nums[i+1])
                nums[++i]++;
        }
    }

    return count;
}
```
This function first sorts the given vector. Then, it iterates over the sorted vector, comparing each element with its previous one. If they are equal, it increments the counter and increases the current element by 1 until it becomes unique or reaches the end of the vector. Finally, it returns the total count of removed duplicates.