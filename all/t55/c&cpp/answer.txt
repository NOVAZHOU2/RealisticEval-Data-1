Sure! Let's convert the given Python code into equivalent C++ code. We will maintain the same functionality and logic while adapting it to C++ syntax and features.

Hereâ€™s the equivalent C++ code:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>

int minRemovalsToMakeUnique(std::vector<int>& nums) {
    std::unordered_set<int> numbers;
    int minimumDistinct = 0;

    for (int number : nums) {
        if (numbers.find(number) != numbers.end()) {
            minimumDistinct += 1;
        } else {
            numbers.insert(number);
        }
    }

    return minimumDistinct;
}

int main() {
    std::vector<int> nums = {1, 2, 3, 2, 4, 3, 5};
    std::cout << "Minimum removals to make unique: " << minRemovalsToMakeUnique(nums) << std::endl;
    return 0;
}
```

### Explanation:
1. **Headers**: 
   - `#include <iostream>` for input/output operations.
   - `#include <vector>` for using vectors.
   - `#include <unordered_set>` for using sets.
   - `#include <unordered_map>` is not used here but included in case you need additional data structures.

2. **Function Definition**:
   - The function `minRemovalsToMakeUnique` takes a reference to a vector of integers (`std::vector<int>& nums`) and returns an integer representing the minimum number of removals needed to make the elements unique.

3. **Data Structures**:
   - An `unordered_set<int>` named `numbers` is used to keep track of unique numbers encountered so far.
   - An integer `minimumDistinct` is used to count the number of duplicates encountered.

4. **Loop**:
   - A range-based for loop iterates over each element in the `nums` vector.
   - If the current number is already in the set, it increments `minimumDistinct`.
   - Otherwise, it inserts the number into the set.

5. **Main Function**:
   - A sample vector `nums` is created.
   - The function `minRemovalsToMakeUnique` is called with `nums`, and the result is printed.

This C++ code maintains the same functionality and logic as the original Python code.