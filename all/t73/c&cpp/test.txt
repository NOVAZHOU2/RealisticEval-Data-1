Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class is converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <map>
#include <vector>
#include <string>
#include <stdexcept>

// Function to convert a map of vectors into a vector of maps
std::vector<std::map<std::string, std::string>> dict_of_lists_to_list_of_dicts(const std::map<std::string, std::vector<std::string>>& dict_of_lists) {
    // Check if all vectors are of the same length
    if (dict_of_lists.empty()) {
        return {};
    }

    size_t expected_length = dict_of_lists.begin()->second.size();
    for (const auto& pair : dict_of_lists) {
        if (pair.second.size() != expected_length) {
            throw std::invalid_argument("All vectors in the dictionary must have the same length.");
        }
    }

    // Using indices to iterate over vectors simultaneously
    std::vector<std::map<std::string, std::string>> list_of_dicts;
    for (size_t i = 0; i < expected_length; ++i) {
        std::map<std::string, std::string> current_dict;
        for (const auto& pair : dict_of_lists) {
            current_dict[pair.first] = pair.second[i];
        }
        list_of_dicts.push_back(current_dict);
    }

    return list_of_dicts;
}

TEST_CASE("TestDictOfListsToListOfDicts") {
    SECTION("test_standard_conversion") {
        // Test standard conversion with equal length lists
        std::map<std::string, std::vector<std::string>> dict_of_lists = {
            {"name", {"Alice", "Bob", "Charlie"}},
            {"age", {"25", "30", "35"}},
            {"city", {"New York", "Los Angeles", "Chicago"}}
        };
        std::vector<std::map<std::string, std::string>> expected_result = {
            {{"name", "Alice"}, {"age", "25"}, {"city", "New York"}},
            {{"name", "Bob"}, {"age", "30"}, {"city", "Los Angeles"}},
            {{"name", "Charlie"}, {"age", "35"}, {"city", "Chicago"}}
        };

        auto result = dict_of_lists_to_list_of_dicts(dict_of_lists);
        REQUIRE(result == expected_result);
    }

    SECTION("test_empty_lists") {
        // Test the function with empty lists
        std::map<std::string, std::vector<std::string>> dict_of_lists = {
            {"name", {}},
            {"age", {}},
            {"city", {}}
        };
        std::vector<std::map<std::string, std::string>> expected_result = {};

        auto result = dict_of_lists_to_list_of_dicts(dict_of_lists);
        REQUIRE(result == expected_result);
    }

    SECTION("test_single_element_lists") {
        // Test the function with single-element lists
        std::map<std::string, std::vector<std::string>> dict_of_lists = {
            {"name", {"Alice"}},
            {"age", {"25"}},
            {"city", {"New York"}}
        };
        std::vector<std::map<std::string, std::string>> expected_result = {
            {{"name", "Alice"}, {"age", "25"}, {"city", "New York"}}
        };

        auto result = dict_of_lists_to_list_of_dicts(dict_of_lists);
        REQUIRE(result == expected_result);
    }
}
```

### Explanation:
1. **Header Files**: Includes necessary header files (`<catch2/catch_test_macros.hpp>`, `<map>`, `<vector>`, `<string>`, `<stdexcept>`).
2. **Function Definition**: The function `dict_of_lists_to_list_of_dicts` takes a `std::map<std::string, std::vector<std::string>>` as input and returns a `std::vector<std::map<std::string, std::string>>`.
3. **Catch2 Test Suite**: The `TEST_CASE` macro defines the test suite, and each `SECTION` defines individual test cases.
4. **Test Cases**:
   - `test_standard_conversion`: Tests standard conversion with equal-length lists.
   - `test_empty_lists`: Tests the function with empty lists.
   - `test_single_element_lists`: Tests the function with single-element lists.
5. **Assertions**: Uses `REQUIRE` for assertions to ensure the results match the expected outcomes.

This code preserves the original purpose and structure of the Python unittest class while adapting to the syntax and features of the Catch2 testing framework in C++.