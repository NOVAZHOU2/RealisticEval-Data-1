Sure, here's the equivalent C++ code signature with the same comments:

```cpp
#include <vector>
#include <map>

/**
 * Convert a dictionary of lists into a list of dictionaries.
 *
 * @param dict_of_lists A map where each key has a vector as its value.
 * @return A vector of maps, where each item is a map formed by corresponding elements of vectors in the input map.
 */
std::vector<std::map<std::string, std::any>> dictOfListsToListOfMaps(const std::map<std::string, std::vector<std::any>>& dict_of_lists);
```

In this C++ version:
- `std::map` is used instead of Python's `dict`.
- `std::vector` is used instead of Python's `list`.
- `std::any` is used to handle different types of values within the lists, similar to Python's dynamic typing.

Note that C++ does not have built-in support for variable-length argument types like Python, so we use `std::any` to allow for any type of value. If you need to restrict the types, you can replace `std::any` with specific types.