Sure, here's how you can convert your Python unittest test class to a Java JUnit test case using the `org.junit` package:

```java
import static org.junit.Assert.assertEquals;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.Test;

public class Tester {

    @Test
    public void testDictOfListsToListOfDicts() {
        // Arrange
        Map<String, List<Integer>> dictOfLists = new HashMap<>();
        dictOfLists.put("a", Arrays.asList(1, 2, 3));
        dictOfLists.put("b", Arrays.asList(4, 5, 6));

        // Act
        List<Map<String, Integer>> listOfDicts = dictOfListsToListOfDicts(dictOfLists);

        // Assert
        assertEquals(3, listOfDicts.size());
        assertEquals(1, listOfDicts.get(0).get("a"));
        assertEquals(4, listOfDicts.get(1).get("b"));
        assertEquals(2, listOfDicts.get(0).get("a"));
        assertEquals(5, listOfDicts.get(1).get("b"));
        assertEquals(3, listOfDicts.get(0).get("a"));
        assertEquals(6, listOfDicts.get(1).get("b"));
    }

    private List<Map<String, Integer>> dictOfListsToListOfDicts(Map<String, List<Integer>> dictOfLists) {
        int maxLength = dictOfLists.values().stream()
                                  .mapToInt(List::size)
                                  .max()
                                  .orElse(0);
        
        List<Map<String, Integer>> result = new ArrayList<>(maxLength);
        
        for (int i = 0; i < maxLength; i++) {
            Map<String, Integer> map = new HashMap<>();
            for (Map.Entry<String, List<Integer>> entry : dictOfLists.entrySet()) {
                if (i < entry.getValue().size()) {
                    map.put(entry.getKey(), entry.getValue().get(i));
                }
            }
            result.add(map);
        }
        
        return result;
    }
}
```

### Explanation:
- **Annotations**: The `@Test` annotation marks the method as a test method that will be run by JUnit.
- **Assert Statements**: The `assertEquals` method is used to verify that the actual output matches the expected output.
- **Private Method**: The `dictOfListsToListOfDicts` method is kept private as it's not part of the test but rather a utility method used within the tests.

This Java JUnit test case should provide similar functionality to your original Python unittest test class. Make sure you have JUnit added to your project dependencies. If you're using Maven, you can add the following dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.13.2</version>
    <scope>test</scope>
</dependency>
```