Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.*;

public class Tester {

    private static final String NAME = "name";
    private static final String AGE = "age";
    private static final String CITY = "city";

    /**
     * Test standard conversion with equal length lists.
     */
    @Test
    public void testStandardConversion() {
        Map<String, List<Object>> dictOfLists = new HashMap<>();
        dictOfLists.put(NAME, Arrays.asList("Alice", "Bob", "Charlie"));
        dictOfLists.put(AGE, Arrays.asList(25, 30, 35));
        dictOfLists.put(CITY, Arrays.asList("New York", "Los Angeles", "Chicago"));

        List<Map<String, Object>> expectedResult = Arrays.asList(
            new HashMap<String, Object>() {{
                put(NAME, "Alice");
                put(AGE, 25);
                put(CITY, "New York");
            }},
            new HashMap<String, Object>() {{
                put(NAME, "Bob");
                put(AGE, 30);
                put(CITY, "Los Angeles");
            }},
            new HashMap<String, Object>() {{
                put(NAME, "Charlie");
                put(AGE, 35);
                put(CITY, "Chicago");
            }}
        );

        List<Map<String, Object>> result = dictOfListsToListOfDicts(dictOfLists);
        assertEquals(expectedResult, result);
    }

    /**
     * Test the function with empty lists.
     */
    @Test
    public void testEmptyLists() {
        Map<String, List<Object>> dictOfLists = new HashMap<>();
        dictOfLists.put(NAME, Collections.emptyList());
        dictOfLists.put(AGE, Collections.emptyList());
        dictOfLists.put(CITY, Collections.emptyList());

        List<Map<String, Object>> expectedResult = Collections.emptyList();

        List<Map<String, Object>> result = dictOfListsToListOfDicts(dictOfLists);
        assertEquals(expectedResult, result);
    }

    /**
     * Test the function with single-element lists.
     */
    @Test
    public void testSingleElementLists() {
        Map<String, List<Object>> dictOfLists = new HashMap<>();
        dictOfLists.put(NAME, Collections.singletonList("Alice"));
        dictOfLists.put(AGE, Collections.singletonList(25));
        dictOfLists.put(CITY, Collections.singletonList("New York"));

        List<Map<String, Object>> expectedResult = Collections.singletonList(
            new HashMap<String, Object>() {{
                put(NAME, "Alice");
                put(AGE, 25);
                put(CITY, "New York");
            }}
        );

        List<Map<String, Object>> result = dictOfListsToListOfDicts(dictOfLists);
        assertEquals(expectedResult, result);
    }

    // Method to be tested
    private List<Map<String, Object>> dictOfListsToListOfDicts(Map<String, List<Object>> mapOfLists) {
        // Check if all lists are of the same length
        if (mapOfLists.isEmpty()) {
            return Collections.emptyList();
        }

        int expectedSize = -1;
        for (List<Object> list : mapOfLists.values()) {
            if (expectedSize == -1) {
                expectedSize = list.size();
            } else if (list.size() != expectedSize) {
                throw new IllegalArgumentException("All lists in the map must have the same length.");
            }
        }

        // Using zip to iterate over lists simultaneously
        List<Map<String, Object>> listOfDicts = new ArrayList<>();
        for (int i = 0; i < expectedSize; i++) {
            Map<String, Object> dict = new HashMap<>();
            for (Map.Entry<String, List<Object>> entry : mapOfLists.entrySet()) {
                dict.put(entry.getKey(), entry.getValue().get(i));
            }
            listOfDicts.add(dict);
        }

        return listOfDicts;
    }
}
```

### Explanation:
1. **Package and Class Declaration**: The test class is placed in the package `org.real.temp` and named `Tester`.
2. **JUnit Annotations**: The `@Test` annotation is used to mark each test method.
3. **Assertion Methods**: The `assertEquals` method from JUnit is used to assert the expected results.
4. **Method Signature**: The method `dictOfListsToListOfDicts` is defined within the test class to be tested.
5. **Test Methods**:
   - `testStandardConversion`: Tests the standard conversion with equal-length lists.
   - `testEmptyLists`: Tests the function with empty lists.
   - `testSingleElementLists`: Tests the function with single-element lists.
6. **Data Types**: The data types are adjusted to match Java's syntax, using `Map<String, List<Object>>` and `List<Map<String, Object>>`.

This Java code preserves the functionality and logic of the original Python tests while adhering to Java's syntax and JUnit conventions.