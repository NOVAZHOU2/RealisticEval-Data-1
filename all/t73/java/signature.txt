Certainly! Here is the equivalent Java code for the given Python function, including appropriate Javadoc comments and type translations:

```java
import java.util.*;

public class Answer {

    /**
     * Convert a map of lists into a list of maps.
     *
     * @param mapOfLists A map where each key has a list as its value.
     * @return A list where each item is a map formed by corresponding elements of lists in the input map.
     * @throws IllegalArgumentException If lists in the map are of different lengths.
     */
    public static List<Map<String, Integer>> dictOfListsToListOfDicts(Map<String, List<Integer>> mapOfLists) throws IllegalArgumentException {
        // Check if all lists are of the same length
        if (mapOfLists.isEmpty()) {
            return Collections.emptyList();
        }

        int expectedSize = -1;
        for (List<Integer> list : mapOfLists.values()) {
            if (expectedSize == -1) {
                expectedSize = list.size();
            } else if (list.size() != expectedSize) {
                throw new IllegalArgumentException("All lists in the map must have the same length.");
            }
        }

        // Using zip to iterate over lists simultaneously
        List<Map<String, Integer>> listOfDicts = new ArrayList<>();
        for (int i = 0; i < expectedSize; i++) {
            Map<String, Integer> dict = new HashMap<>();
            for (Map.Entry<String, List<Integer>> entry : mapOfLists.entrySet()) {
                dict.put(entry.getKey(), entry.getValue().get(i));
            }
            listOfDicts.add(dict);
        }

        return listOfDicts;
    }

    public static void main(String[] args) {
        Map<String, List<Integer>> mapOfLists = new HashMap<>();
        mapOfLists.put("a", Arrays.asList(1, 2, 3));
        mapOfLists.put("b", Arrays.asList(4, 5, 6));

        try {
            List<Map<String, Integer>> listOfDicts = dictOfListsToListOfDicts(mapOfLists);
            System.out.println(listOfDicts);
        } catch (IllegalArgumentException e) {
            System.err.println(e.getMessage());
        }
    }
}
```

### Explanation:
1. **Package and Class Declaration**: The code is organized within the class `Answer`.
2. **Javadoc Comments**: The Python docstring is converted into a Javadoc comment block.
3. **Method Signature**: The method `dictOfListsToListOfDicts` takes a `Map<String, List<Integer>>` as input and returns a `List<Map<String, Integer>>`.
4. **Exception Handling**: An `IllegalArgumentException` is thrown if the lists in the map have different lengths.
5. **Logic Preservation**: The logic for checking the lengths of the lists and converting the map of lists into a list of maps is preserved.
6. **Main Method**: A simple example is provided in the `main` method to demonstrate the usage of the method.

This Java code maintains the functionality and structure of the original Python code while adhering to Java's syntax and conventions.