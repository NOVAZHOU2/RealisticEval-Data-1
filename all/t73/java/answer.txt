Here's how you can convert your Python function to Java:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Answer {

    public static List<Map<String, Object>> dictOfListsToListOfMaps(Map<String, List<Object>> dictOfLists) {
        List<Map<String, Object>> listOfMaps = new ArrayList<>();

        if (!dictOfLists.isEmpty()) {
            int maxListSize = dictOfLists.values().stream()
                    .mapToInt(List::size)
                    .max()
                    .getAsInt();

            for (int i = 0; i < maxListSize; i++) {
                Map<String, Object> map = new HashMap<>();
                for (Map.Entry<String, List<Object>> entry : dictOfLists.entrySet()) {
                    String key = entry.getKey();
                    List<Object> list = entry.getValue();
                    if (i < list.size()) {
                        map.put(key, list.get(i));
                    }
                }
                listOfMaps.add(map);
            }
        }

        return listOfMaps;
    }
}
```

This Java method does the same thing as your Python function. It takes a `Map<String, List<Object>>` and converts it into a `List<Map<String, Object>>`. The `Object` type is used because the lists could contain any type of object, and we don't know what types they will be until runtime. If the lists have different sizes, the smaller ones will be padded with `null`.

Please note that Java doesn't support optional parameters like Python, so the function parameter must not be null.