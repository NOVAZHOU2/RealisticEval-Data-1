Sure! Hereâ€™s the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Convert a dictionary of lists into a list of dictionaries.
 * 
 * @param dictOfLists - A dictionary where each key has a list as its value.
 * @returns A list where each item is a dictionary formed by corresponding elements of lists in the input dictionary.
 * @throws {Error} If lists in the dictionary are of different lengths.
 */
function dictOfListsToListOfDicts(dictOfLists: { [key: string]: any[] }): { [key: string]: any }[] {
    // Check if all lists are of the same length
    if (Object.keys(dictOfLists).length === 0) {
        return [];
    }
    const lengths = Object.values(dictOfLists).map(lst => lst.length);
    const uniqueLengths = new Set(lengths);
    if (uniqueLengths.size !== 1) {
        throw new Error("All lists in the dictionary must have the same length.");
    }

    // Using zip to iterate over lists simultaneously
    const keys = Object.keys(dictOfLists);
    const listOfDicts = keys[0]
        ? keys.map((_, index) => {
            return keys.reduce((acc, key) => {
                acc[key] = dictOfLists[key][index];
                return acc;
            }, {} as { [key: string]: any });
        })
        : [];

    return listOfDicts;
}

// Example usage
const exampleDictOfLists = {
    'a': [1, 2, 3],
    'b': [4, 5, 6],
    'c': [7, 8, 9]
};

try {
    const result = dictOfListsToListOfDicts(exampleDictOfLists);
    console.log(result);
} catch (error) {
    console.error(error);
}
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc-style documentation is added to provide clear descriptions of the function, parameters, and return type.
   - The `@param` tag describes the parameter `dictOfLists`.
   - The `@returns` tag describes the return type.
   - The `@throws` tag indicates that an error will be thrown if the lists in the dictionary are of different lengths.

2. **Type Annotations**:
   - The function `dictOfListsToListOfDicts` takes a dictionary (`{ [key: string]: any[] }`) as an argument.
   - The return type is `{ [key: string]: any }[]`, representing a list of dictionaries.

3. **Checking List Lengths**:
   - We use `Object.keys` and `Object.values` to get the keys and values from the dictionary.
   - We map the lengths of the lists and check if they are all the same using a `Set`.

4. **Converting Dictionary to List of Dictionaries**:
   - We use `Object.keys` to get the keys of the dictionary.
   - We then use a combination of `map` and `reduce` to create a list of dictionaries, where each dictionary corresponds to the elements at the same index across all lists.

5. **Example Usage**:
   - An example dictionary is provided, and the function is called with this dictionary.
   - Any errors are caught and logged to the console.

This TypeScript code preserves the functionality and structure of the original Python code while adhering to TypeScript's static type system and best practices for documentation.