Here is your Python function translated to TypeScript:

```typescript
function dictOfListsToListOfDicts(dictOfLists: {[key: string]: any[]}): { [key: string]: any }[] {
    const keys = Object.keys(dictOfLists);
    const length = Math.max(...keys.map(key => dictOfLists[key].length));
    
    return Array.from({ length }, (_, i) => {
        const result: { [key: string]: any } = {};
        for (const key of keys) {
            if (i < dictOfLists[key].length) {
                result[key] = dictOfLists[key][i];
            }
        }
        return result;
    });
}
```

This TypeScript function does exactly what your Python function does - it takes an object with arrays as values and returns an array of objects, where each object corresponds to one row of the original data. Note that unlike Python, TypeScript doesn't have built-in support for variable-length arguments or dynamic property names, so we need to use `Object.keys` and `Array.from` to iterate over the keys and indices. Also, because TypeScript doesn't have a direct equivalent to Python's `*args`, we can only accept an object with arrays as values. If you need to handle more complex cases, you may need to adjust the function accordingly.