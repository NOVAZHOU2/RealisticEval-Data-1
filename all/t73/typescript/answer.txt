Hereâ€™s the equivalent TypeScript code for the provided Python function:

```typescript
function dictOfListsToListOfDicts(dictOfLists: { [key: string]: any[] }): any[][] {
    // Check if all lists are of the same length
    if (Object.keys(dictOfLists).length === 0) {
        return [];
    }
    const lengths = Object.values(dictOfLists).map(lst => lst.length);
    const uniqueLengths = new Set(lengths);
    if (uniqueLengths.size !== 1) {
        throw new Error("All lists in the dictionary must have the same length.");
    }

    // Using zip to iterate over lists simultaneously
    const keys = Object.keys(dictOfLists);
    const listOfDicts = keys[0]
        ? keys.map((_, index) => {
            return keys.reduce((acc, key) => {
                acc[key] = dictOfLists[key][index];
                return acc;
            }, {} as { [key: string]: any });
        })
        : [];

    return listOfDicts;
}

// Example usage
const exampleDictOfLists = {
    'a': [1, 2, 3],
    'b': [4, 5, 6],
    'c': [7, 8, 9]
};

try {
    const result = dictOfListsToListOfDicts(exampleDictOfLists);
    console.log(result);
} catch (error) {
    console.error(error);
}
```

### Explanation:
1. **Type Annotations**:
   - The function `dictOfListsToListOfDicts` takes a dictionary (`{ [key: string]: any[] }`) as an argument.
   - The return type is `any[][]`, which represents a list of dictionaries.

2. **Checking List Lengths**:
   - We use `Object.keys` and `Object.values` to get the keys and values from the dictionary.
   - We map the lengths of the lists and check if they are all the same using a `Set`.

3. **Converting Dictionary to List of Dictionaries**:
   - We use `Object.keys` to get the keys of the dictionary.
   - We then use a combination of `map` and `reduce` to create a list of dictionaries, where each dictionary corresponds to the elements at the same index across all lists.

4. **Example Usage**:
   - An example dictionary is provided, and the function is called with this dictionary.
   - Any errors are caught and logged to the console.

This TypeScript code maintains the functionality and logic of the original Python code while adapting it to TypeScript's static type system and idiomatic practices.