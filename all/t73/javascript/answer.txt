Sure! Below is the equivalent JavaScript function that achieves the same functionality as your Python code:

```javascript
/**
 * Convert a dictionary of lists into a list of dictionaries.
 * @param {Object} dictOfLists - A dictionary where each key has a list as its value.
 * @returns {Array<Object>} - A list where each item is a dictionary formed by corresponding elements of lists in the input dictionary.
 */
function dictOfListsToListOfDicts(dictOfLists) {
    // Get all keys from the dictionary
    const keys = Object.keys(dictOfLists);
    
    // Find the maximum length among all lists to determine how many dictionaries we need
    const maxLength = Math.max(...keys.map(key => dictOfLists[key].length));
    
    // Initialize an array to hold the resulting list of dictionaries
    const listOfDicts = [];
    
    // Iterate over each index up to the maximum length
    for (let i = 0; i < maxLength; i++) {
        const newDict = {};
        
        // Iterate over each key and add the element at the current index to the new dictionary
        keys.forEach(key => {
            if (i < dictOfLists[key].length) {
                newDict[key] = dictOfLists[key][i];
            }
        });
        
        // Add the new dictionary to the list
        listOfDicts.push(newDict);
    }
    
    return listOfDicts;
}
```

### Explanation:
1. **Input Parameter**: The function takes a single parameter `dictOfLists`, which is expected to be an object where each key maps to an array.
2. **Extract Keys**: It extracts all keys from the input object using `Object.keys`.
3. **Determine Maximum Length**: It calculates the maximum length of any array in the input object to know how many dictionaries will be needed.
4. **Initialize Result Array**: An empty array `listOfDicts` is initialized to store the resulting dictionaries.
5. **Iterate Over Indices**: It iterates over each index up to the maximum length.
6. **Create New Dictionaries**: For each index, it creates a new dictionary (`newDict`) and populates it with values from the arrays corresponding to each key, ensuring not to access indices beyond the array's length.
7. **Add to Result Array**: Each newly created dictionary is added to the `listOfDicts` array.
8. **Return Result**: Finally, the function returns the `listOfDicts`.

This JavaScript function should work similarly to your original Python function.