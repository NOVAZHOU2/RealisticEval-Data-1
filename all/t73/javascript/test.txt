Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code

```python
import unittest

class TestDictOfListsToListOfDicts(unittest.TestCase):
    def test_standard_conversion(self):
        """Test standard conversion with equal length lists."""
        dict_of_lists = {
            "name": ["Alice", "Bob", "Charlie"],
            "age": [25, 30, 35],
            "city": ["New York", "Los Angeles", "Chicago"]
        }
        expected_result = [
            {'name': 'Alice', 'age': 25, 'city': 'New York'},
            {'name': 'Bob', 'age': 30, 'city': 'Los Angeles'},
            {'name': 'Charlie', 'age': 35, 'city': 'Chicago'}
        ]
        result = dict_of_lists_to_list_of_dicts(dict_of_lists)
        self.assertEqual(result, expected_result)

    def test_empty_lists(self):
        """Test the function with empty lists."""
        dict_of_lists = {
            "name": [],
            "age": [],
            "city": []
        }
        expected_result = []
        result = dict_of_lists_to_list_of_dicts(dict_of_lists)
        self.assertEqual(result, expected_result)

    def test_single_element_lists(self):
        """Test the function with single-element lists."""
        dict_of_lists = {
            "name": ["Alice"],
            "age": [25],
            "city": ["New York"]
        }
        expected_result = [
            {'name': 'Alice', 'age': 25, 'city': 'New York'}
        ]
        result = dict_of_lists_to_list_of_dicts(dict_of_lists)
        self.assertEqual(result, expected_result)
```

### Equivalent Jest Test Suite

```javascript
const dictOfListsToListOfDicts = require('./dictOfListsToListOfDicts'); // Import the function to be tested

describe('TestDictOfListsToListOfDicts', () => {
    describe('test_standard_conversion', () => {
        it('should correctly convert a dictionary of lists into a list of dictionaries with equal length lists', () => {
            const dictOfLists = {
                name: ['Alice', 'Bob', 'Charlie'],
                age: [25, 30, 35],
                city: ['New York', 'Los Angeles', 'Chicago']
            };
            const expectedResult = [
                { name: 'Alice', age: 25, city: 'New York' },
                { name: 'Bob', age: 30, city: 'Los Angeles' },
                { name: 'Charlie', age: 35, city: 'Chicago' }
            ];
            const result = dictOfListsToListOfDicts(dictOfLists);
            expect(result).toEqual(expectedResult);
        });
    });

    describe('test_empty_lists', () => {
        it('should handle empty lists correctly', () => {
            const dictOfLists = {
                name: [],
                age: [],
                city: []
            };
            const expectedResult = [];
            const result = dictOfListsToListOfDicts(dictOfLists);
            expect(result).toEqual(expectedResult);
        });
    });

    describe('test_single_element_lists', () => {
        it('should correctly convert a dictionary of single-element lists into a list of dictionaries', () => {
            const dictOfLists = {
                name: ['Alice'],
                age: [25],
                city: ['New York']
            };
            const expectedResult = [
                { name: 'Alice', age: 25, city: 'New York' }
            ];
            const result = dictOfListsToListOfDicts(dictOfLists);
            expect(result).toEqual(expectedResult);
        });
    });
});
```

### Explanation:
1. **Import Function**: The `dictOfListsToListOfDicts` function is imported at the beginning of the test file.
2. **Describe Blocks**: Each test case is wrapped in a `describe` block to provide context.
3. **It Blocks**: Each test case is defined using an `it` block, which describes the behavior being tested.
4. **Assertions**: The `expect` function is used to assert the equality of the results with the expected outcomes.
5. **Data Structures**: The data structures and expected results are defined in the same way as in the Python code.
6. **Function Calls**: The `dictOfListsToListOfDicts` function is called with the test data, and the results are compared using `expect`.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adapting to Jest's syntax and conventions.