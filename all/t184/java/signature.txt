Here's the equivalent Java code for the provided C++ class signatures, with appropriate Javadoc comments and conversions of types and methods to fit Java conventions:

```java
import java.util.ArrayList;
import java.util.List;

/**
 * A class representing a max-heap priority queue.
 */
public class PriorityQueue {
    private List<Integer> heap; // This will store the elements of the heap

    /** 
     * Constructor to initialize the priority queue.
     */
    public PriorityQueue() {
        heap = new ArrayList<>();
    }

    /**
     * Helper function to get the index of the parent.
     * 
     * @param index The index of the child node.
     * @return The index of the parent node.
     */
    private int parent(int index) {
        return (index - 1) / 2;
    }

    /**
     * Helper function to get the index of the left child.
     * 
     * @param index The index of the parent node.
     * @return The index of the left child node.
     */
    private int leftChild(int index) {
        return 2 * index + 1;
    }

    /**
     * Helper function to get the index of the right child.
     * 
     * @param index The index of the parent node.
     * @return The index of the right child node.
     */
    private int rightChild(int index) {
        return 2 * index + 2;
    }

    /**
     * Helper function to swap two elements in the heap.
     * 
     * @param aIndex The index of the first element.
     * @param bIndex The index of the second element.
     */
    private void swap(int aIndex, int bIndex) {
        int temp = heap.get(aIndex);
        heap.set(aIndex, heap.get(bIndex));
        heap.set(bIndex, temp);
    }

    /**
     * Heapify up to maintain the max-heap property after insertion.
     * 
     * @param index The index of the newly inserted element.
     */
    private void heapifyUp(int index) {
        while (index > 0 && heap.get(parent(index)) < heap.get(index)) {
            swap(parent(index), index);
            index = parent(index);
        }
    }

    /**
     * Heapify down to maintain the max-heap property after deletion.
     * 
     * @param index The index of the element to be heapified down.
     */
    private void heapifyDown(int index) {
        int size = heap.size();
        int largest = index;

        int left = leftChild(index);
        int right = rightChild(index);

        if (left < size && heap.get(left) > heap.get(largest)) {
            largest = left;
        }

        if (right < size && heap.get(right) > heap.get(largest)) {
            largest = right;
        }

        if (largest != index) {
            swap(index, largest);
            heapifyDown(largest);
        }
    }

    /**
     * Insert an element into the priority queue.
     * 
     * @param value The value to be inserted.
     */
    public void push(int value) {
        heap.add(value);
        heapifyUp(heap.size() - 1);
    }

    /**
     * Remove the maximum element from the priority queue.
     * 
     * @throws RuntimeException if the priority queue is empty.
     */
    public void pop() {
        if (heap.isEmpty()) {
            throw new RuntimeException("Priority queue is empty");
        }
        heap.set(0, heap.get(heap.size() - 1));
        heap.remove(heap.size() - 1);
        if (!heap.isEmpty()) {
            heapifyDown(0);
        }
    }

    /**
     * Get the maximum element without removing it.
     * 
     * @return The maximum element.
     * @throws RuntimeException if the priority queue is empty.
     */
    public int top() {
        if (heap.isEmpty()) {
            throw new RuntimeException("Priority queue is empty");
        }
        return heap.get(0);
    }

    /**
     * Check if the priority queue is empty.
     * 
     * @return true if the priority queue is empty, false otherwise.
     */
    public boolean isEmpty() {
        return heap.isEmpty();
    }

    /**
     * Get the size of the priority queue.
     * 
     * @return The number of elements in the priority queue.
     */
    public int size() {
        return heap.size();
    }
}
```

### Key Adaptations:
1. **Class and Method Annotations**: Translated C++ comments into Java-style Javadoc comments for better documentation.
2. **Constructor**: Added a constructor to initialize the `heap`.
3. **Method Signatures**: Adjusted methods for visibility and return types.
4. **Runtime Exceptions**: Used `RuntimeException` for error handling similar to C++ exceptions.
5. **Types**: Converted C++ types (like `int`) directly to Java's `int`. 

This Java version preserves the structure and functionality of the original C++ code while adhering to Java conventions.