Hereâ€™s how you can convert the provided TypeScript function to Java:

```java
public class StringFormatter {
    public static String camelCaseToCapitalizedWithSpaces(String input) {
        // Use a regular expression to insert spaces before capital letters and numbers
        String spacedString = input.replaceAll("([A-Z0-9])", " $1");

        // Capitalize the first letter of each word
        String[] words = spacedString.split(" ");
        StringBuilder capitalizedString = new StringBuilder();

        for (String word : words) {
            if (word.length() > 0) {
                capitalizedString.append(Character.toUpperCase(word.charAt(0)))
                                 .append(word.substring(1))
                                 .append(" ");
            }
        }

        // Trim any leading spaces and return the result
        return capitalizedString.toString().trim();
    }

    public static void main(String[] args) {
        String input = "thisIsAnExample123";
        String result = camelCaseToCapitalizedWithSpaces(input);
        System.out.println(result); // Output: "This Is An Example 123"
    }
}
```

### Explanation:

1. **Regex Replacement**: In Java, we use `replaceAll` to achieve the same regex replacement as in TypeScript.
2. **Capitalization**: We split the string into words, capitalize the first letter of each, and use `StringBuilder` to construct the final string.
3. **Trimming**: Finally, we trim any extra spaces before returning the result. 

You can test the `main` method with different input strings to see how it works!