Certainly! Here’s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. We will use Jest’s assertion methods to match the behavior of Python’s `unittest` framework.

First, let's define the `compressWhitespace` function in TypeScript:

```typescript
/**
 * Compresses multiple consecutive whitespace characters in a string into a single space.
 *
 * @param {string} inputString - The string to be processed.
 * @returns {string} The processed string with compressed whitespace.
 */
function compressWhitespace(inputString: string): string {
    // Split the input string by one or more whitespace characters and join with a single space
    return inputString.split(/\s+/).join(' ');
}
```

Next, we'll write the Jest test suite:

```typescript
import { compressWhitespace } from './path/to/your/function'; // Adjust the import path as needed

describe('compressWhitespace', () => {
    it('should handle strings with single spaces', () => {
        expect(compressWhitespace("This is a test string.")).toBe("This is a test string.");
    });

    it('should handle strings with multiple spaces', () => {
        expect(compressWhitespace("This    is  a   test   string.")).toBe("This is a test string.");
    });

    it('should handle strings with leading and trailing spaces', () => {
        expect(compressWhitespace("   Leading and trailing spaces   ")).toBe("Leading and trailing spaces");
    });

    it('should handle strings with only spaces', () => {
        expect(compressWhitespace("       ")).toBe("");
    });

    it('should handle empty strings', () => {
        expect(compressWhitespace("")).toBe("");
    });
});
```

### Explanation:
1. **Function Definition**:
   - The `compressWhitespace` function is defined with proper type annotations and JSDoc documentation.

2. **Jest Test Suite**:
   - The `describe` block groups the tests under the `compressWhitespace` function.
   - Each `it` block represents a specific test case.
   - Jest’s `expect` method is used to assert the expected behavior of the function.

3. **Import Statement**:
   - Adjust the import statement to point to the correct location of the `compressWhitespace` function.

4. **Test Cases**:
   - Each test case uses `expect` with the appropriate assertion method (`toBe` in this case) to verify the expected output.

This setup ensures that the TypeScript code is well-structured and follows best practices for testing with Jest.