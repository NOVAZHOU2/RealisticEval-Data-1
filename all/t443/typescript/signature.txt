Certainly! Hereâ€™s the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Compresses multiple consecutive whitespace characters in a string into a single space.
 *
 * @param {string} inputString - The string to be processed.
 * @returns {string} The processed string with compressed whitespace.
 */
function compressWhitespace(inputString: string): string {
    // Split the input string by one or more whitespace characters and join with a single space
    return inputString.split(/\s+/).join(' ');
}

// Example usage
const exampleString = "This    is  a\ttest\nstring.";
console.log(compressWhitespace(exampleString));  // Output: "This is a test string."
```

### Explanation:
1. **Function Definition**:
   - The function `compressWhitespace` is defined with a parameter `inputString` of type `string` and returns a `string`.

2. **JSDoc Documentation**:
   - The JSDoc comment block provides detailed documentation for the function, including the parameters and return type.
   - `@param {string} inputString` describes the input parameter.
   - `@returns {string}` describes the return value.

3. **Implementation**:
   - `split(/\s+/)` splits the input string by one or more whitespace characters (spaces, tabs, newlines, etc.).
   - `join(' ')` joins the resulting array elements back into a string, using a single space as the separator.

This approach ensures that the TypeScript code is well-documented and maintains the same functionality as the original Python code.