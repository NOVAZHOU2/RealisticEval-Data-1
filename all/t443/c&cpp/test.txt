Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. This will preserve the functionality and logic of the tests, ensuring that the assertions are appropriately translated.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 using the following headers:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <sstream>
```

Now, let's define the `compress_whitespace` function and the test cases using Catch2:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <sstream>

// Compress multiple consecutive whitespace characters in a string into a single space.
//
// Args:
//     input_string (const std::string&): The string to be processed.
//
// Returns:
//     std::string: The processed string with compressed whitespace.
std::string compress_whitespace(const std::string& input_string) {
    std::istringstream iss(input_string);
    std::string token;
    std::string result;

    // Read each word from the input string and append it to the result with a single space
    while (iss >> token) {
        if (!result.empty()) {
            result += " ";
        }
        result += token;
    }

    return result;
}

TEST_CASE("Test compress_whitespace function", "[compress_whitespace]") {
    SECTION("Test with a string containing single spaces") {
        std::string input = "This is a test string.";
        std::string expected = "This is a test string.";
        REQUIRE(compress_whitespace(input) == expected);
    }

    SECTION("Test with a string containing multiple spaces") {
        std::string input = "This    is  a   test   string.";
        std::string expected = "This is a test string.";
        REQUIRE(compress_whitespace(input) == expected);
    }

    SECTION("Test with leading and trailing spaces") {
        std::string input = "   Leading and trailing spaces   ";
        std::string expected = "Leading and trailing spaces";
        REQUIRE(compress_whitespace(input) == expected);
    }

    SECTION("Test with a string containing only spaces") {
        std::string input = "       ";
        std::string expected = "";
        REQUIRE(compress_whitespace(input) == expected);
    }

    SECTION("Test with an empty string") {
        std::string input = "";
        std::string expected = "";
        REQUIRE(compress_whitespace(input) == expected);
    }
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<catch2/catch_test_macros.hpp>`, `<string>`, `<sstream>`) are included.
2. **Function Definition**: The `compress_whitespace` function is defined to compress multiple consecutive whitespace characters into a single space.
3. **Test Cases**:
   - Each test case is defined within a `SECTION` in the `TEST_CASE` macro.
   - The `REQUIRE` macro is used to assert the expected results.
4. **Documentation**: Comments are added to describe the purpose and behavior of the function and test cases.

This setup ensures that the functionality and logic of the tests are preserved, and the assertions are appropriately translated into Catch2.