To convert the provided Python unittest test class into an equivalent test class using Catch2 in C++, we'll need to define the `compress_whitespace` function first and then create a test suite using Catch2. Below is the step-by-step conversion:

1. **Define the `compress_whitespace` function** in C++.
2. **Create a test suite** using Catch2 to validate the functionality of `compress_whitespace`.

Here's how you can do it:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>

// Function to compress multiple consecutive whitespace characters into a single space.
std::string compress_whitespace(const std::string& input_string) {
    std::string result;
    bool in_whitespace = false;

    for (char ch : input_string) {
        if (std::isspace(ch)) {
            if (!in_whitespace) {
                result += ' ';
                in_whitespace = true;
            }
        } else {
            result += ch;
            in_whitespace = false;
        }
    }

    // Remove leading spaces if any
    size_t start = result.find_first_not_of(' ');
    if (start == std::string::npos) return "";  // string is all whitespace
    return result.substr(start);
}

TEST_CASE("Compressing whitespace", "[compress_whitespace]") {
    SECTION("Single space") {
        REQUIRE(compress_whitespace("hello world") == "hello world");
    }

    SECTION("Multiple consecutive spaces") {
        REQUIRE(compress_whitespace("hello   world") == "hello world");
    }

    SECTION("Leading and trailing spaces") {
        REQUIRE(compress_whitespace("  hello  world  ") == "hello world");
    }

    SECTION("All spaces") {
        REQUIRE(compress_whitespace("      ") == " ");
    }

    SECTION("No spaces") {
        REQUIRE(compress_whitespace("helloworld") == "helloworld");
    }

    SECTION("Mixed content") {
        REQUIRE(compress_whitespace("hello  world  again") == "hello world again");
    }
}
```

### Explanation:
1. **Function Definition**: 
   - The `compress_whitespace` function takes a `std::string` as input and returns a `std::string` with compressed whitespace.
   - It uses a flag `in_whitespace` to track whether the current character is part of a sequence of whitespace characters.

2. **Test Suite**:
   - The `TEST_CASE` macro defines a test case named "Compressing whitespace" with tags `[compress_whitespace]`.
   - Each `SECTION` within the test case checks a specific scenario using `REQUIRE` assertions to ensure the expected behavior of the `compress_whitespace` function.

This setup ensures that the functionality and logic of the tests are preserved, and the assertions are appropriately used in Catch2.