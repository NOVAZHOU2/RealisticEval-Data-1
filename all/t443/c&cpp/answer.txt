Hereâ€™s the equivalent C++ code for the provided Python function, which compresses multiple consecutive whitespace characters into a single space:

```cpp
#include <iostream>
#include <sstream>
#include <string>

std::string compress_whitespace(const std::string& input_string) {
    /**
     * Compress multiple consecutive whitespace characters in a string into a single space.
     *
     * Parameters:
     * input_string (const std::string&): The string to be processed.
     *
     * Returns:
     * std::string: The processed string with compressed whitespace.
     */

    std::istringstream iss(input_string);
    std::string token;
    std::string result;

    // Extract tokens separated by whitespace and join them with a single space
    while (iss >> token) {
        if (!result.empty()) {
            result += " ";
        }
        result += token;
    }

    return result;
}

int main() {
    std::string test_string = "This    is  a   test  string";
    std::string compressed_string = compress_whitespace(test_string);
    std::cout << "Original: \"" << test_string << "\"\n";
    std::cout << "Compressed: \"" << compressed_string << "\"\n";

    return 0;
}
```

### Explanation:
1. **Include Files**: The necessary headers (`<iostream>`, `<sstream>`, and `<string>`) are included.
2. **Function Definition**: The `compress_whitespace` function takes a `const std::string&` as its parameter and returns a `std::string`.
3. **String Stream**: An `std::istringstream` object (`iss`) is created from the input string to split it based on whitespace.
4. **Token Extraction**: Tokens are extracted from the `istringstream` object and concatenated with a single space.
5. **Result Construction**: The resulting string is constructed by joining the tokens with a single space.
6. **Main Function**: A test case is provided in the `main` function to demonstrate the functionality.