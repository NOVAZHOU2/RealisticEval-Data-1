Hereâ€™s the equivalent C++ code for the provided Python function, which compresses multiple consecutive whitespace characters into a single space:

```cpp
#include <iostream>
#include <sstream>
#include <string>

std::string compress_whitespace(const std::string& input_string) {
    /**
     * Compress multiple consecutive whitespace characters in a string into a single space.
     *
     * Parameters:
     * input_string (const std::string&): The string to be processed.
     *
     * Returns:
     * std::string: The processed string with compressed whitespace.
     */

    std::istringstream iss(input_string);
    std::string token;
    std::string result;

    // Read each word from the input string and append it to the result with a single space
    while (iss >> token) {
        if (!result.empty()) {
            result += " ";
        }
        result += token;
    }

    return result;
}

int main() {
    std::string test_string = "This    is  a   test string";
    std::string compressed_string = compress_whitespace(test_string);
    std::cout << "Original: \"" << test_string << "\"\n";
    std::cout << "Compressed: \"" << compressed_string << "\"\n";

    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<iostream>`, `<sstream>`, `<string>`) are included.
2. **Function Definition**: The `compress_whitespace` function takes a `const std::string&` as its parameter and returns a `std::string`.
3. **String Stream**: An `std::istringstream` object `iss` is created to read words from the input string.
4. **Tokenization**: Each word is read using `iss >> token`.
5. **Result Construction**: The words are appended to the `result` string with a single space between them.
6. **Main Function**: A test string is provided, and the `compress_whitespace` function is called to demonstrate its functionality. The original and compressed strings are printed to the console.