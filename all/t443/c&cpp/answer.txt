Hereâ€™s the equivalent C++ code for the provided Python function. This C++ code uses the `<sstream>` library to split the string by whitespace and then joins them with a single space, replicating the functionality of the Python code:

```cpp
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

// Function to compress multiple consecutive whitespace characters into a single space
std::string compress_whitespace(const std::string& input_string) {
    std::istringstream iss(input_string);
    std::vector<std::string> tokens;
    std::string token;
    
    // Split the input string by whitespace
    while (iss >> token) {
        tokens.push_back(token);
    }
    
    // Join the tokens with a single space
    std::string result;
    for (size_t i = 0; i < tokens.size(); ++i) {
        result += tokens[i];
        if (i != tokens.size() - 1) {
            result += " ";
        }
    }
    
    return result;
}

int main() {
    std::string input = "This   is  an example    string";
    std::string output = compress_whitespace(input);
    std::cout << output << std::endl;  // Output: "This is an example string"
    return 0;
}
```

### Explanation:
1. **Header Files**: Included necessary headers (`<iostream>`, `<sstream>`, `<string>`, `<vector>`).
2. **Function Definition**: Defined `compress_whitespace` function which takes a string and returns a string.
3. **String Splitting**: Used `std::istringstream` to split the input string by whitespace and store each word in a vector.
4. **Joining Tokens**: Iterated over the vector and joined the words with a single space.
5. **Main Function**: Demonstrated the usage of the function with a sample input and printed the output.