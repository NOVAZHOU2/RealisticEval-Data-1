Sure! Here is the equivalent C++ code for the provided Python function, including appropriate comments and documentation:

```cpp
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

/**
 * Compress multiple consecutive whitespace characters in a string into a single space.
 *
 * @param input_string The string to be processed.
 * @return The processed string with compressed whitespace.
 */
std::string compress_whitespace(const std::string& input_string) {
    std::istringstream iss(input_string);
    std::vector<std::string> tokens;
    std::string token;

    // Split the input string by whitespace
    while (iss >> token) {
        tokens.push_back(token);
    }

    // Join the tokens with a single space
    std::string result;
    for (size_t i = 0; i < tokens.size(); ++i) {
        result += tokens[i];
        if (i != tokens.size() - 1) {
            result += " ";
        }
    }

    return result;
}

int main() {
    std::string input = "This   is  an example    string";
    std::string output = compress_whitespace(input);
    std::cout << output << std::endl;  // Output: "This is an example string"
    return 0;
}
```

### Explanation:
1. **Header Files**: Included necessary headers (`<iostream>`, `<sstream>`, `<string>`, `<vector>`).
2. **Function Documentation**: Added a multi-line comment block using `/** ... */` to document the function, including the purpose, parameters, and return value.
3. **Function Definition**: Defined `compress_whitespace` function which takes a `const std::string&` (a reference to a string) and returns a `std::string`.
4. **String Splitting**: Used `std::istringstream` to split the input string by whitespace and store each word in a vector.
5. **Joining Tokens**: Iterated over the vector and joined the words with a single space.
6. **Main Function**: Demonstrated the usage of the function with a sample input and printed the output.

This code preserves the original purpose and structure of the Python code while adhering to C++ standards and best practices.