Sure! Below is the equivalent JavaScript code using Jest to test the `compressWhitespace` function. I'll provide the complete Jest test suite that mirrors the functionality and logic of the Python unittest.

### Python Code:
```python
import unittest

def compress_whitespace(input_string: str):
    """
    Compress multiple consecutive whitespace characters in a string into a single space.

    Args:
        input_string (str): The string to be processed.

    Returns:
        str: The processed string with compressed whitespace.
    """
    return ' '.join(input_string.split())

class TestCompressWhitespace(unittest.TestCase):

    def test_compress_whitespace(self):
        self.assertEqual(compress_whitespace("  Hello  World  "), "Hello World")
        self.assertEqual(compress_whitespace("  This  is  a  test  "), "This is a test")
        self.assertEqual(compress_whitespace("NoExtraSpaces"), "NoExtraSpaces")
        self.assertEqual(compress_whitespace("  Leading  and  trailing  "), "Leading and trailing")
        self.assertEqual(compress_whitespace("  Multiple   spaces   "), "Multiple spaces")

if __name__ == '__main__':
    unittest.main()
```

### JavaScript Code Using Jest:
```javascript
// compressWhitespace.js
/**
 * Compress multiple consecutive whitespace characters in a string into a single space.
 *
 * @param {string} inputString - The string to be processed.
 * @returns {string} - The processed string with compressed whitespace.
 */
function compressWhitespace(inputString) {
    // Split the input string by whitespace and join with a single space
    return inputString.split(/\s+/).join(' ');
}

module.exports = compressWhitespace;
```

### Jest Test Suite:
```javascript
// compressWhitespace.test.js
const compressWhitespace = require('./compressWhitespace');

describe('compressWhitespace', () => {
    it('should compress multiple consecutive whitespace characters into a single space', () => {
        expect(compressWhitespace("  Hello  World  ")).toBe("Hello World");
        expect(compressWhitespace("  This  is  a  test  ")).toBe("This is a test");
        expect(compressWhitespace("NoExtraSpaces")).toBe("NoExtraSpaces");
        expect(compressWhitespace("  Leading  and  trailing  ")).toBe("Leading and trailing");
        expect(compressWhitespace("  Multiple   spaces   ")).toBe("Multiple spaces");
    });
});
```

### Explanation:
1. **Function Definition**:
   - The `compressWhitespace` function is defined in `compressWhitespace.js`, mirroring the Python function's logic.

2. **Jest Test Suite**:
   - The Jest test suite is defined in `compressWhitespace.test.js`.
   - The `describe` block sets up a test suite for the `compressWhitespace` function.
   - The `it` block contains individual test cases.
   - `expect` is used to assert the expected behavior of the function.
   - Each test case uses `toBe` to check if the output matches the expected result.

### Key Differences:
- **Module Export**: In JavaScript, we use `module.exports` to export the function.
- **Import/Require**: In Jest, we use `require` to import the function from another file.
- **Test Structure**: Jest uses `describe` and `it` blocks to organize and describe the tests, similar to how `unittest.TestCase` methods are structured in Python.

This setup ensures that the functionality and logic of the tests are preserved while adhering to the conventions of Jest testing.