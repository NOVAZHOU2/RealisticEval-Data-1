Sure! Below is the equivalent Java JUnit test case for your Python unittest test class. Note that I'll assume you want to test a method named `compressWhitespace` in a class named `Tester`.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    @Test
    public void testCompressWhitespace() {
        assertEquals("hello world", compressWhitespace("  hello   world "));
        assertEquals("single word", compressWhitespace("single word"));
        assertEquals("", compressWhitespace(""));
        assertEquals(" ", compressWhitespace(" "));
        assertEquals("nochange", compressWhitespace("nochange"));
        assertEquals("multiple  spaces", compressWhitespace("multiple  spaces"));
    }

    /**
     * Compress multiple consecutive whitespace characters in a string into a single space.
     *
     * @param inputString The string to be processed.
     * @return The processed string with compressed whitespace.
     */
    public String compressWhitespace(String inputString) {
        return inputString.replaceAll("\\s+", " ");
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration is `org.real.temp`.
2. **Class Declaration**: The class name is `Tester`.
3. **Test Method**: The `testCompressWhitespace` method contains several assertions to test different scenarios of the `compressWhitespace` method.
4. **Method Implementation**: The `compressWhitespace` method uses Java's `replaceAll` method to replace one or more whitespace characters (`\\s+`) with a single space.

This should give you a good starting point for testing your Java method using JUnit.