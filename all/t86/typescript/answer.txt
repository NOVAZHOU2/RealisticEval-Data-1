Certainly! Below is the TypeScript code that implements the same functionality as the provided Python code:

```typescript
function bresenhamLine(x1: number, y1: number, x2: number, y2: number): [number, number][] {
    let points: [number, number][] = [];
    let dx = Math.abs(x2 - x1);
    let dy = -Math.abs(y2 - y1);
    let sx = x1 < x2 ? 1 : -1;
    let sy = y1 < y2 ? 1 : -1;
    let err = dx + dy; // error value e_xy

    while (true) {
        points.push([x1, y1]);
        if (x1 === x2 && y1 === y2) {
            break;
        }
        let e2 = 2 * err;
        if (e2 >= dy) { // e_xy+e_x > 0
            err += dy;
            x1 += sx;
        }
        if (e2 <= dx) { // e_xy+e_y < 0
            err += dx;
            y1 += sy;
        }
    }

    return points;
}

// Example usage
console.log(bresenhamLine(1, 1, 8, 5));
```

### Explanation:
1. **Function Definition**: The function `bresenhamLine` is defined with four parameters, each of type `number`.
2. **Variable Definitions**:
   - `points`: An array of tuples `[number, number]` to store the generated coordinates.
   - `dx`, `dy`, `sx`, `sy`, and `err` are initialized similarly to the Python code.
3. **While Loop**: The loop continues until `x1` and `y1` reach `x2` and `y2`, respectively.
4. **Error Calculation**: The error value `e2` is calculated as `2 * err`.
5. **Coordinate Updates**: Based on the conditions, `x1` and `y1` are updated, and the error value `err` is adjusted accordingly.
6. **Return Statement**: The function returns the array of points.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate type definitions and syntax adjustments.