Here is your Python function translated into TypeScript:

```typescript
function bresenhamLine(x1: number, y1: number, x2: number, y2: number): Array<[number, number]> {
    // Your implementation here
}
```

Please note that you need to implement the actual logic of the Bresenham's line algorithm in TypeScript. Here's a simple version of it:

```typescript
function bresenhamLine(x1: number, y1: number, x2: number, y2: number): Array<[number, number]> {
    let dx = Math.abs(x2 - x1);
    let dy = Math.abs(y2 - y1);
    let sx = (x1 < x2) ? 1 : -1;
    let sy = (y1 < y2) ? 1 : -1;
    let err = dx - dy;

    let result: Array<[number, number]> = [];

    while(true){
        result.push([x1, y1]);

        if ((x1 === x2) && (y1 === y2)) break;
        
        let e2 = 2 * err;
        if(e2 > -dy){ 
            err -= dy; 
            x1 += sx; 
        }
        if(e2 < dx){ 
            err += dx; 
            y1 += sy; 
        }
    }

    return result;
}
```
This code generates integer coordinates on the line from `(x1, y1)` to `(x2, y2)` using Bresenham's line algorithm. It returns a list where each element is a tuple containing the `x` and `y` coordinates of a point on the line.