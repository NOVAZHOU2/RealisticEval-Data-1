Certainly! Below is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Generates integer coordinates on the line from (x1, y1) to (x2, y2) using Bresenham's line algorithm.
 *
 * Bresenham's algorithm calculates the points of an approximately straight line between two given points on a grid.
 * It is particularly well-suited for computer graphics where an efficient, integer-based algorithm is needed to
 * determine which points should be rasterized to represent the line.
 *
 * @param x1 - The x-coordinate of the starting point of the line.
 * @param y1 - The y-coordinate of the starting point of the line.
 * @param x2 - The x-coordinate of the ending point of the line.
 * @param y2 - The y-coordinate of the ending point of the line.
 * @returns An array of tuples, where each tuple contains the x and y coordinates of a point on the line.
 */
function bresenhamLine(x1: number, y1: number, x2: number, y2: number): [number, number][] {
    let points: [number, number][] = [];
    let dx = Math.abs(x2 - x1);
    let dy = -Math.abs(y2 - y1);
    let sx = x1 < x2 ? 1 : -1;
    let sy = y1 < y2 ? 1 : -1;
    let err = dx + dy; // error value e_xy

    while (true) {
        points.push([x1, y1]);
        if (x1 === x2 && y1 === y2) {
            break;
        }
        let e2 = 2 * err;
        if (e2 >= dy) { // e_xy+e_x > 0
            err += dy;
            x1 += sx;
        }
        if (e2 <= dx) { // e_xy+e_y < 0
            err += dx;
            y1 += sy;
        }
    }

    return points;
}

// Example usage
console.log(bresenhamLine(1, 1, 8, 5));
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc comment block is used to document the function, its parameters, and its return type.
   - Each parameter and the return type are documented with their descriptions.

2. **Function Signature**:
   - The function `bresenhamLine` is defined with four parameters, each of type `number`.
   - The return type is specified as an array of tuples `[number, number][]`.

3. **Implementation**:
   - The implementation remains the same as the Python code, with appropriate TypeScript syntax adjustments.
   - Variables and logic are translated directly from Python to TypeScript.

This TypeScript code preserves the original functionality and structure of the Python code, with proper type annotations and JSDoc documentation.