Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest class will be converted to a Jest test suite with appropriate assertions.

### TypeScript Code with Jest Testing

First, ensure you have Jest installed in your TypeScript project:

```sh
npm install --save-dev jest @types/jest ts-jest
```

Add the necessary Jest configuration to your `tsconfig.json` or `jest.config.js`:

```json
{
  "preset": "ts-jest",
  "testEnvironment": "node"
}
```

Now, here is the TypeScript test class using Jest:

```typescript
import { bresenhamLine } from './path/to/bresenhamLine'; // Import the bresenhamLine function

describe('Bresenham Line Algorithm', () => {
  it('should generate horizontal line correctly', () => {
    expect(bresenhamLine(1, 5, 5, 5)).toEqual([
      [1, 5],
      [2, 5],
      [3, 5],
      [4, 5],
      [5, 5]
    ]);
  });

  it('should generate vertical line correctly', () => {
    expect(bresenhamLine(3, 2, 3, 6)).toEqual([
      [3, 2],
      [3, 3],
      [3, 4],
      [3, 5],
      [3, 6]
    ]);
  });

  it('should generate diagonal line correctly', () => {
    expect(bresenhamLine(2, 2, 6, 6)).toEqual([
      [2, 2],
      [3, 3],
      [4, 4],
      [5, 5],
      [6, 6]
    ]);
  });

  it('should generate steep slope correctly', () => {
    expect(bresenhamLine(1, 1, 4, 6)).toEqual([
      [1, 1],
      [2, 2],
      [2, 3],
      [3, 4],
      [3, 5],
      [4, 6]
    ]);
  });

  it('should generate negative slope correctly', () => {
    expect(bresenhamLine(5, 1, 1, 5)).toEqual([
      [5, 1],
      [4, 2],
      [3, 3],
      [2, 4],
      [1, 5]
    ]);
  });
});
```

### Explanation:
1. **Importing the Function**:
   - Import the `bresenhamLine` function from the appropriate module.

2. **Test Suite**:
   - Use `describe` to group the tests under a descriptive name.

3. **Test Cases**:
   - Each test case uses `it` to describe the expected behavior.
   - `expect` is used to assert the expected output using `toEqual` to match arrays of tuples.

4. **Assertions**:
   - The `toEqual` matcher is used to compare the actual result with the expected result.

### Running the Tests
To run the tests, use the following command:

```sh
npx jest
```

This setup ensures that the tests are structured and executed correctly in TypeScript using Jest, preserving the functionality and logic of the original Python unittest class.