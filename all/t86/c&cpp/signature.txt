```cpp
#include <vector>
#include <utility> // For std::pair

/**
 * Generates integer coordinates on the line from (x1, y1) to (x2, y2) using Bresenham's line algorithm.
 *
 * Bresenham's algorithm calculates the points of an approximately straight line between two given points on a grid.
 * It is particularly well-suited for computer graphics where an efficient, integer-based algorithm is needed to
 * determine which points should be rasterized to represent the line.
 *
 * @param x1 The x-coordinate of the starting point of the line.
 * @param y1 The y-coordinate of the starting point of the line.
 * @param x2 The x-coordinate of the ending point of the line.
 * @param y2 The y-coordinate of the ending point of the line.
 * @return A vector of pairs, where each pair contains the x and y coordinates of a point on the line.
 */
std::vector<std::pair<int, int>> bresenham_line(int x1, int y1, int x2, int y2) {
    std::vector<std::pair<int, int>> points;
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int sx = (x1 < x2) ? 1 : -1;
    int sy = (y1 < y2) ? 1 : -1;
    int err = dx - dy;

    while (true) {
        points.push_back(std::make_pair(x1, y1));
        if ((x1 == x2) && (y1 == y2)) break;
        int e2 = 2 * err;
        if (e2 > -dy) { err -= dy; x1 += sx; }
        if (e2 < dx) { err += dx; y1 += sy; }
    }

    return points;
}
```

This C++ code defines a function `bresenham_line` that implements Bresenham's line drawing algorithm. It takes four integer parameters representing the start and end points of a line in a 2D plane and returns a vector of pairs, where each pair represents an integer coordinate along the line. The function includes detailed comments explaining its purpose, arguments, and return value, mirroring the Python function signature provided.