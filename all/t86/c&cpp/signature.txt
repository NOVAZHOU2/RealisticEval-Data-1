Certainly! Below is the equivalent C++ code for the given Python function, including the conversion of the function signature, comments, and documentation to adhere to C++ standards.

```cpp
#include <vector>
#include <utility> // For std::pair
#include <cmath>   // For std::abs

/**
 * Generates integer coordinates on the line from (x1, y1) to (x2, y2) using Bresenham's line algorithm.
 *
 * Bresenham's algorithm calculates the points of an approximately straight line between two given points on a grid.
 * It is particularly well-suited for computer graphics where an efficient, integer-based algorithm is needed to
 * determine which points should be rasterized to represent the line.
 *
 * @param x1 The x-coordinate of the starting point of the line.
 * @param y1 The y-coordinate of the starting point of the line.
 * @param x2 The x-coordinate of the ending point of the line.
 * @param y2 The y-coordinate of the ending point of the line.
 * @return A vector where each pair contains the x and y coordinates of a point on the line.
 */
std::vector<std::pair<int, int>> bresenham_line(int x1, int y1, int x2, int y2) {
    std::vector<std::pair<int, int>> points;
    int dx = std::abs(x2 - x1);
    int dy = -std::abs(y2 - y1);
    int sx = (x1 < x2) ? 1 : -1;
    int sy = (y1 < y2) ? 1 : -1;
    int err = dx + dy;  // error value e_xy

    while (true) {
        points.push_back(std::make_pair(x1, y1));
        if (x1 == x2 && y1 == y2) {
            break;
        }
        int e2 = 2 * err;
        if (e2 >= dy) {  // e_xy+e_x > 0
            err += dy;
            x1 += sx;
        }
        if (e2 <= dx) {  // e_xy+e_y < 0
            err += dx;
            y1 += sy;
        }
    }

    return points;
}

// Example usage
int main() {
    std::vector<std::pair<int, int>> line_points = bresenham_line(0, 0, 5, 3);
    for (const auto& point : line_points) {
        std::cout << "(" << point.first << ", " << point.second << ")" << std::endl;
    }
    return 0;
}
```

### Explanation:
1. **Headers**: The necessary headers (`<vector>`, `<utility>`, `<cmath>`) are included to use `std::vector`, `std::pair`, and `std::abs`.
2. **Function Documentation**: The Python docstring is converted into a multi-line comment block using `/** */` in C++.
3. **Function Signature**: The function `bresenham_line` takes four integers as input and returns a vector of pairs representing the coordinates.
4. **Variables**: Variables `dx`, `dy`, `sx`, `sy`, and `err` are declared and initialized similarly to the Python code.
5. **Loop**: The loop continues until the current point matches the end point.
6. **Error Calculation**: The error value `e2` is calculated and used to update the coordinates and error value.
7. **Return Value**: The function returns the vector of points.
8. **Example Usage**: An example usage of the function is provided in the `main` function.

This C++ code preserves the original purpose and structure of the Python code while adhering to C++ syntax and documentation standards.