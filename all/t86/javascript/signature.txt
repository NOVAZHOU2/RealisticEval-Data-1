Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Generates integer coordinates on the line from (x1, y1) to (x2, y2) using Bresenham's line algorithm.
 *
 * Bresenham's algorithm calculates the points of an approximately straight line between two given points on a grid.
 * It is particularly well-suited for computer graphics where an efficient, integer-based algorithm is needed to
 * determine which points should be rasterized to represent the line.
 *
 * @param {number} x1 - The x-coordinate of the starting point of the line.
 * @param {number} y1 - The y-coordinate of the starting point of the line.
 * @param {number} x2 - The x-coordinate of the ending point of the line.
 * @param {number} y2 - The y-coordinate of the ending point of the line.
 * @returns {Array.<Array.<number>>} An array where each sub-array contains the x and y coordinates of a point on the line.
 */
function bresenhamLine(x1, y1, x2, y2) {
    const points = [];
    const dx = Math.abs(x2 - x1);
    const dy = -Math.abs(y2 - y1);
    const sx = (x1 < x2) ? 1 : -1;
    const sy = (y1 < y2) ? 1 : -1;
    let err = dx + dy;  // error value e_xy

    while (true) {
        points.push([x1, y1]);
        if (x1 === x2 && y1 === y2) {
            break;
        }
        const e2 = 2 * err;
        if (e2 >= dy) {  // e_xy + e_x > 0
            err += dy;
            x1 += sx;
        }
        if (e2 <= dx) {  // e_xy + e_y < 0
            err += dx;
            y1 += sy;
        }
    }

    return points;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block provides a detailed description of the function and its parameters.
   - Each parameter is documented with its type and a brief description.
   - The return type is documented as an array of arrays, where each sub-array contains the x and y coordinates of a point on the line.

2. **Function Signature**:
   - The function `bresenhamLine` is defined with four parameters: `x1`, `y1`, `x2`, and `y2`.

3. **Initialization**:
   - `dx`: Absolute difference between `x1` and `x2`.
   - `dy`: Negative absolute difference between `y1` and `y2`.
   - `sx`: Sign of the direction for `x` (1 if `x1 < x2`, -1 otherwise).
   - `sy`: Sign of the direction for `y` (1 if `y1 < y2`, -1 otherwise).
   - `err`: Initial error value set to `dx + dy`.

4. **Loop**:
   - Continuously append the current `(x1, y1)` coordinate to the `points` array.
   - Check if `x1` and `y1` have reached `x2` and `y2`. If so, break the loop.
   - Calculate `e2` as twice the error value.
   - Adjust `x1` and `y1` based on the conditions:
     - If `e2 >= dy`, increment `x1` by `sx` and update `err`.
     - If `e2 <= dx`, increment `y1` by `sy` and update `err`.

5. **Return**:
   - Return the `points` array containing all the integer coordinates on the line.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JSDoc documentation standards.