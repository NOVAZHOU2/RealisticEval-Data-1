Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Unittest Code:
```python
import unittest

class TestBresenhamLineAlgorithm(unittest.TestCase):
    def test_horizontal_line(self):
        self.assertEqual(bresenham_line(1, 5, 5, 5), [(1, 5), (2, 5), (3, 5), (4, 5), (5, 5)])

    def test_vertical_line(self):
        self.assertEqual(bresenham_line(3, 2, 3, 6), [(3, 2), (3, 3), (3, 4), (3, 5), (3, 6)])

    def test_diagonal_line(self):
        self.assertEqual(bresenham_line(2, 2, 6, 6), [(2, 2), (3, 3), (4, 4), (5, 5), (6, 6)])

    def test_steep_slope(self):
        self.assertEqual(bresenham_line(1, 1, 4, 6), [(1, 1), (2, 2), (2, 3), (3, 4), (3, 5), (4, 6)])

    def test_negative_slope(self):
        self.assertEqual(bresenham_line(5, 1, 1, 5), [(5, 1), (4, 2), (3, 3), (2, 4), (1, 5)])
```

### Equivalent Jest Test Suite:
```javascript
const bresenhamLine = require('./bresenhamLine'); // Import the bresenhamLine function

describe('Bresenham Line Algorithm', () => {
    it('should generate horizontal line correctly', () => {
        expect(bresenhamLine(1, 5, 5, 5)).toEqual([
            [1, 5], [2, 5], [3, 5], [4, 5], [5, 5]
        ]);
    });

    it('should generate vertical line correctly', () => {
        expect(bresenhamLine(3, 2, 3, 6)).toEqual([
            [3, 2], [3, 3], [3, 4], [3, 5], [3, 6]
        ]);
    });

    it('should generate diagonal line correctly', () => {
        expect(bresenhamLine(2, 2, 6, 6)).toEqual([
            [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]
        ]);
    });

    it('should generate steep slope line correctly', () => {
        expect(bresenhamLine(1, 1, 4, 6)).toEqual([
            [1, 1], [2, 2], [2, 3], [3, 4], [3, 5], [4, 6]
        ]);
    });

    it('should generate negative slope line correctly', () => {
        expect(bresenhamLine(5, 1, 1, 5)).toEqual([
            [5, 1], [4, 2], [3, 3], [2, 4], [1, 5]
        ]);
    });
});
```

### Explanation:
1. **Import Statement**:
   - In Jest, you need to import the `bresenhamLine` function from the file where it is defined. This assumes that the `bresenhamLine` function is exported from a file named `bresenhamLine.js`.

2. **Test Suite Description**:
   - The `describe` function is used to group related tests together. Here, it is used to describe the "Bresenham Line Algorithm" test suite.

3. **Test Cases**:
   - Each test case is defined using the `it` function, which takes a description and a callback function.
   - Inside each test case, the `expect` function is used to assert the expected outcome of the `bresenhamLine` function.
   - The `toEqual` matcher is used to compare the actual result with the expected result.

4. **Data Structures**:
   - In Python, tuples are used to represent points. In JavaScript, arrays are used instead. Therefore, the expected results are represented as arrays of arrays (`[[x, y], ...]`).

By following these steps, the Jest test suite maintains the same functionality and logic as the original Python unittest class, ensuring that all assertions are properly mapped to their Jest equivalents.