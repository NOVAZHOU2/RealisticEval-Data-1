Sure, here is how you can convert your Python `unittest` test class into a Jest test case in JavaScript:

```javascript
// Import necessary packages
const { expect } = require('@jest/globals');

// Function to generate integer coordinates on the line from (x1, y1) to (x2, y2)
function bresenhamLine(x1, y1, x2, y2) {
    // Implementation of Bresenham's line algorithm goes here
}

// Test cases using Jest
describe('Bresenham Line Algorithm', () => {
    it('should return correct points for horizontal line', () => {
        const result = bresenhamLine(0, 0, 5, 0);
        expect(result).toEqual([[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0]]);
    });

    it('should return correct points for vertical line', () => {
        const result = bresenhamLine(0, 0, 0, 5);
        expect(result).toEqual([[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]]);
    });

    it('should return correct points for diagonal line', () => {
        const result = bresenhamLine(0, 0, 5, 5);
        expect(result).toEqual([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]);
    });
});
```

### Explanation:
1. **Importing Jest**: We import the `expect` function from `@jest/globals`. This is a common way to set up Jest tests.
2. **Function Definition**: The `bresenhamLine` function is defined similarly to your Python version.
3. **Test Suite with `describe`**: We define a test suite using the `describe` function, providing a description of what the suite is testing.
4. **Individual Tests with `it`**: Each test case is defined using the `it` function. We provide a description of the test and the actual test logic within a callback function.
5. **Assertions with `expect`**: We use the `expect` function along with matchers like `.toEqual()` to assert that the output of the `bresenhamLine` function matches the expected results.

Make sure to implement the actual Bresenham's line algorithm in the `bresenhamLine` function before running these tests.