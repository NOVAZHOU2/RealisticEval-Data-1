Here's how to convert the provided TypeScript function to Python, while preserving the functionality and comments:
TypeScript Code
typescript
/** 
 * Formats a number as currency according to the specified locale and currency code.
 *
 * @param value - The numerical value to be formatted.
 * @param currencyCode - The currency code (e.g., "USD", "EUR").
 * @param locale - The locale string (e.g., "en-US", "fr-FR"). Default is "en-US".
 * @returns The formatted currency string.
 */
function formatCurrency(
    value: number,
    currencyCode: string,
    locale: string = "en-US"
): string {
    const options: Intl.NumberFormatOptions = {
        style: "currency",
        currency: currencyCode
    };
    return new Intl.NumberFormat(locale, options).format(value);
}
Python Code
python
import locale
from babel.numbers import format_currency as babel_format_currency

def format_currency(value: float, currency_code: str, locale_str: str = "en_US") -> str:
    """
    Formats a number as currency according to the specified locale and currency code.

    Args:
        value (float): The numerical value to be formatted.
        currency_code (str): The currency code (e.g., "USD", "EUR").
        locale_str (str): The locale string (e.g., "en_US", "fr_FR"). Default is "en_US".

    Returns:
        str: The formatted currency string.
    """
    return babel_format_currency(value, currency_code, locale=locale_str)

# Example usage
if __name__ == "__main__":
    print(format_currency(1234.56, 'USD'))  # Output: \$1,234.56
    print(format_currency(1234.56, 'EUR', 'fr_FR'))  # Output: 1 234,56 â‚¬
Explanation of Changes:
Imports:
The locale module can be used for setting and formatting locale settings, but in this case, we utilize the babel library to handle currency formatting. Make sure to install babel using pip install Babel.
Function Definition:
The function name remains the same: format_currency.
The parameters are defined similarly, with value being a float, and locale defaulting to "en_US" (the format used by the Babel library).
Docstring:
The TypeScript comments are converted into a Python docstring. Python uses triple quotes (""") for multi-line strings.
Currency Formatting:
Instead of using Intl.NumberFormat, we use babel.numbers.format_currency, which formats the currency based on the specified locale and currency code.
Main Block:
An example usage block is included to demonstrate how to call the function and print formatted currency strings.
Usage:
You can use this function to format currency values in different locales and with different currency codes, similar to the original TypeScript function. Make sure you have the babel library installed to use this code effectively.