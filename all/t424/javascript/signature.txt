Sure! Below is the JavaScript version of your Python code with comments preserved:

```javascript
/**
 * Implements Dijkstra's algorithm to find the shortest path from the start node to all other nodes in the graph.
 * @param {Object} graph - A dictionary representing the adjacency list of the graph. Each key is a node, 
 *                          and the value is an array of arrays [neighbor, weight].
 * @param {string} start - The starting node for the shortest path search.
 * @returns {Object} - A dictionary with the shortest distance from the start node to each node.
 */
function dijkstra(graph, start) {
    // Initialize distances to Infinity for all nodes except the start node
    let distances = {};
    for (let node in graph) {
        distances[node] = Infinity;
    }
    distances[start] = 0;

    // Priority queue to store nodes to be processed
    let pq = [];
    pq.push([start, 0]);

    while (pq.length > 0) {
        // Get the node with the smallest distance
        let current = pq.shift();
        let currentNode = current[0];
        let currentDistance = current[1];

        // If we've found a shorter path to the current node, ignore this iteration
        if (currentDistance > distances[currentNode]) continue;

        // Explore neighbors
        for (let neighbor of graph[currentNode]) {
            let [nextNode, weight] = neighbor;
            let distance = currentDistance + weight;

            // Only consider this new path if it's better
            if (distance < distances[nextNode]) {
                distances[nextNode] = distance;
                pq.push([nextNode, distance]);
            }
        }
    }

    return distances;
}
```

This JavaScript function `dijkstra` follows the same logic as your original Python implementation, using a priority queue to keep track of nodes to process based on their current shortest known distance.