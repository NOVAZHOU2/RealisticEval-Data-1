Here's the equivalent TypeScript code for the given Python function:

```typescript
import { Dictionary } from "lodash";

/**
 * Implements Dijkstra's algorithm to find the shortest path from the start node to all other nodes in the graph.
 * @param graph - A dictionary representing the adjacency list of the graph. Each key is a node, and the value is an array of tuples (neighbor, weight).
 * @param start - The starting node for the shortest path search.
 * @returns A dictionary with the shortest distance from the start node to each node.
 */
function dijkstra(graph: Dictionary<[string, number][]>, start: string): Dictionary<number> {
    // Implementation goes here
}
```

In this TypeScript version:

- `from typing import Dict` is replaced with importing `Dictionary` from lodash, which provides a similar interface to Python's `Dict`.
- The function signature includes JSDoc comments for documentation.
- The type annotation for the `graph` parameter is `Dictionary<[string, number][]>`, indicating a dictionary where the values are arrays of tuples containing a string (neighbor) and a number (weight).
- The return type is `Dictionary<number>`, indicating a dictionary with string keys and number values.

You can implement the actual logic inside the `dijkstra` function as needed.