Certainly! Below is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Implements Dijkstra's algorithm to find the shortest path from the start node to all other nodes in the graph.
 * 
 * @param graph - A dictionary representing the adjacency list of the graph. Each key is a node, and the value is a list of tuples (neighbor, weight).
 * @param start - The starting node for the shortest path search.
 * @returns A dictionary with the shortest distance from the start node to each node.
 */
function dijkstra(graph: Record<string, Array<[string, number]>>, start: string): Record<string, number> {
    // Priority queue for the minimum distance nodes
    const queue = new PriorityQueue<[number, string]>((a, b) => a[0] - b[0]);
    // Dictionary to store the shortest path to each node
    const shortestPaths: Record<string, number> = {};
    Object.keys(graph).forEach(node => {
        shortestPaths[node] = Infinity;
    });
    shortestPaths[start] = 0;
    // Push the starting node with distance 0 into the queue
    queue.enqueue([0, start]);

    while (!queue.isEmpty()) {
        const [currentDistance, currentNode] = queue.dequeue()!;
        
        // If the distance is greater than the recorded shortest path, skip processing
        if (currentDistance > shortestPaths[currentNode]) {
            continue;
        }

        // Explore neighbors
        for (const [neighbor, weight] of graph[currentNode]) {
            const distance = currentDistance + weight;

            // Only consider this new path if it's better
            if (distance < shortestPaths[neighbor]) {
                shortestPaths[neighbor] = distance;
                queue.enqueue([distance, neighbor]);
            }
        }
    }

    return shortestPaths;
}

// Example usage
const graph: Record<string, Array<[string, number]>> = {
    'A': [['B', 1], ['C', 4]],
    'B': [['A', 1], ['C', 2], ['D', 5]],
    'C': [['A', 4], ['B', 2], ['D', 1]],
    'D': [['B', 5], ['C', 1]]
};

console.log(dijkstra(graph, 'A'));
```

### Explanation:
1. **Type Annotations**:
   - `graph`: A dictionary representing the adjacency list of the graph, where keys are strings and values are arrays of tuples `[string, number]`.
   - `start`: A string representing the starting node.
   - `shortestPaths`: A dictionary mapping nodes to their shortest distances, where keys are strings and values are numbers.

2. **JSDoc Documentation**:
   - The function signature is documented using JSDoc comments, providing clear descriptions of parameters and return types.

3. **Priority Queue**:
   - The `PriorityQueue` class from the `typescript-collections` library is used to manage the priority queue.

4. **Initialization**:
   - The `shortestPaths` object is initialized with `Infinity` for all nodes except the starting node, which is set to 0.

5. **Main Loop**:
   - The main loop processes the queue until it is empty, updating the shortest paths as needed.

6. **Example Usage**:
   - An example graph is provided to demonstrate how to call the `dijkstra` function.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and best practices.