Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included:

### TypeScript Code with Jest Testing

```typescript
import { dijkstra } from './path-to-dijkstra'; // Import the dijkstra function

describe('Dijkstra Algorithm Tests', () => {
    let graph1: Record<string, Array<[string, number]>>;
    let graph2: Record<string, Array<[string, number]>>;
    let graphWithIsolatedNode: Record<string, Array<[string, number]>>;
    let graphWithNegativeWeight: Record<string, Array<[string, number]>>;

    beforeEach(() => {
        // Sample graphs for testing
        graph1 = {
            'A': [['B', 1], ['C', 4]],
            'B': [['A', 1], ['C', 2], ['D', 5]],
            'C': [['A', 4], ['B', 2], ['D', 1]],
            'D': [['B', 5], ['C', 1]],
        };

        graph2 = {
            'A': [['B', 2]],
            'B': [['A', 2], ['C', 3]],
            'C': [['B', 3], ['D', 1]],
            'D': [['C', 1]],
        };

        graphWithIsolatedNode = {
            'A': [['B', 1]],
            'B': [['A', 1]],
            'C': [],  // Isolated node
        };

        graphWithNegativeWeight = {
            'A': [['B', 2], ['C', 1]],
            'B': [['D', 3]],
            'C': [['B', -1], ['D', 4]],
            'D': [],
        };
    });

    it('should compute shortest paths in a normal graph', () => {
        const expected = { 'A': 0, 'B': 1, 'C': 3, 'D': 4 };
        const result = dijkstra(graph1, 'A');
        expect(result).toEqual(expected);
    });

    it('should compute shortest paths in a different normal graph', () => {
        const expected = { 'A': 0, 'B': 2, 'C': 5, 'D': 6 };
        const result = dijkstra(graph2, 'A');
        expect(result).toEqual(expected);
    });

    it('should handle an isolated node', () => {
        const expected = { 'A': 0, 'B': 1, 'C': Infinity };
        const result = dijkstra(graphWithIsolatedNode, 'A');
        expect(result).toEqual(expected);
    });

    it('should handle starting at an isolated node', () => {
        const expected = { 'C': 0, 'A': Infinity, 'B': Infinity };
        const result = dijkstra(graphWithIsolatedNode, 'C');
        expect(result).toEqual(expected);
    });
});

// Example usage of the dijkstra function
const graph: Record<string, Array<[string, number]>> = {
    'A': [['B', 1], ['C', 4]],
    'B': [['A', 1], ['C', 2], ['D', 5]],
    'C': [['A', 4], ['B', 2], ['D', 1]],
    'D': [['B', 5], ['C', 1]]
};

console.log(dijkstra(graph, 'A'));
```

### Explanation:
1. **Importing the Dijkstra Function**:
   - Ensure you import the `dijkstra` function from the appropriate module.

2. **Describe Block**:
   - The `describe` block groups the tests together and provides a descriptive name.

3. **BeforeEach Hook**:
   - The `beforeEach` hook initializes the sample graphs before each test case.

4. **Test Cases**:
   - Each `it` block represents a specific test case.
   - The `expect` method is used to assert the expected results.

5. **Type Annotations**:
   - The `Record<string, Array<[string, number]>>` type is used to represent the graph data structure.

6. **Infinity Representation**:
   - In TypeScript, `Infinity` is used to represent infinite distances.

7. **Example Usage**:
   - An example usage of the `dijkstra` function is provided to demonstrate its functionality.

This TypeScript code preserves the original functionality and logic of the Python unittest tests while adhering to Jest conventions and best practices.