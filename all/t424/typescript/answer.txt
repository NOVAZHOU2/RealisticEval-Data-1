Here is your Python code converted into TypeScript:

```typescript
interface Graph {
  [key: string]: Array<[string, number]>
}

function dijkstra(graph: Graph, start: string): { [key: string]: number } {
  const distances = {};
  Object.keys(graph).forEach(key => {
    distances[key] = Infinity;
  });
  
  distances[start] = 0;

  while (Object.keys(distances).length > 0) {
    let current = null;
    let minDistance = Infinity;
    
    Object.keys(distances).forEach(node => {
      if (distances[node] < minDistance) {
        minDistance = distances[node];
        current = node;
      }
    });

    delete distances[current];

    graph[current].forEach(([neighbor, weight]) => {
      if (!distances.hasOwnProperty(neighbor)) return;
      
      const newDistance = minDistance + weight;
      
      if (newDistance < distances[neighbor]) {
        distances[neighbor] = newDistance;
      }
    });
  }

  return distances;
}
```

Please note that the above code assumes that the `graph` input is an object where keys represent the nodes and values represent the edges connected to those nodes. The edge values themselves are arrays containing two elements - the neighbor node and the weight of the edge between the current node and its neighbor. 

The `dijkstra` function then calculates the shortest paths from the given `start` node to every other node in the graph using Dijkstra's algorithm. It returns an object where keys represent the nodes and values represent their corresponding shortest distances from the start node.