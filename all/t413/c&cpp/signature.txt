Sure, hereâ€™s the equivalent C++ code for the given Python function:

```cpp
#include <vector>
#include <string>

// Function to check if a number is a palindrome
bool isPalindrome(int number) {
    std::string numStr = std::to_string(number);
    std::string reversedStr = numStr;
    std::reverse(reversedStr.begin(), reversedStr.end());
    return numStr == reversedStr;
}

/**
 * Filter out the number of palindrome within any number n.
 * Palindrome numbers are numbers with the same correction and reverse readings, such as 121, 1331.
 *
 * @param n The range number.
 * @return A vector containing the palindrome numbers.
 */
std::vector<int> get_palindrome_list(int n) {
    std::vector<int> palindromes;
    for (int i = 0; i <= n; ++i) {
        if (isPalindrome(i)) {
            palindromes.push_back(i);
        }
    }
    return palindromes;
}
```

In this C++ code:
- The `isPalindrome` function checks if a number is a palindrome by converting it to a string and comparing it with its reverse.
- The `get_palindrome_list` function iterates through all numbers up to `n` and uses `isPalindrome` to filter and collect the palindrome numbers into a `std::vector<int>`.
- Comments and documentation have been adapted to C++ standards using `//` for single-line comments and `/* ... */` for multi-line comments.