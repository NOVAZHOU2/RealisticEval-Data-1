Sure, here is the equivalent C++ code for your Python function:

```c++
#include <iostream>
#include <vector>

bool isPalindrome(int num) {
    int originalNum = num;
    int reversedNum = 0;

    while(num != 0) {
        int digit = num % 10;
        reversedNum = reversedNum * 10 + digit;
        num /= 10;
    }

    return originalNum == reversedNum;
}

std::vector<int> getPalindromeList(int n) {
    std::vector<int> palindromes;

    for(int i=1; i<=n; i++) {
        if(isPalindrome(i)) {
            palindromes.push_back(i);
        }
    }

    return palindromes;
}

int main() {
    int n = 100;
    std::vector<int> result = getPalindromeList(n);

    for(int i=0; i<result.size(); i++) {
        std::cout << result[i] << " ";
    }

    return 0;
}
```

And here is the equivalent C code:

```c
#include <stdio.h>
#include <stdlib.h>

int isPalindrome(int num) {
    int originalNum = num;
    int reversedNum = 0;

    while(num != 0) {
        int digit = num % 10;
        reversedNum = reversedNum * 10 + digit;
        num /= 10;
    }

    return originalNum == reversedNum;
}

void getPalindromeList(int n) {
    for(int i=1; i<=n; i++) {
        if(isPalindrome(i)) {
            printf("%d ", i);
        }
    }
}

int main() {
    int n = 100;
    getPalindromeList(n);

    return 0;
}
```
In both codes, `isPalindrome` checks if a given number is a palindrome or not, and `getPalindromeList` generates all palindrome numbers up to a given number `n`. The results are then printed in the `main` function.