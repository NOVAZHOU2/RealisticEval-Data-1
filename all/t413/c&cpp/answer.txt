Sure! Let's convert the given Python code into equivalent C++ code. We'll maintain the functionality and logic while adapting it to C++ syntax and features.

Hereâ€™s the C++ version of the Python code:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

// Function to check if a string is a palindrome
bool is_palindrome(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return str == reversed_str;
}

// Function to generate a list of palindrome numbers up to n
std::vector<int> get_palindrome_list(int n) {
    std::vector<int> palindromes;

    for (int i = 0; i < n; ++i) {
        std::string num_str = std::to_string(i);
        if (is_palindrome(num_str)) {
            palindromes.push_back(i);
        }
    }

    return palindromes;
}

int main() {
    int n = 1000; // Example value
    std::vector<int> result = get_palindrome_list(n);

    std::cout << "Palindrome numbers up to " << n << " are:" << std::endl;
    for (int num : result) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Function `is_palindrome`**:
   - This function checks if a given string is a palindrome by comparing it with its reversed version.
   
2. **Function `get_palindrome_list`**:
   - This function generates a list of palindrome numbers up to `n`.
   - It iterates over the range `[0, n)` and converts each number to a string.
   - It then checks if the string is a palindrome using the `is_palindrome` function.
   - If the number is a palindrome, it is added to the `palindromes` vector.

3. **Main Function**:
   - Demonstrates how to use the `get_palindrome_list` function by providing an example value `n`.
   - Prints the resulting list of palindrome numbers.

This C++ code maintains the same functionality and logic as the original Python code.