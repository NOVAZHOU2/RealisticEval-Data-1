Sure! Let's convert the given Python code into equivalent C++ code. We'll maintain the functionality and logic while adapting it to C++ syntax and features.

Hereâ€™s the equivalent C++ code:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

// Function to check if a string is a palindrome
bool is_palindrome(const std::string& str) {
    return std::equal(str.begin(), str.end(), str.rbegin());
}

// Function to generate a list of palindromic numbers up to n
std::vector<int> get_palindrome_list(int n) {
    std::vector<int> palindromes;
    for (int i = 0; i < n; ++i) {
        std::string num_str = std::to_string(i);
        if (is_palindrome(num_str)) {
            palindromes.push_back(i);
        }
    }
    return palindromes;
}

// Function to print the list of palindromes
void print_palindromes(const std::vector<int>& palindromes) {
    for (int num : palindromes) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
}

int main() {
    int n = 1000;
    std::vector<int> palindromes = get_palindrome_list(n);
    print_palindromes(palindromes);
    return 0;
}
```

### Explanation:
1. **Function `is_palindrome`:**
   - This function checks if a given string is a palindrome by comparing it with its reverse using `std::equal`.

2. **Function `get_palindrome_list`:**
   - This function generates a list of palindromic numbers up to `n`.
   - It iterates over the range `[0, n)` and converts each number to a string.
   - If the string is a palindrome (checked using `is_palindrome`), the number is added to the vector `palindromes`.

3. **Function `print_palindromes`:**
   - This function prints the list of palindromic numbers.

4. **Main Function:**
   - It initializes `n` and calls `get_palindrome_list` to generate the list of palindromic numbers.
   - It then calls `print_palindromes` to display the result.

This C++ code maintains the functionality and logic of the original Python code while adapting to C++ syntax and features.