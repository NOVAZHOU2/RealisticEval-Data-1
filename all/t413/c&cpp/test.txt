Sure! Let's convert the given Python function `get_palindrome_list` into a C++ function and write equivalent tests using the Catch2 testing framework.

Here's the C++ version of the function and the corresponding test cases:

### Step 1: Include Catch2 Headers
First, include the necessary headers for Catch2 and define your test cases.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <string>

// Function to check if a number is a palindrome
bool is_palindrome(int n) {
    std::string num_str = std::to_string(n);
    std::string reversed_str = num_str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return num_str == reversed_str;
}

// Function to filter out palindrome numbers within a given range
std::vector<int> get_palindrome_list(int n) {
    std::vector<int> palindromes;
    for (int i = 0; i <= n; ++i) {
        if (is_palindrome(i)) {
            palindromes.push_back(i);
        }
    }
    return palindromes;
}

TEST_CASE("Test get_palindrome_list") {
    SECTION("Test empty list for n=0") {
        REQUIRE(get_palindrome_list(0) == std::vector<int>({0}));
    }

    SECTION("Test single digit palindromes") {
        REQUIRE(get_palindrome_list(9) == std::vector<int>({0, 1, 2, 3, 4, 5, 6, 7, 8, 9}));
    }

    SECTION("Test two-digit palindromes") {
        REQUIRE(get_palindrome_list(12) == std::vector<int>({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11}));
    }

    SECTION("Test three-digit palindromes") {
        REQUIRE(get_palindrome_list(122) == std::vector<int>({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121}));
    }
}
```

### Explanation:
1. **Include Catch2 Headers**: Import the necessary Catch2 headers.
2. **Function to Check Palindrome**: Define a helper function `is_palindrome` that checks if a number is a palindrome by converting it to a string and comparing it with its reverse.
3. **Function to Get Palindrome List**: Define the main function `get_palindrome_list` that filters out palindrome numbers within a given range.
4. **Test Cases**: Use Catch2's `TEST_CASE` and `SECTION` macros to define test cases that cover various scenarios, including edge cases and typical cases.

This setup ensures that the functionality and logic of the tests are preserved while adapting to the syntax and conventions of C++ and the Catch2 testing framework.