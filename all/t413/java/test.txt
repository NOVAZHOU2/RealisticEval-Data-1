Sure, here's how you can convert your Python unittest test class to a Java JUnit test case. The Java version will be in the `org.real.temp` package and the class name will be `Tester`.

First, let's define the `get_palindrome_list` function in Java:

```java
import java.util.ArrayList;
import java.util.List;

public class NumberUtils {

    public static List<Integer> getPalindromeList(int n) {
        List<Integer> palindromes = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            if (isPalindrome(i)) {
                palindromes.add(i);
            }
        }
        return palindromes;
    }

    private static boolean isPalindrome(int number) {
        String str = Integer.toString(number);
        int left = 0;
        int right = str.length() - 1;
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
```

Now, let's create the JUnit test case:

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.List;

public class Tester {

    @Test
    public void testGetPalindromeList() {
        // Test cases
        assertEquals(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), NumberUtils.getPalindromeList(9));
        assertEquals(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11), NumberUtils.getPalindromeList(11));
        assertEquals(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22), NumberUtils.getPalindromeList(22));
        assertEquals(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33), NumberUtils.getPalindromeList(33));
        assertEquals(Arrays.asList(), NumberUtils.getPalindromeList(-1));
    }
}
```

### Explanation:
1. **NumberUtils Class**: This class contains the method `getPalindromeList` which filters out palindrome numbers up to a given number `n`. It also includes a helper method `isPalindrome` to check if a number is a palindrome.
   
2. **Tester Class**: This class contains a single test method `testGetPalindromeList` that uses JUnit assertions to verify the correctness of the `getPalindromeList` method.

To run these tests, you need to have JUnit 5 on your classpath. If you're using Maven or Gradle, you can add the following dependencies to your build configuration file:

**Maven**:
```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
```

**Gradle**:
```groovy
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}
```

This setup ensures that your Java JUnit test case can correctly validate the functionality of the `getPalindromeList` method.