Sure! Here is the equivalent TypeScript code:

```typescript
function getPalindromeList(n: number): number[] {
    const isPalindrome = (str: string): boolean => {
        return str === str.split('').reverse().join('');
    };

    const palindromes = Array.from({ length: n }, (_, i) => i)
                            .filter(i => isPalindrome(i.toString()))
                            .map(i => parseInt(i, 10));

    return palindromes;
}

// Example usage
console.log(getPalindromeList(1000));
```

### Explanation:
1. **Function Definition**: The function `getPalindromeList` takes an integer `n` and returns an array of numbers.
2. **Helper Function**: A helper function `isPalindrome` checks if a given string is a palindrome.
3. **Array Generation**: An array is generated using `Array.from` with a length of `n`. For each index `i`, it checks if the string representation of `i` is a palindrome.
4. **Filtering and Mapping**: The array is filtered using the `isPalindrome` function and then mapped to convert the strings back to numbers.

This TypeScript code maintains the same functionality and logic as the provided Python code.