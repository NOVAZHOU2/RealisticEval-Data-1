Sure, here is the equivalent TypeScript code for your Python function:

```typescript
function getPalindromeList(n: number): number[] {
    /**
     * Filter out the number of palindrome within any number n. Palindrome numbers are numbers with the same correction and reverse readings, such as 121, 1331
     *
     * @param {number} n - range number
     * @returns {number[]} Palindrome numbers
     */
    
    const isPalindrome = (num: number): boolean => {
        const strNum = num.toString();
        return strNum === strNum.split('').reverse().join('');
    };

    const palindromeList: number[] = [];
    for (let i = 0; i <= n; i++) {
        if (isPalindrome(i)) {
            palindromeList.push(i);
        }
    }

    return palindromeList;
}
```

### Explanation:
- **Function Signature**: The TypeScript function `getPalindromeList` takes an integer `n` and returns an array of numbers.
- **Helper Function**: An inner function `isPalindrome` checks if a given number is a palindrome by converting it to a string, reversing the string, and comparing it to the original string.
- **Main Logic**: The main function initializes an empty array `palindromeList`. It then iterates through all numbers from 0 to `n`, checking each number using the `isPalindrome` function. If the number is a palindrome, it is added to the `palindromeList`.
- **Return Statement**: Finally, the function returns the `palindromeList`.

This TypeScript code should work similarly to your Python function.