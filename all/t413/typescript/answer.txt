Sure! Here's the equivalent TypeScript code:

```typescript
function getPalindromeList(n: number): number[] {
    const isPalindrome = (str: string): boolean => {
        return str === str.split('').reverse().join('');
    };

    const palindromes = Array.from({ length: n }, (_, i) => i)
                            .filter(i => isPalindrome(i.toString()))
                            .map(i => parseInt(i, 10));

    return palindromes;
}

// Example usage
console.log(getPalindromeList(1000));
```

### Explanation:
1. **Function Definition**: The `getPalindromeList` function takes an integer `n` and returns an array of numbers.
2. **Helper Function**: The `isPalindrome` function checks whether a given string is a palindrome by comparing it to its reversed version.
3. **Array Generation**: Using `Array.from`, we create an array of numbers from 0 to `n-1`.
4. **Filtering Palindromes**: We filter this array using the `isPalindrome` function.
5. **Converting to Numbers**: Finally, we map the filtered strings back to numbers.

This TypeScript code maintains the same functionality and logic as the provided Python code.