Certainly! Here is the equivalent TypeScript code with proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Filters out the number of palindromes within any number `n`.
 * Palindrome numbers are numbers that read the same forwards and backwards, such as 121, 1331.
 *
 * @param n - The range number
 * @returns An array of palindrome numbers
 */
function getPalindromeList(n: number): number[] {
    const isPalindrome = (str: string): boolean => {
        return str === str.split('').reverse().join('');
    };

    // Generate an array of numbers up to `n` and filter out the palindromes
    const palindromes = Array.from({ length: n }, (_, i) => i)
                             .filter(i => isPalindrome(i.toString()))
                             .map(i => parseInt(i, 10));

    return palindromes;
}

// Example usage
console.log(getPalindromeList(1000));
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc comment block provides a clear description of the function, its parameters, and its return type.
   - The `@param` tag describes the parameter `n`.
   - The `@returns` tag describes the return value.

2. **Function Definition**:
   - The function `getPalindromeList` takes an integer `n` and returns an array of numbers.

3. **Helper Function**:
   - The helper function `isPalindrome` checks if a given string is a palindrome by comparing it to its reversed version.

4. **Array Generation and Filtering**:
   - An array is generated using `Array.from` with a length of `n`.
   - Each element in the array is filtered using the `isPalindrome` function.
   - The filtered elements are then converted back to numbers using `parseInt`.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and documentation standards.