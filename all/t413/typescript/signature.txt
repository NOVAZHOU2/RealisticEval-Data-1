Here's the equivalent TypeScript code for the provided Python function:

```typescript
/**
 * Filters out the number of palindromes within any number `n`.
 * Palindrome numbers are numbers that read the same forwards and backwards, such as 121, 1331.
 *
 * @param {number} n - The range number.
 * @returns {number[]} An array of palindrome numbers.
 */
function getPalindromeList(n: number): number[] {
    const isPalindrome = (num: number): boolean => {
        const str = num.toString();
        return str === str.split('').reverse().join('');
    };

    const palindromes: number[] = [];
    for (let i = 0; i <= n; i++) {
        if (isPalindrome(i)) {
            palindromes.push(i);
        }
    }

    return palindromes;
}
```

### Explanation
- **Function Signature**: The function `getPalindromeList` takes an integer `n` and returns an array of numbers.
- **Docstring**: The Python docstring has been converted to a JSDoc comment block.
- **Helper Function**: Added a helper function `isPalindrome` to check if a number is a palindrome.
- **Implementation**: The main function iterates from 0 to `n`, checks each number if it is a palindrome, and collects them in an array.

This preserves the original functionality and structure while adapting it to TypeScript syntax and conventions.