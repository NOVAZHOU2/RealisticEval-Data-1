Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python unittest Code:

```python
import unittest


class TestNthPalindrome(unittest.TestCase):
    def test_single_digit(self):
        """Test case for the first palindrome"""
        self.assertEqual(get_palindrome_list(1), [0], "The first palindrome should be 0")

    def test_edge_of_single_and_double_digits(self):
        """Test case for the tenth palindrome, transitioning to double digits"""
        self.assertEqual(get_palindrome_list(10), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
                         "The tenth palindrome should be [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]")

    def test_edge_of_double_and_triple_digits(self):
        """Test case for the 100th palindrome, transitioning to triple digits"""
        self.assertEqual(get_palindrome_list(100), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99],
                         "The 100th palindrome should be [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99]")

    def test_large_number(self):
        """Test case for a larger number, e.g., the 1000th palindrome"""
        expected_result = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141,
            151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323,
            333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505,
            515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686,
            696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868,
            878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999
        ]
        self.assertEqual(get_palindrome_list(1000), expected_result,
                         "The 1000th palindrome should be [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999]")
```

### Equivalent Jest Test Suite:

```javascript
const getPalindromeList = require('./getPalindromeList'); // Assuming getPalindromeList is defined in another file

describe('TestNthPalindrome', () => {
    it('test_single_digit', () => {
        expect(getPalindromeList(1)).toEqual([0], 'The first palindrome should be 0');
    });

    it('test_edge_of_single_and_double_digits', () => {
        expect(getPalindromeList(10)).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
            'The tenth palindrome should be [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]');
    });

    it('test_edge_of_double_and_triple_digits', () => {
        expect(getPalindromeList(100)).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99],
            'The 100th palindrome should be [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99]');
    });

    it('test_large_number', () => {
        const expectedResult = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141,
            151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323,
            333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505,
            515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686,
            696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868,
            878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999
        ];
        expect(getPalindromeList(1000)).toEqual(expectedResult,
            'The 1000th palindrome should be [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999]');
    });
});

// Example usage
// Assuming getPalindromeList is defined in another file
// const getPalindromeList = require('./getPalindromeList');
```

### Explanation:
1. **Describe Block**: The `describe` block is used to group the test cases together.
2. **It Blocks**: Each `it` block represents a test case.
3. **Expect Assertions**: The `expect` function is used to assert the expected results. The `toEqual` matcher is used to compare arrays.
4. **Comments**: The comments are preserved and formatted as part of the test descriptions.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adapting to Jest's syntax and conventions.