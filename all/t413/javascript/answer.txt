Sure, I can help you convert the given Python code into equivalent JavaScript code while preserving the functionality, logic, and structure. Hereâ€™s how you can do it:

```javascript
function getPalindromeList(n) {
    /**
     * Filter out the number of palindromes within any number n.
     * Palindrome numbers are numbers with the same forward and reverse readings, such as 121, 1331.
     *
     * @param {number} n - range number
     * @returns {Array<number>} - Palindrome numbers
     */
    const isPalindrome = (str) => str === str.split('').reverse().join('');
    const range = Array.from({ length: n }, (_, i) => i);
    const palindromes = range.filter(x => isPalindrome(x.toString()));
    return palindromes.map(Number);
}

// Example usage:
console.log(getPalindromeList(100)); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99]
```

### Explanation:
1. **Function Definition**:
   - The function `getPalindromeList` takes an integer `n` as an argument.

2. **Helper Function**:
   - `isPalindrome(str)` checks if a string is a palindrome by comparing it with its reversed version.

3. **Range Creation**:
   - `Array.from({ length: n }, (_, i) => i)` creates an array `[0, 1, 2, ..., n-1]`.

4. **Filtering Palindromes**:
   - `range.filter(x => isPalindrome(x.toString()))` filters the numbers that are palindromes.

5. **Converting to Numbers**:
   - `palindromes.map(Number)` converts the strings back to integers.

This JavaScript code should behave identically to the original Python code, providing a list of palindromic numbers up to `n`.