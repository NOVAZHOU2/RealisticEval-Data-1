Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will convert the Python unittest class into a Jest test suite, ensuring that the functionality and logic of the tests are maintained.

### Python unittest Class

```python
import unittest

class TestExtractTextFromPDF(unittest.TestCase):
    def test_empty_file(self):
        pdf_path = r"E:\code\code_back\python_project\RealisticEval-Data\envs\python\test_case\t249\testcase01.pdf"
        expected = " \n"
        output = extract_text_from_pdf(pdf_path)
        self.assertEqual(output, expected)

    def test_normal_file(self):
        pdf_path = r"E:\code\code_back\python_project\RealisticEval-Data\envs\python\test_case\t249\testcase02.pdf"
        expected = "11111  \n"
        output = extract_text_from_pdf(pdf_path)
        self.assertEqual(output, expected)

    def test_more_text_file(self):
        pdf_path = r"E:\code\code_back\python_project\RealisticEval-Data\envs\python\test_case\t249\testcase03.pdf"
        expected = "11111  \n22222  \n33333  \n44444  \n"
        output = extract_text_from_pdf(pdf_path)
        self.assertEqual(output, expected)
```

### Equivalent Jest Test Suite

Here is the equivalent Jest test suite:

```javascript
const { extractTextFromPdf } = require('./path/to/extract-text-from-pdf'); // Import the function

describe('TestExtractTextFromPDF', () => {
    it('should handle an empty file correctly', async () => {
        const pdfPath = 'E:/code/code_back/python_project/RealisticEval-Data/envs/python/test_case/t249/testcase01.pdf';
        const expected = ' \n';
        const output = await extractTextFromPdf(pdfPath);
        expect(output).toEqual(expected);
    });

    it('should handle a normal file correctly', async () => {
        const pdfPath = 'E:/code/code_back/python_project/RealisticEval-Data/envs/python/test_case/t249/testcase02.pdf';
        const expected = '11111  \n';
        const output = await extractTextFromPdf(pdfPath);
        expect(output).toEqual(expected);
    });

    it('should handle a file with more text correctly', async () => {
        const pdfPath = 'E:/code/code_back/python_project/RealisticEval-Data/envs/python/test_case/t249/testcase03.pdf';
        const expected = '11111  \n22222  \n33333  \n44444  \n';
        const output = await extractTextFromPdf(pdfPath);
        expect(output).toEqual(expected);
    });
});

// Example usage of the extractTextFromPdf function
(async () => {
    try {
        const filePath = 'path/to/your/file.pdf'; // Replace with the actual file path
        const extractedText = await extractTextFromPdf(filePath);
        console.log(extractedText);
    } catch (error) {
        console.error('Error extracting text from PDF:', error);
    }
})();
```

### Explanation:
1. **Importing the Function**:
   - The `extractTextFromPdf` function is imported from the appropriate module.

2. **Test Suite Description**:
   - The `describe` block defines the test suite name `TestExtractTextFromPDF`.

3. **Test Cases**:
   - Each `it` block represents a test case.
   - The `async` keyword is used because `extractTextFromPdf` is an asynchronous function.
   - The `expect` function is used to assert the equality of the output and the expected value.

4. **File Paths**:
   - File paths are adjusted to use forward slashes (`/`) instead of backslashes (`\`), which is the standard in JavaScript.

5. **Assertions**:
   - The `expect` function with `toEqual` is used to check if the output matches the expected value.

6. **Example Usage**:
   - An example usage block demonstrates how to call the `extractTextFromPdf` function and handle the result.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adapting to JavaScript conventions and Jest's testing framework.