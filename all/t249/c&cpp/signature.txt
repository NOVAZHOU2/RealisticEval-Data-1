Certainly! Below is the equivalent C++ code for the provided Python function, including the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <poppler/cpp/poppler-document.h>
#include <poppler/cpp/poppler-page.h>

/**
 * Extracts text from a given PDF file.
 *
 * @param file_path The path to the PDF file from which to extract text.
 * @return The extracted text from the PDF.
 */
std::string extract_text_from_pdf(const std::string& file_path) {
    // Initialize a text container
    std::string extracted_text;

    try {
        // Open the PDF file
        poppler::document* doc = poppler::document::load_from_file(file_path);

        if (!doc || doc->is_locked()) {
            std::cerr << "Error loading or opening the PDF file." << std::endl;
            return "";
        }

        // Loop through each page in the PDF
        for (int i = 0; i < doc->pages(); ++i) {
            // Get the current page
            poppler::page* page = doc->create_page(i);

            if (!page) {
                std::cerr << "Failed to create page." << std::endl;
                continue;
            }

            // Extract text from the page and add it to the text container
            extracted_text += page->text().to_utf8() + "\n";

            // Clean up the page
            delete page;
        }

        // Clean up the document
        delete doc;
    } catch (const std::exception& e) {
        std::cerr << "Exception caught: " << e.what() << std::endl;
        return "";
    }

    return extracted_text;
}

int main() {
    std::string file_path = "path/to/your/pdf/file.pdf";
    std::string text = extract_text_from_pdf(file_path);
    std::cout << text << std::endl;
    return 0;
}
```

### Explanation:
1. **Headers**: Include necessary headers for working with strings and the `poppler` library.
2. **Function Documentation**: Use `/* ... */` for multi-line comments to document the function.
3. **Function Signature**: Define the function `extract_text_from_pdf` with the appropriate parameter and return types.
4. **Comments**: Use `//` for single-line comments within the function.
5. **Memory Management**: Properly manage memory by deleting pages and the document after use.
6. **Exception Handling**: Handle exceptions that might occur during the process.

This code preserves the original purpose and structure of the Python function while translating it into idiomatic C++ code.