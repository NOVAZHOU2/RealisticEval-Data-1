Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
import { createReadStream } from 'fs';
import * as pdfjsLib from 'pdfjs-dist';

export async function extractTextFromPdf(filePath: string): Promise<string> {
    /**
     * Extracts text from a given PDF file.
     *
     * @param filePath - The path to the PDF file from which to extract text.
     * @returns A promise that resolves with the extracted text from the PDF.
     */
    
    const loadingTask = pdfjsLib.getDocument({ url: filePath });
    const pdfDocument = await loadingTask.promise;

    let textContent = '';

    for (let i = 1; i <= pdfDocument.numPages; i++) {
        const page = await pdfDocument.getPage(i);
        const textPage = await page.getTextContent();
        
        textContent += textPage.items.map(item => item.str).join(' ');
    }

    return textContent;
}
```

### Explanation:
- **Imports**: We import `createReadStream` from the `fs` module and `pdfjsLib` from the `pdfjs-dist` package.
- **Function Signature**: The TypeScript version of the function uses `async/await` to handle asynchronous operations. It returns a `Promise<string>` instead of a direct string.
- **PDF Document Loading**: We use `pdfjsLib.getDocument` to load the PDF document asynchronously.
- **Extracting Text**: We iterate through each page of the PDF, get the text content using `page.getTextContent()`, and accumulate it into a single string.

Make sure you have the `pdfjs-dist` package installed in your project. You can install it using npm or yarn:

```bash
npm install pdfjs-dist
# or
yarn add pdfjs-dist
```

This TypeScript function should work similarly to your original Python function, extracting text from a PDF file.