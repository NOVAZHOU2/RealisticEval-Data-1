Sure! Below is the equivalent TypeScript test case using Jest for the Python function `extract_text_from_pdf`. Note that in TypeScript, you would typically use a library like `pdf-parse` to handle PDF extraction, similar to how Python might use `PyPDF2` or `pdfminer.six`.

First, install the necessary package:

```sh
npm install pdf-parse
```

Then, create your TypeScript test file (e.g., `extractTextFromPdf.test.ts`) with the following content:

```typescript
import { parse } from 'pdf-parse';
import fs from 'fs';

describe('extract_text_from_pdf', () => {
  it('should extract text from a PDF file', async () => {
    const filePath = 'path/to/your/pdf/file.pdf'; // Replace with the actual path to your PDF file

    // Read the PDF file
    const dataBuffer = fs.readFileSync(filePath);

    // Parse the PDF file
    const data = await parse(dataBuffer);

    // Check if the extracted text is not empty
    expect(data.text).not.toBe('');
  });

  it('should handle an empty PDF file', async () => {
    const filePath = 'path/to/your/empty/pdf/file.pdf'; // Replace with the actual path to your empty PDF file

    // Read the PDF file
    const dataBuffer = fs.readFileSync(filePath);

    // Parse the PDF file
    const data = await parse(dataBuffer);

    // Check if the extracted text is empty
    expect(data.text).toBe('');
  });
});
```

In this example:
- We use `pdf-parse` to read and parse the PDF file.
- We read the PDF file into a buffer using `fs.readFileSync`.
- We then pass this buffer to `parse` to extract the text.
- We write two tests: one to check that text is extracted correctly from a non-empty PDF, and another to check that an empty PDF returns an empty string.

Make sure to replace `'path/to/your/pdf/file.pdf'` and `'path/to/your/empty/pdf/file.pdf'` with the actual paths to your PDF files for testing.