Certainly! Here is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
package org.real.temp;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;

import java.io.File;
import java.io.IOException;

/**
 * A utility class for extracting text from PDF files.
 */
public class Answer {

    /**
     * Extracts text from a given PDF file.
     *
     * @param filePath The path to the PDF file from which to extract text.
     * @return The extracted text from the PDF.
     */
    public static String extractTextFromPdf(String filePath) {
        // Initialize a text container
        StringBuilder extractedText = new StringBuilder();

        try (PDDocument document = PDDocument.load(new File(filePath))) {
            if (!document.isEncrypted()) {
                // Create a PDF text stripper
                PDFTextStripper pdfStripper = new PDFTextStripper();

                // Extract text from each page and add it to the text container
                extractedText.append(pdfStripper.getText(document));
            } else {
                System.out.println("The document is encrypted.");
            }
        } catch (IOException e) {
            System.err.println("Error reading the PDF file: " + e.getMessage());
        }

        return extractedText.toString();
    }

    /**
     * Main method for testing the functionality.
     *
     * @param args Command-line arguments.
     */
    public static void main(String[] args) {
        // Example usage
        String filePath = "path/to/your/pdf/file.pdf";
        String text = extractTextFromPdf(filePath);
        System.out.println(text);
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with a package declaration (`package org.real.temp;`).
2. **Import Statements**: Necessary imports are included at the beginning of the file.
3. **Class Definition**: The class `Answer` is defined with a public access modifier.
4. **Javadoc Comments**: The method `extractTextFromPdf` includes Javadoc comments that describe the method, its parameters, and its return value.
5. **Method Signature**: The method signature `public static String extractTextFromPdf(String filePath)` matches the Python function signature.
6. **Implementation**: The implementation of the method closely follows the logic of the Python code.
7. **Main Method**: A `main` method is included for testing purposes.

This Java code preserves the original functionality and structure of the Python code while adhering to Java conventions and best practices.