Certainly! Here is the equivalent Java JUnit test class for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`.

### Java Code

```java
package org.real.temp;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.File;
import java.io.IOException;

/**
 * Test cases for the extractTextFromPdf method.
 */
public class Tester {

    /**
     * Tests extracting text from an empty PDF file.
     */
    @Test
    public void testEmptyFile() {
        String pdfPath = "E:\\code\\code_back\\python_project\\RealisticEval-Data\\envs\\python\\test_case\\t249\\testcase01.pdf";
        String expected = " \n";
        String output = extractTextFromPdf(pdfPath);
        assertEquals(expected, output);
    }

    /**
     * Tests extracting text from a normal PDF file.
     */
    @Test
    public void testNormalFile() {
        String pdfPath = "E:\\code\\code_back\\python_project\\RealisticEval-Data\\envs\\python\\test_case\\t249\\testcase02.pdf";
        String expected = "11111  \n";
        String output = extractTextFromPdf(pdfPath);
        assertEquals(expected, output);
    }

    /**
     * Tests extracting text from a PDF file with more text.
     */
    @Test
    public void testMoreTextFile() {
        String pdfPath = "E:\\code\\code_back\\python_project\\RealisticEval-Data\\envs\\python\\test_case\\t249\\testcase03.pdf";
        String expected = "11111  \n22222  \n33333  \n44444  \n";
        String output = extractTextFromPdf(pdfPath);
        assertEquals(expected, output);
    }

    /**
     * Extracts text from a given PDF file.
     *
     * @param filePath The path to the PDF file from which to extract text.
     * @return The extracted text from the PDF.
     */
    private String extractTextFromPdf(String filePath) {
        StringBuilder extractedText = new StringBuilder();

        try (PDDocument document = PDDocument.load(new File(filePath))) {
            if (!document.isEncrypted()) {
                PDFTextStripper pdfStripper = new PDFTextStripper();
                extractedText.append(pdfStripper.getText(document));
            } else {
                System.out.println("The document is encrypted.");
            }
        } catch (IOException e) {
            System.err.println("Error reading the PDF file: " + e.getMessage());
        }

        return extractedText.toString();
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with a package declaration (`package org.real.temp;`).
2. **Imports**: Necessary imports are included at the beginning of the file.
3. **Class Definition**: The class `Tester` is defined with a public access modifier.
4. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.
5. **Assertion Methods**: The `assertEquals` method from JUnit is used to verify the expected results.
6. **Test Methods**:
   - `testEmptyFile`: Tests extracting text from an empty PDF file.
   - `testNormalFile`: Tests extracting text from a normal PDF file.
   - `testMoreTextFile`: Tests extracting text from a PDF file with more text.
7. **Helper Method**: The `extractTextFromPdf` method is defined as a private helper method to extract text from a PDF file.

This Java code preserves the original functionality and structure of the Python unittest class while adhering to Java conventions and JUnit testing practices.