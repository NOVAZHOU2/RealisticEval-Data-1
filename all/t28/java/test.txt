Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. This Java test class will capture the standard output and perform assertions similar to the Python unittest class.

### Java Code

```java
package org.real.temp;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * Test class for verifying the correctness of the printMemoryBits method.
 */
public class Tester {

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();

    @BeforeEach
    public void setUp() {
        // Redirect System.out to capture the output
        System.setOut(new PrintStream(outContent));
    }

    @AfterEach
    public void tearDown() {
        // Restore the normal System.out
        System.setOut(System.out);
    }

    @Test
    public void testSingleByte() {
        byte[] memorySection = new byte[]{(byte) 0b10101010};
        printMemoryBits(memorySection);
        String output = outContent.toString().trim();
        String expectedOutput = "10101010";
        assertEquals(expectedOutput, output);
    }

    @Test
    public void testMultipleBytes() {
        byte[] memorySection = new byte[]{(byte) 0b11001100, (byte) 0b11110000};
        printMemoryBits(memorySection);
        String output = outContent.toString().trim();
        String expectedOutput = "11001100\n11110000";
        assertEquals(expectedOutput, output);
    }

    @Test
    public void testAllZeros() {
        byte[] memorySection = new byte[]{(byte) 0b00000000};
        printMemoryBits(memorySection);
        String output = outContent.toString().trim();
        String expectedOutput = "00000000";
        assertEquals(expectedOutput, output);
    }

    @Test
    public void testAllOnes() {
        byte[] memorySection = new byte[]{(byte) 0b11111111};
        printMemoryBits(memorySection);
        String output = outContent.toString().trim();
        String expectedOutput = "11111111";
        assertEquals(expectedOutput, output);
    }

    /**
     * Prints the status of each bit (0 or 1) in the given section of memory.
     *
     * @param memorySection A byte array representing the section of memory to be read.
     */
    public static void printMemoryBits(byte[] memorySection) {
        for (byte b : memorySection) {
            for (int i = 7; i >= 0; i--) {
                int bit = (b >> i) & 1;
                System.out.print(bit);
            }
            System.out.println(); // Move to the next line after printing all bits of a byte
        }
    }
}
```

### Explanation:
1. **JUnit Annotations**:
   - `@BeforeEach`: Used to set up the test environment before each test.
   - `@AfterEach`: Used to clean up the test environment after each test.
   - `@Test`: Used to mark test methods.

2. **Capturing Standard Output**:
   - `ByteArrayOutputStream` is used to capture the standard output.
   - `System.setOut(new PrintStream(outContent))` redirects `System.out` to the `ByteArrayOutputStream`.

3. **Test Methods**:
   - Each test method performs the necessary setup, calls the `printMemoryBits` method, captures the output, and asserts the expected result using `assertEquals`.

4. **Method Definition**:
   - The `printMemoryBits` method is defined within the test class for convenience. It can also be moved to a separate utility class if needed.

This Java code preserves the original functionality and structure of the Python unittest class while adhering to JUnit conventions and best practices.