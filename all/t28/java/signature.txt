Here is your Python function translated into Java, keeping the original docstring and logic intact:

```java
import java.util.Arrays;

/**
 * Prints the status of each bit (0 or 1) in the given section of memory.
 * For example:
 *     input: 0b10101010
 *     output: 10101010
 * If have multiple bytes use \n split
 * For example:
 *     input: [0b11001100, 0b11110000]
 *     output: 11001100\n11110000
 *
 * @param memorySection An array of bytes representing the section of memory to be read.
 */
public static void printMemoryBits(byte[] memorySection) {
    StringBuilder sb = new StringBuilder();
    
    for (byte b : memorySection) {
        String binaryString = String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(' ', '0');
        sb.append(binaryString).append("\n");
    }
    
    System.out.println(sb.toString().trim());
}
```

This Java method does essentially the same thing as your Python function. It converts each byte in the `memorySection` array to its corresponding 8-bit binary string representation and appends it to a `StringBuilder`. The `Integer.toBinaryString()` method is used to convert the integer value of each byte to a binary string, and the `& 0xFF` operation ensures that we treat each byte as an unsigned value. Finally, the resulting binary strings are printed out with newline characters separating them.