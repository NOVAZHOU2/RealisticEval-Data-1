Sure! Here is the JavaScript version of your Python function with the same comments and logic:

```javascript
/**
 * Prints the status of each bit (0 or 1) in the given section of memory.
 * For example:
 *     input: 0b10101010
 *     output: 10101010
 * If have multiple bytes use \n split
 * For example:
 *     input: [0b11001100, 0b11110000]
 *     output: 11001100\n11110000
 *
 * @param {number[]} memorySection - An array of numbers representing the section of memory to be read.
 */
function printMemoryBits(memorySection) {
    let result = '';

    for (let byte of memorySection) {
        // Convert byte to binary string, remove '0b' prefix and pad with zeros to ensure it's 8 bits long
        let binaryString = byte.toString(2).padStart(8, '0');
        result += binaryString + '\n';
    }

    // Remove the last newline character
    if (result.endsWith('\n')) {
        result = result.slice(0, -1);
    }

    console.log(result);
}
```

### Explanation:
- **Function Definition**: The function `printMemoryBits` takes an array of numbers (`memorySection`) as its parameter.
- **Loop Through Bytes**: It loops through each byte in the `memorySection`.
- **Convert Byte to Binary String**: Each byte is converted to a binary string using `toString(2)`, and `padStart(8, '0')` ensures that the binary string is always 8 characters long.
- **Concatenate Results**: The binary strings are concatenated with a newline character (`\n`) to separate them.
- **Remove Last Newline**: After the loop, the function checks if the result ends with a newline character and removes it if present.
- **Log Result**: Finally, the result is printed to the console using `console.log`.

This JavaScript function should behave similarly to your original Python function.