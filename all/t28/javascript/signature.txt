Certainly! I'll convert the Python function signature and comments into equivalent JavaScript syntax, including JSDoc comments for documentation.

Here's the converted JavaScript code:

```javascript
/**
 * Prints the status of each bit (0 or 1) in the given section of memory.
 * For example:
 *   input: 0b10101010
 *   output: 10101010
 * If there are multiple bytes, they are split using \n.
 * For example:
 *   input: [0b11001100, 0b11110000]
 *   output: 11001100\n11110000
 *
 * @param {Uint8Array} memorySection - An Uint8Array representing the section of memory to be read.
 */
function printMemoryBits(memorySection) {
    for (let byte of memorySection) {
        let bits = '';
        for (let i = 7; i >= 0; i--) {
            bits += (byte >> i) & 1;
        }
        console.log(bits);
    }
}

// Example usage:
const memorySection = new Uint8Array([255, 128, 64, 32, 16, 8, 4, 2, 1, 0]);
printMemoryBits(memorySection);
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block provides a detailed description of the function's purpose and behavior.
   - Examples are included to illustrate the expected input and output.
   - The `@param` tag specifies the parameter type and description.

2. **Function Definition**:
   - The function `printMemoryBits` takes an `Uint8Array` as an argument, which represents the section of memory to be read.

3. **Loop Through Bytes**:
   - The outer loop iterates through each byte in the `memorySection`.

4. **Bit Extraction**:
   - The inner loop extracts each bit from the most significant bit (MSB) to the least significant bit (LSB).

5. **Concatenation**:
   - The bits are concatenated into a string.

6. **Print**:
   - The resulting string of bits is printed to the console.

This JavaScript code preserves the functionality, logic, and structure of the original Python code, and includes appropriate JSDoc comments for documentation.