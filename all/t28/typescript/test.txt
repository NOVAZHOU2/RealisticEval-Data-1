Certainly! Here’s the equivalent TypeScript code using Jest for testing the `printMemoryBits` function. We will use Jest’s `test` and `expect` functions to replicate the behavior of the Python `unittest` framework.

### TypeScript Code with Jest Testing

First, let's define the `printMemoryBits` function in TypeScript:

```typescript
function printMemoryBits(memorySection: Uint8Array): void {
    for (let byte of memorySection) {
        console.log(Array.from({ length: 8 }, (_, i) => (byte >> (7 - i)) & 1).join(''));
    }
}
```

Next, we'll write the Jest test suite:

```typescript
import { captureConsole } from 'jest-capture-console';

describe('TestPrintMemoryBits', () => {
    // Helper function to capture console output
    const captureOutput = (fn: () => void): string => {
        const originalConsoleLog = console.log;
        let capturedOutput = '';

        console.log = (message?: any) => {
            capturedOutput += message + '\n';
        };

        fn();

        console.log = originalConsoleLog;
        return capturedOutput.trim();
    };

    test('test_single_byte', () => {
        const memorySection = new Uint8Array([0b10101010]);
        const output = captureOutput(() => printMemoryBits(memorySection));
        expect(output).toBe("10101010");
    });

    test('test_multiple_bytes', () => {
        const memorySection = new Uint8Array([0b11001100, 0b11110000]);
        const output = captureOutput(() => printMemoryBits(memorySection));
        expect(output).toBe("11001100\n11110000");
    });

    test('test_all_zeros', () => {
        const memorySection = new Uint8Array([0b00000000]);
        const output = captureOutput(() => printMemoryBits(memorySection));
        expect(output).toBe("00000000");
    });

    test('test_all_ones', () => {
        const memorySection = new Uint8Array([0b11111111]);
        const output = captureOutput(() => printMemoryBits(memorySection));
        expect(output).toBe("11111111");
    });
});
```

### Explanation:
1. **Helper Function `captureOutput`**:
   - This helper function captures the console output during the execution of the `printMemoryBits` function. It temporarily overrides `console.log` to capture the output and restores the original `console.log` after capturing.

2. **Test Cases**:
   - Each test case sets up the `memorySection` with the desired data and calls `printMemoryBits`.
   - The `captureOutput` function is used to capture the console output.
   - Jest’s `expect` function is used to verify that the captured output matches the expected output.

### Running the Tests
To run these tests, you need to have Jest installed and configured in your project. You can install Jest using npm or yarn:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Then, configure your `tsconfig.json` and `jest.config.js` files accordingly:

#### `tsconfig.json`
```json
{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true
  },
  "include": ["src/**/*"]
}
```

#### `jest.config.js`
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest'
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node']
};
```

Finally, run the tests using Jest:

```sh
npx jest
```

This setup ensures that the tests are executed correctly and the output is verified against the expected values.