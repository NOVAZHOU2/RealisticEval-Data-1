Sure! Below is the equivalent TypeScript Jest test case for the provided Python unittest test class.

```typescript
import { describe, it, expect } from '@jest/globals';

describe('printMemoryBits', () => {
  it('should print bits for a single byte', () => {
    const memorySection = Buffer.from([0b10101010]);
    const expectedOutput = '10101010';
    const actualOutput = printMemoryBits(memorySection);
    expect(actualOutput).toBe(expectedOutput);
  });

  it('should print bits for multiple bytes with newline separation', () => {
    const memorySection = Buffer.from([0b11001100, 0b11110000]);
    const expectedOutput = '11001100\n11110000';
    const actualOutput = printMemoryBits(memorySection);
    expect(actualOutput).toBe(expectedOutput);
  });
});

function printMemoryBits(memorySection: Buffer): string {
  /**
   * Prints the status of each bit (0 or 1) in the given section of memory.
   * For example:
   *     input: 0b10101010
   *     output: 10101010
   * If have multiple bytes use \n split
   * For example:
   *     input: [0b11001100, 0b11110000]
   *     output: 11001100\n11110000
   *
   * Args:
   *     memory_section (Buffer): A Buffer object representing the section of memory to be read.
   *
   * Returns:
   *     string: The formatted string representation of the memory section.
   */
  return memorySection.map(byte => byte.toString(2)).join('\n');
}
```

### Explanation:
1. **Test Descriptions**: Each `it` block describes a specific test case.
2. **Expected and Actual Outputs**: The `expect` function is used to compare the actual output of the `printMemoryBits` function with the expected output.
3. **Function Implementation**: The `printMemoryBits` function converts each byte in the `memorySection` buffer to its binary string representation using `toString(2)` and joins them with newline characters `\n`.

This TypeScript Jest test case should cover the same functionality as your original Python unittest test class.