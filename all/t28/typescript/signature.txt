Certainly! Hereâ€™s the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Prints the status of each bit (0 or 1) in the given section of memory.
 * For example:
 *   input: 0b10101010
 *   output: 10101010
 * If there are multiple bytes, they are split by a newline.
 * For example:
 *   input: [0b11001100, 0b11110000]
 *   output: 11001100
 *           11110000
 *
 * @param memorySection - A Uint8Array representing the section of memory to be read.
 */
function printMemoryBits(memorySection: Uint8Array): void {
    for (let byte of memorySection) {
        console.log(Array.from({ length: 8 }, (_, i) => (byte >> (7 - i)) & 1).join(''));
    }
}

// Example usage
const memorySection = new Uint8Array([255, 128, 64, 32, 16, 8, 4, 2, 1, 0]);
printMemoryBits(memorySection);
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc comment block provides detailed documentation similar to the Python docstring, including examples and parameter descriptions.

2. **Function Definition**:
   - The function `printMemoryBits` takes a `Uint8Array` as its argument and returns `void`.

3. **Looping Through Bytes**:
   - The `for...of` loop iterates over each byte in the `memorySection`.

4. **Bit Conversion**:
   - The inner logic uses `Array.from` with a mapping function to generate an array of bits for each byte. The mapping function shifts the bits and performs a bitwise AND operation to get each bit value.
   - The resulting array of bits is then joined into a string using `.join('')`.

5. **Console Output**:
   - The `console.log` statement prints the string representation of the bits for each byte, ensuring that each byte is printed on a new line.

This TypeScript code preserves the original functionality and structure of the Python code, while adapting it to TypeScript's syntax and type system.