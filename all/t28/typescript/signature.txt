Sure! Here is the TypeScript version of your Python function with the same functionality and comments:

```typescript
/**
 * Prints the status of each bit (0 or 1) in the given section of memory.
 * For example:
 *     input: 0b10101010
 *     output: 10101010
 * If have multiple bytes use \n split
 * For example:
 *     input: [0b11001100, 0b11110000]
 *     output: 11001100\n11110000
 *
 * @param {number[]} memorySection - An array of numbers representing the section of memory to be read.
 */
function printMemoryBits(memorySection: number[]): void {
    // Convert each byte to its binary string representation and join them with '\n'
    const binaryString = memorySection.map(byte => byte.toString(2).padStart(8, '0')).join('\n');
    
    // Print the binary string
    console.log(binaryString);
}
```

### Explanation:
- **Function Signature**: The function `printMemoryBits` takes an array of numbers (`memorySection`) as its parameter.
- **Type Annotations**: Each parameter and return type is annotated using TypeScript's type system.
- **Binary Conversion**: Inside the function, each byte (number) is converted to its binary string representation using `toString(2)` and padded with leading zeros to ensure it is always 8 bits long using `padStart(8, '0')`.
- **Joining Strings**: The binary strings are joined with `\n` to separate each byte's binary representation.
- **Output**: The resulting binary string is printed to the console using `console.log`.

This TypeScript function should behave similarly to your original Python function.