Here is your Python function translated into TypeScript:

```typescript
function printMemoryBits(memorySection: Buffer): void {
    /**
     * Prints the status of each bit (0 or 1) in the given section of memory.
     * For example:
     *      input: 0b10101010
     *      output: 10101010
     * If have multiple bytes use \n split
     * For example:
     *      input: [0b11001100, 0b11110000]
     *      output: 11001100\n11110000
     *
     * @param {Buffer} memorySection - A Buffer object representing the section of memory to be read.
     */

    let output = '';
    
    for(let i=0; i<memorySection.length; i++) {
        const byte = memorySection[i];
        const bits = byte.toString(2).padStart(8, '0');
        if(i > 0) output += '\n';
        output += bits;
    }

    console.log(output);
}
```

In this code, `Buffer` is used instead of `bytes`, which is available in Node.js and allows you to handle binary data. The method `toString(2)` converts a number to its binary representation, and `padStart(8, '0')` ensures that the binary string has 8 characters, padding with zeros at the start if necessary. The result is then logged to the console.