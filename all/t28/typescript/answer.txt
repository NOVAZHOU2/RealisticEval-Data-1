Sure! Hereâ€™s the equivalent TypeScript code, including proper type definitions and adjustments for TypeScript's syntax and features:

```typescript
function printMemoryBits(memorySection: Uint8Array): void {
    /**
     * Prints the status of each bit (0 or 1) in the given section of memory.
     *
     * @param memorySection - A Uint8Array representing the section of memory to be read.
     */
    for (let byte of memorySection) {
        console.log(Array.from({ length: 8 }, (_, i) => (byte >> (7 - i)) & 1).join(''));
    }
}

// Example usage
const memorySection = new Uint8Array([255, 128, 64, 32, 16, 8, 4, 2, 1, 0]);
printMemoryBits(memorySection);
```

### Explanation:
1. **Type Definitions**:
   - The `memorySection` parameter is defined as a `Uint8Array`, which is the closest equivalent to Python's `bytes` object in TypeScript.

2. **Function Definition**:
   - The function `printMemoryBits` takes a `Uint8Array` as its argument and returns `void`.

3. **Looping Through Bytes**:
   - The `for...of` loop iterates over each byte in the `memorySection`.

4. **Bit Conversion**:
   - The inner logic uses `Array.from` with a mapping function to generate an array of bits for each byte. The mapping function shifts the bits and performs a bitwise AND operation to get each bit value.
   - The resulting array of bits is then joined into a string using `.join('')`.

5. **Console Output**:
   - The `console.log` statement prints the string representation of the bits for each byte.

This TypeScript code maintains the same functionality and logic as the original Python code, while adapting it to TypeScript's syntax and type system.