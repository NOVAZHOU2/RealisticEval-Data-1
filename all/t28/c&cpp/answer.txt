Here is a C++ version of your Python function:

```C++
#include <iostream>
#include <sstream>

void printMemoryBits(const unsigned char* memorySection, size_t length) {
    for(size_t i = 0; i < length; ++i){
        std::stringstream ss;
        for(int j = 7; j >= 0; --j){
            if((memorySection[i] & (1 << j)) != 0)
                ss << '1';
            else
                ss << '0';
        }
        std::cout << ss.str();
        if(i != length - 1)
            std::cout << '\n';
    }
}
```

And here is a C version:

```C
#include <stdio.h>

void printMemoryBits(unsigned char *memorySection, size_t length) {
    for(size_t i = 0; i < length; ++i){
        for(int j = 7; j >= 0; --j){
            if((memorySection[i] & (1 << j)) != 0)
                printf('1');
            else
                printf('0');
        }
        if(i != length - 1)
            printf('\n');
    }
}
```

Both versions work similarly to your Python function. They iterate over each byte in `memorySection`, then iterate over each bit in that byte from most significant to least significant and print out whether it's set or not. After printing all bits of a byte, they print a newline character unless it's the last byte. The lengths of these functions are determined by the `length` parameter which should be equal to the number of bytes in `memorySection`.