Sure! Below is the equivalent C++ code with the same functionality and comments:

```cpp
#include <iostream>
#include <vector>

/**
 * Prints the status of each bit (0 or 1) in the given section of memory.
 * For example:
 *     input: 0b10101010
 *     output: 10101010
 * If have multiple bytes use \n split
 * For example:
 *     input: {0b11001100, 0b11110000}
 *     output: 11001100\n11110000
 *
 * @param memory_section A vector of bytes representing the section of memory to be read.
 */
void printMemoryBits(const std::vector<unsigned char>& memorySection) {
    for (const auto& byte : memorySection) {
        for (int i = 7; i >= 0; --i) {
            std::cout << ((byte >> i) & 1);
        }
        std::cout << '\n';
    }
}

int main() {
    // Example usage
    std::vector<unsigned char> memorySection = {0b11001100, 0b11110000};
    printMemoryBits(memorySection);

    return 0;
}
```

### Explanation:
- **Function Signature**: The function `printMemoryBits` takes a `std::vector<unsigned char>` as an argument, which represents the section of memory to be printed.
- **Loop Through Bytes**: The outer loop iterates through each byte in the vector.
- **Bitwise Operations**: The inner loop uses bitwise operations to extract and print each bit of the current byte from most significant to least significant.
- **Output Formatting**: Each byte's bits are printed followed by a newline character (`'\n'`) to separate different bytes.

This C++ code maintains the same functionality as the original Python code while adhering to C++ syntax and conventions.