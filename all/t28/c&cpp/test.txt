Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. We will ensure that the functionality and logic of the tests are preserved, including capturing and verifying the output.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 using the following headers:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <catch2/generators/catch_generators_all.hpp>

#include <iostream>
#include <vector>
#include <sstream>
#include <cstdio>
```

Here is the complete C++ code with the test class:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <catch2/generators/catch_generators_all.hpp>

#include <iostream>
#include <vector>
#include <sstream>
#include <cstdio>

// Function to print the status of each bit (0 or 1) in the given section of memory.
void print_memory_bits(const std::vector<uint8_t>& memory_section) {
    for (uint8_t byte : memory_section) {
        for (int i = 7; i >= 0; --i) {
            uint8_t bit = (byte >> i) & 1;
            std::cout << bit;
        }
        std::cout << '\n';
    }
}

TEST_CASE("TestPrintMemoryBits", "[print_memory_bits]") {
    struct RedirectStdout {
        std::streambuf* orig;
        std::stringstream buffer;

        RedirectStdout() : orig(std::cout.rdbuf(buffer.rdbuf())) {}
        ~RedirectStdout() { std::cout.rdbuf(orig); }

        std::string str() const { return buffer.str(); }
    };

    SECTION("test_single_byte") {
        std::vector<uint8_t> memory_section = {0b10101010};
        RedirectStdout redirector;
        print_memory_bits(memory_section);
        std::string output = redirector.str().substr(0, 8); // Remove newline
        REQUIRE(output == "10101010");
    }

    SECTION("test_multiple_bytes") {
        std::vector<uint8_t> memory_section = {0b11001100, 0b11110000};
        RedirectStdout redirector;
        print_memory_bits(memory_section);
        std::string output = redirector.str();
        REQUIRE(output == "11001100\n11110000\n");
    }

    SECTION("test_all_zeros") {
        std::vector<uint8_t> memory_section = {0b00000000};
        RedirectStdout redirector;
        print_memory_bits(memory_section);
        std::string output = redirector.str().substr(0, 8); // Remove newline
        REQUIRE(output == "00000000");
    }

    SECTION("test_all_ones") {
        std::vector<uint8_t> memory_section = {0b11111111};
        RedirectStdout redirector;
        print_memory_bits(memory_section);
        std::string output = redirector.str().substr(0, 8); // Remove newline
        REQUIRE(output == "11111111");
    }
}
```

### Explanation:
1. **Catch2 Headers**:
   - `#include <catch2/catch_test_macros.hpp>`: For defining tests and sections.
   - `#include <catch2/generators/catch_generators_all.hpp>`: For additional generator support (not used here but included for completeness).

2. **Function Definition**:
   - `print_memory_bits`: This function takes a `std::vector<uint8_t>` as input and prints the bits of each byte, separated by newlines.

3. **Test Class**:
   - `TEST_CASE`: Defines the test case named `TestPrintMemoryBits`.
   - `SECTION`: Defines individual test sections within the test case.

4. **Redirect Stdout**:
   - `RedirectStdout`: A helper struct to capture the standard output during the test execution.
   - It redirects `std::cout` to a `std::stringstream` and restores the original stream upon destruction.

5. **Test Sections**:
   - Each `SECTION` corresponds to a specific test case:
     - `test_single_byte`: Tests a single byte with a specific pattern.
     - `test_multiple_bytes`: Tests multiple bytes with specific patterns.
     - `test_all_zeros`: Tests a byte with all zeros.
     - `test_all_ones`: Tests a byte with all ones.

6. **Assertions**:
   - `REQUIRE`: Used to assert the captured output matches the expected output.

This C++ code ensures that the functionality and logic of the tests are preserved, and the output is captured and verified using Catch2.