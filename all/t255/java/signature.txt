Certainly! Here is the equivalent Java code for the given Python function, including appropriate Javadoc comments and type conversions:

```java
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Converts an image to a binary array representation.
 */
public class Answer {

    /**
     * Converts a picture to an array of binary bits. Converts it to black and white mode (only 0s and 1s,
     * corresponding to black and white), converts the white pixel (value 255) to 1, converts the black pixel to 0,
     * and finally stores these bits in an array and returns.
     *
     * @param imageFilePath The path to the image file.
     * @return A list of bits (0 or 1) representing the image.
     */
    public static List<Integer> convertImageToBits(String imageFilePath) {
        // Load the image using ImageIO
        BufferedImage image;
        try {
            image = ImageIO.read(new File(imageFilePath));
        } catch (IOException e) {
            throw new RuntimeException("Error reading the image file", e);
        }

        // Convert the image to black and white (1-bit pixels)
        BufferedImage bwImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_BYTE_BINARY);
        bwImage.getGraphics().drawImage(image, 0, 0, null);

        // Get the width and height of the image
        int w = image.getWidth();
        int h = image.getHeight();

        // Initialize an empty list to store the bits
        List<Integer> bitsArray = new ArrayList<>();

        // Loop over each pixel in the image
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                // Get the pixel value (0 for black, 255 for white in '1' mode)
                int pixel = image.getRGB(x, y) & 0xFF;
                // Convert pixel to bit: 1 for white, 0 for black
                int bit = (pixel == 255) ? 1 : 0;
                bitsArray.add(bit);
            }
        }

        return bitsArray;
    }

    public static void main(String[] args) {
        // Example usage
        String imagePath = "path/to/your/image.jpg";
        List<Integer> bits = convertImageToBits(imagePath);
        System.out.println(bits);
    }
}
```

### Explanation:
1. **Import Statements**:
   - `javax.imageio.ImageIO`: Used for reading images.
   - `java.awt.image.BufferedImage`: Represents an image with an associated raster.
   - `java.io.File`: Used for handling file paths.
   - `java.io.IOException`: Thrown when there is an issue with file I/O operations.
   - `java.util.ArrayList`: Used to create a dynamic array (list).
   - `java.util.List`: Interface implemented by `ArrayList`.

2. **Class Definition**:
   - The class `Answer` contains the method `convertImageToBits`.

3. **Javadoc Comments**:
   - The Javadoc comments provide detailed documentation for the method, including the purpose, arguments, and return type.

4. **Method Signature**:
   - `public static List<Integer> convertImageToBits(String imageFilePath)`: This method takes the path to an image file as input and returns a list of integers representing the binary values of the image pixels.

5. **Image Conversion**:
   - The image is read using `ImageIO.read(new File(imageFilePath))`.
   - A new `BufferedImage` is created with `BufferedImage.TYPE_BYTE_BINARY` to represent the image in black and white.
   - The original image is drawn onto the black and white image using `bwImage.getGraphics().drawImage(image, 0, 0, null)`.

6. **Pixel Extraction**:
   - The method loops through each pixel in the image, extracts its value, and converts it to a binary bit (1 for white, 0 for black).

7. **Main Method**:
   - An example usage is provided in the `main` method to demonstrate how to call the `convertImageToBits` method and print the resulting list of bits.