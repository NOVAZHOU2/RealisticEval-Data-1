Sure! Below is the Java code signature equivalent to your Python code signature:

```java
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

/**
 * Converts a picture to an array of binary bits. It converts the image to black and white mode (only 0s and 1s, 
 * corresponding to black and white). White pixels (value 255) are converted to 1, and black pixels are converted to 0. 
 * Finally, these bits are stored in an array and returned.
 *
 * @param imagePath The path to the image file.
 * @return An array of bits (0 or 1) representing the image.
 */
public class ImageToBitsConverter {

    public static int[] convertImageToBits(String imagePath) throws IOException {
        // Load the image from the given path
        BufferedImage image = ImageIO.read(new File(imagePath));

        if (image == null) {
            throw new IllegalArgumentException("Invalid image path");
        }

        // Get the width and height of the image
        int width = image.getWidth();
        int height = image.getHeight();

        // Create an array to hold the bits
        int[] bits = new int[width * height];

        // Iterate over each pixel in the image
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                // Get the color of the current pixel
                int rgb = image.getRGB(x, y);

                // Extract the red component (since it's grayscale)
                int red = (rgb >> 16) & 0xFF;

                // Convert the red value to either 0 or 1 based on its brightness
                bits[y * width + x] = (red > 127) ? 1 : 0;
            }
        }

        return bits;
    }

    public static void main(String[] args) {
        try {
            String imagePath = "path/to/your/image.jpg";
            int[] bits = convertImageToBits(imagePath);
            System.out.println("Image bits: ");
            for (int bit : bits) {
                System.out.print(bit + " ");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
- **Java Imports**: The necessary imports for handling images (`BufferedImage`, `File`, `ImageIO`) are included.
- **Class Definition**: The `ImageToBitsConverter` class contains the method `convertImageToBits`.
- **Method Signature**: The method `convertImageToBits` takes a `String` parameter `imagePath` and returns an `int[]` array.
- **Exception Handling**: The method throws `IOException` because reading the image file might fail.
- **Image Loading**: The image is loaded using `ImageIO.read()`.
- **Pixel Iteration**: The method iterates over each pixel in the image, extracts the red component (since the image is in grayscale), and converts it to either 0 or 1 based on its brightness.
- **Main Method**: The `main` method demonstrates how to use the `convertImageToBits` method.

This Java code should provide similar functionality to your Python code.