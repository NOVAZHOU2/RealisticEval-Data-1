Certainly! Hereâ€™s the equivalent C++ code for the given Python function, including the translation of type annotations, comments, and documentation:

```cpp
#include <iostream>
#include <vector>
#include <stb_image.h>

/**
 * Convert a picture to an array of binary bits.
 * Convert it to black and white mode (only 0s and 1s, corresponding to black and white),
 * convert the white pixel (value 255) to 1, convert the black pixel to 0,
 * and finally store these bits in an array and return.
 *
 * @param image_path The path to the image file.
 * @return A vector of bits (0 or 1) representing the image.
 */
std::vector<int> convert_image_to_bits(const char* image_path) {
    // Load the image
    int width, height, channels;
    unsigned char* data = stbi_load(image_path, &width, &height, &channels, 1);

    if (!data) {
        std::cerr << "Failed to load image." << std::endl;
        return {};
    }

    // Initialize an empty vector to store the bits
    std::vector<int> bits_array;

    // Loop over each pixel in the image
    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            // Get the pixel value (0 for black, 255 for white)
            int pixel = data[y * width + x];
            // Convert pixel to bit: 1 for white, 0 for black
            int bit = (pixel == 255) ? 1 : 0;
            bits_array.push_back(bit);
        }
    }

    // Free the loaded image data
    stbi_image_free(data);

    return bits_array;
}

int main() {
    const char* image_path = "path/to/your/image.png"; // Replace with your image path
    std::vector<int> bits = convert_image_to_bits(image_path);

    // Print the bits array
    for (int bit : bits) {
        std::cout << bit << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The function signature `convert_image_to_bits` is defined with a `const char*` parameter for the image path and returns a `std::vector<int>`.

2. **Documentation Comments**:
   - Multi-line comments (`/* ... */`) are used to document the function, including the purpose, arguments, and return values.

3. **Image Loading**:
   - The `stbi_load` function is used to load the image, specifying `1` channel to ensure the image is loaded as grayscale.

4. **Pixel Conversion**:
   - A nested loop iterates over each pixel, converting the pixel value to a binary bit (0 or 1).

5. **Memory Management**:
   - The `stbi_image_free` function is called to free the allocated memory after processing the image.

6. **Main Function**:
   - The `main` function demonstrates how to call `convert_image_to_bits` and prints the resulting bits array.

This code preserves the original functionality and structure of the Python code while adhering to C++ conventions and best practices.