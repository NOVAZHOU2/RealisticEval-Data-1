To convert the given Python code into JavaScript, we need to use a library that can handle image processing similar to Python's `PIL`. One such library is `Jimp` (JavaScript Image Manipulation Program), which provides a lot of functionalities for image manipulation. Below is the equivalent JavaScript code:

First, you need to install Jimp using npm:

```bash
npm install jimp
```

Then, here is the JavaScript code:

```javascript
const Jimp = require('jimp');

async function convertImageToBits(imagePath) {
    /**
     * Converts an image to a binary array representation.
     *
     * @param {string} imagePath - The path to the image file.
     * @returns {Promise<Array<number>>} A promise that resolves to a list of bits (0 or 1) representing the image.
     */
    try {
        // Load the image using Jimp
        const image = await Jimp.read(imagePath);

        // Convert the image to grayscale
        image.grayscale();

        // Convert the grayscale image to black and white (1-bit pixels)
        image.threshold(127);

        // Get the width and height of the image
        const w = image.bitmap.width;
        const h = image.bitmap.height;

        // Initialize an empty array to store the bits
        const bitsArray = [];

        // Loop over each pixel in the image
        for (let y = 0; y < h; y++) {
            for (let x = 0; x < w; x++) {
                // Get the pixel value (0 for black, 255 for white after thresholding)
                const pixel = image.getPixelColor(x, y);
                const r = (pixel >> 16) & 0xff; // Extract red component
                const g = (pixel >> 8) & 0xff;  // Extract green component
                const b = pixel & 0xff;         // Extract blue component

                // Convert pixel to bit: 1 for white, 0 for black
                const bit = (r + g + b) > 0 ? 1 : 0;
                bitsArray.push(bit);
            }
        }

        return bitsArray;
    } catch (error) {
        console.error('Error converting image to bits:', error);
        throw error;
    }
}

// Example usage
(async () => {
    try {
        const bits = await convertImageToBits('path/to/image.jpg');
        console.log(bits);
    } catch (error) {
        console.error('Failed to convert image:', error);
    }
})();
```

### Explanation:
1. **Loading the Image**: We use `Jimp.read` to load the image asynchronously.
2. **Grayscale Conversion**: We convert the image to grayscale using `grayscale()`.
3. **Thresholding**: We apply a threshold to convert the grayscale image to black and white.
4. **Pixel Extraction**: We loop through each pixel and extract the color components.
5. **Bit Conversion**: We determine the bit value based on the sum of the RGB components.
6. **Error Handling**: We wrap the entire process in a try-catch block to handle any errors.

This JavaScript code should provide the same functionality as the Python code, converting an image to a binary array representation.