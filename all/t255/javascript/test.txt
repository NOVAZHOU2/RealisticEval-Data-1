To convert your Python unittest test class into a JavaScript test case using Jest, you would need to write a similar test suite. Since the original Python function `convert_image_to_bits` is not provided, I'll assume a hypothetical implementation for demonstration purposes. Here's how you might structure your Jest test case:

```javascript
// Assuming the function is implemented in a file named 'imageConverter.js'
const { convertImageToBits } = require('./imageConverter');

describe('convertImageToBits', () => {
  it('should convert a simple black and white image to binary bits', async () => {
    // Mocking the image data (this should be replaced with actual image data loading logic)
    const mockImageData = [
      [0, 0, 0], // Black
      [255, 255, 255] // White
    ];

    // Mock the image processing logic (this should be replaced with actual image processing logic)
    const mockConvertImageDataToBits = jest.fn(() => [0, 1]);

    // Replace the real implementation with the mock
    const realConvertImageToBits = convertImageToBits;
    convertImageToBits = mockConvertImageDataToBits;

    try {
      const result = await convertImageToBits(mockImageData);
      expect(result).toEqual([0, 1]);
    } finally {
      // Restore the real implementation after the test
      convertImageToBits = realConvertImageToBits;
    }
  });

  it('should handle edge cases', async () => {
    // Test with empty image data
    const emptyImageData = [];
    expect(await convertImageToBits(emptyImageData)).toEqual([]);

    // Test with non-binary values
    const invalidImageData = [[256, 0, 0]];
    expect(() => convertImageToBits(invalidImageData)).toThrowError('Invalid image data');
  });
});
```

In this example, we're mocking the image data and the conversion logic to keep the test isolated from external dependencies. We also include tests for edge cases, such as an empty image and invalid image data. This is just a basic example; you may need to adjust the test according to the actual implementation and requirements of your `convert_image_to_bits` function.