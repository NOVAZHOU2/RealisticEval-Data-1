Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import unittest
from io import BytesIO
from PIL import Image

class TestConvertImageToBits(unittest.TestCase):

    def create_image(self, mode, size, color):
        """
        Helper method to create an in-memory image.

        Args:
            mode (str): The color mode of the image (e.g., '1' for binary, 'L' for grayscale).
            size (tuple): A tuple of the image size (width, height).
            color (int or tuple): The color to fill the image. 255 for white, 0 for black in '1' mode.

        Returns:
            Image: A PIL Image object.
        """
        image = Image.new(mode, size, color)
        return image

    def test_all_white_image(self):
        image = self.create_image('1', (4, 4), 255)
        expected_bits = [1] * 16
        with BytesIO() as img_bytes:
            image.save(img_bytes, format='PNG')
            img_bytes.seek(0)
            result = convert_image_to_bits(img_bytes)
        self.assertEqual(result, expected_bits)

    def test_all_black_image(self):
        image = self.create_image('1', (4, 4), 0)
        expected_bits = [0] * 16
        with BytesIO() as img_bytes:
            image.save(img_bytes, format='PNG')
            img_bytes.seek(0)
            result = convert_image_to_bits(img_bytes)
        self.assertEqual(result, expected_bits)

    def test_checkerboard_image(self):
        image = self.create_image('1', (4, 4), 0)
        pixels = image.load()
        for y in range(4):
            for x in range(4):
                if (x + y) % 2 == 0:
                    pixels[x, y] = 255
        expected_bits = [1, 0, 1, 0,
                         0, 1, 0, 1,
                         1, 0, 1, 0,
                         0, 1, 0, 1]
        with BytesIO() as img_bytes:
            image.save(img_bytes, format='PNG')
            img_bytes.seek(0)
            result = convert_image_to_bits(img_bytes)
        self.assertEqual(result, expected_bits)

    def test_horizontal_stripes_image(self):
        image = self.create_image('1', (4, 4), 0)
        pixels = image.load()
        for y in range(4):
            for x in range(4):
                if y % 2 == 0:
                    pixels[x, y] = 255
        expected_bits = [1, 1, 1, 1,
                         0, 0, 0, 0,
                         1, 1, 1, 1,
                         0, 0, 0, 0]
        with BytesIO() as img_bytes:
            image.save(img_bytes, format='PNG')
            img_bytes.seek(0)
            result = convert_image_to_bits(img_bytes)
        self.assertEqual(result, expected_bits)

    def test_vertical_stripes_image(self):
        image = self.create_image('1', (4, 4), 0)
        pixels = image.load()
        for y in range(4):
            for x in range(4):
                if x % 2 == 0:
                    pixels[x, y] = 255
        expected_bits = [1, 0, 1, 0,
                         1, 0, 1, 0,
                         1, 0, 1, 0,
                         1, 0, 1, 0]
        with BytesIO() as img_bytes:
            image.save(img_bytes, format='PNG')
            img_bytes.seek(0)
            result = convert_image_to_bits(img_bytes)
        self.assertEqual(result, expected_bits)
```

### Equivalent Jest Test Suite:

```javascript
const Jimp = require('jimp');
const fs = require('fs');
const { Readable } = require('stream');

// Mock the convert_image_to_bits function
jest.mock('./convertImageToBits', () => ({
  convertImageToBits: jest.fn(),
}));

const convertImageToBits = require('./convertImageToBits');

describe('TestConvertImageToBits', () => {
  function createImage(mode, size, color) {
    /**
     * Helper method to create an in-memory image.
     *
     * @param {string} mode - The color mode of the image (e.g., '1' for binary, 'L' for grayscale).
     * @param {Array<number>} size - An array of the image size [width, height].
     * @param {number} color - The color to fill the image. 255 for white, 0 for black in '1' mode.
     *
     * @returns {Promise<Jimp>} A Promise that resolves to a Jimp Image object.
     */
    return Jimp.create(size[0], size[1], color).then((image) => {
      if (mode === '1') {
        image.grayscale();
        image.threshold(127);
      }
      return image;
    });
  }

  async function getImageBytes(image) {
    const buffer = await image.getBufferAsync(Jimp.MIME_PNG);
    return new Readable().wrap(buffer);
  }

  describe('test_all_white_image', () => {
    it('should convert an all-white image correctly', async () => {
      const image = await createImage('1', [4, 4], 0xffffff); // White color in RGB
      const imgBytes = await getImageBytes(image);
      const expectedBits = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
      const result = await convertImageToBits(imgBytes);
      expect(result).toEqual(expectedBits);
    });
  });

  describe('test_all_black_image', () => {
    it('should convert an all-black image correctly', async () => {
      const image = await createImage('1', [4, 4], 0x000000); // Black color in RGB
      const imgBytes = await getImageBytes(image);
      const expectedBits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      const result = await convertImageToBits(imgBytes);
      expect(result).toEqual(expectedBits);
    });
  });

  describe('test_checkerboard_image', () => {
    it('should convert a checkerboard image correctly', async () => {
      const image = await createImage('1', [4, 4], 0x000000); // Black color in RGB
      const pixels = image.bitmap.data;
      for (let y = 0; y < 4; y++) {
        for (let x = 0; x < 4; x++) {
          if ((x + y) % 2 === 0) {
            const index = (y * 4 + x) * 4;
            pixels[index] = 255; // Red channel
            pixels[index + 1] = 255; // Green channel
            pixels[index + 2] = 255; // Blue channel
            pixels[index + 3] = 255; // Alpha channel
          }
        }
      }
      const imgBytes = await getImageBytes(image);
      const expectedBits = [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1];
      const result = await convertImageToBits(imgBytes);
      expect(result).toEqual(expectedBits);
    });
  });

  describe('test_horizontal_stripes_image', () => {
    it('should convert a horizontal stripes image correctly', async () => {
      const image = await createImage('1', [4, 4], 0x000000); // Black color in RGB
      const pixels = image.bitmap.data;
      for (let y = 0; y < 4; y++) {
        for (let x = 0; x < 4; x++) {
          if (y % 2 === 0) {
            const index = (y * 4 + x) * 4;
            pixels[index] = 255; // Red channel
            pixels[index + 1] = 255; // Green channel
            pixels[index + 2] = 255; // Blue channel
            pixels[index + 3] = 255; // Alpha channel
          }
        }
      }
      const imgBytes = await getImageBytes(image);
      const expectedBits = [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0];
      const result = await convertImageToBits(imgBytes);
      expect(result).toEqual(expectedBits);
    });
  });

  describe('test_vertical_stripes_image', () => {
    it('should convert a vertical stripes image correctly', async () => {
      const image = await createImage('1', [4, 4], 0x000000); // Black color in RGB
      const pixels = image.bitmap.data;
      for (let y = 0; y < 4; y++) {
        for (let x = 0; x < 4; x++) {
          if (x % 2 === 0) {
            const index = (y * 4 + x) * 4;
            pixels[index] = 255; // Red channel
            pixels[index + 1] = 255; // Green channel
            pixels[index + 2] = 255; // Blue channel
            pixels[index + 3] = 255; // Alpha channel
          }
        }
      }
      const imgBytes = await getImageBytes(image);
      const expectedBits = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0];
      const result = await convertImageToBits(imgBytes);
      expect(result).toEqual(expectedBits);
    });
  });
});

// Example usage
(async () => {
  try {
    const bits = await convertImageToBits('path/to/image.jpg');
    console.log(bits);
  } catch (error) {
    console.error('Failed to convert image:', error);
  }
})();
```

### Explanation:
1. **Helper Function `createImage`**:
   - This function creates an in-memory image using Jimp.
   - It supports creating images in binary mode ('1') by converting to grayscale and applying a threshold.

2. **Helper Function `getImageBytes`**:
   - This function converts the Jimp image to a stream of bytes, simulating the behavior of `BytesIO` in Python.

3. **Test Cases**:
   - Each test case creates an image, saves it to a stream, and then calls the `convertImageToBits` function.
   - Assertions are made using Jest's `expect` function to compare the results with the expected values.

4. **Mocking**:
   - The `convertImageToBits` function is mocked using Jest's mocking capabilities to ensure that the tests do not depend on the actual implementation details.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adapting to JavaScript's Jest framework.