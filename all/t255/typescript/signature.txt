```typescript
import { Buffer } from 'buffer';

/**
 * Converts a picture to an array of binary bits. Converts it to black and white mode (only 0s and 1s, corresponding to black and white),
 * converts the white pixel (value 255) to 1, converts the black pixel to 0, and finally stores these bits in an array and returns.
 *
 * @param image_path - The path to the image file.
 * @returns A Promise that resolves with a list of bits (0 or 1) representing the image.
 */
async function convertImageToBits(imagePath: string): Promise<number[]> {
    // Your implementation here
}
```

In TypeScript, we use `Promise` to handle asynchronous operations, and `number[]` is used instead of `List`. Also, since TypeScript does not have built-in support for images like Python's PIL, you would need to use a library like `sharp` or `jimp` to read the image file.