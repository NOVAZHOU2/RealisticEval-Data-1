Here is how you can write the equivalent TypeScript test case using Jest:

```typescript
import { convertImageToBits } from './path-to-your-function'; // Replace with your function's actual path

describe('convertImageToBits', () => {
    test('should convert a black pixel to 0', async () => {
        const result = await convertImageToBits('./path/to/black-pixel-image.png');
        expect(result).toContain(0);
    });

    test('should convert a white pixel to 1', async () => {
        const result = await convertImageToBits('./path/to/white-pixel-image.png');
        expect(result).toContain(1);
    });
});
```

Please note that this assumes that `convertImageToBits` is an asynchronous function that returns a Promise, which would be typical if it involves reading files or performing I/O operations. If it's synchronous, just remove the `await` keyword and the parentheses after the function name.

Also, replace `'./path-to-your-function'` with the actual path to your JavaScript file where `convertImageToBits` is defined. Similarly, replace `'./path/to/black-pixel-image.png'` and `'./path/to/white-pixel-image.png'` with the actual paths to your test images. 

Jest also provides many other matchers like `.toBe()`, `.toEqual()`, etc., so feel free to choose the ones that best fit your needs.