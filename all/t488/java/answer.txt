Here's the equivalent Java code for your Python function:

```java
package org.real.temp;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Answer {
    public static String getLocalIP(String interfaceName) {
        String ipAddress = null;
        try {
            Process process = Runtime.getRuntime().exec("ipconfig");
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            Pattern pattern = Pattern.compile("IPv4 Address\\s+\\.\\.\\.\\.\\.\\.\\.\\.\\.(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})");

            String line;
            while ((line = reader.readLine()) != null) {
                Matcher matcher = pattern.matcher(line);
                if (matcher.find() && line.contains(interfaceName)) {
                    ipAddress = matcher.group(1);
                    break;
                }
            }

            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        return ipAddress;
    }
}
```

This Java method `getLocalIP` retrieves the local IP address of the specified network interface on Windows using the `ipconfig` command. It uses regular expressions to parse the output of `ipconfig` and extract the IPv4 address associated with the specified interface. If the interface is not found or an error occurs during execution, it returns `null`. Note that this implementation assumes you're running on a Windows system where `ipconfig` is available.