Here's how you can convert the given Python code into JavaScript:

```javascript
const { exec } = require('child_process');
const ipRegex = /inet\s+(\d+\.\d+\.\d+\.\d+)/;

function getLocalIP(interfaceName = 'Wi-Fi') {
    return new Promise((resolve, reject) => {
        const command = `netsh interface ipv4 show config "${interfaceName}"`;
        
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`Error executing command: ${error.message}`);
                reject(error);
                return;
            }

            const matches = ipRegex.exec(stdout);

            if (!matches || matches.length < 2) {
                resolve(null);
            } else {
                resolve(matches[1]);
            }
        });
    });
}

// Usage example:
getLocalIP().then(ip => {
    console.log('Local IP:', ip);
}).catch(error => {
    console.error('Failed to retrieve local IP:', error);
});
```

### Explanation:
1. **Importing Required Modules**: In JavaScript, we use `require` to import modules. Here, we need the `child_process` module for executing shell commands and `Promise` for handling asynchronous operations.

2. **Regular Expression**: We define a regular expression (`ipRegex`) to match the IP address from the output of the `netsh` command.

3. **Function Definition**: We define the `getLocalIP` function that returns a promise. This allows us to handle the asynchronous nature of the `exec` call.

4. **Executing Shell Command**: We use the `exec` function to run the `netsh interface ipv4 show config "${interfaceName}"` command. This command retrieves the configuration details of the specified network interface.

5. **Handling Output**: We parse the standard output using the regular expression to extract the IP address. If no match is found or an error occurs, we resolve the promise with `null`.

6. **Usage Example**: Finally, we demonstrate how to use the `getLocalIP` function and handle its result.

This JavaScript code should achieve the same functionality as your original Python script.