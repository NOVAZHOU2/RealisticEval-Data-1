Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments and type annotations.

### TypeScript Code

```typescript
import * as childProcess from 'child_process';
import * as re from 'xregexp';

/**
 * Retrieve the local IP address of the specified network interface on Windows.
 *
 * @param {string} interfaceName - The name of the network interface to check (default is 'Wi-Fi').
 * @returns {Promise<string | null>} A promise that resolves to the local IP address if found, otherwise null.
 */
function getLocalIp(interfaceName: string = 'Wi-Fi'): Promise<string | null> {
    return new Promise((resolve, reject) => {
        // Execute the 'ipconfig' command to get addresses for the specified interface
        childProcess.exec('ipconfig', (error, stdout, stderr) => {
            if (error) {
                console.error(`Error executing command: ${error}`);
                resolve(null);
                return;
            }

            // Regular expression to match IPv4 addresses
            const ipPattern = re('(?:\\d{1,3}\\.){3}\\d{1,3}', 'g');

            // Search for IP addresses in the command output
            const ips: string[] = re.match(stdout, ipPattern, 'all');

            // Return the first local IP found
            for (const ip of ips) {
                if (ip.startsWith('192.168.')) {
                    resolve(ip);
                    return;
                }
            }

            resolve(null); // Return null if no suitable IP is found
        });
    });
}

// Example usage
(async () => {
    try {
        const localIp = await getLocalIp();
        console.log('Local IP:', localIp);
    } catch (error) {
        console.error('An unexpected error occurred:', error);
    }
})();
```

### Explanation:

1. **Imports**:
   - `childProcess`: Used to execute shell commands.
   - `xregexp`: A library for extended regular expressions (since Node.js does not include a built-in regex library with global flags).

2. **Function Definition**:
   - `getLocalIp`: This function returns a promise that resolves to either the local IP address or `null`.
   - It uses `childProcess.exec` to run the `ipconfig` command and capture its output.

3. **JSDoc Documentation**:
   - The JSDoc-style comments provide detailed documentation for the function parameters and return type.

4. **Regular Expression**:
   - The regular expression `/(?:\d{1,3}\.){3}\d{1,3}/g` matches IPv4 addresses.

5. **Example Usage**:
   - An asynchronous function demonstrates how to call `getLocalIp` and handle the result.

This TypeScript code preserves the original functionality and structure of the Python code while adapting it to TypeScript conventions and syntax.