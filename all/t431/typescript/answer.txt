Certainly! Below is the equivalent TypeScript code for the given Python function:

```typescript
function intersectHorizontally(rect1: [number, number, number, number], rect2: [number, number, number, number]): boolean {
    /**
     * Determine if two rectangles intersect horizontally.
     *
     * Each rectangle is defined by a tuple [x1, y1, x2, y2], where:
     * - [x1, y1] are the coordinates of the bottom-left corner.
     * - [x2, y2] are the coordinates of the top-right corner.
     *
     * @param rect1 - The first rectangle defined by [x1, y1, x2, y2].
     * @param rect2 - The second rectangle defined by [x1, y2, x2, y2].
     * @returns True if the rectangles intersect horizontally, False otherwise.
     */

    return !(rect1[2] < rect2[0] || rect2[2] < rect1[0]);
}

// Example usage
const rect1: [number, number, number, number] = [1, 1, 5, 5];
const rect2: [number, number, number, number] = [4, 4, 8, 8];
console.log(intersectHorizontally(rect1, rect2)); // Output: true
```

### Explanation:
1. **Function Definition**: The function `intersectHorizontally` is defined with the correct parameter types (`[number, number, number, number]`) and return type (`boolean`).
2. **Tuple Types**: In TypeScript, tuples are represented using the `[type1, type2, ...]` syntax. This ensures that the order and types of elements in the tuple are strictly checked.
3. **Logic**: The logic remains the same as in the Python code, checking if the right edge of one rectangle is to the left of the left edge of the other rectangle.
4. **Example Usage**: An example usage is provided to demonstrate how the function can be called with specific rectangles.