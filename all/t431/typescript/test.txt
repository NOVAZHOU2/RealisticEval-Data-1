To solve the given problem, we need to create a TypeScript function `intersectHorizontally` and write tests for it using Jest. Below is the equivalent TypeScript code with the Jest tests:

### TypeScript Code

First, define the function `intersectHorizontally`:

```typescript
function intersectHorizontally(rect1: [number, number, number, number], rect2: [number, number, number, number]): boolean {
    const [x1_1, _, x2_1, _] = rect1;
    const [x1_2, _, x2_2, _] = rect2;

    // Check if there is no horizontal overlap
    if (x1_1 >= x2_2 || x1_2 >= x2_1) {
        return false;
    }

    return true;
}

// Example usage
console.log(intersectHorizontally([1, 1, 5, 5], [3, 3, 7, 7])); // true
console.log(intersectHorizontally([1, 1, 2, 2], [3, 3, 5, 5])); // false
```

### Jest Test Class

Now, let's create the Jest test class to test the `intersectHorizontally` function:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('intersectHorizontally', () => {
    it('should return true when rectangles intersect horizontally', () => {
        expect(intersectHorizontally([1, 1, 5, 5], [3, 3, 7, 7])).toBe(true);
        expect(intersectHorizontally([2, 2, 6, 6], [4, 4, 8, 8])).toBe(true);
    });

    it('should return false when rectangles do not intersect horizontally', () => {
        expect(intersectHorizontally([1, 1, 2, 2], [3, 3, 5, 5])).toBe(false);
        expect(intersectHorizontally([10, 10, 15, 15], [16, 16, 20, 20])).toBe(false);
    });
});
```

### Explanation

1. **Function Definition**: The function `intersectHorizontally` takes two tuples as input, each representing a rectangle defined by `(x1, y1, x2, y2)` coordinates. It checks if there is any horizontal overlap between the two rectangles.

2. **Jest Test Suite**: The `describe` block defines a test suite named `intersectHorizontally`. Inside this suite, we have two `it` blocks:
   - The first `it` block tests cases where the rectangles intersect horizontally.
   - The second `it` block tests cases where the rectangles do not intersect horizontally.

3. **Assertions**: The `expect` function is used to make assertions about the output of the `intersectHorizontally` function. We use `toBe` to check if the function returns the expected boolean value (`true` or `false`).

This setup ensures that the functionality and logic of the tests are preserved, and the tests are written in Jest with proper type annotations.