Here's how you can convert your Python unittest test class to a TypeScript Jest test case:

```typescript
import { describe, it, expect } from '@jest/globals';

function intersectHorizontally(rect1: [number, number, number, number], rect2: [number, number, number, number]): boolean {
    // Your implementation here
}

describe('intersectHorizontally', () => {
    it('should return true when rectangles intersect horizontally', () => {
        const rect1 = [0, 0, 5, 5];
        const rect2 = [3, 3, 8, 8];
        expect(intersectHorizontally(rect1, rect2)).toBe(true);
    });

    it('should return false when rectangles do not intersect horizontally', () => {
        const rect1 = [0, 0, 5, 5];
        const rect2 = [6, 6, 11, 11];
        expect(intersectHorizontally(rect1, rect2)).toBe(false);
    });
});
```

In this TypeScript code, we're using Jest's `describe` and `it` functions to create a test suite for our `intersectHorizontally` function. We're also using Jest's `expect` function to assert that our function returns the expected values. This should give you a good starting point for testing your TypeScript code with Jest.