Here's the equivalent TypeScript function signature with comments:

```typescript
/**
 * Determines if two rectangles intersect horizontally.
 *
 * Each rectangle is defined by an object { x1: number, y1: number, x2: number, y2: number }, where:
 * - { x1, y1 } are the coordinates of the bottom-left corner.
 * - { x2, y2 } are the coordinates of the top-right corner.
 *
 * @param rect1 - The first rectangle defined by { x1: number, y1: number, x2: number, y2: number }.
 * @param rect2 - The second rectangle defined by { x1: number, y1: number, x2: number, y2: number }.
 * @returns true if the rectangles intersect horizontally, false otherwise.
 */
function intersectHorizontally(rect1: { x1: number, y1: number, x2: number, y2: number }, rect2: { x1: number, y1: number, x2: number, y2: number }): boolean {
    // Function implementation goes here...
}
```

In TypeScript, we use interfaces or type aliases to define the structure of objects. In this case, I've used an object literal with properties `x1`, `y1`, `x2`, and `y2` all of type `number`. The return type of the function is specified as `boolean`.