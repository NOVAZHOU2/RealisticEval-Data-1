To convert the given Python function into a C++ test class using Catch2, we need to define the function `intersect_horizontally` in C++ and then write the corresponding test cases using Catch2's assertion mechanisms. Below is the C++ implementation of the function along with the test cases:

```cpp
#include <catch2/catch.hpp>
#include <tuple>

// Function to determine if two rectangles intersect horizontally
bool intersect_horizontally(const std::tuple<int, int, int, int>& rect1, const std::tuple<int, int, int, int>& rect2) {
    // Extracting coordinates from tuples
    int x1_1 = std::get<0>(rect1);
    int y1_1 = std::get<1>(rect1);
    int x2_1 = std::get<2>(rect1);
    int y2_1 = std::get<3>(rect1);

    int x1_2 = std::get<0>(rect2);
    int y1_2 = std::get<1>(rect2);
    int x2_2 = std::get<2>(rect2);
    int y2_2 = std::get<3>(rect2);

    // Check if there is horizontal intersection
    return (x2_1 >= x1_2 && x1_1 <= x2_2);
}

TEST_CASE("Test intersect_horizontally") {
    SECTION("Rectangles intersect horizontally") {
        REQUIRE(intersect_horizontally(std::make_tuple(0, 0, 5, 5), std::make_tuple(4, 0, 9, 5)) == true);
        REQUIRE(intersect_horizontally(std::make_tuple(-2, -2, 2, 2), std::make_tuple(0, 0, 5, 5)) == true);
        REQUIRE(intersect_horizontally(std::make_tuple(-5, -5, 0, 0), std::make_tuple(-1, -1, 4, 4)) == true);
    }

    SECTION("Rectangles do not intersect horizontally") {
        REQUIRE(intersect_horizontally(std::make_tuple(0, 0, 5, 5), std::make_tuple(6, 0, 9, 5)) == false);
        REQUIRE(intersect_horizontally(std::make_tuple(-2, -2, 2, 2), std::make_tuple(3, 0, 7, 5)) == false);
        REQUIRE(intersect_horizontally(std::make_tuple(-5, -5, 0, 0), std::make_tuple(1, -1, 6, 4)) == false);
    }
}
```

### Explanation:
1. **Function Definition**: 
   - The function `intersect_horizontally` takes two `std::tuple<int, int, int, int>` as parameters representing the rectangles.
   - It extracts the coordinates from each tuple and checks if there is a horizontal intersection by comparing the x-coordinates.

2. **Test Class**:
   - The `TEST_CASE` macro is used to define a test case named "Test intersect_horizontally".
   - Inside the test case, `SECTION` macros are used to group similar test scenarios.
   - `REQUIRE` is used to assert the expected outcome of the function calls.

This setup ensures that the functionality and logic of the original Python test cases are preserved while adapting them to work within the C++ environment using Catch2.