Sure! Below is an equivalent C++ test case using Catch2 for the given Python `unittest` function `intersect_horizontally`.

First, ensure you have Catch2 installed in your project. If not, you can include it via a package manager or download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2).

Here's the C++ test case:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file

#include <catch2/catch.hpp>
#include <tuple>

bool intersect_horizontally(const std::tuple<int, int, int, int>& rect1, const std::tuple<int, int, int, int>& rect2) {
    /*
    Determine if two rectangles intersect horizontally.

    Each rectangle is defined by a tuple (x1, y1, x2, y2), where:
    - (x1, y1) are the coordinates of the bottom-left corner.
    - (x2, y2) are the coordinates of the top-right corner.

    Args:
        rect1 (tuple): The first rectangle defined by (x1, y1, x2, y2).
        rect2 (tuple): The second rectangle defined by (x1, y1, x2, y2).

    Returns:
        bool: True if the rectangles intersect horizontally, False otherwise.
    */
    auto [x1_1, y1_1, x2_1, y2_1] = rect1;
    auto [x1_2, y1_2, x2_2, y2_2] = rect2;

    return !(x2_1 < x1_2 || x2_2 < x1_1);
}

TEST_CASE("Intersect Horizontally", "[intersect_horizontally]") {
    REQUIRE(intersect_horizontally(std::make_tuple(0, 0, 5, 5), std::make_tuple(3, 3, 8, 8)) == true);
    REQUIRE(intersect_horizontally(std::make_tuple(0, 0, 5, 5), std::make_tuple(6, 6, 10, 10)) == false);
    REQUIRE(intersect_horizontally(std::make_tuple(0, 0, 5, 5), std::make_tuple(-2, -2, 2, 2)) == true);
    REQUIRE(intersect_horizontally(std::make_tuple(0, 0, 5, 5), std::make_tuple(4, 4, 9, 9)) == true);
    REQUIRE(intersect_horizontally(std::make_tuple(0, 0, 5, 5), std::make_tuple(10, 10, 15, 15)) == false);
}
```

### Explanation:
- **Catch2 Setup**: The `#define CATCH_CONFIG_MAIN` directive tells Catch to automatically generate a `main()` function for you.
- **Function Definition**: The `intersect_horizontally` function is implemented in C++ and follows the same logic as the original Python function.
- **Test Case**: The `TEST_CASE` macro defines a test case named "Intersect Horizontally". Inside this macro, several `REQUIRE` statements are used to verify that the function behaves correctly with different inputs.

Make sure to compile your C++ code with the Catch2 library linked properly. For example, if you're using g++, you might compile it like this:

```sh
g++ -std=c++17 -o test_intersect_horizontally test_intersect_horizontally.cpp -lCatch2
```

Then run the executable:

```sh
./test_intersect_horizontally
```

This will execute the tests and output the results.