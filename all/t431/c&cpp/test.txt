Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a set of Catch2 test cases, ensuring that the functionality and logic of the tests are preserved.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 using the following steps:

1. Add the Catch2 header file to your project.
2. Include the necessary headers and define the test cases.

Hereâ€™s the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <tuple>

// Function to determine if two rectangles intersect horizontally
/**
 * Determine if two rectangles intersect horizontally.
 *
 * Each rectangle is defined by a tuple (x1, y1, x2, y2), where:
 * - (x1, y1) are the coordinates of the bottom-left corner.
 * - (x2, y2) are the coordinates of the top-right corner.
 *
 * @param rect1 The first rectangle defined by (x1, y1, x2, y2).
 * @param rect2 The second rectangle defined by (x1, y1, x2, y2).
 * @return True if the rectangles intersect horizontally, False otherwise.
 */
bool intersect_horizontally(const std::tuple<int, int, int, int>& rect1, const std::tuple<int, int, int, int>& rect2) {
    // Extracting coordinates from tuples
    int x1_1, y1_1, x2_1, y2_1;
    std::tie(x1_1, y1_1, x2_1, y2_1) = rect1;

    int x1_2, y1_2, x2_2, y2_2;
    std::tie(x1_2, y1_2, x2_2, y2_2) = rect2;

    // Check if rectangles intersect horizontally
    return !(x2_1 < x1_2 || x2_2 < x1_1);
}

TEST_CASE("Test intersect_horizontally", "[intersect_horizontally]") {
    SECTION("Test with overlapping rectangles") {
        auto rect1 = std::make_tuple(0, 0, 2, 2);
        auto rect2 = std::make_tuple(1, 1, 3, 3);
        REQUIRE(intersect_horizontally(rect1, rect2));
    }

    SECTION("Test with rectangles touching at a point (not overlapping)") {
        auto rect1 = std::make_tuple(0, 0, 1, 1);
        auto rect2 = std::make_tuple(1, 1, 2, 2);
        REQUIRE(intersect_horizontally(rect1, rect2));
    }

    SECTION("Test with adjacent rectangles (no overlap)") {
        auto rect1 = std::make_tuple(0, 0, 2, 2);
        auto rect2 = std::make_tuple(2, 0, 3, 3);
        REQUIRE(intersect_horizontally(rect1, rect2));
    }

    SECTION("Test with one rectangle fully inside another") {
        auto rect1 = std::make_tuple(1, 1, 4, 4);
        auto rect2 = std::make_tuple(2, 2, 3, 3);
        REQUIRE(intersect_horizontally(rect1, rect2));
    }

    SECTION("Test with overlapping rectangles") {
        auto rect1 = std::make_tuple(-1, -1, 1, 1);
        auto rect2 = std::make_tuple(0, 0, 2, 2);
        REQUIRE(intersect_horizontally(rect1, rect2));
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Catch2 Header**: The Catch2 header is included at the beginning of the file.
2. **Function Definition**: The `intersect_horizontally` function is defined with appropriate comments.
3. **Test Cases**: Each test case from the Python unittest class is converted into a `SECTION` within a `TEST_CASE` in Catch2.
4. **Assertions**: The `REQUIRE` macro is used to assert the expected behavior of the `intersect_horizontally` function.
5. **Main Function**: The `main` function initializes and runs the Catch2 test session.

This setup ensures that the tests are structured and executed similarly to the original Python unittest class, providing clear and concise test cases for the `intersect_horizontally` function.