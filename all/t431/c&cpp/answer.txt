Certainly! Below is the equivalent C++ code for the given Python function. This code defines a function `intersect_horizontally` that determines if two rectangles intersect horizontally based on their coordinates.

```cpp
#include <iostream>
#include <tuple>

// Function to determine if two rectangles intersect horizontally
bool intersect_horizontally(const std::tuple<int, int, int, int>& rect1, const std::tuple<int, int, int, int>& rect2) {
    // Extracting coordinates from tuples
    int x1_1, y1_1, x2_1, y2_1;
    std::tie(x1_1, y1_1, x2_1, y2_1) = rect1;

    int x1_2, y1_2, x2_2, y2_2;
    std::tie(x1_2, y1_2, x2_2, y2_2) = rect2;

    // Check if rectangles intersect horizontally
    return !(x2_1 < x1_2 || x2_2 < x1_1);
}

int main() {
    // Example usage
    auto rect1 = std::make_tuple(1, 1, 5, 5);
    auto rect2 = std::make_tuple(4, 4, 8, 8);

    bool result = intersect_horizontally(rect1, rect2);
    std::cout << "Do the rectangles intersect horizontally? " << (result ? "Yes" : "No") << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Definition**: The function `intersect_horizontally` takes two tuples as arguments, each representing a rectangle with coordinates `(x1, y1, x2, y2)`.

2. **Tuple Unpacking**: In C++, we use `std::tie` to unpack the tuples into individual variables.

3. **Intersection Logic**: The logic to check if the rectangles intersect horizontally remains the same as in the Python code.

4. **Example Usage**: An example usage is provided in the `main` function to demonstrate how to call the `intersect_horizontally` function and print the result.