Certainly! Below is the equivalent C++ code for the given Python function. This version includes necessary type declarations and adjustments to handle tuples and logic:

```cpp
#include <tuple>
#include <iostream>

// Function to determine if two rectangles intersect horizontally
bool intersect_horizontally(const std::tuple<int, int, int, int>& rect1, const std::tuple<int, int, int, int>& rect2) {
    // Extracting coordinates from the tuples
    int x1_1, y1_1, x2_1, y2_1;
    int x1_2, y1_2, x2_2, y2_2;
    std::tie(x1_1, y1_1, x2_1, y2_1) = rect1;
    std::tie(x1_2, y1_2, x2_2, y2_2) = rect2;

    // Check if rectangles intersect horizontally
    return !(x2_1 < x1_2 || x2_2 < x1_1);
}

// Function to test the intersect_horizontally function
void check_function() {
    std::tuple<int, int, int, int> rect1 = std::make_tuple(1, 1, 5, 5);
    std::tuple<int, int, int, int> rect2 = std::make_tuple(4, 4, 8, 8);

    bool result = intersect_horizontally(rect1, rect2);
    std::cout << "Do rectangles intersect horizontally? " << (result ? "Yes" : "No") << std::endl;
}

int main() {
    check_function();
    return 0;
}
```

### Explanation:
1. **Tuple Usage**: In C++, `std::tuple` is used to represent the rectangles. The coordinates are extracted using `std::tie`.
2. **Function Definition**: The function `intersect_horizontally` takes two tuples as arguments and returns a boolean value based on the horizontal intersection condition.
3. **Check Function**: A helper function `check_function` is provided to demonstrate how to call the `intersect_horizontally` function with example rectangles and print the result.
4. **Main Function**: The `main` function calls `check_function` to run the test case.

This ensures the functionality remains consistent with the original Python code while adapting to C++ syntax and features.