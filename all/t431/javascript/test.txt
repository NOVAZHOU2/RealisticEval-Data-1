Certainly! Below is the equivalent Jest test suite for the given Python `unittest` test class. I will convert each test case and ensure that the functionality and logic are preserved.

### Python Code

```python
import unittest

def intersect_horizontally(rect1, rect2):
    return not (rect1[2] < rect2[0] or rect2[2] < rect1[0])

class TestIntersectHorizontally(unittest.TestCase):

    def test_case1(self):
        """Test with overlapping rectangles."""
        rect1 = (0, 0, 2, 2)
        rect2 = (1, 1, 3, 3)
        self.assertTrue(intersect_horizontally(rect1, rect2))

    def test_case2(self):
        """Test with rectangles touching at a point (not overlapping)."""
        rect1 = (0, 0, 1, 1)
        rect2 = (1, 1, 2, 2)
        self.assertTrue(intersect_horizontally(rect1, rect2))

    def test_case3(self):
        """Test with adjacent rectangles (no overlap)."""
        rect1 = (0, 0, 2, 2)
        rect2 = (2, 0, 3, 3)
        self.assertTrue(intersect_horizontally(rect1, rect2))

    def test_case4(self):
        """Test with one rectangle fully inside another."""
        rect1 = (1, 1, 4, 4)
        rect2 = (2, 2, 3, 3)
        self.assertTrue(intersect_horizontally(rect1, rect2))

    def test_case5(self):
        """Test with overlapping rectangles."""
        rect1 = (-1, -1, 1, 1)
        rect2 = (0, 0, 2, 2)
        self.assertTrue(intersect_horizontally(rect1, rect2))
```

### Equivalent Jest Test Suite

```javascript
// Import the intersectHorizontally function
const intersectHorizontally = require('./intersectHorizontally');

describe('intersectHorizontally', () => {
    it('test with overlapping rectangles', () => {
        const rect1 = [0, 0, 2, 2];
        const rect2 = [1, 1, 3, 3];
        expect(intersectHorizontally(rect1, rect2)).toBe(true);
    });

    it('test with rectangles touching at a point (not overlapping)', () => {
        const rect1 = [0, 0, 1, 1];
        const rect2 = [1, 1, 2, 2];
        expect(intersectHorizontally(rect1, rect2)).toBe(true);
    });

    it('test with adjacent rectangles (no overlap)', () => {
        const rect1 = [0, 0, 2, 2];
        const rect2 = [2, 0, 3, 3];
        expect(intersectHorizontally(rect1, rect2)).toBe(true);
    });

    it('test with one rectangle fully inside another', () => {
        const rect1 = [1, 1, 4, 4];
        const rect2 = [2, 2, 3, 3];
        expect(intersectHorizontally(rect1, rect2)).toBe(true);
    });

    it('test with overlapping rectangles', () => {
        const rect1 = [-1, -1, 1, 1];
        const rect2 = [0, 0, 2, 2];
        expect(intersectHorizontally(rect1, rect2)).toBe(true);
    });
});
```

### Explanation

1. **Importing the Function**: In Jest, we need to import the `intersectHorizontally` function from the file where it is defined.
2. **Describe Block**: We use the `describe` block to group related tests together.
3. **It Blocks**: Each test case is defined within an `it` block, which provides a description of the test.
4. **Expect Assertions**: We use `expect` to assert the expected behavior of the function. In this case, we use `toBe(true)` to check that the function returns `true`.

This conversion ensures that the functionality and logic of the tests are preserved, and the structure is clear and follows Jest conventions.