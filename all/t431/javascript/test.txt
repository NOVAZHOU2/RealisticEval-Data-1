To convert the provided Python function into a Jest test suite, we need to define a similar function in JavaScript and write tests for it. Below is the JavaScript version of the function `intersect_horizontally` along with the Jest test cases.

### JavaScript Function Definition

First, let's define the `intersectHorizontally` function in JavaScript:

```javascript
/**
 * Determine if two rectangles intersect horizontally.
 *
 * Each rectangle is defined by an array [x1, y1, x2, y2], where:
 * - [x1, y1] are the coordinates of the bottom-left corner.
 * - [x2, y2] are the coordinates of the top-right corner.
 *
 * @param {Array} rect1 - The first rectangle defined by [x1, y1, x2, y2].
 * @param {Array} rect2 - The second rectangle defined by [x1, y1, x2, y2].
 * @returns {boolean} - True if the rectangles intersect horizontally, False otherwise.
 */
function intersectHorizontally(rect1, rect2) {
  const [x1a, y1a, x2a, y2a] = rect1;
  const [x1b, y1b, x2b, y2b] = rect2;

  // Check if one rectangle is to the left of the other
  if (x2a < x1b || x2b < x1a) {
    return false;
  }

  // Check if one rectangle is above the other
  if (y2a < y1b || y2b < y1a) {
    return false;
  }

  // If neither of the above conditions is true, the rectangles intersect
  return true;
}
```

### Jest Test Suite

Now, let's write the Jest test suite to verify the correctness of the `intersectHorizontally` function:

```javascript
const intersectHorizontally = require('./intersectHorizontally'); // Import the function from a separate file

describe('intersectHorizontally', () => {
  it('should detect horizontal intersection correctly', () => {
    // Test case 1: Rectangles intersect horizontally
    expect(intersectHorizontally([0, 0, 5, 5], [4, 0, 9, 5])).toBe(true);

    // Test case 2: Rectangles do not intersect horizontally
    expect(intersectHorizontally([0, 0, 3, 5], [4, 0, 9, 5])).toBe(false);

    // Test case 3: One rectangle is completely inside the other
    expect(intersectHorizontally([0, 0, 10, 10], [2, 2, 8, 8])).toBe(true);

    // Test case 4: Rectangles overlap at edges
    expect(intersectHorizontally([0, 0, 5, 5], [5, 0, 10, 5])).toBe(false);

    // Test case 5: Rectangles overlap partially
    expect(intersectHorizontally([0, 0, 5, 5], [3, 0, 7, 5])).toBe(true);

    // Test case 6: Rectangles overlap vertically but not horizontally
    expect(intersectHorizontally([0, 0, 5, 5], [0, 5, 5, 10])).toBe(false);
  });
});
```

### Explanation

1. **Function Definition**: The JavaScript function `intersectHorizontally` closely mirrors the logic of the Python function. It takes two arrays as arguments representing the coordinates of the rectangles and returns a boolean indicating whether they intersect horizontally.

2. **Test Cases**:
   - **Test Case 1**: Checks if rectangles intersect horizontally when one overlaps the other.
   - **Test Case 2**: Checks if rectangles do not intersect horizontally when there is no overlap.
   - **Test Case 3**: Checks if one rectangle is completely inside the other.
   - **Test Case 4**: Checks if rectangles overlap only at the edges.
   - **Test Case 5**: Checks if rectangles overlap partially.
   - **Test Case 6**: Checks if rectangles overlap vertically but not horizontally.

3. **Assertions**: The `expect` function is used to assert the expected behavior of the `intersectHorizontally` function. The `toBe` matcher is used to check if the actual result matches the expected value.

This conversion ensures that the functionality and logic of the tests are maintained while adapting to the Jest testing framework in JavaScript.