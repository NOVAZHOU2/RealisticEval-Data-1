Sure! Below is the equivalent C++ and C code for converting an RGB color to an HSV color.

### C++ Code

```cpp
#include <iostream>
#include <algorithm>

std::tuple<int, int, int> rgbToHsv(int r, int g, int b) {
    // Normalize RGB values to [0, 1]
    double maxVal = std::max({r / 255.0, g / 255.0, b / 255.0});
    double minVal = std::min({r / 255.0, g / 255.0, b / 255.0});
    double delta = maxVal - minVal;

    int h, s;
    if (delta == 0) {
        h = 0; // Undefined hue
        s = 0;
    } else {
        s = static_cast<int>(delta * 100);

        if (maxVal == r / 255.0)
            h = static_cast<int>((60 * fmod((g / 255.0 - b / 255.0) / delta, 6)));
        else if (maxVal == g / 255.0)
            h = static_cast<int>((60 * ((b / 255.0 - r / 255.0) / delta + 2)));
        else
            h = static_cast<int>((60 * ((r / 255.0 - g / 255.0) / delta + 4)));

        if (h < 0)
            h += 360;
    }

    int v = static_cast<int>(maxVal * 100);

    return {h, s, v};
}

int main() {
    auto [h, s, v] = rgbToHsv(0, 0, 255);
    std::cout << "HSV: " << h << ", " << s << ", " << v << std::endl;
    return 0;
}
```

### C Code

```c
#include <stdio.h>
#include <math.h>

void rgbToHsv(int r, int g, int b, int *h, int *s, int *v) {
    // Normalize RGB values to [0, 1]
    double maxVal = fmax(fmax(r / 255.0, g / 255.0), b / 255.0);
    double minVal = fmin(fmin(r / 255.0, g / 255.0), b / 255.0);
    double delta = maxVal - minVal;

    if (delta == 0) {
        *h = 0; // Undefined hue
        *s = 0;
    } else {
        *s = (int)(delta * 100);

        if (maxVal == r / 255.0)
            *h = (int)((60 * fmod((g / 255.0 - b / 255.0) / delta, 6)));
        else if (maxVal == g / 255.0)
            *h = (int)((60 * ((b / 255.0 - r / 255.0) / delta + 2)));
        else
            *h = (int)((60 * ((r / 255.0 - g / 255.0) / delta + 4)));

        if (*h < 0)
            *h += 360;
    }

    *v = (int)(maxVal * 100);
}

int main() {
    int h, s, v;
    rgbToHsv(0, 0, 255, &h, &s, &v);
    printf("HSV: %d, %d, %d\n", h, s, v);
    return 0;
}
```

### Explanation

- **Normalization**: The RGB values are normalized to the range `[0, 1]`.
- **Delta Calculation**: The difference between the maximum and minimum values of the RGB components is calculated.
- **Hue Calculation**: The hue is calculated based on the positions of the maximum and minimum values among the RGB components.
- **Saturation Calculation**: The saturation is calculated as a percentage of the maximum value.
- **Value Calculation**: The value is calculated as a percentage of the maximum value.

These codes will convert an RGB color to an HSV color and print the result in the console.