Certainly! Below is the equivalent C++ code for the given Python function `rgb_to_hsv`, including the conversion of function signatures, type annotations, and comments:

```cpp
#include <iostream>
#include <tuple>
#include <algorithm> // For std::max and std::min

/**
 * Convert RGB color to HSV color.
 * 
 * Example:
 *     Input: 0, 0, 255
 *     Output: 240, 100, 100
 * 
 * @param r The red value of the RGB color.
 * @param g The green value of the RGB color.
 * @param b The blue value of the RGB color.
 * 
 * @return A tuple containing the HSV values.
 */
std::tuple<double, double, double> rgb_to_hsv(int r, int g, int b) {
    // Normalize the RGB values by dividing by 255
    double r_normalized = static_cast<double>(r) / 255.0;
    double g_normalized = static_cast<double>(g) / 255.0;
    double b_normalized = static_cast<double>(b) / 255.0;

    // Find the minimum and maximum values among R, G, and B
    double max_rgb = std::max({r_normalized, g_normalized, b_normalized});
    double min_rgb = std::min({r_normalized, g_normalized, b_normalized});
    double delta = max_rgb - min_rgb;

    // Calculate H (Hue)
    double h = 0;
    if (delta == 0) {
        h = 0;
    } else if (max_rgb == r_normalized) {
        h = ((g_normalized - b_normalized) / delta) % 6;
    } else if (max_rgb == g_normalized) {
        h = ((b_normalized - r_normalized) / delta) + 2;
    } else {
        h = ((r_normalized - g_normalized) / delta) + 4;
    }

    h *= 60;  // Convert to degrees on the color circle

    // Calculate S (Saturation)
    double s = 0;
    if (max_rgb == 0) {
        s = 0;
    } else {
        s = delta / max_rgb;
    }

    // V (Value) is equal to max_rgb
    double v = max_rgb;

    return std::make_tuple(h, s * 100, v * 100);
}

// Example usage
int main() {
    int r = 0, g = 0, b = 255;
    auto [h, s, v] = rgb_to_hsv(r, g, b);
    std::cout << "HSV: (" << h << ", " << s << ", " << v << ")" << std::endl;
    return 0;
}
```

### Explanation:
1. **Function Signature**: The function signature is converted to C++ with appropriate parameter names and types.
2. **Type Annotations**: The Python type annotations are translated into C++ types (`int` for inputs and `std::tuple<double, double, double>` for the return type).
3. **Comments and Documentation**:
   - Multi-line comments are used for the function documentation.
   - Single-line comments are used for inline explanations.
4. **Normalization**: The RGB values are normalized by dividing by 255.
5. **Calculation of HSV Values**: The calculations for hue (H), saturation (S), and value (V) are performed as per the Python logic.
6. **Return Value**: The function returns a tuple containing the HSV values.

This C++ code preserves the original purpose and structure of the Python code while adhering to C++ conventions and documentation standards.