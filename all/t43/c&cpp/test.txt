Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a C++ test class with equivalent functionality and logic, using appropriate assertions in Catch2.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 using the following headers:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <tuple>
#include <algorithm>
```

Here is the complete C++ code with the test class:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <tuple>
#include <algorithm>

// Function to convert RGB color to HSV color
std::tuple<double, double, double> rgb_to_hsv(int r, int g, int b) {
    // Normalize the RGB values by dividing by 255
    double r_normalized = static_cast<double>(r) / 255.0;
    double g_normalized = static_cast<double>(g) / 255.0;
    double b_normalized = static_cast<double>(b) / 255.0;

    // Find the minimum and maximum values among R, G, and B
    double max_rgb = std::max({r_normalized, g_normalized, b_normalized});
    double min_rgb = std::min({r_normalized, g_normalized, b_normalized});
    double delta = max_rgb - min_rgb;

    // Calculate H (Hue)
    double h = 0;
    if (delta == 0) {
        h = 0;
    } else if (max_rgb == r_normalized) {
        h = ((g_normalized - b_normalized) / delta) % 6;
    } else if (max_rgb == g_normalized) {
        h = ((b_normalized - r_normalized) / delta) + 2;
    } else {
        h = ((r_normalized - g_normalized) / delta) + 4;
    }

    h *= 60;  // Convert to degrees on the color circle

    // Calculate S (Saturation)
    double s = 0;
    if (max_rgb == 0) {
        s = 0;
    } else {
        s = delta / max_rgb;
    }

    // V (Value) is equal to max_rgb
    double v = max_rgb;

    return std::make_tuple(h, s * 100, v * 100);
}

// Test class using Catch2
TEST_CASE("Test RGB to HSV conversion") {
    SECTION("Test conversion of pure red color") {
        int r = 255, g = 0, b = 0;
        auto expected_result = std::make_tuple(0.0, 100.0, 100.0);
        auto result = rgb_to_hsv(r, g, b);
        REQUIRE(std::get<0>(result) == std::get<0>(expected_result));
        REQUIRE(std::get<1>(result) == std::get<1>(expected_result));
        REQUIRE(std::get<2>(result) == std::get<2>(expected_result));
    }

    SECTION("Test conversion of pure green color") {
        int r = 0, g = 255, b = 0;
        auto expected_result = std::make_tuple(120.0, 100.0, 100.0);
        auto result = rgb_to_hsv(r, g, b);
        REQUIRE(std::get<0>(result) == std::get<0>(expected_result));
        REQUIRE(std::get<1>(result) == std::get<1>(expected_result));
        REQUIRE(std::get<2>(result) == std::get<2>(expected_result));
    }

    SECTION("Test conversion of pure blue color") {
        int r = 0, g = 0, b = 255;
        auto expected_result = std::make_tuple(240.0, 100.0, 100.0);
        auto result = rgb_to_hsv(r, g, b);
        REQUIRE(std::get<0>(result) == std::get<0>(expected_result));
        REQUIRE(std::get<1>(result) == std::get<1>(expected_result));
        REQUIRE(std::get<2>(result) == std::get<2>(expected_result));
    }

    SECTION("Test conversion of white color") {
        int r = 255, g = 255, b = 255;
        auto expected_result = std::make_tuple(0.0, 0.0, 100.0);
        auto result = rgb_to_hsv(r, g, b);
        REQUIRE(std::get<0>(result) == std::get<0>(expected_result));
        REQUIRE(std::get<1>(result) == std::get<1>(expected_result));
        REQUIRE(std::get<2>(result) == std::get<2>(expected_result));
    }

    SECTION("Test conversion of black color") {
        int r = 0, g = 0, b = 0;
        auto expected_result = std::make_tuple(0.0, 0.0, 0.0);
        auto result = rgb_to_hsv(r, g, b);
        REQUIRE(std::get<0>(result) == std::get<0>(expected_result));
        REQUIRE(std::get<1>(result) == std::get<1>(expected_result));
        REQUIRE(std::get<2>(result) == std::get<2>(expected_result));
    }
}

// Example usage
int main() {
    // Run all tests with Catch2
    return Catch::Session().run();
}
```

### Explanation:
1. **Function Definition**: The `rgb_to_hsv` function is defined to convert RGB colors to HSV colors.
2. **Test Class**: The `TEST_CASE` macro is used to define a test case, and `SECTION` macros are used to define individual test sections.
3. **Assertions**: The `REQUIRE` macro is used to assert the equality of the components of the tuples returned by `rgb_to_hsv` and the expected results.
4. **Main Function**: The `main` function runs all the tests using Catch2.

This C++ code preserves the original purpose and structure of the Python unittest class while adhering to the Catch2 testing framework conventions.