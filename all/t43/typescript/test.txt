Certainly! Below is the equivalent Jest test class in TypeScript for the provided Python unittest class. The test cases and assertions are preserved, and the necessary type annotations and Jest assertions are included.

### TypeScript Code with Jest Tests

```typescript
import { rgbToHsv } from './rgbToHsv'; // Import the rgbToHsv function

describe('Test RGB to HSV Conversion', () => {
    it('should convert pure red color correctly', () => {
        // Test conversion of pure red color
        const r = 255;
        const g = 0;
        const b = 0;
        const expectedResult: [number, number, number] = [0, 100, 100];  // Hue should be 0, Saturation 100, Value 100 for red
        const result = rgbToHsv(r, g, b);
        expect(result).toEqual(expectedResult);
    });

    it('should convert pure green color correctly', () => {
        // Test conversion of pure green color
        const r = 0;
        const g = 255;
        const b = 0;
        const expectedResult: [number, number, number] = [120, 100, 100];  // Hue should be 120, Saturation 100, Value 100 for green
        const result = rgbToHsv(r, g, b);
        expect(result).toEqual(expectedResult);
    });

    it('should convert pure blue color correctly', () => {
        // Test conversion of pure blue color
        const r = 0;
        const g = 0;
        const b = 255;
        const expectedResult: [number, number, number] = [240, 100, 100];  // Hue should be 240, Saturation 100, Value 100 for blue
        const result = rgbToHsv(r, g, b);
        expect(result).toEqual(expectedResult);
    });

    it('should convert white color correctly', () => {
        // Test conversion of white color
        const r = 255;
        const g = 255;
        const b = 255;
        const expectedResult: [number, number, number] = [0, 0, 100];  // Hue is undefined, typically 0; Saturation 0, Value 100 for white
        const result = rgbToHsv(r, g, b);
        expect(result).toEqual(expectedResult);
    });

    it('should convert black color correctly', () => {
        // Test conversion of black color
        const r = 0;
        const g = 0;
        const b = 0;
        const expectedResult: [number, number, number] = [0, 0, 0];  // Hue is undefined, typically 0; Saturation 0, Value 0 for black
        const result = rgbToHsv(r, g, b);
        expect(result).toEqual(expectedResult);
    });
});
```

### Explanation:
1. **Import Statement**: The `rgbToHsv` function is imported from the `rgbToHsv` module.
2. **Describe Block**: The `describe` block is used to group the test cases under a descriptive name.
3. **It Blocks**: Each `it` block represents a single test case.
4. **Type Annotations**: The `expectedResult` is annotated with the type `[number, number, number]` to match the return type of the `rgbToHsv` function.
5. **Assertions**: The `expect` function is used with `toEqual` to check that the result matches the expected result.

### rgbToHsv Function (For Reference)

Here is the `rgbToHsv` function for completeness:

```typescript
/**
 * Converts an RGB color to an HSV color.
 * 
 * Example:
 *   Input: 0, 0, 255
 *   Output: [240, 100, 100]
 * 
 * @param r - The red value of the RGB color (0-255).
 * @param g - The green value of the RGB color (0-255).
 * @param b - The blue value of the RGB color (0-255).
 * @returns A tuple representing the HSV color values [H, S, V].
 */
function rgbToHsv(r: number, g: number, b: number): [number, number, number] {
    // Normalize the RGB values by dividing by 255
    const normalizedR = r / 255.0;
    const normalizedG = g / 255.0;
    const normalizedB = b / 255.0;

    // Find the minimum and maximum values among R, G, and B
    const maxRgb = Math.max(normalizedR, normalizedG, normalizedB);
    const minRgb = Math.min(normalizedR, normalizedG, normalizedB);
    const delta = maxRgb - minRgb;

    // Calculate H (Hue)
    let h: number;
    if (delta === 0) {
        h = 0;
    } else if (maxRgb === normalizedR) {
        h = ((normalizedG - normalizedB) / delta) % 6;
    } else if (maxRgb === normalizedG) {
        h = ((normalizedB - normalizedR) / delta) + 2;
    } else {
        h = ((normalizedR - normalizedG) / delta) + 4;
    }

    h *= 60;  // Convert to degrees on the color circle

    // Calculate S (Saturation)
    let s: number;
    if (maxRgb === 0) {
        s = 0;
    } else {
        s = delta / maxRgb;
    }

    // V (Value) is equal to maxRgb
    const v = maxRgb;

    return [h, s * 100, v * 100];
}
```

This TypeScript code ensures that the functionality and logic of the tests are preserved, and the necessary type annotations and Jest assertions are included.