Certainly! Below is the equivalent TypeScript code for the given Python function `rgb_to_hsv`. The TypeScript version will include proper type definitions and ensure that the functionality remains consistent:

```typescript
function rgbToHsv(r: number, g: number, b: number): [number, number, number] {
    // Normalize the RGB values by dividing by 255
    const normalizedR = r / 255.0;
    const normalizedG = g / 255.0;
    const normalizedB = b / 255.0;

    // Find the minimum and maximum values among R, G, and B
    const maxRgb = Math.max(normalizedR, normalizedG, normalizedB);
    const minRgb = Math.min(normalizedR, normalizedG, normalizedB);
    const delta = maxRgb - minRgb;

    // Calculate H (Hue)
    let h: number;
    if (delta === 0) {
        h = 0;
    } else if (maxRgb === normalizedR) {
        h = ((normalizedG - normalizedB) / delta) % 6;
    } else if (maxRgb === normalizedG) {
        h = ((normalizedB - normalizedR) / delta) + 2;
    } else {
        h = ((normalizedR - normalizedG) / delta) + 4;
    }

    h *= 60;  // Convert to degrees on the color circle

    // Calculate S (Saturation)
    let s: number;
    if (maxRgb === 0) {
        s = 0;
    } else {
        s = delta / maxRgb;
    }

    // V (Value) is equal to maxRgb
    const v = maxRgb;

    return [h, s * 100, v * 100];
}
```

### Explanation:
1. **Type Definitions**: The function parameters `r`, `g`, and `b` are defined as `number` types.
2. **Return Type**: The function returns a tuple `[number, number, number]` representing the HSV values.
3. **Normalization**: The RGB values are normalized by dividing them by 255.
4. **Calculations**: The hue (`h`), saturation (`s`), and value (`v`) are calculated using the same logic as in the Python code.
5. **Math Functions**: `Math.max()` and `Math.min()` are used to find the maximum and minimum values among the normalized RGB values.

This TypeScript code maintains the same functionality and logic as the original Python code while adhering to TypeScript's static type system.