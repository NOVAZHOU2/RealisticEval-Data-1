Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic of the tests while adapting to Jest's syntax and conventions.

### Python Unittest Code:

```python
import unittest

def rgb_to_hsv(r: int, g: int, b: int) -> Tuple[int, int, int]:
    # Normalize the RGB values by dividing by 255
    r /= 255.0
    g /= 255.0
    b /= 255.0

    # Find the minimum and maximum values among R, G, and B
    max_rgb = max(r, g, b)
    min_rgb = min(r, g, b)
    delta = max_rgb - min_rgb

    # Calculate H (Hue)
    h = 0
    if delta == 0:
        h = 0
    elif max_rgb == r:
        h = ((g - b) / delta) % 6
    elif max_rgb == g:
        h = ((b - r) / delta) + 2
    else:
        h = ((r - g) / delta) + 4

    h *= 60  # Convert to degrees on the color circle

    # Calculate S (Saturation)
    s = 0
    if max_rgb == 0:
        s = 0
    else:
        s = delta / max_rgb

    # V (Value) is equal to max_rgb
    v = max_rgb

    return [h, s * 100, v * 100]

class TestRGBtoHSV(unittest.TestCase):

    def test_rgb_to_hsv_red(self):
        # Test conversion of pure red color
        r, g, b = 255, 0, 0
        expected_result = [0, 100, 100]  # Hue should be 0, Saturation 1, Value 1 for red
        result = rgb_to_hsv(r, g, b)
        self.assertEqual(result, expected_result)

    def test_rgb_to_hsv_green(self):
        # Test conversion of pure green color
        r, g, b = 0, 255, 0
        expected_result = [120, 100, 100]  # Hue should be 120, Saturation 1, Value 1 for green
        result = rgb_to_hsv(r, g, b)
        self.assertEqual(result, expected_result)

    def test_rgb_to_hsv_blue(self):
        # Test conversion of pure blue color
        r, g, b = 0, 0, 255
        expected_result = [240, 100, 100]  # Hue should be 240, Saturation 1, Value 1 for blue
        result = rgb_to_hsv(r, g, b)
        self.assertEqual(result, expected_result)

    def test_rgb_to_hsv_white(self):
        # Test conversion of white color
        r, g, b = 255, 255, 255
        expected_result = [0, 0, 100]  # Hue is undefined, typically 0; Saturation 0, Value 1 for white
        result = rgb_to_hsv(r, g, b)
        self.assertEqual(result, expected_result)

    def test_rgb_to_hsv_black(self):
        # Test conversion of black color
        r, g, b = 0, 0, 0
        expected_result = [0, 0, 0]  # Hue is undefined, typically 0; Saturation 0, Value 0 for black
        result = rgb_to_hsv(r, g, b)
        self.assertEqual(result, expected_result)


if __name__ == '__main__':
    unittest.main()
```

### Equivalent Jest Test Suite:

```javascript
const rgbToHsv = require('./rgbToHsv'); // Assuming the rgb_to_hsv function is exported from another file

describe('Test RGB to HSV Conversion', () => {
    it('converts pure red color correctly', () => {
        // Test conversion of pure red color
        const r = 255;
        const g = 0;
        const b = 0;
        const expectedResult = [0, 100, 100];  // Hue should be 0, Saturation 1, Value 1 for red
        const result = rgbToHsv(r, g, b);
        expect(result).toEqual(expectedResult);
    });

    it('converts pure green color correctly', () => {
        // Test conversion of pure green color
        const r = 0;
        const g = 255;
        const b = 0;
        const expectedResult = [120, 100, 100];  // Hue should be 120, Saturation 1, Value 1 for green
        const result = rgbToHsv(r, g, b);
        expect(result).toEqual(expectedResult);
    });

    it('converts pure blue color correctly', () => {
        // Test conversion of pure blue color
        const r = 0;
        const g = 0;
        const b = 255;
        const expectedResult = [240, 100, 100];  // Hue should be 240, Saturation 1, Value 1 for blue
        const result = rgbToHsv(r, g, b);
        expect(result).toEqual(expectedResult);
    });

    it('converts white color correctly', () => {
        // Test conversion of white color
        const r = 255;
        const g = 255;
        const b = 255;
        const expectedResult = [0, 0, 100];  // Hue is undefined, typically 0; Saturation 0, Value 1 for white
        const result = rgbToHsv(r, g, b);
        expect(result).toEqual(expectedResult);
    });

    it('converts black color correctly', () => {
        // Test conversion of black color
        const r = 0;
        const g = 0;
        const b = 0;
        const expectedResult = [0, 0, 0];  // Hue is undefined, typically 0; Saturation 0, Value 0 for black
        const result = rgbToHsv(r, g, b);
        expect(result).toEqual(expectedResult);
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `rgbToHsv` function is imported from another file using `require` (assuming it is exported from another module).

2. **Describe Block**:
   - The `describe` block is used to group the tests under a descriptive name.

3. **It Blocks**:
   - Each `it` block represents a specific test case.
   - The test descriptions are provided within the `it` block.

4. **Assertions**:
   - The `expect` function is used to assert the expected results.
   - `toEqual` is used to compare arrays, which is equivalent to `assertEqual` in Python's `unittest`.

5. **Data Setup**:
   - The RGB values and expected results are set up similarly to the Python version.

This Jest test suite maintains the same functionality and logic as the original Python unittest class, ensuring that all assertions are properly mapped to Jest equivalents.