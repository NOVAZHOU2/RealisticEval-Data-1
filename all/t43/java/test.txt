Certainly! Below is the equivalent Java JUnit test class for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It uses JUnit annotations and assertions to ensure the functionality and logic of the tests are preserved.

```java
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.real.temp.Answer;

public class Tester {

    @Test
    public void testRgbToHsvRed() {
        // Test conversion of pure red color
        int r = 255, g = 0, b = 0;
        Tuple<Double, Double, Double> expectedResult = new Answer.Tuple<>(0.0, 100.0, 100.0);
        Tuple<Double, Double, Double> result = Answer.rgbToHsv(r, g, b);
        assertEquals(expectedResult, result);
    }

    @Test
    public void testRgbToHsvGreen() {
        // Test conversion of pure green color
        int r = 0, g = 255, b = 0;
        Tuple<Double, Double, Double> expectedResult = new Answer.Tuple<>(120.0, 100.0, 100.0);
        Tuple<Double, Double, Double> result = Answer.rgbToHsv(r, g, b);
        assertEquals(expectedResult, result);
    }

    @Test
    public void testRgbToHsvBlue() {
        // Test conversion of pure blue color
        int r = 0, g = 0, b = 255;
        Tuple<Double, Double, Double> expectedResult = new Answer.Tuple<>(240.0, 100.0, 100.0);
        Tuple<Double, Double, Double> result = Answer.rgbToHsv(r, g, b);
        assertEquals(expectedResult, result);
    }

    @Test
    public void testRgbToHsvWhite() {
        // Test conversion of white color
        int r = 255, g = 255, b = 255;
        Tuple<Double, Double, Double> expectedResult = new Answer.Tuple<>(0.0, 0.0, 100.0);
        Tuple<Double, Double, Double> result = Answer.rgbToHsv(r, g, b);
        assertEquals(expectedResult, result);
    }

    @Test
    public void testRgbToHsvBlack() {
        // Test conversion of black color
        int r = 0, g = 0, b = 0;
        Tuple<Double, Double, Double> expectedResult = new Answer.Tuple<>(0.0, 0.0, 0.0);
        Tuple<Double, Double, Double> result = Answer.rgbToHsv(r, g, b);
        assertEquals(expectedResult, result);
    }

    // Helper method to compare tuples
    private void assertTupleEquals(Tuple<Double, Double, Double> expected, Tuple<Double, Double, Double> actual) {
        assertEquals(expected.getFirst(), actual.getFirst(), 0.01);
        assertEquals(expected.getSecond(), actual.getSecond(), 0.01);
        assertEquals(expected.getThird(), actual.getThird(), 0.01);
    }
}

// The Answer class with the rgbToHsv method and the Tuple class
package org.real.temp;

import java.util.function.TriFunction;

public class Answer {

    /**
     * Converts RGB color values to HSV (Hue, Saturation, Value) color.
     *
     * Example:
     *     Input: 0, 0, 255
     *     Output: (240, 100, 100)
     *
     * @param r The red component of the color (0-255).
     * @param g The green component of the color (0-255).
     * @param b The blue component of the color (0-255).
     * @return A tuple containing the HSV values (Hue, Saturation, Value).
     */
    public static Tuple<Double, Double, Double> rgbToHsv(int r, int g, int b) {
        // Normalize the RGB values by dividing by 255
        double rNorm = r / 255.0;
        double gNorm = g / 255.0;
        double bNorm = b / 255.0;

        // Find the minimum and maximum values among R, G, and B
        double maxRgb = Math.max(rNorm, Math.max(gNorm, bNorm));
        double minRgb = Math.min(rNorm, Math.min(gNorm, bNorm));
        double delta = maxRgb - minRgb;

        // Calculate H (Hue)
        double h = 0;
        if (delta == 0) {
            h = 0;
        } else if (maxRgb == rNorm) {
            h = ((gNorm - bNorm) / delta) % 6;
        } else if (maxRgb == gNorm) {
            h = ((bNorm - rNorm) / delta) + 2;
        } else {
            h = ((rNorm - gNorm) / delta) + 4;
        }

        h *= 60;  // Convert to degrees on the color circle

        // Calculate S (Saturation)
        double s = 0;
        if (maxRgb == 0) {
            s = 0;
        } else {
            s = delta / maxRgb;
        }

        // V (Value) is equal to max_rgb
        double v = maxRgb;

        return new Tuple<>(h, s * 100, v * 100);
    }

    // A simple Tuple class to hold the HSV values
    public static class Tuple<T1, T2, T3> {
        private final T1 first;
        private final T2 second;
        private final T3 third;

        public Tuple(T1 first, T2 second, T3 third) {
            this.first = first;
            this.second = second;
            this.third = third;
        }

        public T1 getFirst() {
            return first;
        }

        public T2 getSecond() {
            return second;
        }

        public T3 getThird() {
            return third;
        }

        @Override
        public String toString() {
            return "(" + first + ", " + second + ", " + third + ")";
        }
    }
}
```

### Explanation:
1. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate it is a test case.
2. **Assertion Methods**: The `assertEquals` method is used to compare the expected and actual results. For comparing tuples, a helper method `assertTupleEquals` is provided to ensure all components are compared accurately.
3. **Tuple Class**: The `Tuple` class is defined within the `Answer` class to hold the HSV values.
4. **Test Cases**: Each test case is implemented to match the Python test cases, ensuring the same functionality and logic.
5. **Package and Class Names**: The test class `Tester` and the `Answer` class are placed in the package `org.real.temp`.

This Java code preserves the original functionality and structure of the Python unittest class while adhering to Java conventions and JUnit testing practices.