Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and type conversions:

```java
import java.util.Tuple;

package org.real.temp;

public class Answer {

    /**
     * Converts RGB color values to HSV (Hue, Saturation, Value) color.
     * 
     * Example:
     *     Input: 0, 0, 255
     *     Output: (240, 100, 100)
     * 
     * @param r The red component of the color (0-255).
     * @param g The green component of the color (0-255).
     * @param b The blue component of the color (0-255).
     * @return A tuple containing the HSV values (Hue, Saturation, Value).
     */
    public static Tuple<Double, Double, Double> rgbToHsv(int r, int g, int b) {
        // Normalize the RGB values by dividing by 255
        double rNorm = r / 255.0;
        double gNorm = g / 255.0;
        double bNorm = b / 255.0;

        // Find the minimum and maximum values among R, G, and B
        double maxRgb = Math.max(rNorm, Math.max(gNorm, bNorm));
        double minRgb = Math.min(rNorm, Math.min(gNorm, bNorm));
        double delta = maxRgb - minRgb;

        // Calculate H (Hue)
        double h = 0;
        if (delta == 0) {
            h = 0;
        } else if (maxRgb == rNorm) {
            h = ((gNorm - bNorm) / delta) % 6;
        } else if (maxRgb == gNorm) {
            h = ((bNorm - rNorm) / delta) + 2;
        } else {
            h = ((rNorm - gNorm) / delta) + 4;
        }

        h *= 60;  // Convert to degrees on the color circle

        // Calculate S (Saturation)
        double s = 0;
        if (maxRgb == 0) {
            s = 0;
        } else {
            s = delta / maxRgb;
        }

        // V (Value) is equal to max_rgb
        double v = maxRgb;

        return new Tuple<>(h, s * 100, v * 100);
    }

    // A simple Tuple class to hold the HSV values
    public static class Tuple<T1, T2, T3> {
        private final T1 first;
        private final T2 second;
        private final T3 third;

        public Tuple(T1 first, T2 second, T3 third) {
            this.first = first;
            this.second = second;
            this.third = third;
        }

        public T1 getFirst() {
            return first;
        }

        public T2 getSecond() {
            return second;
        }

        public T3 getThird() {
            return third;
        }

        @Override
        public String toString() {
            return "(" + first + ", " + second + ", " + third + ")";
        }
    }

    public static void main(String[] args) {
        // Example usage
        Tuple<Double, Double, Double> hsv = rgbToHsv(0, 0, 255); // Blue color
        System.out.println(hsv);
    }
}
```

### Explanation:
1. **Javadoc Comments**: The Python docstring has been converted into a Javadoc comment block.
2. **Method Signature**: The Python function signature `def rgb_to_hsv(r: int, g: int, b: int) -> Tuple[int, int, int]` is translated to a Java method signature `public static Tuple<Double, Double, Double> rgbToHsv(int r, int g, int b)`.
3. **Tuple Class**: A generic `Tuple` class is defined to hold the HSV values. This class provides getters and a `toString` method for easy printing.
4. **Normalization and Calculations**: The normalization and calculations are performed similarly to the Python code.
5. **Example Usage**: An example usage of the `rgbToHsv` method is included in the `main` method.

This Java code preserves the original functionality and structure of the Python code while adhering to Java conventions and syntax.