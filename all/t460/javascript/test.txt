Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The conversion ensures that the functionality and logic of the tests are maintained, and all assertions are mapped to appropriate Jest equivalents.

### Python Unittest Code

```python
import unittest

class TestMatrixVectorMultiplication(unittest.TestCase):

    def test_non_square_matrix(self):
        """Test case for a non-square matrix and a compatible vector."""
        matrix = [[1, 2], [3, 4], [5, 6]]
        vector = [2, 3]
        expected_result = [8.0, 18.0, 28.0]
        self.assertEqual(matrix_vector_multiplication(matrix, vector), expected_result)

    def test_zero_vector(self):
        """Test case for a matrix and a zero vector."""
        matrix = [[1, 2, 3], [4, 5, 6]]
        vector = [0, 0, 0]
        expected_result = [0.0, 0.0]
        self.assertEqual(matrix_vector_multiplication(matrix, vector), expected_result)

    def test_single_element(self):
        """Test case for a single element matrix and vector."""
        matrix = [[5]]
        vector = [3]
        expected_result = [15.0]
        self.assertEqual(matrix_vector_multiplication(matrix, vector), expected_result)

    def test_single_element_matrix_and_vector(self):
        """Test case with a single element in the matrix and vector."""
        matrix = [[3]]
        vector = [4]
        expected = [12]
        self.assertEqual(matrix_vector_multiplication(matrix, vector), expected)

    def test_compatible_sizes(self):
        """Test case with compatible sizes but different dimensions."""
        matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        vector = [1, 1, 1]
        expected = [6, 15, 24]
        self.assertEqual(matrix_vector_multiplication(matrix, vector), expected)
```

### Equivalent Jest Test Suite

```javascript
const matrixVectorMultiplication = require('./matrixVectorMultiplication'); // Import the function to be tested

describe('TestMatrixVectorMultiplication', () => {
    it('test_non_square_matrix', () => {
        // Test case for a non-square matrix and a compatible vector.
        const matrix = [[1, 2], [3, 4], [5, 6]];
        const vector = [2, 3];
        const expectedResult = [8.0, 18.0, 28.0];
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expectedResult);
    });

    it('test_zero_vector', () => {
        // Test case for a matrix and a zero vector.
        const matrix = [[1, 2, 3], [4, 5, 6]];
        const vector = [0, 0, 0];
        const expectedResult = [0.0, 0.0];
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expectedResult);
    });

    it('test_single_element', () => {
        // Test case for a single element matrix and vector.
        const matrix = [[5]];
        const vector = [3];
        const expectedResult = [15.0];
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expectedResult);
    });

    it('test_single_element_matrix_and_vector', () => {
        // Test case with a single element in the matrix and vector.
        const matrix = [[3]];
        const vector = [4];
        const expected = [12];
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expected);
    });

    it('test_compatible_sizes', () => {
        // Test case with compatible sizes but different dimensions.
        const matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
        const vector = [1, 1, 1];
        const expected = [6, 15, 24];
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expected);
    });
});
```

### Explanation:
1. **Import Function**: The `matrixVectorMultiplication` function is imported at the beginning of the test file.
2. **Describe Block**: The `describe` block groups the test cases under a descriptive name.
3. **It Blocks**: Each `it` block represents a specific test case and includes a description and the actual test logic.
4. **Assertions**: The `expect` function is used to assert the expected results. `toEqual` is used to compare arrays, which is equivalent to `assertEqual` in Python's `unittest`.

This Jest test suite maintains the functionality and logic of the original Python unittest class while adhering to Jest's syntax and conventions.