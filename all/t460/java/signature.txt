Certainly! Here is the equivalent Java code for the given Python function, including appropriate Javadoc comments and type conversions:

```java
import java.util.ArrayList;
import java.util.List;

public class Answer {

    /**
     * Multiplies a matrix by a vector and returns the resulting vector.
     *
     * @param matrix A 2D list representing the matrix.
     * @param vector A 1D list representing the vector.
     * @return The resulting vector after multiplication.
     * @throws IllegalArgumentException If the dimensions of the matrix and vector are not compatible for multiplication.
     */
    public static List<Double> matrixVectorMultiplication(List<List<Double>> matrix, List<Double> vector) throws IllegalArgumentException {
        // Ensure matrix dimensions are compatible with vector length
        if (matrix.get(0).size() != vector.size()) {
            throw new IllegalArgumentException("Matrix and vector dimensions are not compatible for multiplication");
        }

        // Initialize the result list with zeros
        List<Double> result = new ArrayList<>(matrix.size());
        for (int i = 0; i < matrix.size(); i++) {
            result.add(0.0);
        }

        // Perform the matrix-vector multiplication
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < vector.size(); j++) {
                result.set(i, result.get(i) + matrix.get(i).get(j) * vector.get(j));
            }
        }

        return result;
    }

    public static void main(String[] args) {
        // Example usage
        List<List<Double>> matrix = new ArrayList<>();
        matrix.add(List.of(1.0, 2.0, 3.0));
        matrix.add(List.of(4.0, 5.0, 6.0));
        matrix.add(List.of(7.0, 8.0, 9.0));

        List<Double> vector = List.of(1.0, 0.0, 1.0);

        try {
            List<Double> result = matrixVectorMultiplication(matrix, vector);
            System.out.println(result);
        } catch (IllegalArgumentException e) {
            System.err.println(e.getMessage());
        }
    }
}
```

### Explanation:
1. **Import Statements**: 
   - `import java.util.ArrayList;`
   - `import java.util.List;`

2. **Class Definition**:
   - The class `Answer` contains the method `matrixVectorMultiplication`.

3. **Javadoc Comments**:
   - The method `matrixVectorMultiplication` includes detailed Javadoc comments that describe the parameters, return value, and possible exceptions.

4. **Method Signature**:
   - The method signature `public static List<Double> matrixVectorMultiplication(List<List<Double>> matrix, List<Double> vector)` matches the Python function signature, with appropriate Java types.

5. **Exception Handling**:
   - An `IllegalArgumentException` is thrown if the dimensions of the matrix and vector are not compatible.

6. **Initialization and Multiplication**:
   - The method initializes the result list and performs the matrix-vector multiplication using nested loops.

7. **Example Usage**:
   - The `main` method demonstrates how to use the `matrixVectorMultiplication` method and handles any potential exceptions.