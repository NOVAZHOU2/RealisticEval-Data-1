Here's the equivalent Java code for the given Python code, organized within the package `org.real.temp` and the class `Answer`:

```java
package org.real.temp;

import java.util.List;
import java.util.Arrays;

public class Answer {
    /**
     * Performs matrix-vector multiplication.
     * 
     * @param matrix A 2D array representing the matrix.
     * @param vector A 1D array representing the vector.
     * @return A 1D array representing the resulting vector after multiplication.
     * @throws IllegalArgumentException If the matrix and vector dimensions are not compatible.
     */
    public static List<Double> matrixVectorMultiplication(List<List<Double>> matrix, List<Double> vector) throws IllegalArgumentException {
        // Ensure matrix dimensions are compatible with vector length
        if (matrix.get(0).size() != vector.size()) {
            throw new IllegalArgumentException("Matrix and vector dimensions are not compatible for multiplication");
        }

        // Initialize the result list with zeros
        List<Double> result = new ArrayList<>(Arrays.asList(new Double[matrix.size()]));
        for (int i = 0; i < result.size(); i++) {
            result.set(i, 0.0);
        }

        // Perform the matrix-vector multiplication
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < vector.size(); j++) {
                result.set(i, result.get(i) + matrix.get(i).get(j) * vector.get(j));
            }
        }

        return result;
    }

    // Example usage
    public static void main(String[] args) {
        List<List<Double>> matrix = Arrays.asList(
            Arrays.asList(1.0, 2.0, 3.0),
            Arrays.asList(4.0, 5.0, 6.0)
        );

        List<Double> vector = Arrays.asList(7.0, 8.0, 9.0);

        try {
            List<Double> result = matrixVectorMultiplication(matrix, vector);
            System.out.println(result);
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
    }
}
```

This Java code maintains the functionality of the Python code, including the matrix-vector multiplication logic, error handling, and the initialization of the result list with zeros. It also includes an example usage in the `main` method to demonstrate how to call the `matrixVectorMultiplication` method.