Here is the equivalent C++ code for the provided Python code:

```cpp
#include <iostream>
#include <vector>
#include <stdexcept>

// Function to perform matrix-vector multiplication
std::vector<float> matrix_vector_multiplication(const std::vector<std::vector<float>>& matrix, const std::vector<float>& vector) {
    // Ensure matrix dimensions are compatible with vector length
    if (matrix[0].size() != vector.size()) {
        throw std::invalid_argument("Matrix and vector dimensions are not compatible for multiplication");
    }

    // Initialize the result vector with zeros
    std::vector<float> result(matrix.size(), 0.0f);

    // Perform the matrix-vector multiplication
    for (size_t i = 0; i < matrix.size(); ++i) {
        for (size_t j = 0; j < vector.size(); ++j) {
            result[i] += matrix[i][j] * vector[j];
        }
    }

    return result;
}

int main() {
    try {
        // Example usage
        std::vector<std::vector<float>> matrix = {{1.0f, 2.0f}, {3.0f, 4.0f}};
        std::vector<float> vector = {5.0f, 6.0f};
        std::vector<float> result = matrix_vector_multiplication(matrix, vector);

        // Output the result
        for (const auto& value : result) {
            std::cout << value << " ";
        }
        std::cout << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

This C++ code maintains the same functionality and logic as the Python code. It includes necessary imports, error checking, initialization of the result vector, and the matrix-vector multiplication process.