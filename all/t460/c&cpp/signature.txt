Here is the equivalent C++ code for the provided Python function, including the translation of type annotations, comments, and documentation:

```cpp
#include <iostream>
#include <vector>
#include <stdexcept>

/**
 * Multiplies a matrix by a vector and returns the resulting vector.
 *
 * @param matrix A 2D vector representing the matrix.
 * @param vector A 1D vector representing the vector.
 * @return A 1D vector representing the resulting vector after multiplication.
 * @throws std::invalid_argument If the dimensions of the matrix and vector are not compatible for multiplication.
 */
std::vector<float> matrix_vector_multiplication(const std::vector<std::vector<float>>& matrix, const std::vector<float>& vector) {
    // Ensure matrix dimensions are compatible with vector length
    if (matrix[0].size() != vector.size()) {
        throw std::invalid_argument("Matrix and vector dimensions are not compatible for multiplication");
    }

    // Initialize the result vector with zeros
    std::vector<float> result(matrix.size(), 0.0f);

    // Perform the matrix-vector multiplication
    for (size_t i = 0; i < matrix.size(); ++i) {
        for (size_t j = 0; j < vector.size(); ++j) {
            result[i] += matrix[i][j] * vector[j];
        }
    }

    return result;
}

int main() {
    try {
        // Example usage
        std::vector<std::vector<float>> matrix = {{1.0f, 2.0f}, {3.0f, 4.0f}};
        std::vector<float> vector = {5.0f, 6.0f};
        std::vector<float> result = matrix_vector_multiplication(matrix, vector);

        // Output the result
        for (const auto& value : result) {
            std::cout << value << " ";
        }
        std::cout << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Header Inclusions**:
   - `#include <iostream>`: For input/output operations.
   - `#include <vector>`: For using `std::vector`.
   - `#include <stdexcept>`: For throwing exceptions.

2. **Function Definition**:
   - The function `matrix_vector_multiplication` is defined to take a 2D vector `matrix` and a 1D vector `vector` as arguments.
   - The function returns a 1D vector `result`.

3. **Documentation Comments**:
   - The docstring is converted into a multi-line comment block using `/* */`.
   - Single-line comments are used for inline explanations.

4. **Error Checking**:
   - The function checks if the dimensions of the matrix and vector are compatible for multiplication using an `if` statement.
   - If the dimensions are not compatible, it throws a `std::invalid_argument`.

5. **Result Initialization**:
   - The result vector is initialized with zeros using `std::vector<float>(matrix.size(), 0.0f)`.

6. **Matrix-Vector Multiplication**:
   - The nested loops perform the matrix-vector multiplication and store the result in the `result` vector.

7. **Example Usage**:
   - The `main` function demonstrates an example usage of the `matrix_vector_multiplication` function and handles any exceptions that might occur.