```cpp
#include <vector>
#include <stdexcept>

/**
 * Multiplies a matrix by a vector and returns the resulting vector.
 *
 * @param matrix A 2D vector representing the matrix.
 * @param vector A 1D vector representing the vector.
 * @return The resulting vector after multiplication.
 * @throw std::invalid_argument If the dimensions of the matrix and vector are not compatible for multiplication.
 */
std::vector<double> matrixVectorMultiplication(const std::vector<std::vector<double>>& matrix, const std::vector<double>& vector) {
    // Your implementation goes here
}
```

In C++, we use `std::vector` instead of Python's list, and we use exceptions (`std::invalid_argument`) instead of raising errors. The function signature is similar, but note that in C++ you must specify the types of the parameters and return value explicitly.