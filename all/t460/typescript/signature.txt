Certainly! Here is the equivalent TypeScript code, including the conversion of the Python function signature, comments, and docstrings to TypeScript with JSDoc-style documentation:

```typescript
/**
 * Multiplies a matrix by a vector and returns the resulting vector.
 *
 * @param matrix - A 2D array representing the matrix.
 * @param vector - A 1D array representing the vector.
 * @returns The resulting vector after multiplication.
 * @throws {Error} If the dimensions of the matrix and vector are not compatible for multiplication.
 */
function matrixVectorMultiplication(matrix: number[][], vector: number[]): number[] {
    // Ensure matrix dimensions are compatible with vector length
    if (matrix[0].length !== vector.length) {
        throw new Error("Matrix and vector dimensions are not compatible for multiplication");
    }

    // Initialize the result array with zeros
    const result = new Array(matrix.length).fill(0);

    // Perform the matrix-vector multiplication
    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < vector.length; j++) {
            result[i] += matrix[i][j] * vector[j];
        }
    }

    return result;
}
```

### Explanation:
1. **JSDoc Comments**: The Python docstring is converted to JSDoc comments using the `/** */` style.
2. **Type Annotations**: The Python type annotations `List[List[float]]` and `List[float]` are translated to TypeScript types `number[][]` and `number[]`.
3. **Error Handling**: The `ValueError` is replaced with `Error` in TypeScript.
4. **Initialization of Result Array**: The Python initialization `[0.0] * len(matrix)` is translated to `new Array(matrix.length).fill(0)` in TypeScript.
5. **Loop Syntax**: The loop syntax is adjusted to match TypeScript conventions.

This TypeScript function preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and documentation standards.