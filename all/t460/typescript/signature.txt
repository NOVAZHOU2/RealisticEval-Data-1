Certainly! Here is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation:

```typescript
/**
 * Multiplies a matrix by a vector and returns the resulting vector.
 *
 * @param matrix - A 2D array representing the matrix.
 * @param vector - A 1D array representing the vector.
 * @returns The resulting vector after multiplication.
 * @throws {Error} If the dimensions of the matrix and vector are not compatible for multiplication.
 */
function matrixVectorMultiplication(matrix: number[][], vector: number[]): number[] {
    // Ensure matrix dimensions are compatible with vector length
    if (matrix[0].length !== vector.length) {
        throw new Error("Matrix and vector dimensions are not compatible for multiplication");
    }

    // Initialize the result array with zeros
    const result = new Array(matrix.length).fill(0);

    // Perform the matrix-vector multiplication
    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < vector.length; j++) {
            result[i] += matrix[i][j] * vector[j];
        }
    }

    return result;
}
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc-style documentation is added at the beginning of the function.
   - The `@param` tags describe the parameters and their types.
   - The `@returns` tag describes the return value.
   - The `@throws` tag describes the exception that can be thrown.

2. **Type Annotations**:
   - `matrix: number[][]` represents a two-dimensional array of numbers.
   - `vector: number[]` represents a one-dimensional array of numbers.
   - `result: number[]` initializes the result array with zeros.

3. **Error Handling**:
   - The error is thrown using `throw new Error()` with a descriptive message.

4. **Loop Syntax**:
   - The loops are implemented using `for` loops, which are equivalent to Python's `for` loops.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and providing clear documentation.