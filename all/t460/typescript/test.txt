Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest test cases will be converted to Jest test cases, and the necessary type annotations and assertions will be included.

### TypeScript Code

First, let's include the TypeScript function `matrixVectorMultiplication`:

```typescript
function matrixVectorMultiplication(matrix: number[][], vector: number[]): number[] {
    // Ensure matrix dimensions are compatible with vector length
    if (matrix[0].length !== vector.length) {
        throw new Error("Matrix and vector dimensions are not compatible for multiplication");
    }

    // Initialize the result array with zeros
    const result = new Array(matrix.length).fill(0);

    // Perform the matrix-vector multiplication
    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < vector.length; j++) {
            result[i] += matrix[i][j] * vector[j];
        }
    }

    return result;
}
```

### Jest Test Class

Now, let's write the Jest test class:

```typescript
import { matrixVectorMultiplication } from './path/to/matrixVectorMultiplication'; // Adjust the import path as needed

describe('matrixVectorMultiplication', () => {
    it('test_non_square_matrix', () => {
        // Test case for a non-square matrix and a compatible vector
        const matrix = [[1, 2], [3, 4], [5, 6]];
        const vector = [2, 3];
        const expectedResult = [8.0, 18.0, 28.0];
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expectedResult);
    });

    it('test_zero_vector', () => {
        // Test case for a matrix and a zero vector
        const matrix = [[1, 2, 3], [4, 5, 6]];
        const vector = [0, 0, 0];
        const expectedResult = [0.0, 0.0];
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expectedResult);
    });

    it('test_single_element', () => {
        // Test case for a single element matrix and vector
        const matrix = [[5]];
        const vector = [3];
        const expectedResult = [15.0];
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expectedResult);
    });

    it('test_single_element_matrix_and_vector', () => {
        // Test case with a single element in the matrix and vector
        const matrix = [[3]];
        const vector = [4];
        const expected = [12];
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expected);
    });

    it('test_compatible_sizes', () => {
        // Test case with compatible sizes but different dimensions
        const matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
        const vector = [1, 1, 1];
        const expected = [6, 15, 24];
        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expected);
    });
});
```

### Explanation:
1. **Import Statement**: Import the `matrixVectorMultiplication` function from its module.
2. **Describe Block**: Use the `describe` block to group the test cases under the `matrixVectorMultiplication` function.
3. **It Blocks**: Each `it` block represents a test case.
4. **Expect Assertions**: Use `expect` with `toEqual` to check the equality of the results.

### Running the Tests
To run the Jest tests, you can use the following command in your terminal:

```sh
jest
```

This setup ensures that the tests are structured and executed correctly, preserving the functionality and logic of the original Python unittest test cases.