Certainly! Hereâ€™s the equivalent TypeScript code for the `matrix_vector_multiplication` function along with a Jest test suite to ensure the functionality is preserved.

### TypeScript Function

First, let's write the TypeScript function:

```typescript
/**
 * Multiplies a matrix by a vector and returns the resulting vector.
 *
 * @param matrix - A 2D array representing the matrix.
 * @param vector - A 1D array representing the vector.
 * @returns The resulting vector after multiplication.
 * @throws {Error} If the dimensions of the matrix and vector are not compatible for multiplication.
 */
function matrixVectorMultiplication(matrix: number[][], vector: number[]): number[] {
    // Ensure matrix dimensions are compatible with vector length
    if (matrix[0].length !== vector.length) {
        throw new Error("Matrix and vector dimensions are not compatible for multiplication");
    }

    // Initialize the result array with zeros
    const result = new Array(matrix.length).fill(0);

    // Perform the matrix-vector multiplication
    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < vector.length; j++) {
            result[i] += matrix[i][j] * vector[j];
        }
    }

    return result;
}
```

### Jest Test Suite

Now, let's write the Jest test suite to verify the correctness of the function:

```typescript
import { matrixVectorMultiplication } from './path/to/matrixVectorMultiplication';

describe('matrixVectorMultiplication', () => {
    it('should multiply a 2x2 matrix by a 2D vector', () => {
        const matrix = [
            [1, 2],
            [3, 4]
        ];
        const vector = [5, 6];
        const expected = [17, 39];

        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expected);
    });

    it('should multiply a 3x3 matrix by a 3D vector', () => {
        const matrix = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ];
        const vector = [1, 2, 3];
        const expected = [14, 32, 50];

        expect(matrixVectorMultiplication(matrix, vector)).toEqual(expected);
    });

    it('should throw an error when matrix and vector dimensions are incompatible', () => {
        const matrix = [
            [1, 2],
            [3, 4]
        ];
        const vector = [1, 2, 3];

        expect(() => matrixVectorMultiplication(matrix, vector)).toThrow(
            'Matrix and vector dimensions are not compatible for multiplication'
        );
    });
});
```

### Explanation:
1. **Function Definition**: The TypeScript function `matrixVectorMultiplication` is defined with proper type annotations and error handling.
2. **Jest Test Suite**:
   - The `describe` block sets up a test suite named `matrixVectorMultiplication`.
   - Each `it` block defines a specific test case.
   - `expect` is used to assert the expected outcomes of the function calls.
   - `toThrow` is used to check if the function throws the correct error message.

### Running the Tests
To run the Jest tests, you can use the following command in your project directory:

```sh
npm test
```

Make sure you have Jest installed in your project by running:

```sh
npm install --save-dev jest @types/jest ts-jest
```

And configure your `jest` setup in `package.json`:

```json
{
  "scripts": {
    "test": "jest"
  },
  "devDependencies": {
    "jest": "^27.0.0",
    "@types/jest": "^27.0.0",
    "ts-jest": "^27.0.0"
  },
  "jest": {
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    },
    "testRegex": ".*\\.test\\.tsx?$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "jsx",
      "json",
      "node"
    ]
  }
}
```

This setup ensures that your TypeScript tests run smoothly with Jest.