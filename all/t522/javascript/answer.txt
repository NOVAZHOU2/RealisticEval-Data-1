Sure, here is the equivalent JavaScript code using the `math` and `array` modules:

```javascript
function rotatePointCloud(pointCloud, rotationAngle) {
    let rotatedPointCloud = [];

    for(let i=0; i<pointCloud.length; i++) {
        let x = pointCloud[i][0];
        let y = pointCloud[i][1];
        let z = pointCloud[i][2];

        let newX = x * Math.cos(rotationAngle) - z * Math.sin(rotationAngle);
        let newY = y;
        let newZ = x * Math.sin(rotationAngle) + z * Math.cos(rotationAngle);

        rotatedPointCloud.push([newX, newY, newZ]);
    }

    return rotatedPointCloud;
}
```

Please note that in JavaScript, we use arrays instead of numpy arrays. Also, JavaScript doesn't have built-in support for matrix operations like numpy does, so we need to manually calculate the new coordinates after rotation.