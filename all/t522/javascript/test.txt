Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I'll ensure that the functionality and logic of the tests are maintained, and I'll document any necessary changes due to language differences between Python and JavaScript.

### Python Code:
```python
import unittest
import numpy as np

class TestRotatePointCloud(unittest.TestCase):

    def test_no_rotation(self):
        """Test when rotation angle is 0 (should return the same point cloud)."""
        point_cloud = np.array([[1.0, 2.0, 3.0]])
        rotation_angle = 0
        expected_output = point_cloud
        np.testing.assert_array_almost_equal(rotate_point_cloud(point_cloud, rotation_angle), expected_output)

    def test_180_degree_rotation(self):
        """Test rotation of 180 degrees (π radians) around Y axis."""
        point_cloud = np.array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]])
        rotation_angle = np.pi  # 180 degrees
        expected_output = np.array([[-1.0, 0.0, 0.0], [0.0, 1.0, 0.0]])  # [1,0,0] -> [-1,0,0]
        np.testing.assert_array_almost_equal(rotate_point_cloud(point_cloud, rotation_angle), expected_output)

    def test_full_rotation(self):
        """Test rotation of 360 degrees (2π radians) around Y axis (should return same point cloud)."""
        point_cloud = np.array([[1.0, 2.0, 3.0]])
        rotation_angle = 2 * np.pi  # 360 degrees
        expected_output = point_cloud  # Should return the same point cloud
        np.testing.assert_array_almost_equal(rotate_point_cloud(point_cloud, rotation_angle), expected_output)
```

### Equivalent Jest Test Suite:

First, ensure you have the necessary dependencies installed:

```bash
npm install mathjs
```

Here is the Jest test suite:

```javascript
const math = require('mathjs');
const { rotatePointCloud } = require('./rotatePointCloud'); // Import your rotatePointCloud function

describe('TestRotatePointCloud', () => {
    it('test_no_rotation', () => {
        /** 
         * Test when rotation angle is 0 (should return the same point cloud).
         */
        const pointCloud = [[1.0, 2.0, 3.0]];
        const rotationAngle = 0;
        const expectedOutput = pointCloud;

        const rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);
        expect(rotatedPointCloud).toEqual(expectedOutput);
    });

    it('test_180_degree_rotation', () => {
        /** 
         * Test rotation of 180 degrees (π radians) around Y axis.
         */
        const pointCloud = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]];
        const rotationAngle = Math.PI; // 180 degrees
        const expectedOutput = [[-1.0, 0.0, 0.0], [0.0, 1.0, 0.0]]; // [1,0,0] -> [-1,0,0]

        const rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);
        expect(rotatedPointCloud).toEqual(expectedOutput);
    });

    it('test_full_rotation', () => {
        /** 
         * Test rotation of 360 degrees (2π radians) around Y axis (should return same point cloud).
         */
        const pointCloud = [[1.0, 2.0, 3.0]];
        const rotationAngle = 2 * Math.PI; // 360 degrees
        const expectedOutput = pointCloud; // Should return the same point cloud

        const rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);
        expect(rotatedPointCloud).toEqual(expectedOutput);
    });
});

// Example implementation of rotatePointCloud function (for demonstration purposes)
function rotatePointCloud(pointCloud, rotationAngle) {
    const rotationMatrix = math.matrix([
        [math.cos(rotationAngle), 0, math.sin(rotationAngle)],
        [0, 1, 0],
        [-math.sin(rotationAngle), 0, math.cos(rotationAngle)]
    ]);

    const pointCloudMatrix = math.matrix(pointCloud);
    const rotatedPointCloudMatrix = math.multiply(pointCloudMatrix, rotationMatrix);
    const rotatedPointCloud = math.toArray(rotatedPointCloudMatrix);

    return rotatedPointCloud;
}
```

### Explanation:
1. **Importing Dependencies**: We import the `mathjs` library and the `rotatePointCloud` function from the relevant module.
2. **Jest Describe Block**: We use the `describe` block to group the tests under a single test suite.
3. **Test Cases**:
   - `test_no_rotation`: Tests the case where the rotation angle is 0.
   - `test_180_degree_rotation`: Tests the case where the rotation angle is 180 degrees (π radians).
   - `test_full_rotation`: Tests the case where the rotation angle is 360 degrees (2π radians).
4. **Assertions**: We use `expect` with `toEqual` to check if the rotated point cloud matches the expected output.
5. **Example Implementation**: Provided an example implementation of the `rotatePointCloud` function for demonstration purposes.

This ensures that the functionality and logic of the tests are preserved in the Jest test suite.