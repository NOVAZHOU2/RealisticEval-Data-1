Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards. I will also include the necessary logic to perform the rotation using the `mathjs` library.

First, make sure you have `mathjs` installed:

```bash
npm install mathjs
```

Here is the JavaScript code:

```javascript
const math = require('mathjs');

/**
 * Rotate the point cloud around the Y axis by a given angle.
 *
 * @param {Array<Array<number>>} pointCloud - A N x 3 array representing the 3D point cloud.
 * @param {number} rotationAngle - The angle (in radians) to rotate the point cloud.
 * @returns {Array<Array<number>>} - A N x 3 array of the rotated point cloud.
 */
function rotatePointCloud(pointCloud, rotationAngle) {
    // Create the rotation matrix for a rotation around the Y axis
    const rotationMatrix = math.matrix([
        [math.cos(rotationAngle), 0, math.sin(rotationAngle)],
        [0, 1, 0],
        [-math.sin(rotationAngle), 0, math.cos(rotationAngle)]
    ]);

    // Convert the point cloud to a mathjs matrix
    const pointCloudMatrix = math.matrix(pointCloud);

    // Rotate the point cloud by multiplying with the rotation matrix
    const rotatedPointCloudMatrix = math.multiply(pointCloudMatrix, rotationMatrix);

    // Convert the result back to a regular JavaScript array
    const rotatedPointCloud = math.toArray(rotatedPointCloudMatrix);

    return rotatedPointCloud;
}

// Example usage:
const pointCloud = [
    [1, 2, 3],
    [4, 5, 6]
];

const rotationAngle = Math.PI / 4; // 45 degrees in radians

const rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);
console.log(rotatedPointCloud);
```

### Explanation:
1. **Importing `mathjs`**: We use the `mathjs` library to handle matrix operations and trigonometric functions.
2. **JSDoc Comments**: The function signature and comments are rewritten using JSDoc format.
3. **Function Definition**: The `rotatePointCloud` function takes a point cloud and a rotation angle as parameters.
4. **Rotation Matrix**: We create a 3x3 rotation matrix for rotating around the Y-axis.
5. **Matrix Multiplication**: We multiply the point cloud matrix with the rotation matrix using `math.multiply`.
6. **Result Conversion**: We convert the resulting matrix back to a regular JavaScript array using `math.toArray`.

This ensures that the functionality, logic, and structure of the original Python code are preserved in JavaScript.