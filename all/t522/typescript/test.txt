Sure! Below is the equivalent TypeScript test case using Jest for the provided Python function `rotate_point_cloud`. Note that TypeScript does not have built-in support for NumPy arrays like Python does, so we'll need to use a library like `mathjs` or `ndarray` for handling numerical operations on arrays.

First, install the necessary dependencies:

```sh
npm install --save-dev @types/jest mathjs
```

Then, create your TypeScript test file (e.g., `test.ts`):

```typescript
import { expect } from '@jest/globals';
import * as math from 'mathjs';

// Define the rotate_point_cloud function in TypeScript
function rotatePointCloud(pointCloud: number[][], rotationAngle: number): number[][] {
    return pointCloud.map(([x, y, z]) => [
        x * math.cos(rotationAngle) - z * math.sin(rotationAngle),
        y,
        x * math.sin(rotationAngle) + z * math.cos(rotationAngle)
    ]);
}

// Write the test cases using Jest
describe('rotatePointCloud', () => {
    it('should rotate a single point around the Y-axis', () => {
        const pointCloud = [[1, 0, 0]];
        const rotationAngle = Math.PI / 2; // 90 degrees in radians
        const expected = [[0, 0, 1]];

        const result = rotatePointCloud(pointCloud, rotationAngle);

        expect(result).toEqual(expected);
    });

    it('should rotate multiple points around the Y-axis', () => {
        const pointCloud = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
        const rotationAngle = Math.PI / 2; // 90 degrees in radians
        const expected = [[0, 0, 1], [1, 0, 0], [-1, 0, 0]];

        const result = rotatePointCloud(pointCloud, rotationAngle);

        expect(result).toEqual(expected);
    });
});
```

In this example, we've defined the `rotatePointCloud` function in TypeScript and then written two test cases using Jest to verify its correctness. The `mathjs` library is used for performing trigonometric calculations.

To run the tests, you can use the following command:

```sh
npx jest
```

This will execute the test cases and output the results.