Certainly! Below is the equivalent TypeScript test class using Jest. We will ensure that the functionality and logic of the tests are preserved, and we will map the Python `unittest` assertions to the appropriate Jest assertions.

First, make sure you have Jest installed in your project:

```bash
npm install --save-dev jest @types/jest
```

Next, create the TypeScript test file. Here is the equivalent Jest test class:

```typescript
import { rotatePointCloud } from './path/to/rotatePointCloud'; // Import the rotatePointCloud function
import * as math from 'mathjs';

describe('TestRotatePointCloud', () => {
    /**
     * Test when rotation angle is 0 (should return the same point cloud).
     */
    test('no rotation', () => {
        const pointCloud = [[1.0, 2.0, 3.0]];
        const rotationAngle = 0;
        const expectedOutput = pointCloud;

        expect(rotatePointCloud(pointCloud, rotationAngle)).toEqual(expectedOutput);
    });

    /**
     * Test rotation of 180 degrees (π radians) around Y axis.
     */
    test('180 degree rotation', () => {
        const pointCloud = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]];
        const rotationAngle = Math.PI; // 180 degrees
        const expectedOutput = [[-1.0, 0.0, 0.0], [0.0, 1.0, 0.0]]; // [1,0,0] -> [-1,0,0]

        expect(rotatePointCloud(pointCloud, rotationAngle)).toEqual(expectedOutput);
    });

    /**
     * Test rotation of 360 degrees (2π radians) around Y axis (should return same point cloud).
     */
    test('full rotation', () => {
        const pointCloud = [[1.0, 2.0, 3.0]];
        const rotationAngle = 2 * Math.PI; // 360 degrees
        const expectedOutput = pointCloud; // Should return the same point cloud

        expect(rotatePointCloud(pointCloud, rotationAngle)).toEqual(expectedOutput);
    });
});
```

### Explanation:
1. **Imports**:
   - Import the `rotatePointCloud` function from the appropriate module.
   - Import `mathjs` for matrix operations and trigonometric functions.

2. **Jest Describe Block**:
   - Use `describe` to group the tests under a single test suite named `TestRotatePointCloud`.

3. **Test Cases**:
   - Each test case is defined using the `test` function.
   - The test cases are named descriptively to match the Python test names.
   - The `expect` function is used to assert the expected outcomes.

4. **Assertions**:
   - `toEqual` is used to compare the actual and expected outputs. This is equivalent to `np.testing.assert_array_almost_equal` in Python, but since we are dealing with floating-point numbers, we may need to adjust the precision if necessary.

### Running the Tests:
To run the Jest tests, add the following script to your `package.json`:

```json
"scripts": {
  "test": "jest"
}
```

Then, run the tests:

```bash
npm test
```

This setup ensures that the tests are equivalent to the Python unittests and maintain the same functionality and logic.