Certainly! Below is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments. We will use the `mathjs` library for matrix operations and trigonometric functions.

First, you need to install the `mathjs` library:

```bash
npm install mathjs
```

Here is the TypeScript code:

```typescript
import * as math from 'mathjs';

/**
 * Rotate the point cloud around the Y axis by a given angle.
 *
 * @param pointCloud - An Nx3 matrix representing the 3D point cloud.
 * @param rotationAngle - The angle (in radians) to rotate the point cloud.
 * @returns An Nx3 matrix of the rotated point cloud.
 */
function rotatePointCloud(pointCloud: number[][], rotationAngle: number): number[][] {
    // Create the rotation matrix for a rotation around the Y axis
    const rotationMatrix = math.matrix([
        [math.cos(rotationAngle), 0, math.sin(rotationAngle)],
        [0, 1, 0],
        [-math.sin(rotationAngle), 0, math.cos(rotationAngle)]
    ]);

    // Rotate the point cloud by multiplying with the rotation matrix
    const rotatedPointCloud = pointCloud.map(row => {
        const rowMatrix = math.matrix(row);
        const rotatedRow = math.multiply(rowMatrix, rotationMatrix);
        return math.toArray(rotatedRow) as number[];
    });

    return rotatedPointCloud;
}

// Example usage
const pointCloud: number[][] = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];

const rotationAngle: number = Math.PI / 4; // 45 degrees in radians

const rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);

console.log(rotatedPointCloud);
```

### Explanation:
1. **Importing `mathjs`**: The `mathjs` library provides matrix operations and trigonometric functions similar to NumPy.
2. **Function Definition**: The `rotatePointCloud` function takes a 3D point cloud represented as an array of arrays (`number[][]`) and a rotation angle in radians.
3. **Rotation Matrix**: The rotation matrix is created using `math.matrix` and trigonometric functions from `mathjs`.
4. **Point Cloud Rotation**: Each row of the point cloud is multiplied by the rotation matrix using `math.multiply`. The result is converted back to a JavaScript array using `math.toArray`.

### JSDoc Documentation Comments:
- The JSDoc comments provide clear documentation for the function parameters and return type.
- The `@param` tags describe the input parameters.
- The `@returns` tag describes the output.

This TypeScript code preserves the original functionality and structure of the Python code while adapting it to TypeScript conventions and using the `mathjs` library for matrix operations.