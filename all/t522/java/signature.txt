Sure! Below is the equivalent Java code with the same functionality and comments:

```java
import java.util.Arrays;

/**
 * Rotates a point cloud around the Y-axis by a given angle.
 *
 * @param pointCloud A N x 3 array representing the 3D point cloud.
 * @param rotationAngle The angle (in radians) to rotate the point cloud.
 * @return A N x 3 array of the rotated point cloud.
 */
public class PointCloudRotator {

    public static double[][] rotatePointCloud(double[][] pointCloud, double rotationAngle) {
        int n = pointCloud.length;
        double[][] rotatedPointCloud = new double[n][3];

        for (int i = 0; i < n; i++) {
            double[] point = pointCloud[i];
            double x = point[0];
            double z = point[2];

            // Rotation matrix for rotating around the Y-axis
            double cosTheta = Math.cos(rotationAngle);
            double sinTheta = Math.sin(rotationAngle);

            // Apply rotation transformation
            double newX = cosTheta * x - sinTheta * z;
            double newY = y; // Y coordinate remains unchanged
            double newZ = sinTheta * x + cosTheta * z;

            rotatedPointCloud[i] = new double[]{newX, newY, newZ};
        }

        return rotatedPointCloud;
    }

    public static void main(String[] args) {
        // Example usage
        double[][] pointCloud = {
                {1.0, 2.0, 3.0},
                {4.0, 5.0, 6.0}
        };
        double rotationAngle = Math.PI / 4; // 45 degrees in radians

        double[][] rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);
        System.out.println(Arrays.deepToString(rotatedPointCloud));
    }
}
```

This Java code defines a `rotatePointCloud` method that rotates a point cloud around the Y-axis by a specified angle. The method takes a 2D array representing the point cloud and a double representing the rotation angle in radians. It returns a new 2D array containing the rotated points. The `main` method demonstrates how to use the `rotatePointCloud` method.