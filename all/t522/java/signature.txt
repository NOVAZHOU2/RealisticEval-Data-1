Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and type conversions:

```java
package org.real.temp;

import org.ejml.simple.SimpleMatrix;

/**
 * Class to handle 3D point cloud rotations.
 */
public class Answer {

    /**
     * Rotates the point cloud around the Y axis by a given angle.
     *
     * @param pointCloud A N x 3 matrix representing the 3D point cloud.
     * @param rotationAngle The angle (in radians) to rotate the point cloud.
     * @return A N x 3 matrix of the rotated point cloud.
     */
    public static SimpleMatrix rotatePointCloud(SimpleMatrix pointCloud, double rotationAngle) {
        // Create the rotation matrix for a rotation around the Y axis
        SimpleMatrix rotationMatrix = new SimpleMatrix(3, 3);
        rotationMatrix.set(0, 0, Math.cos(rotationAngle));
        rotationMatrix.set(0, 2, Math.sin(rotationAngle));
        rotationMatrix.set(2, 0, -Math.sin(rotationAngle));
        rotationMatrix.set(2, 2, Math.cos(rotationAngle));
        rotationMatrix.set(1, 1, 1);

        // Rotate the point cloud by multiplying with the rotation matrix
        SimpleMatrix rotatedPointCloud = pointCloud.mult(rotationMatrix);

        return rotatedPointCloud;
    }

    /**
     * Main method for testing the rotatePointCloud function.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        // Example usage
        SimpleMatrix pointCloud = new SimpleMatrix(new double[][]{
            {1, 2, 3},
            {4, 5, 6}
        });

        double rotationAngle = Math.PI / 4; // 45 degrees in radians
        SimpleMatrix rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);
        System.out.println(rotatedPointCloud);
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.

2. **Import Statement**: The `SimpleMatrix` class from the EJML library is imported to handle matrix operations.

3. **Class Definition**: The class `Answer` is defined with the necessary methods.

4. **Javadoc Comments**:
   - The class-level Javadoc comment explains the purpose of the class.
   - The method-level Javadoc comment (`rotatePointCloud`) provides detailed information about the parameters and return value.

5. **Method Signature**:
   - The method `rotatePointCloud` takes a `SimpleMatrix` representing the point cloud and a `double` for the rotation angle.
   - It returns a `SimpleMatrix` of the rotated point cloud.

6. **Matrix Operations**:
   - The rotation matrix is created and populated with the appropriate values.
   - The point cloud is rotated by multiplying it with the rotation matrix.

7. **Main Method**:
   - The `main` method demonstrates how to use the `rotatePointCloud` method with example data.

This Java code preserves the functionality and structure of the original Python code while adhering to Java conventions and best practices.