Sure! Here's how you can convert the provided Python code into Java. The Java version uses `double` arrays for simplicity and includes necessary imports. The class is named `Answer` within the package `org.real.temp`.

```java
package org.real.temp;

public class Answer {

    /**
     * Rotate the point cloud around the Y axis by a given angle.
     *
     * @param pointCloud   A N x 3 double array representing the 3D point cloud.
     * @param rotationAngle The angle (in radians) to rotate the point cloud.
     * @return A N x 3 double array of the rotated point cloud.
     */
    public static double[][] rotatePointCloud(double[][] pointCloud, double rotationAngle) {
        int n = pointCloud.length;
        double[][] rotatedPointCloud = new double[n][3];

        for (int i = 0; i < n; i++) {
            double x = pointCloud[i][0];
            double y = pointCloud[i][1];
            double z = pointCloud[i][2];

            // Rotation matrix around Y-axis
            double cosTheta = Math.cos(rotationAngle);
            double sinTheta = Math.sin(rotationAngle);

            rotatedPointCloud[i][0] = cosTheta * x - sinTheta * z;
            rotatedPointCloud[i][1] = y;
            rotatedPointCloud[i][2] = sinTheta * x + cosTheta * z;
        }

        return rotatedPointCloud;
    }
}
```

### Explanation:

- **Imports**: No additional imports are needed since we're using basic Java libraries.
- **Class and Method**: The method `rotatePointCloud` is made static so it can be called without creating an instance of the `Answer` class.
- **Parameters**: The method takes a 2D `double` array (`pointCloud`) and a `double` value (`rotationAngle`).
- **Return Type**: The method returns a 2D `double` array representing the rotated point cloud.
- **Rotation Matrix**: The rotation around the Y-axis is performed using the standard rotation matrix formula.

This Java code should provide similar functionality to your original Python code.