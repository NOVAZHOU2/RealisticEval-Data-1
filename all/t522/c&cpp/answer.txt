Hereâ€™s the equivalent C++ code for rotating a point cloud around the Y-axis by a given angle. This code uses the Eigen library for handling matrices and vectors efficiently. Make sure you have Eigen installed and included in your project.

```cpp
#include <Eigen/Dense>
#include <cmath>

// Function to rotate a point cloud around the Y-axis by a given angle
Eigen::MatrixXd rotatePointCloud(const Eigen::MatrixXd& pointCloud, double rotationAngle) {
    /**
     * Rotate the point cloud around the Y axis by a given angle.
     *
     * Parameters:
     * - pointCloud: An N x 3 Eigen matrix representing the 3D point cloud.
     * - rotationAngle: The angle (in radians) to rotate the point cloud.
     *
     * Returns:
     * - An N x 3 Eigen matrix of the rotated point cloud.
     */

    // Create the rotation matrix for a rotation around the Y axis
    Eigen::Matrix3d rotationMatrix;
    rotationMatrix << cos(rotationAngle), 0, sin(rotationAngle),
                      0, 1, 0,
                     -sin(rotationAngle), 0, cos(rotationAngle);

    // Rotate the point cloud by multiplying with the rotation matrix
    Eigen::MatrixXd rotatedPointCloud = pointCloud * rotationMatrix;

    return rotatedPointCloud;
}

int main() {
    // Example usage
    Eigen::MatrixXd pointCloud(4, 3); // Example 4x3 point cloud
    pointCloud << 1, 2, 3,
                  4, 5, 6,
                  7, 8, 9,
                  10, 11, 12;

    double rotationAngle = M_PI / 4; // 45 degrees in radians

    Eigen::MatrixXd rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);

    std::cout << "Rotated Point Cloud:\n" << rotatedPointCloud << std::endl;

    return 0;
}
```

### Explanation:
1. **Eigen Library**: The Eigen library is used for matrix operations, similar to NumPy in Python.
2. **Function Definition**: The `rotatePointCloud` function takes an `Eigen::MatrixXd` (representing the point cloud) and a `double` (rotation angle in radians) as inputs.
3. **Rotation Matrix**: The rotation matrix is created using the cosine and sine functions from `<cmath>`.
4. **Matrix Multiplication**: The point cloud is rotated by multiplying it with the rotation matrix.
5. **Example Usage**: In the `main` function, an example point cloud is defined, and the `rotatePointCloud` function is called to demonstrate its usage.

Make sure to include the Eigen library in your project and link against it when compiling your C++ code.