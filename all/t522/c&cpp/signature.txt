Certainly! Here is the equivalent C++ code for the provided Python function, including appropriate comments and documentation:

```cpp
#include <Eigen/Dense>
#include <cmath>

/**
 * Rotate the point cloud around the Y axis by a given angle.
 *
 * @param pointCloud An N x 3 Eigen matrix representing the 3D point cloud.
 * @param rotationAngle The angle (in radians) to rotate the point cloud.
 *
 * @return An N x 3 Eigen matrix of the rotated point cloud.
 */
Eigen::MatrixXd rotatePointCloud(const Eigen::MatrixXd& pointCloud, double rotationAngle) {
    // Create the rotation matrix for a rotation around the Y axis
    Eigen::Matrix3d rotationMatrix;
    rotationMatrix << cos(rotationAngle), 0, sin(rotationAngle),
                      0, 1, 0,
                     -sin(rotationAngle), 0, cos(rotationAngle);

    // Rotate the point cloud by multiplying with the rotation matrix
    Eigen::MatrixXd rotatedPointCloud = pointCloud * rotationMatrix;

    return rotatedPointCloud;
}

int main() {
    // Example usage
    Eigen::MatrixXd pointCloud(4, 3); // Example 4x3 point cloud
    pointCloud << 1, 2, 3,
                  4, 5, 6,
                  7, 8, 9,
                  10, 11, 12;

    double rotationAngle = M_PI / 4; // 45 degrees in radians

    Eigen::MatrixXd rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);

    std::cout << "Rotated Point Cloud:\n" << rotatedPointCloud << std::endl;

    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `#include <Eigen/Dense>`: Includes the Eigen library for matrix operations.
   - `#include <cmath>`: Includes the standard math library for trigonometric functions.

2. **Function Documentation**:
   - The function `rotatePointCloud` is documented using a multi-line comment block (`/* ... */`) that describes the parameters and return value.

3. **Function Definition**:
   - The function `rotatePointCloud` takes an `Eigen::MatrixXd` (representing the point cloud) and a `double` (rotation angle in radians) as inputs.
   - It creates a rotation matrix using the cosine and sine functions from `<cmath>`.
   - It rotates the point cloud by multiplying it with the rotation matrix.

4. **Example Usage**:
   - In the `main` function, an example point cloud is defined, and the `rotatePointCloud` function is called to demonstrate its usage.

This code preserves the original purpose and structure of the Python function while adapting it to C++ conventions and syntax.