Here is the equivalent C++ code with comments:

```cpp
#include <Eigen/Dense>
#include <vector>

/**
 * @brief Rotates the point cloud around the Y axis by a given angle.
 *
 * @param point_cloud A vector of vectors representing the 3D point cloud.
 * @param rotation_angle The angle (in radians) to rotate the point cloud.
 * @return std::vector<std::vector<double>> The rotated point cloud.
 */
std::vector<std::vector<double>> rotatePointCloud(const std::vector<std::vector<double>>& pointCloud, double rotationAngle)
{
    Eigen::Matrix3d rotationMatrix;
    rotationMatrix = Eigen::AngleAxisd(rotationAngle, Eigen::Vector3d::UnitY());

    std::vector<std::vector<double>> rotatedPointCloud;
    for (const auto& point : pointCloud)
    {
        Eigen::Vector3d eigenPoint(point[0], point[1], point[2]);
        Eigen::Vector3d rotatedPoint = rotationMatrix * eigenPoint;

        std::vector<double> rotatedPointVec(3);
        rotatedPointVec[0] = rotatedPoint.x();
        rotatedPointVec[1] = rotatedPoint.y();
        rotatedPointVec[2] = rotatedPoint.z();

        rotatedPointCloud.push_back(rotatedPointVec);
    }

    return rotatedPointCloud;
}
```

This function takes in a `std::vector<std::vector<double>>` representing a 3D point cloud and a `double` representing the rotation angle in radians. It uses the Eigen library to create a rotation matrix about the Y-axis and then applies it to each point in the point cloud. The resulting rotated point cloud is returned as a new `std::vector<std::vector<double>>`.