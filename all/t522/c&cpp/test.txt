Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The goal is to preserve the functionality and logic of the tests while adapting them to C++ and Catch2.

First, make sure you have Catch2 installed and included in your project. You can download Catch2 from [here](https://github.com/catchorg/Catch2).

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <Eigen/Dense>
#include <cmath>

// Function to rotate a point cloud around the Y-axis by a given angle
Eigen::MatrixXd rotatePointCloud(const Eigen::MatrixXd& pointCloud, double rotationAngle) {
    // Create the rotation matrix for a rotation around the Y axis
    Eigen::Matrix3d rotationMatrix;
    rotationMatrix << cos(rotationAngle), 0, sin(rotationAngle),
                      0, 1, 0,
                     -sin(rotationAngle), 0, cos(rotationAngle);

    // Rotate the point cloud by multiplying with the rotation matrix
    Eigen::MatrixXd rotatedPointCloud = pointCloud * rotationMatrix;

    return rotatedPointCloud;
}

TEST_CASE("Test Rotate Point Cloud", "[rotate_point_cloud]") {
    SECTION("Test no rotation") {
        Eigen::MatrixXd pointCloud(1, 3);
        pointCloud << 1.0, 2.0, 3.0;
        double rotationAngle = 0;
        Eigen::MatrixXd expectedOutput(1, 3);
        expectedOutput << 1.0, 2.0, 3.0;

        Eigen::MatrixXd rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);

        REQUIRE(rotatedPointCloud.isApprox(expectedOutput));
    }

    SECTION("Test 180-degree rotation") {
        Eigen::MatrixXd pointCloud(2, 3);
        pointCloud << 1.0, 0.0, 0.0,
                      0.0, 1.0, 0.0;
        double rotationAngle = M_PI;  // 180 degrees
        Eigen::MatrixXd expectedOutput(2, 3);
        expectedOutput << -1.0, 0.0, 0.0,
                           0.0, 1.0, 0.0;

        Eigen::MatrixXd rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);

        REQUIRE(rotatedPointCloud.isApprox(expectedOutput));
    }

    SECTION("Test full rotation") {
        Eigen::MatrixXd pointCloud(1, 3);
        pointCloud << 1.0, 2.0, 3.0;
        double rotationAngle = 2 * M_PI;  // 360 degrees
        Eigen::MatrixXd expectedOutput(1, 3);
        expectedOutput << 1.0, 2.0, 3.0;

        Eigen::MatrixXd rotatedPointCloud = rotatePointCloud(pointCloud, rotationAngle);

        REQUIRE(rotatedPointCloud.isApprox(expectedOutput));
    }
}

int main(int argc, char* argv[]) {
    // Run all the Catch2 tests
    int result = Catch::Session().run(argc, argv);
    return result;
}
```

### Explanation:
1. **Catch2 Headers**:
   - `#include <catch2/catch_test_macros.hpp>`: Includes the Catch2 testing macros.

2. **Function Definition**:
   - The `rotatePointCloud` function is defined as before, taking an `Eigen::MatrixXd` and a `double` as inputs and returning the rotated point cloud.

3. **Test Class**:
   - The `TEST_CASE` macro defines a test case named "Test Rotate Point Cloud".
   - Each `SECTION` within the test case represents a specific test scenario.
   - The `REQUIRE` macro is used to assert that the rotated point cloud matches the expected output using `isApprox` for approximate equality.

4. **Main Function**:
   - The `main` function runs all the Catch2 tests and returns the result.

### Running the Tests
To run the tests, you need to compile the code with Catch2 linked. Here is an example command using g++:

```sh
g++ -std=c++17 -o test_rotate_point_cloud test_rotate_point_cloud.cpp -lEigen -lcatch2
./test_rotate_point_cloud
```

Ensure that you have the Eigen library and Catch2 headers properly installed and linked in your build environment. This setup will allow you to run the tests and verify the correctness of the `rotatePointCloud` function.