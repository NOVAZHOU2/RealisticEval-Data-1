Hereâ€™s how you can convert the provided JavaScript Jest test cases to Java JUnit 4 test cases for the `scaleToRange` function:

```java
package org.real.temp;

import static org.junit.Assert.*;
import org.junit.Test;

public class Tester {

    @Test
    public void testSimpleScaling() {
        double[] result = ScaleToRange.scaleToRange(new double[]{1, 2, 3, 4, 5}, 1, 5, 10, 50);
        assertArrayEquals(new double[]{10, 20, 30, 40, 50}, result, 0.001);
    }

    @Test
    public void testScalingWithNegativeInputRange() {
        double[] result = ScaleToRange.scaleToRange(new double[]{-5, 0, 5}, -5, 5, 0, 100);
        assertArrayEquals(new double[]{0, 50, 100}, result, 0.001);
    }

    @Test
    public void testScalingWithNegativeOutputRange() {
        double[] result = ScaleToRange.scaleToRange(new double[]{0, 50, 100}, 0, 100, -100, 100);
        assertArrayEquals(new double[]{-100, 0, 100}, result, 0.001);
    }

    @Test
    public void testInputArrayContainingSameValue() {
        double[] result = ScaleToRange.scaleToRange(new double[]{2, 2, 2}, 1, 3, 0, 10);
        assertArrayEquals(new double[]{5, 5, 5}, result, 0.001);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testInputValueOutOfRangeShouldThrowError() {
        ScaleToRange.scaleToRange(new double[]{1, 2, 3, 6}, 1, 5, 0, 10);
    }
}
```

### Key Points:
- The `@Test` annotation marks each method as a test case.
- The `assertArrayEquals` method is used to compare the expected and actual arrays, with a delta for floating-point comparisons.
- The expected exception for the out-of-range case is specified with `@Test(expected = IllegalArgumentException.class)`.