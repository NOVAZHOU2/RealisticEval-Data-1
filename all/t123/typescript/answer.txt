Hereâ€™s the JavaScript code converted to TypeScript. I've added type annotations for the function parameters and return type:

```typescript
function scaleToRange(
    inputArray: number[], 
    inputMin: number, 
    inputMax: number, 
    outputMin: number, 
    outputMax: number
): number[] {
    // Ensure all values in inputArray are within the input range
    inputArray.forEach(value => {
        if (value < inputMin || value > inputMax) {
            throw new Error(`Value ${value} in inputArray is outside the range [${inputMin}, ${inputMax}].`);
        }
    });

    const scale = (outputMax - outputMin) / (inputMax - inputMin);
    
    return inputArray.map(value => ((value - inputMin) * scale) + outputMin);
}
```

### Changes Made:
1. Added type annotations for the parameters (`inputArray`, `inputMin`, `inputMax`, `outputMin`, and `outputMax`).
2. Specified the return type as `number[]`. 

This ensures type safety while maintaining the original functionality of the code.