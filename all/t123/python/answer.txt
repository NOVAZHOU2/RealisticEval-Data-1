Sure! Below is the Python equivalent of the provided JavaScript function. This Python function performs the same operations: it checks if values in the input array are within the specified range, computes a scaling factor, and then scales the values accordingly.
Here's the translated code:
python
def scale_to_range(input_array, input_min, input_max, output_min, output_max):
    # Ensure all values in input_array are within the input range
    for value in input_array:
        if value < input_min or value > input_max:
            raise ValueError(f"Value {value} in input_array is outside the range [{input_min}, {input_max}].")
    
    scale = (output_max - output_min) / (input_max - input_min)

    # Scale the input array
    return [(value - input_min) * scale + output_min for value in input_array]

# Example usage
input_array = [10, 20, 30]
input_min = 10
input_max = 30
output_min = 0
output_max = 1

scaled_array = scale_to_range(input_array, input_min, input_max, output_min, output_max)
print(scaled_array)
Explanation:
Function Definition: The function is defined with the name scale_to_range and takes the same parameters as the JavaScript function.
Value Check: A for loop is used to iterate through input_array, checking if each value is within the specified input_min and input_max. If any value is out of range, it raises a ValueError.
Scaling Factor Calculation: The scaling factor is calculated similarly as in the JavaScript version.
List Comprehension: The output array is created using a list comprehension to apply the scaling formula to each value in the input_array.
Example Usage: The example demonstrates how to call the function and print the scaled result.
Feel free to modify the example values as needed!