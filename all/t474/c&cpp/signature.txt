Certainly! Here is the equivalent C++ code for the provided Python function `are_siblings`, including the translation of comments and docstrings into C++ style comments:

```cpp
#include <iostream>
#include <vector>
#include <algorithm> // For std::find

/**
 * Determines if two values are siblings in a binary tree represented as a vector.
 *
 * @param tree The binary tree level-order representation.
 * @param val1 The first value to check for sibling relationship.
 * @param val2 The second value to check for sibling relationship.
 * @return True if val1 and val2 are siblings, False otherwise.
 */
bool are_siblings(const std::vector<int>& tree, int val1, int val2) {
    // A node cannot be a sibling to itself
    if (val1 == val2) {
        return false;
    }

    // Find indices of the values
    auto it1 = std::find(tree.begin(), tree.end(), val1);
    auto it2 = std::find(tree.begin(), tree.end(), val2);

    // If either value is not found in the tree
    if (it1 == tree.end() || it2 == tree.end()) {
        return false;
    }

    // Calculate the indices of the values
    size_t index1 = std::distance(tree.begin(), it1);
    size_t index2 = std::distance(tree.begin(), it2);

    // Check if they have the same parent
    return (index1 - 1) / 2 == (index2 - 1) / 2 && index1 != index2;
}

int main() {
    // Example usage
    std::vector<int> tree = {1, 2, 3, 4, 5, 6, 7};
    int val1 = 4;
    int val2 = 5;

    bool result = are_siblings(tree, val1, val2);
    std::cout << "Are " << val1 << " and " << val2 << " siblings? " << (result ? "Yes" : "No") << std::endl;

    return 0;
}
```

### Explanation:
1. **Header Files**: 
   - `#include <iostream>` for input/output operations.
   - `#include <vector>` for using `std::vector`.
   - `#include <algorithm>` for `std::find`.

2. **Function Documentation**:
   - The function `are_siblings` is documented using a multi-line comment block (`/** */`) which is the standard way to document functions in C++.
   - The parameters and return type are described clearly within the comment block.

3. **Function Implementation**:
   - The function `are_siblings` takes a `const std::vector<int>& tree` and two `int` values `val1` and `val2`.
   - It checks if `val1` and `val2` are the same and returns `false` if they are.
   - It uses `std::find` to locate the positions of `val1` and `val2` in the `tree` vector.
   - If either value is not found, it returns `false`.
   - It calculates the indices of `val1` and `val2` using `std::distance`.
   - It checks if they have the same parent by comparing their indices adjusted by subtracting one and performing integer division by two.

4. **Main Function**:
   - An example usage of the `are_siblings` function is provided in the `main` function.
   - The result is printed to the console.

This C++ code preserves the original functionality and structure of the Python code, along with appropriate documentation and comments.