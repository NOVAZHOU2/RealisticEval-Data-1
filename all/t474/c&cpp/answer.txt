Hereâ€™s the equivalent C++ code for the provided Python function. The code will include necessary type declarations, error handling, and loop structures adapted to C++:

```cpp
#include <iostream>
#include <vector>
#include <stdexcept>

bool are_siblings(const std::vector<int>& tree, int val1, int val2) {
    // A node cannot be a sibling to itself
    if (val1 == val2) {
        return false;
    }

    // Find indices of the values
    auto it1 = std::find(tree.begin(), tree.end(), val1);
    auto it2 = std::find(tree.begin(), tree.end(), val2);

    // Check if one of the values is not in the tree
    if (it1 == tree.end() || it2 == tree.end()) {
        return false;
    }

    // Calculate indices from iterators
    size_t index1 = std::distance(tree.begin(), it1);
    size_t index2 = std::distance(tree.begin(), it2);

    // Check if they have the same parent
    return (index1 - 1) / 2 == (index2 - 1) / 2 && index1 != index2;
}

int main() {
    // Example usage
    std::vector<int> tree = {1, 2, 3, 4, 5, 6, 7};
    int val1 = 4;
    int val2 = 5;

    bool result = are_siblings(tree, val1, val2);
    std::cout << "Are " << val1 << " and " << val2 << " siblings? " << (result ? "Yes" : "No") << std::endl;

    return 0;
}
```

### Explanation:
1. **Function Definition**: The `are_siblings` function takes a `std::vector<int>` representing the binary tree and two integers (`val1` and `val2`) to check if they are siblings.
2. **Self-Sibling Check**: If `val1` and `val2` are the same, they cannot be siblings, so the function returns `false`.
3. **Finding Indices**: Use `std::find` to locate the positions of `val1` and `val2` in the vector. If either value is not found, the function returns `false`.
4. **Index Calculation**: Calculate the indices of `val1` and `val2` using `std::distance`.
5. **Parent Check**: Verify if the indices indicate that `val1` and `val2` have the same parent by comparing `(index1 - 1) / 2` and `(index2 - 1) / 2`. Also, ensure that `index1` and `index2` are different.
6. **Example Usage**: The `main` function demonstrates how to use the `are_siblings` function with an example tree and values.