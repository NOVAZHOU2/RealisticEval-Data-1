Certainly! Here is the equivalent TypeScript code for the provided Python function, along with a Jest test class to ensure the functionality is preserved. 

First, let's define the TypeScript function `areSiblings`:

```typescript
/**
 * Determines if two values are siblings in a binary tree represented as an array.
 *
 * @param tree - The binary tree level-order representation.
 * @param val1 - The first value to check for sibling relationship.
 * @param val2 - The second value to check for sibling relationship.
 * @returns True if val1 and val2 are siblings, False otherwise.
 */
function areSiblings(tree: number[], val1: number, val2: number): boolean {
    if (val1 === val2) {
        return false;  // A node cannot be a sibling to itself
    }

    try {
        // Find indices of the values
        const index1 = tree.indexOf(val1);
        const index2 = tree.indexOf(val2);

        // Check if they have the same parent
        return (index1 - 1) / 2 === Math.floor((index2 - 1) / 2) && index1 !== index2;
    } catch (error) {
        // One of the values is not in the tree
        return false;
    }
}

// Example usage
console.log(areSiblings([1, 2, 3, 4, 5], 4, 5));  // Should return true
console.log(areSiblings([1, 2, 3, 4, 5], 2, 3));  // Should return true
console.log(areSiblings([1, 2, 3, 4, 5], 1, 2));  // Should return false
```

Next, let's create a Jest test class to validate the function:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('areSiblings', () => {
    it('should return false if the values are the same', () => {
        expect(areSiblings([1, 2, 3, 4, 5], 2, 2)).toBe(false);
    });

    it('should return true if the values are siblings', () => {
        expect(areSiblings([1, 2, 3, 4, 5], 4, 5)).toBe(true);
    });

    it('should return true if the values are siblings at different levels', () => {
        expect(areSiblings([1, 2, 3, 4, 5, 6, 7, 8, 9], 8, 9)).toBe(true);
    });

    it('should return false if the values are not siblings', () => {
        expect(areSiblings([1, 2, 3, 4, 5], 2, 3)).toBe(false);
    });

    it('should return false if one of the values is not in the tree', () => {
        expect(areSiblings([1, 2, 3, 4, 5], 1, 6)).toBe(false);
    });
});
```

### Explanation:
1. **Function Definition**:
   - The function `areSiblings` is defined with the correct parameter types (`number[]` for `tree`, `number` for `val1`, and `number` for `val2`).
   - The return type is specified as `boolean`.

2. **JSDoc Comments**:
   - The JSDoc comments provide clear documentation for the function, its parameters, and its return value.

3. **Implementation**:
   - The function body remains the same, ensuring the logic is preserved.
   - The `indexOf` method is used to find the indices of `val1` and `val2`.
   - The parent comparison logic uses `Math.floor` to handle integer division correctly.
   - The `try-catch` block handles the case where one of the values is not found in the `tree` array.

4. **Jest Test Class**:
   - The Jest test class uses the `describe` and `it` functions to define test cases.
   - The `expect` function is used to assert the expected behavior of the `areSiblings` function.
   - Various test cases are provided to cover different scenarios, ensuring the function behaves as expected.

This TypeScript code and Jest test class maintain the original functionality and structure of the Python code while adhering to TypeScript's static type system and Jest's testing framework.