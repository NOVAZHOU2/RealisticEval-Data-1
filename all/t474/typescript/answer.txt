Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function areSiblings(tree: number[], val1: number, val2: number): boolean {
    /**
     * Determines if two values are siblings in a binary tree represented as an array.
     *
     * @param tree - The binary tree level-order representation.
     * @param val1 - The first value to check for sibling relationship.
     * @param val2 - The second value to check for sibling relationship.
     * @returns True if val1 and val2 are siblings, False otherwise.
     */
    if (val1 === val2) {
        return false;  // A node cannot be a sibling to itself
    }

    try {
        // Find indices of the values
        const index1 = tree.indexOf(val1);
        const index2 = tree.indexOf(val2);

        // Check if they have the same parent
        return (index1 - 1) / 2 === Math.floor((index2 - 1) / 2) && index1 !== index2;
    } catch (error) {
        // One of the values is not in the tree
        return false;
    }
}
```

### Explanation:
1. **Function Definition**: The function `areSiblings` is defined with the appropriate types for the parameters (`tree`, `val1`, `val2`) and the return type (`boolean`).
2. **Type Annotations**: The types are explicitly declared for the parameters and the return type.
3. **Equality Check**: The initial check for equality remains the same.
4. **Index Finding**: The `indexOf` method is used to find the indices of `val1` and `val2`.
5. **Parent Comparison**: The comparison logic is adjusted to handle the division correctly using `Math.floor` to ensure integer division.
6. **Error Handling**: The `try-catch` block handles the case where one of the values is not found in the `tree` array by catching the error and returning `false`.

This TypeScript code preserves the functionality and logic of the original Python code while adapting it to TypeScript's static typing and syntax.