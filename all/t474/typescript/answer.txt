Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function areSiblings(tree: number[], val1: number, val2: number): boolean {
    if (val1 === val2) {
        return false;  // A node cannot be a sibling to itself
    }

    try {
        // Find indices of the values
        const index1 = tree.indexOf(val1);
        const index2 = tree.indexOf(val2);

        if (index1 === -1 || index2 === -1) {
            return false;  // One of the values is not in the tree
        }

        // Check if they have the same parent
        return (index1 - 1) / 2 === Math.floor((index2 - 1) / 2) && index1 !== index2;
    } catch (error) {
        // One of the values is not in the tree
        return false;
    }
}
```

### Explanation:
1. **Function Definition**: The function `areSiblings` is defined with explicit types for the parameters and return type.
2. **Equality Check**: The initial check for equality remains the same.
3. **Index Finding**: The `indexOf` method is used to find the indices of `val1` and `val2` in the `tree` array.
4. **Error Handling**: In TypeScript, `indexOf` returns `-1` if the element is not found, so we check for `-1` instead of catching a `ValueError`.
5. **Parent Check**: The logic to check if the nodes have the same parent is adjusted to use integer division (`Math.floor`) to ensure consistency with the Python floor division (`//`).

This TypeScript code maintains the same functionality and logic as the original Python code.