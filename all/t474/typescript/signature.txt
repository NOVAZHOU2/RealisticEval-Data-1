Certainly! Here is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style comments:

```typescript
/**
 * Determines if two values are siblings in a binary tree represented as an array.
 *
 * @param tree - The binary tree level-order representation.
 * @param val1 - The first value to check for sibling relationship.
 * @param val2 - The second value to check for sibling relationship.
 * @returns True if val1 and val2 are siblings, False otherwise.
 */
function areSiblings(tree: number[], val1: number, val2: number): boolean {
    if (val1 === val2) {
        return false;  // A node cannot be a sibling to itself
    }

    try {
        // Find indices of the values
        const index1 = tree.indexOf(val1);
        const index2 = tree.indexOf(val2);

        // Check if they have the same parent
        return (index1 - 1) / 2 === Math.floor((index2 - 1) / 2) && index1 !== index2;
    } catch (error) {
        // One of the values is not in the tree
        return false;
    }
}
```

### Explanation:
1. **Function Signature**:
   - The function `areSiblings` is defined with the correct parameter types (`number[]` for `tree`, `number` for `val1`, and `number` for `val2`).
   - The return type is specified as `boolean`.

2. **JSDoc Comments**:
   - The JSDoc comments provide clear documentation for the function, its parameters, and its return value.
   - The `@param` tags describe each parameter.
   - The `@returns` tag describes the return value.

3. **Implementation**:
   - The function body remains the same, ensuring the logic is preserved.
   - The `indexOf` method is used to find the indices of `val1` and `val2`.
   - The parent comparison logic uses `Math.floor` to handle integer division correctly.
   - The `try-catch` block handles the case where one of the values is not found in the `tree` array.

This TypeScript code maintains the original functionality and structure of the Python code while adhering to TypeScript's static type system and JSDoc documentation standards.