To convert the given Python function `are_siblings` into JavaScript, we need to maintain the same functionality and logic. The JavaScript version will use similar techniques to find the indices of the values and determine if they are siblings in a binary tree represented as an array. Here's how you can write the equivalent JavaScript code:

```javascript
function areSiblings(tree, val1, val2) {
    /**
     * Determines if two values are siblings in a binary tree represented as an array.
     *
     * @param {Array<number>} tree - the binary tree level-order representation
     * @param {number} val1 - first value to check for sibling relationship
     * @param {number} val2 - second value to check for sibling relationship
     * @returns {boolean} - True if val1 and val2 are siblings, False otherwise
     */
    if (val1 === val2) {
        return false;  // A node cannot be a sibling to itself
    }

    try {
        // Find indices of the values
        const index1 = tree.indexOf(val1);
        const index2 = tree.indexOf(val2);

        // Check if they have the same parent
        return (index1 - 1) >>> 1 === (index2 - 1) >>> 1 && index1 !== index2;
    } catch (error) {
        // One of the values is not in the tree
        return false;
    }
}
```

### Explanation:
1. **Function Definition**: The function `areSiblings` is defined with the same parameters as the Python function.
2. **Equality Check**: The initial check for equality (`val1 === val2`) ensures that a node cannot be a sibling to itself.
3. **Index Finding**: The `indexOf` method is used to find the indices of `val1` and `val2` in the `tree` array.
4. **Parent Check**: The bitwise unsigned right shift operator (`>>>`) is used instead of the floor division (`//`) to calculate the parent index. This is because JavaScript does not have a direct equivalent to Python's floor division for non-negative numbers.
5. **Exception Handling**: A `try-catch` block is used to handle the case where one of the values is not found in the `tree` array, which would throw an error when calling `indexOf`.

This JavaScript function maintains the same logic and functionality as the original Python function.