Here is your Python code translated into JavaScript:

```javascript
function areSiblings(tree, val1, val2) {
    /**
     * Determines if two values are siblings in a binary tree represented as an array.
     *
     * @param {Array<number>} tree - the binary tree level-order representation
     * @param {number} val1 - first value to check for sibling relationship
     * @param {number} val2 - second value to check for sibling relationship
     * @returns {boolean}
     */
    
    // Iterate through each element in the tree
    for(let i = 0; i < tree.length; i++) {
        // Check if current node has children
        if (tree[i] !== null && tree[i] !== undefined && tree[i] !== 0) {
            let leftChild = 2 * i + 1;
            let rightChild = 2 * i + 2;

            // Check if either of the child nodes match val1 or val2
            if ((leftChild < tree.length && tree[leftChild] === val1 && tree[rightChild] === val2)
                || (rightChild < tree.length && tree[rightChild] === val1 && tree[leftChild] === val2)) {
                    return true;
                }
        }
    }

    // If no siblings found, return false
    return false;
}
```

Please note that the above function assumes that the binary tree is represented as an array where `null`, `undefined` or `0` represents an empty node. The parent-child relationship is determined based on the index in the array: the children of node at index `i` are at indices `2*i+1` and `2*i+2`.