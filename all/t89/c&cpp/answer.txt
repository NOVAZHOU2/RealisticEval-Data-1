Sure! Here is the equivalent C++ code for the given JavaScript function:

```cpp
#include <iostream>
#include <chrono>
#include <iomanip>

std::string timePassed(long long startTimeInMillis) {
    // Get the current time in milliseconds
    auto currentTimeInMillis = std::chrono::duration_cast<std::chrono::milliseconds>(
        std::chrono::system_clock::now().time_since_epoch()
    ).count();

    // Calculate the difference in milliseconds
    auto timeDifference = currentTimeInMillis - startTimeInMillis;

    // Convert the difference to seconds
    int totalSeconds = static_cast<int>(timeDifference / 1000);

    // Calculate minutes and seconds
    int minutes = totalSeconds / 60;
    int seconds = totalSeconds % 60;

    // Format the string
    std::ostringstream oss;
    oss << std::setw(2) << std::setfill('0') << minutes << ":" 
        << std::setw(2) << std::setfill('0') << seconds;

    // Return the formatted string
    return oss.str();
}

int main() {
    // Example usage
    auto startTimeInMillis = std::chrono::duration_cast<std::chrono::milliseconds>(
        std::chrono::system_clock::now().time_since_epoch()
    ).count();

    // Wait for some time (for demonstration purposes)
    std::this_thread::sleep_for(std::chrono::seconds(5));

    std::cout << "Time passed: " << timePassed(startTimeInMillis) << std::endl;

    return 0;
}
```

### Explanation:
1. **Current Time in Milliseconds**: We use `std::chrono` to get the current time in milliseconds.
2. **Time Difference Calculation**: We calculate the difference between the current time and the start time.
3. **Conversion to Seconds**: We convert the difference from milliseconds to seconds.
4. **Minutes and Seconds Calculation**: We calculate the minutes and seconds.
5. **String Formatting**: We use `std::ostringstream` with `std::setw` and `std::setfill` to format the output string.

This should give you the desired functionality in C++.