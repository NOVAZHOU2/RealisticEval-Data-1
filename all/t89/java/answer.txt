Sure! Here is the equivalent Java code for the given JavaScript function:

```java
import java.text.SimpleDateFormat;
import java.util.Date;

public class TimePassedCalculator {

    public static String timePassed(long startTimeInMillis) {
        // Get the current time in milliseconds
        long currentTimeInMillis = System.currentTimeMillis();

        // Calculate the difference in milliseconds
        long timeDifference = currentTimeInMillis - startTimeInMillis;

        // Convert the difference to seconds
        long totalSeconds = timeDifference / 1000;

        // Calculate minutes and seconds
        long minutes = totalSeconds / 60;
        long seconds = totalSeconds % 60;

        // Format the string
        SimpleDateFormat formatter = new SimpleDateFormat("mm:ss");
        formatter.setTimeZone(java.util.TimeZone.getTimeZone("GMT")); // Ensure consistent formatting

        // Return the formatted string
        return formatter.format(new Date(minutes * 60 + seconds)).substring(3);
    }

    public static void main(String[] args) {
        long startTimeInMillis = System.currentTimeMillis() - (5 * 60 * 1000); // Example start time, 5 minutes ago
        System.out.println(timePassed(startTimeInMillis));
    }
}
```

### Explanation:
1. **Getting Current Time**: `System.currentTimeMillis()` is used to get the current time in milliseconds.
2. **Calculating Time Difference**: The difference between the current time and the start time is calculated.
3. **Converting to Seconds**: The difference is converted to seconds.
4. **Calculating Minutes and Seconds**: The total seconds are divided into minutes and seconds.
5. **Formatting the String**: A `SimpleDateFormat` is used to format the time in the desired format (`mm:ss`). The `substring(3)` is used to remove the initial "00:" part that `SimpleDateFormat` might add.

This should give you the same functionality as your JavaScript code.