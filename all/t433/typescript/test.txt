Here's how you can translate the Python unittest test class to a TypeScript Jest test case for the `extract_paragraphs_and_lines` function:

```typescript
import { describe, it, expect } from '@jest/globals';
import { extractParagraphsAndLines } from './path-to-your-module'; // Adjust the import path

describe('extractParagraphsAndLines', () => {
  it('should correctly extract paragraphs and lines from the given text', () => {
    const inputText = "First paragraph.\nThis is the second line.\n\nSecond paragraph.\nAnother line.";
    
    const result = extractParagraphsAndLines(inputText);
    
    expect(result).toEqual({
      paragraphs: ["First paragraph.", "This is the second line."],
      lines: ["First paragraph.", "This is the second line.", "Second paragraph.", "Another line."]
    });
  });

  it('should handle empty input correctly', () => {
    const inputText = "";

    const result = extractParagraphsAndLines(inputText);

    expect(result).toEqual({
      paragraphs: [],
      lines: []
    });
  });

  it('should handle single line input correctly', () => {
    const inputText = "Single line.";

    const result = extractParagraphsAndLines(inputText);

    expect(result).toEqual({
      paragraphs: ["Single line."],
      lines: ["Single line."]
    });
  });

  it('should handle multiple paragraphs without new lines at the end correctly', () => {
    const inputText = "First paragraph.\n\nSecond paragraph.";

    const result = extractParagraphsAndLines(inputText);

    expect(result).toEqual({
      paragraphs: ["First paragraph.", "Second paragraph."],
      lines: ["First paragraph.", "Second paragraph."]
    });
  });
});
```

In this TypeScript Jest test case, we're using the `describe` and `it` functions to group and define our tests respectively. We're also using the `expect` function to assert that the results of our `extractParagraphsAndLines` function match our expected outputs. Make sure to adjust the import path to where your `extractParagraphsAndLines` function is located.