Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The Python unittest assertions are mapped to the appropriate Jest assertions.

### TypeScript Code

First, let's define the `extractParagraphsAndLines` function in TypeScript:

```typescript
/**
 * Extracts paragraphs and lines from the given text. Paragraphs end with \n\n and lines end with \n.
 * 
 * Example:
 *   Input: "First paragraph.\nThis is the second line.\n\nSecond paragraph.\nAnother line."
 *   Output: 
 *   {
 *     paragraphs: ["First paragraph.\nThis is the second line.", "Second paragraph.\nAnother line."],
 *     lines: ["First paragraph.", "This is the second line.", "Second paragraph.", "Another line."]
 *   }
 * 
 * @param text The input text from which paragraphs and lines will be extracted.
 * @returns A dictionary containing:
 *   - 'paragraphs': A list of paragraphs extracted from the text.
 *   - 'lines': A list of lines extracted from the text.
 */
function extractParagraphsAndLines(text: string): { paragraphs: string[], lines: string[] } {
    // Split the text into paragraphs
    const paragraphs = text.split('\n\n');

    // Split each paragraph into lines
    const lines = paragraphs.flatMap(paragraph => paragraph.split('\n'));

    // Remove empty paragraphs and lines
    const filteredParagraphs = paragraphs.filter(p => p.trim().length > 0).map(p => p.trim());
    const filteredLines = lines.filter(l => l.trim().length > 0).map(l => l.trim());

    // Return the extracted paragraphs and lines in a dictionary
    return {
        paragraphs: filteredParagraphs,
        lines: filteredLines
    };
}

export default extractParagraphsAndLines;
```

### Jest Test Class

Now, let's define the Jest test class:

```typescript
import { describe, it, expect } from '@jest/globals';
import extractParagraphsAndLines from './path/to/extractParagraphsAndLines'; // Adjust the path as needed

describe('TestExtractParagraphsAndLines', () => {
    it('should handle a single paragraph correctly', () => {
        const inputText = "This is a single paragraph.";
        const expectedOutput = {
            paragraphs: ["This is a single paragraph."],
            lines: ["This is a single paragraph."]
        };
        expect(extractParagraphsAndLines(inputText)).toEqual(expectedOutput);
    });

    it('should handle multiple paragraphs correctly', () => {
        const inputText = "First paragraph.\nThis is the second line.\n\nSecond paragraph.\nAnother line.";
        const expectedOutput = {
            paragraphs: [
                "First paragraph.\nThis is the second line.",
                "Second paragraph.\nAnother line."
            ],
            lines: [
                "First paragraph.",
                "This is the second line.",
                "Second paragraph.",
                "Another line."
            ]
        };
        expect(extractParagraphsAndLines(inputText)).toEqual(expectedOutput);
    });

    it('should handle leading and trailing whitespace correctly', () => {
        const inputText = "   This paragraph has leading whitespace.\nAnd a line after.\n\n   This one has trailing whitespace.   ";
        const expectedOutput = {
            paragraphs: [
                "This paragraph has leading whitespace.\nAnd a line after.",
                "This one has trailing whitespace."
            ],
            lines: [
                "This paragraph has leading whitespace.",
                "And a line after.",
                "This one has trailing whitespace."
            ]
        };
        expect(extractParagraphsAndLines(inputText)).toEqual(expectedOutput);
    });

    it('should handle an empty string correctly', () => {
        const inputText = "";
        const expectedOutput = {
            paragraphs: [],
            lines: []
        };
        expect(extractParagraphsAndLines(inputText)).toEqual(expectedOutput);
    });

    it('should handle multiple empty paragraphs correctly', () => {
        const inputText = "\n\n\n";
        const expectedOutput = {
            paragraphs: [],
            lines: []
        };
        expect(extractParagraphsAndLines(inputText)).toEqual(expectedOutput);
    });
});
```

### Explanation:
1. **Import Statements**:
   - Import `describe`, `it`, and `expect` from `@jest/globals`.
   - Import the `extractParagraphsAndLines` function from the appropriate module.

2. **Describe Block**:
   - Use `describe` to group the test cases under a descriptive name.

3. **Test Cases**:
   - Each `it` block defines a specific test case.
   - Use `expect` with `toEqual` to compare the actual output with the expected output.

4. **Data and Expected Outputs**:
   - Define the input text and expected outputs for each test case.
   - Ensure that the expected outputs match the behavior of the `extractParagraphsAndLines` function.

This TypeScript code preserves the original functionality and logic of the Python unittest tests, while adapting them to Jest's syntax and assertion methods.