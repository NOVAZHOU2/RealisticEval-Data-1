Here's how you can translate the provided Python function into TypeScript:

```typescript
interface ExtractedContent {
  paragraphs: string[];
  lines: string[];
}

function extractParagraphsAndLines(text: string): ExtractedContent {
  /**
   * Extracts paragraphs and lines from the given text. Paragraphs end with \n\n and lines end with \n.
   * 
   * @param {string} text - The input text from which paragraphs and lines will be extracted.
   * @returns {ExtractedContent} - An object containing arrays of paragraphs and lines.
   */
  
  // Splitting the text into paragraphs based on double newline characters
  const paragraphs = text.split('\n\n');
  
  // Extracting individual lines from each paragraph
  const lines = paragraphs.flatMap(paragraph => paragraph.split('\n').filter(line => line.trim() !== ''));

  return {
    paragraphs,
    lines
  };
}
```

In this TypeScript version, I've defined an interface `ExtractedContent` to specify the structure of the returned object. The `extractParagraphsAndLines` function uses the same logic as your original Python function but adheres to TypeScript's type system. The `flatMap` method is used to flatten the array of lines while filtering out any empty strings that might result from splitting.