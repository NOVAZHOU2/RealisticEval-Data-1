Certainly! Here’s the equivalent TypeScript code, ensuring proper type definitions and adherence to TypeScript’s static type system:

```typescript
function extractParagraphsAndLines(text: string): { paragraphs: string[], lines: string[] } {
    /**
     * Extracts paragraphs and lines from the given text.
     *
     * @param text - The input text from which paragraphs and lines will be extracted.
     * @returns An object containing:
     *          - 'paragraphs': An array of paragraphs extracted from the text.
     *          - 'lines': An array of lines extracted from the text.
     */

    // Split the text into paragraphs
    const paragraphs = text.split('\n\n');

    // Split each paragraph into lines
    const lines = paragraphs.flatMap(paragraph => paragraph.split('\n'));

    // Remove empty paragraphs and lines
    const filteredParagraphs = paragraphs.filter(p => p.trim()).map(p => p.trim());
    const filteredLines = lines.filter(l => l.trim()).map(l => l.trim());

    // Return the extracted paragraphs and lines in an object
    return {
        paragraphs: filteredParagraphs,
        lines: filteredLines
    };
}
```

### Explanation:
1. **Type Annotations**: The function `extractParagraphsAndLines` has its parameters and return type annotated.
2. **String Splitting**: The `.split()` method is used to split the text into paragraphs and lines.
3. **Filtering and Mapping**: The `.filter()` method is used to remove empty paragraphs and lines, and `.map()` is used to trim the whitespace.
4. **Return Object**: The extracted paragraphs and lines are returned in an object with the specified keys and types.

This TypeScript code follows the same logic as the Python code but adapts it to TypeScript's syntax and type system.