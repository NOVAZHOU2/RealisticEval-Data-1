Sure! Here is the equivalent TypeScript code:

```typescript
function extractParagraphsAndLines(text: string): { paragraphs: string[], lines: string[] } {
    /**
     * Extracts paragraphs and lines from the given text.
     *
     * @param text The input text from which paragraphs and lines will be extracted.
     * @returns A dictionary containing:
     *          - 'paragraphs': A list of paragraphs extracted from the text.
     *          - 'lines': A list of lines extracted from the text.
     */

    // Split the text into paragraphs
    const paragraphs = text.split('\n\n');

    // Split each paragraph into lines
    const lines = paragraphs.flatMap(paragraph => paragraph.split('\n'));

    // Remove empty paragraphs and lines
    const filteredParagraphs = paragraphs.filter(p => p.trim().length > 0).map(p => p.trim());
    const filteredLines = lines.filter(l => l.trim().length > 0).map(l => l.trim());

    // Return the extracted paragraphs and lines in a dictionary
    return {
        paragraphs: filteredParagraphs,
        lines: filteredLines
    };
}
```

### Explanation:
1. **Function Definition**: The function `extractParagraphsAndLines` is defined with a single parameter `text` of type `string`.
2. **Type Annotations**: The return type is explicitly defined as `{ paragraphs: string[], lines: string[] }`.
3. **Splitting Text**: The text is split into paragraphs using `split('\n\n')` and then into lines using `flatMap` combined with `split('\n')`.
4. **Filtering Empty Strings**: Both paragraphs and lines are filtered to remove any empty strings using `filter` and `trim`. The `map` method is used to trim the strings.
5. **Return Object**: The function returns an object with the extracted paragraphs and lines.

This TypeScript code maintains the same functionality and logic as the Python code, while adapting it to TypeScript's syntax and static type system.