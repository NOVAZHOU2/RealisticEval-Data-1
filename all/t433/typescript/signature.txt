Certainly! Here is the equivalent TypeScript code with proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Extracts paragraphs and lines from the given text. Paragraphs end with \n\n and lines end with \n.
 * 
 * Example:
 *   Input: "First paragraph.\nThis is the second line.\n\nSecond paragraph.\nAnother line."
 *   Output: 
 *   {
 *     paragraphs: ["First paragraph.\nThis is the second line.", "Second paragraph.\nAnother line."],
 *     lines: ["First paragraph.", "This is the second line.", "Second paragraph.", "Another line."]
 *   }
 * 
 * @param text The input text from which paragraphs and lines will be extracted.
 * @returns A dictionary containing:
 *   - 'paragraphs': A list of paragraphs extracted from the text.
 *   - 'lines': A list of lines extracted from the text.
 */
function extractParagraphsAndLines(text: string): { paragraphs: string[], lines: string[] } {
    // Split the text into paragraphs
    const paragraphs = text.split('\n\n');

    // Split each paragraph into lines
    const lines = paragraphs.flatMap(paragraph => paragraph.split('\n'));

    // Remove empty paragraphs and lines
    const filteredParagraphs = paragraphs.filter(p => p.trim().length > 0).map(p => p.trim());
    const filteredLines = lines.filter(l => l.trim().length > 0).map(l => l.trim());

    // Return the extracted paragraphs and lines in a dictionary
    return {
        paragraphs: filteredParagraphs,
        lines: filteredLines
    };
}
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc comment block provides a detailed description of the function, including the example input and output.
   - It includes the `@param` tag for the input parameter `text` and the `@returns` tag for the return value.

2. **Function Definition**:
   - The function `extractParagraphsAndLines` is defined with a single parameter `text` of type `string`.
   - The return type is explicitly defined as `{ paragraphs: string[], lines: string[] }`.

3. **Text Splitting**:
   - The text is split into paragraphs using `split('\n\n')`.
   - Each paragraph is further split into lines using `flatMap` combined with `split('\n')`.

4. **Filtering Empty Strings**:
   - Both paragraphs and lines are filtered to remove any empty strings using `filter` and `trim`. The `map` method is used to trim the strings.

5. **Return Object**:
   - The function returns an object with the extracted paragraphs and lines.

This TypeScript code preserves the original functionality and structure of the Python code, while adhering to TypeScript's static type system and using appropriate JSDoc-style documentation.