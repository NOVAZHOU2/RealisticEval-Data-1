Sure! Below is the equivalent C++ code for the provided Python function `extract_paragraphs_and_lines`. This code assumes that you have a basic understanding of C++ syntax and standard library usage.

```cpp
#include <iostream>
#include <vector>
#include <sstream>
#include <string>

struct ExtractedData {
    std::vector<std::string> paragraphs;
    std::vector<std::string> lines;
};

ExtractedData extractParagraphsAndLines(const std::string& text) {
    ExtractedData result;

    std::istringstream iss(text);
    std::string line;
    std::string currentParagraph;

    while (std::getline(iss, line)) {
        if (line.empty()) {
            if (!currentParagraph.empty()) {
                result.paragraphs.push_back(currentParagraph);
                currentParagraph.clear();
            }
        } else {
            currentParagraph += line + "\n";
        }
    }

    if (!currentParagraph.empty()) {
        result.paragraphs.push_back(currentParagraph);
    }

    // Split each paragraph into lines
    for (auto& paragraph : result.paragraphs) {
        std::istringstream paragraphStream(paragraph);
        std::string paragraphLine;
        while (std::getline(paragraphStream, paragraphLine)) {
            result.lines.push_back(paragraphLine);
        }
    }

    return result;
}

int main() {
    std::string input = "First paragraph.\nThis is the second line.\n\nSecond paragraph.\nAnother line.";
    auto data = extractParagraphsAndLines(input);

    std::cout << "Paragraphs:\n";
    for (const auto& para : data.paragraphs) {
        std::cout << para;
    }

    std::cout << "\nLines:\n";
    for (const auto& line : data.lines) {
        std::cout << line;
    }

    return 0;
}
```

### Explanation:
1. **Struct Definition**: We define a struct `ExtractedData` to hold the results, which includes vectors for paragraphs and lines.
2. **Function Implementation**:
   - We use `std::istringstream` to read the input string line by line.
   - When an empty line is encountered, it indicates the end of a paragraph. If there's any accumulated paragraph, we add it to the `paragraphs` vector and clear the accumulator.
   - Each non-empty line is appended to the current paragraph followed by a newline character.
   - After processing all lines, if there's any remaining paragraph, we add it to the `paragraphs` vector.
   - Finally, we split each paragraph into individual lines and add them to the `lines` vector.
3. **Main Function**: Demonstrates how to use the `extractParagraphsAndLines` function and prints the results.

This code should work similarly to your original Python function but in C++.