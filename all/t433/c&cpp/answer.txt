Hereâ€™s the equivalent C++ code for the provided Python function, maintaining the same functionality and logic:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <map>

// Function to split a string by a delimiter
std::vector<std::string> split(const std::string &s, char delimiter) {
    std::vector<std::string> tokens;
    std::string token;
    std::istringstream tokenStream(s);
    while (std::getline(tokenStream, token, delimiter)) {
        tokens.push_back(token);
    }
    return tokens;
}

// Function to extract paragraphs and lines from the given text
std::map<std::string, std::vector<std::string>> extract_paragraphs_and_lines(const std::string &text) {
    // Split the text into paragraphs
    std::vector<std::string> paragraphs = split(text, '\n');
    
    // Split each paragraph into lines
    std::vector<std::string> all_lines;
    for (const auto &paragraph : paragraphs) {
        std::vector<std::string> lines = split(paragraph, '\n');
        all_lines.insert(all_lines.end(), lines.begin(), lines.end());
    }

    // Filter out empty paragraphs and lines
    std::vector<std::string> filtered_paragraphs;
    std::vector<std::string> filtered_lines;

    for (const auto &paragraph : paragraphs) {
        if (!paragraph.empty()) {
            filtered_paragraphs.push_back(paragraph);
        }
    }

    for (auto &line : all_lines) {
        if (!line.empty()) {
            filtered_lines.push_back(line);
        }
    }

    // Return the extracted paragraphs and lines in a map
    return {
        {"paragraphs", filtered_paragraphs},
        {"lines", filtered_lines}
    };
}

int main() {
    std::string text = "This is the first paragraph.\n"
                       "It has multiple lines.\n\n"
                       "This is the second paragraph.";

    auto result = extract_paragraphs_and_lines(text);

    // Print the results
    std::cout << "Paragraphs:" << std::endl;
    for (const auto &paragraph : result["paragraphs"]) {
        std::cout << paragraph << std::endl;
    }

    std::cout << "\nLines:" << std::endl;
    for (const auto &line : result["lines"]) {
        std::cout << line << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function `split`:** This helper function splits a string by a given delimiter and returns a vector of strings.
2. **Function `extract_paragraphs_and_lines`:** This function performs the main extraction of paragraphs and lines from the input text.
3. **Splitting Paragraphs:** The input text is split into paragraphs using `\n\n` as the delimiter.
4. **Splitting Lines:** Each paragraph is further split into lines using `\n` as the delimiter.
5. **Filtering Empty Strings:** Both paragraphs and lines are filtered to remove any empty strings.
6. **Returning Results:** The function returns a map containing the extracted paragraphs and lines.
7. **Main Function:** Demonstrates how to call the function and print the results.

This C++ code maintains the functionality and logic of the original Python code while adapting to C++ syntax and features.