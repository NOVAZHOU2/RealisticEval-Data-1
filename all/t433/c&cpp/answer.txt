Hereâ€™s the equivalent C++ code for the provided Python function, including necessary headers and a main function to demonstrate its usage:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <map>

// Function to extract paragraphs and lines from the given text
std::map<std::string, std::vector<std::string>> extract_paragraphs_and_lines(const std::string& text) {
    // Split the text into paragraphs
    std::istringstream iss(text);
    std::vector<std::string> paragraphs;
    std::string paragraph;
    while (std::getline(iss, paragraph, '\n')) {
        if (!paragraph.empty()) {
            paragraphs.push_back(paragraph);
        }
    }

    // Split each paragraph into lines
    std::vector<std::string> lines;
    for (const auto& paragraph : paragraphs) {
        std::istringstream lineStream(paragraph);
        std::string line;
        while (std::getline(lineStream, line, '\n')) {
            if (!line.empty()) {
                lines.push_back(line);
            }
        }
    }

    // Return the extracted paragraphs and lines in a map
    return {
        {"paragraphs", paragraphs},
        {"lines", lines}
    };
}

// Function to check the correctness of the extract_paragraphs_and_lines function
void check_function() {
    std::string test_text = "This is the first paragraph.\n\nThis is the second paragraph.\nIt has multiple lines.\nAnother line here.\n\n";
    auto result = extract_paragraphs_and_lines(test_text);

    std::cout << "Paragraphs:\n";
    for (const auto& paragraph : result["paragraphs"]) {
        std::cout << paragraph << "\n";
    }

    std::cout << "\nLines:\n";
    for (const auto& line : result["lines"]) {
        std::cout << line << "\n";
    }
}

int main() {
    check_function();
    return 0;
}
```

### Explanation:
1. **Headers**: The required headers (`<iostream>`, `<vector>`, `<string>`, `<sstream>`, `<map>`) are included.
2. **Function Definition**: The `extract_paragraphs_and_lines` function takes a string and returns a map with two keys: `"paragraphs"` and `"lines"`.
3. **Splitting Text**:
   - Paragraphs are split using `std::getline` with a newline delimiter.
   - Lines within each paragraph are also split using `std::getline` with a newline delimiter.
4. **Removing Empty Strings**: Empty paragraphs and lines are filtered out by checking if they are empty before adding them to the respective vectors.
5. **Return Value**: The function returns a map containing the extracted paragraphs and lines.
6. **Check Function**: A `check_function` is provided to demonstrate the usage and verify the correctness of the function.
7. **Main Function**: The `main` function calls `check_function` to run the test case.