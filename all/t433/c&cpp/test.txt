To convert the provided Python function into a C++ test class using Catch2, we need to first define the function `extract_paragraphs_and_lines` in C++. Then, we can write the test cases using Catch2 assertions. Here’s how you can do it:

1. Define the function `extract_paragraphs_and_lines` in C++.
2. Write the test cases using Catch2.

Here’s the complete C++ code using Catch2:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <vector>
#include <map>

// Function to extract paragraphs and lines from the given text.
std::map<std::string, std::vector<std::string>> extract_paragraphs_and_lines(const std::string& text) {
    std::map<std::string, std::vector<std::string>> result;
    std::vector<std::string> paragraphs;
    std::vector<std::string> lines;

    std::istringstream iss(text);
    std::string line;
    std::string paragraph;
    while (getline(iss, line)) {
        if (line.empty()) {
            // End of a paragraph
            if (!paragraph.empty()) {
                paragraphs.push_back(paragraph);
                paragraph.clear();
            }
        } else {
            if (paragraph.empty()) {
                paragraph = line;
            } else {
                paragraph += "\n" + line;
            }
            lines.push_back(line);
        }
    }
    if (!paragraph.empty()) {
        paragraphs.push_back(paragraph);
    }

    result["paragraphs"] = paragraphs;
    result["lines"] = lines;
    return result;
}

TEST_CASE("Test extract_paragraphs_and_lines") {
    SECTION("Empty text") {
        auto result = extract_paragraphs_and_lines("");
        REQUIRE(result["paragraphs"].empty());
        REQUIRE(result["lines"].empty());
    }

    SECTION("Single paragraph and single line") {
        auto result = extract_paragraphs_and_lines("First paragraph.");
        REQUIRE(result["paragraphs"].size() == 1);
        REQUIRE(result["paragraphs"][0] == "First paragraph.");
        REQUIRE(result["lines"].size() == 1);
        REQUIRE(result["lines"][0] == "First paragraph.");
    }

    SECTION("Multiple paragraphs and multiple lines") {
        auto result = extract_paragraphs_and_lines("First paragraph.\nThis is the second line.\n\nSecond paragraph.\nAnother line.");
        REQUIRE(result["paragraphs"].size() == 2);
        REQUIRE(result["paragraphs"][0] == "First paragraph.\nThis is the second line.");
        REQUIRE(result["paragraphs"][1] == "Second paragraph.\nAnother line.");
        REQUIRE(result["lines"].size() == 4);
        REQUIRE(result["lines"][0] == "First paragraph.");
        REQUIRE(result["lines"][1] == "This is the second line.");
        REQUIRE(result["lines"][2] == "Second paragraph.");
        REQUIRE(result["lines"][3] == "Another line.");
    }

    SECTION("Single empty paragraph") {
        auto result = extract_paragraphs_and_lines("\n");
        REQUIRE(result["paragraphs"].empty());
        REQUIRE(result["lines"].size() == 0);
    }

    SECTION("Multiple empty paragraphs") {
        auto result = extract_paragraphs_and_lines("\n\n\n");
        REQUIRE(result["paragraphs"].empty());
        REQUIRE(result["lines"].empty());
    }
}
```

### Explanation:
1. **Function Definition**: The `extract_paragraphs_and_lines` function takes a string as input and returns a map containing two vectors: one for paragraphs and one for lines.
2. **Test Cases**:
   - **Empty Text**: Tests the function with an empty string.
   - **Single Paragraph and Single Line**: Tests the function with a single paragraph and a single line.
   - **Multiple Paragraphs and Multiple Lines**: Tests the function with multiple paragraphs and multiple lines.
   - **Single Empty Paragraph**: Tests the function with a single empty paragraph.
   - **Multiple Empty Paragraphs**: Tests the function with multiple empty paragraphs.

This conversion preserves the functionality and logic of the original Python test cases using Catch2 assertions.