Here's the equivalent Java code for your Python function:

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Answer {
    
    public static Map<String, List<String>> extractParagraphsAndLines(String text) {
        Map<String, List<String>> result = new HashMap<>();
        
        // Splitting the text into paragraphs based on double newline characters
        String[] paragraphs = text.split("\\n\\n");
        
        // Initializing lists to store paragraphs and lines
        List<String> paragraphList = new ArrayList<>();
        List<String> lineList = new ArrayList<>();

        for (String paragraph : paragraphs) {
            // Splitting each paragraph into lines based on single newline character
            String[] lines = paragraph.split("\\n");

            // Adding each line to the line list
            for (String line : lines) {
                lineList.add(line);
            }

            // Adding the current paragraph to the paragraph list
            paragraphList.add(paragraph);
        }

        // Putting both lists in the map
        result.put("paragraphs", paragraphList);
        result.put("lines", lineList);

        return result;
    }
}
```

### Explanation:
1. **Package Declaration**: The `package` declaration specifies where the class resides (`org.real.temp`).
2. **Class Definition**: The `Answer` class contains the method `extractParagraphsAndLines`.
3. **Method Signature**: The method takes a `String` parameter `text` and returns a `Map<String, List<String>>`.
4. **Splitting Text**:
   - The text is split into paragraphs using `split("\\n\\n")`, which splits on two consecutive newline characters.
   - Each paragraph is then split into lines using `split("\\n")`, splitting on single newline characters.
5. **Storing Results**:
   - The paragraphs and lines are stored in separate lists.
   - These lists are added to a `HashMap` which is returned at the end of the method.

### Note:
- In Java, string literals that contain special characters like `\n` need to be escaped with a backslash (`\\`).