Sure! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function extractParagraphsAndLines(text) {
    /**
     * Extracts paragraphs and lines from the given text.
     *
     * @param {string} text - The input text from which paragraphs and lines will be extracted.
     * @returns {object} An object containing:
     *   - 'paragraphs': An array of paragraphs extracted from the text.
     *   - 'lines': An array of lines extracted from the text.
     */
    
    // Split the text into paragraphs
    const paragraphs = text.split('\n\n');

    // Split each paragraph into lines
    const lines = paragraphs.flatMap(paragraph => paragraph.split('\n'));

    // Filter out empty paragraphs and lines and trim whitespace
    const filteredParagraphs = paragraphs.filter(p => p.trim().length > 0).map(p => p.trim());
    const filteredLines = lines.filter(l => l.trim().length > 0).map(l => l.trim());

    // Return the extracted paragraphs and lines in an object
    return {
        'paragraphs': filteredParagraphs,
        'lines': filteredLines
    };
}
```

### Explanation:
1. **Function Definition**: The function `extractParagraphsAndLines` is defined with a docstring describing its purpose, parameters, and return value.
2. **Splitting Text into Paragraphs**: The text is split into paragraphs using `\n\n` as the delimiter.
3. **Splitting Each Paragraph into Lines**: Each paragraph is further split into lines using `\n` as the delimiter. The `flatMap` method is used to flatten the resulting array of arrays.
4. **Filtering and Trimming**: Both paragraphs and lines are filtered to remove any empty strings and trimmed to remove leading and trailing whitespace.
5. **Returning the Result**: The function returns an object containing the extracted paragraphs and lines.

This JavaScript code should provide the same functionality as the original Python code.