Certainly! Below is the TypeScript code that is equivalent to the provided Python code. The TypeScript version will include proper type definitions and handle the same functionality:

```typescript
import * as fs from 'fs';
import * as path from 'path';
import * as re from 'xregexp';

interface Mapping {
    regex: RegExp;
    replacement: string;
}

function readMappingFile(mappingFilePath: string): Mapping[] {
    const mappings: Mapping[] = [];

    try {
        const data = fs.readFileSync(mappingFilePath, 'utf-8');
        const lines = data.split('\n');

        for (const line of lines) {
            if (!line.includes(',')) {
                throw new Error("Each line must contain exactly one comma separating the pattern and the replacement.");
            }

            const [oldPattern, newWord] = line.trim().split(',', 1);
            const trimmedOldPattern = oldPattern.trim().replace(/^'|'$/g, '');
            const trimmedNewWord = newWord.trim().replace(/^'|'$/g, '');

            mappings.push({
                regex: re(trimmedOldPattern),
                replacement: trimmedNewWord
            });
        }
    } catch (error) {
        if (error.code === 'ENOENT') {
            throw new Error(`Unable to find the specified file: ${mappingFilePath}`);
        } else {
            throw error;
        }
    }

    return mappings;
}

// Example usage
try {
    const mappings = readMappingFile('path/to/mapping/file.txt');
    console.log(mappings);
} catch (error) {
    console.error(error.message);
}
```

### Explanation:
1. **Imports**: 
   - `fs` and `path` are imported from Node.js standard library for file system operations.
   - `xregexp` is used as a substitute for Python's `re` module. Note that you need to install `xregexp` using npm or yarn (`npm install xregexp`).

2. **Type Definition**:
   - `Mapping` interface defines the structure of each mapping object.

3. **Function Definition**:
   - `readMappingFile` function reads the file synchronously and processes each line.
   - It checks for the presence of a comma in each line and splits accordingly.
   - It trims the patterns and replacements and removes leading/trailing single quotes.
   - It compiles the regular expressions using `xregexp`.

4. **Error Handling**:
   - It catches `FileNotFoundError` by checking the error code `ENOENT`.
   - It throws custom errors for missing commas or other issues.

5. **Example Usage**:
   - Demonstrates how to call the function and handle potential errors.

This TypeScript code maintains the same functionality and logic as the original Python code while adapting to TypeScript's static type system and idiomatic practices.