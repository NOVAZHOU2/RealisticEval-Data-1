Here's how you can convert your Python function into TypeScript:

```typescript
import fs from 'fs';
import path from 'path';

function readMappingFile(mappingFilePath: string): Array<[RegExp, string]> {
    /**
     * Reads question from the given mapping file and returns an array where each element is a tuple containing the compiled regular expression and replacement strings
     * @param {string} mappingFilePath - Path to the file containing regex mappings.
     * 
     * @returns {Array<[RegExp, string]>} - An array of tuples, each containing a compiled regex object and a corresponding replacement string.
     */
    
    // Read the content of the mapping file
    const data = fs.readFileSync(path.resolve(__dirname, mappingFilePath), 'utf8');

    // Split the content into lines
    const lines = data.split('\n');

    // Initialize an empty array for storing the results
    let result: Array<[RegExp, string]> = [];

    // Iterate over the lines
    for(let line of lines) {
        // Ignore empty lines or lines that start with '#'
        if(line.trim() === '' || line.startsWith('#')) continue;

        // Split the line into regex pattern and replacement string
        const [pattern, replacement] = line.split('=');

        // Compile the regex pattern
        const regex = new RegExp(pattern.trim());

        // Add the regex and replacement string to the result array
        result.push([regex, replacement.trim()]);
    }

    return result;
}
```

This TypeScript function reads a file, splits its contents into lines, iterates over those lines, compiles regex patterns, and adds them along with their replacement strings to an array. The array is then returned. Please ensure to handle exceptions and errors according to your needs, as shown in the original Python code.