Here's how you can convert the TypeScript Jest test cases to Python's unittest framework. This code retains the structure and logic of the original tests, adapted for Python.
Converted Python Test Cases Using unittest
python
import unittest
from datetime import datetime, timedelta

# Assuming the function get_time_since_born_until_now is already defined above

class TestGetTimeSinceBornUntilNow(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        # Set a fixed current time for all tests
        cls.fixed_time = datetime(2024, 8, 23, 15, 45)
        cls.original_datetime = datetime.now  # Save original datetime

        # Override the datetime.now method
        def fixed_now():
            return cls.fixed_time

        datetime.now = fixed_now

    @classmethod
    def tearDownClass(cls):
        # Restore the original datetime.now method
        datetime.now = cls.original_datetime

    def test_typical_birth_date(self):
        birth_date = datetime(1990, 5, 15, 10, 30)
        result = get_time_since_born_until_now(birth_date)
        self.assertEqual(result, (34, 3, 8, 5, 15))  # Expected output

    def test_recent_birth_date(self):
        birth_date = datetime(2024, 8, 20, 12, 0)
        result = get_time_since_born_until_now(birth_date)
        self.assertEqual(result, (0, 0, 3, 3, 45))  # Expected output

    def test_edge_case_end_of_year(self):
        birth_date = datetime(2023, 12, 31, 23, 59)
        result = get_time_since_born_until_now(birth_date)
        self.assertEqual(result, (0, 7, 22, 15, 46))  # Expected output

    def test_birthdays_early_in_current_month(self):
        birth_date = datetime(2024, 8, 1, 0, 0)
        result = get_time_since_born_until_now(birth_date)
        self.assertEqual(result, (0, 0, 22, 15, 45))  # Expected output

    def test_birthdays_later_in_current_year(self):
        birth_date = datetime(2024, 1, 1, 1, 0)
        result = get_time_since_born_until_now(birth_date)
        self.assertEqual(result, (0, 7, 22, 14, 45))  # Expected output

    def test_birthdays_previous_month_same_year(self):
        birth_date = datetime(2024, 7, 30, 10, 0)
        result = get_time_since_born_until_now(birth_date)
        self.assertEqual(result, (0, 0, 24, 5, 45))  # Expected output

if __name__ == '__main__':
    unittest.main()
Explanation of Changes:
Imports: The code imports the unittest module for creating the test cases and datetime for handling date and time.
Test Class: The test class TestGetTimeSinceBornUntilNow inherits from unittest.TestCase, which allows us to use various assertion methods.
setUpClass and tearDownClass:
The setUpClass method sets a fixed system time (similar to Jest's beforeAll with jest.useFakeTimers()), overriding the datetime.now method to return a constant value for all tests.
The tearDownClass method restores the original datetime.now after all tests are run (similar to Jest's afterAll).
Test Methods: Each test case is defined as a method within the class. Each method calls the function get_time_since_born_until_now with a specific birth date and checks the result against the expected output using self.assertEqual().
Execution: The test suite runs when the script is executed directly.
This structure mimics the Jest test cases while adhering to Python's conventions and practices for unit testing.