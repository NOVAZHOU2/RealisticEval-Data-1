Here’s the equivalent JUnit 4 test case for the provided Jest test code in Java:

```java
package org.real.temp;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import java.util.Calendar;
import java.util.Date;

import static org.junit.Assert.assertArrayEquals;

public class Tester {

    private static final Date FAKE_NOW;

    static {
        Calendar calendar = Calendar.getInstance();
        calendar.set(2024, Calendar.AUGUST, 23, 15, 45, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        FAKE_NOW = calendar.getTime();
    }

    @BeforeClass
    public static void setUp() {
        // Set the system time to FAKE_NOW
        // This is typically done via mocking libraries in Java, as there’s no direct equivalent to Jest's fake timers.
        // For demonstration, we will assume the method uses FAKE_NOW.
    }

    @AfterClass
    public static void tearDown() {
        // Reset any mocking done in setUp
    }

    @Test
    public void shouldReturnCorrectDifferenceForTypicalBirthDate() {
        Date birthDate = new Date(90, 4, 15, 10, 30); // 1990-05-15T10:30:00
        int[] result = TimeSinceBirth.getTimeSinceBornUntilNow(birthDate);
        assertArrayEquals(new int[]{34, 3, 8, 5, 15}, result);
    }

    @Test
    public void shouldReturnCorrectDifferenceForRecentBirthDate() {
        Date birthDate = new Date(124, 7, 20, 12, 0); // 2024-08-20T12:00:00
        int[] result = TimeSinceBirth.getTimeSinceBornUntilNow(birthDate);
        assertArrayEquals(new int[]{0, 0, 3, 3, 45}, result);
    }

    @Test
    public void shouldHandleEdgeCasesAtEndOfYear() {
        Date birthDate = new Date(123, 11, 31, 23, 59); // 2023-12-31T23:59:00
        int[] result = TimeSinceBirth.getTimeSinceBornUntilNow(birthDate);
        assertArrayEquals(new int[]{0, 7, 22, 15, 46}, result);
    }

    @Test
    public void shouldHandleBirthdaysEarlierInCurrentMonth() {
        Date birthDate = new Date(124, 7, 1, 0, 0); // 2024-08-01T00:00:00
        int[] result = TimeSinceBirth.getTimeSinceBornUntilNow(birthDate);
        assertArrayEquals(new int[]{0, 0, 22, 15, 45}, result);
    }

    @Test
    public void shouldHandleBirthdaysLaterInCurrentYearBeforeCurrentMonth() {
        Date birthDate = new Date(124, 0, 1, 1, 0); // 2024-01-01T01:00:00
        int[] result = TimeSinceBirth.getTimeSinceBornUntilNow(birthDate);
        assertArrayEquals(new int[]{0, 7, 22, 14, 45}, result);
    }

    @Test
    public void shouldHandleBirthdaysInPreviousMonthOfSameYear() {
        Date birthDate = new Date(124, 6, 30, 10, 0); // 2024-07-30T10:00:00
        int[] result = TimeSinceBirth.getTimeSinceBornUntilNow(birthDate);
        assertArrayEquals(new int[]{0, 0, 24, 5, 45}, result);
    }
}
```

### Explanation:
- **JUnit Annotations**: `@BeforeClass` and `@AfterClass` are used for setup and teardown methods, but in Java, mocking the system time is usually done with libraries like Mockito.
- **Date Creation**: The `Date` constructor has been used, but note that it is deprecated. For more modern code, consider using `java.time.LocalDateTime`.
- **Assertions**: `assertArrayEquals` is used to compare the expected and actual results.
- **Date Conversion**: The birth dates are created to match the provided test cases using the appropriate constructor.

Make sure to adjust the time mocking part as needed for your actual implementation, as Java doesn't have built-in support for manipulating system time like Jest.