Hereâ€™s how you can convert the Jest test cases into JUnit 4 test cases in Java:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.HashMap;
import java.util.Map;

public class Tester {
    
    @Test
    public void testMergeObjectsWithNonConflictingKeys() {
        Map<String, Object> obj1 = new HashMap<>();
        obj1.put("name", "Alice");
        Map<String, Object> obj2 = new HashMap<>();
        obj2.put("age", 30);
        Map<String, Object> expected = new HashMap<>();
        expected.put("name", "Alice");
        expected.put("age", 30);
        assertEquals(expected, mergeObjects(obj1, obj2));
    }

    @Test
    public void testPropertiesOverwrite() {
        Map<String, Object> obj1 = new HashMap<>();
        obj1.put("name", "Alice");
        obj1.put("age", 25);
        Map<String, Object> obj2 = new HashMap<>();
        obj2.put("age", 30);
        Map<String, Object> expected = new HashMap<>();
        expected.put("name", "Alice");
        expected.put("age", 30);
        assertEquals(expected, mergeObjects(obj1, obj2));
    }

    @Test
    public void testMergeObjectsWithNestedStructures() {
        Map<String, Object> obj1 = new HashMap<>();
        Map<String, Object> user1 = new HashMap<>();
        user1.put("name", "Alice");
        user1.put("age", 25);
        obj1.put("user", user1);
        
        Map<String, Object> obj2 = new HashMap<>();
        Map<String, Object> user2 = new HashMap<>();
        user2.put("age", 30);
        obj2.put("user", user2);
        
        Map<String, Object> expected = new HashMap<>();
        Map<String, Object> expectedUser = new HashMap<>();
        expectedUser.put("age", 30);
        expected.put("user", expectedUser);
        
        assertEquals(expected, mergeObjects(obj1, obj2));
    }
    
    // Assuming mergeObjects method is defined here or imported
}
```

This code implements the JUnit 4 tests while retaining the original test logic.