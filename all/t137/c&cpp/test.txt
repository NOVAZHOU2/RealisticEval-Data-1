Hereâ€™s the equivalent Catch2 test case in C++:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <map>
#include <string>

std::map<std::string, std::string> mergeObjects(const std::map<std::string, std::string>& obj1, const std::map<std::string, std::string>& obj2);

TEST_CASE("mergeObjects", "[merge]") {
    SECTION("correctly merges two objects with non-conflicting keys") {
        std::map<std::string, std::string> obj1 = {{"name", "Alice"}};
        std::map<std::string, std::string> obj2 = {{"age", "30"}};
        std::map<std::string, std::string> expected = {{"name", "Alice"}, {"age", "30"}};
        REQUIRE(mergeObjects(obj1, obj2) == expected);
    }

    SECTION("properties from the second object overwrite properties from the first") {
        std::map<std::string, std::string> obj1 = {{"name", "Alice"}, {"age", "25"}};
        std::map<std::string, std::string> obj2 = {{"age", "30"}};
        std::map<std::string, std::string> expected = {{"name", "Alice"}, {"age", "30"}};
        REQUIRE(mergeObjects(obj1, obj2) == expected);
    }

    SECTION("merges objects with nested structures correctly") {
        std::map<std::string, std::map<std::string, std::string>> obj1 = {{"user", {{"name", "Alice"}, {"age", "25"}}}};
        std::map<std::string, std::map<std::string, std::string>> obj2 = {{"user", {{"age", "30"}}}};
        std::map<std::string, std::map<std::string, std::string>> expected = {{"user", {{"age", "30"}}}};  // Replaces the entire 'user' object
        REQUIRE(mergeObjects(obj1, obj2) == expected);
    }
}
```

This C++ test case uses Catch2 for unit testing, reflecting the structure and logic of the original JavaScript tests. Note that the handling of nested objects would require adjusting the `mergeObjects` function accordingly.