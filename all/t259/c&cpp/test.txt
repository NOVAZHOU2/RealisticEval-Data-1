Certainly! Below is the equivalent C++ code using the Catch2 testing framework to replicate the provided Python unittest class. The tests will ensure that the functionality and logic are preserved, and appropriate assertions are used in Catch2.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

Hereâ€™s the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>

// Function to determine if a number is a compliant four-digit number
bool is_compliant_four_digit(int number) {
    // Check if the number is strictly between 1000 and 9999
    return 1000 <= number && number <= 9999;
}

TEST_CASE("TestIsCompliantFourDigit", "[is_compliant_four_digit]") {
    SECTION("test_positive_four_digit_number") {
        // Tests a standard positive four-digit number
        REQUIRE(is_compliant_four_digit(1234));
    }

    SECTION("test_boundary_values") {
        // Tests the boundary values of the range
        REQUIRE(is_compliant_four_digit(1000));
        REQUIRE(is_compliant_four_digit(9999));
    }

    SECTION("test_negative_four_digit_number") {
        // Tests a negative four-digit number
        REQUIRE_FALSE(is_compliant_four_digit(-1234));
    }

    SECTION("test_out_of_range_number") {
        // Tests numbers that are out of the four-digit range
        REQUIRE_FALSE(is_compliant_four_digit(999));
        REQUIRE_FALSE(is_compliant_four_digit(10000));
    }
}

int main(int argc, char *argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Header Inclusion**: Include the Catch2 header file at the beginning of the file.
2. **Function Definition**: Define the `is_compliant_four_digit` function, which checks if a number is between 1000 and 9999.
3. **Test Case**: Use `TEST_CASE` to define a test case named `TestIsCompliantFourDigit`.
4. **Sections**: Use `SECTION` to define individual test sections, each corresponding to a specific test case from the Python unittest.
5. **Assertions**:
    - `REQUIRE`: Used to assert that a condition is true.
    - `REQUIRE_FALSE`: Used to assert that a condition is false.
6. **Main Function**: The `main` function initializes and runs the Catch2 test session.

### Running the Tests:
To run the tests, you need to compile the code with the Catch2 library. If you are using a build system like CMake, you can add the following to your `CMakeLists.txt`:

```cmake
cmake_minimum_required(VERSION 3.10)
project(IsCompliantFourDigitTest)

# Find Catch2
find_package(Catch2 REQUIRED)

# Add executable
add_executable(IsCompliantFourDigitTest IsCompliantFourDigitTest.cpp)

# Link Catch2
target_link_libraries(IsCompliantFourDigitTest PUBLIC Catch2::Catch2)

# Run tests
add_test(NAME IsCompliantFourDigitTest COMMAND IsCompliantFourDigitTest)
```

This setup ensures that the tests are compiled and executed correctly using Catch2.