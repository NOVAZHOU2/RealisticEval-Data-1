Certainly! Below is an equivalent C++ test case using Catch2 for the provided Python `unittest` function `is_compliant_four_digit`.

First, ensure you have Catch2 installed in your project. If not, you can install it via vcpkg or manually include the headers and libraries.

Here's the C++ version of the test case:

```cpp
#include <catch2/catch.hpp>
#include <iostream>

// Function to determine whether a number is a compliant four-digit number
bool is_compliant_four_digit(int number) {
    return number >= 1000 && number <= 9999;
}

// Test cases for the is_compliant_four_digit function
TEST_CASE("Check if a number is a compliant four-digit number", "[is_compliant_four_digit]") {
    REQUIRE(is_compliant_four_digit(1000) == true);
    REQUIRE(is_compliant_four_digit(5678) == true);
    REQUIRE(is_compliant_four_digit(9999) == true);

    REQUIRE(is_compliant_four_digit(999) == false);
    REQUIRE(is_compliant_four_digit(10000) == false);
    REQUIRE(is_compliant_four_digit(-1000) == false);
    REQUIRE(is_compliant_four_digit(123) == false);
}
```

### Explanation:
- **Catch2 Includes**: We include the Catch2 header file (`catch.hpp`).
- **Function Definition**: The `is_compliant_four_digit` function remains unchanged from the Python version.
- **Test Case**: We define a test case using `TEST_CASE`. The first argument is the description of the test case, and the second argument is the tag used to group related tests.
- **Assertions**: We use `REQUIRE` to assert that the function returns the expected results for various inputs.

### Running the Tests:
To run these tests, compile your code with the Catch2 library and execute the resulting binary. Hereâ€™s an example using g++:

```sh
g++ -std=c++14 -I/path/to/catch2/include -o test_is_compliant_four_digit test_is_compliant_four_digit.cpp
./test_is_compliant_four_digit
```

Replace `/path/to/catch2/include` with the actual path where the Catch2 headers are located on your system.

This will output the test results, indicating which tests passed and which failed.