Sure! Below is the equivalent C and C++ code for the provided Python function `is_compliant_four_digit`.

### C Code

```c
#include <stdbool.h>

bool is_compliant_four_digit(int number) {
    /*
     * Determine whether a number is a compliant four-digit number
     *
     * Args:
     *     number (int): The number to check.
     *
     * Returns:
     *     true if the number is a compliant four-digit number, false otherwise.
     */
    
    // Check if the number is between 1000 and 9999 inclusive
    return (number >= 1000 && number <= 9999);
}
```

### C++ Code

```cpp
#include <iostream>
#include <cassert>

bool is_compliant_four_digit(int number) {
    /*
     * Determine whether a number is a compliant four-digit number
     *
     * Args:
     *     number (int): The number to check.
     *
     * Returns:
     *     true if the number is a compliant four-digit number, false otherwise.
     */

    // Check if the number is between 1000 and 9999 inclusive
    return (number >= 1000 && number <= 9999);
}

int main() {
    // Test cases
    assert(is_compliant_four_digit(1234) == true);
    assert(is_compliant_four_digit(9876) == true);
    assert(is_compliant_four_digit(1000) == true);
    assert(is_compliant_four_digit(9999) == true);
    assert(is_compliant_four_digit(999) == false);
    assert(is_compliant_four_digit(10000) == false);

    std::cout << "All test cases passed!" << std::endl;
    return 0;
}
```

Both versions of the code check if the given integer falls within the range of 1000 to 9999, which defines a four-digit number. If it does, the function returns `true`; otherwise, it returns `false`. The C++ version includes some basic testing using assertions to ensure the function works correctly.