Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>

// Function to determine if a number is a compliant four-digit number
bool is_compliant_four_digit(int number) {
    /*
    Determines whether the given number is a compliant four-digit number.
    Compliance is defined as the number being between 1000 and 9999, inclusive.

    Args:
        number (int): The number to check.

    Returns:
        bool: True if the number is a compliant four-digit number, False otherwise.
    */

    // Check if the number is strictly between 1000 and 9999
    return 1000 <= number && number <= 9999;
}

// Function to test the is_compliant_four_digit function
void test_is_compliant_four_digit() {
    std::cout << std::boolalpha; // Print bools as true/false instead of 1/0
    std::cout << "Testing with 1234: " << is_compliant_four_digit(1234) << std::endl; // Should be true
    std::cout << "Testing with 999: " << is_compliant_four_digit(999) << std::endl;   // Should be false
    std::cout << "Testing with 10000: " << is_compliant_four_digit(10000) << std::endl; // Should be false
    std::cout << "Testing with 5000: " << is_compliant_four_digit(5000) << std::endl; // Should be true
}

int main() {
    test_is_compliant_four_digit();
    return 0;
}
```

### Explanation:
1. **Function Definition**: The `is_compliant_four_digit` function takes an `int` parameter and returns a `bool`.
2. **Multi-line Comments**: The Python docstring is converted into a multi-line comment in C++ using `/* ... */`.
3. **Single-line Comments**: The Python comments are converted into single-line comments in C++ using `//`.
4. **Test Function**: The `test_is_compliant_four_digit` function tests the `is_compliant_four_digit` function with various inputs and prints the results.
5. **Main Function**: The `main` function calls the test function to verify the correctness of the implementation.

This C++ code preserves the original purpose and structure of the Python code, ensuring that the number is checked for compliance within the specified range.