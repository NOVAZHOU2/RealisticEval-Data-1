Sure! Below is how you can convert the Python unittest test class into a Jest test case in JavaScript:

```javascript
// Define the function isCompliantFourDigit
function isCompliantFourDigit(number) {
    /**
     * Determine whether a number is a compliant four-digit number
     * @param {number} number - The number to check.
     * @returns {boolean} True if the number is a compliant four-digit number, False otherwise.
     */
    return typeof number === 'number' && number >= 1000 && number <= 9999;
}

// Import the testing library
const { describe, it, expect } = require('@jest/globals');

// Write the test cases using Jest
describe('isCompliantFourDigit', () => {
    it('should return true for a valid four-digit number', () => {
        expect(isCompliantFourDigit(1234)).toBe(true);
    });

    it('should return false for a three-digit number', () => {
        expect(isCompliantFourDigit(123)).toBe(false);
    });

    it('should return false for a five-digit number', () => {
        expect(isCompliantFourDigit(12345)).toBe(false);
    });

    it('should return false for a non-integer value', () => {
        expect(isCompliantFourDigit('1234')).toBe(false);
    });
});
```

### Explanation:
1. **Function Definition**: The `isCompliantFourDigit` function checks if a given number is a four-digit integer.
2. **Testing Library**: We use Jest, which is a popular JavaScript testing framework.
3. **Describe Block**: The `describe` block groups related tests together.
4. **It Blocks**: Each `it` block contains a single test case.
5. **Expectations**: The `expect` function along with matchers like `.toBe` and `.toBeFalse` are used to assert the expected outcomes of the function.

Make sure you have Jest installed in your project. You can install it using npm or yarn:

```sh
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run the tests using:

```sh
npx jest
# or
yarn jest
```

This will execute all the test cases defined in your Jest file.