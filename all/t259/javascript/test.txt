Certainly! Here’s the equivalent Jest test suite for the given Python unittest class. I’ll ensure that the functionality and logic of the tests are maintained, and I’ll document any necessary changes due to language differences between Python and JavaScript.

### Python Code:
```python
import unittest

class TestIsCompliantFourDigit(unittest.TestCase):
    def test_positive_four_digit_number(self):
        # Tests a standard positive four-digit number
        self.assertTrue(is_compliant_four_digit(1234))

    def test_boundary_values(self):
        # Tests the boundary values of the range
        self.assertTrue(is_compliant_four_digit(1000))
        self.assertTrue(is_compliant_four_digit(9999))

    def test_negative_four_digit_number(self):
        # Tests a negative four-digit number
        self.assertFalse(is_compliant_four_digit(-1234))

    def test_out_of_range_number(self):
        # Tests numbers that are out of the four-digit range
        self.assertFalse(is_compliant_four_digit(999))
        self.assertFalse(is_compliant_four_digit(10000))
```

### Equivalent Jest Test Suite:
```javascript
const isCompliantFourDigit = require('./isCompliantFourDigit'); // Import the function to be tested

describe('isCompliantFourDigit', () => {
    describe('test positive four-digit number', () => {
        it('should return true for a standard positive four-digit number', () => {
            expect(isCompliantFourDigit(1234)).toBe(true);
        });
    });

    describe('test boundary values', () => {
        it('should return true for the lower boundary value', () => {
            expect(isCompliantFourDigit(1000)).toBe(true);
        });

        it('should return true for the upper boundary value', () => {
            expect(isCompliantFourDigit(9999)).toBe(true);
        });
    });

    describe('test negative four-digit number', () => {
        it('should return false for a negative four-digit number', () => {
            expect(isCompliantFourDigit(-1234)).toBe(false);
        });
    });

    describe('test out-of-range numbers', () => {
        it('should return false for a number below the range', () => {
            expect(isCompliantFourDigit(999)).toBe(false);
        });

        it('should return false for a number above the range', () => {
            expect(isCompliantFourDigit(10000)).toBe(false);
        });
    });
});
```

### Explanation:
1. **Importing the Function**:
   - In Python, the function `is_compliant_four_digit` is assumed to be defined elsewhere. In JavaScript, we import the function using `require` or `import` depending on the module system used.

2. **Test Structure**:
   - The `unittest.TestCase` class is replaced with Jest’s `describe` blocks.
   - Each test method in the Python class is converted to an `it` block within the corresponding `describe` block.

3. **Assertions**:
   - The Python `assertTrue` and `assertFalse` methods are replaced with Jest’s `expect` combined with `toBe` matchers.
   - `expect(isCompliantFourDigit(value)).toBe(true)` checks if the function returns `true`.
   - `expect(isCompliantFourDigit(value)).toBe(false)` checks if the function returns `false`.

4. **Documentation**:
   - The comments in the Python code are translated into descriptive strings for the `describe` and `it` blocks to provide clear context for each test case.

This Jest test suite should maintain the same functionality and logic as the original Python unittest class.