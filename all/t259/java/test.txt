Certainly! Below is the Java equivalent of the provided Python unittest test class, converted into a JUnit test class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It will use JUnit annotations and assertion methods to ensure the functionality and logic of the tests are preserved.

### Java Code:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Test cases for the isCompliantFourDigit method.
 */
public class Tester {

    /**
     * Tests a standard positive four-digit number.
     */
    @Test
    public void testPositiveFourDigitNumber() {
        // Tests a standard positive four-digit number
        assertTrue("1234 should be a compliant four-digit number", isCompliantFourDigit(1234));
    }

    /**
     * Tests the boundary values of the range.
     */
    @Test
    public void testBoundaryValues() {
        // Tests the boundary values of the range
        assertTrue("1000 should be a compliant four-digit number", isCompliantFourDigit(1000));
        assertTrue("9999 should be a compliant four-digit number", isCompliantFourDigit(9999));
    }

    /**
     * Tests a negative four-digit number.
     */
    @Test
    public void testNegativeFourDigitNumber() {
        // Tests a negative four-digit number
        assertFalse("-1234 should not be a compliant four-digit number", isCompliantFourDigit(-1234));
    }

    /**
     * Tests numbers that are out of the four-digit range.
     */
    @Test
    public void testOutOfRangeNumber() {
        // Tests numbers that are out of the four-digit range
        assertFalse("999 should not be a compliant four-digit number", isCompliantFourDigit(999));
        assertFalse("10000 should not be a compliant four-digit number", isCompliantFourDigit(10000));
    }
}
```

### Explanation:
- **Package Declaration**: `package org.real.temp;` sets the package name for the Java class.
- **Import Statements**: Import the necessary JUnit classes (`@Test` and `assertTrue`, `assertFalse` from `org.junit.Assert`).
- **Class Definition**: `public class Tester` defines the test class.
- **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.
- **Assertion Methods**: `assertTrue` and `assertFalse` are used to assert the expected outcomes of the tests.
- **Method Names**: The method names are adjusted to follow Java naming conventions (camelCase).

### Example Usage:
To run these tests, you would typically use a build tool like Maven or Gradle with the JUnit plugin configured. Hereâ€™s an example of how you might set up a simple Maven project:

#### `pom.xml` (Maven Configuration):

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.real.temp</groupId>
    <artifactId>test-project</artifactId>
    <version>1.0-SNAPSHOT</version>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
            </plugin>
        </plugins>
    </build>
</project>
```

You can then run the tests using the command:

```sh
mvn test
```

This setup ensures that the tests are executed and the results are displayed.