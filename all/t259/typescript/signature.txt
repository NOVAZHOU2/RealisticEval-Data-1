Certainly! Here is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Determines whether the given number is a compliant four-digit number.
 * Compliance is defined as the number being between 1000 and 9999, inclusive.
 * 
 * @param number - The number to check.
 * @returns {boolean} - True if the number is a compliant four-digit number, False otherwise.
 */
function isCompliantFourDigit(number: number): boolean {
    // Ensures the function only processes integers
    if (!Number.isInteger(number)) {
        return false;
    }

    // Check if the number is strictly between 1000 and 9999
    return number >= 1000 && number <= 9999;
}
```

### Explanation:
1. **Function Definition**:
   - The function name `is_compliant_four_digit` is converted to `isCompliantFourDigit` to follow TypeScript naming conventions.
   - The parameter `number` is explicitly typed as `number`.
   - The return type `bool` is translated to `boolean`.

2. **JSDoc Documentation**:
   - The Python docstring is converted to JSDoc-style comments using `/** */`.
   - The `Args` section is translated to `@param`, and the `Returns` section is translated to `@returns`.

3. **Type Checking**:
   - The check `if not isinstance(number, int)` is replaced with `if (!Number.isInteger(number))` to ensure the input is an integer.

4. **Range Check**:
   - The range check `1000 <= number <= 9999` is translated to `number >= 1000 && number <= 9999`.

This TypeScript function preserves the original functionality and structure of the Python function, with appropriate type annotations and documentation.