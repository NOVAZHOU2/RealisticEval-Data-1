Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved:

1. **Import Jest Assertions**
2. **Define the Test Class**
3. **Map Python Assertions to Jest Assertions**

Hereâ€™s the TypeScript code:

```typescript
import { isCompliantFourDigit } from './path-to-your-function'; // Import the function you want to test

describe('isCompliantFourDigit', () => {
    it('should return true for a standard positive four-digit number', () => {
        expect(isCompliantFourDigit(1234)).toBe(true);
    });

    it('should return true for boundary values of the range', () => {
        expect(isCompliantFourDigit(1000)).toBe(true);
        expect(isCompliantFourDigit(9999)).toBe(true);
    });

    it('should return false for a negative four-digit number', () => {
        expect(isCompliantFourDigit(-1234)).toBe(false);
    });

    it('should return false for numbers that are out of the four-digit range', () => {
        expect(isCompliantFourDigit(999)).toBe(false);
        expect(isCompliantFourDigit(10000)).toBe(false);
    });
});
```

### Explanation:
1. **Importing the Function**:
   - Import the `isCompliantFourDigit` function from the file where it is defined.

2. **Test Suite**:
   - Use `describe` to group the tests under a single suite named `isCompliantFourDigit`.

3. **Test Cases**:
   - Each test case is defined using `it` and includes a descriptive message.
   - Use `expect` with the appropriate Jest assertion method (`toBe` in this case) to verify the expected behavior.

### Mapping Python Assertions to Jest Assertions:
- `assertTrue` is mapped to `expect(...).toBe(true)`.
- `assertFalse` is mapped to `expect(...).toBe(false)`.

### Example File Structure:
Assuming your `isCompliantFourDigit` function is defined in a separate file, such as `isCompliantFourDigit.ts`:

#### `isCompliantFourDigit.ts`
```typescript
export function isCompliantFourDigit(number: number): boolean {
    if (!Number.isInteger(number)) {
        return false;
    }
    return number >= 1000 && number <= 9999;
}
```

#### `testIsCompliantFourDigit.ts`
```typescript
import { isCompliantFourDigit } from './isCompliantFourDigit';

describe('isCompliantFourDigit', () => {
    it('should return true for a standard positive four-digit number', () => {
        expect(isCompliantFourDigit(1234)).toBe(true);
    });

    it('should return true for boundary values of the range', () => {
        expect(isCompliantFourDigit(1000)).toBe(true);
        expect(isCompliantFourDigit(9999)).toBe(true);
    });

    it('should return false for a negative four-digit number', () => {
        expect(isCompliantFourDigit(-1234)).toBe(false);
    });

    it('should return false for numbers that are out of the four-digit range', () => {
        expect(isCompliantFourDigit(999)).toBe(false);
        expect(isCompliantFourDigit(10000)).toBe(false);
    });
});
```

This setup ensures that the tests are structured and behave equivalently to the original Python unittests, leveraging Jest's powerful assertion capabilities.