Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Code:
```python
import unittest


class TestBinaryTree(unittest.TestCase):
    def setUp(self):
        """Setup basic tree structure for testing."""
        # Tree structure:
        #      1
        #     / \
        #    2   3
        #   / \
        #  4   5
        self.tree = BinaryTree(TreeNode(1))
        self.tree.root.left = TreeNode(2, TreeNode(4), TreeNode(5))
        self.tree.root.right = TreeNode(3)

    def test_preorder_traversal(self):
        """Test preorder traversal."""
        result = self.tree.preorder_traversal(self.tree.root)
        self.assertEqual(result, [1, 2, 4, 5, 3])

    def test_inorder_traversal(self):
        """Test inorder traversal."""
        result = self.tree.inorder_traversal(self.tree.root)
        self.assertEqual(result, [4, 2, 5, 1, 3])

    def test_postorder_traversal(self):
        """Test postorder traversal."""
        result = self.tree.postorder_traversal(self.tree.root)
        self.assertEqual(result, [4, 5, 2, 3, 1])

    def test_empty_tree(self):
        """Test traversals on an empty tree."""
        empty_tree = BinaryTree()
        self.assertEqual(empty_tree.preorder_traversal(empty_tree.root), [])
        self.assertEqual(empty_tree.inorder_traversal(empty_tree.root), [])
        self.assertEqual(empty_tree.postorder_traversal(empty_tree.root), [])

    def test_single_node_tree(self):
        """Test all traversals on a tree with only one node."""
        single_node_tree = BinaryTree(TreeNode(10))
        self.assertEqual(single_node_tree.preorder_traversal(single_node_tree.root), [10])
        self.assertEqual(single_node_tree.inorder_traversal(single_node_tree.root), [10])
        self.assertEqual(single_node_tree.postorder_traversal(single_node_tree.root), [10])
```

### Equivalent Jest Test Suite:
```javascript
const { BinaryTree, TreeNode } = require('./binaryTree'); // Assuming these classes are defined in 'binaryTree.js'

describe('BinaryTree', () => {
    beforeEach(() => {
        // Setup basic tree structure for testing.
        // Tree structure:
        //      1
        //     / \
        //    2   3
        //   / \
        //  4   5
        this.tree = new BinaryTree(new TreeNode(1));
        this.tree.root.left = new TreeNode(2, new TreeNode(4), new TreeNode(5));
        this.tree.root.right = new TreeNode(3);

        this.emptyTree = new BinaryTree();
        this.singleNodeTree = new BinaryTree(new TreeNode(10));
    });

    describe('preorderTraversal', () => {
        it('should correctly perform preorder traversal', () => {
            const result = this.tree.preorderTraversal(this.tree.root);
            expect(result).toEqual([1, 2, 4, 5, 3]);
        });
    });

    describe('inorderTraversal', () => {
        it('should correctly perform inorder traversal', () => {
            const result = this.tree.inorderTraversal(this.tree.root);
            expect(result).toEqual([4, 2, 5, 1, 3]);
        });
    });

    describe('postorderTraversal', () => {
        it('should correctly perform postorder traversal', () => {
            const result = this.tree.postorderTraversal(this.tree.root);
            expect(result).toEqual([4, 5, 2, 3, 1]);
        });
    });

    describe('empty tree', () => {
        it('should handle an empty tree correctly', () => {
            expect(this.emptyTree.preorderTraversal(this.emptyTree.root)).toEqual([]);
            expect(this.emptyTree.inorderTraversal(this.emptyTree.root)).toEqual([]);
            expect(this.emptyTree.postorderTraversal(this.emptyTree.root)).toEqual([]);
        });
    });

    describe('single node tree', () => {
        it('should handle a single node tree correctly', () => {
            expect(this.singleNodeTree.preorderTraversal(this.singleNodeTree.root)).toEqual([10]);
            expect(this.singleNodeTree.inorderTraversal(this.singleNodeTree.root)).toEqual([10]);
            expect(this.singleNodeTree.postorderTraversal(this.singleNodeTree.root)).toEqual([10]);
        });
    });
});
```

### Explanation:
1. **Setup (`beforeEach`):**
   - The `beforeEach` hook sets up the basic tree structure for testing.
   - It also initializes an empty tree and a single-node tree for additional tests.

2. **Test Cases:**
   - Each test case is defined within a `describe` block to group related tests.
   - The `it` blocks contain the actual test cases with assertions using `expect`.

3. **Assertions:**
   - The `expect` function is used to assert the expected results of the traversals.
   - The `toEqual` matcher is used to check if the arrays match exactly.

4. **Imports:**
   - The `BinaryTree` and `TreeNode` classes are assumed to be defined in a separate file (`binaryTree.js`).

This ensures that the Jest test suite maintains the same functionality and logic as the original Python unittest class.