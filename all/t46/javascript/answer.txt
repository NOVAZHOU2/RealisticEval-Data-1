Sure! Below is the JavaScript equivalent of your Python code:

```javascript
// Define the TreeNode class
class TreeNode {
    /**
     * Binary tree node
     * @param {number} [value=0] - The value of the node.
     * @param {TreeNode} [left=null] - The left child node.
     * @param {TreeNode} [right=null] - The right child node.
     */
    constructor(value = 0, left = null, right = null) {
        this.value = value;
        this.left = left;
        this.right = right;
    }
}

// Define the BinaryTree class
class BinaryTree {
    /**
     * Binary tree
     * @param {TreeNode} [root=null] - The root node of the binary tree.
     */
    constructor(root = null) {
        this.root = root;
    }

    /**
     * Preorder traversal of the binary tree
     * @param {TreeNode} node - The current node being visited.
     * @param {Array} [result=[]] - The array to store the traversal result.
     * @returns {Array} - The traversal result.
     */
    preorderTraversal(node, result = []) {
        if (node !== null) {
            result.push(node.value);
            this.preorderTraversal(node.left, result);
            this.preorderTraversal(node.right, result);
        }
        return result;
    }

    /**
     * Inorder traversal of the binary tree
     * @param {TreeNode} node - The current node being visited.
     * @param {Array} [result=[]] - The array to store the traversal result.
     * @returns {Array} - The traversal result.
     */
    inorderTraversal(node, result = []) {
        if (node !== null) {
            this.inorderTraversal(node.left, result);
            result.push(node.value);
            this.inorderTraversal(node.right, result);
        }
        return result;
    }

    /**
     * Postorder traversal of the binary tree
     * @param {TreeNode} node - The current node being visited.
     * @param {Array} [result=[]] - The array to store the traversal result.
     * @returns {Array} - The traversal result.
     */
    postorderTraversal(node, result = []) {
        if (node !== null) {
            this.postorderTraversal(node.left, result);
            this.postorderTraversal(node.right, result);
            result.push(node.value);
        }
        return result;
    }
}
```

This JavaScript code defines two classes: `TreeNode` and `BinaryTree`. Each class has methods for preorder, inorder, and postorder traversals. The `TreeNode` class represents individual nodes in the binary tree, while the `BinaryTree` class manages the overall structure of the tree and provides methods to traverse it.