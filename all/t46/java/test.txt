Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest test class. The Java test class is placed in the package `org.real.temp` and named `Tester`. It includes appropriate JUnit annotations and assertion methods to ensure the functionality and logic of the tests are preserved.

### Java Code

```java
package org.real.temp;

import org.junit.Before;
import org.junit.Test;
import java.util.List;
import static org.junit.Assert.assertEquals;

/**
 * Test class for BinaryTree operations.
 */
public class Tester {

    private BinaryTree tree;
    private BinaryTree emptyTree;
    private BinaryTree singleNodeTree;

    @Before
    public void setUp() {
        // Tree structure:
        //      1
        //     / \
        //    2   3
        //   / \
        //  4   5
        tree = new BinaryTree(new TreeNode(1));
        tree.root.left = new TreeNode(2, new TreeNode(4), new TreeNode(5));
        tree.root.right = new TreeNode(3);

        emptyTree = new BinaryTree();

        singleNodeTree = new BinaryTree(new TreeNode(10));
    }

    @Test
    public void testPreorderTraversal() {
        // Test preorder traversal
        List<Integer> result = tree.preorderTraversal(tree.root);
        assertEquals("[1, 2, 4, 5, 3]", result.toString());
    }

    @Test
    public void testInorderTraversal() {
        // Test inorder traversal
        List<Integer> result = tree.inorderTraversal(tree.root);
        assertEquals("[4, 2, 5, 1, 3]", result.toString());
    }

    @Test
    public void testPostorderTraversal() {
        // Test postorder traversal
        List<Integer> result = tree.postorderTraversal(tree.root);
        assertEquals("[4, 5, 2, 3, 1]", result.toString());
    }

    @Test
    public void testEmptyTree() {
        // Test traversals on an empty tree
        assertEquals("[]", emptyTree.preorderTraversal(emptyTree.root).toString());
        assertEquals("[]", emptyTree.inorderTraversal(emptyTree.root).toString());
        assertEquals("[]", emptyTree.postorderTraversal(emptyTree.root).toString());
    }

    @Test
    public void testSingleNodeTree() {
        // Test all traversals on a tree with only one node
        assertEquals("[10]", singleNodeTree.preorderTraversal(singleNodeTree.root).toString());
        assertEquals("[10]", singleNodeTree.inorderTraversal(singleNodeTree.root).toString());
        assertEquals("[10]", singleNodeTree.postorderTraversal(singleNodeTree.root).toString());
    }
}
```

### Explanation:
1. **JUnit Annotations**:
   - `@Before`: Used to set up the test environment before each test method is executed.
   - `@Test`: Used to mark methods as test cases.

2. **JUnit Assertions**:
   - `assertEquals`: Used to assert that the expected and actual values match.

3. **Test Methods**:
   - `setUp`: Initializes the test environment by setting up the tree structures.
   - `testPreorderTraversal`, `testInorderTraversal`, `testPostorderTraversal`: Test the respective traversal methods.
   - `testEmptyTree`: Tests the traversal methods on an empty tree.
   - `testSingleNodeTree`: Tests the traversal methods on a tree with a single node.

4. **Tree Structure**:
   - The tree structure is set up in the `setUp` method.
   - The `tree`, `emptyTree`, and `singleNodeTree` instances are initialized accordingly.

5. **Assertions**:
   - The assertions compare the expected results with the actual results obtained from the traversal methods.

This Java test class closely mirrors the functionality and structure of the original Python unittest test class while adhering to JUnit conventions and Java syntax.