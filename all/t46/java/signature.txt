Sure, here is the equivalent Java code with the same structure and comments:

```java
/**
 * Binary tree node
 */
class TreeNode {
    int value;
    TreeNode left;
    TreeNode right;

    /**
     * Constructor for TreeNode
     *
     * @param value The value of the node
     * @param left  The left child node
     * @param right The right child node
     */
    public TreeNode(int value, TreeNode left, TreeNode right) {
        this.value = value;
        this.left = left;
        this.right = right;
    }

    // Default constructor
    public TreeNode() {
        this(0, null, null);
    }
}

/**
 * Binary Tree
 */
class BinaryTree {
    TreeNode root;

    /**
     * Constructor for BinaryTree
     *
     * @param root The root node of the binary tree
     */
    public BinaryTree(TreeNode root) {
        this.root = root;
    }

    /**
     * Pre-order traversal of the binary tree
     *
     * @param node The current node being visited
     * @param result The list to store the traversal result
     */
    public void preorderTraversal(TreeNode node, List<Integer> result) {
        if (node == null) return;
        result.add(node.value);
        preorderTraversal(node.left, result);
        preorderTraversal(node.right, result);
    }

    /**
     * In-order traversal of the binary tree
     *
     * @param node The current node being visited
     * @param result The list to store the traversal result
     */
    public void inorderTraversal(TreeNode node, List<Integer> result) {
        if (node == null) return;
        inorderTraversal(node.left, result);
        result.add(node.value);
        inorderTraversal(node.right, result);
    }

    /**
     * Post-order traversal of the binary tree
     *
     * @param node The current node being visited
     * @param result The list to store the traversal result
     */
    public void postorderTraversal(TreeNode node, List<Integer> result) {
        if (node == null) return;
        postorderTraversal(node.left, result);
        postorderTraversal(node.right, result);
        result.add(node.value);
    }
}
```

### Explanation:
1. **TreeNode Class**:
   - A `TreeNode` class represents a node in the binary tree.
   - It has three fields: `value`, `left`, and `right`.
   - There is a parameterized constructor to initialize these fields and a default constructor that initializes the values to their defaults.

2. **BinaryTree Class**:
   - A `BinaryTree` class represents the binary tree itself.
   - It has one field: `root`, which is the root node of the binary tree.
   - There is a constructor to initialize the `root`.
   - Three methods (`preorderTraversal`, `inorderTraversal`, and `postorderTraversal`) perform the respective traversals of the binary tree. Each method takes a `TreeNode` and a `List<Integer>` to store the traversal results.

3. **Comments**:
   - Comments have been added above each class and method to describe their purpose and functionality.

This Java code maintains the structure and logic of your original Python code while adhering to Java syntax and conventions.