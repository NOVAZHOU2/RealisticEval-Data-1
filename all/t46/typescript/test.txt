Sure! Below is the equivalent TypeScript test case using Jest for the provided Python unittest test class.

First, let's define the `TreeNode` and `BinaryTree` classes in TypeScript:

```typescript
class TreeNode {
    value: number;
    left: TreeNode | null;
    right: TreeNode | null;

    constructor(value: number = 0, left: TreeNode | null = null, right: TreeNode | null = null) {
        this.value = value;
        this.left = left;
        this.right = right;
    }
}

class BinaryTree {
    root: TreeNode | null;

    constructor(root: TreeNode | null = null) {
        this.root = root;
    }

    preorderTraversal(node: TreeNode | null, result: number[] = []): number[] {
        if (node === null) return result;
        result.push(node.value);
        result = this.preorderTraversal(node.left, result);
        result = this.preorderTraversal(node.right, result);
        return result;
    }

    inorderTraversal(node: TreeNode | null, result: number[] = []): number[] {
        if (node === null) return result;
        result = this.inorderTraversal(node.left, result);
        result.push(node.value);
        result = this.inorderTraversal(node.right, result);
        return result;
    }

    postorderTraversal(node: TreeNode | null, result: number[] = []): number[] {
        if (node === null) return result;
        result = this.postorderTraversal(node.left, result);
        result = this.postorderTraversal(node.right, result);
        result.push(node.value);
        return result;
    }
}
```

Now, let's write the Jest test cases for these classes:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('TreeNode', () => {
    it('should create an instance of TreeNode with default values', () => {
        const node = new TreeNode();
        expect(node.value).toBe(0);
        expect(node.left).toBeNull();
        expect(node.right).toBeNull();
    });

    it('should create an instance of TreeNode with custom values', () => {
        const node = new TreeNode(5, new TreeNode(3), new TreeNode(7));
        expect(node.value).toBe(5);
        expect(node.left?.value).toBe(3);
        expect(node.right?.value).toBe(7);
    });
});

describe('BinaryTree', () => {
    it('should create an instance of BinaryTree with default root', () => {
        const tree = new BinaryTree();
        expect(tree.root).toBeNull();
    });

    it('should create an instance of BinaryTree with custom root', () => {
        const root = new TreeNode(1, new TreeNode(2), new TreeNode(3));
        const tree = new BinaryTree(root);
        expect(tree.root?.value).toBe(1);
        expect(tree.root?.left?.value).toBe(2);
        expect(tree.root?.right?.value).toBe(3);
    });

    it('should perform preorder traversal correctly', () => {
        const root = new TreeNode(1, new TreeNode(2, new TreeNode(4), new TreeNode(5)), new TreeNode(3, new TreeNode(6), new TreeNode(7)));
        const tree = new BinaryTree(root);
        const result = tree.preorderTraversal(root);
        expect(result).toEqual([1, 2, 4, 5, 3, 6, 7]);
    });

    it('should perform inorder traversal correctly', () => {
        const root = new TreeNode(1, new TreeNode(2, new TreeNode(4), new TreeNode(5)), new TreeNode(3, new TreeNode(6), new TreeNode(7)));
        const tree = new BinaryTree(root);
        const result = tree.inorderTraversal(root);
        expect(result).toEqual([4, 2, 5, 1, 6, 3, 7]);
    });

    it('should perform postorder traversal correctly', () => {
        const root = new TreeNode(1, new TreeNode(2, new TreeNode(4), new TreeNode(5)), new TreeNode(3, new TreeNode(6), new TreeNode(7)));
        const tree = new BinaryTree(root);
        const result = tree.postorderTraversal(root);
        expect(result).toEqual([4, 5, 2, 6, 7, 3, 1]);
    });
});
```

This TypeScript code defines the `TreeNode` and `BinaryTree` classes and includes Jest test cases to verify their functionality. The test cases cover the creation of instances, traversal methods, and ensure that the methods behave as expected.