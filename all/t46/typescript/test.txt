Certainly! Here is the equivalent TypeScript code using Jest for testing the `BinaryTree` class. We will convert the Python unittest test class into a Jest test suite, ensuring that the functionality and logic of the tests are preserved.

### TypeScript Code with Jest Tests

First, we need to define the `TreeNode` and `BinaryTree` classes in TypeScript:

```typescript
class TreeNode {
    value: number;
    left: TreeNode | null;
    right: TreeNode | null;

    constructor(value: number = 0, left: TreeNode | null = null, right: TreeNode | null = null) {
        this.value = value;
        this.left = left;
        this.right = right;
    }
}

class BinaryTree {
    root: TreeNode | null;

    constructor(root: TreeNode | null = null) {
        this.root = root;
    }

    preorderTraversal(node: TreeNode | null, result?: number[]): number[] {
        if (result === undefined) {
            result = [];
        }
        if (node !== null) {
            result.push(node.value);
            this.preorderTraversal(node.left, result);
            this.preorderTraversal(node.right, result);
        }
        return result;
    }

    inorderTraversal(node: TreeNode | null, result?: number[]): number[] {
        if (result === undefined) {
            result = [];
        }
        if (node !== null) {
            this.inorderTraversal(node.left, result);
            result.push(node.value);
            this.inorderTraversal(node.right, result);
        }
        return result;
    }

    postorderTraversal(node: TreeNode | null, result?: number[]): number[] {
        if (result === undefined) {
            result = [];
        }
        if (node !== null) {
            this.postorderTraversal(node.left, result);
            this.postorderTraversal(node.right, result);
            result.push(node.value);
        }
        return result;
    }
}
```

Next, we will write the Jest test suite:

```typescript
import { describe, it, expect } from '@jest/globals';
import { BinaryTree, TreeNode } from './BinaryTree'; // Assuming the BinaryTree and TreeNode classes are in a separate file

describe('BinaryTree', () => {
    let tree: BinaryTree;

    beforeEach(() => {
        // Setup basic tree structure for testing.
        // Tree structure:
        //      1
        //     / \
        //    2   3
        //   / \
        //  4   5
        tree = new BinaryTree(new TreeNode(1));
        tree.root.left = new TreeNode(2, new TreeNode(4), new TreeNode(5));
        tree.root.right = new TreeNode(3);
    });

    describe('preorderTraversal', () => {
        it('should perform preorder traversal correctly', () => {
            const result = tree.preorderTraversal(tree.root);
            expect(result).toEqual([1, 2, 4, 5, 3]);
        });
    });

    describe('inorderTraversal', () => {
        it('should perform inorder traversal correctly', () => {
            const result = tree.inorderTraversal(tree.root);
            expect(result).toEqual([4, 2, 5, 1, 3]);
        });
    });

    describe('postorderTraversal', () => {
        it('should perform postorder traversal correctly', () => {
            const result = tree.postorderTraversal(tree.root);
            expect(result).toEqual([4, 5, 2, 3, 1]);
        });
    });

    describe('empty tree', () => {
        it('should handle an empty tree correctly', () => {
            const emptyTree = new BinaryTree();
            expect(emptyTree.preorderTraversal(emptyTree.root)).toEqual([]);
            expect(emptyTree.inorderTraversal(emptyTree.root)).toEqual([]);
            expect(emptyTree.postorderTraversal(emptyTree.root)).toEqual([]);
        });
    });

    describe('single node tree', () => {
        it('should handle a single node tree correctly', () => {
            const singleNodeTree = new BinaryTree(new TreeNode(10));
            expect(singleNodeTree.preorderTraversal(singleNodeTree.root)).toEqual([10]);
            expect(singleNodeTree.inorderTraversal(singleNodeTree.root)).toEqual([10]);
            expect(singleNodeTree.postorderTraversal(singleNodeTree.root)).toEqual([10]);
        });
    });
});
```

### Explanation:
1. **TreeNode and BinaryTree Classes**:
   - The `TreeNode` and `BinaryTree` classes are defined with appropriate properties and methods.

2. **Jest Test Suite**:
   - The Jest test suite uses `describe` blocks to group related tests.
   - `beforeEach` is used to set up the tree structure before each test.
   - Each test case uses `it` to define a specific test scenario.
   - `expect` is used to assert the expected outcomes of the tests.

3. **Type Annotations**:
   - Type annotations are used throughout the code to ensure type safety.

4. **Documentation Comments**:
   - The test cases include descriptive comments to explain the purpose of each test.

This TypeScript code with Jest tests preserves the original functionality and logic of the Python unittest tests while adapting them to the Jest testing framework.