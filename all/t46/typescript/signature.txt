Certainly! Here is the equivalent TypeScript code for the provided Python code, including appropriate JSDoc-style comments and type annotations:

```typescript
/**
 * Represents a binary tree node.
 */
class TreeNode {
    value: number;
    left: TreeNode | null;
    right: TreeNode | null;

    /**
     * Constructs a new TreeNode.
     * @param value The value of the node.
     * @param left The left child of the node.
     * @param right The right child of the node.
     */
    constructor(value: number = 0, left: TreeNode | null = null, right: TreeNode | null = null) {
        this.value = value;
        this.left = left;
        this.right = right;
    }
}

/**
 * Represents a binary tree.
 */
class BinaryTree {
    root: TreeNode | null;

    /**
     * Constructs a new BinaryTree.
     * @param root The root node of the binary tree.
     */
    constructor(root: TreeNode | null = null) {
        this.root = root;
    }

    /**
     * Performs a recursive preorder traversal.
     * @param node The current node being traversed.
     * @param result The array to store the traversal results.
     * @returns An array containing the preorder traversal results.
     */
    preorderTraversal(node: TreeNode | null, result?: number[]): number[] {
        if (result === undefined) {
            result = [];
        }
        if (node !== null) {
            result.push(node.value);
            this.preorderTraversal(node.left, result);
            this.preorderTraversal(node.right, result);
        }
        return result;
    }

    /**
     * Performs a recursive inorder traversal.
     * @param node The current node being traversed.
     * @param result The array to store the traversal results.
     * @returns An array containing the inorder traversal results.
     */
    inorderTraversal(node: TreeNode | null, result?: number[]): number[] {
        if (result === undefined) {
            result = [];
        }
        if (node !== null) {
            this.inorderTraversal(node.left, result);
            result.push(node.value);
            this.inorderTraversal(node.right, result);
        }
        return result;
    }

    /**
     * Performs a recursive postorder traversal.
     * @param node The current node being traversed.
     * @param result The array to store the traversal results.
     * @returns An array containing the postorder traversal results.
     */
    postorderTraversal(node: TreeNode | null, result?: number[]): number[] {
        if (result === undefined) {
            result = [];
        }
        if (node !== null) {
            this.postorderTraversal(node.left, result);
            this.postorderTraversal(node.right, result);
            result.push(node.value);
        }
        return result;
    }
}
```

### Explanation:
1. **TreeNode Class**:
   - The `TreeNode` class is defined with properties `value`, `left`, and `right`.
   - The constructor initializes these properties with default values.

2. **BinaryTree Class**:
   - The `BinaryTree` class has a property `root` which is initialized in the constructor.
   - Methods like `preorderTraversal`, `inorderTraversal`, and `postorderTraversal` are implemented recursively.
   - Each method includes JSDoc comments to describe the purpose and parameters.

3. **JSDoc Comments**:
   - JSDoc comments are used to provide detailed documentation for each class and method, including parameter descriptions and return types.

4. **Type Annotations**:
   - Type annotations are used for function parameters and return values to ensure type safety.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and providing clear documentation through JSDoc comments.