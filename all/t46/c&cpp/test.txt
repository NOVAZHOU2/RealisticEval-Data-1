Sure! Below is the equivalent C++ test case using Catch2 for the provided Python unittest test class. Note that I've assumed some basic behavior for the `TreeNode` and `BinaryTree` classes based on their names and methods.

```cpp
#include <catch2/catch.hpp>
#include "binary_tree.h" // Assume you have a header file for BinaryTree

// Define TreeNode and BinaryTree classes here or include them from your project
class TreeNode {
public:
    int value;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val = 0, TreeNode* l = nullptr, TreeNode* r = nullptr)
        : value(val), left(l), right(r) {}
};

class BinaryTree {
private:
    TreeNode* root;

public:
    BinaryTree(TreeNode* r = nullptr) : root(r) {}

    void preorderTraversal(TreeNode* node, std::vector<int>& result) const {
        if (node != nullptr) {
            result.push_back(node->value);
            preorderTraversal(node->left, result);
            preorderTraversal(node->right, result);
        }
    }

    void inorderTraversal(TreeNode* node, std::vector<int>& result) const {
        if (node != nullptr) {
            inorderTraversal(node->left, result);
            result.push_back(node->value);
            inorderTraversal(node->right, result);
        }
    }

    void postorderTraversal(TreeNode* node, std::vector<int>& result) const {
        if (node != nullptr) {
            postorderTraversal(node->left, result);
            postorderTraversal(node->right, result);
            result.push_back(node->value);
        }
    }
};

TEST_CASE("Preorder Traversal", "[tree]") {
    // Create a simple binary tree:     1
    //                               / \
    //                              2   3
    //                             /
    //                            4
    TreeNode* node4 = new TreeNode(4);
    TreeNode* node2 = new TreeNode(2, node4);
    TreeNode* node3 = new TreeNode(3);
    TreeNode* root = new TreeNode(1, node2, node3);

    BinaryTree bt(root);
    std::vector<int> result;
    bt.preorderTraversal(root, result);

    REQUIRE(result == std::vector<int>{1, 2, 4, 3});

    // Clean up memory
    delete node4;
    delete node2;
    delete node3;
    delete root;
}

TEST_CASE("Inorder Traversal", "[tree]") {
    // Same tree structure as above
    TreeNode* node4 = new TreeNode(4);
    TreeNode* node2 = new TreeNode(2, node4);
    TreeNode* node3 = new TreeNode(3);
    TreeNode* root = new TreeNode(1, node2, node3);

    BinaryTree bt(root);
    std::vector<int> result;
    bt.inorderTraversal(root, result);

    REQUIRE(result == std::vector<int>{4, 2, 1, 3});

    // Clean up memory
    delete node4;
    delete node2;
    delete node3;
    delete root;
}

TEST_CASE("Postorder Traversal", "[tree]") {
    // Same tree structure as above
    TreeNode* node4 = new TreeNode(4);
    TreeNode* node2 = new TreeNode(2, node4);
    TreeNode* node3 = new TreeNode(3);
    TreeNode* root = new TreeNode(1, node2, node3);

    BinaryTree bt(root);
    std::vector<int> result;
    bt.postorderTraversal(root, result);

    REQUIRE(result == std::vector<int>{4, 2, 3, 1});

    // Clean up memory
    delete node4;
    delete node2;
    delete node3;
    delete root;
}
```

### Explanation:
1. **TreeNode Class**: A simple binary tree node with a constructor.
2. **BinaryTree Class**: Contains methods for preorder, inorder, and postorder traversal.
3. **Catch2 Tests**: Three tests cases for each traversal method. Each test creates a simple binary tree, performs the traversal, and checks the result using `REQUIRE`.

Make sure you have Catch2 installed and properly set up in your development environment. If you're using a build system like CMake, you can add Catch2 as a subdirectory or fetch it via vcpkg.