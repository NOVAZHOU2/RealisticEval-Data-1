Here is the C++ version of your Python code with the same structure and comments:

```cpp
#include <vector>

// Define a struct for tree nodes
struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;

    // Constructor for TreeNode
    TreeNode(int val = 0, TreeNode* l = nullptr, TreeNode* r = nullptr) : value(val), left(l), right(r) {}
};

// Define a class for Binary Tree
class BinaryTree {
private:
    TreeNode* root;  // Root of the binary tree

public:
    // Constructor for BinaryTree
    BinaryTree(TreeNode* r = nullptr) : root(r) {}

    // Preorder traversal function
    void preorderTraversal(TreeNode* node, std::vector<int>& result);

    // Inorder traversal function
    void inorderTraversal(TreeNode* node, std::vector<int>& result);

    // Postorder traversal function
    void postorderTraversal(TreeNode* node, std::vector<int>& result);
};
```

This C++ code defines two classes: `TreeNode` and `BinaryTree`. The `TreeNode` class represents each node in the binary tree and includes a constructor that initializes the node's value and pointers to its left and right children. The `BinaryTree` class contains methods for performing preorder, inorder, and postorder traversals on the binary tree. Note that in C++, we use a vector (`std::vector`) instead of a list or array for storing the traversal results.