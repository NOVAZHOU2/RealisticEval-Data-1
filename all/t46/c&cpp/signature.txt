Sure! Here is the equivalent C++ code for the provided Python code, including comments and type translations:

```cpp
#include <vector>

// TreeNode class definition
class TreeNode {
public:
    // Binary tree node
    int value;
    TreeNode* left;
    TreeNode* right;

    // Constructor for TreeNode
    TreeNode(int val = 0, TreeNode* l = nullptr, TreeNode* r = nullptr) 
        : value(val), left(l), right(r) {}
};

// BinaryTree class definition
class BinaryTree {
public:
    // Binary tree
    TreeNode* root;

    // Constructor for BinaryTree
    BinaryTree(TreeNode* r = nullptr) : root(r) {}

    // Recursive Preorder Traversal
    std::vector<int> preorder_traversal(TreeNode* node, std::vector<int>* result = nullptr) {
        // Initialize result vector if it is null
        if (result == nullptr) {
            result = new std::vector<int>();
        }
        if (node != nullptr) {
            result->push_back(node->value);
            preorder_traversal(node->left, result);
            preorder_traversal(node->right, result);
        }
        return *result;
    }

    // Recursive Inorder Traversal
    std::vector<int> inorder_traversal(TreeNode* node, std::vector<int>* result = nullptr) {
        // Initialize result vector if it is null
        if (result == nullptr) {
            result = new std::vector<int>();
        }
        if (node != nullptr) {
            inorder_traversal(node->left, result);
            result->push_back(node->value);
            inorder_traversal(node->right, result);
        }
        return *result;
    }

    // Recursive Postorder Traversal
    std::vector<int> postorder_traversal(TreeNode* node, std::vector<int>* result = nullptr) {
        // Initialize result vector if it is null
        if (result == nullptr) {
            result = new std::vector<int>();
        }
        if (node != nullptr) {
            postorder_traversal(node->left, result);
            postorder_traversal(node->right, result);
            result->push_back(node->value);
        }
        return *result;
    }
};
```

### Explanation:
1. **TreeNode Class**:
   - The `TreeNode` class has three members: `value`, `left`, and `right`.
   - The constructor initializes these members with default values.

2. **BinaryTree Class**:
   - The `BinaryTree` class has a single member `root`.
   - The constructor initializes the `root` with a given `TreeNode` or `nullptr`.

3. **Traversal Methods**:
   - **Recursive Traversals** (`preorder_traversal`, `inorder_traversal`, `postorder_traversal`):
     - These methods use recursion to traverse the tree and store the node values in a vector.
     - They handle the case where `result` is `nullptr` by creating a new vector.
     - Comments are added to explain the purpose and behavior of each method.

### Comments and Documentation:
- Single-line comments are used to describe the purpose of classes and methods.
- Multi-line comments are used to provide more detailed explanations within methods.

This C++ code preserves the original purpose and structure of the Python code, translating it appropriately into C++ syntax and conventions.