Certainly! Below is the equivalent Java version of the provided Python code, including the method signature, documentation, and functionality.

```java
import java.util.List;
import java.util.ArrayList;

public class TypeHintParser {

    /**
     * Parses a Python type hint string and returns the individual types as a list of strings.
     *
     * @param typeHintString The type hint string to parse.
     * @return A list of strings representing the individual types parsed from the type hint string.
     *
     * Example:
     * <pre>
     *     String typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
     *     List<String> parsedTypes = parseTypeHint(typeHint);
     *     System.out.println(parsedTypes);
     *     // Output: [Union, typing.List, str, typing.Dict, str, int, Tuple, int, str, Optional, int]
     * </pre>
     */
    public static List<String> parseTypeHint(String typeHintString) {
        List<String> parsedTypes = new ArrayList<>();
        
        // Splitting the string by commas and spaces to get individual types
        String[] parts = typeHintString.replaceAll("[\\[\\]]", "").split(", |\\|");
        
        for (String part : parts) {
            parsedTypes.add(part.trim());
        }
        
        return parsedTypes;
    }
    
    // Example usage
    public static void main(String[] args) {
        String typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
        List<String> parsedTypes = parseTypeHint(typeHint);
        System.out.println(parsedTypes);
    }
}
```

### Explanation:
1. **Class Definition**: The class `TypeHintParser` encapsulates the functionality.
2. **Method Signature**: The method `parseTypeHint` is defined with the appropriate Java type (`List<String>`).
3. **Javadoc Comments**: The method includes detailed Javadoc comments describing the purpose, parameters, return value, and an example.
4. **Implementation**: The method uses Java's `ArrayList` to store the parsed types and splits the input string using regular expressions and string manipulation methods to achieve the desired parsing behavior.
5. **Example Usage**: The `main` method demonstrates how to use the `parseTypeHint` method.