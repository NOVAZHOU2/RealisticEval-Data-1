Sure! Below is the equivalent Java code signature with the same functionality and comments:

```java
import java.util.ArrayList;
import java.util.List;

/**
 * Parses a Python type hint string and returns the individual types as a list of strings.
 *
 * @param typeHintString the type hint string to parse
 * @return the individual types parsed from the type hint string
 *
 * Example:
 * String typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
 * List<String> parsedTypes = parseTypeHint(typeHint);
 * System.out.println(parsedTypes);
 * // Output: [Union, typing.List, str, typing.Dict, str, int, Tuple, int, str, Optional, int]
 */
public class TypeHintParser {

    public static List<String> parseTypeHint(String typeHintString) {
        List<String> parsedTypes = new ArrayList<>();
        // Implement parsing logic here
        return parsedTypes;
    }

    public static void main(String[] args) {
        String typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
        List<String> parsedTypes = parseTypeHint(typeHint);
        System.out.println(parsedTypes);
        // Expected output: [Union, typing.List, str, typing.Dict, str, int, Tuple, int, str, Optional, int]
    }
}
```

Please note that the actual implementation of the `parseTypeHint` method will depend on your specific requirements and the complexity of the type hint string you expect to handle. The provided example simply initializes an empty list, which you can expand upon based on your needs.