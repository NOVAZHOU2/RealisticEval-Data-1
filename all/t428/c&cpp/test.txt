To convert the given Python unittest test class into an equivalent test class using Catch2 in C++, we need to first understand the functionality of the `parse_type_hint` function and then implement it in C++. After that, we can write the corresponding tests using Catch2 assertions.

Here's the C++ implementation of the `parse_type_hint` function and the test class using Catch2:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <vector>
#include <sstream>

// C++ implementation of the parse_type_hint function
std::vector<std::string> parse_type_hint(const std::string& type_hint_string) {
    std::vector<std::string> parsed_types;
    std::istringstream iss(type_hint_string);
    std::string token;

    while (iss >> token) {
        // Remove '<' and '>' characters
        token.erase(std::remove(token.begin(), token.end(), '<'), token.end());
        token.erase(std::remove(token.begin(), token.end(), '>'), token.end());

        // Remove ',' characters
        token.erase(std::remove(token.begin(), token.end(), ','), token.end());

        // Add the cleaned token to the result vector
        parsed_types.push_back(token);
    }

    return parsed_types;
}

TEST_CASE("parse_type_hint function", "[parse_type_hint]") {
    SECTION("Parse simple type hint") {
        std::string type_hint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
        auto parsed_types = parse_type_hint(type_hint);

        REQUIRE(parsed_types.size() == 11);
        REQUIRE(parsed_types[0] == "Union");
        REQUIRE(parsed_types[1] == "typing.List");
        REQUIRE(parsed_types[2] == "str");
        REQUIRE(parsed_types[3] == "typing.Dict");
        REQUIRE(parsed_types[4] == "str");
        REQUIRE(parsed_types[5] == "int");
        REQUIRE(parsed_types[6] == "Tuple");
        REQUIRE(parsed_types[7] == "int");
        REQUIRE(parsed_types[8] == "str");
        REQUIRE(parsed_types[9] == "Optional");
        REQUIRE(parsed_types[10] == "int");
    }
}
```

### Explanation:
1. **Function Implementation**: 
   - The `parse_type_hint` function takes a type hint string and parses it by removing `<`, `>`, and `,` characters, then splits the string into individual tokens.
   - Each token is added to a vector of strings.

2. **Test Class**:
   - The `TEST_CASE` macro defines a test case named "parse_type_hint function" with the tag `[parse_type_hint]`.
   - The `SECTION` macro defines a specific section of the test case, which tests the parsing of a simple type hint.
   - `REQUIRE` macros are used to assert that the parsed types match the expected values.

This conversion preserves the functionality and logic of the original Python tests in a C++ environment using the Catch2 testing framework.