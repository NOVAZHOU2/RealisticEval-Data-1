Here's the C++ code signature for the given Python function:

```cpp
#include <string>
#include <vector>

/**
 * Parses a Python type hint string and returns the individual types as a vector of strings.
 *
 * @param type_hint_string The type hint string to parse.
 * @return A vector containing the individual types parsed from the type hint string.
 *
 * Example:
 * std::string type_hint = "Union<typing.List<std::string>, typing.Dict<std::string, int>, std::tuple<int, std::string>, std::optional<int>>";
 * auto parsed_types = parse_type_hint(type_hint);
 * // Output: {"Union", "typing.List", "std::string", "typing.Dict", "std::string", "int", "std::tuple", "int",
 * //           "std::string", "std::optional", "int"}
 */
std::vector<std::string> parse_type_hint(const std::string& type_hint_string);
```

This C++ code signature follows the same structure as the original Python function, including the function name, parameters, return type, and docstring. Note that in C++, we use `std::vector` instead of Python's `List`, and `std::string` instead of Python's `str`. The example usage in the docstring is also provided to illustrate how the function can be used.