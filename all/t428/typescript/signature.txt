Here is your Python function converted into TypeScript with the same comments:

```typescript
import { Node, isArrayTypeNode, isLiteralTypeNode, isObjectTypeNode, isOptionalTypeNode, isUnionTypeNode } from 'typescript';

/**
 * Parses a TypeScript type hint node and returns the individual types as an array of strings.
 *
 * @param typeHintNode - The type hint node to parse.
 * @returns An array containing the individual types parsed from the type hint node.
 */
function parseTypeHint(typeHintNode: Node): string[] {
    const types: string[] = [];

    if (isUnionTypeNode(typeHintNode)) {
        for (const type of typeHintNode.types) {
            types.push(parseTypeHint(type).join(','));
        }
    } else if (isArrayTypeNode(typeHintNode)) {
        types.push(`Array<${parseTypeHint(typeHintNode.elementType).join(',')}>`);
    } else if (isObjectTypeNode(typeHintNode)) {
        for (const property of typeHintNode.properties) {
            types.push(`${property.name.getText()}: ${parseTypeHint(property.type).join(',')}`);
        }
    } else if (isOptionalTypeNode(typeHintNode)) {
        types.push(`Optional<${parseTypeHint(typeHintNode.type).join(',')}>`);
    } else if (isLiteralTypeNode(typeHintNode)) {
        types.push(`"${typeHintNode.literal.text}"`);
    }

    return types;
}
```

Note that I've used `ts-morph` library to work with TypeScript AST nodes in TypeScript itself. If you want to use it, install it via npm or yarn:

```bash
npm install ts-morph
```
or

```bash
yarn add ts-morph
```

This script will convert a given TypeScript type hint node into a flat list of its component types. This includes handling union types, array types, object types, optional types, and literal types.