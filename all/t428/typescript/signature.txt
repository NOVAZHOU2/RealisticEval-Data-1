Here's the equivalent TypeScript code for the given Python function, including the documentation comments using the JSDoc style:

```typescript
/**
 * Parses a Python type hint string and returns the individual types as an array of strings.
 * 
 * @param typeHintString - The type hint string to parse.
 * @returns The individual types parsed from the type hint string.
 * 
 * Example:
 * ```typescript
 * const typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
 * const parsedTypes = parseTypeHint(typeHint);
 * console.log(parsedTypes);
 * // Output: ['Union', 'typing.List', 'str', 'typing.Dict', 'str', 'int', 'Tuple', 'int', 'str', 'Optional', 'int']
 * ```
 */
function parseTypeHint(typeHintString: string): string[] {
    // Assuming a similar parsing logic here as the actual implementation would require a custom parser.
    return typeHintString.replace(/\s/g, '').split(/[\[\],]/).filter(Boolean);
}

// Example usage
const typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
const parsedTypes = parseTypeHint(typeHint);
console.log(parsedTypes);
```

### Explanation

1. **Function Signature**: The Python function `parse_type_hint` is converted to a TypeScript function `parseTypeHint` with the same parameters and return type.
2. **Documentation Comments**: The Python docstring is converted to TypeScript JSDoc comments.
3. **Implementation**: The Python code uses `replace` and `split` methods to parse the string. The TypeScript version uses a similar approach but may need adjustments based on the exact parsing logic required.
4. **Example Usage**: The example usage provided in the Python docstring is translated to TypeScript.

This conversion preserves the functionality and structure of the original Python code while adapting it to TypeScript conventions.