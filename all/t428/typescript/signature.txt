Certainly! Here is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation:

```typescript
import * as ast from 'python-abstract-syntax-tree'; // Assuming a library that provides similar functionality to Python's ast module

/**
 * Parses a Python type hint string and returns the individual types as a list of strings.
 *
 * @param typeHintString - The type hint string to parse.
 * @returns The individual types parsed from the type hint string.
 *
 * Example:
 * const typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
 * const parsedTypes = parseTypeHint(typeHint);
 * console.log(parsedTypes);
 * // Output: ['Union', 'typing.List', 'str', 'typing.Dict', 'str', 'int', 'Tuple', 'int', 'str', 'Optional', 'int']
 */
function parseTypeHint(typeHintString: string): string[] {
    // Create a source function definition with the type hint string
    const source = `def f() -> ${typeHintString}: pass`;

    // Parse the source code into an Abstract Syntax Tree (AST)
    const tree = ast.parse(source);

    // List to store the parsed type strings
    const typeStrings: string[] = [];

    function processNode(node: any, qualNames?: string[]): void {
        // Initialize qualified names if not provided
        qualNames = qualNames || [];

        if (node.type === 'Name') {
            // Add simple type names (e.g., str, int)
            typeStrings.push(qualNames.concat(node.id).reverse().join('.'));
        } else if (node.type === 'Subscript') {
            // Process the value and slice of a subscript (e.g., List[str])
            processNode(node.value, qualNames);
            processNode(node.slice, qualNames);
        } else if (node.type === 'Attribute') {
            // Process attributes (e.g., typing.List)
            processNode(node.value, qualNames.concat(node.attr));
        } else if (node.type === 'Tuple') {
            // Process each element in a tuple type hint
            node.elts.forEach((elt: any) => processNode(elt, qualNames));
        }
    }

    // Extract the return annotation from the parsed tree
    const returnsAnnotation = tree.body[0].returns;
    // Process the return annotation to fill typeStrings
    processNode(returnsAnnotation);

    return typeStrings;
}

// Example usage
const typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
const parsedTypes = parseTypeHint(typeHint);
console.log(parsedTypes);
```

### Explanation:
1. **Import Statement**: 
   ```typescript
   import * as ast from 'python-abstract-syntax-tree';
   ```
   This assumes a library that provides similar functionality to Python's `ast` module.

2. **Function Definition**:
   ```typescript
   function parseTypeHint(typeHintString: string): string[] {
       // Function body remains the same
   }
   ```
   The function signature is defined with TypeScript types: `typeHintString` is a `string`, and the return type is `string[]`.

3. **JSDoc Documentation**:
   ```typescript
   /**
    * Parses a Python type hint string and returns the individual types as a list of strings.
    *
    * @param typeHintString - The type hint string to parse.
    * @returns The individual types parsed from the type hint string.
    *
    * Example:
    * const typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
    * const parsedTypes = parseTypeHint(typeHint);
    * console.log(parsedTypes);
    * // Output: ['Union', 'typing.List', 'str', 'typing.Dict', 'str', 'int', 'Tuple', 'int', 'str', 'Optional', 'int']
    */
   ```
   The Python docstring is converted to JSDoc comments, providing clear documentation for the function.

4. **Internal Function `processNode`**:
   ```typescript
   function processNode(node: any, qualNames?: string[]): void {
       // Function body remains the same
   }
   ```
   The internal helper function `processNode` is defined with TypeScript types.

5. **Example Usage**:
   ```typescript
   const typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
   const parsedTypes = parseTypeHint(typeHint);
   console.log(parsedTypes);
   ```
   An example usage demonstrates how to call the function and log the results.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's type system and documentation conventions.