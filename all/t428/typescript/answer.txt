Here's the equivalent TypeScript code:

```typescript
import { isString } from 'lodash';

function parseTypeHint(typeHintString: string): string[] {
  /**
   * Parses a TypeScript type hint string and returns the individual types as an array of strings.
   *
   * @param typeHintString - The type hint string to parse.
   * @returns An array containing the individual types parsed from the type hint string.
   */
  
  const types: string[] = [];
  let currentType = '';
  let inBrackets = false;
  let inQuotes = false;

  for (let i = 0; i < typeHintString.length; i++) {
    const char = typeHintString[i];

    if (char === '[' || char === '(') {
      inBrackets = true;
    } else if (char === ']' || char === ')') {
      inBrackets = false;
    } else if (char === '"' || char === "'") {
      inQuotes = !inQuotes;
    }

    if (!inQuotes && !inBrackets) {
      if (char === ',') {
        types.push(currentType.trim());
        currentType = '';
      } else if (isString(char)) {
        currentType += char;
      }
    }
  }

  // Push last type
  if (currentType !== '') {
    types.push(currentType.trim());
  }

  return types;
}
```

This function works similarly to the Python version. It iterates over each character in the input string, keeping track of whether it is inside brackets or quotes, and adds each type to the `types` array when a comma is encountered outside of brackets or quotes. Note that this implementation assumes that the input string is well-formed and does not handle edge cases such as nested brackets or quoted commas within types.