Hereâ€™s the equivalent TypeScript code that maintains the functionality, structure, and logic of the provided Python code:

```typescript
import * as ast from 'python-abstract-syntax-tree'; // Assuming a library that provides similar functionality to Python's ast module

function parseTypeHint(typeHintString: string): string[] {
    /**
     * Parses a Python type hint string and returns the individual types as a list of strings.
     *
     * @param typeHintString - The type hint string to parse.
     * @returns The individual types parsed from the type hint string.
     *
     * Example:
     * const typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
     * const parsedTypes = parseTypeHint(typeHint);
     * console.log(parsedTypes);
     * // Output: ['Union', 'typing.List', 'str', 'typing.Dict', 'str', 'int', 'Tuple', 'int', 'str', 'Optional', 'int']
     */
    
    // Create a source function definition with the type hint string
    const source = `def f() -> ${typeHintString}: pass`;
    
    // Parse the source code into an Abstract Syntax Tree (AST)
    const tree = ast.parse(source);

    // List to store the parsed type strings
    const typeStrings: string[] = [];

    function processNode(node: any, qualNames?: string[]): void {
        // Initialize qualified names if not provided
        qualNames = qualNames || [];

        if (node.type === 'Name') {
            // Add simple type names (e.g., str, int)
            typeStrings.push(qualNames.concat(node.id).reverse().join('.'));
        } else if (node.type === 'Subscript') {
            // Process the value and slice of a subscript (e.g., List[str])
            processNode(node.value, qualNames);
            processNode(node.slice, qualNames);
        } else if (node.type === 'Attribute') {
            // Process attributes (e.g., typing.List)
            processNode(node.value, qualNames.concat(node.attr));
        } else if (node.type === 'Tuple') {
            // Process each element in a tuple type hint
            node.elts.forEach((elt: any) => processNode(elt, qualNames));
        }
    }

    // Extract the return annotation from the parsed tree
    const returnsAnnotation = tree.body[0].returns;
    // Process the return annotation to fill typeStrings
    processNode(returnsAnnotation);

    return typeStrings;
}

// Example usage
const typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
const parsedTypes = parseTypeHint(typeHint);
console.log(parsedTypes);
```

### Notes:
1. **Python AST Library**: In TypeScript, you need a library that provides similar functionality to Python's `ast` module. For this example, I've assumed a library named `python-abstract-syntax-tree`.
2. **Node Types**: The node types (`Name`, `Subscript`, `Attribute`, `Tuple`) are assumed to be available through the AST library.
3. **Example Usage**: The example usage demonstrates how to call the `parseTypeHint` function and log the results.

This TypeScript code closely mirrors the Python code's functionality and logic, adapting it to TypeScript's syntax and type system.