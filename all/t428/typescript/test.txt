Sure! Below is the equivalent TypeScript test case using Jest for the provided Python `unittest` test class:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('parseTypeHint function', () => {
  it('should parse a type hint string correctly', () => {
    const typeHint = "Union[typing.List[str], typing.Dict[str, int], Tuple[int, str], Optional[int]]";
    const expectedOutput = ['Union', 'typing.List', 'str', 'typing.Dict', 'str', 'int', 'Tuple', 'int', 'str', 'Optional', 'int'];

    // Assuming parseTypeHint function is implemented in your TypeScript code
    const result = parseTypeHint(typeHint);

    expect(result).toEqual(expectedOutput);
  });
});

// Implement the parseTypeHint function here or import it if already defined
function parseTypeHint(typeHintString: string): string[] {
  // Your implementation goes here
}
```

### Explanation:
1. **Imports**: We import `describe`, `it`, and `expect` from `@jest/globals`. These are used to define the test suite and individual tests.
2. **Describe Block**: We create a `describe` block with the name `'parseTypeHint function'` to group related tests.
3. **It Block**: Inside the `describe` block, we create an `it` block with the description `'should parse a type hint string correctly'`.
4. **Expect Assertion**: We use `expect` to assert that the result of `parseTypeHint` matches the expected output.
5. **Function Implementation**: The `parseTypeHint` function is assumed to be implemented in your TypeScript code. If not, you need to implement it or import it from another file.

Make sure to replace the placeholder implementation of `parseTypeHint` with your actual logic.