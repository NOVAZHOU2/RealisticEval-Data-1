Sure, here is the equivalent TypeScript code signature with the same comments:

```typescript
interface FileClassification {
    [key: string]: string[];
}

/**
 * Classify an array of file names according to their file extensions.
 *
 * @param fileNames - List of file names (strings).
 * @returns An object where keys are file extensions and values are arrays of file names.
 */
function classifyFilesByExtension(fileNames: string[]): FileClassification {
    const classifiedFiles: FileClassification = {};

    for (const fileName of fileNames) {
        const extension = fileName.split('.').pop();
        if (extension) {
            if (!classifiedFiles[extension]) {
                classifiedFiles[extension] = [];
            }
            classifiedFiles[extension].push(fileName);
        }
    }

    return classifiedFiles;
}
```

### Explanation:
1. **Interface Definition**: `FileClassification` is defined to represent the structure of the output dictionary, where each key is a file extension and each value is an array of file names with that extension.
2. **Function Signature**:
   - The function `classifyFilesByExtension` takes an array of strings (`fileNames`) and returns an object conforming to the `FileClassification` interface.
3. **Implementation**:
   - A loop iterates over each file name in the input array.
   - The file extension is extracted using `split('.')` and `.pop()`.
   - If the extension exists in the `classifiedFiles` object, the file name is added to the corresponding array; otherwise, a new array is created and initialized with the file name.

This TypeScript code maintains the same functionality and structure as the original Python code while adhering to TypeScript's type system.