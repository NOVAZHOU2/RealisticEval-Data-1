Certainly! Hereâ€™s the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Classify an array of file names according to their file extensions.
 *
 * @param fileNames - List of file names (strings).
 * @returns Dictionary with file extensions as keys and lists of file names as values.
 */
function classifyFilesByExtension(fileNames: string[]): {[key: string]: string[]} {
    const classifiedFiles: {[key: string]: string[]} = {};

    for (const file of fileNames) {
        // Split the file name into name and extension
        const parts = file.split('.');
        const name = parts.slice(0, -1).join('.');
        const ext = parts[parts.length - 1] || null;

        // If there is an extension, classify it
        if (ext) {
            const normalizedExt = ext.toLowerCase();  // Normalize the extension to lowercase
            if (!classifiedFiles[normalizedExt]) {
                classifiedFiles[normalizedExt] = [];
            }
            classifiedFiles[normalizedExt].push(file);
        }
    }

    return classifiedFiles;
}
```

### Explanation:
1. **Function Signature**:
   - The function `classifyFilesByExtension` is defined with a parameter `fileNames` of type `string[]` and returns an object with string keys and arrays of strings as values (`{[key: string]: string[]}`).

2. **JSDoc Documentation**:
   - The JSDoc-style documentation comments are used to describe the function, its parameters, and its return type.

3. **File Name Splitting**:
   - The file name is split into its components using `split('.')`. The name and extension are reconstructed using `slice` and `join`.

4. **Normalization**:
   - The file extension is converted to lowercase using `toLowerCase()` to ensure consistency.

5. **Dictionary Initialization**:
   - The dictionary `classifiedFiles` is initialized as an object with string keys and array values.

6. **Looping Through Files**:
   - We iterate over each file name in the input array using a `for...of` loop.

7. **Appending to Dictionary**:
   - If the extension exists, it is added to the dictionary under the appropriate key.

This TypeScript code preserves the original functionality and structure of the Python code, while adapting to TypeScript's syntax and type system.