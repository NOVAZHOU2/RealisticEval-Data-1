Here is how you can convert your Python unittest test class to TypeScript using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

function classifyFilesByExtension(fileNames: string[]): {[key: string]: string[]} {
  // Your function implementation here...
}

describe('classifyFilesByExtension', () => {
  it('should return an empty object for an empty array', () => {
    const result = classifyFilesByExtension([]);
    expect(result).toEqual({});
  });

  it('should group files by extension', () => {
    const result = classifyFilesByExtension(['file1.txt', 'file2.jpg', 'file3.txt']);
    expect(result).toEqual({
      '.txt': ['file1.txt', 'file3.txt'],
      '.jpg': ['file2.jpg']
    });
  });
});
```

In the above TypeScript code, we have used `@jest/globals` to access Jest's global functions like `describe`, `it`, and `expect`. We also typed the input parameter `fileNames` as an array of strings and the return value as an object where each key is a string representing a file extension and each value is an array of strings representing file names that end with the corresponding file extension. The actual implementation of `classifyFilesByExtension` function is left blank for you to fill in based on your logic.