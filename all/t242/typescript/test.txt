Certainly! Hereâ€™s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest test cases will be converted to Jest test cases, and the necessary type annotations and Jest assertions will be included.

### TypeScript Code

First, let's define the `classifyFilesByExtension` function in TypeScript:

```typescript
function classifyFilesByExtension(fileNames: string[]): {[key: string]: string[]} {
    const classifiedFiles: {[key: string]: string[]} = {};

    for (const file of fileNames) {
        // Split the file name into name and extension
        const parts = file.split('.');
        const name = parts.slice(0, -1).join('.');
        const ext = parts[parts.length - 1] || null;

        // If there is an extension, classify it
        if (ext) {
            const normalizedExt = ext.toLowerCase();  // Normalize the extension to lowercase
            if (!classifiedFiles[normalizedExt]) {
                classifiedFiles[normalizedExt] = [];
            }
            classifiedFiles[normalizedExt].push(file);
        }
    }

    return classifiedFiles;
}
```

### Jest Test Class

Now, let's define the Jest test class:

```typescript
import { classifyFilesByExtension } from './path/to/classifyFilesByExtension'; // Adjust the import path as needed

describe('classifyFilesByExtension', () => {
    it('should correctly classify files with multiple file types', () => {
        const files = [
            "document.docx",
            "photo.jpeg",
            "report.pdf",
            "image.png",
            "archive.zip"
        ];
        const expectedResult = {
            'docx': ['document.docx'],
            'jpeg': ['photo.jpeg'],
            'pdf': ['report.pdf'],
            'png': ['image.png'],
            'zip': ['archive.zip']
        };
        expect(classifyFilesByExtension(files)).toEqual(expectedResult);
    });

    it('should handle an empty list of file names', () => {
        const files = [];
        const expectedResult = {};
        expect(classifyFilesByExtension(files)).toEqual(expectedResult);
    });

    it('should correctly classify files with the same extension', () => {
        const files = [
            "file1.txt",
            "file2.txt",
            "file3.txt",
        ];
        const expectedResult = {
            'txt': [
                "file1.txt",
                "file2.txt",
                "file3.txt",
            ]
        };
        expect(classifyFilesByExtension(files)).toEqual(expectedResult);
    });

    it('should correctly classify files with multiple dots in their names', () => {
        const files = [
            "my.document.docx",
            "report.final.pdf",
            "photo.album.jpeg",
            "archive.backup.zip"
        ];
        const expectedResult = {
            'docx': ['my.document.docx'],
            'pdf': ['report.final.pdf'],
            'jpeg': ['photo.album.jpeg'],
            'zip': ['archive.backup.zip']
        };
        expect(classifyFilesByExtension(files)).toEqual(expectedResult);
    });
});
```

### Explanation:
1. **Import Statement**:
   - Import the `classifyFilesByExtension` function from the appropriate module.

2. **Describe Block**:
   - Use the `describe` block to group the test cases under the `classifyFilesByExtension` function.

3. **Test Cases**:
   - Each test case is defined using the `it` block, which describes the test scenario.
   - The `expect` function is used to assert the expected results using Jest's assertion methods like `toEqual`.

4. **Data Structures**:
   - The test data and expected results are structured similarly to the Python test cases.

5. **Assertions**:
   - The `toEqual` method is used to check if the actual result matches the expected result.

This TypeScript code preserves the original functionality and logic of the Python unittest test cases, while adapting to Jest's syntax and assertion methods.