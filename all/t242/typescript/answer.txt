Hereâ€™s the equivalent TypeScript code for the provided Python function, including proper type definitions and adjustments for TypeScript's static type system:

```typescript
function classifyFilesByExtension(fileNames: string[]): {[key: string]: string[]} {
    const classifiedFiles: {[key: string]: string[]} = {};

    for (const file of fileNames) {
        // Split the file name into name and extension
        const parts = file.split('.');
        const name = parts.slice(0, -1).join('.');
        const ext = parts[parts.length - 1] || null;

        // If there is an extension, classify it
        if (ext) {
            const normalizedExt = ext.toLowerCase();  // Normalize the extension to lowercase
            if (!classifiedFiles[normalizedExt]) {
                classifiedFiles[normalizedExt] = [];
            }
            classifiedFiles[normalizedExt].push(file);
        }
    }

    return classifiedFiles;
}
```

### Explanation:
1. **Type Definitions**:
   - The function `classifyFilesByExtension` takes an array of strings (`string[]`) and returns an object with string keys and arrays of strings as values (`{[key: string]: string[]}`). 

2. **File Name Splitting**:
   - In TypeScript, we use `split` to split the file name into its components. Since TypeScript does not have a direct equivalent to Python's `rsplit`, we manually reconstruct the name and extension using `slice` and `join`.

3. **Normalization**:
   - The file extension is converted to lowercase using `toLowerCase()` to ensure consistency.

4. **Dictionary Initialization**:
   - The dictionary `classifiedFiles` is initialized as an object with string keys and array values.

5. **Looping Through Files**:
   - We iterate over each file name in the input array using a `for...of` loop.

6. **Appending to Dictionary**:
   - If the extension exists, it is added to the dictionary under the appropriate key.

This TypeScript code maintains the same functionality and logic as the original Python code, while adapting to TypeScript's syntax and type system.