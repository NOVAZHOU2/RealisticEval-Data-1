Sure, here is the equivalent C++ function signature with comments:

```cpp
#include <vector>
#include <string>
#include <unordered_map>

/**
 * Classify an array of file names according to their file extensions.
 *
 * @param fileNames A vector of strings representing file names.
 * @return An unordered_map where keys are file extensions and values are vectors of file names.
 */
std::unordered_map<std::string, std::vector<std::string>> classifyFilesByExtension(const std::vector<std::string>& fileNames);
```

### Explanation:
- **`#include <vector>`**: Includes the necessary header for using `std::vector`.
- **`#include <string>`**: Includes the necessary header for using `std::string`.
- **`#include <unordered_map>`**: Includes the necessary header for using `std::unordered_map`, which is similar to Python's dictionary in terms of functionality.
- **`std::unordered_map<std::string, std::vector<std::string>>`**: This is the return type, which is a map where each key is a string (file extension) and each value is a vector of strings (file names).
- **`const std::vector<std::string>& fileNames`**: The parameter is a constant reference to a vector of strings, which represents the list of file names.
- **`/** ... */`**: This is the Doxygen-style comment block that provides documentation for the function, just like the Python docstring.