Certainly! Below is the equivalent C++ code for the provided Python function, including the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <string>
#include <cctype>

// Function to classify files by their extensions
/**
 * Classify an array of file names according to their file extensions.
 *
 * @param file_names A vector of file names (strings).
 * @return An unordered_map with file extensions as keys and vectors of file names as values.
 */
std::unordered_map<std::string, std::vector<std::string>> classifyFilesByExtension(const std::vector<std::string>& fileNames) {
    std::unordered_map<std::string, std::vector<std::string>> classifiedFiles;

    for (const auto& file : fileNames) {
        // Find the last dot in the filename
        size_t dotPos = file.find_last_of('.');
        
        // If there is no dot, consider the entire filename as the name and no extension
        if (dotPos == std::string::npos) {
            classifiedFiles["none"].push_back(file);
        } else {
            // Extract the extension
            std::string ext = file.substr(dotPos + 1);

            // Convert the extension to lowercase
            std::transform(ext.begin(), ext.end(), ext.begin(),
                           [](unsigned char c){ return std::tolower(c); });

            // Add the file to the corresponding list
            classifiedFiles[ext].push_back(file);
        }
    }

    return classifiedFiles;
}

// Example usage
int main() {
    std::vector<std::string> fileNames = {"document.txt", "image.jpg", "archive.zip", "script.py", "notes"};

    auto classifiedFiles = classifyFilesByExtension(fileNames);

    // Print the classified files
    for (const auto& pair : classifiedFiles) {
        std::cout << pair.first << ": ";
        for (const auto& file : pair.second) {
            std::cout << file << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Headers**: The code includes necessary headers (`<iostream>`, `<vector>`, `<unordered_map>`, `<string>`, `<cctype>`).
2. **Function Documentation**: The function `classifyFilesByExtension` is documented using C++ style comments.
3. **Function Signature**: The function signature is defined with appropriate C++ types.
4. **Looping Through Files**: A range-based for loop iterates through each file name.
5. **Finding the Extension**: The `find_last_of` method is used to find the position of the last dot in the filename.
6. **Handling No Extension**: If there is no dot, the file is classified under the key `"none"`.
7. **Extracting and Lowercasing the Extension**: The extension is extracted and converted to lowercase using `std::transform`.
8. **Adding Files to the Map**: Each file is added to the corresponding list in the map.
9. **Example Usage**: The `main` function demonstrates how to call the `classifyFilesByExtension` function and print the results.

This conversion preserves the original purpose and structure of the Python code while adapting it to C++ syntax and conventions.