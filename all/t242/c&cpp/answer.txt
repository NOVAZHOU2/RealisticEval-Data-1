Here is the equivalent C++ code for your Python function:

```cpp
#include <vector>
#include <map>
#include <string>

std::map<std::string, std::vector<std::string>> classifyFilesByExtension(const std::vector<std::string>& fileNames) {
    std::map<std::string, std::vector<std::string>> classifiedFiles;

    for (const auto& fileName : fileNames) {
        size_t dotPos = fileName.find_last_of('.');
        if (dotPos != std::string::npos) {
            std::string extension = fileName.substr(dotPos + 1);
            classifiedFiles[extension].push_back(fileName);
        }
    }

    return classifiedFiles;
}
```

This C++ code does exactly the same thing as your Python code. It classifies a vector of strings representing file names into a map where each key is a file extension and the corresponding value is a list of file names that end with that extension.

Note: In C++, we use `std::map` instead of Python's `dict`, and `std::vector` instead of Python's `list`. Also, unlike Python, C++ doesn't have built-in support for optional types or type hinting, so there's no need to specify the types of parameters or return value in the function signature.