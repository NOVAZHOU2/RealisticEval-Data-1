Certainly! Hereâ€™s the equivalent Java code with proper method signature, Javadoc comments, and type conversions:

```java
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

package org.real.temp;

public class Answer {

    /**
     * Classify an array of file names according to their file extensions.
     *
     * @param fileNames List of file names (strings).
     * @return A map with file extensions as keys and lists of file names as values.
     */
    public static Map<String, List<String>> classifyFilesByExtension(String[] fileNames) {
        Map<String, List<String>> classifiedFiles = new HashMap<>();

        for (String file : fileNames) {
            // Split the file name into name and extension
            int lastDotIndex = file.lastIndexOf('.');
            String name = file;
            String ext = null;

            if (lastDotIndex > 0) {
                name = file.substring(0, lastDotIndex);
                ext = file.substring(lastDotIndex + 1).toLowerCase();
            }

            // If there is an extension, classify it
            if (ext != null) {
                List<String> fileList = classifiedFiles.getOrDefault(ext, new ArrayList<>());
                fileList.add(file);
                classifiedFiles.put(ext, fileList);
            }
        }

        return classifiedFiles;
    }

    public static void main(String[] args) {
        // Example usage
        String[] fileNames = {"file1.txt", "file2.TXT", "file3.jpg", "file4.png", "file5"};
        Map<String, List<String>> classifiedFiles = classifyFilesByExtension(fileNames);

        // Print the result
        for (Map.Entry<String, List<String>> entry : classifiedFiles.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }
}
```

### Explanation:
1. **Imports**: Added necessary imports for `HashMap`, `ArrayList`, `List`, and `Map`.
2. **Javadoc Comments**: Translated the Python docstring into Java-style Javadoc comments.
3. **Method Signature**: The method `classifyFilesByExtension` takes an array of strings (`String[]`) and returns a `Map<String, List<String>>`.
4. **File Name Splitting**: Used `lastIndexOf('.')` to find the index of the last dot and then split the file name into name and extension.
5. **Normalization**: Converted the extension to lowercase using `toLowerCase()`.
6. **Map Handling**: Used `getOrDefault` to retrieve or create a new list for each extension.
7. **Main Method**: Provided an example usage of the method and printed the result.

This Java code preserves the original functionality and structure while adhering to Java conventions and syntax.