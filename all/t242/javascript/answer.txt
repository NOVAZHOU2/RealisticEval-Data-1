Sure! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function classifyFilesByExtension(fileNames) {
    /**
     * Classify an array of file names according to their file extensions.
     *
     * @param {string[]} fileNames - List of file names.
     * @returns {Object} - Dictionary with file extensions as keys and lists of file names as values.
     */
    const classifiedFiles = {};

    for (const file of fileNames) {
        // Split the file name into name and extension
        const parts = file.split('.');
        const name = parts.slice(0, -1).join('.');
        const ext = parts[parts.length - 1];

        // If there is an extension, classify it
        if (ext) {
            const normalizedExt = ext.toLowerCase();  // Normalize the extension to lowercase
            if (!classifiedFiles[normalizedExt]) {
                classifiedFiles[normalizedExt] = [];
            }
            classifiedFiles[normalizedExt].push(file);
        }
    }

    return classifiedFiles;
}
```

### Explanation:
1. **Function Definition**: The function `classifyFilesByExtension` takes an array of file names (`fileNames`) as input.
2. **Initialization**: An empty object `classifiedFiles` is initialized to store the classified files.
3. **Looping Through Files**: A `for...of` loop iterates through each file name in the `fileNames` array.
4. **Splitting File Name**: The file name is split using the dot (`.`) separator. If the file has no extension, the `parts` array will contain only one element.
5. **Extracting Name and Extension**: The name and extension are extracted from the `parts` array. If there is no extension, `ext` will be `undefined`.
6. **Normalizing Extension**: The extension is converted to lowercase using `toLowerCase()` to ensure normalization.
7. **Classifying Files**: If the extension exists, it is added to the `classifiedFiles` object or appended to the existing list associated with that extension.
8. **Returning Result**: Finally, the `classifiedFiles` object is returned.

This JavaScript code mirrors the behavior of the original Python code.