Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JavaScript documentation standards using JSDoc format:

```javascript
/**
 * Classify an array of file names according to their file extensions.
 *
 * @param {string[]} fileNames - List of file names (strings).
 * @returns {Object} - Dictionary with file extensions as keys and lists of file names as values.
 */
function classifyFilesByExtension(fileNames) {
    const classifiedFiles = {};

    for (const file of fileNames) {
        // Split the file name into name and extension
        const parts = file.split('.');
        const name = parts.slice(0, -1).join('.');
        const ext = parts[parts.length - 1];

        // If there is an extension, classify it
        if (ext) {
            const normalizedExt = ext.toLowerCase();  // Normalize the extension to lowercase
            if (!classifiedFiles[normalizedExt]) {
                classifiedFiles[normalizedExt] = [];
            }
            classifiedFiles[normalizedExt].push(file);
        }
    }

    return classifiedFiles;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block is placed above the function definition.
   - The `@param` tag is used to describe the parameter `fileNames`.
   - The `@returns` tag is used to describe the return value.

2. **Function Signature**:
   - The function `classifyFilesByExtension` takes an array `fileNames` as input.
   - The function returns an object representing the classified files.

3. **Function Body**:
   - An empty object `classifiedFiles` is initialized to store the classified files.
   - A `for...of` loop iterates through each file name in the `fileNames` array.
   - The file name is split using the dot (`.`) separator.
   - The name and extension are extracted from the `parts` array.
   - If the file has an extension, it is normalized to lowercase and added to the `classifiedFiles` object.

4. **Returning Result**:
   - The `classifiedFiles` object is returned at the end of the function.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JavaScript documentation standards using JSDoc.