Hereâ€™s the equivalent Java code for the provided TypeScript function:

```java
/**
 * Extract the file extension and return it if it exists. If not, an empty string is returned.
 *
 * @param fileName The full name of the file from which to extract the extension.
 * @return The file extension without the dot, or an empty string if no extension is found.
 */
public class FileUtils {
    public static String getFileExtension(String fileName) {
        // Regex to match the portion after the last dot in the filename
        String regex = "(?:\\.([^.]+))?$";
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex);
        java.util.regex.Matcher matcher = pattern.matcher(fileName);

        // Return the captured group (extension) if it exists
        if (matcher.find() && matcher.group(1) != null) {
            return matcher.group(1);
        }

        // Return an empty string if no extension is found
        return "";
    }

    public static void main(String[] args) {
        // Example usage
        String fileName = "example.txt";
        String extension = getFileExtension(fileName);
        System.out.println("File extension: " + extension);
    }
}
```

### Explanation:
- The method `getFileExtension` takes a `String` as input and uses regular expressions to extract the file extension.
- It checks if there's a match and returns the extension if found, or an empty string if not.
- The main method demonstrates how to call the function.