Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and Java conventions:

```java
import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Answer {

    /**
     * Finds the common columns of all CSV files in a directory and returns these column names as a list.
     *
     * @param directoryPath the path to the directory containing CSV files
     * @return a list of common column names
     */
    public static List<String> findCommonColumns(String directoryPath) {
        File directory = new File(directoryPath);
        File[] files = directory.listFiles((dir, name) -> name.toLowerCase().endsWith(".csv"));

        if (files == null || files.length == 0) {
            return new ArrayList<>();
        }

        List<Set<String>> columnSets = new ArrayList<>();

        try {
            for (File file : files) {
                List<String> header = readHeaderFromCsv(file);
                if (header != null && !header.isEmpty()) {
                    columnSets.add(new HashSet<>(header));
                }
            }

            // Use set intersection to find common columns across all CSV files
            if (!columnSets.isEmpty()) {
                Set<String> commonColumns = new HashSet<>(columnSets.get(0));
                for (int i = 1; i < columnSets.size(); i++) {
                    commonColumns.retainAll(columnSets.get(i));
                }
                return new ArrayList<>(commonColumns);
            } else {
                return new ArrayList<>();
            }

        } catch (Exception e) {
            e.printStackTrace();
            return new ArrayList<>();
        }
    }

    /**
     * Reads the header row from a CSV file.
     *
     * @param file the CSV file
     * @return a list of column names
     * @throws Exception if there is an error reading the file
     */
    private static List<String> readHeaderFromCsv(File file) throws Exception {
        try (CSVReader reader = new CSVReader(new java.io.FileReader(file))) {
            String[] header = reader.readNext(); // Read the header row
            if (header != null) {
                return Arrays.asList(header);
            }
        }
        return new ArrayList<>();
    }

    public static void main(String[] args) {
        // Example usage
        List<String> commonCols = findCommonColumns("path/to/directory");
        System.out.println(commonCols);
    }
}
```

### Key Points:
1. **Javadoc Comments**: The Python docstring has been converted into Javadoc comments.
2. **Type Annotations**: Python type annotations (`List`) have been translated to Java types (`List<String>`).
3. **Method Structure**: The method `findCommonColumns` is structured according to Java conventions.
4. **Helper Method**: A helper method `readHeaderFromCsv` is added to handle reading the header from CSV files.
5. **Exception Handling**: Proper exception handling is included to catch any potential errors during file reading.

This Java code preserves the original functionality and structure of the Python code while adhering to Java's conventions and best practices.