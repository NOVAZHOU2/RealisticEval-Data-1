Sure! Here’s the equivalent TypeScript code, including the necessary package imports and adjustments for TypeScript's static typing and idiomatic practices:

First, ensure you have the required dependencies installed. You can install them using npm or yarn:

```sh
npm install csv-parser fs extra-static-methods
```

Or if you prefer `yarn`:

```sh
yarn add csv-parser fs extra-static-methods
```

Now, here’s the TypeScript code:

```typescript
import * as fs from 'fs';
import * as path from 'path';
import { parse } from 'csv-parser';
import { reduce } from 'extra-static-methods';

interface DataFrame {
  [key: string]: string[];
}

function findCommonColumns(directory: string): string[] {
  const dataframes: DataFrame[] = [];

  // Iterate through all files in the specified directory
  fs.readdir(directory, (err, files) => {
    if (err) throw err;

    files.forEach((filename) => {
      if (filename.endsWith('.csv')) {
        const filepath = path.join(directory, filename);

        // Load the CSV file into a DataFrame
        const df: DataFrame = {};
        parse()
          .on('data', (row: any) => {
            Object.keys(row).forEach((key) => {
              if (!df[key]) {
                df[key] = [];
              }
              df[key].push(row[key]);
            });
          })
          .on('end', () => {
            dataframes.push(df);
          });

        fs.createReadStream(filepath).pipe(parse());
      }
    });

    // Use set intersection to find common columns across all DataFrames
    if (dataframes.length > 0) {
      let commonColumns = new Set(Object.keys(dataframes[0]));
      dataframes.slice(1).forEach((df) => {
        commonColumns = reduce(
          commonColumns,
          (acc, key) => (df[key] ? acc : acc.delete(key)),
          commonColumns
        );
      });
      return Array.from(commonColumns);
    } else {
      // Return an empty list if no CSV files are found
      return [];
    }
  });

  // Since the function is asynchronous, we need to return an empty array initially
  return [];
}

// Example usage
const directory = '/path/to/directory';
console.log(findCommonColumns(directory));
```

### Explanation

1. **Imports**: We import the necessary modules (`fs`, `path`, `csv-parser`, and `reduce` from `extra-static-methods`) to handle file operations and CSV parsing.
2. **DataFrame Interface**: We define a generic interface `DataFrame` to represent the structure of the parsed CSV data.
3. **findCommonColumns Function**: This function reads all CSV files in the specified directory, parses them into DataFrames, and finds the common columns among them.
4. **CSV Parsing**: We use `csv-parser` to parse the CSV files and populate the `DataFrame` objects.
5. **Set Intersection**: We use a set intersection approach to find the common columns across all DataFrames.

Note that this function is asynchronous due to the file reading and parsing operations. The initial return value is an empty array, but the actual processing happens asynchronously.