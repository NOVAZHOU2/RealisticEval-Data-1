Certainly! Here’s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included.

### TypeScript Code

First, ensure you have the required dependencies installed:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Add the necessary Jest configuration to your `tsconfig.json` or `jest.config.js`.

### TypeScript Test Class

Here’s the TypeScript code for the test class:

```typescript
import * as fs from 'fs';
import * as path from 'path';
import { findCommonColumns } from './findCommonColumns'; // Assuming findCommonColumns is exported from another file

describe('TestCommonColumns', () => {
  let testDir: string;

  beforeEach(() => {
    // Set up a temporary directory
    testDir = 'test_dir';
    fs.mkdirSync(testDir, { recursive: true });
  });

  afterEach(() => {
    // Remove created files and directory after each test
    const files = fs.readdirSync(testDir);
    files.forEach((filename) => {
      fs.unlinkSync(path.join(testDir, filename));
    });
    fs.rmdirSync(testDir);
  });

  it('should find all the same columns', () => {
    // All CSV files have the same columns
    const data1 = "A,B,C\n1,2,3";
    const data2 = "A,B,C\n4,5,6";
    const data3 = "A,B,C\n7,8,9";
    const filenames = ['file1.csv', 'file2.csv', 'file3.csv'];
    const datas = [data1, data2, data3];

    filenames.forEach((filename, index) => {
      const filepath = path.join(testDir, filename);
      fs.writeFileSync(filepath, datas[index]);
    });

    expect(new Set(findCommonColumns(testDir))).toEqual(new Set(['A', 'B', 'C']));
  });

  it('should find no common columns', () => {
    // No common columns
    const data1 = "A,B,C\n1,2,3";
    const data2 = "D,E,F\n4,5,6";
    const data3 = "G,H,I\n7,8,9";
    const filenames = ['file1.csv', 'file2.csv', 'file3.csv'];
    const datas = [data1, data2, data3];

    filenames.forEach((filename, index) => {
      const filepath = path.join(testDir, filename);
      fs.writeFileSync(filepath, datas[index]);
    });

    expect(findCommonColumns(testDir)).toEqual([]);
  });

  it('should find some common columns', () => {
    // Some common columns
    const data1 = "A,B,C\n1,2,3";
    const data2 = "B,C,D\n4,5,6";
    const data3 = "C,D,E\n7,8,9";
    const filenames = ['file1.csv', 'file2.csv', 'file3.csv'];
    const datas = [data1, data2, data3];

    filenames.forEach((filename, index) => {
      const filepath = path.join(testDir, filename);
      fs.writeFileSync(filepath, datas[index]);
    });

    expect(findCommonColumns(testDir)).toEqual(['C']);
  });

  it('should find mixed common and unique columns', () => {
    // Mixed common and unique columns
    const data1 = "A,B,C\n1,2,3";
    const data2 = "B,C,D\n4,5,6";
    const data3 = "B,C,E\n7,8,9";
    const filenames = ['file1.csv', 'file2.csv', 'file3.csv'];
    const datas = [data1, data2, data3];

    filenames.forEach((filename, index) => {
      const filepath = path.join(testDir, filename);
      fs.writeFileSync(filepath, datas[index]);
    });

    expect(new Set(findCommonColumns(testDir))).toEqual(new Set(['B', 'C']));
  });
});
```

### Explanation

1. **Imports**:
   - `fs` and `path` are imported to handle file operations and path manipulation.
   - `findCommonColumns` is assumed to be imported from another file.

2. **Describe Block**:
   - The `describe` block groups the tests together under a single suite named `TestCommonColumns`.

3. **BeforeEach and AfterEach Hooks**:
   - `beforeEach` sets up the temporary directory before each test.
   - `afterEach` cleans up the temporary directory and files after each test.

4. **Test Cases**:
   - Each `it` block represents a test case.
   - The test cases create CSV files with specific content and then call `findCommonColumns` to verify the expected results.

5. **Assertions**:
   - Jest assertions like `expect` are used to check the results against expected values.

6. **File Operations**:
   - Files are created using `fs.writeFileSync` to write the CSV data.

This TypeScript code preserves the original functionality and structure of the Python unittest class while adapting it to Jest's testing framework.