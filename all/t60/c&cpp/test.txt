Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. The goal is to preserve the functionality and logic of the tests while making necessary adjustments for language differences between Python and C++.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <iostream>
#include <filesystem>
#include <vector>
#include <set>
#include <fstream>
#include <sstream>

// Function to read column names from a CSV file
std::vector<std::string> readCSVColumns(const std::string& filepath) {
    std::ifstream file(filepath);
    std::string line;
    std::getline(file, line); // Read the first line which contains headers
    std::istringstream ss(line);
    std::string column;
    std::vector<std::string> columns;

    while (std::getline(ss, column, ',')) {
        columns.push_back(column);
    }

    return columns;
}

// Function to find common columns of all CSV files in a directory
std::vector<std::string> findCommonColumns(const std::string& directory) {
    std::vector<std::set<std::string>> columnSets;

    // Iterate through all files in the specified directory
    for (const auto& entry : std::filesystem::directory_iterator(directory)) {
        if (entry.path().extension() == ".csv") {
            std::vector<std::string> columns = readCSVColumns(entry.path().string());
            columnSets.emplace_back(columns.begin(), columns.end());
        }
    }

    if (!columnSets.empty()) {
        std::set<std::string> commonColumns = columnSets[0];
        for (size_t i = 1; i < columnSets.size(); ++i) {
            std::set<std::string> tempSet;
            std::set_intersection(commonColumns.begin(), commonColumns.end(),
                                  columnSets[i].begin(), columnSets[i].end(),
                                  std::inserter(tempSet, tempSet.begin()));
            commonColumns = std::move(tempSet);
        }
        return std::vector<std::string>(commonColumns.begin(), commonColumns.end());
    } else {
        return {};
    }
}

TEST_CASE("Test common columns functionality", "[common-columns]") {
    // Set up a temporary directory
    const std::string test_dir = "test_dir";
    std::filesystem::create_directories(test_dir);

    SECTION("All CSV files have the same columns") {
        const std::string data1 = "A,B,C\n1,2,3";
        const std::string data2 = "A,B,C\n4,5,6";
        const std::string data3 = "A,B,C\n7,8,9";
        const std::vector<std::string> filenames = {"file1.csv", "file2.csv", "file3.csv"};
        const std::vector<std::string> datas = {data1, data2, data3};

        for (size_t i = 0; i < filenames.size(); ++i) {
            const std::string filepath = test_dir + "/" + filenames[i];
            std::ofstream file(filepath);
            file << datas[i];
        }

        REQUIRE(findCommonColumns(test_dir) == std::vector<std::string>({"A", "B", "C"}));
    }

    SECTION("No common columns") {
        const std::string data1 = "A,B,C\n1,2,3";
        const std::string data2 = "D,E,F\n4,5,6";
        const std::string data3 = "G,H,I\n7,8,9";
        const std::vector<std::string> filenames = {"file1.csv", "file2.csv", "file3.csv"};
        const std::vector<std::string> datas = {data1, data2, data3};

        for (size_t i = 0; i < filenames.size(); ++i) {
            const std::string filepath = test_dir + "/" + filenames[i];
            std::ofstream file(filepath);
            file << datas[i];
        }

        REQUIRE(findCommonColumns(test_dir).empty());
    }

    SECTION("Some common columns") {
        const std::string data1 = "A,B,C\n1,2,3";
        const std::string data2 = "B,C,D\n4,5,6";
        const std::string data3 = "C,D,E\n7,8,9";
        const std::vector<std::string> filenames = {"file1.csv", "file2.csv", "file3.csv"};
        const std::vector<std::string> datas = {data1, data2, data3};

        for (size_t i = 0; i < filenames.size(); ++i) {
            const std::string filepath = test_dir + "/" + filenames[i];
            std::ofstream file(filepath);
            file << datas[i];
        }

        REQUIRE(findCommonColumns(test_dir) == std::vector<std::string>({"C"}));
    }

    SECTION("Mixed common and unique columns") {
        const std::string data1 = "A,B,C\n1,2,3";
        const std::string data2 = "B,C,D\n4,5,6";
        const std::string data3 = "B,C,E\n7,8,9";
        const std::vector<std::string> filenames = {"file1.csv", "file2.csv", "file3.csv"};
        const std::vector<std::string> datas = {data1, data2, data3};

        for (size_t i = 0; i < filenames.size(); ++i) {
            const std::string filepath = test_dir + "/" + filenames[i];
            std::ofstream file(filepath);
            file << datas[i];
        }

        REQUIRE(findCommonColumns(test_dir) == std::vector<std::string>({"B", "C"}));
    }

    // Clean up the temporary directory
    for (const auto& entry : std::filesystem::directory_iterator(test_dir)) {
        std::filesystem::remove(entry.path());
    }
    std::filesystem::remove_all(test_dir);
}
```

### Explanation:
1. **Setup and Teardown**:
   - The setup and teardown logic is handled within each section using `std::filesystem::create_directories` and `std::filesystem::remove_all`.

2. **Reading CSV Files**:
   - The `readCSVColumns` function reads the first line of a CSV file and extracts the column names.

3. **Finding Common Columns**:
   - The `findCommonColumns` function iterates over all CSV files in the specified directory, reads their column names, and finds the common columns using set intersection.

4. **Testing Sections**:
   - Each `SECTION` in Catch2 corresponds to a test case in the Python `unittest` framework.
   - The `REQUIRE` macro is used for assertions.

5. **File Operations**:
   - Files are created and written to using `std::ofstream`.
   - Files and directories are cleaned up at the end of each test section.

This C++ code preserves the functionality and logic of the original Python tests while adhering to the Catch2 testing framework conventions.