Sure! Below is an example of how you can implement the `find_common_columns` function in C++ using the `<filesystem>` library for handling file paths and directories, and `<fstream>` for reading CSV files.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <set>
#include <string>
#include <filesystem>

namespace fs = std::filesystem;

std::vector<std::string> findCommonColumns(const std::string& directory) {
    if (!fs::exists(directory) || !fs::is_directory(directory)) {
        throw std::invalid_argument("Invalid directory");
    }

    std::set<std::string> commonColumns;
    bool firstFile = true;

    for (const auto& entry : fs::directory_iterator(directory)) {
        if (entry.is_regular_file() && entry.path().extension() == ".csv") {
            std::ifstream file(entry.path());
            if (!file.is_open()) {
                throw std::runtime_error("Failed to open file: " + entry.path().string());
            }

            std::string line;
            if (std::getline(file, line)) { // Read the header line
                std::istringstream iss(line);
                std::string column;
                while (std::getline(iss, column, ',')) {
                    if (firstFile) {
                        commonColumns.insert(column);
                    } else {
                        commonColumns.erase(column);
                    }
                }
            }
            file.close();
        }
    }

    if (firstFile) {
        throw std::runtime_error("No CSV files found in the directory");
    }

    return std::vector<std::string>(commonColumns.begin(), commonColumns.end());
}

int main() {
    try {
        std::string directory = "path/to/your/directory";
        std::vector<std::string> commonColumns = findCommonColumns(directory);

        std::cout << "Common Columns:" << std::endl;
        for (const auto& col : commonColumns) {
            std::cout << col << std::endl;
        }
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Namespace**: The `<filesystem>` library is used for file system operations.
2. **Function**: `findCommonColumns` takes a directory path as input and returns a vector of strings containing the common column names.
3. **Directory Check**: It checks if the provided directory exists and is indeed a directory.
4. **File Iteration**: It iterates over each file in the directory, checking if it's a regular file with a `.csv` extension.
5. **Header Reading**: For each CSV file, it reads the first line (header) and extracts column names.
6. **Set Operations**: It uses a set to keep track of common columns. If it's the first file, it adds all columns to the set. For subsequent files, it removes any columns that do not appear in the current file's header.
7. **Main Function**: Demonstrates how to use the `findCommonColumns` function and prints the common columns.

Make sure to replace `"path/to/your/directory"` with the actual path to your directory containing CSV files.