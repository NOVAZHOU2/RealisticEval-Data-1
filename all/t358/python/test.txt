Hereâ€™s the C++ Catch2 test case converted to a Python unittest format. The code defines a test class within the package org.real.temp and includes various test cases for the sort_names function.
Python unittest Code
python
import unittest
from typing import List

# Assuming the sort_names function is defined in the same module
def sort_names(arr: List[str]) -> List[str]:
    # (Implementation of sort_names goes here)
    pass  # Replace this with the actual implementation

class Tester(unittest.TestCase):
    def test_sort_names(self):
        # Test Case 2: Same numbers, different names
        arr2 = ["Alice10", "Charlie10", "Bob10"]
        expected2 = ["Alice10", "Bob10", "Charlie10"]
        self.assertEqual(sort_names(arr2), expected2)

        # Test Case 3: Mixed case with different names and numbers
        arr3 = ["Alice3", "Bob2", "Charlie3", "Bob1"]
        expected3 = ["Bob1", "Bob2", "Alice3", "Charlie3"]
        self.assertEqual(sort_names(arr3), expected3)

        # Test Case 4: Single element
        arr4 = ["Alice5"]
        expected4 = ["Alice5"]
        self.assertEqual(sort_names(arr4), expected4)

        # Test Case 5: Empty array
        arr5 = []
        expected5 = []
        self.assertEqual(sort_names(arr5), expected5)

if __name__ == '__main__':
    unittest.main()
Explanation:
Imports:
The code imports unittest for the testing framework and List for type hinting.
Function Definition:
A placeholder for the sort_names function is included. You should replace the pass statement with the actual implementation of sort_names.
Test Class:
The Tester class inherits from unittest.TestCase, which provides testing functionality.
The method test_sort_names includes the individual test cases converted from the C++ Catch2 format.
Assertions:
Each test case uses self.assertEqual() to compare the result of sort_names with the expected output.
Main Block:
The block at the end runs the tests when the script is executed directly.
Running the Tests:
You can run this test by executing the script in a Python environment where the unittest module is available. If you save the code in a file, you can run it from the command line:
bash
python -m unittest your_test_file.py
Replace your_test_file.py with the name of your Python file containing this test code.