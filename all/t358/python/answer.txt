Hereâ€™s the equivalent Python code for the provided C++ code. The code retains the same functionality, which involves extracting a name and number from a formatted string and sorting a list of such strings.
Python Code
python
from typing import List, Tuple

def extract_name_and_number(s: str) -> Tuple[str, int]:
    """
    Extracts the name and number from a string in the format "name + number".

    This helper function splits the input string into its name and number components.
    It assumes that the string is well-formed, with the name part consisting of alphabetic characters
    and the number part consisting of numeric digits.

    :param s: The input string in the format "name + number".
    :return: A tuple containing the name as a string and the number as an integer.
    """
    pos = len(s) - 1
    while pos >= 0 and s[pos].isdigit():
        pos -= 1
    name = s[:pos + 1].strip()  # Get name and remove any leading/trailing spaces
    number = int(s[pos + 1:].strip())  # Get the number and convert it to an integer
    return name, number

def sort_names(arr: List[str]) -> List[str]:
    """
    Sort the list of strings with the format "name + number" in ascending order.
    If the numbers are the same, sort by name in ascending order.

    :param arr: A list of strings to be sorted.
    :return: A list of strings sorted according to the rules described above.
    """
    sorted_arr = sorted(arr, key=lambda x: (extract_name_and_number(x)[1], extract_name_and_number(x)[0]))
    return sorted_arr

# Example usage:
if __name__ == "__main__":
    names = ["Alice 10", "Bob 5", "Charlie 10", "David 2"]
    sorted_names = sort_names(names)
    print(sorted_names)  # Output: ['David 2', 'Bob 5', 'Alice 10', 'Charlie 10']
Explanation:
Extracting Name and Number:
The extract_name_and_number function takes a string s formatted as "name + number".
It finds the position of the last character that is not a digit, extracts the name, and converts the remaining part to an integer.
The resulting name and number are returned as a tuple.
Sorting Names:
The sort_names function sorts a list of strings based on the number (extracted using extract_name_and_number) and, if the numbers are the same, by the name.
The sorted function is used with a lambda function that provides the sort key based on the extracted number and name.
Example Usage:
An example usage block demonstrates how to call the sort_names function and prints the sorted result.
Additional Notes:
This Python code maintains the same logic as the C++ code while adhering to Python syntax and conventions.
Type hints (List and Tuple) are used for better code clarity and type checking.
The code also trims whitespace from both the name and number components to ensure they are formatted correctly.