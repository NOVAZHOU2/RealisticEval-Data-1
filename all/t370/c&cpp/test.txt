Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

Here is the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <tuple>
#include <vector>
#include <stdexcept>

// Function to decompose a flat index into a multidimensional index based on the given shape
std::tuple<int, int, int> decompose(int n, const std::vector<int>& shape) {
    // Calculate the total size of the array
    int size = 1;
    for (int dim : shape) {
        size *= dim;
    }

    // Check if the index is within bounds
    if (n < 0 || n >= size) {
        throw std::out_of_range("Index out of bounds");
    }

    // Decompose the index
    std::vector<int> result;
    for (auto it = shape.rbegin(); it != shape.rend(); ++it) {
        result.push_back(n % *it);
        n /= *it;  // Update n by integer division
    }

    // Reverse the result to match the original shape order and return as tuple
    std::tuple<int, int, int> result_tuple(result.back(), result[1], result.front());
    return result_tuple;
}

TEST_CASE("Test Decompose Function", "[decompose]") {
    SECTION("Edge case with larger shape") {
        REQUIRE(decompose(60, {4, 4, 4}) == std::make_tuple(3, 3, 0));
    }

    SECTION("Last valid index") {
        REQUIRE(decompose(63, {4, 4, 4}) == std::make_tuple(3, 3, 3));
    }

    SECTION("Single dimension case") {
        REQUIRE(decompose(2, {5}) == std::make_tuple(2));
    }

    SECTION("Invalid cases") {
        // Test case 5: Out of bounds case (negative index)
        REQUIRE_THROWS_AS(decompose(-1, {3, 4, 5}), std::out_of_range);

        // Test case 6: Out of bounds case (index too large)
        REQUIRE_THROWS_AS(decompose(100, {3, 4, 5}), std::out_of_range);
    }
}
```

### Explanation:
1. **Header Inclusions**:
   - `#include <catch2/catch_test_macros.hpp>`: For Catch2 test macros.
   - `#include <tuple>`: For using `std::tuple`.
   - `#include <vector>`: For using `std::vector`.
   - `#include <stdexcept>`: For throwing exceptions.

2. **Function Implementation**:
   - The `decompose` function is implemented as described earlier, with the same logic and functionality.

3. **Test Class**:
   - The `TEST_CASE` macro defines a test case named "Test Decompose Function" with the tag `[decompose]`.
   - Each `SECTION` within the test case corresponds to a specific test scenario.

4. **Assertions**:
   - `REQUIRE` is used to assert equality and correctness.
   - `REQUIRE_THROWS_AS` is used to check for specific exceptions.

### Running the Tests
To run the tests, you can compile the code with a C++ compiler that supports Catch2. For example, using g++:

```sh
g++ -o test_decompose test_decompose.cpp -lcatch2
./test_decompose
```

This will execute the tests and provide output similar to what you would see with Python's unittest framework.