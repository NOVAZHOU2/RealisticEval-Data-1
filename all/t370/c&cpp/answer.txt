Certainly! Below is the equivalent C++ code for the provided Python function. This code maintains the same functionality, logic, and structure while adapting to C++ syntax and features:

```cpp
#include <iostream>
#include <vector>
#include <tuple>
#include <stdexcept>

// Function to decompose a flat index into a multidimensional index based on the given shape
std::tuple<int, int, int> decompose(int n, const std::vector<int>& shape) {
    // Calculate the total size of the array
    int size = 1;
    for (int dim : shape) {
        size *= dim;
    }

    // Check if the index is within bounds
    if (n < 0 || n >= size) {
        throw std::out_of_range("Index out of bounds");
    }

    // Decompose the index
    std::vector<int> result;
    for (auto it = shape.rbegin(); it != shape.rend(); ++it) {
        result.push_back(n % *it);
        n /= *it;  // Update n by integer division
    }

    // Reverse the result to match the original shape order and return as tuple
    std::tuple<int, int, int> result_tuple(result.back(), result[1], result.front());
    return result_tuple;
}

// Example usage and verification
int main() {
    try {
        std::vector<int> shape = {3, 4, 5};
        int n = 27;
        auto result = decompose(n, shape);
        std::cout << "Decomposed index: (" << std::get<0>(result) << ", " << std::get<1>(result) << ", " << std::get<2>(result) << ")" << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }
    return 0;
}
```

### Explanation:
1. **Function Definition**: The `decompose` function takes an integer `n` and a vector of integers `shape` as parameters.
2. **Total Size Calculation**: The total size of the array is calculated by multiplying all the dimensions in the `shape` vector.
3. **Bounds Check**: An exception (`std::out_of_range`) is thrown if the index `n` is out of bounds.
4. **Decomposition**: The index is decomposed using modular arithmetic and integer division, storing the results in a vector.
5. **Result Conversion**: The result vector is reversed and converted into a tuple before being returned.
6. **Example Usage**: The `main` function demonstrates how to use the `decompose` function and handles exceptions.

This code assumes a three-dimensional shape for simplicity. If you need to handle shapes with more dimensions, you can adjust the tuple accordingly or return a `std::vector<int>` instead.