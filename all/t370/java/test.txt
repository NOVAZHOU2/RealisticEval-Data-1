Since you've provided a Python function and asked for a Java JUnit test class, I'll first provide the Java equivalent of the Python function. Then, I will create a JUnit test class for it. 

Here is the Java equivalent of the Python function:

```java
package org.real.temp;

import java.util.Arrays;
import java.util.stream.IntStream;

public class ArrayDecomposer {

    /**
     * Decompose a flat index 'n' into a multidimensional index based on the given shape.
     *
     * @param n    Flat index (non-negative integer).
     * @param shape Array representing the dimensions of the multi-dimensional array.
     * @return An array representing the multidimensional index corresponding to 'n'.
     * @throws IllegalArgumentException If 'n' is out of bounds for the array defined by 'shape'.
     */
    public static int[] decompose(int n, int[] shape) {
        if (n < 0) {
            throw new IllegalArgumentException("Index must be non-negative.");
        }
        
        int dimensions = shape.length;
        int[] result = new int[dimensions];
        
        for (int i = dimensions - 1; i >= 0; i--) {
            int product = (i == dimensions - 1) ? 1 : IntStream.range(i + 1, dimensions).map(j -> shape[j]).reduce(1, (a, b) -> a * b);
            
            if (n >= product * shape[i]) {
                throw new IllegalArgumentException("Index is out of bounds for the array defined by the shape.");
            }
            
            result[i] = n / product;
            n %= product;
        }
        
        return result;
    }
}
```

Now, let's create the JUnit test class for this method:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

public class Tester {

    @Test
    public void testDecompose() {
        // Test case 1: Simple decomposition
        int[] shape1 = {3, 4};
        int n1 = 5;
        int[] expected1 = {1, 2};
        assertArrayEquals(expected1, ArrayDecomposer.decompose(n1, shape1));

        // Test case 2: Larger array
        int[] shape2 = {2, 3, 4};
        int n2 = 10;
        int[] expected2 = {0, 1, 2};
        assertArrayEquals(expected2, ArrayDecomposer.decompose(n2, shape2));

        // Test case 3: Negative index should throw an exception
        int[] shape3 = {3, 4};
        int n3 = -1;
        try {
            ArrayDecomposer.decompose(n3, shape3);
            fail("Expected IllegalArgumentException for negative index");
        } catch (IllegalArgumentException e) {
            assertEquals("Index must be non-negative.", e.getMessage());
        }

        // Test case 4: Out of bounds index should throw an exception
        int[] shape4 = {2, 2, 2};
        int n4 = 9; // This is out of bounds for a 2x2x2 array
        try {
            ArrayDecomposer.decompose(n4, shape4);
            fail("Expected IllegalArgumentException for out of bounds index");
        } catch (IllegalArgumentException e) {
            assertEquals("Index is out of bounds for the array defined by the shape.", e.getMessage());
        }
    }
}
```

In this solution, we have converted the Python function `decompose` to a Java method with the same functionality. We then created a JUnit test class named `Tester` within the `org.real.temp` package. The test cases ensure that the `decompose` method behaves correctly under various conditions, including handling exceptions appropriately.