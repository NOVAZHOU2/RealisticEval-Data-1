Sure, here is the equivalent Java code for the provided Python function:

```java
import java.util.Arrays;

public class IndexDecomposer {

    /**
     * Decompose a flat index {@code n} into a multidimensional index based on the given shape.
     *
     * @param n      Flat index (non-negative integer).
     * @param shape  Array representing the dimensions of the multi-dimensional array.
     * @return       Array representing the multidimensional index corresponding to {@code n}.
     * @throws IllegalArgumentException If {@code n} is out of bounds for the array defined by {@code shape}.
     */
    public static int[] decompose(int n, int[] shape) throws IllegalArgumentException {
        if (n < 0) {
            throw new IllegalArgumentException("Flat index 'n' must be non-negative.");
        }

        int[] indices = new int[shape.length];
        for (int i = shape.length - 1; i >= 0; i--) {
            indices[i] = n % shape[i];
            n /= shape[i];
        }

        if (n != 0) {
            throw new IllegalArgumentException("Index 'n' is out of bounds for the array defined by 'shape'.");
        }

        return indices;
    }

    // Example usage
    public static void main(String[] args) {
        int[] shape = {3, 4, 5};
        int n = 62;
        int[] result = decompose(n, shape);
        System.out.println(Arrays.toString(result));
    }
}
```

### Explanation:
1. **Class Definition**: The Python function has been converted into a static method within a Java class named `IndexDecomposer`.
2. **Type Annotations**: The Python `Tuple` type annotation has been replaced with an `int[]` array in Java.
3. **Docstring Conversion**: The Python docstring has been converted into a Javadoc comment block.
4. **Exception Handling**: The Python `ValueError` has been replaced with a Java `IllegalArgumentException`.
5. **Functionality**: The logic remains the same, converting a flat index into a multidimensional index based on the given shape.