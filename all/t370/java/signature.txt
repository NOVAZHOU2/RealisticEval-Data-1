Sure, here's how you can convert the Python function signature to a Java method signature while keeping the comments:

```java
/**
 * Decompose a flat index `n` into a multidimensional index based on the given shape.
 *
 * @param n     Flat index (non-negative integer).
 * @param shape Array representing the dimensions of the multi-dimensional array.
 * @return      Array representing the multidimensional index corresponding to `n`.
 * @throws      IllegalArgumentException if `n` is out of bounds for the array defined by `shape`.
 */
public static int[] decompose(int n, int[] shape) throws IllegalArgumentException {
    // Method implementation goes here
}
```

### Explanation:
- **@param**: Describes each parameter in the method.
- **@return**: Describes the return type of the method.
- **@throws**: Indicates that the method may throw an exception.
  
This Java method signature should match the functionality and requirements of your original Python function.