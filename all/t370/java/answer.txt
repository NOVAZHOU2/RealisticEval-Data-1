Below is the Java code equivalent to the provided Python code, organized within the package `org.real.temp` and the class `Answer`. The code includes proper type declarations, method signatures, and exception handling.

```java
package org.real.temp;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Answer {

    /**
     * Decompose a flat index `n` into a multidimensional index based on the given shape.
     *
     * @param n     Flat index (non-negative integer).
     * @param shape Array representing the dimensions of the multi-dimensional array.
     * @return Array representing the multidimensional index corresponding to `n`.
     * @throws IllegalArgumentException If `n` is out of bounds for the array defined by `shape`.
     */
    public static int[] decompose(int n, int[] shape) throws IllegalArgumentException {
        // Calculate the total size of the array
        int size = 1;
        for (int dim : shape) {
            size *= dim;
        }

        // Check if the index is within bounds
        if (n < 0 || n >= size) {
            throw new IllegalArgumentException("Index out of bounds");
        }

        // Decompose the index
        List<Integer> result = new ArrayList<>();
        for (int i = shape.length - 1; i >= 0; i--) {
            result.add(n % shape[i]);
            n /= shape[i];  // Update n by integer division
        }

        // Convert the list to an array and reverse it to match the original shape order
        int[] resultArray = result.stream().mapToInt(i -> i).toArray();
        Collections.reverse(List.of(resultArray));

        return resultArray;
    }

    public static void main(String[] args) {
        try {
            int[] shape = {3, 4, 5};
            int n = 60;
            int[] result = decompose(n, shape);
            System.out.println("Decomposed index: " + Arrays.toString(result));
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
    }
}
```

### Explanation:

1. **Package and Class Definition**: 
   - The code is defined within the package `org.real.temp`.
   - The class name is `Answer`.

2. **Method Signature**:
   - The method `decompose` takes an integer `n` and an array of integers `shape` as parameters.
   - It returns an array of integers representing the multidimensional index.
   - It throws an `IllegalArgumentException` if the index is out of bounds.

3. **Calculation of Total Size**:
   - The total size of the array is calculated by multiplying all dimensions in the `shape` array.

4. **Bounds Check**:
   - The method checks if the provided index `n` is within the bounds of the array defined by `shape`.

5. **Decomposition Logic**:
   - The index `n` is decomposed into a multidimensional index using modular arithmetic and integer division.
   - The result is stored in an `ArrayList<Integer>`.

6. **Conversion to Array and Reversal**:
   - The `ArrayList<Integer>` is converted to an `int[]` array.
   - The array is reversed to match the original order of the shape.

7. **Main Method**:
   - A sample usage of the `decompose` method is demonstrated in the `main` method, including catching and printing any exceptions.