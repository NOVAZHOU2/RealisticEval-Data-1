Sure, here's how you can convert your Python code to Java:

```java
package org.real.temp;

import java.util.Arrays;
import java.util.List;

public class Answer {
    
    public static List<Integer> decompose(int n, int[] shape) throws IllegalArgumentException {
        // Check if n is within the valid range
        int totalElements = 1;
        for (int dim : shape) {
            totalElements *= dim;
        }
        
        if (n < 0 || n >= totalElements) {
            throw new IllegalArgumentException("Index " + n + " is out of bounds for the array with shape " + Arrays.toString(shape));
        }

        // Convert the flat index to a multidimensional index
        List<Integer> result = new ArrayList<>();
        int currentDim = n;
        for (int i = shape.length - 1; i >= 0; --i) {
            result.add(0, currentDim % shape[i]);
            currentDim /= shape[i];
        }

        return result;
    }
}
```

### Explanation:
- **Package and Class**: The Java code is placed inside the `org.real.temp` package and named `Answer`, matching the Python class.
- **Method Signature**: The method `decompose` takes an integer `n` and an array `shape` as parameters. It returns a `List<Integer>` which represents the multidimensional index.
- **Bounds Checking**: Before proceeding with the decomposition, it checks if `n` is within the valid range (0 to `totalElements - 1`). If not, it throws an `IllegalArgumentException`.
- **Decomposition Logic**: It iterates over the dimensions in reverse order to calculate each dimension of the multidimensional index.

This Java code should work similarly to your original Python function.