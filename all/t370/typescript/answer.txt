Here's how you can convert your Python code to TypeScript:

```typescript
function decompose(n: number, shape: number[]): number[] {
    // ...
}
```

TypeScript doesn't have a direct equivalent to Python's `Tuple`, but it does support arrays and tuples in its type system. In this case, we're using an array to represent the `shape`. The function parameters and return value are typed as `number`.

Please note that TypeScript doesn't have a built-in way to check if a value is within a range like Python's `ValueError`. You would need to add your own error handling for that. Here's an example of how you might do that:

```typescript
function decompose(n: number, shape: number[]): number[] {
    let result: number[] = [];
    let remaining = n;

    for(let i = shape.length - 1; i >= 0; i--) {
        if(remaining < 0 || remaining >= shape[i]) {
            throw new Error(`Index ${n} is out of bounds for shape ${shape}`);
        }
        
        result.unshift(remaining % shape[i]);
        remaining = Math.floor(remaining / shape[i]);
    }

    return result;
}
```
This code will throw an error if `n` is not a valid index for the given `shape`.