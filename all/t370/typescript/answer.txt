Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function decompose(n: number, shape: number[]): [number, ...number[]] {
    /**
     * Decompose a flat index `n` into a multidimensional index based on the given shape.
     *
     * @param n - Flat index (non-negative integer).
     * @param shape - Array representing the dimensions of the multi-dimensional array.
     * @returns Tuple representing the multidimensional index corresponding to `n`.
     * @throws {Error} If `n` is out of bounds for the array defined by `shape`.
     */
    // Calculate the total size of the array
    let size = 1;
    for (const dim of shape) {
        size *= dim;
    }

    // Check if the index is within bounds
    if (n < 0 || n >= size) {
        throw new Error("Index out of bounds");
    }

    // Decompose the index
    const result: number[] = [];
    for (let dim of shape.slice().reverse()) {
        result.push(n % dim);
        n = Math.floor(n / dim);  // Update n by integer division
    }

    // Reverse the result to match the original shape order and return as tuple
    return result.reverse() as [number, ...number[]];
}

// Example usage
console.log(decompose(5, [2, 3]));  // Output: [1, 2]
```

### Explanation:
1. **Function Definition**: The function `decompose` is defined with two parameters: `n` (a non-negative integer) and `shape` (an array of numbers). The return type is a tuple `[number, ...number[]]`, which means it returns a tuple starting with a number followed by zero or more numbers.

2. **Type Annotations**: The parameter types are explicitly annotated (`n: number` and `shape: number[]`). The return type is also specified as `[number, ...number[]]`.

3. **Error Handling**: Instead of using `ValueError`, TypeScript uses `Error`. The error message is thrown if `n` is out of bounds.

4. **Array Manipulation**: The `reversed` operation in Python is replaced with `slice().reverse()` in TypeScript to reverse the `shape` array. The `result` array is then reversed before returning it as a tuple.

5. **Division Operation**: In TypeScript, we use `Math.floor(n / dim)` to perform integer division, ensuring the result is an integer.

This TypeScript code maintains the same functionality and logic as the Python code while adhering to TypeScript's static type system and idiomatic practices.