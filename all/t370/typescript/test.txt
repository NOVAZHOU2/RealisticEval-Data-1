To convert the Python unittest test class to a TypeScript test case using Jest, you can follow these steps:

1. Install Jest if you haven't already.
2. Write the TypeScript test cases using Jest syntax.

Here's an example of how you might write the TypeScript test cases for your `decompose` function:

```typescript
import { decompose } from './path-to-your-decompose-function'; // Adjust the path accordingly

describe('decompose function', () => {
  it('should correctly decompose a flat index into a multidimensional index', () => {
    expect(decompose(5, [3, 2])).toEqual([1, 1]);
    expect(decompose(0, [2, 3])).toEqual([0, 0]);
    expect(decompose(8, [2, 4])).toEqual([2, 0]);
  });

  it('should throw an error if the flat index is out of bounds', () => {
    expect(() => decompose(9, [2, 4])).toThrowError('Flat index out of bounds');
    expect(() => decompose(-1, [2, 4])).toThrowError('Flat index out of bounds');
  });
});
```

### Explanation:

1. **Import the Function**: Import the `decompose` function from the appropriate file.
2. **Describe Block**: Use the `describe` block to group related tests together. In this case, all tests related to the `decompose` function are grouped under "decompose function".
3. **It Blocks**: Each `it` block represents a single test case.
   - The first `it` block checks that the `decompose` function correctly converts flat indices to multidimensional indices.
   - The second `it` block checks that the `decompose` function throws an error when the flat index is out of bounds.
4. **Expectations**: Use `expect` with methods like `toEqual`, `toThrowError`, etc., to assert the expected behavior of the `decompose` function.

Make sure to adjust the import path (`./path-to-your-decompose-function`) to point to where your `decompose` function is located in your project.