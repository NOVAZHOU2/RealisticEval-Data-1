Sure, let's convert the Python function `decompose` and its test cases into TypeScript using Jest for testing.

First, we'll define the TypeScript function `decompose`:

```typescript
import { strict as assert } from 'assert';

/**
 * Decompose a flat index `n` into a multidimensional index based on the given shape.
 *
 * @param n - Flat index (non-negative integer).
 * @param shape - Array representing the dimensions of the multi-dimensional array.
 * @returns Array representing the multidimensional index corresponding to `n`.
 * @throws Error if `n` is out of bounds for the array defined by `shape`.
 */
function decompose(n: number, shape: number[]): number[] {
  if (n < 0) {
    throw new Error('Index must be non-negative');
  }

  const dimensions = shape.length;
  const indices: number[] = [];

  // Calculate the strides
  const strides = new Array(dimensions).fill(1);
  for (let i = dimensions - 2; i >= 0; i--) {
    strides[i] = strides[i + 1] * shape[i + 1];
  }

  // Decompose the flat index into multidimensional indices
  for (let i = 0; i < dimensions; i++) {
    const index = Math.floor(n / strides[i]);
    if (index >= shape[i]) {
      throw new Error(`Index ${n} is out of bounds for the array defined by shape ${shape}`);
    }
    indices.push(index);
    n -= index * strides[i];
  }

  return indices;
}

// Example usage
console.log(decompose(5, [3, 4])); // Output: [1, 1]
```

Next, let's write the Jest test cases for the `decompose` function:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('decompose', () => {
  it('should correctly decompose flat index 5 with shape [3, 4]', () => {
    expect(decompose(5, [3, 4])).toEqual([1, 1]);
  });

  it('should correctly decompose flat index 10 with shape [2, 3, 4]', () => {
    expect(decompose(10, [2, 3, 4])).toEqual([0, 2, 2]);
  });

  it('should correctly decompose flat index 22 with shape [2, 3, 4, 5]', () => {
    expect(decompose(22, [2, 3, 4, 5])).toEqual([0, 2, 3, 2]);
  });

  it('should throw an error for negative index', () => {
    expect(() => decompose(-1, [3, 4])).toThrow('Index must be non-negative');
  });

  it('should throw an error when index is out of bounds', () => {
    expect(() => decompose(12, [3, 4])).toThrow('Index 12 is out of bounds for the array defined by shape 3,4');
  });
});
```

In this conversion:
- We've defined the `decompose` function in TypeScript, ensuring it throws an error for invalid inputs.
- We've used Jest's `describe`, `it`, and `expect` functions to write test cases.
- We've mapped the Python `unittest` assertions to Jest assertions.