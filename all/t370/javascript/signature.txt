Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Decompose a flat index `n` into a multidimensional index based on the given shape.
 *
 * @param {number} n - Flat index (non-negative integer).
 * @param {Array<number>} shape - Array representing the dimensions of the multi-dimensional array.
 * @returns {Array<number>} - Array representing the multidimensional index corresponding to `n`.
 * @throws {Error} - If `n` is out of bounds for the array defined by `shape`.
 */
function decompose(n, shape) {
    // Calculate the total size of the array
    let size = 1;
    for (let dim of shape) {
        size *= dim;
    }

    // Check if the index is within bounds
    if (!(0 <= n && n < size)) {
        throw new Error("Index out of bounds");
    }

    // Decompose the index
    let result = [];
    for (let dim of shape.slice().reverse()) {
        result.push(n % dim);
        n = Math.floor(n / dim);  // Update n by integer division
    }

    // Reverse the result to match the original shape order and return as an array
    return result.reverse();
}

// Example usage
const n = 10;
const shape = [3, 4, 2];
console.log(decompose(n, shape));  // Output: [1, 2, 0]
```

### Explanation:
1. **JSDoc Comments**:
   - The function documentation is rewritten using JSDoc format.
   - The `@param`, `@returns`, and `@throws` tags are used to document the function parameters, return type, and possible exceptions.

2. **Function Signature**:
   - The function `decompose` is defined with two parameters: `n` (flat index) and `shape` (array representing dimensions).

3. **Total Size Calculation**:
   - The total size of the array is calculated by multiplying all dimensions in the `shape` array.

4. **Bounds Check**:
   - An error is thrown if the index `n` is out of bounds.

5. **Decomposition**:
   - The flat index `n` is decomposed into a multidimensional index using modulo and integer division operations.

6. **Result Reversal**:
   - The resulting array is reversed to match the original order of the shape dimensions.

7. **Return Value**:
   - The decomposed multidimensional index is returned as an array.

This JavaScript code preserves the purpose and structure of the original Python code while adhering to JSDoc documentation standards.