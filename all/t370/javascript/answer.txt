Certainly! Below is the equivalent JavaScript code that mirrors the functionality, logic, and structure of the provided Python code:

```javascript
function decompose(n, shape) {
    /**
     * Decompose a flat index `n` into a multidimensional index based on the given shape.
     *
     * @param {number} n - Flat index (non-negative integer).
     * @param {Array<number>} shape - Array representing the dimensions of the multi-dimensional array.
     * @returns {Array<number>} - Array representing the multidimensional index corresponding to `n`.
     * @throws {Error} - If `n` is out of bounds for the array defined by `shape`.
     */
    
    // Calculate the total size of the array
    let size = 1;
    for (let dim of shape) {
        size *= dim;
    }

    // Check if the index is within bounds
    if (!(0 <= n && n < size)) {
        throw new Error("Index out of bounds");
    }

    // Decompose the index
    let result = [];
    for (let dim of shape.slice().reverse()) {
        result.push(n % dim);
        n = Math.floor(n / dim);  // Update n by integer division
    }

    // Reverse the result to match the original shape order and return as an array
    return result.reverse();
}

// Example usage:
try {
    console.log(decompose(5, [3, 4]));  // Output: [1, 2]
} catch (error) {
    console.error(error.message);
}
```

### Explanation:
- The function `decompose` takes two parameters: `n` (a non-negative integer representing the flat index) and `shape` (an array representing the dimensions of the multi-dimensional array).
- It calculates the total size of the array by multiplying all the dimensions together.
- It checks if the index `n` is within the bounds of the array. If not, it throws an error.
- It then decomposes the index `n` into a multidimensional index by repeatedly taking the modulus and performing integer division.
- Finally, it reverses the resulting array to match the original shape order and returns it.

This JavaScript code closely follows the structure and logic of the provided Python code, ensuring the same functionality.