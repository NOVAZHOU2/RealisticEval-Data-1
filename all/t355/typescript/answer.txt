Here's the TypeScript version of the provided C++ code, translated with appropriate conventions and best practices:

```typescript
/**
 * @brief Calculates the spatial weight based on the difference in spatial coordinates and a space standard deviation.
 *
 * The spatial weight is calculated using the formula:
 * weight = exp(- (spatial_diff^2) / (2 * sigma_space^2))
 *
 * @param spatial_diff The difference in spatial coordinates, which is used to compute the weight.
 * @param sigma_space The standard deviation for spatial distance, affecting the spread of the weight.
 * @returns The spatial weight as a number.
 *
 * @throws Error if sigma_space is less than or equal to zero.
 */
function spatialWeight(spatial_diff: number, sigma_space: number): number {
    // Validate that sigma_space is greater than zero to avoid division by zero
    if (sigma_space <= 0) {
        throw new Error("sigma_space must be greater than zero.");
    }

    // Calculate the squared spatial difference
    const squared_diff = spatial_diff * spatial_diff;

    // Calculate the denominator using sigma_space squared
    const denominator = 2 * sigma_space * sigma_space;

    // Calculate and return the spatial weight
    return Math.exp(-squared_diff / denominator);
}
```

### Key Differences and Adaptations:
1. **Function Declaration**: TypeScript uses the `function` keyword without the `inline` specifier, as it is not necessary.
2. **Type Annotations**: TypeScript uses type annotations (`number` in this case) to define the types of parameters and return values.
3. **Error Handling**: The C++ `std::domain_error` is replaced with a standard JavaScript `Error`.
4. **Math Functions**: The C++ `exp` function is replaced with `Math.exp` in TypeScript. 

This maintains the logic and functionality while adapting to TypeScript conventions.