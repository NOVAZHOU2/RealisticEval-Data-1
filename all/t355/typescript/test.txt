Here’s the equivalent test suite written in TypeScript using Jest, maintaining the logic and functionality from the C++ Catch2 framework:

```typescript
import { spatialWeight } from './path/to/your/module'; // Adjust the import path as necessary

describe("Spatial Weight Calculation Tests", () => {
    
    test("Zero Spatial Difference", () => {
        // When spatial difference is zero, weight should be 1
        const spatial_diff = 0.0;
        const sigma_space = 1.0; // arbitrary sigma value
        expect(spatialWeight(spatial_diff, sigma_space)).toBeCloseTo(1.0, 3); // Using 3 decimal places
    });

    test("Positive Spatial Difference", () => {
        // A positive spatial difference with a reasonable sigma
        const spatial_diff = 2.0;
        const sigma_space = 2.0;
        const expected_weight = Math.exp(-(spatial_diff * spatial_diff) / (2 * sigma_space * sigma_space));
        expect(spatialWeight(spatial_diff, sigma_space)).toBeCloseTo(expected_weight, 3);
    });

    test("Negative Spatial Difference", () => {
        // A negative spatial difference should yield the same weight as positive
        const spatial_diff = -2.0;
        const sigma_space = 2.0;
        const expected_weight = Math.exp(-(spatial_diff * spatial_diff) / (2 * sigma_space * sigma_space));
        expect(spatialWeight(spatial_diff, sigma_space)).toBeCloseTo(expected_weight, 3);
    });

    test("Small Sigma Space", () => {
        // Test with a small sigma value
        const spatial_diff = 1.0;
        const sigma_space = 0.1;
        const expected_weight = Math.exp(-(spatial_diff * spatial_diff) / (2 * sigma_space * sigma_space));
        expect(spatialWeight(spatial_diff, sigma_space)).toBeCloseTo(expected_weight, 3);
    });

    test("Large Sigma Space", () => {
        // Test with a large sigma value
        const spatial_diff = 1.0;
        const sigma_space = 100.0;
        const expected_weight = Math.exp(-(spatial_diff * spatial_diff) / (2 * sigma_space * sigma_space));
        expect(spatialWeight(spatial_diff, sigma_space)).toBeCloseTo(expected_weight, 3);
    });

});
```

### Key Adaptations:
1. **Test Suite**: The `describe` function is used in Jest to group related tests.
2. **Test Cases**: Each `SECTION` is translated to a `test` function.
3. **Assertions**: The `REQUIRE` assertion is replaced with Jest’s `expect` and `toBeCloseTo` for floating-point comparison.
4. **Math Functions**: Used `Math.exp` in TypeScript for the exponential function.
5. **Precision**: The precision for comparison in Jest is specified as the second argument in `toBeCloseTo`. 

This maintains the original test logic while conforming to TypeScript and Jest syntax.