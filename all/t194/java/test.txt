Here's the equivalent Java test class using JUnit4 for the provided C++ test cases:

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.junit.Assert.assertThrows;

public class Tester {

    @Test
    public void testReturnString_NonEmptyString() {
        String original = "Hello, World!";
        String copy = new Answer().returnString(original);
        assertEquals(original, copy);
    }

    @Test
    public void testReturnString_EmptyString() {
        String original = "";
        String copy = new Answer().returnString(original);
        assertEquals(original, copy);
    }

    @Test
    public void testReturnString_SpecialCharacters() {
        String original = "C++ is fun! @#$%^&*()";
        String copy = new Answer().returnString(original);
        assertEquals(original, copy);
    }

    @Test
    public void testReturnString_SingleCharacter() {
        String original = "A";
        String copy = new Answer().returnString(original);
        assertEquals(original, copy);
    }

    @Test
    public void testReturnString_NullPointer() {
        assertThrows(IllegalArgumentException.class, () -> {
            new Answer().returnString(null);
        });
    }
}
```

### Explanation:
1. **Package Declaration**: The test class is placed in the `org.real.temp` package.
2. **JUnit Annotations**: Each test case is annotated with `@Test`.
3. **Assertions**: Used `assertEquals` to compare strings, and `assertThrows` to handle expected exceptions.
4. **Method Calls**: Each test calls the `returnString` method from the `Answer` class.
5. **Structure**: The test methods maintain clarity and reflect the original logic of the C++ tests.