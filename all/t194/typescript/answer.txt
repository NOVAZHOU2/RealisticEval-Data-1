Here's the TypeScript equivalent of the provided C++ code, translated while maintaining the original logic and functionality:

```typescript
/**
 * @brief Returns a copy of the specified string.
 * 
 * @param str The input string to be copied.
 * @return A new string that is a copy of the input string.
 * @throws Error if the input string is null or undefined.
 */
function returnString(str: string | null | undefined): string {
    if (str === null || str === undefined) {
        throw new Error("Input string cannot be null or undefined.");
    }

    // Create a copy of the input string
    const copiedStr: string = str.slice();

    return copiedStr;
}
```

### Key Differences and Adaptations:
1. **Memory Management**: In TypeScript, strings are managed automatically, so we donâ€™t need to allocate or deallocate memory manually as in C++.
2. **Error Handling**: Instead of throwing a `std::invalid_argument`, we throw a standard `Error` in TypeScript.
3. **Type Annotations**: The function parameter is annotated to allow `string`, `null`, or `undefined`, aligning with TypeScript's type system.
4. **String Copying**: The `slice()` method is used to create a copy of the string, similar to how `strcpy` works in C++.