Certainly! Here is the equivalent TypeScript code with proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Replaces all phone numbers in the given string with the placeholder '[PHONE_NUM]'.
 * 
 * Example:
 *   Input: "Call me at 123-456-7890."
 *   Output: "Call me at [PHONE_NUM]."
 * 
 * @param text - The input string that may contain phone numbers.
 * @returns The modified string with phone numbers replaced by '[PHONE_NUM]'.
 */
function replacePhoneNumbers(text: string): string {
    // Define a regex pattern to match phone numbers
    // This pattern matches optional country codes, spaces, dashes, and brackets commonly found in phone numbers
    const phonePattern = '\\b(?:\\+\\d{1,2}\\s?)?((\\d{1,4}[-.\\s]?)?\\(ï¼Ÿ\\d{1,4}\\)?[-.\\s]?\\d{1,9}[-.\\s]?\\d{1,9})\\b';

    // Replace all matches in the text with [PHONE_NUM]
    const replacedText = text.replace(new RegExp(phonePattern, 'g'), '[PHONE_NUM]');

    return replacedText;
}

// Example usage
const sampleText = "Call me at +1 555-1234 or (555) 555-1234.";
console.log(replacePhoneNumbers(sampleText));
```

### Explanation:
1. **JSDoc Documentation**: The function is documented using JSDoc style comments, which provide clear descriptions of the function, its parameters, and its return value.
2. **Type Annotations**: The function parameter `text` is annotated with the type `string`, and the return type is also `string`.
3. **Regex Pattern**: The regex pattern is defined as a string and then used to create a new `RegExp` object.
4. **String Replacement**: The `replace` method is used to replace all matches in the text with `[PHONE_NUM]`.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices for documentation.