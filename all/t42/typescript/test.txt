Certainly! Here is the equivalent TypeScript test class using Jest, along with the necessary setup and assertions:

1. **Convert the Python unittest test class to a Jest test suite**.
2. **Map the Python `assertEqual` method to Jest's `expect` assertions**.
3. **Include necessary imports and type annotations**.

Here’s the TypeScript code:

```typescript
import { replacePhoneNumbers } from './path-to-replace-phone-numbers'; // Import the function

describe('TestReplacePhoneNumbers', () => {
    it('should replace a basic phone number', () => {
        const msg = "Call me at 123-456-7890.";
        const expected = "Call me at [PHONE_NUM].";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });

    it('should replace a phone number with parentheses', () => {
        const msg = "Our office number is 123 456-7890.";
        const expected = "Our office number is [PHONE_NUM].";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });

    it('should replace a phone number with dots', () => {
        const msg = "Fax us at 123.456.7890.";
        const expected = "Fax us at [PHONE_NUM].";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });

    it('should not replace anything when there is no phone number', () => {
        const msg = "Hello, please reply to this email.";
        const expected = "Hello, please reply to this email.";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });
});
```

### Explanation:
1. **Imports**: Import the `replacePhoneNumbers` function from the relevant file.
2. **Describe Block**: Use Jest's `describe` block to group the tests.
3. **It Blocks**: Each test case is defined using Jest's `it` blocks.
4. **Expect Assertions**: Use Jest's `expect` assertions to verify the expected outcomes.

### File Structure:
Assuming you have the `replacePhoneNumbers` function in a separate file, here’s how your directory structure might look:

```
src/
├── replace-phone-numbers.ts
└── test/
    └── replace-phone-numbers.test.ts
```

### `replace-phone-numbers.ts`:
```typescript
import * as re from 'xregexp';

/**
 * Replaces all phone numbers in the given string with the placeholder '[PHONE_NUM]'.
 *
 * Example:
 *   Input: "Call me at 123-456-7890."
 *   Output: "Call me at [PHONE_NUM]."
 *
 * @param text - The input string that may contain phone numbers.
 * @returns The modified string with phone numbers replaced by '[PHONE_NUM]'.
 */
function replacePhoneNumbers(text: string): string {
    // Define a regex pattern to match phone numbers
    // This pattern matches optional country codes, spaces, dashes, and brackets commonly found in phone numbers
    const phonePattern = '\\b(?:\\+\\d{1,2}\\s?)?((\\d{1,4}[-.\\s]?)?\\(？\\d{1,4}\\)?[-.\\s]?\\d{1,9}[-.\\s]?\\d{1,9})\\b';

    // Replace all matches in the text with [PHONE_NUM]
    const replacedText = text.replace(new RegExp(phonePattern, 'g'), '[PHONE_NUM]');

    return replacedText;
}

export { replacePhoneNumbers };
```

### `replace-phone-numbers.test.ts`:
```typescript
import { replacePhoneNumbers } from '../replace-phone-numbers';

describe('TestReplacePhoneNumbers', () => {
    it('should replace a basic phone number', () => {
        const msg = "Call me at 123-456-7890.";
        const expected = "Call me at [PHONE_NUM].";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });

    it('should replace a phone number with parentheses', () => {
        const msg = "Our office number is 123 456-7890.";
        const expected = "Our office number is [PHONE_NUM].";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });

    it('should replace a phone number with dots', () => {
        const msg = "Fax us at 123.456.7890.";
        const expected = "Fax us at [PHONE_NUM].";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });

    it('should not replace anything when there is no phone number', () => {
        const msg = "Hello, please reply to this email.";
        const expected = "Hello, please reply to this email.";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });
});
```

This setup ensures that the tests are structured and executed correctly using Jest, maintaining the original functionality and logic of the Python unittest tests.