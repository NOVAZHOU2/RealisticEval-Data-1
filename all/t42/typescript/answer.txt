Sure! Here is the equivalent TypeScript code:

```typescript
import * as re from 'xregexp';

function replacePhoneNumbers(text: string): string {
    // Define a regex pattern to match phone numbers
    // This pattern matches optional country codes, spaces, dashes, and brackets commonly found in phone numbers
    const phonePattern = '\\b(?:\\+\\d{1,2}\\s?)?((\\d{1,4}[-.\\s]?)?\\(ï¼Ÿ\\d{1,4}\\)?[-.\\s]?\\d{1,9}[-.\\s]?\\d{1,9})\\b';

    // Replace all matches in the text with [PHONE_NUM]
    const replacedText = text.replace(new RegExp(phonePattern, 'g'), '[PHONE_NUM]');

    return replacedText;
}

// Example usage
const sampleText = "Call me at +1 555-1234 or (555) 555-1234.";
console.log(replacePhoneNumbers(sampleText));
```

### Explanation:
1. **Import Statement**: TypeScript does not have built-in support for regular expressions like Python's `re` module. We use `xregexp` as a library for advanced regular expressions.
2. **Function Definition**: The function `replacePhoneNumbers` is defined with a parameter of type `string` and returns a `string`.
3. **Regex Pattern**: The regex pattern is defined as a string and then used to create a new `RegExp` object.
4. **String Replacement**: The `replace` method is used to replace all matches in the text with `[PHONE_NUM]`.

Make sure you install `xregexp` using npm or yarn if you haven't already:
```sh
npm install xregexp
# or
yarn add xregexp
```

This TypeScript code maintains the same functionality and logic as the original Python code.