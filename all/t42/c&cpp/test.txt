Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a set of Catch2 test cases, ensuring that the functionality and logic of the tests are preserved.

### C++ Code Using Catch2

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager like vcpkg.

Here’s the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <regex>

// Function to replace phone numbers in a given text
std::string replace_phone_numbers(const std::string& text) {
    // Define a regex pattern to match phone numbers
    // This pattern matches optional country codes, spaces, dashes, and brackets commonly found in phone numbers
    std::regex phone_pattern(R"(\b(?:\+\d{1,2}\s?)?(\d{1,4}[-.\s]?)?\(?\d{1,4}\)?[-.\s]?\d{1,9}[-.\s]?\d{1,9}\b)");

    // Replace all matches in the text with [PHONE_NUM]
    std::string replaced_text = std::regex_replace(text, phone_pattern, "[PHONE_NUM]");

    return replaced_text;
}

TEST_CASE("Test Replace Phone Numbers") {
    SECTION("Basic Number") {
        std::string msg = "Call me at 123-456-7890.";
        std::string expected = "Call me at [PHONE_NUM].";
        REQUIRE(replace_phone_numbers(msg) == expected);
    }

    SECTION("Number with Parentheses") {
        std::string msg = "Our office number is 123 456-7890.";
        std::string expected = "Our office number is [PHONE_NUM].";
        REQUIRE(replace_phone_numbers(msg) == expected);
    }

    SECTION("Number with Dots") {
        std::string msg = "Fax us at 123.456.7890.";
        std::string expected = "Fax us at [PHONE_NUM].";
        REQUIRE(replace_phone_numbers(msg) == expected);
    }

    SECTION("No Phone Number") {
        std::string msg = "Hello, please reply to this email.";
        std::string expected = "Hello, please reply to this email.";
        REQUIRE(replace_phone_numbers(msg) == expected);
    }
}
```

### Explanation:
1. **Headers**: Include the necessary headers (`<catch2/catch_test_macros.hpp>`, `<string>`, `<regex>`).
2. **Function Definition**: The `replace_phone_numbers` function is defined as before.
3. **Test Class**: The `TEST_CASE` macro is used to define a test case named "Test Replace Phone Numbers".
4. **Sections**: Each section within the test case corresponds to a specific test case from the Python unittest class.
5. **Assertions**: The `REQUIRE` macro is used to assert the expected results. It behaves similarly to `assertEqual` in Python's `unittest`.

### Running the Tests
To run the tests, you need to link against Catch2 and compile your code. Here’s an example of how you might set up your build system (e.g., CMake):

```cmake
cmake_minimum_required(VERSION 3.10)
project(PhoneNumbersTest)

# Find Catch2
find_package(Catch2 REQUIRED)

# Add executable
add_executable(PhoneNumbersTest main.cpp test.cpp)

# Link against Catch2
target_link_libraries(PhoneNumbersTest PRIVATE Catch2::Catch2)

# Add custom command to run tests
add_test(NAME RunTests COMMAND PhoneNumbersTest)
```

In your `main.cpp` file, you would typically include the Catch2 main function:

```cpp
#include <catch2/catch_test_macros.hpp>

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

This setup ensures that your tests are compiled and executed properly using Catch2.