Certainly! Below is the equivalent C++ code for the provided Python function, including the conversion of function signatures, comments, and documentation:

```cpp
#include <iostream>
#include <regex>
#include <string>

/**
 * Replaces all phone numbers in the given string with the string [PHONE_NUM].
 *
 * Example:
 *     Input: "Call me at 123-456-7890."
 *     Output: "Call me at [PHONE_NUM]."
 *
 * @param text The input string that may contain phone numbers.
 * @return The modified string with phone numbers replaced by '[PHONE_NUM]'.
 */
std::string replace_phone_numbers(const std::string& text) {
    // Define a regex pattern to match phone numbers
    // This pattern matches optional country codes, spaces, dashes, and brackets commonly found in phone numbers
    std::regex phone_pattern(R"(\b(?:\+\d{1,2}\s?)?(\d{1,4}[-.\s]?)?\(?\d{1,4}\)?[-.\s]?\d{1,9}[-.\s]?\d{1,9}\b)");

    // Replace all matches in the text with [PHONE_NUM]
    std::string replaced_text = std::regex_replace(text, phone_pattern, "[PHONE_NUM]");

    return replaced_text;
}

int main() {
    // Example usage
    std::string sample_text = "Call me at +1 555-1234 or (555) 555-1234.";
    std::string result = replace_phone_numbers(sample_text);
    std::cout << result << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**: The necessary headers (`<iostream>`, `<regex>`, `<string>`) are included.
2. **Function Documentation**: The function `replace_phone_numbers` is documented using C++ style comments.
   - The function's purpose, example usage, arguments, and return value are clearly described.
3. **Function Definition**: The `replace_phone_numbers` function takes a `const std::string&` as input and returns a `std::string`.
4. **Regex Pattern**: The regex pattern is defined using `std::regex` with a raw string literal `R"(...)"`.
5. **Replacement**: The `std::regex_replace` function is used to replace all matches of the phone number pattern with `[PHONE_NUM]`.
6. **Main Function**: An example usage of the `replace_phone_numbers` function is shown in the `main` function.

This C++ code preserves the original purpose and structure of the Python code, including the comments and documentation.