Certainly! Here is the equivalent Jest test suite for the given Python unittest class. I will convert each test case and ensure that the functionality and logic are preserved.

### Python Unittest Code

```python
import unittest

class TestReplacePhoneNumbers(unittest.TestCase):
    def test_basic_number(self):
        msg = "Call me at 123-456-7890."
        expected = "Call me at [PHONE_NUM]."
        self.assertEqual(replace_phone_numbers(msg), expected)

    def test_number_with_parentheses(self):
        msg = "Our office number is 123 456-7890."
        expected = "Our office number is [PHONE_NUM]."
        self.assertEqual(replace_phone_numbers(msg), expected)

    def test_number_with_dots(self):
        msg = "Fax us at 123.456.7890."
        expected = "Fax us at [PHONE_NUM]."
        self.assertEqual(replace_phone_numbers(msg), expected)

    def test_no_phone_number(self):
        msg = "Hello, please reply to this email."
        expected = "Hello, please reply to this email."
        self.assertEqual(replace_phone_numbers(msg), expected)
```

### Equivalent Jest Test Suite

First, let's define the `replacePhoneNumbers` function in JavaScript:

```javascript
function replacePhoneNumbers(text) {
    // Define a regex pattern to match phone numbers
    // This pattern matches optional country codes, spaces, dashes, and brackets commonly found in phone numbers
    const phonePattern = /\b(?:\+\d{1,2}\s?)?(\d{1,4}[-.\s]?)?\(?\d{1,4}\)?[-.\s]?\d{1,9}[-.\s]?\d{1,9}\b/g;

    // Replace all matches in the text with [PHONE_NUM]
    const replacedText = text.replace(phonePattern, '[PHONE_NUM]');

    return replacedText;
}
```

Now, let's write the Jest test suite:

```javascript
const replacePhoneNumbers = require('./path/to/replacePhoneNumbers'); // Adjust the path as needed

describe('replacePhoneNumbers', () => {
    it('should replace a basic phone number', () => {
        const msg = "Call me at 123-456-7890.";
        const expected = "Call me at [PHONE_NUM].";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });

    it('should replace a phone number with parentheses', () => {
        const msg = "Our office number is 123 456-7890.";
        const expected = "Our office number is [PHONE_NUM].";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });

    it('should replace a phone number with dots', () => {
        const msg = "Fax us at 123.456.7890.";
        const expected = "Fax us at [PHONE_NUM].";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });

    it('should not replace text without a phone number', () => {
        const msg = "Hello, please reply to this email.";
        const expected = "Hello, please reply to this email.";
        expect(replacePhoneNumbers(msg)).toBe(expected);
    });
});
```

### Explanation:
1. **Function Definition**:
   - The `replacePhoneNumbers` function is defined in a separate file and imported using `require`. Adjust the path as needed based on your project structure.

2. **Test Suite**:
   - The `describe` block defines the test suite named `replacePhoneNumbers`.
   - Each `it` block represents a test case.
   - The `expect` function is used to assert the expected outcome using `toBe` matcher, which checks for strict equality.

3. **Assertions**:
   - The `expect(replacePhoneNumbers(msg)).toBe(expected)` assertion ensures that the output matches the expected result.

This Jest test suite maintains the same functionality and logic as the original Python unittest class, ensuring that all test cases are properly converted and tested.