Certainly! Below is the equivalent TypeScript code using Jest for testing the `containsEmail` function. The test cases will be converted to Jest assertions and will include the necessary type annotations and setup.

### TypeScript Code

First, let's define the `containsEmail` function:

```typescript
/**
 * Check if the given text contains an email address.
 *
 * @param text - The string to search for an email address.
 * @returns True if an email address is found, False otherwise.
 */
function containsEmail(text: string): boolean {
    // Define a regex pattern for validating an email address
    const emailPattern = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/;

    // Search for the email pattern in the text
    return emailPattern.test(text);
}

// Example usage
console.log(containsEmail("Hello, my email is example@example.com"));  // Should return true
console.log(containsEmail("No email here"));  // Should return false
```

### Jest Test Class

Now, let's define the Jest test class:

```typescript
import { test } from 'node:re';

describe('TestContainsEmail', () => {
    it('test_contains_valid_email', () => {
        // Test if a valid email is detected in the string.
        const testString = "You can reach me at example@example.com for more info.";
        expect(containsEmail(testString)).toBe(true);
    });

    it('test_contains_email_with_special_characters', () => {
        // Test if an email with special characters is detected.
        const testString = "My email address is john.doe123+test@gmail.com!";
        expect(containsEmail(testString)).toBe(true);
    });

    it('test_does_not_contain_email', () => {
        // Test a string that does not contain any email address.
        const testString = "This string does not have an email.";
        expect(containsEmail(testString)).toBe(false);
    });

    it('test_contains_multiple_emails', () => {
        // Test a string containing multiple email addresses.
        const testString = "You can contact me at example1@example.com or example2@example.com.";
        expect(containsEmail(testString)).toBe(true);
    });

    it('test_contains_invalid_email_format', () => {
        // Test a string with an invalid email format.
        const testString = "Please contact me at example@.com or test@domain.";
        expect(containsEmail(testString)).toBe(false);
    });
});
```

### Explanation:
1. **Function Definition**:
   - The `containsEmail` function is defined with the same logic and type annotations as in the Python code.

2. **Jest Test Suite**:
   - The `describe` block is used to group the test cases.
   - Each test case is defined using the `it` function, which takes a description and a callback function.
   - The `expect` function is used to assert the expected behavior of the `containsEmail` function.

3. **Assertions**:
   - `expect(containsEmail(testString)).toBe(true)` is used to check if the function returns `true` for strings containing valid emails.
   - `expect(containsEmail(testString)).toBe(false)` is used to check if the function returns `false` for strings without valid emails.

This TypeScript code preserves the original functionality and logic of the Python unittest test cases while adapting them to Jest's testing framework.