Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of comments and docstrings into C++ documentation standards:

```cpp
#include <iostream>
#include <regex>
#include <string>

/**
 * Check if the given text contains an email address.
 *
 * @param text The string to search for an email address.
 * @return True if an email address is found, False otherwise.
 */
bool contains_email(const std::string& text) {
    // Define a regex pattern for validating an email address
    std::regex email_pattern("[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}");

    // Search for the email pattern in the text
    return std::regex_search(text, email_pattern);
}

int main() {
    // Test the function with some example texts
    std::string test1 = "Contact me at example@example.com";
    std::string test2 = "No email here";

    // Output the results
    std::cout << "Test 1 (Contains email): " << contains_email(test1) << std::endl;
    std::cout << "Test 2 (Does not contain email): " << contains_email(test2) << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**:
   - `<iostream>`: For input/output operations.
   - `<regex>`: For regular expression support.
   - `<string>`: For string manipulation.

2. **Function `contains_email`**:
   - Takes a `const std::string& text` parameter.
   - Defines a regex pattern `email_pattern` to validate email addresses.
   - Uses `std::regex_search` to find if the pattern matches within the text.
   - Returns `true` if a match is found; otherwise, returns `false`.

3. **Documentation Comments**:
   - Multi-line comments (`/* ... */`) are used for the function documentation.
   - Single-line comments (`//`) are used for inline comments.

4. **Main Function**:
   - Tests the `contains_email` function with two example strings.
   - Prints the results to verify correctness.

This code preserves the original purpose and structure of the Python code, translating it into idiomatic C++ with appropriate documentation.