Certainly! Below is the equivalent C++ code that preserves the original purpose and structure of the Python code, including comments and documentation standards.

```cpp
#include <iostream>
#include <regex>
#include <string>

// Function to check if the given text contains an email address
bool contains_email(const std::string& text) {
    // Define a regex pattern for validating an email address
    std::regex email_pattern(R"([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})");

    // Search for the email pattern in the text
    return std::regex_search(text, email_pattern);
}

int main() {
    // Example usage
    std::string text1 = "Contact us at support@example.com";
    std::string text2 = "No email here";

    std::cout << "Text 1 contains email: " << contains_email(text1) << std::endl;
    std::cout << "Text 2 contains email: " << contains_email(text2) << std::endl;

    return 0;
}

/* 
Check if the given text contains an email address.

Args:
    text (const std::string&): The string to search for an email address.

Returns:
    bool: True if an email address is found, False otherwise.
*/
```

### Explanation:

1. **Header Files**:
   - `<iostream>` for input/output operations.
   - `<regex>` for regular expression operations.
   - `<string>` for string handling.

2. **Function Definition**:
   - `contains_email`: This function takes a `const std::string&` as input and returns a `bool` indicating whether the string contains an email address.

3. **Regex Pattern**:
   - The regex pattern is defined using `std::regex` with a raw string literal (`R"(...)"`) to make it easier to write and read.

4. **Regex Search**:
   - `std::regex_search` is used to search for the pattern within the given text. It returns `true` if the pattern is found and `false` otherwise.

5. **Comments and Documentation**:
   - Single-line comments are used for inline comments (`//`).
   - Multi-line comments are used for detailed documentation (`/* ... */`).

6. **Main Function**:
   - Demonstrates how to call the `contains_email` function with example strings and prints the results.

This ensures that the C++ code is well-documented and follows the same structure and functionality as the original Python code.