Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a set of Catch2 test cases, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro for each test case.

Here's the complete C++ code:

```cpp
#include <iostream>
#include <regex>
#include <string>
#include <catch2/catch_test_macros.hpp>

// Function to check if the given text contains an email address
bool contains_email(const std::string& text) {
    // Define a regex pattern for validating an email address
    std::regex email_pattern(R"([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})");

    // Search for the email pattern in the text
    return std::regex_search(text, email_pattern);
}

// Test class using Catch2
TEST_CASE("TestContainsEmail", "[email]") {
    SECTION("test_contains_valid_email") {
        // Test if a valid email is detected in the string
        std::string test_string = "You can reach me at example@example.com for more info.";
        REQUIRE(contains_email(test_string));
    }

    SECTION("test_contains_email_with_special_characters") {
        // Test if an email with special characters is detected
        std::string test_string = "My email address is john.doe123+test@gmail.com!";
        REQUIRE(contains_email(test_string));
    }

    SECTION("test_does_not_contain_email") {
        // Test a string that does not contain any email address
        std::string test_string = "This string does not have an email.";
        REQUIRE_FALSE(contains_email(test_string));
    }

    SECTION("test_contains_multiple_emails") {
        // Test a string containing multiple email addresses
        std::string test_string = "You can contact me at example1@example.com or example2@example.com.";
        REQUIRE(contains_email(test_string));
    }

    SECTION("test_contains_invalid_email_format") {
        // Test a string with an invalid email format
        std::string test_string = "Please contact me at example@.com or test@domain.";
        REQUIRE_FALSE(contains_email(test_string));
    }
}

int main(int argc, char* argv[]) {
    // Run Catch2 tests
    int result = Catch::Session().run(argc, argv);
    return result;
}
```

### Explanation:

1. **Header Files**:
   - `<iostream>` for input/output operations.
   - `<regex>` for regular expression operations.
   - `<string>` for string handling.
   - `<catch2/catch_test_macros.hpp>` for Catch2 test macros.

2. **Function Definition**:
   - `contains_email`: This function takes a `const std::string&` as input and returns a `bool` indicating whether the string contains an email address.

3. **Catch2 Test Class**:
   - `TEST_CASE`: Defines a test case named "TestContainsEmail".
   - `SECTION`: Defines individual test sections within the test case.

4. **Assertions**:
   - `REQUIRE`: Used to assert that a condition is true.
   - `REQUIRE_FALSE`: Used to assert that a condition is false.

5. **Main Function**:
   - Runs the Catch2 tests and returns the result.

This ensures that the C++ code is well-documented and follows the same structure and functionality as the original Python unittest code. Each test case is clearly documented and uses appropriate assertions from the Catch2 framework.