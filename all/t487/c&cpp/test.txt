Here's how you can translate your Python unittest test class into a Catch2 C++ test case:

```cpp
#include <catch2/catch.hpp>
#include <string>
#include <regex>

bool contains_email(const std::string& text) {
    // Regular expression pattern for matching email addresses
    std::regex pattern(R"(\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b)");

    // Use regex_search to check if there is at least one match in the text
    return std::regex_search(text, pattern);
}

TEST_CASE("Contains Email", "[contains_email]") {
    REQUIRE(contains_email("Hello, my email is example@example.com.") == true);
    REQUIRE(contains_email("No email here!") == false);
    REQUIRE(contains_email("Multiple emails: test@test.com and another@another.com") == true);
    REQUIRE(contains_email("") == false);
}
```

In this C++ code:

1. We include the necessary headers (`<catch2/catch.hpp>` for Catch2 testing framework and `<string>`, `<regex>` for standard library features).
2. We define the `contains_email` function which uses regular expressions to find email addresses in a given string.
3. We create a Catch2 test case named "Contains Email". Inside this test case, we have several `REQUIRE` statements to validate our `contains_email` function with different inputs. These statements will automatically pass or fail based on whether the function behaves as expected according to our assertions.