Certainly! Below is the equivalent JavaScript code that preserves the purpose, structure, and documentation style of the provided Python code, using JSDoc format for comments:

```javascript
/**
 * Check if the given text contains an email address.
 *
 * @param {string} text - The string to search for an email address.
 * @returns {boolean} - True if an email address is found, False otherwise.
 */
function containsEmail(text) {
    // Define a regex pattern for validating an email address
    const emailPattern = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/;

    // Search for the email pattern in the text
    return emailPattern.test(text);
}

// Example usage
console.log(containsEmail("Hello, my email is example@example.com"));  // true
console.log(containsEmail("No email here."));  // false
```

### Explanation:

1. **Function Definition**:
   - The function `containsEmail` is defined using the `function` keyword.
   - It takes one parameter `text` of type `string`.

2. **JSDoc Comments**:
   - The JSDoc comment block is placed above the function definition.
   - It includes a brief description of what the function does.
   - The `@param` tag specifies the parameter `text` and its type (`string`).
   - The `@returns` tag specifies the return type (`boolean`).

3. **Regex Pattern**:
   - The regex pattern `[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}` is defined as a regular expression object in JavaScript.

4. **Search for Email**:
   - The `.test()` method is used to check if the pattern matches any part of the input text.
   - The function returns the result of the regex test, which is a boolean value indicating whether an email address was found.

5. **Example Usage**:
   - Example usage demonstrates how to call the function with different inputs and prints the results to the console.

This JavaScript code preserves the original functionality and adheres to JavaScript documentation standards using JSDoc.