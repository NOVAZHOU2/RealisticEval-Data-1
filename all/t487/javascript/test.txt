Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting it to Jest's syntax and conventions.

### Python Unittest Code

```python
import unittest

class TestContainsEmail(unittest.TestCase):

    def test_contains_valid_email(self):
        """Test if a valid email is detected in the string."""
        test_string = "You can reach me at example@example.com for more info."
        self.assertTrue(contains_email(test_string))

    def test_contains_email_with_special_characters(self):
        """Test if an email with special characters is detected."""
        test_string = "My email address is john.doe123+test@gmail.com!"
        self.assertTrue(contains_email(test_string))

    def test_does_not_contain_email(self):
        """Test a string that does not contain any email address."""
        test_string = "This string does not have an email."
        self.assertFalse(contains_email(test_string))

    def test_contains_multiple_emails(self):
        """Test a string containing multiple email addresses."""
        test_string = "You can contact me at example1@example.com or example2@example.com."
        self.assertTrue(contains_email(test_string))

    def test_contains_invalid_email_format(self):
        """Test a string with an invalid email format."""
        test_string = "Please contact me at example@.com or test@domain."
        self.assertFalse(contains_email(test_string))
```

### Equivalent Jest Test Suite

```javascript
const containsEmail = require('./containsEmail'); // Import the containsEmail function

describe('TestContainsEmail', () => {
    describe('Testing email detection', () => {
        it('should detect a valid email in the string', () => {
            const testString = "You can reach me at example@example.com for more info.";
            expect(containsEmail(testString)).toBe(true);
        });

        it('should detect an email with special characters', () => {
            const testString = "My email address is john.doe123+test@gmail.com!";
            expect(containsEmail(testString)).toBe(true);
        });

        it('should not detect an email in a string without emails', () => {
            const testString = "This string does not have an email.";
            expect(containsEmail(testString)).toBe(false);
        });

        it('should detect multiple emails in a string', () => {
            const testString = "You can contact me at example1@example.com or example2@example.com.";
            expect(containsEmail(testString)).toBe(true);
        });

        it('should not detect an email with an invalid format', () => {
            const testString = "Please contact me at example@.com or test@domain.";
            expect(containsEmail(testString)).toBe(false);
        });
    });
});
```

### Explanation:
1. **Import Statement**:
   - The `containsEmail` function is imported from the file `containsEmail.js`.

2. **Describe Block**:
   - The `describe` block is used to group related tests together. In this case, we use `describe('TestContainsEmail', () => { ... })` to group all the tests related to email detection.

3. **It Blocks**:
   - Each `it` block represents a specific test case.
   - The description of each test case is provided within the `it` block.
   - Assertions are made using `expect` and `toBe` to check the expected boolean values returned by the `containsEmail` function.

4. **Test Cases**:
   - Each test case is structured to match the corresponding Python test case.
   - The `expect` function is used to assert the expected behavior of the `containsEmail` function.

By following these steps, the Jest test suite maintains the same functionality and logic as the original Python unittest class.