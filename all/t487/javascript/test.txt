Certainly! Below is the equivalent JavaScript code using Jest to test the `containsEmail` function. I will convert the Python unittest test class into a Jest test suite, ensuring that the functionality and logic of the tests are maintained.

### Python Code

```python
import re

def contains_email(text: str) -> bool:
    """
    Check if the given text contains an email address.

    Args:
        text (str): The string to search for an email address.

    Returns:
        bool: True if an email address is found, False otherwise.
    """
    email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
    return re.search(email_pattern, text) is not None
```

### Equivalent JavaScript Code with Jest Tests

```javascript
const containsEmail = require('./containsEmail'); // Assuming the function is in a separate file

describe('containsEmail', () => {
    test('should return true for valid email addresses', () => {
        expect(containsEmail("Hello, my email is example@example.com")).toBe(true);
        expect(containsEmail("Contact me at john.doe@example.co.uk")).toBe(true);
    });

    test('should return false for strings without email addresses', () => {
        expect(containsEmail("No email here.")).toBe(false);
        expect(containsEmail("Just some text without emails.")).toBe(false);
    });

    test('should handle edge cases correctly', () => {
        expect(containsEmail("")).toBe(false); // Empty string
        expect(containsEmail("example.com")).toBe(false); // No '@' symbol
        expect(containsEmail("example@example")).toBe(false); // Missing domain extension
    });
});

// containsEmail.js
/**
 * Check if the given text contains an email address.
 *
 * @param {string} text - The string to search for an email address.
 * @returns {boolean} - True if an email address is found, False otherwise.
 */
function containsEmail(text) {
    const emailPattern = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/;
    return emailPattern.test(text);
}

module.exports = containsEmail;
```

### Explanation:

1. **Function Definition**:
   - The `containsEmail` function is defined in a separate file `containsEmail.js`.
   - The function uses a regex pattern to check if the input text contains an email address.

2. **Jest Test Suite**:
   - The `describe` block defines a test suite named `containsEmail`.
   - Each `test` block contains assertions using `expect` and `toBe` to verify the behavior of the function.

3. **Test Cases**:
   - **Valid Email Addresses**:
     - `"Hello, my email is example@example.com"` should return `true`.
     - `"Contact me at john.doe@example.co.uk"` should return `true`.
   - **Strings Without Email Addresses**:
     - `"No email here."` should return `false`.
     - `"Just some text without emails."` should return `false`.
   - **Edge Cases**:
     - An empty string should return `false`.
     - A string missing the `@` symbol should return `false`.
     - A string missing the domain extension should return `false`.

4. **File Structure**:
   - The `containsEmail` function is exported from `containsEmail.js`.
   - The test file imports the `containsEmail` function and runs the tests.

This setup ensures that the functionality and logic of the tests are preserved and that the Jest framework is used effectively to validate the behavior of the `containsEmail` function.