Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The functionality and logic of the tests are preserved, and appropriate JUnit annotations and assertion methods are used.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Test class for checking if a string contains an email address.
 */
public class Tester {

    /**
     * Test if a valid email is detected in the string.
     */
    @Test
    public void testContainsValidEmail() {
        String testString = "You can reach me at example@example.com for more info.";
        assertTrue(containsEmail(testString));
    }

    /**
     * Test if an email with special characters is detected.
     */
    @Test
    public void testContainsEmailWithSpecialCharacters() {
        String testString = "My email address is john.doe123+test@gmail.com!";
        assertTrue(containsEmail(testString));
    }

    /**
     * Test a string that does not contain any email address.
     */
    @Test
    public void testDoesNotContainEmail() {
        String testString = "This string does not have an email.";
        assertFalse(containsEmail(testString));
    }

    /**
     * Test a string containing multiple email addresses.
     */
    @Test
    public void testContainsMultipleEmails() {
        String testString = "You can contact me at example1@example.com or example2@example.com.";
        assertTrue(containsEmail(testString));
    }

    /**
     * Test a string with an invalid email format.
     */
    @Test
    public void testContainsInvalidEmailFormat() {
        String testString = "Please contact me at example@.com or test@domain.";
        assertFalse(containsEmail(testString));
    }
}
```

### Explanation:
1. **Package Declaration**:
   ```java
   package org.real.temp;
   ```

2. **Imports**:
   ```java
   import org.junit.Test;
   import static org.junit.Assert.*;
   ```

3. **Class Definition**:
   ```java
   public class Tester {
   ```

4. **JUnit Test Methods**:
   - Each test method is annotated with `@Test`.
   - Each method uses appropriate assertions (`assertTrue` and `assertFalse`) to validate the behavior of the `containsEmail` method.

5. **Test Methods**:
   - **`testContainsValidEmail`**:
     ```java
     @Test
     public void testContainsValidEmail() {
         String testString = "You can reach me at example@example.com for more info.";
         assertTrue(containsEmail(testString));
     }
     ```

   - **`testContainsEmailWithSpecialCharacters`**:
     ```java
     @Test
     public void testContainsEmailWithSpecialCharacters() {
         String testString = "My email address is john.doe123+test@gmail.com!";
         assertTrue(containsEmail(testString));
     }
     ```

   - **`testDoesNotContainEmail`**:
     ```java
     @Test
     public void testDoesNotContainEmail() {
         String testString = "This string does not have an email.";
         assertFalse(containsEmail(testString));
     }
     ```

   - **`testContainsMultipleEmails`**:
     ```java
     @Test
     public void testContainsMultipleEmails() {
         String testString = "You can contact me at example1@example.com or example2@example.com.";
         assertTrue(containsEmail(testString));
     }
     ```

   - **`testContainsInvalidEmailFormat`**:
     ```java
     @Test
     public void testContainsInvalidEmailFormat() {
         String testString = "Please contact me at example@.com or test@domain.";
         assertFalse(containsEmail(testString));
     }
     ```

This Java test class preserves the functionality and logic of the original Python unittest class, ensuring that all tests are properly structured and annotated using JUnit.