Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. This test class will ensure that the `containsEmail` method is thoroughly tested.

### Python Code

```python
import re


def contains_email(text: str) -> bool:
    """
    Check if the given text contains an email address.

    Args:
        text (str): The string to search for an email address.

    Returns:
        bool: True if an email address is found, False otherwise.
    """
    email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
    return bool(re.search(email_pattern, text))
```

### Java Test Class

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Test class for the containsEmail method.
 */
public class Tester {

    /**
     * Checks if the given text contains an email address.
     *
     * @param text The string to search for an email address.
     * @return true if an email address is found, false otherwise.
     */
    public static boolean containsEmail(String text) {
        String emailPattern = "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}";
        return text.matches(emailPattern);
    }

    @Test
    public void testContainsEmailWithValidEmail() {
        String textWithEmail = "Hello, my email is example@example.com";
        assertTrue("The text should contain an email address", containsEmail(textWithEmail));
    }

    @Test
    public void testContainsEmailWithoutEmail() {
        String textWithoutEmail = "No email here.";
        assertFalse("The text should not contain an email address", containsEmail(textWithoutEmail));
    }

    @Test
    public void testContainsEmailWithMultipleEmails() {
        String textWithMultipleEmails = "Contact me at first@example.com or second@example.org";
        assertTrue("The text should contain an email address", containsEmail(textWithMultipleEmails));
    }

    @Test
    public void testContainsEmailWithSpecialCharacters() {
        String textWithSpecialChars = "Email with special chars: test.email+123@example.com";
        assertTrue("The text should contain an email address", containsEmail(textWithSpecialChars));
    }

    @Test
    public void testContainsEmailWithInvalidEmail() {
        String textWithInvalidEmail = "Not an email: example@example";
        assertFalse("The text should not contain a valid email address", containsEmail(textWithInvalidEmail));
    }
}
```

### Explanation:

1. **Package and Class Definition**:
   - The package `org.real.temp` is defined at the top.
   - The class `Tester` is defined with public access.

2. **JUnit Annotations**:
   - The `@Test` annotation is used to mark each test method.

3. **JUnit Assertions**:
   - `assertTrue` and `assertFalse` methods are used to assert the expected outcomes of the tests.

4. **Method Implementation**:
   - The `containsEmail` method is implemented using the `matches` method of the `String` class, which is equivalent to the Python `re.search` method.

5. **Test Methods**:
   - Each test method checks different scenarios:
     - `testContainsEmailWithValidEmail`: Tests a string with a valid email address.
     - `testContainsEmailWithoutEmail`: Tests a string without any email address.
     - `testContainsEmailWithMultipleEmails`: Tests a string with multiple email addresses.
     - `testContainsEmailWithSpecialCharacters`: Tests a string with special characters in the email address.
     - `testContainsEmailWithInvalidEmail`: Tests a string with an invalid email address.

This Java test class ensures that the `containsEmail` method is thoroughly tested and behaves as expected.