Sure! Below is the equivalent JavaScript test case using Jest for the given Python unittest test class `Colors`. Since the original Python methods don't have any implementation, I'll assume they simply return the input text wrapped in ANSI escape codes for colors.

```javascript
// colors.js
class Colors {
  static red(text) {
    return `\x1b[31m${text}\x1b[0m`;
  }

  static green(text) {
    return `\x1b[32m${text}\x1b[0m`;
  }

  static blue(text) {
    return `\x1b[34m${text}\x1b[0m`;
  }

  static yellow(text) {
    return `\x1b[33m${text}\x1b[0m`;
  }

  static magenta(text) {
    return `\x1b[35m${text}\x1b[0m`;
  }

  static cyan(text) {
    return `\x1b[36m${text}\x1b[0m`;
  }
}

module.exports = Colors;
```

Now, let's create a Jest test file for these functions:

```javascript
// colors.test.js
const Colors = require('./colors');

describe('Colors', () => {
  it('should return red colored text', () => {
    const result = Colors.red('Hello');
    expect(result).toBe('\x1b[31mHello\x1b[0m');
  });

  it('should return green colored text', () => {
    const result = Colors.green('Hello');
    expect(result).toBe('\x1b[32mHello\x1b[0m');
  });

  it('should return blue colored text', () => {
    const result = Colors.blue('Hello');
    expect(result).toBe('\x1b[34mHello\x1b[0m');
  });

  it('should return yellow colored text', () => {
    const result = Colors.yellow('Hello');
    expect(result).toBe('\x1b[33mHello\x1b[0m');
  });

  it('should return magenta colored text', () => {
    const result = Colors.magenta('Hello');
    expect(result).toBe('\x1b[35mHello\x1b[0m');
  });

  it('should return cyan colored text', () => {
    const result = Colors.cyan('Hello');
    expect(result).toBe('\x1b[36mHello\x1b[0m');
  });
});
```

To run the tests, you need to have Jest installed. If not, you can install it globally or locally:

```sh
npm install --save-dev jest
```

Then, you can run the tests using the following command:

```sh
npx jest
```

This will execute the tests and output the results.