Here is the equivalent JavaScript code following the given requirements:

```javascript
class Colors {

    /**
     * Returns the text in red color
     * @param {string} text - The text to be colored
     * @returns {string} - The colored text
     */
    static red(text) {
        // Implementation goes here
    }

    /**
     * Returns the text in green color
     * @param {string} text - The text to be colored
     * @returns {string} - The colored text
     */
    static green(text) {
        // Implementation goes here
    }

    /**
     * Returns the text in blue color
     * @param {string} text - The text to be colored
     * @returns {string} - The colored text
     */
    static blue(text) {
        // Implementation goes here
    }

    /**
     * Returns the text in yellow color
     * @param {string} text - The text to be colored
     * @returns {string} - The colored text
     */
    static yellow(text) {
        // Implementation goes here
    }

    /**
     * Returns the text in magenta color
     * @param {string} text - The text to be colored
     * @returns {string} - The colored text
     */
    static magenta(text) {
        // Implementation goes here
    }

    /**
     * Returns the text in cyan color
     * @param {string} text - The text to be colored
     * @returns {string} - The colored text
     */
    static cyan(text) {
        // Implementation goes here
    }
}
```

In this conversion, I have replaced Python's `@staticmethod` decorator with the `static` keyword in JavaScript, which defines a static method for the class. Additionally, the Python comments have been converted to JSDoc comments, providing a structured way to document the purpose of each method, its parameters, and return type.