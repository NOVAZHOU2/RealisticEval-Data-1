Certainly! Below is the equivalent TypeScript code for the provided Python code, including appropriate JSDoc-style documentation comments:

```typescript
class Colors {
  /**
   * Returns the given text in red color.
   * @param text The text to color
   * @returns The colored text
   */
  public static red(text: string): string {
    // Implementation goes here
    return text;
  }

  /**
   * Returns the given text in green color.
   * @param text The text to color
   * @returns The colored text
   */
  public static green(text: string): string {
    // Implementation goes here
    return text;
  }

  /**
   * Returns the given text in blue color.
   * @param text The text to color
   * @returns The colored text
   */
  public static blue(text: string): string {
    // Implementation goes here
    return text;
  }

  /**
   * Returns the given text in yellow color.
   * @param text The text to color
   * @returns The colored text
   */
  public static yellow(text: string): string {
    // Implementation goes here
    return text;
  }

  /**
   * Returns the given text in magenta color.
   * @param text The text to color
   * @returns The colored text
   */
  public static magenta(text: string): string {
    // Implementation goes here
    return text;
  }

  /**
   * Returns the given text in cyan color.
   * @param text The text to color
   * @returns The colored text
   */
  public static cyan(text: string): string {
    // Implementation goes here
    return text;
  }
}
```

### Explanation:
1. **Class Definition**: The `Colors` class is defined with static methods.
2. **JSDoc Comments**: Each method includes JSDoc-style comments that describe the purpose of the method, its parameters, and its return type.
3. **Method Signatures**: The method signatures match the Python function signatures, with appropriate TypeScript types.
4. **Implementation Placeholder**: Each method includes a placeholder comment (`// Implementation goes here`) where you can add the actual implementation.

This ensures that the TypeScript code is well-documented and follows best practices for static type checking and readability.