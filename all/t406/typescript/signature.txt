Here's the equivalent TypeScript code for the given Python class `Colors`:

```typescript
class Colors {
  /**
   * Returns the text in red color.
   * @param text The text to be colored.
   * @returns The text in red color.
   */
  static red(text: string): string {
    return text;
    // Note: Actual implementation of coloring logic should go here.
  }

  /**
   * Returns the text in green color.
   * @param text The text to be colored.
   * @returns The text in green color.
   */
  static green(text: string): string {
    return text;
    // Note: Actual implementation of coloring logic should go here.
  }

  /**
   * Returns the text in blue color.
   * @param text The text to be colored.
   * @returns The text in blue color.
   */
  static blue(text: string): string {
    return text;
    // Note: Actual implementation of coloring logic should go here.
  }

  /**
   * Returns the text in yellow color.
   * @param text The text to be colored.
   * @returns The text in yellow color.
   */
  static yellow(text: string): string {
    return text;
    // Note: Actual implementation of coloring logic should go here.
  }

  /**
   * Returns the text in magenta color.
   * @param text The text to be colored.
   * @returns The text in magenta color.
   */
  static magenta(text: string): string {
    return text;
    // Note: Actual implementation of coloring logic should go here.
  }

  /**
   * Returns the text in cyan color.
   * @param text The text to be colored.
   * @returns The text in cyan color.
   */
  static cyan(text: string): string {
    return text;
    // Note: Actual implementation of coloring logic should go here.
  }
}
```

### Explanation:
1. **Static Methods**: In TypeScript, we use the `static` keyword to indicate that a method belongs to the class itself rather than an instance of the class.
2. **Type Annotations**: The type annotations for parameters and return values (`string`) are preserved.
3. **Documentation Comments**: The Python docstrings are converted to JSDoc-style comments, which are commonly used in TypeScript for documenting methods.

This ensures that the TypeScript code is semantically equivalent to the Python code and includes proper documentation for each method.