Sure! Here's how you can convert the given Python `unittest` test class into a TypeScript test case using Jest:

```typescript
import { describe, it } from 'jest';

describe('Colors', () => {
  describe('red', () => {
    it('should return text wrapped in red color code', () => {
      const result = Colors.red('Hello');
      expect(result).toBe('\x1b[31mHello\x1b[0m'); // Assuming ANSI escape codes for colors
    });
  });

  describe('green', () => {
    it('should return text wrapped in green color code', () => {
      const result = Colors.green('Hello');
      expect(result).toBe('\x1b[32mHello\x1b[0m'); // Assuming ANSI escape codes for colors
    });
  });

  describe('blue', () => {
    it('should return text wrapped in blue color code', () => {
      const result = Colors.blue('Hello');
      expect(result).toBe('\x1b[34mHello\x1b[0m'); // Assuming ANSI escape codes for colors
    });
  });

  describe('yellow', () => {
    it('should return text wrapped in yellow color code', () => {
      const result = Colors.yellow('Hello');
      expect(result).toBe('\x1b[33mHello\x1b[0m'); // Assuming ANSI escape codes for colors
    });
  });

  describe('magenta', () => {
    it('should return text wrapped in magenta color code', () => {
      const result = Colors.magenta('Hello');
      expect(result).toBe('\x1b[35mHello\x1b[0m'); // Assuming ANSI escape codes for colors
    });
  });

  describe('cyan', () => {
    it('should return text wrapped in cyan color code', () => {
      const result = Colors.cyan('Hello');
      expect(result).toBe('\x1b[36mHello\x1b[0m'); // Assuming ANSI escape codes for colors
    });
  });
});

class Colors {
  static red(text: string): string {
    return `\x1b[31m${text}\x1b[0m`;
  }

  static green(text: string): string {
    return `\x1b[32m${text}\x1b[0m`;
  }

  static blue(text: string): string {
    return `\x1b[34m${text}\x1b[0m`;
  }

  static yellow(text: string): string {
    return `\x1b[33m${text}\x1b[0m`;
  }

  static magenta(text: string): string {
    return `\x1b[35m${text}\x1b[0m`;
  }

  static cyan(text: string): string {
    return `\x1b[36m${text}\x1b[0m`;
  }
}
```

In this TypeScript version, I've used Jest's `describe` and `it` functions to create the test cases. The `Colors` class is also included with the static methods that format text with ANSI escape codes for different colors. The test cases check if the output of each method matches the expected ANSI escape code.