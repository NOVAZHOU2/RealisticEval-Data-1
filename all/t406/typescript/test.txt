Given the Python class `Colors` with static methods for formatting text in different colors, I'll provide a TypeScript equivalent using Jest for testing. However, since the actual implementation of these methods (e.g., how they format the text) isn't given, I'll assume placeholders for them. Here's how you can set up the Jest test class:

First, let's define the `Colors` class in TypeScript:

```typescript
class Colors {
  static red(text: string): string {
    // Placeholder implementation
    return `\x1b[31m${text}\x1b[0m`;
  }

  static green(text: string): string {
    // Placeholder implementation
    return `\x1b[32m${text}\x1b[0m`;
  }

  static blue(text: string): string {
    // Placeholder implementation
    return `\x1b[34m${text}\x1b[0m`;
  }

  static yellow(text: string): string {
    // Placeholder implementation
    return `\x1b[33m${text}\x1b[0m`;
  }

  static magenta(text: string): string {
    // Placeholder implementation
    return `\x1b[35m${text}\x1b[0m`;
  }

  static cyan(text: string): string {
    // Placeholder implementation
    return `\x1b[36m${text}\x1b[0m`;
  }
}
```

Now, let's create the Jest test file:

```typescript
import { describe, it, expect } from '@jest/globals';
import { Colors } from './colors'; // Assuming this is the path to your Colors class

describe('Colors', () => {
  it('should return the correct red color formatted text', () => {
    const input = 'Hello';
    const expectedOutput = '\x1b[31mHello\x1b[0m';
    expect(Colors.red(input)).toBe(expectedOutput);
  });

  it('should return the correct green color formatted text', () => {
    const input = 'World';
    const expectedOutput = '\x1b[32mWorld\x1b[0m';
    expect(Colors.green(input)).toBe(expectedOutput);
  });

  it('should return the correct blue color formatted text', () => {
    const input = 'Blue';
    const expectedOutput = '\x1b[34mBlue\x1b[0m';
    expect(Colors.blue(input)).toBe(expectedOutput);
  });

  it('should return the correct yellow color formatted text', () => {
    const input = 'Yellow';
    const expectedOutput = '\x1b[33mYellow\x1b[0m';
    expect(Colors.yellow(input)).toBe(expectedOutput);
  });

  it('should return the correct magenta color formatted text', () => {
    const input = 'Magenta';
    const expectedOutput = '\x1b[35mMagenta\x1b[0m';
    expect(Colors.magenta(input)).toBe(expectedOutput);
  });

  it('should return the correct cyan color formatted text', () => {
    const input = 'Cyan';
    const expectedOutput = '\x1b[36mCyan\x1b[0m';
    expect(Colors.cyan(input)).toBe(expectedOutput);
  });
});
```

In this Jest test file, we use the `describe` function to group our tests and the `it` function to define each individual test case. We use `expect` to assert the expected behavior of each method.

Make sure to install Jest and its dependencies if you haven't already:

```sh
npm install --save-dev jest @types/jest ts-jest
```

And configure Jest in your `package.json`:

```json
{
  "scripts": {
    "test": "jest"
  },
  "devDependencies": {
    "jest": "^29.0.0",
    "@types/jest": "^29.0.0",
    "ts-jest": "^29.0.0"
  }
}
```

This setup ensures that Jest is properly configured and ready to run your tests.