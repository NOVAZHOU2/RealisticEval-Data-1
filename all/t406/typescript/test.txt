Certainly! Below is the equivalent TypeScript test class using Jest, which preserves the functionality and logic of the provided Python unittest test class. The assert methods from `unittest` are mapped to the appropriate Jest assertions.

### TypeScript Code with Jest Testing

First, ensure you have Jest installed in your TypeScript project:
```sh
npm install --save-dev jest @types/jest ts-jest
```

Add Jest configuration to your `tsconfig.json`:
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"],
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node"
  }
}
```

Now, let's write the TypeScript test class using Jest:

```typescript
import { Colors } from './Colors'; // Import the Colors class

describe('Colors', () => {
  it('test_red', () => {
    const inputText = 'Hello';
    const expectedOutput = '\033[91mHello\033[0m';
    expect(Colors.red(inputText)).toBe(expectedOutput);
  });

  it('test_green', () => {
    const inputText = 'Hello';
    const expectedOutput = '\033[92mHello\033[0m';
    expect(Colors.green(inputText)).toBe(expectedOutput);
  });

  it('test_blue', () => {
    const inputText = 'Hello';
    const expectedOutput = '\033[94mHello\033[0m';
    expect(Colors.blue(inputText)).toBe(expectedOutput);
  });

  it('test_yellow', () => {
    const inputText = 'Hello';
    const expectedOutput = '\033[93mHello\033[0m';
    expect(Colors.yellow(inputText)).toBe(expectedOutput);
  });

  it('test_magenta', () => {
    const inputText = 'Hello';
    const expectedOutput = '\033[95mHello\033[0m';
    expect(Colors.magenta(inputText)).toBe(expectedOutput);
  });

  it('test_cyan', () => {
    const inputText = 'Hello';
    const expectedOutput = '\033[96mHello\033[0m';
    expect(Colors.cyan(inputText)).toBe(expectedOutput);
  });

  it('test_combined_colors', () => {
    const inputTextRed = Colors.red('Red');
    const inputTextBlue = Colors.blue('Blue');
    const inputTextCombined = `${inputTextRed} and ${inputTextBlue}`;
    const expectedOutput = '\033[91mRed\033[0m and \033[94mBlue\033[0m';
    expect(inputTextCombined).toBe(expectedOutput);
  });
});
```

### Explanation:
1. **Import Statement**: The `Colors` class is imported at the beginning.
2. **Describe Block**: The `describe` block groups all the tests under the `Colors` class.
3. **It Blocks**: Each `it` block represents a single test case.
4. **Expect Assertions**: The `expect` function is used with `toBe` to check if the output matches the expected value.
5. **Test Data**: The test data and expected outputs are defined within each test case.

This setup ensures that the tests are structured and documented clearly, and the assertions are appropriately mapped from Python's `unittest` to Jest's assertion methods.