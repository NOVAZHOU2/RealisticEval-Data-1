To convert the given Python code into C++, we need to create a class with static methods that mimic the functionality of the Python code. The main difference will be in the syntax and the way we define the methods. Below is the equivalent C++ code:

```cpp
#include <iostream>
#include <string>

class Colors {
public:
    // Static method to return text in red color
    static std::string red(const std::string& text) {
        return "\033[91m" + text + "\033[0m";
    }

    // Static method to return text in green color
    static std::string green(const std::string& text) {
        return "\033[92m" + text + "\033[0m";
    }

    // Static method to return text in blue color
    static std::string blue(const std::string& text) {
        return "\033[94m" + text + "\033[0m";
    }

    // Static method to return text in yellow color
    static std::string yellow(const std::string& text) {
        return "\033[93m" + text + "\033[0m";
    }

    // Static method to return text in magenta color
    static std::string magenta(const std::string& text) {
        return "\033[95m" + text + "\033[0m";
    }

    // Static method to return text in cyan color
    static std::string cyan(const std::string& text) {
        return "\033[96m" + text + "\033[0m";
    }
};

// Example usage
int main() {
    std::cout << Colors::red("This text is red") << std::endl;
    std::cout << Colors::green("This text is green") << std::endl;
    std::cout << Colors::blue("This text is blue") << std::endl;
    std::cout << Colors::yellow("This text is yellow") << std::endl;
    std::cout << Colors::magenta("This text is magenta") << std::endl;
    std::cout << Colors::cyan("This text is cyan") << std::endl;

    return 0;
}
```

### Explanation:
1. **Class Definition**: The `Colors` class is defined with all the methods declared as `static`. This means they can be called without creating an instance of the class.
2. **String Concatenation**: In C++, string concatenation is done using the `+` operator.
3. **Escape Sequences**: The ANSI escape codes for color formatting (`\033[91m`, `\033[92m`, etc.) are directly used in the C++ code, just as in the Python version.

This code should work similarly to the Python version, providing colored text output when run.