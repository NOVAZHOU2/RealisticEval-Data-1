Certainly! Below is the equivalent C++ code for the provided Python code. This code defines a `Colors` class with static methods to color text using ANSI escape sequences.

```cpp
#include <iostream>
#include <string>

class Colors {
public:
    // Text in red color
    static std::string red(const std::string& text) {
        return "\033[91m" + text + "\033[0m";
    }

    // Text in green color
    static std::string green(const std::string& text) {
        return "\033[92m" + text + "\033[0m";
    }

    // Text in blue color
    static std::string blue(const std::string& text) {
        return "\033[94m" + text + "\033[0m";
    }

    // Text in yellow color
    static std::string yellow(const std::string& text) {
        return "\033[93m" + text + "\033[0m";
    }

    // Text in magenta color
    static std::string magenta(const std::string& text) {
        return "\033[95m" + text + "\033[0m";
    }

    // Text in cyan color
    static std::string cyan(const std::string& text) {
        return "\033[96m" + text + "\033[0m";
    }
};

// Example usage
int main() {
    std::cout << Colors::red("Red Text") << std::endl;
    std::cout << Colors::green("Green Text") << std::endl;
    std::cout << Colors::blue("Blue Text") << std::endl;
    std::cout << Colors::yellow("Yellow Text") << std::endl;
    std::cout << Colors::magenta("Magenta Text") << std::endl;
    std::cout << Colors::cyan("Cyan Text") << std::endl;

    return 0;
}
```

### Explanation:
1. **Class Definition**: The `Colors` class is defined with static methods.
2. **Static Methods**: Each method takes a string parameter and returns a new string with the appropriate ANSI escape sequence for coloring the text.
3. **String Concatenation**: In C++, strings are concatenated using the `+` operator.
4. **Example Usage**: The `main` function demonstrates how to use the `Colors` class to print colored text to the console.

This code should work similarly to the Python version, providing colored text output in a C++ environment.