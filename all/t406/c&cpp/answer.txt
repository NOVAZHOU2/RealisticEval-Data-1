Sure, here is the equivalent C++ code for the given Python code:

```cpp
#include <iostream>
#include <string>

class Colors {
public:
    static std::string red(const std::string& text) {
        return "\033[31m" + text + "\033[0m";
    }

    static std::string green(const std::string& text) {
        return "\033[32m" + text + "\033[0m";
    }

    static std::string blue(const std::string& text) {
        return "\033[34m" + text + "\033[0m";
    }

    static std::string yellow(const std::string& text) {
        return "\033[33m" + text + "\033[0m";
    }

    static std::string magenta(const std::string& text) {
        return "\033[35m" + text + "\033[0m";
    }

    static std::string cyan(const std::string& text) {
        return "\033[36m" + text + "\033[0m";
    }
};

int main() {
    std::cout << Colors::red("This is red text.") << std::endl;
    std::cout << Colors::green("This is green text.") << std::endl;
    std::cout << Colors::blue("This is blue text.") << std::endl;
    std::cout << Colors::yellow("This is yellow text.") << std::endl;
    std::cout << Colors::magenta("This is magenta text.") << std::endl;
    std::cout << Colors::cyan("This is cyan text.") << std::endl;

    return 0;
}
```

### Explanation:
- The `\033` escape sequence is used to control text formatting on terminals.
- `[31m`, `[32m`, `[34m`, `[33m`, `[35m`, and `[36m` correspond to red, green, blue, yellow, magenta, and cyan colors, respectively.
- `[0m` resets the text formatting.

This C++ code defines a `Colors` class with static methods that prepend and append ANSI escape sequences to the input string, effectively coloring it when printed to a terminal. The `main` function demonstrates how to use these methods.