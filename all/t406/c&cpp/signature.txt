Here is the equivalent C++ code for the given Python `Colors` class:

```cpp
class Colors {
public:
    // Returns the text in red color
    static std::string red(const std::string& text) {
        // Implementation goes here
        return text;
    }

    // Returns the text in green color
    static std::string green(const std::string& text) {
        // Implementation goes here
        return text;
    }

    // Returns the text in blue color
    static std::string blue(const std::string& text) {
        // Implementation goes here
        return text;
    }

    // Returns the text in yellow color
    static std::string yellow(const std::string& text) {
        // Implementation goes here
        return text;
    }

    // Returns the text in magenta color
    static std::string magenta(const std::string& text) {
        // Implementation goes here
        return text;
    }

    // Returns the text in cyan color
    static std::string cyan(const std::string& text) {
        // Implementation goes here
        return text;
    }
};
```

### Explanation:
1. **Class Definition**: The Python class `Colors` is translated into a C++ class with the same name.
2. **Static Methods**: All methods in the Python class are static methods, which are translated into static member functions in C++.
3. **Type Annotations**: The Python type annotation `str` is translated into `std::string` in C++.
4. **Comments and Docstrings**: The Python docstrings are translated into C++ comments above each method. Single-line comments use `//`, and multi-line comments use `/* */`.
5. **Implementation**: Since the Python methods are stubs (i.e., they contain only `pass`), the C++ methods are implemented to simply return the input string.

This preserves the structure and purpose of the original Python code while adapting it to C++ conventions.