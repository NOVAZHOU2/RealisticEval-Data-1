Hereâ€™s the equivalent JavaScript code that implements the Bubble Sort algorithm based on the provided C++ code:

```javascript
/**
 * @brief Implements the Bubble Sort algorithm.
 *
 * This function sorts an array of integers in ascending order using the Bubble Sort algorithm.
 * The algorithm works by repeatedly stepping through the list, comparing adjacent elements, and
 * swapping them if they are in the wrong order. The process is repeated until the list is sorted.
 *
 * @param {number[]} arr - An array of integers to be sorted.
 */
function bubbleSort(arr) {
    let swapped;
    let n = arr.length;
    do {
        swapped = false;
        for (let i = 1; i < n; i++) {
            if (arr[i - 1] > arr[i]) {
                // Swap the elements
                [arr[i - 1], arr[i]] = [arr[i], arr[i - 1]];
                swapped = true;
            }
        }
        n--; // Reduce the range of comparison, as the last element is now sorted
    } while (swapped);
}

// Example usage
const numbers = [5, 3, 8, 4, 2];
bubbleSort(numbers);
console.log(numbers); // Output: [2, 3, 4, 5, 8]
```

### Explanation of Changes:
1. **Function Definition**: The `void` return type is omitted in JavaScript; functions are defined directly.
2. **Array Declaration**: The `std::vector<int>&` in C++ is replaced with a standard JavaScript array `number[]`.
3. **Swapping Elements**: JavaScript allows destructuring for swapping elements, which makes it more concise.
4. **Variable Declarations**: Used `let` for block scope, which is more aligned with modern JavaScript practices.
5. **Example Usage**: Added an example usage at the end to demonstrate how the function can be called and tested.