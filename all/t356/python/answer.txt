Hereâ€™s the equivalent Python code for the provided C++ Bubble Sort implementation. The Python version uses a list and follows the same logic as the C++ code:
python
def bubble_sort(arr):
    """
    Implements the Bubble Sort algorithm.

    This function sorts an array of integers in ascending order using the Bubble Sort algorithm.
    The algorithm works by repeatedly stepping through the list, comparing adjacent elements, and
    swapping them if they are in the wrong order. The process is repeated until the list is sorted.

    :param arr: A list of integers to be sorted.
    """
    n = len(arr)  # Get the size of the array
    swapped = True  # Initialize swapped to enter the loop

    while swapped:
        swapped = False  # Reset swapped flag for this pass
        for i in range(1, n):  # Iterate through the array
            if arr[i - 1] > arr[i]:  # Compare adjacent elements
                arr[i - 1], arr[i] = arr[i], arr[i - 1]  # Swap if in the wrong order
                swapped = True  # Set swapped to True if a swap occurred
        n -= 1  # Reduce the range of comparison, as the last element is now sorted

# Example usage
if __name__ == "__main__":
    sample_array = [64, 34, 25, 12, 22, 11, 90]
    bubble_sort(sample_array)
    print("Sorted array is:", sample_array)
Key Changes and Explanations:
Function Definition:
The function is named bubble_sort, which follows Python's naming conventions (snake_case).
The parameter arr is a standard Python list, which is equivalent to std::vector<int> in C++.
Docstring:
A Python docstring is added to explain the function, its purpose, and its parameters, similar to the comments in C++.
Swapping Elements:
The C++ std::swap function is replaced with Python's tuple unpacking syntax arr[i - 1], arr[i] = arr[i], arr[i - 1].
Loop and Logic:
The logic of using a do-while loop is replaced with a while loop that continues as long as swapped is True. The flag is reset at the beginning of each iteration.
Example Usage:
An example usage is included at the bottom to demonstrate how to call the bubble_sort function and print the sorted array.
This Python code maintains the functionality of the original C++ code while adhering to Python's syntax and conventions.