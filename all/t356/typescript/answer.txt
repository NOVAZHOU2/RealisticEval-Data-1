Here's the C++ Bubble Sort implementation translated into TypeScript, following TypeScript conventions and best practices:

```typescript
/**
 * @brief Implements the Bubble Sort algorithm.
 *
 * This function sorts an array of integers in ascending order using the Bubble Sort algorithm.
 * The algorithm works by repeatedly stepping through the list, comparing adjacent elements, and
 * swapping them if they are in the wrong order. The process is repeated until the list is sorted.
 *
 * @param arr An array of integers to be sorted.
 */
function bubbleSort(arr: number[]): void {
    let swapped: boolean;
    let n: number = arr.length;

    do {
        swapped = false;
        for (let i = 1; i < n; ++i) {
            if (arr[i - 1] > arr[i]) {
                [arr[i - 1], arr[i]] = [arr[i], arr[i - 1]]; // Swap using destructuring
                swapped = true;
            }
        }
        n--; // Reduce the range of comparison, as the last element is now sorted
    } while (swapped);
}

// Example usage:
const array = [5, 3, 8, 4, 2];
bubbleSort(array);
console.log(array); // Output: [2, 3, 4, 5, 8]
```

### Key Changes:
- **Type Annotations**: The parameter `arr` is annotated as `number[]` to specify that it is an array of numbers.
- **Destructuring Assignment**: Used to swap elements in the array, which is a common practice in JavaScript/TypeScript.
- **Variable Declarations**: Used `let` for block-scoped variable declarations, aligning with modern JavaScript/TypeScript practices.