Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I'll ensure that the functionality and logic of the tests are maintained, and I'll document any necessary changes due to language differences between Python and JavaScript.

### Python Code:
```python
import unittest
from math import comb

def probability_red_balls(x, n, m):
    if x > n:
        return 0  # Not enough red balls to draw x red balls
    total_balls = n + m
    if x > total_balls:
        return 0  # Not enough balls to draw x balls of any color

    ways_to_choose_red = comb(n, x)
    total_ways_to_choose_balls = comb(total_balls, x)

    probability = ways_to_choose_red / total_ways_to_choose_balls
    return probability

class TestProbabilityRedBalls(unittest.TestCase):
    def test_all_red(self):
        # Case where all balls are red
        self.assertEqual(probability_red_balls(5, 5, 0), 1)

    def test_no_red(self):
        # Case where no red balls are available
        self.assertEqual(probability_red_balls(1, 0, 5), 0)

    def test_typical_case(self):
        # Typical scenario
        self.assertAlmostEqual(probability_red_balls(2, 10, 5), comb(10, 2) / comb(15, 2))

    def test_impossible_case(self):
        # More balls requested than available
        self.assertEqual(probability_red_balls(6, 5, 4), 0)

    def test_high_combinations(self):
        # Test with higher number of combinations
        self.assertAlmostEqual(probability_red_balls(3, 20, 30), comb(20, 3) / comb(50, 3))
```

### Equivalent Jest Test Suite:

First, we need to define the `probabilityRedBalls` function in JavaScript and import the necessary combinatorics library.

#### JavaScript Code:

```javascript
// Import the necessary functions for combinations
const { comb } = require('js-combinatorics');

function probabilityRedBalls(x, n, m) {
    if (x > n) {
        return 0; // Not enough red balls to draw x red balls
    }
    const totalBalls = n + m;
    if (x > totalBalls) {
        return 0; // Not enough balls to draw x balls of any color
    }

    const waysToChooseRed = comb(n, x);
    const totalWaysToChooseBalls = comb(totalBalls, x);

    const probability = waysToChooseRed / totalWaysToChooseBalls;
    return probability;
}

describe('TestProbabilityRedBalls', () => {
    describe('test_all_red', () => {
        it('should return 1 when all balls are red', () => {
            expect(probabilityRedBalls(5, 5, 0)).toBe(1);
        });
    });

    describe('test_no_red', () => {
        it('should return 0 when no red balls are available', () => {
            expect(probabilityRedBalls(1, 0, 5)).toBe(0);
        });
    });

    describe('test_typical_case', () => {
        it('should return the correct probability in a typical scenario', () => {
            const expectedProbability = comb(10, 2) / comb(15, 2);
            expect(probabilityRedBalls(2, 10, 5)).toBeCloseTo(expectedProbability, 10); // Adjust precision as needed
        });
    });

    describe('test_impossible_case', () => {
        it('should return 0 when more balls are requested than available', () => {
            expect(probabilityRedBalls(6, 5, 4)).toBe(0);
        });
    });

    describe('test_high_combinations', () => {
        it('should return the correct probability with higher number of combinations', () => {
            const expectedProbability = comb(20, 3) / comb(50, 3);
            expect(probabilityRedBalls(3, 20, 30)).toBeCloseTo(expectedProbability, 10); // Adjust precision as needed
        });
    });
});

// Example usage
console.log(probabilityRedBalls(2, 5, 7)); // Example call with x=2, n=5, m=7
```

### Explanation:
1. **Function Definition**: The `probabilityRedBalls` function is defined similarly to the Python version, with the same logic and structure.
2. **Jest Testing Framework**:
   - Each test case is defined within a `describe` block.
   - Each test case uses `it` to describe the behavior and `expect` for assertions.
   - `toBe` is used for exact equality comparisons.
   - `toBeCloseTo` is used for approximate equality comparisons, which is equivalent to `assertAlmostEqual` in Python.
3. **Combinatorics Library**: The `js-combinatorics` library is imported to handle the combination calculations.

### Installation of `js-combinatorics`:
Ensure that the `js-combinatorics` package is installed before running this code:

```sh
npm install js-combinatorics
```

This ensures that the `comb` function is available for use in your JavaScript code.