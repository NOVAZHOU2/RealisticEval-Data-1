Certainly! Hereâ€™s the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Calculate the probability that x balls will be randomly drawn from a jar containing
 * n red balls and m blue balls, and all of them will be red balls.
 * 
 * @param x - Number of balls to draw.
 * @param n - Number of red balls in the jar.
 * @param m - Number of blue balls in the jar.
 * @returns The probability that all x drawn balls are red.
 */
function probabilityRedBalls(x: number, n: number, m: number): number {
    if (x > n) {
        return 0; // Not enough red balls to draw x red balls
    }
    const totalBalls = n + m;
    if (x > totalBalls) {
        return 0; // Not enough balls to draw x balls of any color
    }

    // Number of ways to choose x red balls from n red balls
    const waysToChooseRed = comb(n, x);
    // Total number of ways to choose x balls from all balls
    const totalWaysToChooseBalls = comb(totalBalls, x);

    // Probability that all chosen balls are red
    const probability = waysToChooseRed / totalWaysToChooseBalls;

    return probability;
}

// Utility function to calculate combinations (n choose k)
function comb(n: number, k: number): number {
    let result = 1;
    for (let i = 0; i < k; i++) {
        result *= (n - i);
        result /= (i + 1);
    }
    return result;
}

// Example usage
console.log(probabilityRedBalls(2, 5, 3)); // Example call with x=2, n=5, m=3
```

### Explanation:
1. **JSDoc Documentation**: The function `probabilityRedBalls` is documented using JSDoc comments, providing clear descriptions of the parameters and return value.
2. **Type Annotations**: All parameters (`x`, `n`, `m`) and the return type are annotated with their respective types.
3. **Utility Function**: A utility function `comb` is included to calculate combinations, as TypeScript does not have a built-in `comb` function like Python's `math.comb`.

This TypeScript code preserves the original functionality and structure while adhering to TypeScript's static type system and best practices for documentation.