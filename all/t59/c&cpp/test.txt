Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. I'll include the necessary imports, the test cases, and the appropriate assertions to ensure the functionality and logic are preserved.

First, make sure you have Catch2 installed and included in your project. You can download it from [here](https://github.com/catchorg/Catch2).

Here is the C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <cmath>

// Function to calculate the binomial coefficient (n choose k)
long long binomial_coefficient(int n, int k) {
    if (k > n - k) {
        k = n - k;
    }
    long long result = 1;
    for (int i = 0; i < k; ++i) {
        result *= (n - i);
        result /= (i + 1);
    }
    return result;
}

// Function to calculate the probability that x balls will be randomly drawn from a jar containing
// n red balls and m blue balls, and all of them will be red balls.
double probability_red_balls(int x, int n, int m) {
    if (x > n) {
        return 0; // Not enough red balls to draw x red balls
    }
    int total_balls = n + m;
    if (x > total_balls) {
        return 0; // Not enough balls to draw x balls of any color
    }

    // Number of ways to choose x red balls from n red balls
    long long ways_to_choose_red = binomial_coefficient(n, x);
    // Total number of ways to choose x balls from all balls
    long long total_ways_to_choose_balls = binomial_coefficient(total_balls, x);

    // Probability that all chosen balls are red
    double probability = static_cast<double>(ways_to_choose_red) / total_ways_to_choose_balls;

    return probability;
}

TEST_CASE("Test Probability Red Balls") {
    SECTION("All balls are red") {
        REQUIRE(probability_red_balls(5, 5, 0) == Approx(1));
    }

    SECTION("No red balls are available") {
        REQUIRE(probability_red_balls(1, 0, 5) == Approx(0));
    }

    SECTION("Typical scenario") {
        REQUIRE(probability_red_balls(2, 10, 5) == Approx(static_cast<double>(binomial_coefficient(10, 2)) / binomial_coefficient(15, 2)));
    }

    SECTION("More balls requested than available") {
        REQUIRE(probability_red_balls(6, 5, 4) == Approx(0));
    }

    SECTION("High combinations") {
        REQUIRE(probability_red_balls(3, 20, 30) == Approx(static_cast<double>(binomial_coefficient(20, 3)) / binomial_coefficient(50, 3)));
    }
}
```

### Explanation:
1. **Imports**: The `Catch2` header is included at the beginning.
2. **binomial_coefficient**: This function calculates the binomial coefficient (n choose k) using a loop and integer arithmetic.
3. **probability_red_balls**: This function implements the logic to calculate the probability that all `x` drawn balls are red, following the same steps as the Python version.
4. **TEST_CASE and SECTION**: These macros define the test cases and sections within the test case. Each section corresponds to a specific test scenario.
5. **REQUIRE**: This macro is used for assertions. `Approx` is used for floating-point comparisons to handle small rounding errors.

This C++ code preserves the original functionality and logic of the Python tests while adhering to the Catch2 testing framework.