To convert your Python unittest test class into a C++ Catch2 test case, you first need to implement the `probability_red_balls` function in C++. After that, you can write a corresponding Catch2 test case for it. Below is an example of how you might do this:

### Step 1: Implement the Function in C++
```cpp
#include <cmath>

double probability_red_balls(int x, int n, int m) {
    // Calculate the total number of balls
    int total_balls = n + m;
    
    // Check if the number of balls to draw exceeds the available balls
    if (x > total_balls || x < 0) {
        return 0.0;
    }
    
    // Calculate combinations using double to avoid integer overflow issues
    double nCr_n = 1.0;
    for (int i = 1; i <= x; ++i) {
        nCr_n *= (n - i + 1);
        nCr_n /= i;
    }

    double nCr_m = 1.0;
    for (int i = 1; i <= (total_balls - x); ++i) {
        nCr_m *= (m - i + 1);
        nCr_m /= i;
    }

    double nCr_total = 1.0;
    for (int i = 1; i <= total_balls; ++i) {
        nCr_total *= (total_balls - i + 1);
        nCr_total /= i;
    }

    // Calculate the probability
    double probability = (nCr_n * nCr_m) / nCr_total;

    return probability;
}
```

### Step 2: Write the Catch2 Test Case
Here's an example of how you might write a Catch2 test case for the `probability_red_balls` function:

```cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

// Forward declaration of the function
double probability_red_balls(int x, int n, int m);

TEST_CASE("Probability of drawing red balls", "[probability]") {
    REQUIRE(probability_red_balls(0, 5, 3) == Approx(1.0)); // No balls drawn, so the probability is 1
    REQUIRE(probability_red_balls(1, 5, 3) == Approx(0.625)); // Drawing 1 red ball out of 8 total
    REQUIRE(probability_red_balls(2, 5, 3) == Approx(0.1875)); // Drawing 2 red balls out of 8 total
    REQUIRE(probability_red_balls(3, 5, 3) == Approx(0.0416667)); // Drawing 3 red balls out of 8 total
    REQUIRE(probability_red_balls(4, 5, 3) == Approx(0.0)); // Not possible to draw 4 red balls with only 5 red balls

    // Additional edge cases
    REQUIRE(probability_red_balls(-1, 5, 3) == Approx(0.0)); // Invalid number of balls to draw
    REQUIRE(probability_red_balls(6, 5, 3) == Approx(0.0)); // Drawing more balls than available
}

int main() {
    return Catch::Session().run();
}
```

In this example:
- We define the `probability_red_balls` function in C++.
- We then write a Catch2 test case named `Probability of drawing red balls`.
- Inside the test case, we use various `REQUIRE` statements to check if the function returns the correct probabilities for different scenarios.

Make sure to have the Catch2 library installed and properly configured in your project environment to compile and run these tests.