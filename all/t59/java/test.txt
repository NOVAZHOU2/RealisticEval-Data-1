Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class is placed in the package `org.real.temp` and named `Tester`. It uses appropriate JUnit annotations and assertion methods to ensure the functionality and logic of the tests are preserved.

### Java Test Class Using JUnit

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Test class for the probabilityRedBalls method.
 */
public class Tester {

    /**
     * Tests the case where all balls are red.
     */
    @Test
    public void testAllRed() {
        assertEquals("Case where all balls are red", 1.0, probabilityRedBalls(5, 5, 0), 0.0);
    }

    /**
     * Tests the case where no red balls are available.
     */
    @Test
    public void testNoRed() {
        assertEquals("Case where no red balls are available", 0.0, probabilityRedBalls(1, 0, 5), 0.0);
    }

    /**
     * Tests a typical scenario.
     */
    @Test
    public void testTypicalCase() {
        double expected = comb(10, 2).doubleValue() / comb(15, 2).doubleValue();
        assertEquals("Typical scenario", expected, probabilityRedBalls(2, 10, 5), 0.0001);
    }

    /**
     * Tests the case where more balls are requested than available.
     */
    @Test
    public void testImpossibleCase() {
        assertEquals("Case where more balls are requested than available", 0.0, probabilityRedBalls(6, 5, 4), 0.0);
    }

    /**
     * Tests the case with higher number of combinations.
     */
    @Test
    public void testHighCombinations() {
        double expected = comb(20, 3).doubleValue() / comb(50, 3).doubleValue();
        assertEquals("Test with higher number of combinations", expected, probabilityRedBalls(3, 20, 30), 0.0001);
    }

    /**
     * Calculates the number of combinations (n choose k).
     *
     * @param n The total number of items.
     * @param k The number of items to choose.
     * @return The number of combinations.
     */
    private BigInteger comb(int n, int k) {
        BigInteger result = BigInteger.ONE;
        for (int i = 0; i < k; i++) {
            result = result.multiply(BigInteger.valueOf(n - i))
                           .divide(BigInteger.valueOf(i + 1));
        }
        return result;
    }

    /**
     * Calculates the probability that x balls will be randomly drawn from a jar containing
     * n red balls and m blue balls, and all of them will be red balls.
     *
     * @param x Number of balls to draw.
     * @param n Number of red balls in the jar.
     * @param m Number of blue balls in the jar.
     * @return The probability that all x drawn balls are red.
     */
    private double probabilityRedBalls(int x, int n, int m) {
        if (x > n) {
            return 0; // Not enough red balls to draw x red balls
        }
        int totalBalls = n + m;
        if (x > totalBalls) {
            return 0; // Not enough balls to draw x balls of any color
        }

        BigInteger waysToChooseRed = comb(n, x);
        BigInteger totalWaysToChooseBalls = comb(totalBalls, x);

        // Probability that all chosen balls are red
        double probability = waysToChooseRed.doubleValue() / totalWaysToChooseBalls.doubleValue();

        return probability;
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.

2. **Class Definition**: The test class `Tester` is defined with the appropriate access modifier (`public`).

3. **JUnit Annotations**:
   - Each test method is annotated with `@Test` to indicate that it is a test method.

4. **Assertion Methods**:
   - `assertEquals` is used to compare expected and actual values. For floating-point comparisons, a delta value is provided to account for floating-point precision issues.

5. **Test Methods**:
   - Each test method is named and documented to reflect the specific test case being performed.
   - The `testAllRed`, `testNoRed`, `testTypicalCase`, `testImpossibleCase`, and `testHighCombinations` methods correspond to the Python test cases.

6. **Helper Methods**:
   - The `comb` method calculates the number of combinations using a loop and `BigInteger` for precision.
   - The `probabilityRedBalls` method calculates the probability as described in the Python code.

This Java code preserves the original functionality and logic of the Python unittest class while adhering to JUnit's conventions and best practices.