Sure! Here is the equivalent C++ code for converting a Unix timestamp to a readable date format:

```cpp
#include <iostream>
#include <ctime>
#include <iomanip>
#include <string>

std::string timestampToReadableDate(long unixTimestamp) {
    std::tm *timeInfo;
    std::ostringstream oss;
    std::array<std::string, 12> monthNames = {
        "Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
    };

    // Convert Unix timestamp to local time
    time_t timestamp = static_cast<time_t>(unixTimestamp);
    timeInfo = std::localtime(&timestamp);

    // Extract components of the date and time
    int month = timeInfo->tm_mon;
    int day = timeInfo->tm_mday;
    int hours = timeInfo->tm_hour;
    int minutes = timeInfo->tm_min;

    // Format the output string
    oss << monthNames[month] << ' ' << day << ", ";
    oss << std::setw(2) << std::setfill('0') << hours << ':';
    oss << std::setw(2) << std::setfill('0') << minutes;

    return oss.str();
}

int main() {
    long unixTimestamp = 1689235200; // Example Unix timestamp (2023-07-13 00:00:00 UTC)
    std::cout << timestampToReadableDate(unixTimestamp) << std::endl;
    return 0;
}
```

### Explanation:
1. **Importing Libraries**: The necessary libraries are included at the beginning.
2. **Function Definition**: The `timestampToReadableDate` function takes a `long` Unix timestamp as input.
3. **Time Conversion**: The Unix timestamp is converted to a `std::tm` structure using `std::localtime`.
4. **Month Names**: An array of month names is defined.
5. **Formatting Output**: The date and time components are formatted using an `ostringstream`.
6. **Main Function**: An example usage in the `main` function.

This should give you the desired output similar to the JavaScript version.