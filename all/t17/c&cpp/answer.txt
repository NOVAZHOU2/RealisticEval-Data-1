Sure! Below is the equivalent C++ code for calculating the Haversine distance between two points on the Earth based on their latitude and longitude.

```cpp
#include <cmath>
#include <iostream>

double haversine_distance(double lat1, double lon1, double lat2, double lon2) {
    const double R = 6371.0; // Radius of the Earth in kilometers

    // Convert degrees to radians
    double lat1_rad = lat1 * M_PI / 180.0;
    double lon1_rad = lon1 * M_PI / 180.0;
    double lat2_rad = lat2 * M_PI / 180.0;
    double lon2_rad = lon2 * M_PI / 180.0;

    // Calculate the differences
    double dlat = lat2_rad - lat1_rad;
    double dlon = lon2_rad - lon1_rad;

    // Apply the Haversine formula
    double a = sin(dlat / 2) * sin(dlat / 2) +
               cos(lat1_rad) * cos(lat2_rad) *
               sin(dlon / 2) * sin(dlon / 2);
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));

    // Calculate the distance
    return R * c;
}

int main() {
    double lat1 = 51.5074;
    double lon1 = -0.1278;
    double lat2 = 40.7128;
    double lon2 = -74.0060;

    double distance = haversine_distance(lat1, lon1, lat2, lon2);
    std::cout << "Distance: " << distance << " km" << std::endl;

    return 0;
}
```

### Explanation:
1. **Constants**: The radius of the Earth `R` is set to 6371.0 kilometers.
2. **Conversion**: Degrees are converted to radians using `M_PI`.
3. **Differences**: Differences in latitude (`dlat`) and longitude (`dlon`) are calculated.
4. **Haversine Formula**: The Haversine formula is applied to compute the distance.
5. **Output**: The calculated distance is printed in kilometers.

This C++ code should give you the same result as your Python function.