Sure! Below is the equivalent C++ unit test case using Catch2 for the provided Python `unittest` function `haversine_distance`. Note that you need to include the necessary libraries and define the `haversine_distance` function in your C++ code before running these tests.

First, ensure you have Catch2 installed. If not, you can install it via vcpkg or download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2).

Here is the C++ test case:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file

#include <catch2/catch.hpp>
#include <cmath>  // For sin, cos, acos, pow, M_PI

// Define the haversine_distance function here
double haversine_distance(double lat1, double lon1, double lat2, double lon2) {
    const double R = 6371.0;  // Radius of the Earth in kilometers
    double dLat = (lat2 - lat1) * M_PI / 180.0;
    double dLon = (lon2 - lon1) * M_PI / 180.0;

    double a = sin(dLat / 2) * sin(dLat / 2) +
               cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) *
               sin(dLon / 2) * sin(dLon / 2);
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));

    return R * c;
}

TEST_CASE("Haversine Distance Calculation", "[distance]") {
    REQUIRE(abs(haversine_distance(52.2296756, 21.0122287, 41.8919300, 12.5113300) - 1317.504) < 1e-3);
    REQUIRE(abs(haversine_distance(0.0, 0.0, 0.0, 0.0) - 0.0) < 1e-3);
    REQUIRE(abs(haversine_distance(0.0, 0.0, 90.0, 0.0) - 6371.0) < 1e-3);
    REQUIRE(abs(haversine_distance(0.0, 0.0, 0.0, 180.0) - 12742.0) < 1e-3);
}
```

### Explanation:
1. **CATCH_CONFIG_MAIN**: This macro tells Catch to generate a main function automatically.
2. **#include <catch2/catch.hpp>**: This includes the Catch2 header file.
3. **#include <cmath>**: This includes the standard math library for trigonometric functions.
4. **haversine_distance Function**: This function calculates the distance between two points on the Earth using the Haversine formula.
5. **TEST_CASE Macro**: This defines a test case named "Haversine Distance Calculation".
6. **REQUIRE Macro**: This checks if the calculated distance is close to the expected value within a small tolerance (1e-3).

Make sure to compile your C++ code with the Catch2 library linked. For example, using g++, you can compile the code like this:

```sh
g++ -std=c++11 -o test_haversine test_haversine.cpp -lc++ -pthread
./test_haversine
```

This will run the test cases and output the results.