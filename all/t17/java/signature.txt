Sure! Below is the equivalent Java method for the given Python function, including appropriate Javadoc comments and type conversions:

```java
public class Answer {

    /**
     * Calculates the distance between two points on the Earth based on their latitude and longitude.
     *
     * @param lat1 Latitude of the first point in degrees.
     * @param lon1 Longitude of the first point in degrees.
     * @param lat2 Latitude of the second point in degrees.
     * @param lon2 Longitude of the second point in degrees.
     * @return Distance between the two points in kilometers.
     */
    public static double haversineDistance(double lat1, double lon1, double lat2, double lon2) {
        // Radius of the Earth in kilometers
        final double R = 6371.0;

        // Convert latitude and longitude from degrees to radians
        double lat1Rad = Math.toRadians(lat1);
        double lon1Rad = Math.toRadians(lon1);
        double lat2Rad = Math.toRadians(lat2);
        double lon2Rad = Math.toRadians(lon2);

        // Differences in coordinates
        double dLat = lat2Rad - lat1Rad;
        double dLon = lon2Rad - lon1Rad;

        // Haversine formula
        double a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.pow(Math.sin(dLon / 2), 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        // Distance in kilometers
        double distance = R * c;

        return distance;
    }

    public static void main(String[] args) {
        // Example usage
        double lat1 = 52.2296756;
        double lon1 = 21.0122287;
        double lat2 = 41.8919300;
        double lon2 = 12.5113300;

        double distance = haversineDistance(lat1, lon1, lat2, lon2);
        System.out.println("Distance: " + distance + " km");
    }
}
```

### Explanation:
1. **Javadoc Comments**: The Python docstring has been converted into a Javadoc comment block.
2. **Method Signature**: The Python function signature `def haversine_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:` is translated to `public static double haversineDistance(double lat1, double lon1, double lat2, double lon2)`.
3. **Type Annotations**: Python type annotations (`float`) are translated to Java primitive types (`double`).
4. **Method Body**: The method body remains the same, with appropriate Java syntax and methods used (e.g., `Math.toRadians`, `Math.pow`, `Math.sqrt`, etc.).

This Java code preserves the original functionality and structure of the Python code while adhering to Java conventions.