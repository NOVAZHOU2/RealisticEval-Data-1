Sure! Below is the equivalent Java JUnit test case for your Python `unittest` test class. The package name is `org.real.temp`, and the class name is `Tester`.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    @Test
    public void testHaversineDistance() {
        // Example data points
        double lat1 = 51.5074; // London, UK
        double lon1 = -0.1278;
        double lat2 = 40.7128; // New York, USA
        double lon2 = -74.0060;

        // Expected result (in kilometers)
        double expectedDistance = 5570.399; // Approximate distance

        // Calculate the actual distance using the method you want to test
        double actualDistance = haversineDistance(lat1, lon1, lat2, lon2);

        // Assert that the actual distance is close enough to the expected distance
        assertEquals(expectedDistance, actualDistance, 0.01); // Allow a small margin of error
    }

    /**
     * Calculate the distance between two points on the earth based on their latitude and longitude
     *
     * @param lat1 Latitude of the first point in degrees.
     * @param lon1 Longitude of the first point in degrees.
     * @param lat2 Latitude of the second point in degrees.
     * @param lon2 Longitude of the second point in degrees.
     * @return Distance between the two points in kilometers.
     */
    public double haversineDistance(double lat1, double lon1, double lat2, double lon2) {
        final int R = 6371; // Radius of the Earth in kilometers
        double dLat = Math.toRadians(lat2 - lat1);
        double dLon = Math.toRadians(lon2 - lon1);
        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2)
                + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
                * Math.sin(dLon / 2) * Math.sin(dLon / 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }
}
```

### Explanation:

1. **Package Declaration**: The `package` declaration at the top specifies the package name `org.real.temp`.
2. **Class Declaration**: The class `Tester` contains the JUnit test methods.
3. **Test Method**: The `testHaversineDistance` method tests the `haversineDistance` method. It uses example coordinates for London and New York, calculates the expected distance, and asserts that the calculated distance is close enough to the expected value.
4. **haversineDistance Method**: This method implements the Haversine formula to calculate the distance between two geographical points.

Make sure you have the necessary dependencies for JUnit in your project. If you're using Maven, add the following dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.1</version>
    <scope>test</scope>
</dependency>
```

If you're using Gradle, add the following to your `build.gradle`:

```groovy
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}
```

This setup should allow you to run the JUnit test case in your Java environment.