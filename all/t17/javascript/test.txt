Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The structure and functionality of the tests will be preserved, and all assertions will be mapped to appropriate Jest equivalents.

### Python Unittest Code

```python
import unittest

class TestHaversineDistance(unittest.TestCase):

    def test_same_point(self):
        # Same point should return a distance of 0
        lat, lon = 52.2296756, 21.0122287
        result = haversine_distance(lat, lon, lat, lon)
        self.assertAlmostEqual(result, 0.0, places=6)

    def test_small_distance(self):
        # Points that are very close together (few meters apart)
        lat1, lon1 = 52.2296756, 21.0122287  # Warsaw, Poland
        lat2, lon2 = 52.2296756, 21.0122297  # Very close to the previous point
        result = haversine_distance(lat1, lon1, lat2, lon2)
        self.assertAlmostEqual(result, 0.0001, places=4)  # Expected small distance

    def test_large_distance(self):
        # Points that are far apart
        lat1, lon1 = 52.2296756, 21.0122287  # Warsaw, Poland
        lat2, lon2 = 41.8919300, 12.5113300  # Rome, Italy
        result = haversine_distance(lat1, lon1, lat2, lon2)
        self.assertAlmostEqual(result, 1315.514, places=2)  # Approx distance in km

    def test_equator_distance(self):
        # Points on the equator
        lat1, lon1 = 0.0, 0.0  # Gulf of Guinea (Equator and Prime Meridian intersection)
        lat2, lon2 = 0.0, 90.0  # On the Equator, 90 degrees east
        result = haversine_distance(lat1, lon1, lat2, lon2)
        self.assertAlmostEqual(result, 10007.54, places=2)  # Approx quarter of Earth's circumference

    def test_pole_to_pole(self):
        # Distance from North Pole to South Pole
        lat1, lon1 = 90.0, 0.0  # North Pole
        lat2, lon2 = -90.0, 0.0  # South Pole
        result = haversine_distance(lat1, lon1, lat2, lon2)
        self.assertAlmostEqual(result, 20015.09, places=2)  # Approx half of Earth's circumference
```

### Equivalent Jest Test Suite

```javascript
const haversineDistance = require('./haversineDistance'); // Import the haversineDistance function

describe('TestHaversineDistance', () => {
    it('should return a distance of 0 for the same point', () => {
        const lat = 52.2296756;
        const lon = 21.0122287;
        const result = haversineDistance(lat, lon, lat, lon);
        expect(result).toBeCloseTo(0.0, 6);
    });

    it('should return a small distance for points very close together', () => {
        const lat1 = 52.2296756;
        const lon1 = 21.0122287;  // Warsaw, Poland
        const lat2 = 52.2296756;
        const lon2 = 21.0122297;  // Very close to the previous point
        const result = haversineDistance(lat1, lon1, lat2, lon2);
        expect(result).toBeCloseTo(0.0001, 4);
    });

    it('should return a large distance for points far apart', () => {
        const lat1 = 52.2296756;
        const lon1 = 21.0122287;  // Warsaw, Poland
        const lat2 = 41.8919300;
        const lon2 = 12.5113300;  // Rome, Italy
        const result = haversineDistance(lat1, lon1, lat2, lon2);
        expect(result).toBeCloseTo(1315.514, 2);
    });

    it('should return the correct distance for points on the equator', () => {
        const lat1 = 0.0;
        const lon1 = 0.0;  // Gulf of Guinea (Equator and Prime Meridian intersection)
        const lat2 = 0.0;
        const lon2 = 90.0;  // On the Equator, 90 degrees east
        const result = haversineDistance(lat1, lon1, lat2, lon2);
        expect(result).toBeCloseTo(10007.54, 2);
    });

    it('should return the correct distance from North Pole to South Pole', () => {
        const lat1 = 90.0;
        const lon1 = 0.0;  // North Pole
        const lat2 = -90.0;
        const lon2 = 0.0;  // South Pole
        const result = haversineDistance(lat1, lon1, lat2, lon2);
        expect(result).toBeCloseTo(20015.09, 2);
    });
});
```

### Explanation

1. **Importing the Function**: The `haversineDistance` function is imported at the beginning of the test file.
2. **Describe Block**: The `describe` block groups the tests under a common description.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Assertions**:
   - `expect(result).toBeCloseTo(expectedValue, precision)` is used to assert floating-point numbers with a specified precision.
   - `places` in Python's `assertAlmostEqual` is mapped to `precision` in Jest's `toBeCloseTo`.

This ensures that the functionality and logic of the tests are preserved, and the structure is clear and follows Jest conventions.