Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
import { radians, sin, cos, atan2, sqrt } from 'mathjs';

function haversineDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
    /**
     * Calculate the distance between two points on the Earth using the Haversine formula.
     *
     * @param lat1 - Latitude of the first point in degrees.
     * @param lon1 - Longitude of the first point in degrees.
     * @param lat2 - Latitude of the second point in degrees.
     * @param lon2 - Longitude of the second point in degrees.
     * @returns Distance between the two points in kilometers.
     */
    // Radius of the Earth in kilometers
    const R = 6371.0;

    // Convert latitude and longitude from degrees to radians
    const lat1Rad = radians(lat1);
    const lon1Rad = radians(lon1);
    const lat2Rad = radians(lat2);
    const lon2Rad = radians(lon2);

    // Differences in coordinates
    const dLat = lat2Rad - lat1Rad;
    const dLon = lon2Rad - lon1Rad;

    // Haversine formula
    const a = sin(dLat / 2) ** 2 + cos(lat1Rad) * cos(lat2Rad) * sin(dLon / 2) ** 2;
    const c = 2 * atan2(sqrt(a), sqrt(1 - a));

    // Distance in kilometers
    const distance = R * c;

    return distance;
}

// Example usage
const lat1 = 50.06638889; // Latitude of point A
const lon1 = -5.71472222; // Longitude of point A
const lat2 = 58.64388889; // Latitude of point B
const lon2 = -3.07000000; // Longitude of point B

console.log(haversineDistance(lat1, lon1, lat2, lon2));
```

### Explanation:
1. **Imports**: TypeScript does not have built-in functions like `radians`, `sin`, `cos`, `atan2`, and `sqrt`. We use the `mathjs` library which provides these functions.
2. **Function Definition**: The function `haversineDistance` is defined with typed parameters and return type.
3. **Radians Conversion**: The `radians` function from `mathjs` is used to convert degrees to radians.
4. **Haversine Formula**: The formula remains the same as in the Python code.
5. **Example Usage**: An example is provided to demonstrate how to call the function with specific coordinates.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate adjustments for TypeScript's static typing and library usage.