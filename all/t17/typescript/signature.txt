Certainly! Here’s the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Calculate the distance between two points on the Earth based on their latitude and longitude.
 * 
 * @param lat1 - Latitude of the first point in degrees.
 * @param lon1 - Longitude of the first point in degrees.
 * @param lat2 - Latitude of the second point in degrees.
 * @param lon2 - Longitude of the second point in degrees.
 * @returns Distance between the two points in kilometers.
 */
function haversineDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
    // Radius of the Earth in kilometers
    const R = 6371.0;

    // Convert latitude and longitude from degrees to radians
    const lat1Rad = toRadians(lat1);
    const lon1Rad = toRadians(lon1);
    const lat2Rad = toRadians(lat2);
    const lon2Rad = toRadians(lon2);

    // Differences in coordinates
    const dLat = lat2Rad - lat1Rad;
    const dLon = lon2Rad - lon1Rad;

    // Haversine formula
    const a = Math.sin(dLat / 2) ** 2 + Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(dLon / 2) ** 2;
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    // Distance in kilometers
    const distance = R * c;

    return distance;
}

// Helper function to convert degrees to radians
function toRadians(degrees: number): number {
    return degrees * (Math.PI / 180);
}

// Example usage
const lat1 = 50.06638889; // Latitude of point A
const lon1 = -5.71472222; // Longitude of point A
const lat2 = 58.64388889; // Latitude of point B
const lon2 = -3.07000000; // Longitude of point B

console.log(haversineDistance(lat1, lon1, lat2, lon2));
```

### Explanation:
1. **JSDoc Documentation**: The JSDoc-style comments are added to provide clear documentation for the function parameters and return value.
2. **Type Annotations**: The function parameters and return type are annotated with `number` in TypeScript.
3. **Helper Function**: A helper function `toRadians` is included to convert degrees to radians, as TypeScript does not have a built-in function for this conversion.
4. **Math Functions**: The standard JavaScript `Math` functions (`Math.sin`, `Math.cos`, `Math.atan2`, `Math.sqrt`) are used directly in TypeScript.
5. **Example Usage**: An example is provided to demonstrate how to call the function with specific coordinates.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript’s static type system and best practices for documentation.