Certainly! Here’s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest test cases will be converted to Jest test cases, and the appropriate Jest assertions will be used.

### TypeScript Code with Jest Tests

First, ensure you have Jest installed in your TypeScript project:
```sh
npm install --save-dev jest @types/jest ts-jest
```

Add the necessary Jest configuration to your `tsconfig.json` or `jest.config.js` if needed.

Here’s the TypeScript code with Jest tests:

```typescript
import { haversineDistance } from './haversineDistance'; // Import the haversineDistance function

describe('TestHaversineDistance', () => {
    it('should return a distance of 0 for the same point', () => {
        const lat = 52.2296756;
        const lon = 21.0122287;
        const result = haversineDistance(lat, lon, lat, lon);
        expect(result).toBeCloseTo(0.0, 6);
    });

    it('should return a small distance for points very close together', () => {
        const lat1 = 52.2296756;
        const lon1 = 21.0122287;  // Warsaw, Poland
        const lat2 = 52.2296756;
        const lon2 = 21.0122297;  // Very close to the previous point
        const result = haversineDistance(lat1, lon1, lat2, lon2);
        expect(result).toBeCloseTo(0.0001, 4);
    });

    it('should return a large distance for points far apart', () => {
        const lat1 = 52.2296756;
        const lon1 = 21.0122287;  // Warsaw, Poland
        const lat2 = 41.8919300;
        const lon2 = 12.5113300;  // Rome, Italy
        const result = haversineDistance(lat1, lon1, lat2, lon2);
        expect(result).toBeCloseTo(1315.514, 2);
    });

    it('should return the correct distance for points on the equator', () => {
        const lat1 = 0.0;
        const lon1 = 0.0;  // Gulf of Guinea (Equator and Prime Meridian intersection)
        const lat2 = 0.0;
        const lon2 = 90.0;  // On the Equator, 90 degrees east
        const result = haversineDistance(lat1, lon1, lat2, lon2);
        expect(result).toBeCloseTo(10007.54, 2);
    });

    it('should return the correct distance from North Pole to South Pole', () => {
        const lat1 = 90.0;
        const lon1 = 0.0;  // North Pole
        const lat2 = -90.0;
        const lon2 = 0.0;  // South Pole
        const result = haversineDistance(lat1, lon1, lat2, lon2);
        expect(result).toBeCloseTo(20015.09, 2);
    });
});
```

### Explanation:
1. **Import**: Import the `haversineDistance` function from the appropriate module.
2. **Describe Block**: Use the `describe` block to group the tests under a common description.
3. **It Blocks**: Each test case is defined using the `it` block, which describes the test scenario.
4. **Assertions**: Use `expect` with `toBeCloseTo` for floating-point comparisons, specifying the number of decimal places for precision.
5. **Data Points**: The test data points are kept the same as in the Python code to ensure consistency.

### Running the Tests
To run the tests, add the following script to your `package.json`:
```json
"scripts": {
  "test": "jest"
}
```

Then, run the tests using:
```sh
npm test
```

This setup ensures that the tests are executed correctly and that the functionality and logic of the tests are preserved in TypeScript using Jest.