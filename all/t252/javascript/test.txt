Sure! Here's how you can translate the given Python `unittest` test class into a JavaScript test case using Jest:

```javascript
const { BitSequenceEncoder } = require('./BitSequenceEncoder'); // Adjust the path accordingly

describe('BitSequenceEncoder', () => {
  it('should convert integer values under the key "bits" to binary strings', () => {
    const encoder = new BitSequenceEncoder();
    const data = {
      bits: 255,
      otherKey: 'otherValue'
    };

    const encodedData = encoder.encode(data);
    expect(encodedData).toBe("{\"bits\":\"11111111\",\"otherKey\":\"otherValue\"}");
  });

  it('should leave non-integer values under the key "bits" unchanged', () => {
    const encoder = new BitSequenceEncoder();
    const data = {
      bits: '255',
      otherKey: 'otherValue'
    };

    const encodedData = encoder.encode(data);
    expect(encodedData).toBe("{\"bits\":\"255\",\"otherKey\":\"otherValue\"}");
  });
});
```

In this JavaScript test case:
- We use Jest's `describe` function to group related tests.
- The `it` function is used to define individual test cases.
- We create an instance of `BitSequenceEncoder` and test its `encode` method with different inputs to ensure it behaves as expected.

Make sure to adjust the import statement according to your project structure. This assumes that the `BitSequenceEncoder` class is in a file named `BitSequenceEncoder.js`.