Sure! Here is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
const JSON = require('json');

class BitSequenceEncoder extends JSON {
    /**
     * Function to override the default JSON encoder to show register question in binary.
     * Note: This function was generated using ChatGPT-4o on July 15, 24. Might behave unexpectedly.
     */
    constructor() {
        super();
    }

    encode(obj) {
        const convertBits = (item) => {
            if (typeof item === 'object' && item !== null) {
                if (Array.isArray(item)) {
                    return item.map(v => convertBits(v));
                } else {
                    return Object.fromEntries(
                        Object.entries(item).map(([k, v]) => 
                            k === 'bits' ? [k, v.toString(2).padStart(8, '0')] : [k, convertBits(v)]
                        )
                    );
                }
            }
            return item;
        };

        const convertedObj = convertBits(obj);
        return JSON.stringify(convertedObj);
    }
}

// Example usage:
const obj = {
    name: "example",
    bits: 255
};

const encoder = new BitSequenceEncoder();
console.log(encoder.encode(obj));
```

### Explanation:
1. **Class Definition**: The `BitSequenceEncoder` class is defined to extend the `JSON` object.
2. **Constructor**: A constructor is added to initialize the class.
3. **`encode` Method**:
   - The `convertBits` function is defined within the `encode` method to handle the conversion of objects.
   - It checks if the item is an object or array and recursively applies the conversion.
   - If the key is `'bits'`, it converts the value to an 8-bit binary string.
   - The `convertedObj` is created by applying `convertBits` to the input object.
   - Finally, `JSON.stringify` is used to convert the `convertedObj` to a JSON string.

This JavaScript code should provide the same functionality as the original Python code.