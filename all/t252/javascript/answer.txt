Here's how you can implement the same functionality in JavaScript:

```javascript
function BitSequenceEncoder() {
}

BitSequenceEncoder.prototype = Object.create(JSONEncoder.prototype);
BitSequenceEncoder.prototype.constructor = BitSequenceEncoder;

BitSequenceEncoder.prototype.encode = function(obj) {
    let result = JSON.stringify(obj, (key, value) => {
        if (typeof value === 'number' && key.includes('bits')) {
            return value.toString(2);
        }
        return value;
    });
    return result;
};
```

In this JavaScript version, we're using `JSON.stringify` with a custom replacer function. This function checks whether each value is a number and its corresponding key includes 'bits'. If both conditions are met, it converts the number to a binary string using the `toString(2)` method. Otherwise, it simply returns the original value.

Please note that JavaScript doesn't have built-in classes for JSON encoding like Python does. Therefore, we use prototypes instead. Also, JavaScript doesn't have a direct equivalent to Python's `json.JSONEncoder`, but we can create a custom encoder by extending the native `JSON.stringify` function.