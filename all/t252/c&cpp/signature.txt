Here's how you can write the equivalent C++ code for the provided Python code:

```cpp
#include <json/json.h>
#include <string>

class BitSequenceEncoder : public Json::StreamWriterBuilder {
public:
    // Override the newJsonStream method to provide custom behavior during serialization.
    virtual std::unique_ptr<Json::StreamWriter> newStreamWriter() const override {
        return std::unique_ptr<Json::StreamWriter>(new CustomStreamWriter);
    }

private:
    class CustomStreamWriter : public Json::StreamWriter {
    public:
        // Override the write method to provide custom behavior when writing values.
        void write(const Json::Value& root) override {
            // Your custom logic here...
            // For example, you might iterate over all elements in the JSON object,
            // check if they are integers under the 'bits' key, and then convert them to binary.

            Json::StreamWriterBuilder builder;
            builder["commentStyle"] = "None";
            builder["indentation"] = "\t";
            std::unique_ptr<Json::StreamWriter> writer(builder.newStreamWriter());
            writer->write(root, &std::cout);
        }
    };
};
```

In this C++ code, we define a `BitSequenceEncoder` class that inherits from `Json::StreamWriterBuilder`. We override the `newStreamWriter` method to return a new instance of our custom `CustomStreamWriter` class.

The `CustomStreamWriter` class overrides the `write` method to provide custom behavior when writing values. In this case, you would add your own logic to handle the 'bits' key and convert its integer value to binary before writing it out.

Note: This C++ code assumes that you have the RapidJSON library installed and properly configured in your project.