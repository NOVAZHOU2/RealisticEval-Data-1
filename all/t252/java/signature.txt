Sure! Here is the equivalent Java code for the given Python class, including the necessary imports, Javadoc comments, and method signatures:

```java
package org.real.temp;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Map;

/**
 * A JSON encoding class that inherits from JsonSerializer<Object>. This class specifically handles keys identified as "bits"
 * and converts their integer values to binary form when encoding objects to JSON.
 * 
 * Example:
 * If the input object contains {"bits": 255}, the encoded JSON will be {"bits": "11111111"}.
 */
public class BitSequenceEncoder extends JsonSerializer<Object> {

    /**
     * Serializes the given object to JSON, converting "bits" keys to binary form if their value is an integer.
     *
     * @param obj The object to serialize.
     * @param gen The JSON generator used for writing the JSON output.
     * @param serializers The serializer provider.
     * @throws IOException If an I/O error occurs.
     */
    @Override
    public void serialize(Object obj, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        convertBits(obj, gen, serializers);
    }

    /**
     * Recursively converts the object to ensure that any nested dictionaries or lists are processed correctly.
     *
     * @param obj The object to convert.
     * @param gen The JSON generator used for writing the JSON output.
     * @param serializers The serializer provider.
     * @throws IOException If an I/O error occurs.
     */
    private void convertBits(Object obj, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        if (obj instanceof Map) {
            gen.writeStartObject();
            ((Map<?, ?>) obj).forEach((key, value) -> {
                if ("bits".equals(key) && value instanceof Integer) {
                    gen.writeObjectField(key, String.format("%08d", Integer.toBinaryString((Integer) value)));
                } else {
                    try {
                        gen.writeObjectField(key, value);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            });
            gen.writeEndObject();
        } else if (obj instanceof String || obj instanceof Number || obj instanceof Boolean) {
            gen.writeObject(obj);
        } else if (obj instanceof Iterable) {
            gen.writeStartArray();
            for (Object item : (Iterable<?>) obj) {
                convertBits(item, gen, serializers);
            }
            gen.writeEndArray();
        } else {
            gen.writeObject(obj);
        }
    }

    public static void main(String[] args) {
        // Example usage
        Map<String, Object> obj = Map.of(
            "name", "example",
            "bits", 255
        );

        String jsonString = encodeToJson(obj);
        System.out.println(jsonString);
    }

    /**
     * Encodes the given object to JSON using the custom BitSequenceEncoder.
     *
     * @param obj The object to encode.
     * @return The JSON string representation of the object.
     */
    public static String encodeToJson(Object obj) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            SimpleModule module = new SimpleModule();
            module.addSerializer(new BitSequenceEncoder());
            mapper.registerModule(module);
            return mapper.writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException("Error encoding to JSON", e);
        }
    }
}
```

### Explanation:
1. **Imports**: Added necessary imports for handling JSON serialization using Jackson libraries.
2. **Javadoc Comments**: Translated the Python docstring and comments into Java-style Javadoc comments.
3. **BitSequenceEncoder Class**: Implemented a custom serializer extending `JsonSerializer<Object>` to handle the conversion of bits to binary format.
4. **convertBits Method**: Recursively converts the object to ensure that any nested dictionaries or lists are processed correctly.
5. **Main Method**: Demonstrates how to use the custom serializer to encode an object to JSON.
6. **encodeToJson Method**: Encodes the given object to JSON using the custom `BitSequenceEncoder`.

This Java code preserves the original functionality and structure of the Python code, ensuring that the "bits" key is converted to binary form when encoding objects to JSON.