Sure, here's how you can translate your Python code to TypeScript:

```typescript
import { JSONEncoder } from 'json';

class BitSequenceEncoder extends JSONEncoder {
    /**
     * Write a JSON decoding class that inherits from JSONEncoder. When encoding question into json format, 
     * the main functional bits of this class specifically handle keys identified as bits, and convert them 
     * to binary form if their value is an integer. For example 'bits': 255 after encoder "bits": "11111111"
     */

    public encode(obj: any): string {
        // Convert the object to a string
        let jsonString = super.encode(obj);

        // Parse the JSON string back into an object
        let jsonObj = JSON.parse(jsonString);

        // Iterate through each key in the object
        for (let key in jsonObj) {
            if (typeof jsonObj[key] === 'number' && !isNaN(Number(key))) {
                // If the key is numeric, convert it to binary
                jsonObj[key] = jsonObj[key].toString(2);
            }
        }

        // Convert the modified object back to a JSON string
        return JSON.stringify(jsonObj);
    }
}
```

In this TypeScript version:
- The `BitSequenceEncoder` class extends `JSONEncoder`.
- The `encode` method first converts the input object to a JSON string using the parent class's `encode` method.
- It then parses this JSON string back into an object.
- It iterates through each property in the object. If the property is a number and its name is numeric, it converts the number to a binary string.
- Finally, it converts the modified object back to a JSON string.

Note: TypeScript does not have a built-in `JSONEncoder` class like Python, so we use the standard `JSON` module for encoding and decoding.