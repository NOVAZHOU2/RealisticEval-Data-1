Sure! Here is the equivalent TypeScript code for the provided Python code:

```typescript
import { JSONEncoder, JSON } from 'json-js';

class BitSequenceEncoder extends JSONEncoder {
    /**
     * Class to override the default JSON encoder to show register values in binary.
     * Note: This class was generated based on a Python implementation created using ChatGPT-4o on July 15, 24.
     * It might behave unexpectedly.
     */
    encode(obj: any): string {
        const convertBits = (item: any): any => {
            if (typeof item === 'object' && item !== null && !Array.isArray(item)) {
                return Object.fromEntries(
                    Object.entries(item).map(([k, v]) => [
                        k,
                        k === 'bits' ? v.toString(2).padStart(8, '0') : convertBits(v),
                    ])
                );
            }
            return item;
        };

        const convertedObj = convertBits(obj);
        return super.encode(convertedObj);
    }
}

// Example usage:
const encoder = new BitSequenceEncoder();
const obj = {
    name: 'example',
    bits: 255,
    other: {
        bits: 128,
        nested: {
            bits: 64,
        },
    },
};

const jsonString = encoder.encode(obj);
console.log(jsonString);
```

### Explanation:
1. **Import Statement**: The `JSONEncoder` and `JSON` classes are imported from the `json-js` package, which provides similar functionality to Python's `json` module.

2. **Class Definition**: The `BitSequenceEncoder` class extends `JSONEncoder`.

3. **Encode Method**: The `encode` method overrides the default `encode` method of `JSONEncoder`. It includes a helper function `convertBits` to recursively convert objects with a `'bits'` key to their binary representation.

4. **Example Usage**: An example usage is provided at the end to demonstrate how to use the `BitSequenceEncoder` class.

This TypeScript code maintains the same functionality as the Python code, converting dictionary items with a `'bits'` key to their binary representation.