Sure! Below is the equivalent C++ code for the JavaScript function you provided:

```cpp
#include <iostream>
#include <string>
#include <cmath>

// Function to generate a hash value from a string
unsigned long long hashString(const std::string& str) {
    unsigned long long hash = 5381;
    int c;

    for (int i = 0; i < str.length(); i++) {
        c = str[i];
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
    }

    return hash;
}

// Function to map a hash value to a specified range with two decimal places
double mapToRange(unsigned long long hash, double minVal = 10.0, double maxVal = 30.0) {
    // Ensure the hash value is within a valid range
    hash %= UINT64_MAX;

    // Map the hash value to the desired range
    double mappedValue = static_cast<double>(hash) / UINT64_MAX * (maxVal - minVal) + minVal;

    // Round to two decimal places
    mappedValue = round(mappedValue * 100) / 100;

    return mappedValue;
}

// Main function to get the price based on recipe ID
double getPrice(const std::string& recipeId, double minVal = 10.0, double maxVal = 30.0) {
    unsigned long long hash = hashString(recipeId);
    return mapToRange(hash, minVal, maxVal);
}

int main() {
    std::string recipeId = "exampleRecipeId";
    double price = getPrice(recipeId);
    std::cout << "Price: " << price << std::endl;
    return 0;
}
```

### Explanation:
1. **Hashing Function (`hashString`)**: This function generates a hash value from a given string using the djb2 algorithm.
2. **Mapping Function (`mapToRange`)**: This function maps the hash value to a specified range `[minVal, maxVal]` and rounds the result to two decimal places.
3. **Main Function (`getPrice`)**: This function combines the hashing and mapping functions to compute the final price.

This C++ code should provide similar functionality to your original JavaScript function. Note that the `main` function demonstrates how to use the `getPrice` function with an example recipe ID.