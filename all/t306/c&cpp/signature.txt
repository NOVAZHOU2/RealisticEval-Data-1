Here's how you could translate that JavaScript function signature into a C++ function signature:

```cpp
/**
 * The recipe ID is hashed to produce a price in the specified range
 *
 * @param recipeId - The ID of the recipe to hash.
 * @param minVal - The minimum value of the price range. Default is 10 if not provided.
 * @param maxVal - The maximum value of the price range. Default is 30 if not provided.
 * @return The hashed price, mapped to the specified range with two decimal places.
 */
double getPrice(const std::string& recipeId, double minVal = 10.0, double maxVal = 30.0);
```

In this C++ version:
- `std::string` is used for the `recipeId` parameter because it is a string in the original JavaScript function.
- `const std::string&` means that we're passing the string by reference and guaranteeing that the function won't modify the original string.
- `double` is used instead of `number` for both `minVal` and `maxVal`, because floating-point numbers are more commonly used for representing prices than integers.
- The return type is `double`, which is appropriate for representing prices with decimals.
- The default values for `minVal` and `maxVal` are set directly in the function declaration, similar to JavaScript.