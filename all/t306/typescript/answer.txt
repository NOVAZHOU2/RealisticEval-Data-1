Sure! Below is the TypeScript version of your JavaScript function:

```typescript
/**
 * The recipe ID is hashed to produce a price in the specified range
 *
 * @param {string} recipeId - The ID of the recipe to hash.
 * @param {number} [minVal=10] - The minimum value of the price range.
 * @param {number} [maxVal=30] - The maximum value of the price range.
 * @returns {number} - The hashed price, mapped to the specified range with two decimal places.
 */
function getPrice(recipeId: string, minVal: number = 10, maxVal: number = 30): number {
    // Assuming we use a simple hashing method for demonstration purposes
    const hash = (recipeId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0)) % 100;
    
    // Map the hash to the specified range
    const mappedPrice = ((hash / 100) * (maxVal - minVal)) + minVal;

    return parseFloat(mappedPrice.toFixed(2));
}
```

### Explanation:
- **Type Annotations**: Added type annotations for `recipeId`, `minVal`, and `maxVal` parameters, and the return type.
- **Hashing Logic**: Used a simple reduction to generate a hash value from the `recipeId`. This can be replaced with any more sophisticated hashing algorithm if needed.
- **Mapping to Range**: Mapped the hash value to the specified range `[minVal, maxVal]`.
- **Rounding**: Used `toFixed(2)` to ensure the result has two decimal places and then converted it back to a `Number`.

Feel free to replace the simple hashing logic with a more secure or appropriate one as per your requirements.