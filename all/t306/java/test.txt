To convert the given JavaScript Jest test case into a Java JUnit test case, you'll need to create a corresponding Java class and method that matches the functionality of your JavaScript function. Below is an example of how you can do this:

### Step 1: Create the Java Class

First, let's create a Java class named `Tester` in the package `org.real.temp`.

```java
package org.real.temp;

public class Tester {
    public static double getPrice(String recipeId, double minVal, double maxVal) {
        // Implement the logic for hashing and mapping the price here
        long hash = recipeId.hashCode();
        double normalizedHash = (hash % (maxVal - minVal)) + minVal;
        return Math.round(normalizedHash * 100.0) / 100.0;
    }
}
```

### Step 2: Create the JUnit Test Case

Next, we'll create a JUnit test case for the `getPrice` method.

```java
package org.real.temp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TesterTest {

    @Test
    public void testGetPrice() {
        String recipeId = "testRecipe";
        double minVal = 10;
        double maxVal = 30;

        double result = Tester.getPrice(recipeId, minVal, maxVal);

        // Check if the result is within the expected range and has two decimal places
        assertEquals(true, result >= minVal && result <= maxVal);
        assertEquals(2, Double.toString(result).split("\\.")[1].length());
    }

    @Test
    public void testGetPriceWithDefaultValues() {
        String recipeId = "defaultRecipe";

        double result = Tester.getPrice(recipeId);

        // Check if the result is within the default range and has two decimal places
        assertEquals(true, result >= 10 && result <= 30);
        assertEquals(2, Double.toString(result).split("\\.")[1].length());
    }
}
```

### Explanation:

1. **Java Class (`Tester.java`)**:
   - The `getPrice` method takes a `recipeId`, `minVal`, and `maxVal` as parameters.
   - It calculates the hash of the `recipeId`, normalizes it within the specified range, and rounds it to two decimal places.

2. **JUnit Test Case (`TesterTest.java`)**:
   - We have two test methods:
     - `testGetPrice`: Tests the `getPrice` method with custom values for `minVal` and `maxVal`.
     - `testGetPriceWithDefaultValues`: Tests the `getPrice` method using default values (when no arguments are provided).
   - Each test checks if the result is within the expected range and ensures it has exactly two decimal places.

This setup should help you transition from a JavaScript Jest test case to a Java JUnit test case while maintaining the same functionality.