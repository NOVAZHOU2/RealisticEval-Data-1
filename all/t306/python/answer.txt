Hereâ€™s the equivalent Python code for your JavaScript function getPrice. This Python version follows the same logic, including generating a hash from the recipe ID and mapping it to the specified price range:
python
def get_price(recipe_id, min_val=10, max_val=30):
    hash_value = 0
    
    # Generate a hash from the recipe ID
    for char in recipe_id:
        hash_value = (hash_value << 5) - hash_value + ord(char)  # Equivalent to hash * 31 + char
    
    # Ensure the hash value is a 32-bit integer
    hash_value &= 0xFFFFFFFF
    
    # Convert the hash to a positive value
    decimal_value = abs(hash_value)
    
    # Map the decimal value to the specified price range
    mapped_value = (decimal_value % ((max_val - min_val) * 100)) / 100 + min_val
    
    # Ensure the final value has exactly two decimal places
    final_value = round(mapped_value, 2)
    
    return final_value

# Example usage
if __name__ == "__main__":
    recipe_id = "example_recipe_id"
    price = get_price(recipe_id)
    print(f"The price for the recipe ID '{recipe_id}' is: {price}")
Explanation of the Python Code:
Function Definition: The function get_price is defined with default parameters for min_val and max_val, just like in the JavaScript version.
Hash Generation: A loop iterates over each character of the recipe_id, computing a hash using bitwise operations similar to the JavaScript implementation.
32-bit Integer: The hash_value is masked to ensure it's treated as a 32-bit integer.
Mapping to Price Range: The absolute value of the hash is then used to compute a price within the specified range.
Rounding: The final price is rounded to two decimal places before being returned.
Usage
The example usage at the end demonstrates how to call the get_price function and print the price for a given recipe ID. You can replace "example_recipe_id" with any string to test the function.