Here's how you can translate the given JavaScript function into Python:

```python
import hashlib

def get_price(recipe_id, min_val=10, max_val=30):
    """
    The recipe ID is hashed to produce a price in the specified range.

    :param str recipe_id: The ID of the recipe to hash.
    :param int min_val: The minimum value of the price range (default is 10).
    :param int max_val: The maximum value of the price range (default is 30).
    :return float: The hashed price, mapped to the specified range with two decimal places.
    """

    # Hash the recipe ID using SHA-256
    hashed_recipe_id = hashlib.sha256(recipe_id.encode()).hexdigest()
    
    # Convert the first character of the hash to an integer and scale it to the desired range
    scaled_value = int(hashed_recipe_id[0], 16) / 15 * (max_val - min_val) + min_val
    
    # Round the result to two decimal places
    return round(scaled_value, 2)
```

This Python function does the following:
1. Imports the `hashlib` module for hashing.
2. Defines the `get_price` function with parameters `recipe_id`, `min_val`, and `max_val`.
3. Uses SHA-256 to hash the input `recipe_id`.
4. Converts the first character of the hexadecimal hash string to an integer and scales it to the specified range between `min_val` and `max_val`.
5. Rounds the final value to two decimal places before returning it.

Please note that the scaling factor (`15`) used here assumes the hexadecimal representation of the first character of the hash will always be within the range of 0 to 15. This might need adjustment based on your specific use case or the distribution of your data.