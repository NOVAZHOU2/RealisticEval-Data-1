Certainly! Here is the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation:

```typescript
import * as re from 'xregexp';

/**
 * Extracts a numeric value from the input string based on the given regex pattern.
 *
 * @param x - The input from which to extract the value. It will be converted to a string.
 * @param pattern - The regular expression pattern to use for matching.
 * @returns The extracted weight value as a number if a match is found, otherwise an empty string.
 */
function cleanPattern(x: string | any, pattern: string): number | '' {
    // Convert input to string
    const inputString = String(x);

    // Search for the pattern in the input string
    const match = re.exec(inputString, new RegExp(pattern));

    if (match && match[1]) {
        // Extract the weight value from the first matching group
        const weight = match[1];
        try {
            // Convert the weight to a float and return it
            const weightValue = parseFloat(weight);
            return weightValue;
        } catch (error) {
            // Handle cases where conversion to float fails
            console.warn(`Warning: Unable to convert '${weight}' to float.`);
            return '';
        }
    } else {
        return '';  // Return empty string if no match is found
    }
}

// Example usage
console.log(cleanPattern("The weight is 123.45 kg", "(\\d+\\.\\d+)"));
```

### Explanation:
1. **Import Statement**: TypeScript does not have a built-in `re` module like Python, so we use `xregexp` as a third-party library for regular expressions. You can install it using npm with `npm install xregexp`.

2. **Function Definition**: The function `cleanPattern` is defined with typed parameters (`string | any` for `x` and `string` for `pattern`). The return type is `number | ''` to indicate that the function can return either a number or an empty string.

3. **JSDoc Documentation**: The Python docstring is converted to JSDoc-style comments using `/** */`.

4. **Type Conversion**: The input `x` is converted to a string using `String(x)`.

5. **Regular Expression Matching**: We use `new RegExp(pattern)` to create a regular expression object and `re.exec` to search for matches.

6. **Error Handling**: If the conversion to a float fails, a warning message is logged, and an empty string is returned.

7. **Example Usage**: An example call to the function is included at the end to demonstrate how to use it.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and documentation conventions.