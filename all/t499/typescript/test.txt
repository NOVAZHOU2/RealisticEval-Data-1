Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included:

### TypeScript Code with Jest Testing

First, ensure you have Jest installed in your project:
```sh
npm install --save-dev jest ts-jest @types/jest
```

Add Jest configuration to your `tsconfig.json`:
```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"],
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node"
  }
}
```

Now, let's write the TypeScript test class:

```typescript
import { cleanPattern } from './path/to/cleanPattern'; // Import the cleanPattern function

describe('TestCleanPattern', () => {
  let pattern: string;

  beforeEach(() => {
    // Sets up a common regex pattern for testing
    pattern = '(\\d+\\.?\\d*) kg';  // Regex pattern to match weight in kg
  });

  it('should handle valid integer weight', () => {
    const inputString = "The weight is 25 kg";
    const result = cleanPattern(inputString, pattern);
    expect(result).toEqual(25.0);
  });

  it('should handle valid float weight', () => {
    const inputString = "Weight measured at 15.75 kg";
    const result = cleanPattern(inputString, pattern);
    expect(result).toEqual(15.75);
  });

  it('should return an empty string when no weight is found', () => {
    const inputString = "No weight provided.";
    const result = cleanPattern(inputString, pattern);
    expect(result).toEqual('');
  });

  it('should return an empty string for non-numeric weight', () => {
    const inputString = "The weight is thirty kg";
    const result = cleanPattern(inputString, pattern);
    expect(result).toEqual('');
  });

  it('should handle weight with extra text', () => {
    const inputString = "The total weight is 45.3 kg as per the last measurement.";
    const result = cleanPattern(inputString, pattern);
    expect(result).toEqual(45.3);
  });
});
```

### Explanation:
1. **Import Statements**: Import the `cleanPattern` function from the appropriate path.
2. **Describe Block**: Use Jest's `describe` block to group the test cases.
3. **BeforeEach Hook**: Use Jest's `beforeEach` hook to set up the common regex pattern before each test.
4. **Test Cases**:
   - **Valid Integer Weight**: Tests that a valid integer weight is correctly extracted.
   - **Valid Float Weight**: Tests that a valid floating-point weight is correctly extracted.
   - **No Weight Found**: Tests that an empty string is returned when no weight is found.
   - **Non-Numeric Weight**: Tests that an empty string is returned for non-numeric weights.
   - **Weight with Extra Text**: Tests that a weight with additional text is correctly extracted.
5. **Expect Assertions**: Use Jest's `expect` assertions to verify the results.

### Running the Tests
To run the tests, add a script to your `package.json`:
```json
"scripts": {
  "test": "jest"
}
```

Run the tests using:
```sh
npm test
```

This setup ensures that the tests are structured and executed similarly to the original Python unittest class, while leveraging Jest's powerful assertion capabilities.