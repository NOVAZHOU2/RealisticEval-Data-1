Sure, here's how you can convert the Python `unittest` test class into a TypeScript test case using Jest:

```typescript
import { expect } from '@jest/globals';
import { cleanPattern } from './yourModule'; // Adjust the path accordingly

describe('cleanPattern', () => {
  it('should return a number when a valid pattern matches', () => {
    const result = cleanPattern('The weight is 123.45 kg.', 'weight is (\d+\.\d+)');
    expect(result).toBe(123.45);
  });

  it('should return an empty string when no pattern matches', () => {
    const result = cleanPattern('No numbers here!', '(\d+\.\d+)');
    expect(result).toBe('');
  });

  it('should handle different patterns correctly', () => {
    const result1 = cleanPattern('Volume is 456.78 cubic meters.', 'volume is (\d+\.\d+)');
    const result2 = cleanPattern('Density is 90.12 g/cm^3.', 'density is (\d+\.\d+)');
    expect(result1).toBe(456.78);
    expect(result2).toBe(90.12);
  });
});
```

In this example:
- We're using Jest's `expect` function to assert the expected outcomes of the `cleanPattern` function.
- The `describe` block groups related tests together.
- Each `it` block represents a single test case.
- The `cleanPattern` function is imported from your module, and you should adjust the path accordingly.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run your tests using:

```sh
npx jest
# or
yarn jest
```