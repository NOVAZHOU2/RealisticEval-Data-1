Sure! Below is the equivalent Java code with the same function signature and comments:

```java
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Extracts a numeric value from the input string based on the given regex pattern.
 *
 * @param x       The input from which to extract the value. It will be converted to a string.
 * @param pattern The regular expression pattern to use for matching.
 * @return The extracted weight value if a match is found, otherwise an empty string.
 */
public class PatternCleaner {

    public static Object cleanPattern(Object x, String pattern) {
        // Convert the input to a string
        String input = x.toString();
        
        // Compile the regex pattern
        Pattern compiledPattern = Pattern.compile(pattern);
        
        // Create a matcher for the input string
        Matcher matcher = compiledPattern.matcher(input);
        
        // Check if there is a match
        if (matcher.find()) {
            try {
                // Try to parse the matched group as a float
                return Float.parseFloat(matcher.group());
            } catch (NumberFormatException e) {
                // If parsing fails, return the matched group as a string
                return matcher.group();
            }
        }
        
        // Return an empty string if no match is found
        return "";
    }

    public static void main(String[] args) {
        // Example usage
        System.out.println(cleanPattern("The weight is 123.45 kg", "\\d+\\.\\d+"));
        System.out.println(cleanPattern("The height is 180 cm", "\\d+"));
        System.out.println(cleanPattern("No number here!", "\\d+\\.\\d+"));
    }
}
```

### Explanation:
- **Class Definition**: The `PatternCleaner` class encapsulates the functionality of the Python function.
- **Method Signature**: The `cleanPattern` method takes two parameters: `x` (an object that can be converted to a string) and `pattern` (a string representing the regex pattern). It returns an `Object` because it can either be a `String` or a `Float`.
- **Regex Matching**: The method uses Java's `Pattern` and `Matcher` classes to find matches in the input string.
- **Error Handling**: If the matched group cannot be parsed as a `Float`, it returns the group as a `String`. If no match is found, it returns an empty string.
- **Example Usage**: The `main` method demonstrates how to call the `cleanPattern` method with different inputs and patterns.