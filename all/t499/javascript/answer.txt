Sure! Here is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
function cleanPattern(x, pattern) {
    /**
     * Extracts a numeric value from the input string based on the given regex pattern.
     *
     * @param {any} x The input from which to extract the value. It will be converted to a string.
     * @param {string} pattern The regular expression pattern to use for matching.
     * @returns {number|string} The extracted weight value if a match is found, otherwise an empty string.
     */
    
    // Convert input to string
    const inputString = String(x);

    // Create a RegExp object from the pattern
    const regex = new RegExp(pattern);

    // Search for the pattern in the input string
    const match = inputString.match(regex);

    if (match) {
        // Extract the weight value from the first matching group
        const weight = match[1];  // Can also use match[3] if needed

        try {
            // Convert the weight to a float and return it
            const weightValue = parseFloat(weight);
            if (!isNaN(weightValue)) {
                return weightValue;
            } else {
                console.warn(`Warning: Unable to convert '${weight}' to float.`);
                return '';
            }
        } catch (error) {
            // Handle cases where conversion to float fails
            console.warn(`Warning: Unable to convert '${weight}' to float.`);
            return '';
        }
    } else {
        return '';  // Return empty string if no match is found
    }
}

// Example usage
console.log(cleanPattern("The weight is 123.45 kg", "(\\d+\\.\\d+)"));
```

### Explanation:
1. **Function Definition**: The function `cleanPattern` is defined with two parameters: `x` and `pattern`.
2. **Type Conversion**: The input `x` is converted to a string using `String(x)`.
3. **Regular Expression**: A regular expression object is created using `new RegExp(pattern)`.
4. **Matching**: The `match` method is used to find a match in the input string.
5. **Group Extraction**: If a match is found, the first capturing group (`match[1]`) is extracted.
6. **Conversion and Validation**: The extracted value is converted to a float using `parseFloat`. If the conversion is successful and not `NaN`, the value is returned; otherwise, a warning is logged and an empty string is returned.
7. **Error Handling**: Any errors during the conversion process are caught and handled by logging a warning and returning an empty string.
8. **Example Usage**: An example call to the function is provided at the end.