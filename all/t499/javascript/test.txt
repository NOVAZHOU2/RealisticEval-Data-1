Sure! Here's how you can convert the Python unittest test class to a Jest test case in JavaScript:

```javascript
const { expect } = require('@jest/globals');
const cleanPattern = require('./cleanPattern'); // Adjust the path accordingly

describe('cleanPattern function', () => {
  it('should return the numeric value from the input string based on the given regex pattern', () => {
    const result1 = cleanPattern('The weight is 150 lbs.', /(\d+(\.\d+)?)\s*lbs/);
    expect(result1).toBe(150);

    const result2 = cleanPattern('The height is 6 feet.', /(\d+)\s*feet/);
    expect(result2).toBe(6);

    const result3 = cleanPattern('No numbers here!', /\d+/);
    expect(result3).toBe('');
  });
});
```

In this example, we're using `@jest/globals` to access the `expect` function provided by Jest. We also assume that the `cleanPattern` function is exported from a file named `cleanPattern.js`. Make sure to adjust the import path according to your project structure.

This Jest test suite includes three tests:
1. It checks if the function correctly extracts a numeric value with units like "lbs".
2. It checks if the function correctly extracts a numeric value without units.
3. It checks if the function returns an empty string when no numbers are found in the input string.