Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Code:
```python
import unittest
from clean_pattern import clean_pattern  # Assuming clean_pattern is defined in another module

class TestCleanPattern(unittest.TestCase):

    def setUp(self):
        """Sets up a common regex pattern for testing."""
        self.pattern = r'(\d+\.?\d*) kg'  # Regex pattern to match weight in kg

    def test_valid_integer_weight(self):
        """Test case for valid integer weight."""
        input_string = "The weight is 25 kg"
        result = clean_pattern(input_string, self.pattern)
        self.assertEqual(result, 25.0)

    def test_valid_float_weight(self):
        """Test case for valid float weight."""
        input_string = "Weight measured at 15.75 kg"
        result = clean_pattern(input_string, self.pattern)
        self.assertEqual(result, 15.75)

    def test_no_weight_found(self):
        """Test case where no weight is present."""
        input_string = "No weight provided."
        result = clean_pattern(input_string, self.pattern)
        self.assertEqual(result, '')

    def test_invalid_float_conversion(self):
        """Test case for non-numeric weight."""
        input_string = "The weight is thirty kg"
        result = clean_pattern(input_string, self.pattern)
        self.assertEqual(result, '')

    def test_weight_with_extra_text(self):
        """Test case for weight with additional text."""
        input_string = "The total weight is 45.3 kg as per the last measurement."
        result = clean_pattern(input_string, self.pattern)
        self.assertEqual(result, 45.3)
```

### Equivalent Jest Test Suite:
```javascript
const cleanPattern = require('./cleanPattern');  // Assuming cleanPattern is defined in another module

describe('TestCleanPattern', () => {
    let pattern;

    beforeEach(() => {
        // Sets up a common regex pattern for testing
        pattern = /(\d+\.?\d*) kg/;
    });

    it('test_valid_integer_weight', () => {
        // Test case for valid integer weight
        const inputString = "The weight is 25 kg";
        const result = cleanPattern(inputString, pattern);
        expect(result).toBe(25.0);
    });

    it('test_valid_float_weight', () => {
        // Test case for valid float weight
        const inputString = "Weight measured at 15.75 kg";
        const result = cleanPattern(inputString, pattern);
        expect(result).toBe(15.75);
    });

    it('test_no_weight_found', () => {
        // Test case where no weight is present
        const inputString = "No weight provided.";
        const result = cleanPattern(inputString, pattern);
        expect(result).toBe('');
    });

    it('test_invalid_float_conversion', () => {
        // Test case for non-numeric weight
        const inputString = "The weight is thirty kg";
        const result = cleanPattern(inputString, pattern);
        expect(result).toBe('');
    });

    it('test_weight_with_extra_text', () => {
        // Test case for weight with additional text
        const inputString = "The total weight is 45.3 kg as per the last measurement.";
        const result = cleanPattern(inputString, pattern);
        expect(result).toBe(45.3);
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `cleanPattern` function is imported from another module using `require`.

2. **Describe Block**:
   - The `describe` block is used to group the test cases together under a single description.

3. **BeforeEach Hook**:
   - The `beforeEach` hook is used to set up the common regex pattern before each test case.

4. **Test Cases**:
   - Each test case is defined using the `it` function.
   - The descriptions of the test cases are included as strings within the `it` function.
   - Assertions are made using `expect` and the appropriate matcher functions (e.g., `toBe`).

5. **Assertions**:
   - The `expect` function is used to make assertions about the results of the `cleanPattern` function.
   - The `toBe` matcher is used to check for equality.

This ensures that the functionality and logic of the original Python unittest class are preserved in the Jest test suite, with clear and structured test cases.