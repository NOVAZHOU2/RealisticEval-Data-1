Sure! Here is the equivalent C++ code for the provided Python function. This code uses the C++ Standard Library for regular expressions and string manipulation:

```cpp
#include <iostream>
#include <string>
#include <regex>

/**
 * Extracts a numeric value from the input string based on the given regex pattern.
 *
 * @param x The input from which to extract the value. It will be converted to a string.
 * @param pattern The regular expression pattern to use for matching.
 * @return The extracted weight value if a match is found, otherwise an empty string.
 */
std::string clean_pattern(const std::string& x, const std::string& pattern) {
    // Search for the pattern in the input string
    std::smatch match;
    std::regex regexPattern(pattern);

    if (std::regex_search(x, match, regexPattern)) {
        // Extract the weight value from the first matching group
        std::string weight = match[1].str();  // Can also use match[3] if needed

        try {
            // Convert the weight to a float and return it
            float weightValue = std::stof(weight);
            return std::to_string(weightValue);
        } catch (const std::invalid_argument& e) {
            // Handle cases where conversion to float fails
            std::cerr << "Warning: Unable to convert '" << weight << "' to float." << std::endl;
            return "";
        }
    } else {
        return "";  // Return empty string if no match is found
    }
}

int main() {
    // Example usage
    std::string input = "The weight is 123.45 kg";
    std::string pattern = "(\\d+\\.\\d+)";

    std::string result = clean_pattern(input, pattern);
    std::cout << "Extracted value: " << result << std::endl;

    return 0;
}
```

### Explanation:
1. **Headers**: The necessary headers (`<iostream>`, `<string>`, `<regex>`) are included.
2. **Function Definition**: The `clean_pattern` function takes two strings as arguments: `x` and `pattern`.
3. **Regular Expression Matching**: The `std::regex_search` function is used to find a match in the input string.
4. **Group Extraction**: The matched groups are accessed using `match[1].str()` (or `match[3].str()` if needed).
5. **Conversion to Float**: The `std::stof` function is used to convert the extracted string to a float. If the conversion fails, a warning is printed, and an empty string is returned.
6. **Main Function**: An example usage of the `clean_pattern` function is shown in the `main` function.

This code should provide the same functionality as the original Python code but adapted to C++ syntax and features.