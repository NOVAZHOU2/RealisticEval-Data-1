Sure, here's how you can implement the `clean_pattern` function in C++:

```cpp
#include <regex>
#include <string>

std::variant<std::string, double> cleanPattern(const std::string& x, const std::string& pattern) {
    std::regex reg(pattern);
    auto matches = std::smatch();
    
    if (std::regex_search(x, matches, reg)) {
        try {
            return std::stod(matches.str(0));
        } catch (...) {
            return matches.str(0);
        }
    }

    return "";
}
```

This C++ code uses the `<regex>` library to perform the same task as your Python code. Here's a brief explanation of what it does:

1. **Regex Initialization**: A `std::regex` object is created with the provided pattern.
2. **Regex Search**: The `std::regex_search` function searches for the pattern in the input string `x`.
3. **Matches Handling**:
   - If a match is found (`matches` contains at least one element), it attempts to convert the matched string to a double using `std::stod`. If successful, it returns the double; otherwise, it returns the original matched string.
   - If no match is found, it returns an empty string.

### Example Usage

Here's an example of how you might call this function in a C++ program:

```cpp
#include <iostream>
#include <variant>
#include <string>

std::variant<std::string, double> cleanPattern(const std::string& x, const std::string& pattern);

int main() {
    std::string input = "The weight is 123.45 kg.";
    std::string pattern = R"(\d+\.\d+)"; // Regex pattern to match a floating-point number

    auto result = cleanPattern(input, pattern);

    if (result.index() == 0) {
        std::cout << "Extracted string: " << std::get<0>(result) << std::endl;
    } else if (result.index() == 1) {
        std::cout << "Extracted float: " << std::get<1>(result) << std::endl;
    }

    return 0;
}
```

In this example, the `main` function demonstrates calling `cleanPattern` and handling the returned `std::variant` to determine whether a string or a double was extracted.