Sure! Here's how you can convert the Python function signature to a C++ function signature while keeping the comments:

```cpp
#include <regex>
#include <string>

/**
 * Extracts a numeric value from the input string based on the given regex pattern.
 *
 * @param x The input from which to extract the value. It will be converted to a string.
 * @param pattern The regular expression pattern to use for matching.
 * @return A string containing the extracted weight value if a match is found, otherwise an empty string.
 */
std::string cleanPattern(const std::string& x, const std::string& pattern);
```

In C++, the return type and parameter types need to be specified explicitly. The `Union` in Python is replaced with `std::string` since the return type is always a string or an empty string. If you want to handle both cases more flexibly, you might consider using a custom class or struct that can hold either a string or a float, but that would complicate the interface significantly. For simplicity, I've kept it as returning a string.