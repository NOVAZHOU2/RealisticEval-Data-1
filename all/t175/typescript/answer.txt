Hereâ€™s the equivalent TypeScript code for the provided Python function `fix_indentation`. This TypeScript version maintains the same functionality and structure while adapting it to TypeScript's type system and syntax:

```typescript
function fixIndentation(code: string): string {
    const lines = code.split("\n");
    const fixedCode: string[] = [];
    let currentIndentLevel = 0;
    const spacesPerIndent = 4;

    for (const line of lines) {
        const trimmedLine = line.trim();
        if (!trimmedLine) { // Check if the line is empty
            fixedCode.push("");
            continue;
        }

        // Adjust current indentation level
        if (trimmedLine.startsWith("elif") ||
            trimmedLine.startsWith("else") ||
            trimmedLine.startsWith("except") ||
            trimmedLine.startsWith("finally")) {
            currentIndentLevel -= 1;
        } else if (trimmedLine.startsWith("return") ||
                   trimmedLine.startsWith("break") ||
                   trimmedLine.startsWith("continue") ||
                   trimmedLine.startsWith("pass")) {
            currentIndentLevel -= 1;
        }

        // Add appropriate indentation
        fixedCode.push(" ".repeat(currentIndentLevel * spacesPerIndent) + trimmedLine);

        // Increase indent level after lines ending with a colon
        if (trimmedLine.endsWith(":")) {
            currentIndentLevel += 1;
        } else if (trimmedLine.startsWith("return") ||
                   trimmedLine.startsWith("break") ||
                   trimmedLine.startsWith("continue") ||
                   trimmedLine.startsWith("pass")) {
            currentIndentLevel -= 1;
        }
    }

    return fixedCode.join("\n");
}
```

### Key Changes Made:
1. **Type Annotations**: Added types to the function parameters and return type.
2. **Array Initialization**: Used TypeScript array initialization syntax for `fixedCode`.
3. **Looping**: Used `for...of` for iteration, which is idiomatic in TypeScript.
4. **String Repetition**: Used `String.prototype.repeat()` to replace the string multiplication from Python.

This TypeScript function should work equivalently to the original Python function, maintaining the same logic and handling the indentation of the given code.