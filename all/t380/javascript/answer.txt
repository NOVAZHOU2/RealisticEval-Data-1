Sure! Below is the equivalent JavaScript code for the provided Python function `calculate_total_seconds`. The JavaScript version maintains the same functionality, logic, and structure as the original Python code.

```javascript
function calculateTotalSeconds(time) {
    /**
     * Calculate the total number of seconds given an array of time periods in the order of
     * days, hours, minutes, and seconds.
     *
     * @param {Array} time - an array where
     *   time[0] - number of days (optional)
     *   time[1] - number of hours (optional)
     *   time[2] - number of minutes (optional)
     *   time[3] - number of seconds (optional)
     * @return {number} total number of seconds
     *
     * Examples:
     *   calculateTotalSeconds([1, 2, 3, 4]) returns 93784
     *   calculateTotalSeconds([0, 2, 3]) returns 7380
     */
    const SECONDS_PER_DAY = 86400;
    const SECONDS_PER_HOUR = 3600;
    const SECONDS_PER_MINUTE = 60;

    // Unpacking the time with defaults
    const [days = 0, hours = 0, minutes = 0, seconds = 0] = time.concat([0, 0, 0, 0]).slice(0, 4);

    const totalSeconds = (
        days * SECONDS_PER_DAY +
        hours * SECONDS_PER_HOUR +
        minutes * SECONDS_PER_MINUTE +
        seconds
    );

    return totalSeconds;
}

// Example usage
console.log(calculateTotalSeconds([1, 2, 3, 4])); // Output: 93784
console.log(calculateTotalSeconds([0, 2, 3])); // Output: 7380
```

### Explanation:
- **Function Definition**: The function `calculateTotalSeconds` is defined to accept an array `time`.
- **Constants**: Constants `SECONDS_PER_DAY`, `SECONDS_PER_HOUR`, and `SECONDS_PER_MINUTE` are defined to match the Python constants.
- **Unpacking with Defaults**: The array `time` is unpacked with default values using the spread operator and slicing to ensure it contains exactly four elements.
- **Calculation**: The total number of seconds is calculated by multiplying each component by its respective constant and summing them up.
- **Return Value**: The total number of seconds is returned.
- **Example Usage**: Example calls to `calculateTotalSeconds` demonstrate the expected behavior.