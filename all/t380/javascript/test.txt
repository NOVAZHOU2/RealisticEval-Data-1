To convert the given Python unittest test class into an equivalent test class using Jest, we need to first define the function `calculate_total_seconds` in JavaScript and then write the test cases using Jest.

Here is the JavaScript code for the `calculate_total_seconds` function:

```javascript
/**
 * Calculate the total number of seconds given an array of time periods in the order of
 * days, hours, minutes, and seconds.
 *
 * @param {Array<number>} time - array, where
 *   time[0] - number of days (optional)
 *   time[1] - number of hours (optional)
 *   time[2] - number of minutes (optional)
 *   time[3] - number of seconds (optional)
 * @returns {number} - total number of seconds
 *
 * Examples:
 *   calculateTotalSeconds([1, 2, 3, 4]) returns 93784
 *   calculateTotalSeconds([0, 2, 3]) returns 7380
 */
function calculateTotalSeconds(time) {
    const [days = 0, hours = 0, minutes = 0, seconds = 0] = time;
    return (days * 24 * 60 * 60) + (hours * 60 * 60) + (minutes * 60) + seconds;
}

module.exports = calculateTotalSeconds;
```

Now let's create the Jest test suite:

```javascript
const calculateTotalSeconds = require('./calculateTotalSeconds');

describe('calculateTotalSeconds', () => {
    it('should return 93784 for [1, 2, 3, 4]', () => {
        expect(calculateTotalSeconds([1, 2, 3, 4])).toBe(93784);
    });

    it('should return 7380 for [0, 2, 3]', () => {
        expect(calculateTotalSeconds([0, 2, 3])).toBe(7380);
    });

    it('should return 180 for [0, 0, 3]', () => {
        expect(calculateTotalSeconds([0, 0, 3])).toBe(180);
    });

    it('should return 120 for [0, 0, 0, 120]', () => {
        expect(calculateTotalSeconds([0, 0, 0, 120])).toBe(120);
    });

    it('should handle empty input correctly', () => {
        expect(calculateTotalSeconds([])).toBe(0);
    });

    it('should handle missing values correctly', () => {
        expect(calculateTotalSeconds([1, undefined, 2, 3])).toBe(93784);
    });
});

// In package.json, add the script to run tests
{
    "scripts": {
        "test": "jest"
    }
}
```

### Explanation:
1. **Function Definition**:
   - The `calculateTotalSeconds` function is defined with default values for each parameter to handle optional parameters.
   - The function calculates the total seconds by multiplying the respective units (days, hours, minutes, seconds) and summing them up.

2. **Test Suite**:
   - Each test case uses `it` to describe the expected behavior.
   - Assertions are made using `expect` to verify the output against the expected value.
   - Different scenarios are tested, including handling missing values and empty inputs.

3. **Running Tests**:
   - The `package.json` file includes a script to run Jest tests using the `npm test` command.

This conversion maintains the functionality and logic of the original Python test cases while adapting to JavaScript's Jest framework.