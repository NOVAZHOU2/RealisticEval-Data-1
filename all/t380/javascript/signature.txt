Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JavaScript documentation standards using JSDoc format:

```javascript
/**
 * Calculate the total number of seconds given an array of time periods in the order of
 * days, hours, minutes, and seconds.
 *
 * @param {Array<number>=} time - An array where
 *   time[0] - number of days (optional)
 *   time[1] - number of hours (optional)
 *   time[2] - number of minutes (optional)
 *   time[3] - number of seconds (optional)
 * @returns {number} - The total number of seconds
 *
 * @example
 * calculateTotalSeconds([1, 2, 3, 4]); // returns 93784
 * calculateTotalSeconds([0, 2, 3]); // returns 7380
 */
function calculateTotalSeconds(time = [0, 0, 0, 0]) {
    const SECONDS_PER_DAY = 86400;
    const SECONDS_PER_HOUR = 3600;
    const SECONDS_PER_MINUTE = 60;

    // Unpacking the time with defaults
    const [days = 0, hours = 0, minutes = 0, seconds = 0] = time;

    let totalSeconds = (
        days * SECONDS_PER_DAY +
        hours * SECONDS_PER_HOUR +
        minutes * SECONDS_PER_MINUTE +
        seconds
    );

    return totalSeconds;
}

// Example usage
console.log(calculateTotalSeconds([1, 2, 3, 4])); // Output: 93784
console.log(calculateTotalSeconds([0, 2, 3])); // Output: 7380
```

### Explanation:
1. **Function Definition**: The function `calculateTotalSeconds` is defined with a default parameter `time = [0, 0, 0, 0]` to handle cases where `time` might be undefined or not provided.
2. **JSDoc Comments**:
   - `@param {Array<number>=}`: Specifies that the parameter `time` is an optional array of numbers.
   - `@returns {number}`: Specifies that the function returns a number.
   - `@example`: Provides examples of how to use the function.
3. **Constants**: Constants `SECONDS_PER_DAY`, `SECONDS_PER_HOUR`, and `SECONDS_PER_MINUTE` are declared.
4. **Unpacking with Defaults**: The `time` array is destructured with default values for `days`, `hours`, `minutes`, and `seconds`.
5. **Calculation**: The total number of seconds is calculated using the constants and unpacked values.
6. **Return Statement**: The total number of seconds is returned.
7. **Example Usage**: Two examples are provided to demonstrate the function's correctness.

This conversion ensures that the functionality, logic, and structure of the original Python code are preserved in JavaScript, with appropriate JSDoc comments for documentation.