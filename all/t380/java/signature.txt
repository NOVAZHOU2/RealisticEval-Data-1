Here is the equivalent Java version of the provided Python function:

```java
import java.util.List;
import java.util.Arrays;

public class TimeCalculator {

    /**
     * Calculates the total number of seconds given a list of time periods in the order of
     * days, hours, minutes, and seconds.
     * 
     * <p>Examples:
     * <ul>
     *     <li>{@code calculateTotalSeconds(Arrays.asList(1, 2, 3, 4))} returns 93784</li>
     *     <li>{@code calculateTotalSeconds(Arrays.asList(0, 2, 3))} returns 7380</li>
     * </ul>
     *
     * @param time List&lt;Integer&gt;, where
     *             time.get(0) - number of days (optional)
     *             time.get(1) - number of hours (optional)
     *             time.get(2) - number of minutes (optional)
     *             time.get(3) - number of seconds (optional)
     * @return int, total number of seconds
     */
    public static int calculateTotalSeconds(List<Integer> time) {
        int totalSeconds = 0;
        
        // Assuming the list has at most four elements
        if (time.size() >= 4) {
            totalSeconds += time.get(3); // seconds
        }
        if (time.size() >= 3) {
            totalSeconds += time.get(2) * 60; // minutes
        }
        if (time.size() >= 2) {
            totalSeconds += time.get(1) * 3600; // hours
        }
        if (time.size() >= 1) {
            totalSeconds += time.get(0) * 86400; // days
        }
        
        return totalSeconds;
    }

    // Example usage
    public static void main(String[] args) {
        System.out.println(calculateTotalSeconds(Arrays.asList(1, 2, 3, 4))); // 93784
        System.out.println(calculateTotalSeconds(Arrays.asList(0, 2, 3))); // 7380
    }
}
```

This Java code includes the necessary imports (`List` and `Arrays`) and provides a static method `calculateTotalSeconds` within a class named `TimeCalculator`. The method takes a `List<Integer>` as its parameter, which corresponds to the Python tuple or list. The method also includes Javadoc comments to describe the parameters, return type, and examples, mirroring the original Python docstring.