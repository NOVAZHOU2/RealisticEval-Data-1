Certainly! Here is the equivalent Java code for the provided Python function, including the translation of the function signature, comments, and docstrings into the appropriate Java style:

```java
import java.util.Arrays;

public class Answer {

    private static final int SECONDS_PER_DAY = 86400;
    private static final int SECONDS_PER_HOUR = 3600;
    private static final int SECONDS_PER_MINUTE = 60;

    /**
     * Calculate the total number of seconds given an array of time periods in the order of
     * days, hours, minutes, and seconds.
     *
     * @param time an array where
     *             time[0] - number of days (optional)
     *             time[1] - number of hours (optional)
     *             time[2] - number of minutes (optional)
     *             time[3] - number of seconds (optional)
     * @return the total number of seconds
     */
    public static int calculateTotalSeconds(int[] time) {
        // Unpacking the time with defaults
        int days = time.length > 0 ? time[0] : 0;
        int hours = time.length > 1 ? time[1] : 0;
        int minutes = time.length > 2 ? time[2] : 0;
        int seconds = time.length > 3 ? time[3] : 0;

        int totalSeconds = (
                days * SECONDS_PER_DAY +
                hours * SECONDS_PER_HOUR +
                minutes * SECONDS_PER_MINUTE +
                seconds
        );

        return totalSeconds;
    }

    public static void main(String[] args) {
        // Example usage
        System.out.println(calculateTotalSeconds(new int[]{1, 2, 3, 4})); // Output: 93784
        System.out.println(calculateTotalSeconds(new int[]{0, 2, 3}));    // Output: 7380
    }
}
```

### Explanation:
1. **Import Statement**: No additional imports are needed since we are working with basic data types (`int`).
2. **Class Definition**: The class `Answer` is defined.
3. **Constants**: Constants `SECONDS_PER_DAY`, `SECONDS_PER_HOUR`, and `SECONDS_PER_MINUTE` are declared as `private static final` variables.
4. **Method Signature**: The method `calculateTotalSeconds` takes an `int[]` array as its parameter and returns an `int`.
5. **Javadoc Comments**: The Python docstring is converted into a Javadoc comment block.
6. **Unpacking with Defaults**: The method unpacks the `time` array with default values if the array is shorter than expected.
7. **Calculation**: The total number of seconds is calculated using the constants and the unpacked values.
8. **Main Method**: A `main` method is included for testing purposes, demonstrating how to call the `calculateTotalSeconds` method with example inputs.

This Java code preserves the original functionality and structure of the Python code while adhering to Java conventions and best practices.