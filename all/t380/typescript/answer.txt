Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function calculateTotalSeconds(time: [number, number?, number?, number?]): number {
    const SECONDS_PER_DAY = 86400;
    const SECONDS_PER_HOUR = 3600;
    const SECONDS_PER_MINUTE = 60;

    // Unpacking the time with defaults
    let [days, hours = 0, minutes = 0, seconds = 0] = time;

    const totalSeconds = (
        days * SECONDS_PER_DAY +
        hours * SECONDS_PER_HOUR +
        minutes * SECONDS_PER_MINUTE +
        seconds
    );

    return totalSeconds;
}

// Example usage
console.log(calculateTotalSeconds([1, 2, 3, 4])); // Output: 93784
console.log(calculateTotalSeconds([0, 2, 3])); // Output: 7380
```

### Explanation:
1. **Function Signature**: The function `calculateTotalSeconds` takes a tuple `[number, number?, number?, number?]` as its parameter. This means the first element is mandatory, and the subsequent elements are optional.
2. **Constants**: The constants `SECONDS_PER_DAY`, `SECONDS_PER_HOUR`, and `SECONDS_PER_MINUTE` are defined similarly to the Python code.
3. **Unpacking with Defaults**: In TypeScript, you can use destructuring with default values to handle optional tuple elements. If an element is not provided, it will default to `0`.
4. **Calculation**: The calculation logic remains the same, summing up the total seconds from days, hours, minutes, and seconds.
5. **Return Value**: The function returns the total number of seconds as an integer.

This TypeScript code maintains the same functionality and logic as the original Python code while adhering to TypeScript's static type system.