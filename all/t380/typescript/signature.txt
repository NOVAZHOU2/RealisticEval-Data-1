Certainly! Here is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Calculate the total number of seconds given a tuple or array of time periods in the order of
 * days, hours, minutes, and seconds.
 *
 * @param time - A tuple or array where:
 *   - time[0] - number of days (optional)
 *   - time[1] - number of hours (optional)
 *   - time[2] - number of minutes (optional)
 *   - time[3] - number of seconds (optional)
 * @returns The total number of seconds.
 *
 * Examples:
 *   calculateTotalSeconds([1, 2, 3, 4]) returns 93784
 *   calculateTotalSeconds([0, 2, 3]) returns 7380
 */
function calculateTotalSeconds(time: [number, number?, number?, number?]): number {
    const SECONDS_PER_DAY = 86400;
    const SECONDS_PER_HOUR = 3600;
    const SECONDS_PER_MINUTE = 60;

    // Unpacking the time with defaults
    let [days, hours = 0, minutes = 0, seconds = 0] = time;

    const totalSeconds = (
        days * SECONDS_PER_DAY +
        hours * SECONDS_PER_HOUR +
        minutes * SECONDS_PER_MINUTE +
        seconds
    );

    return totalSeconds;
}

// Example usage
console.log(calculateTotalSeconds([1, 2, 3, 4])); // Output: 93784
console.log(calculateTotalSeconds([0, 2, 3])); // Output: 7380
```

### Explanation:
1. **Function Signature**:
   - The function `calculateTotalSeconds` takes a tuple `[number, number?, number?, number?]` as its parameter. This means the first element is mandatory, and the subsequent elements are optional.
   
2. **JSDoc Documentation**:
   - The JSDoc-style documentation is added to provide clear descriptions of the parameters and return value, along with examples.

3. **Constants**:
   - Constants `SECONDS_PER_DAY`, `SECONDS_PER_HOUR`, and `SECONDS_PER_MINUTE` are defined similarly to the Python code.

4. **Unpacking with Defaults**:
   - Destructuring assignment with default values is used to handle optional tuple elements. If an element is not provided, it will default to `0`.

5. **Calculation**:
   - The calculation logic remains the same, summing up the total seconds from days, hours, minutes, and seconds.

6. **Return Value**:
   - The function returns the total number of seconds as an integer.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and using appropriate JSDoc-style documentation.