To convert the Python unittest test class to a TypeScript test class using Jest, we first need to implement the `calculate_total_seconds` function in TypeScript. Below is the equivalent TypeScript implementation:

```typescript
import { describe, it, expect } from '@jest/globals';

function calculateTotalSeconds(time: [number, number?, number?, number?]): number {
    let totalSeconds = 0;

    if (time.length > 0) {
        totalSeconds += time[0] * 24 * 60 * 60; // Days
    }
    if (time.length > 1) {
        totalSeconds += time[1] * 60 * 60; // Hours
    }
    if (time.length > 2) {
        totalSeconds += time[2] * 60; // Minutes
    }
    if (time.length > 3) {
        totalSeconds += time[3]; // Seconds
    }

    return totalSeconds;
}

describe('calculateTotalSeconds', () => {
    it('should correctly calculate the total seconds with all parameters', () => {
        const result = calculateTotalSeconds([1, 2, 3, 4]);
        expect(result).toBe(93784);
    });

    it('should correctly calculate the total seconds without days', () => {
        const result = calculateTotalSeconds([0, 2, 3]);
        expect(result).toBe(7380);
    });

    it('should correctly calculate the total seconds with only seconds', () => {
        const result = calculateTotalSeconds([0, 0, 0, 5]);
        expect(result).toBe(5);
    });

    it('should correctly calculate the total seconds with only minutes and seconds', () => {
        const result = calculateTotalSeconds([0, 0, 2, 5]);
        expect(result).toBe(125);
    });

    it('should correctly calculate the total seconds with only hours, minutes, and seconds', () => {
        const result = calculateTotalSeconds([0, 1, 2, 3]);
        expect(result).toBe(3723);
    });
});
```

### Explanation:
1. **Function Definition**: The `calculateTotalSeconds` function takes a tuple or array of numbers representing days, hours, minutes, and seconds. It calculates the total number of seconds by converting each unit of time into seconds.
2. **Type Annotations**: The function parameter `time` is annotated as `[number, number?, number?, number?]`, which means it can have up to four elements, with the last three being optional.
3. **Jest Assertions**: We use Jest's `expect` function to make assertions about the output of the `calculateTotalSeconds` function.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to TypeScript's syntax and Jest's assertion methods.