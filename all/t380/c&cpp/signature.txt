Sure, here is the equivalent C++ code with the same functionality and comments:

```cpp
#include <vector>
#include <iostream>

/**
 * Calculate the total number of seconds given a vector of time periods in the order of
 * days, hours, minutes, and seconds.
 *
 * @param time A vector where
 *     time[0] - number of days (optional)
 *     time[1] - number of hours (optional)
 *     time[2] - number of minutes (optional)
 *     time[3] - number of seconds (optional)
 * @return The total number of seconds as an integer.
 *
 * Examples:
 *     calculateTotalSeconds({1, 2, 3, 4}) returns 93784
 *     calculateTotalSeconds({0, 2, 3}) returns 7380
 */
int calculateTotalSeconds(const std::vector<int>& time) {
    int totalSeconds = 0;

    // Days to seconds conversion
    if (time.size() > 0) {
        totalSeconds += time[0] * 24 * 60 * 60;
    }

    // Hours to seconds conversion
    if (time.size() > 1) {
        totalSeconds += time[1] * 60 * 60;
    }

    // Minutes to seconds conversion
    if (time.size() > 2) {
        totalSeconds += time[2] * 60;
    }

    // Seconds to seconds conversion (already in seconds)
    if (time.size() > 3) {
        totalSeconds += time[3];
    }

    return totalSeconds;
}

// Example usage
int main() {
    std::vector<int> time1 = {1, 2, 3, 4};
    std::cout << "Total seconds for [1, 2, 3, 4]: " << calculateTotalSeconds(time1) << std::endl; // Output: 93784

    std::vector<int> time2 = {0, 2, 3};
    std::cout << "Total seconds for [0, 2, 3]: " << calculateTotalSeconds(time2) << std::endl; // Output: 7380

    return 0;
}
```

This C++ code defines a function `calculateTotalSeconds` that takes a `std::vector<int>` as input and calculates the total number of seconds based on the provided time periods. It includes example usage in the `main` function to demonstrate how it works.