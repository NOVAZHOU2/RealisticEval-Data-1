Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <vector>

// Function to calculate the total number of seconds given a vector of time periods
// in the order of days, hours, minutes, and seconds.
//
// Parameters:
//   time - a vector of integers representing days, hours, minutes, and seconds.
// Returns:
//   The total number of seconds.
//
// Examples:
//   calculate_total_seconds({1, 2, 3, 4}) returns 93784
//   calculate_total_seconds({0, 2, 3}) returns 7380
int calculate_total_seconds(const std::vector<int>& time) {
    const int SECONDS_PER_DAY = 86400;
    const int SECONDS_PER_HOUR = 3600;
    const int SECONDS_PER_MINUTE = 60;

    // Unpacking the time with defaults
    int days = 0, hours = 0, minutes = 0, seconds = 0;
    if (time.size() > 0) days = time[0];
    if (time.size() > 1) hours = time[1];
    if (time.size() > 2) minutes = time[2];
    if (time.size() > 3) seconds = time[3];

    int total_seconds = (
        days * SECONDS_PER_DAY +
        hours * SECONDS_PER_HOUR +
        minutes * SECONDS_PER_MINUTE +
        seconds
    );

    return total_seconds;
}

// Example usage
int main() {
    std::cout << "Total seconds: " << calculate_total_seconds({1, 2, 3, 4}) << std::endl; // Should print 93784
    std::cout << "Total seconds: " << calculate_total_seconds({0, 2, 3}) << std::endl; // Should print 7380
    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<iostream>` and `<vector>`) are included at the beginning.
2. **Function Documentation**: The Python docstring is translated into C++ comments using `/* */` for multi-line comments.
3. **Function Signature**: The function `calculate_total_seconds` takes a `const std::vector<int>& time` as its parameter, which is equivalent to the Python tuple or list.
4. **Constants**: Constants `SECONDS_PER_DAY`, `SECONDS_PER_HOUR`, and `SECONDS_PER_MINUTE` are defined similarly to the Python code.
5. **Unpacking with Defaults**: In C++, we check the size of the vector and assign values accordingly. If the vector does not contain enough elements, the default value (zero) is used.
6. **Calculation**: The total number of seconds is calculated using the constants and the unpacked values.
7. **Example Usage**: The `main` function demonstrates how to call `calculate_total_seconds` with different inputs and prints the results.

This C++ code preserves the original purpose and structure of the Python code, including the documentation and functionality.