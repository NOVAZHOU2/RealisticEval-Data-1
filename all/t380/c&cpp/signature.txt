Here's the equivalent C++ code for the provided Python function:

```cpp
#include <tuple>
#include <cstddef> // For std::size_t

// Calculate the total number of seconds given a tuple of time periods in the order of
// days, hours, minutes, and seconds.
//
// Parameters:
//     time: A std::tuple, where
//         std::get<0>(time) - number of days (optional)
//         std::get<1>(time) - number of hours (optional)
//         std::get<2>(time) - number of minutes (optional)
//         std::get<3>(time) - number of seconds (optional)
//
// Returns:
//     long, total number of seconds
//
// Examples:
//     calculate_total_seconds(std::make_tuple(1, 2, 3, 4)) returns 93784
//     calculate_total_seconds(std::make_tuple(0, 2, 3, 0)) returns 7380
long calculate_total_seconds(const std::tuple<std::size_t, std::size_t, std::size_t, std::size_t>& time) {
    long total_seconds = 0;

    // Extract each element from the tuple
    std::size_t days = std::get<0>(time);
    std::size_t hours = std::get<1>(time);
    std::size_t minutes = std::get<2>(time);
    std::size_t seconds = std::get<3>(time);

    // Convert days, hours, and minutes to seconds and add them to the total seconds
    total_seconds += days * 24 * 60 * 60;
    total_seconds += hours * 60 * 60;
    total_seconds += minutes * 60;
    total_seconds += seconds;

    return total_seconds;
}
```

Note that in C++, tuples have a fixed size, so I assumed that all four elements (days, hours, minutes, and seconds) are always present but can be zero if they are optional. If you need to handle variable-sized inputs like lists or tuples with fewer elements, you might need a different approach, such as using `std::array` or `std::vector`.