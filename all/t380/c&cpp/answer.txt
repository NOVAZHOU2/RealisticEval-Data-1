Certainly! Below is the equivalent C++ code for the provided Python function. The C++ code will maintain the same functionality and logic, including handling optional parameters by defaulting them to zero if not provided.

```cpp
#include <iostream>
#include <vector>
#include <array>

// Function to calculate the total number of seconds given a vector of time periods
// in the order of days, hours, minutes, and seconds.
//
// Parameters:
//   time - a vector or array of integers representing days, hours, minutes, and seconds.
// Returns:
//   The total number of seconds.
int calculate_total_seconds(const std::vector<int>& time) {
    const int SECONDS_PER_DAY = 86400;
    const int SECONDS_PER_HOUR = 3600;
    const int SECONDS_PER_MINUTE = 60;

    // Unpacking the time with defaults
    int days = 0, hours = 0, minutes = 0, seconds = 0;
    if (time.size() > 0) days = time[0];
    if (time.size() > 1) hours = time[1];
    if (time.size() > 2) minutes = time[2];
    if (time.size() > 3) seconds = time[3];

    int total_seconds = (
        days * SECONDS_PER_DAY +
        hours * SECONDS_PER_HOUR +
        minutes * SECONDS_PER_MINUTE +
        seconds
    );

    return total_seconds;
}

// Example usage
int main() {
    std::cout << "Total seconds: " << calculate_total_seconds({1, 2, 3, 4}) << std::endl; // Should print 93784
    std::cout << "Total seconds: " << calculate_total_seconds({0, 2, 3}) << std::endl; // Should print 7380
    return 0;
}
```

### Explanation:
1. **Function Definition**: The `calculate_total_seconds` function takes a `std::vector<int>` as its parameter. This is similar to taking a list or tuple in Python.
2. **Constants**: Constants `SECONDS_PER_DAY`, `SECONDS_PER_HOUR`, and `SECONDS_PER_MINUTE` are defined similarly to the Python code.
3. **Unpacking with Defaults**: In C++, we check the size of the vector and assign values accordingly. If the vector does not contain enough elements, the default value (zero) is used.
4. **Calculation**: The total number of seconds is calculated using the constants and the unpacked values.
5. **Example Usage**: The `main` function demonstrates how to call `calculate_total_seconds` with different inputs and prints the results.

This C++ code maintains the same functionality and logic as the original Python code.