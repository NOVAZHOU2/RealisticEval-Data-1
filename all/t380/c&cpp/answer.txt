Sure, here is how you can implement the same functionality in C++:

```cpp
#include <iostream>
using namespace std;

int calculateTotalSeconds(int time[], int size) {
    if(size > 4 || size <= 0){
        cout << "Invalid input! Please enter an array with elements between 1 and 4.";
        return -1;
    }
    
    int total_seconds = 0;
    for(int i=0; i<size; ++i){
        switch(i){
            case 0: total_seconds += time[i]*24*60*60; break;
            case 1: total_seconds += time[i]*60*60; break;
            case 2: total_seconds += time[i]*60; break;
            case 3: total_seconds += time[i]; break;
            default: break;
        }
    }

    return total_seconds;
}

int main(){
    int time[] = {1, 2, 3, 4};
    int size = sizeof(time)/sizeof(time[0]);
    cout << "Total seconds: " << calculateTotalSeconds(time, size);
    return 0;
}
```

In this C++ code, we have a function `calculateTotalSeconds` that takes an array of integers and its size as parameters. It then calculates the total number of seconds based on the values provided in the array.

Please note that C++ does not support optional arguments like Python. Therefore, we need to check if the size of the array falls within the valid range before proceeding with the calculation. If it doesn't, we print an error message and return `-1`.

Also, unlike Python's dynamic typing, we need to declare the type of each variable explicitly in C++. In this code, we use `int` for both the function parameters and the local variables.