Certainly! Below is the equivalent C++ code for the provided Python function. The C++ code will maintain the same functionality, logic, and structure, including handling optional parameters and unpacking the input array.

```cpp
#include <iostream>
#include <vector>
#include <array>

int calculate_total_seconds(const std::vector<int>& time) {
    const int SECONDS_PER_DAY = 86400;
    const int SECONDS_PER_HOUR = 3600;
    const int SECONDS_PER_MINUTE = 60;

    // Extend the vector with zeros if it has less than 4 elements
    std::array<int, 4> extendedTime = {0, 0, 0, 0};
    for (size_t i = 0; i < time.size() && i < 4; ++i) {
        extendedTime[i] = time[i];
    }

    int days = extendedTime[0];
    int hours = extendedTime[1];
    int minutes = extendedTime[2];
    int seconds = extendedTime[3];

    int total_seconds = (
        days * SECONDS_PER_DAY +
        hours * SECONDS_PER_HOUR +
        minutes * SECONDS_PER_MINUTE +
        seconds
    );

    return total_seconds;
}

int main() {
    // Example usage
    std::vector<int> example1 = {1, 2, 3, 4};
    std::cout << "Total seconds: " << calculate_total_seconds(example1) << std::endl;  // Output: 93784

    std::vector<int> example2 = {0, 2, 3};
    std::cout << "Total seconds: " << calculate_total_seconds(example2) << std::endl;  // Output: 7380

    return 0;
}
```

### Explanation:
1. **Constants**: `SECONDS_PER_DAY`, `SECONDS_PER_HOUR`, and `SECONDS_PER_MINUTE` are defined similarly to the Python code.
2. **Input Handling**: The input is expected to be a `std::vector<int>` which can have between 0 and 4 elements.
3. **Unpacking and Default Values**: An `std::array<int, 4>` is used to ensure the input vector is extended with zeros if it has less than 4 elements. This mimics the behavior of default values in the Python code.
4. **Calculation**: The total number of seconds is calculated using the constants and the unpacked values from the extended array.
5. **Example Usage**: Two examples are provided to demonstrate how the function works, similar to the Python examples.