Sure! Below is the equivalent C++ unit test case using Catch2 for the provided Python unittest function `calculate_total_seconds`.

First, let's define the function in C++:

```cpp
#include <iostream>
#include <tuple>

int calculate_total_seconds(const std::tuple<int, int, int, int>& time) {
    auto [days, hours, minutes, seconds] = time;
    return days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds;
}
```

Now, let's write the Catch2 test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

TEST_CASE("Calculate Total Seconds", "[time]") {
    SECTION("Days, Hours, Minutes, Seconds") {
        REQUIRE(calculate_total_seconds(std::make_tuple(1, 2, 3, 4)) == 93784);
    }

    SECTION("Hours, Minutes, Seconds") {
        REQUIRE(calculate_total_seconds(std::make_tuple(0, 2, 3)) == 7380);
    }

    SECTION("Only Days") {
        REQUIRE(calculate_total_seconds(std::make_tuple(1, 0, 0, 0)) == 86400);
    }

    SECTION("Only Hours") {
        REQUIRE(calculate_total_seconds(std::make_tuple(0, 1, 0, 0)) == 3600);
    }

    SECTION("Only Minutes") {
        REQUIRE(calculate_total_seconds(std::make_tuple(0, 0, 1, 0)) == 60);
    }

    SECTION("Only Seconds") {
        REQUIRE(calculate_total_seconds(std::make_tuple(0, 0, 0, 1)) == 1);
    }

    SECTION("All Zeroes") {
        REQUIRE(calculate_total_seconds(std::make_tuple(0, 0, 0, 0)) == 0);
    }
}
```

In this C++ code:
- We include the necessary headers.
- Define the `calculate_total_seconds` function which takes a tuple of four integers representing days, hours, minutes, and seconds.
- Use Catch2 macros to create test cases. Each `SECTION` represents a different scenario for input parameters.
- The `REQUIRE` macro is used to assert that the function's output matches the expected result.

To run these tests, you need to have Catch2 installed. If you're using a build system like CMake, you can add the following to your `CMakeLists.txt`:

```cmake
find_package(Catch2 REQUIRED)

add_executable(tests test.cpp)
target_link_libraries(tests Catch2::Catch2_main)
```

Then, you can build and run the tests using your build system. For example, with CMake, you would do:

```sh
mkdir build
cd build
cmake ..
make
./tests
```

This will execute all the test cases and provide you with the results.