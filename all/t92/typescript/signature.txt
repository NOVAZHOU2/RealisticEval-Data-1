Certainly! Hereâ€™s the TypeScript version of the JavaScript code signature, keeping the comments intact:

```typescript
import { JSDOM } from 'jsdom';

/**
 * Decodes HTML entities in a given HTML string.
 * @param {string} htmlString - The HTML string containing entities to decode.
 * @returns {string} The decoded string with HTML entities converted back to their original characters.
 */
const { JSDOM } = require('jsdom');
const dom = new JSDOM();
const { document } = dom.window;

function replaceHtmlEntities(htmlString: string): string {
    // Function implementation goes here
}
```

In this TypeScript version:
- The function parameter `htmlString` is annotated with the type `string`.
- The return type of the function is specified as `string`.
- The import statement for `JSDOM` is included at the top.
- The comments are preserved as they were in the original JavaScript code.

If you need to include the actual implementation within the function, you can do so as follows:

```typescript
import { JSDOM } from 'jsdom';

/**
 * Decodes HTML entities in a given HTML string.
 * @param {string} htmlString - The HTML string containing entities to decode.
 * @returns {string} The decoded string with HTML entities converted back to their original characters.
 */
const { JSDOM } = require('jsdom');
const dom = new JSDOM();
const { document } = dom.window;

function replaceHtmlEntities(htmlString: string): string {
    if (typeof htmlString !== 'string') {
        throw new TypeError('Input must be a string.');
    }

    // Use a DOMParser to parse the string as HTML
    const parser = new DOMParser();
    const doc = parser.parseFromString(htmlString, 'text/html');

    // Return the text content, effectively decoding HTML entities
    return doc.documentElement.textContent || "";
}
```

This includes both the TypeScript signature and the full implementation.