Certainly! Hereâ€™s the TypeScript version of your Jest test case using `describe` and `test` blocks:

```typescript
import { replaceHtmlEntities } from './path/to/your/function'; // Import the function you want to test

describe('replaceHtmlEntities', () => {
    test('decodes standard HTML entities', () => {
        const input = 'The &amp; symbol should become an &quot;and&quot; sign.';
        const expected = 'The & symbol should become an "and" sign.';
        expect(replaceHtmlEntities(input)).toBe(expected);
    });

    test('returns empty string for empty input', () => {
        const input = '';
        const expected = '';
        expect(replaceHtmlEntities(input)).toBe(expected);
    });

    test('decodes multiple different entities in one string', () => {
        const input = '&lt;div&gt;Hello &amp; Welcome to the &apos;World&apos;!&lt;/div&gt;';
        const expected = '<div>Hello & Welcome to the \'World\'!</div>';
        expect(replaceHtmlEntities(input)).toBe(expected);
    });

    test('handles strings with no entities', () => {
        const input = 'Just a normal string without entities.';
        const expected = 'Just a normal string without entities.';
        expect(replaceHtmlEntities(input)).toBe(expected);
    });
});
```

### Explanation:
1. **Import Statement**: 
   - Ensure you import the `replaceHtmlEntities` function from the appropriate module or file.
   - Replace `'./path/to/your/function'` with the actual path to your function.

2. **Test Cases**:
   - Each test case remains the same but now uses TypeScript syntax.
   - The `input` and `expected` variables are implicitly typed based on their values.

3. **Jest Assertions**:
   - The `expect` and `toBe` assertions remain the same.

By following this structure, you can ensure that your Jest tests are written in TypeScript and maintain the same functionality and assertions as your original JavaScript tests.