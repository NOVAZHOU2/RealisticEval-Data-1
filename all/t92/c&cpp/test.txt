Certainly! To convert the Jest test cases to C++ using Catch2, follow these steps:

1. Install Catch2 in your project.
2. Write the test cases using Catch2 syntax.

Here’s the complete C++ code with the Catch2 test cases:

### Step 1: Install Catch2
You can install Catch2 via vcpkg or another package manager, or you can manually include it in your project. For simplicity, let's assume you have Catch2 included in your project.

### Step 2: Write the Test Cases

Here’s the C++ code with the Catch2 test cases:

```cpp
#include <iostream>
#include <string>
#include <stdexcept>
#include <pugixml.hpp>
#include <catch2/catch_test_macros.hpp>

// Function to decode HTML entities
std::string replaceHtmlEntities(const std::string& htmlString) {
    if (htmlString.empty()) {
        throw std::invalid_argument("Input must be a non-empty string.");
    }

    pugi::xml_document doc;
    pugi::xml_parse_result result = doc.load_string(htmlString.c_str(), pugi::parse_default | pugi::parse_declaration);

    if (!result) {
        throw std::runtime_error("Failed to parse HTML: " + std::string(result.description()));
    }

    // Get the document element
    pugi::xml_node docElement = doc.document_element();

    // Extract the text content
    std::string decodedText = docElement.child_value();

    return decodedText;
}

TEST_CASE("replaceHtmlEntities", "[replaceHtmlEntities]") {
    SECTION("decodes standard HTML entities") {
        const std::string input = "The &amp; symbol should become an &quot;and&quot; sign.";
        const std::string expected = "The & symbol should become an \"and\" sign.";
        REQUIRE(replaceHtmlEntities(input) == expected);
    }

    SECTION("returns empty string for empty input") {
        const std::string input = "";
        const std::string expected = "";
        REQUIRE(replaceHtmlEntities(input) == expected);
    }

    SECTION("decodes multiple different entities in one string") {
        const std::string input = "&lt;div&gt;Hello &amp; Welcome to the &apos;World&apos;!&lt;/div&gt;";
        const std::string expected = "<div>Hello & Welcome to the 'World'!</div>";
        REQUIRE(replaceHtmlEntities(input) == expected);
    }

    SECTION("handles strings with no entities") {
        const std::string input = "Just a normal string without entities.";
        const std::string expected = "Just a normal string without entities.";
        REQUIRE(replaceHtmlEntities(input) == expected);
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Include Libraries**: Include necessary headers (`iostream`, `string`, `stdexcept`, `pugixml.hpp`, `catch2/catch_test_macros.hpp`).
2. **Function Definition**: Define the `replaceHtmlEntities` function.
3. **Catch2 Test Cases**:
   - Use `TEST_CASE` to define the test suite.
   - Use `SECTION` to define individual test cases.
   - Use `REQUIRE` to assert the expected results.

### Running the Tests
To run the tests, you can compile your code with Catch2 and execute the resulting binary. Here’s an example command for compiling with g++:

```sh
g++ -o test_html_entities test_html_entities.cpp -lpugixml -lcatch2
./test_html_entities
```

This will compile and run the tests, and you should see the output indicating whether each test case passed or failed.