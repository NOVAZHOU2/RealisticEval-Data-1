Sure! Here is the equivalent Java code that decodes HTML entities from a given HTML string using the `org.apache.commons.lang3.StringEscapeUtils` utility class from Apache Commons Lang.

First, you need to add the Apache Commons Lang dependency to your project. If you're using Maven, add the following to your `pom.xml`:

```xml
<dependencies>
  <dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-lang3</artifactId>
    <version>3.12.0</version>
  </dependency>
</dependencies>
```

Here is the Java code:

```java
import org.apache.commons.lang3.StringEscapeUtils;

/**
 * Decodes HTML entities in a given HTML string.
 * @param htmlString The HTML string containing entities to decode.
 * @return The decoded string with HTML entities converted back to their original characters.
 * @throws IllegalArgumentException if the input is not a string.
 */
public class HtmlEntityDecoder {

    public static String replaceHtmlEntities(String htmlString) {
        if (htmlString == null) {
            throw new IllegalArgumentException("Input must be a string.");
        }

        // Use StringEscapeUtils to decode HTML entities
        return StringEscapeUtils.unescapeHtml4(htmlString);
    }

    public static void main(String[] args) {
        String htmlString = "Hello &amp; Welcome &lt;World&gt;!";
        String decodedString = replaceHtmlEntities(htmlString);
        System.out.println(decodedString); // Output: Hello & Welcome <World>!
    }
}
```

This Java code uses the `StringEscapeUtils.unescapeHtml4` method from the Apache Commons Lang library to decode HTML entities. It also includes a check for null input and throws an `IllegalArgumentException` if the input is not a string.