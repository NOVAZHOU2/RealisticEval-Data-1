Certainly! Here’s how you can convert the Jest test cases to JUnit 4 test cases in Java. We’ll use JUnit 4 along with AssertJ for more fluent assertions.

First, make sure you have the necessary dependencies in your `pom.xml`:

```xml
<dependencies>
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.13.2</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.assertj</groupId>
        <artifactId>assertj-core</artifactId>
        <version>3.24.2</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>3.12.0</version>
    </dependency>
</dependencies>
```

Now, let’s write the test cases in Java:

```java
package org.real.temp;

import org.apache.commons.lang3.StringEscapeUtils;
import org.junit.Test;
import static org.assertj.core.api.Assertions.assertThat;

/**
 * Test cases for the HtmlEntityDecoder class.
 */
public class Tester {

    private HtmlEntityDecoder htmlEntityDecoder = new HtmlEntityDecoder();

    @Test
    public void testDecodesStandardHtmlEntities() {
        String input = "The &amp; symbol should become an &quot;and&quot; sign.";
        String expected = "The & symbol should become an \"and\" sign.";
        assertThat(htmlEntityDecoder.replaceHtmlEntities(input)).isEqualTo(expected);
    }

    @Test
    public void testReturnsEmptyStringForEmptyInput() {
        String input = "";
        String expected = "";
        assertThat(htmlEntityDecoder.replaceHtmlEntities(input)).isEqualTo(expected);
    }

    @Test
    public void testDecodesMultipleDifferentEntitiesInOneString() {
        String input = "&lt;div&gt;Hello &amp; Welcome to the &apos;World&apos;!&lt;/div&gt;";
        String expected = "<div>Hello & Welcome to the 'World'!</div>";
        assertThat(htmlEntityDecoder.replaceHtmlEntities(input)).isEqualTo(expected);
    }

    @Test
    public void testHandlesStringsWithNoEntities() {
        String input = "Just a normal string without entities.";
        String expected = "Just a normal string without entities.";
        assertThat(htmlEntityDecoder.replaceHtmlEntities(input)).isEqualTo(expected);
    }
}

// The HtmlEntityDecoder class remains the same as before
public class HtmlEntityDecoder {

    /**
     * Decodes HTML entities in a given HTML string.
     * @param htmlString The HTML string containing entities to decode.
     * @return The decoded string with HTML entities converted back to their original characters.
     */
    public static String replaceHtmlEntities(String htmlString) {
        if (htmlString == null) {
            throw new IllegalArgumentException("Input must be a string.");
        }

        // Use StringEscapeUtils to decode HTML entities
        return StringEscapeUtils.unescapeHtml4(htmlString);
    }
}
```

### Explanation:
1. **Dependencies**: Ensure you have the necessary dependencies for JUnit 4 and AssertJ.
2. **Test Class**: Define a test class `Tester` within the package `org.real.temp`.
3. **JUnit Annotations**: Use `@Test` annotations to define individual test methods.
4. **AssertJ Assertions**: Use `assertThat` from AssertJ for more readable and fluent assertions.
5. **Test Methods**:
   - `testDecodesStandardHtmlEntities`: Tests decoding standard HTML entities.
   - `testReturnsEmptyStringForEmptyInput`: Tests handling of empty input.
   - `testDecodesMultipleDifferentEntitiesInOneString`: Tests decoding multiple entities in one string.
   - `testHandlesStringsWithNoEntities`: Tests handling of strings with no entities.

This setup ensures that the test cases are clear, concise, and maintain the same functionality as the original Jest test cases.