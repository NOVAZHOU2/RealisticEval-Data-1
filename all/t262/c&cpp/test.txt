To convert the given Python unittest test class to a C++ test case using Catch2, we need to define the `TreeNode` structure and implement the `average_of_levels` function. Below is the equivalent C++ code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include "catch.hpp"

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

std::vector<double> averageOfLevels(TreeNode* root) {
    std::vector<double> averages;
    if (!root) return averages;

    std::queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        int levelSize = q.size();
        double sum = 0;

        for (int i = 0; i < levelSize; ++i) {
            TreeNode* node = q.front();
            q.pop();
            sum += node->val;

            if (node->left) q.push(node->left);
            if (node->right) q.push(node->right);
        }

        averages.push_back(sum / levelSize);
    }

    return averages;
}

TEST_CASE("Average of Levels", "[averageOfLevels]") {
    // Test case 1: Empty tree
    REQUIRE(averageOfLevels(nullptr).empty());

    // Test case 2: Single node tree
    TreeNode root1(3);
    REQUIRE(averageOfLevels(&root1) == std::vector<double>({3.0}));

    // Test case 3: Tree with multiple levels
    TreeNode root2(3);
    root2.left = new TreeNode(9);
    root2.right = new TreeNode(20);
    root2.right->left = new TreeNode(15);
    root2.right->right = new TreeNode(7);
    REQUIRE(averageOfLevels(&root2) == std::vector<double>({3.0, 14.5, 11.0}));
}
```

### Explanation:
1. **TreeNode Structure**: Defined in C++ with a constructor that initializes the node's value and pointers to its left and right children.
2. **averageOfLevels Function**: Implemented to calculate the average values of nodes at each level of a binary tree using a breadth-first search approach with a queue.
3. **Catch2 Test Cases**:
   - **Test Case 1**: Checks the behavior of the function with an empty tree.
   - **Test Case 2**: Checks the behavior of the function with a single-node tree.
   - **Test Case 3**: Checks the behavior of the function with a tree having multiple levels.

Make sure you have Catch2 installed and properly set up in your project to compile and run these tests.