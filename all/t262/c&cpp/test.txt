Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The test cases are converted to match the functionality and logic of the provided Python unittest class.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro for defining test cases.

Here is the complete C++ code:

```cpp
#include <iostream>
#include <vector>
#include <deque>
#include <cassert>
#include <cmath>
#include "catch.hpp"

// Define the TreeNode class
class TreeNode {
public:
    int val;
    TreeNode *left;
    TreeNode *right;

    // Constructor for TreeNode
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to calculate the average of levels in a binary tree
std::vector<double> average_of_levels(TreeNode* root) {
    if (!root) {
        return {};
    }

    std::vector<double> result;
    std::deque<std::pair<TreeNode*, int>> queue; // (node, level)
    queue.push_back(std::make_pair(root, 0));

    while (!queue.empty()) {
        std::vector<int> current_level;
        int level_size = queue.size();

        for (int i = 0; i < level_size; ++i) {
            auto [node, level] = queue.front();
            queue.pop_front();
            current_level.push_back(node->val);

            if (node->left) {
                queue.push_back(std::make_pair(node->left, level + 1));
            }
            if (node->right) {
                queue.push_back(std::make_pair(node->right, level + 1));
            }
        }

        // Calculate the average for the current level
        double level_average = std::accumulate(current_level.begin(), current_level.end(), 0) / current_level.size();
        result.push_back(level_average);
    }

    return result;
}

// Test class using Catch2
TEST_CASE("Test average_of_levels") {
    SECTION("Empty Tree") {
        TreeNode* root = nullptr;
        std::vector<double> expected = {};
        REQUIRE(average_of_levels(root) == expected);
    }

    SECTION("Single Node Tree") {
        TreeNode* root = new TreeNode(5);
        std::vector<double> expected = {5.0};
        REQUIRE(average_of_levels(root) == expected);
        delete root;
    }

    SECTION("Balanced Tree Two Levels") {
        TreeNode* root = new TreeNode(3);
        root->left = new TreeNode(9);
        root->right = new TreeNode(20);
        std::vector<double> expected = {3.0, 14.5};
        REQUIRE(average_of_levels(root) == expected);
        delete root->left;
        delete root->right;
        delete root;
    }

    SECTION("Unbalanced Tree") {
        TreeNode* root = new TreeNode(1);
        root->right = new TreeNode(2);
        root->right->right = new TreeNode(3);
        std::vector<double> expected = {1.0, 2.0, 3.0};
        REQUIRE(average_of_levels(root) == expected);
        delete root->right->right;
        delete root->right;
        delete root;
    }

    SECTION("Tree Multiple Levels") {
        TreeNode* root = new TreeNode(1);
        root->left = new TreeNode(2);
        root->right = new TreeNode(3);
        root->left->left = new TreeNode(4);
        root->left->right = new TreeNode(5);
        root->right->right = new TreeNode(8);
        std::vector<double> expected = {1.0, 2.5, 5.67};
        auto result = average_of_levels(root);
        REQUIRE(result.size() == expected.size());
        REQUIRE_THAT(result[0], Catch::Matchers::WithinAbs(expected[0], 0.01));
        REQUIRE_THAT(result[1], Catch::Matchers::WithinAbs(expected[1], 0.01));
        REQUIRE_THAT(result[2], Catch::Matchers::WithinAbs(expected[2], 0.01));
        delete root->left->left;
        delete root->left->right;
        delete root->right->right;
        delete root->left;
        delete root->right;
        delete root;
    }
}

// Main function to run the tests
int main(int argc, char* argv[]) {
    int result = Catch::Session().run(argc, argv);
    return result;
}
```

### Explanation:
1. **TreeNode Class**:
   - The `TreeNode` class is defined with a constructor that initializes the node's value and sets its children to `nullptr`.

2. **average_of_levels Function**:
   - The function `average_of_levels` is implemented to calculate the average value of nodes at each level in the binary tree.

3. **Catch2 Test Cases**:
   - Each test case is defined using the `SECTION` macro within the `TEST_CASE` macro.
   - Assertions are made using `REQUIRE` and `REQUIRE_THAT` to check the correctness of the results.
   - Proper cleanup of dynamically allocated nodes is included to avoid memory leaks.

4. **Main Function**:
   - The `main` function runs the Catch2 test suite.

This C++ code preserves the original functionality and logic of the Python unittest class, ensuring that all test cases are accurately represented and verified using the Catch2 testing framework.