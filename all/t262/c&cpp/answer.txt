Here is the equivalent C++ code:

```cpp
#include <vector>
#include <queue>

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

std::vector<double> averageOfLevels(TreeNode* root) {
    std::vector<double> result;
    if (!root)
        return result;

    std::queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        int size = q.size();
        double sum = 0;

        for (int i = 0; i < size; ++i) {
            TreeNode* node = q.front();
            q.pop();

            sum += node->val;

            if (node->left)
                q.push(node->left);
            if (node->right)
                q.push(node->right);
        }

        result.push_back(sum / size);
    }

    return result;
}
```

And here is the equivalent C# code:

```csharp
using System.Collections.Generic;

public class TreeNode {
    public int val;
    public TreeNode left;
    public TreeNode right;
    public TreeNode(int x) { val = x; }
}

public class Solution {
    public IList<double> AverageOfLevels(TreeNode root) {
        var result = new List<double>();
        if (root == null)
            return result;

        var queue = new Queue<TreeNode>();
        queue.Enqueue(root);

        while (queue.Count > 0) {
            int size = queue.Count;
            double sum = 0;

            for (int i = 0; i < size; ++i) {
                var node = queue.Dequeue();

                sum += node.val;

                if (node.left != null)
                    queue.Enqueue(node.left);
                if (node.right != null)
                    queue.Enqueue(node.right);
            }

            result.Add(sum / size);
        }

        return result;
    }
}
```
Please note that Python does not have built-in support for generic types like `List` and `Optional`, so we don't need to define these in our C++ or C# code. Also, unlike Python's dynamic typing, C++ and C# require explicit type declarations.