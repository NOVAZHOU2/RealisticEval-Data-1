Certainly! Below is the equivalent C++ code that preserves the original purpose and structure of the Python code, including comments and type annotations translated into C++:

```cpp
#include <iostream>
#include <vector>
#include <deque>

// Define the TreeNode class
class TreeNode {
public:
    int val;
    TreeNode *left;
    TreeNode *right;

    // Constructor for TreeNode
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to calculate the average of levels in a binary tree
/**
 * Given the root of a binary tree, return the average value of the nodes on each level in the form of an array.
 *
 * @param root The root of the binary tree.
 * @return A vector containing the average values of each level.
 */
std::vector<double> average_of_levels(TreeNode* root) {
    if (!root) {
        return {};
    }

    std::vector<double> result;
    std::deque<std::pair<TreeNode*, int>> queue; // (node, level)
    queue.push_back(std::make_pair(root, 0));

    while (!queue.empty()) {
        std::vector<int> current_level;
        int level_size = queue.size();

        for (int i = 0; i < level_size; ++i) {
            auto [node, level] = queue.front();
            queue.pop_front();
            current_level.push_back(node->val);

            if (node->left) {
                queue.push_back(std::make_pair(node->left, level + 1));
            }
            if (node->right) {
                queue.push_back(std::make_pair(node->right, level + 1));
            }
        }

        // Calculate the average for the current level
        double level_average = std::accumulate(current_level.begin(), current_level.end(), 0) / current_level.size();
        result.push_back(level_average);
    }

    return result;
}

// Example usage
int main() {
    // Constructing a sample binary tree
    TreeNode* root = new TreeNode(3);
    root->left = new TreeNode(9);
    root->right = new TreeNode(20);
    root->right->left = new TreeNode(15);
    root->right->right = new TreeNode(7);

    // Calculate the average of levels
    std::vector<double> averages = average_of_levels(root);

    // Print the results
    for (double avg : averages) {
        std::cout << avg << " ";
    }

    // Clean up the allocated nodes
    delete root->left;
    delete root->right->left;
    delete root->right->right;
    delete root->right;
    delete root;

    return 0;
}
```

### Explanation:
1. **TreeNode Class**:
   - The `TreeNode` class is defined with a constructor that initializes the node's value and sets its children to `nullptr`.

2. **average_of_levels Function**:
   - The function `average_of_levels` is documented using C++ style comments.
   - It takes a `TreeNode*` pointer as input and returns a `std::vector<double>` representing the average values of each level.
   - The function uses a `std::deque` to store pairs of `(node, level)` to keep track of the current node and its level.
   - A `while` loop processes the queue until it is empty.
   - For each level, it calculates the average value of the nodes and appends it to the result vector.

3. **Example Usage**:
   - An example binary tree is constructed.
   - The `average_of_levels` function is called to demonstrate its use.
   - The results are printed.
   - Proper deletion of dynamically allocated nodes is included to avoid memory leaks.

This C++ code preserves the original functionality and structure of the Python code, including comments and type annotations.