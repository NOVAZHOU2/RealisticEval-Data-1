```cpp
#include <vector>
#include <queue>

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;

    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

std::vector<double> averageOfLevels(TreeNode* root) {
    /**
     * Given the root of a binary tree, return the average value of the nodes on each level in the form of an array.
     *
     * @param root Pointer to the root of the binary tree.
     * @return A vector containing the average values of each level.
     */
    
    std::vector<double> result;
    if (!root) return result; // Check if the tree is empty

    std::queue<TreeNode*> q;
    q.push(root); // Start with the root node

    while (!q.empty()) {
        int levelSize = q.size();
        double sum = 0.0;

        for (int i = 0; i < levelSize; ++i) {
            TreeNode* current = q.front();
            q.pop();

            sum += current->val;

            if (current->left) q.push(current->left);
            if (current->right) q.push(current->right);
        }

        result.push_back(sum / levelSize);
    }

    return result;
}
```

This C++ code defines a `TreeNode` struct and a function `averageOfLevels` that calculates the average value of nodes at each level in a binary tree. It uses a queue to traverse the tree level by level, sums up the node values at each level, and then divides by the number of nodes to get the average.