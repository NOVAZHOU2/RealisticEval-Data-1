Sure! Below is the equivalent Java JUnit test case for your Python `unittest` class. I'll assume that you have a method `averageOfLevels` implemented in a class named `BinaryTreeUtil`. If you don't have it yet, I'll provide a basic implementation.

### Java Class (`BinaryTreeUtil.java`)
```java
public class BinaryTreeUtil {
    public static List<Double> averageOfLevels(TreeNode root) {
        if (root == null) {
            return new ArrayList<>();
        }

        List<Double> averages = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            double sum = 0;

            for (int i = 0; i < levelSize; i++) {
                TreeNode currentNode = queue.poll();
                sum += currentNode.val;

                if (currentNode.left != null) {
                    queue.add(currentNode.left);
                }
                if (currentNode.right != null) {
                    queue.add(currentNode.right);
                }
            }

            averages.add(sum / levelSize);
        }

        return averages;
    }
}
```

### Java Test Case (`Tester.java`)
```java
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class Tester {

    @Test
    public void testAverageOfLevels() {
        // Create a sample binary tree
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(9);
        root.right = new TreeNode(20);
        root.right.left = new TreeNode(15);
        root.right.right = new TreeNode(7);

        // Expected result
        List<Double> expected = Arrays.asList(3.0, 14.5, 11.0);

        // Actual result
        List<Double> actual = BinaryTreeUtil.averageOfLevels(root);

        // Assert the results
        assertEquals(expected, actual);
    }
}

// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}
```

### Explanation
1. **BinaryTreeUtil Class**: This class contains the `averageOfLevels` method which calculates the average value of nodes at each level in a binary tree.
2. **Tester Class**: This class contains a JUnit test method `testAverageOfLevels` which tests the `averageOfLevels` method with a sample binary tree and asserts the expected result.

Make sure you have the necessary imports and setup for running JUnit tests in your project environment.