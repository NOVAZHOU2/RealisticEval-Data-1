Certainly! Below is the equivalent TypeScript code using Jest for testing the `averageOfLevels` function. The test cases will be converted to Jest's `it` blocks, and the assertions will be mapped to Jest's assertion methods.

### TypeScript Code with Jest Testing

```typescript
import { TreeNode } from './TreeNode'; // Assuming TreeNode is defined in a separate file

/**
 * Given the root of a binary tree, return the average value of the nodes on each level in the form of an array.
 *
 * @param root - The root of the binary tree.
 * @returns An array containing the average values of each level.
 */
function averageOfLevels(root: TreeNode | null): number[] {
    if (!root) {
        return [];
    }

    const result: number[] = [];
    let queue: [TreeNode, number][] = [[root, 0]]; // (node, level)

    while (queue.length > 0) {
        const currentLevelValues: number[] = [];
        const levelSize = queue.length;

        for (let i = 0; i < levelSize; i++) {
            const [node, level] = queue.shift()!;
            currentLevelValues.push(node.val);

            if (node.left) {
                queue.push([node.left, level + 1]);
            }
            if (node.right) {
                queue.push([node.right, level + 1]);
            }
        }

        // Calculate the average for the current level
        const levelAverage = currentLevelValues.reduce((acc, val) => acc + val, 0) / currentLevelValues.length;
        result.push(levelAverage);
    }

    return result;
}

describe('averageOfLevels', () => {
    it('should handle an empty tree', () => {
        const root = null;
        const expected = [];
        expect(averageOfLevels(root)).toEqual(expected);
    });

    it('should handle a single-node tree', () => {
        const root = new TreeNode(5);
        const expected = [5.0];
        expect(averageOfLevels(root)).toEqual(expected);
    });

    it('should handle a balanced tree with two levels', () => {
        const root = new TreeNode(3);
        root.left = new TreeNode(9);
        root.right = new TreeNode(20);
        const expected = [3.0, 14.5];  // Level 0: 3; Level 1: (9+20)/2 = 14.5
        expect(averageOfLevels(root)).toEqual(expected);
    });

    it('should handle an unbalanced tree', () => {
        const root = new TreeNode(1);
        root.right = new TreeNode(2);
        root.right.right = new TreeNode(3);
        const expected = [1.0, 2.0, 3.0];  // Level 0: 1; Level 1: 2; Level 2: 3
        expect(averageOfLevels(root)).toEqual(expected);
    });

    it('should handle a tree with multiple levels', () => {
        const root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.right = new TreeNode(8);
        const expected = [1.0, 2.5, 5.67];  // Level 0: 1; Level 1: (2+3)/2 = 2.5; Level 2: (4+5+8)/3 â‰ˆ 5.67
        expect(averageOfLevels(root)[2]).toBeCloseTo(expected[2], 2);
        expect(averageOfLevels(root).slice(0, 2)).toEqual(expected.slice(0, 2));
    });
});

// TreeNode class definition
class TreeNode {
    val: number;
    left: TreeNode | null;
    right: TreeNode | null;

    constructor(val: number = 0, left: TreeNode | null = null, right: TreeNode | null = null) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}
```

### Explanation:
1. **Class Definition**:
   - The `TreeNode` class is defined with properties `val`, `left`, and `right`. The constructor initializes these properties with default values.

2. **Function Definition**:
   - The `averageOfLevels` function takes a `TreeNode` or `null` as input and returns an array of numbers representing the average values of each level.

3. **Jest Testing**:
   - The `describe` block groups the test cases under the `averageOfLevels` function.
   - Each test case uses `it` blocks to describe the test scenario.
   - Assertions are made using Jest's `expect` function with various matchers like `toEqual` and `toBeCloseTo`.

4. **Test Cases**:
   - `test_empty_tree`: Tests an empty tree.
   - `test_single_node_tree`: Tests a single-node tree.
   - `test_balanced_tree_two_levels`: Tests a balanced tree with two levels.
   - `test_unbalanced_tree`: Tests an unbalanced tree.
   - `test_tree_multiple_levels`: Tests a tree with multiple levels, including floating-point comparisons.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate Jest assertions and type annotations.