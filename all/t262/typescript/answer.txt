Here is your Python code converted into TypeScript:

```typescript
interface TreeNode {
  val: number;
  left: TreeNode | null;
  right: TreeNode | null;
}

function averageOfLevels(root: TreeNode | null): number[] {
  if (!root) return [];

  let queue: TreeNode[] = [root];
  let result: number[] = [];

  while(queue.length > 0){
    let sum: number = 0;
    let count: number = queue.length;

    for(let i = 0; i < count; i++){
      let node: TreeNode = queue.shift()!;
      sum += node.val;

      if(node.left) queue.push(node.left);
      if(node.right) queue.push(node.right);
    }

    result.push(sum / count);
  }

  return result;
}
```
This function uses a breadth-first search approach to traverse through the levels of the tree. For each level, it calculates the sum of the node values and then divides by the number of nodes in that level to find the average. This average is then added to the result array which is returned at the end. If there's no root, it returns an empty array.