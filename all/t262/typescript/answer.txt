Certainly! Below is the equivalent TypeScript code for the given Python code:

```typescript
class TreeNode {
    val: number;
    left: TreeNode | null;
    right: TreeNode | null;

    constructor(val: number = 0, left: TreeNode | null = null, right: TreeNode | null = null) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

function averageOfLevels(root: TreeNode | null): number[] {
    if (!root) {
        return [];
    }

    const result: number[] = [];
    let queue: [TreeNode, number][] = [[root, 0]]; // (node, level)

    while (queue.length > 0) {
        const currentLevelValues: number[] = [];
        const levelSize = queue.length;

        for (let i = 0; i < levelSize; i++) {
            const [node, level] = queue.shift()!;
            currentLevelValues.push(node.val);

            if (node.left) {
                queue.push([node.left, level + 1]);
            }
            if (node.right) {
                queue.push([node.right, level + 1]);
            }
        }

        // Calculate the average for the current level
        const levelAverage = currentLevelValues.reduce((acc, val) => acc + val, 0) / currentLevelValues.length;
        result.push(levelAverage);
    }

    return result;
}
```

### Explanation:
1. **Class Definition**: 
   - The `TreeNode` class is defined with properties `val`, `left`, and `right`. The constructor initializes these properties.
   
2. **Function Definition**:
   - The `averageOfLevels` function takes a `TreeNode` or `null` as input and returns an array of numbers representing the average values of each level.
   
3. **Initialization**:
   - If the root is `null`, an empty array is returned.
   - The `result` array is initialized to store the averages.
   - The `queue` is initialized with a tuple `[root, 0]` to track the node and its level.
   
4. **Breadth-First Traversal**:
   - The loop continues until the queue is empty.
   - For each level, the size of the queue is captured (`levelSize`).
   - Within each iteration, the current node's value is added to `currentLevelValues`.
   - Child nodes are added to the queue with their respective levels.
   
5. **Calculating Averages**:
   - After processing all nodes at the current level, the average is calculated using the `reduce` method and pushed to the `result` array.
   
6. **Return**:
   - The final `result` array is returned.

This TypeScript code maintains the same functionality and logic as the original Python code, with appropriate adjustments for TypeScript's static typing and syntax.