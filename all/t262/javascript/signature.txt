Certainly! Below is the equivalent JavaScript code with the function and class signatures converted, along with the comments rewritten in JSDoc format:

```javascript
// Define the TreeNode class
class TreeNode {
    /**
     * Constructs a new TreeNode instance.
     * 
     * @param {number} val - The value of the node.
     * @param {TreeNode} [left=null] - The left child of the node.
     * @param {TreeNode} [right=null] - The right child of the node.
     */
    constructor(val = 0, left = null, right = null) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

/**
 * Calculates the average value of the nodes on each level of a binary tree.
 * 
 * @param {TreeNode} root - The root of the binary tree.
 * @returns {number[]} An array containing the average values of each level.
 */
function averageOfLevels(root) {
    if (!root) {
        return [];
    }

    let result = [];
    let queue = [[root, 0]];  // [node, level]

    while (queue.length > 0) {
        let currentLevel = [];
        let levelSize = queue.length;

        for (let i = 0; i < levelSize; i++) {
            let [node, level] = queue.shift();
            currentLevel.push(node.val);

            if (node.left) {
                queue.push([node.left, level + 1]);
            }
            if (node.right) {
                queue.push([node.right, level + 1]);
            }
        }

        // Calculate the average for the current level
        let levelAverage = currentLevel.reduce((acc, val) => acc + val, 0) / currentLevel.length;
        result.push(levelAverage);
    }

    return result;
}
```

### Explanation:
1. **Class Definition**:
   - The `TreeNode` class is defined with a constructor that initializes the node's value and its left and right children.
   - The JSDoc comment provides detailed information about the constructor parameters.

2. **Function Definition**:
   - The `averageOfLevels` function takes the root of a binary tree as input and returns an array containing the average values of each level.
   - The JSDoc comment provides detailed information about the function parameters and return type.

3. **Initialization**:
   - If the root is `null`, an empty array is returned.
   - A queue is initialized with the root node and its level.

4. **Loop Through Levels**:
   - While the queue is not empty, the loop processes each level.
   - For each level, it collects the values of the nodes at that level and appends them to `currentLevel`.

5. **Children Nodes**:
   - If a node has left or right children, they are added to the queue with their respective levels.

6. **Calculate Average**:
   - After processing all nodes at the current level, the average value is calculated and appended to the result array.

7. **Return Result**:
   - Finally, the result array is returned.

This JavaScript code preserves the functionality, logic, and structure of the original Python code, with appropriate JSDoc comments for documentation.