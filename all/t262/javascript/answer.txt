Sure! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
class TreeNode {
    constructor(val = 0, left = null, right = null) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

function averageOfLevels(root) {
    /**
     * Given the root of a binary tree, return the average value of the nodes on each level in the form of an array.
     *
     * @param {TreeNode} root - The root of the binary tree.
     * @returns {number[]} - An array containing the average values of each level.
     */
    if (!root) {
        return [];
    }

    let result = [];
    let queue = [[root, 0]];  // [node, level]

    while (queue.length > 0) {
        let currentLevel = [];
        let levelSize = queue.length;

        for (let i = 0; i < levelSize; i++) {
            let [node, level] = queue.shift();
            currentLevel.push(node.val);

            if (node.left) {
                queue.push([node.left, level + 1]);
            }
            if (node.right) {
                queue.push([node.right, level + 1]);
            }
        }

        // Calculate the average for the current level
        let levelAverage = currentLevel.reduce((acc, val) => acc + val, 0) / currentLevel.length;
        result.push(levelAverage);
    }

    return result;
}
```

### Explanation:
1. **Class Definition**: The `TreeNode` class is defined with a constructor that initializes the node's value and its left and right children.
2. **Function Definition**: The `averageOfLevels` function takes the root of a binary tree as input and returns an array containing the average values of each level.
3. **Initialization**: If the root is `null`, an empty array is returned.
4. **Queue Initialization**: A queue is initialized with the root node and its level.
5. **Loop Through Levels**: While the queue is not empty, the loop processes each level.
6. **Current Level Processing**: For each level, it collects the values of the nodes at that level and appends them to `currentLevel`.
7. **Children Nodes**: If a node has left or right children, they are added to the queue with their respective levels.
8. **Calculate Average**: After processing all nodes at the current level, the average value is calculated and appended to the result array.
9. **Return Result**: Finally, the result array is returned.

This JavaScript code mirrors the functionality and logic of the original Python code.