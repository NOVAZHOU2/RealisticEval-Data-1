Sure! Here is the equivalent C++ function signature with comments:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <nlohmann/json.hpp>

// Forward declaration for recursive logging
void log(const nlohmann::json& jsonItem);

/**
 * Logs an item by printing it. Handles strings, numbers, lists, and dictionaries by printing
 * them directly or as a JSON-formatted string. Other types are reported as errors.
 *
 * @param item The item to be logged. Can be of any type.
 * @return The item to be logged. Can be of any type.
 */
template<typename T>
T log(T item)
{
    // Convert item to JSON if necessary
    nlohmann::json jsonItem = item;

    // Print the JSON representation of the item
    std::cout << jsonItem.dump(4) << std::endl; // Indentation of 4 spaces

    return item;
}

// Specialization for vectors
template<typename T>
std::vector<T> log(std::vector<T> item)
{
    // Convert vector to JSON
    nlohmann::json jsonItem = item;

    // Print the JSON representation of the vector
    std::cout << jsonItem.dump(4) << std::endl; // Indentation of 4 spaces

    return item;
}

// Specialization for maps
template<typename K, typename V>
std::map<K, V> log(std::map<K, V> item)
{
    // Convert map to JSON
    nlohmann::json jsonItem = item;

    // Print the JSON representation of the map
    std::cout << jsonItem.dump(4) << std::endl; // Indentation of 4 spaces

    return item;
}
```

### Explanation:
1. **Include Necessary Headers**: We include headers for input/output operations (`<iostream>`), string manipulation (`<string>`), vector and map containers (`<vector>`, `<map>`), and the `nlohmann/json` library for handling JSON conversion.
2. **Forward Declaration**: A forward declaration for the recursive `log` function is included.
3. **Function Template**: A template function `log` is defined to handle different types of items.
4. **JSON Conversion**: Each type is converted to a `nlohmann::json` object using the appropriate constructor or method.
5. **Logging**: The JSON representation of the item is printed using `std::cout`.
6. **Specializations**: Specializations for `std::vector` and `std::map` are provided to ensure they are handled correctly as well.

This C++ code provides similar functionality to the Python function you provided, ensuring that various data types can be logged in a readable format.