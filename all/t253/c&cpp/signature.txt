Certainly! Below is the equivalent C++ code for the given Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

/**
 * Logs an item by printing it. Handles strings, numbers, lists, and dictionaries by printing
 * them directly or as a JSON-formatted string. Other types are reported as errors.
 *
 * @param item The item to be logged. Can be of any type.
 * @return The item to be logged. Can be of any type.
 */
template<typename T>
void log(const T& item) {
    // Handling for strings, integers, and floats
    if constexpr (std::is_same<T, std::string>::value || std::is_same<T, int>::value || std::is_same<T, float>::value) {
        std::cout << item << std::endl;
    }
    // Handling for vectors and maps to convert to JSON string
    else if constexpr (std::is_same<T, std::vector<std::string>>::value || std::is_same<T, std::vector<int>>::value || std::is_same<T, std::vector<float>>::value ||
                       std::is_same<T, std::map<std::string, std::string>>::value || std::is_same<T, std::map<std::string, int>>::value || std::is_same<T, std::map<std::string, float>>::value) {
        try {
            json j = item;
            std::cout << j.dump(4) << std::endl;  // Pretty print JSON for better readability
        } catch (const std::exception& e) {
            std::cout << "Error: Failed to serialize item to JSON. " << e.what() << std::endl;
        }
    } else {
        // Print an informative error message for unsupported types
        std::cout << "Error: Unsupported type " << typeid(T).name() << " for logging." << std::endl;
    }
}

int main() {
    // Example usage
    log("Hello, World!");
    log(123);
    log(3.14f);

    std::vector<std::string> vec_str = {"apple", "banana", "cherry"};
    log(vec_str);

    std::vector<int> vec_int = {1, 2, 3};
    log(vec_int);

    std::vector<float> vec_float = {1.1f, 2.2f, 3.3f};
    log(vec_float);

    std::map<std::string, std::string> map_str_str = {{"key1", "value1"}, {"key2", "value2"}};
    log(map_str_str);

    std::map<std::string, int> map_str_int = {{"key1", 1}, {"key2", 2}};
    log(map_str_int);

    std::map<std::string, float> map_str_float = {{"key1", 1.1f}, {"key2", 2.2f}};
    log(map_str_float);

    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `#include <iostream>` for input/output operations.
   - `#include <string>` for handling strings.
   - `#include <vector>` for handling vectors.
   - `#include <map>` for handling maps.
   - `#include <nlohmann/json.hpp>` for JSON serialization.

2. **Using `nlohmann::json`**:
   - The `nlohmann::json` library is used to handle JSON serialization and deserialization.

3. **Template Function**:
   - The `log` function is a template function that can handle different types (`T`).

4. **Documentation Comments**:
   - Multi-line comments (`/* ... */`) are used for the function documentation.
   - Single-line comments (`//`) are used for inline comments.

5. **Type Checking**:
   - `if constexpr` statements are used to check the type of the item and handle it accordingly.
   - Supported types include `std::string`, `int`, `float`, `std::vector<T>`, and `std::map<K, V>`.

6. **Error Handling**:
   - If the item is not one of the supported types, an error message is printed.

7. **Main Function**:
   - Example usage of the `log` function with various data types.

This C++ code preserves the original functionality and structure of the Python code while adhering to C++ standards and practices.