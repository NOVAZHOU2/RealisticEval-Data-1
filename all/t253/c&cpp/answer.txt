Sure! Below is the equivalent C++ code for the given Python function `log`. This code includes handling for strings, numbers, lists, and dictionaries using appropriate data structures in C++. Note that C++ does not have built-in support for dictionaries like Python, so we will use `std::map` from the `<map>` library.

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

void log(const std::string& item) {
    std::cout << "String: " << item << std::endl;
}

void log(int item) {
    std::cout << "Number: " << item << std::endl;
}

void log(double item) {
    std::cout << "Number: " << item << std::endl;
}

template<typename T>
void log(const std::vector<T>& item) {
    std::cout << "List: [";
    for (size_t i = 0; i < item.size(); ++i) {
        if (i > 0) std::cout << ", ";
        log(item[i]);
    }
    std::cout << "]" << std::endl;
}

template<typename Key, typename Value>
void log(const std::map<Key, Value>& item) {
    std::cout << "Dictionary: {";
    size_t count = 0;
    for (const auto& pair : item) {
        if (count > 0) std::cout << ", ";
        std::cout << "\"" << pair.first << "\": ";
        log(pair.second);
        ++count;
    }
    std::cout << "}" << std::endl;
}

void log(const json& item) {
    std::cout << "JSON: " << item.dump(4) << std::endl;
}

template<typename T>
T log(T item) {
    // Handle other types by reporting as errors
    std::cerr << "Error: Unsupported type" << std::endl;
    return item;
}

int main() {
    log("Hello, World!");
    log(42);
    log(3.14);
    log(std::vector<int>{1, 2, 3, 4, 5});
    log(std::map<std::string, int>{{"one", 1}, {"two", 2}, {"three", 3}});
    log(json({{"name", "John"}, {"age", 30}}));
    return 0;
}
```

### Explanation:
1. **Headers**: We include necessary headers such as `<iostream>`, `<string>`, `<vector>`, `<map>`, and `<nlohmann/json.hpp>` for JSON handling.
2. **Function Overloading**: We overload the `log` function for different types including strings, integers, doubles, vectors, maps, and JSON objects.
3. **Template Functions**: For handling vectors and maps, we use template functions to iterate through their elements and call the `log` function recursively.
4. **JSON Handling**: We use the `nlohmann/json` library to handle JSON objects. Ensure you have this library installed or download it from [here](https://github.com/nlohmann/json).
5. **Error Handling**: For unsupported types, we print an error message.

This C++ code should provide similar functionality to your Python `log` function.