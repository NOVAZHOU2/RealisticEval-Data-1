Sure! Below is the equivalent C++ code that maintains the same functionality, logic, and structure as the provided Python code:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

// Function to log an item
void log(const std::string& item) {
    std::cout << item << std::endl;
}

void log(int item) {
    std::cout << item << std::endl;
}

void log(float item) {
    std::cout << item << std::endl;
}

void log(const std::vector<std::string>& item) {
    try {
        json j = item;
        std::cout << j.dump(4) << std::endl;  // Pretty print JSON for better readability
    } catch (const std::exception& e) {
        std::cout << "Error: Failed to serialize item to JSON. " << e.what() << std::endl;
    }
}

void log(const std::vector<int>& item) {
    try {
        json j = item;
        std::cout << j.dump(4) << std::endl;  // Pretty print JSON for better readability
    } catch (const std::exception& e) {
        std::cout << "Error: Failed to serialize item to JSON. " << e.what() << std::endl;
    }
}

void log(const std::vector<float>& item) {
    try {
        json j = item;
        std::cout << j.dump(4) << std::endl;  // Pretty print JSON for better readability
    } catch (const std::exception& e) {
        std::cout << "Error: Failed to serialize item to JSON. " << e.what() << std::endl;
    }
}

void log(const std::map<std::string, std::string>& item) {
    try {
        json j = item;
        std::cout << j.dump(4) << std::endl;  // Pretty print JSON for better readability
    } catch (const std::exception& e) {
        std::cout << "Error: Failed to serialize item to JSON. " << e.what() << std::endl;
    }
}

void log(const std::map<std::string, int>& item) {
    try {
        json j = item;
        std::cout << j.dump(4) << std::endl;  // Pretty print JSON for better readability
    } catch (const std::exception& e) {
        std::cout << "Error: Failed to serialize item to JSON. " << e.what() << std::endl;
    }
}

void log(const std::map<std::string, float>& item) {
    try {
        json j = item;
        std::cout << j.dump(4) << std::endl;  // Pretty print JSON for better readability
    } catch (const std::exception& e) {
        std::cout << "Error: Failed to serialize item to JSON. " << e.what() << std::endl;
    }
}

template<typename T>
void log(const T& item) {
    std::cout << "Error: Unsupported type " << typeid(T).name() << " for logging." << std::endl;
}

int main() {
    // Example usage
    log("Hello, World!");
    log(123);
    log(3.14f);

    std::vector<std::string> vec_str = {"apple", "banana", "cherry"};
    log(vec_str);

    std::vector<int> vec_int = {1, 2, 3};
    log(vec_int);

    std::vector<float> vec_float = {1.1f, 2.2f, 3.3f};
    log(vec_float);

    std::map<std::string, std::string> map_str_str = {{"key1", "value1"}, {"key2", "value2"}};
    log(map_str_str);

    std::map<std::string, int> map_str_int = {{"key1", 1}, {"key2", 2}};
    log(map_str_int);

    std::map<std::string, float> map_str_float = {{"key1", 1.1f}, {"key2", 2.2f}};
    log(map_str_float);

    return 0;
}
```

### Explanation:
1. **Header Files**: 
   - `#include <iostream>` for input/output operations.
   - `#include <string>` for handling strings.
   - `#include <vector>` for handling vectors.
   - `#include <map>` for handling maps.
   - `#include <nlohmann/json.hpp>` for JSON serialization.

2. **Using `nlohmann::json`**: 
   - The `nlohmann::json` library is used to handle JSON serialization and deserialization.

3. **Overloaded Functions**:
   - Overloaded functions `log` are defined for different types (strings, integers, floats, vectors, and maps).
   - Each function handles its specific type and prints it directly or converts it to a JSON string using `nlohmann::json`.

4. **Template Function**:
   - A template function `log` is defined to handle unsupported types and print an error message.

5. **Main Function**:
   - Example usage of the `log` function with various data types.

This C++ code provides the same functionality as the Python code, handling different types and logging them appropriately.