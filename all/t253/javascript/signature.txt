Certainly! Here is the equivalent JavaScript code with the function signature and JSDoc comments:

```javascript
/**
 * Logs an item by printing it. Handles strings, numbers, arrays, and objects by printing
 * them directly or as a JSON-formatted string. Other types are reported as errors.
 * 
 * @param {any} item - The item to be logged. Can be of any type.
 * @returns {any} - The item to be logged. Can be of any type.
 */
function log(item) {
    // Handling for strings, numbers
    if (typeof item === 'string' || typeof item === 'number') {
        console.log(item);
    }
    // Handling for arrays and objects to convert to JSON string
    else if (Array.isArray(item) || (typeof item === 'object' && item !== null)) {
        try {
            console.log(JSON.stringify(item, null, 4));  // Pretty print JSON for better readability
        } catch (e) {
            console.log(`Error: Failed to serialize item to JSON. ${e.message}`);
        }
    } else {
        // Print an informative error message for unsupported types
        console.log(`Error: Unsupported type ${typeof item} for logging.`);
    }
}

// Example usage
log("Hello, world!");
log(123);
log(3.14);
log({ key: "value" });
log([1, 2, 3]);
log(null);  // This will trigger the error message
```

### Explanation:
1. **Function Signature:**
   - The function signature is defined with `function log(item)`.

2. **JSDoc Comments:**
   - The JSDoc comment block provides detailed documentation for the function.
   - `@param {any} item` describes the parameter `item`.
   - `@returns {any}` indicates that the function returns an item of any type.

3. **Implementation:**
   - The implementation checks the type of `item` and handles different cases accordingly.
   - For strings and numbers, it logs the item directly.
   - For arrays and objects, it attempts to serialize the item to a JSON string and logs it.
   - For unsupported types, it logs an error message.

This JavaScript code preserves the purpose and structure of the original Python code and conforms to JavaScript documentation standards using JSDoc.