Certainly! Here is the equivalent TypeScript code with proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Logs an item by printing it. Handles strings, numbers, arrays, and objects by printing
 * them directly or as a JSON-formatted string. Other types are reported as errors.
 * 
 * @param item - The item to be logged. Can be of any type.
 * @returns The item to be logged. Can be of any type.
 */
function log(item: any): void {
    // Handling for strings, numbers
    if (typeof item === 'string' || typeof item === 'number') {
        console.log(item);
    }
    // Handling for arrays and objects to convert to JSON string
    else if (Array.isArray(item) || (typeof item === 'object' && item !== null)) {
        try {
            console.log(JSON.stringify(item, null, 4));  // Pretty print JSON for better readability
        } catch (error) {
            console.log(`Error: Failed to serialize item to JSON. ${error}`);
        }
    } else {
        // Print an informative error message for unsupported types
        console.log(`Error: Unsupported type ${typeof item} for logging.`);
    }
}

// Example usage
log("Hello, world!");
log(123);
log(3.14);
log({ key: "value" });
log([1, 2, 3]);
log(null);
```

### Explanation:
1. **Function Signature**:
   - The function signature is defined with `function log(item: any): void`. This indicates that the function takes an argument of type `any` and returns `void`.

2. **JSDoc Documentation**:
   - The JSDoc comment block is added above the function definition to provide detailed documentation.
   - The `@param` tag describes the parameter `item`.
   - The `@returns` tag describes the return value, which is `void` in this case since the function prints to the console and does not return anything explicitly.

3. **Type Checking**:
   - The function uses `typeof` to check for strings and numbers.
   - It uses `Array.isArray` and `typeof item === 'object' && item !== null` to check for arrays and objects.

4. **Logging**:
   - The function uses `console.log` to print the items.
   - For JSON serialization, it uses `JSON.stringify` with indentation for better readability.

5. **Error Handling**:
   - If serialization fails, it catches the error and prints an error message.

6. **Example Usage**:
   - Provided at the end to demonstrate how the function can be used.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices for documentation.