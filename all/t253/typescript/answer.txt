Sure! Here is the equivalent TypeScript code:

```typescript
import * as JSON from 'json';

function log(item: any): void {
    /**
     * Logs an item by printing it. Handles strings, numbers, arrays, and objects by printing
     * them directly or as a JSON-formatted string. Other types are reported as errors.
     *
     * @param item The item to be logged. Can be of any type.
     */
    // Handling for strings, numbers
    if (typeof item === 'string' || typeof item === 'number') {
        console.log(item);
    }
    // Handling for arrays and objects to convert to JSON string
    else if (Array.isArray(item) || typeof item === 'object' && item !== null) {
        try {
            console.log(JSON.stringify(item, null, 4));  // Pretty print JSON for better readability
        } catch (error) {
            console.log(`Error: Failed to serialize item to JSON. ${error}`);
        }
    } else {
        // Print an informative error message for unsupported types
        console.log(`Error: Unsupported type ${typeof item} for logging.`);
    }
}

// Example usage
log("Hello, world!");
log(123);
log(3.14);
log({ key: "value" });
log([1, 2, 3]);
log(null);
```

### Explanation:
1. **Imports**: TypeScript does not have a built-in `json` module like Python, so we use `JSON.stringify` directly.
2. **Type Checking**:
   - For strings and numbers, we use `typeof`.
   - For arrays and objects, we check using `Array.isArray` and `typeof item === 'object' && item !== null`.
3. **Logging**:
   - We use `console.log` to print the items.
   - For JSON serialization, we use `JSON.stringify` with indentation for better readability.
4. **Error Handling**:
   - If serialization fails, we catch the error and print an error message.
5. **Example Usage**: Provided at the end to demonstrate how the function can be used.

This TypeScript code maintains the same functionality and logic as the original Python code, while adapting to TypeScript's static type system and idiomatic practices.