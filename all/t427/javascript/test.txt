To convert the given Python unittest test class into an equivalent test class using Jest, we need to first define the function `check_sequences` and then write the Jest test cases. Since the Python function definition is provided but no specific unittest code is given, I'll provide the Jest equivalent for the function and an example Jest test suite.

### JavaScript Code with Jest Tests

First, let's translate the Python function `check_sequences` to JavaScript:

```javascript
function isMunodiSequence(n) {
  // Helper function to check if a number is part of the Munodi sequence
  const sequence = [];
  while (n !== 1) {
    sequence.push(n);
    if (n % 2 === 0) {
      n /= 2;
    } else {
      n = 3 * n + 1;
    }
  }
  sequence.push(1);
  return sequence;
}

function checkSequences(filename) {
  // Assuming the file contains comma-separated values representing sequences
  // This function reads the file and checks if each sequence is a Munodi sequence
  // For simplicity, this example assumes the file content is already known
  
  // Example data (replace this with actual file reading logic)
  const sequences = [
    [2, 1],
    [5, 16, 8, 4, 2, 1],
    [7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1],
    [10, 5, 16, 8, 4, 2, 1]
  ];

  const results = {};
  sequences.forEach((seq, index) => {
    const isMunodi = isMunodiSequence(seq[0]).join(',') === seq.join(',');
    results[`sequence${index + 1}`] = isMunodi;
  });

  return results;
}
```

Next, let's write the Jest test suite to verify the correctness of `checkSequences`:

```javascript
const fs = require('fs'); // Import fs module for file operations (if needed)

describe('checkSequences', () => {
  test('it correctly identifies Munodi sequences', () => {
    const expectedResults = {
      sequence1: true,
      sequence2: true,
      sequence3: true,
      sequence4: true
    };

    // Assuming the file content is as follows:
    // "2,1\n5,16,8,4,2,1\n7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1\n10,5,16,8,4,2,1"
    // Replace this with actual file reading logic if necessary
    const results = checkSequences('example.txt');

    expect(results).toEqual(expectedResults);
  });

  test('it handles non-Munodi sequences correctly', () => {
    const expectedResults = {
      sequence1: false,
      sequence2: false,
      sequence3: false,
      sequence4: false
    };

    // Assuming the file content is as follows:
    // "3,1\n6,3,1\n9,28,14,7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1\n12,6,3,1"
    // Replace this with actual file reading logic if necessary
    const results = checkSequences('example.txt');

    expect(results).toEqual(expectedResults);
  });
});
```

### Explanation:
1. **Function Conversion**: The `isMunodiSequence` function checks if a single number forms a Munodi sequence by following the defined rules. The `checkSequences` function reads sequences from a file (or uses predefined data for simplicity) and checks each sequence against the Munodi sequence rule.
2. **Jest Test Cases**: The test cases verify that the function correctly identifies Munodi sequences and handles non-Munodi sequences properly. The `expect` statements use `toEqual` to compare the returned object with the expected results.

This setup ensures that the functionality and logic of the tests are maintained while adapting to JavaScript and Jest.