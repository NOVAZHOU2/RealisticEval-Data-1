Sure! Here's how you can convert your Python unittest test class into a Jest test case in JavaScript:

```javascript
const fs = require('fs');
const path = require('path');

function checkSequences(filename) {
    const sequences = JSON.parse(fs.readFileSync(path.resolve(__dirname, filename), 'utf8'));
    const results = {};

    sequences.forEach(sequence => {
        let current = sequence;
        let isMunodi = true;

        while (current !== 1) {
            if (current % 2 === 0) {
                current /= 2;
            } else {
                current = 3 * current + 1;
            }

            if (!Number.isInteger(current)) {
                isMunodi = false;
                break;
            }
        }

        results[sequence] = isMunodi;
    });

    return results;
}

// Jest test cases
describe('checkSequences', () => {
    test('should correctly identify Munodi sequences', () => {
        const result = checkSequences('sequences.json');
        expect(result).toEqual({
            [2]: true,
            [4]: true,
            [6]: true,
            [8]: true,
            [5]: false,
            [7]: false,
        });
    });
});
```

### Explanation:
1. **Importing Required Modules**: We import `fs` and `path` modules to read files asynchronously.
2. **Function Definition**: The `checkSequences` function reads sequences from a JSON file, checks each sequence to see if it is a Munodi sequence, and returns a dictionary with the results.
3. **Jest Test Case**:
   - We use `describe` to group our tests together.
   - Inside `describe`, we use `test` to define individual test cases.
   - We call the `checkSequences` function with a sample JSON file (`'sequences.json'`) and compare the output using `expect`.

Make sure you have a `sequences.json` file in the same directory as your test file with the appropriate data.