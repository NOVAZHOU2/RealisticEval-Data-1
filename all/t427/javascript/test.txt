Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code:
```python
import unittest

class TestCheckSequences(unittest.TestCase):
    def setUp(self):
        """Set up the test cases with sequences."""
        # Create a temporary file with test cases
        self.test_file = 'test_sequences.dat'
        with open(self.test_file, 'w') as f:
            f.write("2,4,6,8\n")    # Munodi sequence (d = 2)
            f.write("1,3,5,7\n")    # Munodi sequence (d = 2)
            f.write("10,20,30\n")   # Munodi sequence (d = 10)
            f.write("1,2,4,8\n")    # Not a Munodi sequence (d changes)
            f.write("5,10,15,20\n") # Munodi sequence (d = 5)

    def test_sequences(self):
        """Test the sequences for Munodi property."""
        expected_results = {
            (2, 4, 6, 8): True,
            (1, 3, 5, 7): True,
            (10, 20, 30): True,
            (1, 2, 4, 8): False,
            (5, 10, 15, 20): True,
        }
        results = check_sequences(self.test_file)
        for seq in expected_results:
            self.assertEqual(results[JSON.stringify(seq)], expected_results[seq])

    def tearDown(self):
        """Clean up the test file after tests."""
        import os
        os.remove(self.test_file)
```

### Equivalent Jest Test Suite:
```javascript
const fs = require('fs');
const os = require('os');
const path = require('path');

describe('TestCheckSequences', () => {
    let testFile;

    beforeAll(() => {
        // Set up the test cases with sequences
        testFile = 'test_sequences.dat';
        fs.writeFileSync(testFile, [
            "2,4,6,8",    // Munodi sequence (d = 2)
            "1,3,5,7",    // Munodi sequence (d = 2)
            "10,20,30",   // Munodi sequence (d = 10)
            "1,2,4,8",    // Not a Munodi sequence (d changes)
            "5,10,15,20"  // Munodi sequence (d = 5)
        ].join('\n'));
    });

    afterAll(() => {
        // Clean up the test file after tests
        fs.unlinkSync(testFile);
    });

    it('should correctly identify Munodi sequences', () => {
        const expectedResults = {
            "[2,4,6,8]": true,
            "[1,3,5,7]": true,
            "[10,20,30]": true,
            "[1,2,4,8]": false,
            "[5,10,15,20]": true,
        };

        const results = checkSequences(testFile);

        Object.keys(expectedResults).forEach(seqStr => {
            const seq = JSON.parse(seqStr);
            expect(results[seqStr]).toEqual(expectedResults[seqStr]);
        });
    });
});

// Helper functions
function readSequencesFromFile(filename) {
    const fileContent = fs.readFileSync(filename, 'utf8');
    const lines = fileContent.split('\n');
    const sequences = [];

    for (const line of lines) {
        const seq = line.trim().split(',').map(num => parseInt(num, 10));
        sequences.push(seq);
    }
    return sequences;
}

function isMunodiSequence(sequence) {
    if (sequence.length < 2) {
        return false;  // A sequence with less than 2 elements cannot be a Munodi sequence
    }

    const commonDifference = sequence[1] - sequence[0];
    for (let i = 2; i < sequence.length; i++) {
        if (sequence[i] - sequence[i - 1] !== commonDifference) {
            return false;  // Found a different difference, not a Munodi sequence
        }
    }
    return true;  // All differences are the same
}

function checkSequences(filename) {
    const sequences = readSequencesFromFile(filename);
    const results = {};
    for (const seq of sequences) {
        results[JSON.stringify(seq)] = isMunodiSequence(seq);
    }
    return results;
}
```

### Explanation:
1. **Setup (`beforeAll`)**:
   - The `beforeAll` hook sets up the test file by writing the test sequences to a file named `test_sequences.dat`.

2. **Teardown (`afterAll`)**:
   - The `afterAll` hook cleans up the test file by removing it after the tests are completed.

3. **Test Case (`it`)**:
   - The test case verifies that the `checkSequences` function correctly identifies Munodi sequences.
   - It compares the expected results with the actual results obtained from the `checkSequences` function.

4. **Helper Functions**:
   - `readSequencesFromFile`: Reads sequences from a file and returns them as an array of arrays.
   - `isMunodiSequence`: Checks if a given sequence is a Munodi sequence.
   - `checkSequences`: Reads sequences from a file and determines if each sequence is a Munodi sequence.

### Notes:
- In Jest, we use `beforeAll` and `afterAll` hooks instead of `setUp` and `tearDown` methods.
- We use `expect` for assertions instead of `assertEqual`.
- The `JSON.stringify` method is used to handle the comparison of sequences, as Jest does not support direct comparison of arrays in objects.