Sure! To convert the provided Python unittest test class into an equivalent test class using Catch2 in C++, we need to define the `check_sequences` function first and then write the test cases using Catch2.

Here’s how you can do it:

1. **Define the `check_sequences` function** in C++.
2. **Write the test cases** using Catch2.

### Step 1: Define the `check_sequences` function

First, let’s define the `check_sequences` function in C++. This function will read sequences from a file and determine if they are Munodi sequences.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <string>
#include <cassert>

// Function to check if a sequence is a Munodi sequence
bool is_munodi_sequence(const std::vector<int>& sequence) {
    while (!sequence.empty() && sequence.back() != 1) {
        int next = sequence.back();
        sequence.pop_back();

        if (next % 2 == 0) {
            // For even numbers, the next term is half of it
            if (sequence.empty() || sequence.back() != next / 2) {
                return false;
            }
        } else {
            // For odd numbers, the next term is 3*n + 1
            if (sequence.empty() || sequence.back() != 3 * next + 1) {
                return false;
            }
        }
    }

    // Check if the sequence ends with 1
    if (!sequence.empty() && sequence.back() == 1) {
        return true;
    }

    return false;
}

// Function to read sequences from a file and determine if each sequence is a Munodi sequence
std::map<std::string, bool> check_sequences(const std::string& filename) {
    std::ifstream file(filename);
    std::map<std::string, bool> results;

    std::string line;
    while (std::getline(file, line)) {
        std::istringstream iss(line);
        std::string name;
        iss >> name;
        std::vector<int> sequence;
        int number;
        while (iss >> number) {
            sequence.push_back(number);
        }
        results[name] = is_munodi_sequence(sequence);
    }

    return results;
}
```

### Step 2: Write the test cases using Catch2

Now, let’s write the test cases using Catch2. You’ll need to include the Catch2 header files and set up the test fixture.

```cpp
#include <catch2/catch_test_macros.hpp>

TEST_CASE("Check sequences", "[check_sequences]") {
    SECTION("Empty file") {
        std::string filename = "empty.txt";
        auto results = check_sequences(filename);
        REQUIRE(results.empty());
    }

    SECTION("Valid Munodi sequence") {
        std::string filename = "valid_sequence.txt";
        auto results = check_sequences(filename);
        REQUIRE(results.size() == 1);
        REQUIRE(results.count("seq1") == 1);
        REQUIRE(results.at("seq1") == true);
    }

    SECTION("Invalid Munodi sequence") {
        std::string filename = "invalid_sequence.txt";
        auto results = check_sequences(filename);
        REQUIRE(results.size() == 1);
        REQUIRE(results.count("seq1") == 1);
        REQUIRE(results.at("seq1") == false);
    }
}
```

### Complete Code

Here is the complete code combining both the function and the test cases:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <string>
#include <cassert>
#include <sstream>
#include <catch2/catch_test_macros.hpp>

// Function to check if a sequence is a Munodi sequence
bool is_munodi_sequence(const std::vector<int>& sequence) {
    while (!sequence.empty() && sequence.back() != 1) {
        int next = sequence.back();
        sequence.pop_back();

        if (next % 2 == 0) {
            // For even numbers, the next term is half of it
            if (sequence.empty() || sequence.back() != next / 2) {
                return false;
            }
        } else {
            // For odd numbers, the next term is 3*n + 1
            if (sequence.empty() || sequence.back() != 3 * next + 1) {
                return false;
            }
        }
    }

    // Check if the sequence ends with 1
    if (!sequence.empty() && sequence.back() == 1) {
        return true;
    }

    return false;
}

// Function to read sequences from a file and determine if each sequence is a Munodi sequence
std::map<std::string, bool> check_sequences(const std::string& filename) {
    std::ifstream file(filename);
    std::map<std::string, bool> results;

    std::string line;
    while (std::getline(file, line)) {
        std::istringstream iss(line);
        std::string name;
        iss >> name;
        std::vector<int> sequence;
        int number;
        while (iss >> number) {
            sequence.push_back(number);
        }
        results[name] = is_munodi_sequence(sequence);
    }

    return results;
}

TEST_CASE("Check sequences", "[check_sequences]") {
    SECTION("Empty file") {
        std::string filename = "empty.txt";
        auto results = check_sequences(filename);
        REQUIRE(results.empty());
    }

    SECTION("Valid Munodi sequence") {
        std::string filename = "valid_sequence.txt";
        auto results = check_sequences(filename);
        REQUIRE(results.size() == 1);
        REQUIRE(results.count("seq1") == 1);
        REQUIRE(results.at("seq1") == true);
    }

    SECTION("Invalid Munodi sequence") {
        std::string filename = "invalid_sequence.txt";
        auto results = check_sequences(filename);
        REQUIRE(results.size() == 1);
        REQUIRE(results.count("seq1") == 1);
        REQUIRE(results.at("seq1") == false);
    }
}
```

Make sure you have the Catch2 library installed and properly linked in your build system (e.g., CMake). This setup should allow you to run the tests and ensure the functionality of `check_sequences` is correctly tested.