Here is a possible implementation in C++:

```c++
#include <fstream>
#include <iostream>
#include <unordered_map>
#include <string>

bool is_munodi_sequence(int n)
{
    while(n != 1)
    {
        if(n % 2 == 0)
            n /= 2;
        else
            n = 3 * n + 1;
    }
    return true;
}

std::unordered_map<std::string, bool> check_sequences(const std::string &filename)
{
    std::ifstream file(filename);
    std::unordered_map<std::string, bool> result;

    if(!file.is_open())
    {
        std::cerr << "Error opening file" << std::endl;
        return result;
    }

    std::string line;
    while(std::getline(file, line))
    {
        int n = std::stoi(line);
        result[line] = is_munodi_sequence(n);
    }

    file.close();
    return result;
}
```

This C++ function reads the contents of the given file line by line, converting each line into an integer `n` and checking whether `n` is a Munodi sequence using the helper function `is_munodi_sequence`. It then stores the results in an unordered map, where the keys are the original lines from the file and the values are booleans indicating whether each sequence is a Munodi sequence.

Note: This implementation assumes that all lines in the input file contain valid integers. If there might be non-integer lines, additional error handling would be required. Also, this implementation does not handle very large integers; if you need to handle larger integers, consider using a library like GMP or Boost.Multiprecision.