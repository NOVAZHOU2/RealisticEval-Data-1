Hereâ€™s the equivalent C++ code for the given Python function, including the translation of comments and docstrings into C++ style comments:

```cpp
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <vector>

// Function to check if a sequence is a "Munodi sequence".
// A Munodi sequence is defined by a specific recursive relationship:
// for even numbers, the next term is half of it,
// for odd numbers, the next term is 3 * n + 1,
// and the sequence terminates when it encounters 1.
// Example: (2, 4, 6, 8) is a Munodi sequence.

std::unordered_map<std::string, bool> check_sequences(const std::string& filename) {
    /*
    Args:
        filename (std::string): File path.

    Returns:
        std::unordered_map<std::string, bool>: Mapping of sequences to whether they are Munodi sequences.
    */

    std::ifstream file(filename);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open file");
    }

    std::unordered_map<std::string, bool> result;
    std::string line;
    while (std::getline(file, line)) {
        std::vector<int> sequence;
        int num;
        std::stringstream ss(line);
        while (ss >> num) {
            sequence.push_back(num);
        }

        bool is_munodi = true;
        for (int n : sequence) {
            if (n == 1) {
                continue;
            }
            int next = (n % 2 == 0) ? n / 2 : 3 * n + 1;
            auto it = std::find(sequence.begin(), sequence.end(), next);
            if (it == sequence.end()) {
                is_munodi = false;
                break;
            }
        }

        result[line] = is_munodi;
    }

    return result;
}
```

### Explanation:
1. **Header Files**: Included necessary headers (`<iostream>`, `<fstream>`, `<unordered_map>`, `<vector>`).
2. **Function Signature**: Translated the Python function signature `def check_sequences(filename: str) -> Dict:` to `std::unordered_map<std::string, bool> check_sequences(const std::string& filename)`.
3. **Docstring Comments**: Translated the Python docstring to a multi-line comment using `/* */` and added a brief description as a single-line comment using `//`.
4. **File Handling**: Used `std::ifstream` to read the file.
5. **Sequence Parsing**: Used `std::stringstream` to parse integers from each line of the file.
6. **Sequence Checking**: Implemented the logic to check if each sequence is a Munodi sequence.
7. **Result Mapping**: Used `std::unordered_map<std::string, bool>` to store the results, mapping each line of input to a boolean indicating whether it is a Munodi sequence.