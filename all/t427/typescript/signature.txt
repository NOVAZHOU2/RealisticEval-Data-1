Certainly! Hereâ€™s the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation:

```typescript
import fs from 'fs';

/**
 * Reads multiple sequences from the file and determines if each sequence is a "Munodi sequence".
 * The definition of the Munodi sequence is based on a specific recursive relationship:
 * for even numbers, the next term is half of it, for odd numbers, the next term is 3*n + 1,
 * and the sequence terminates when it encounters 1.
 * For example: (2, 4, 6, 8) is a Munodi sequence.
 *
 * @param filename - The file path containing the sequences.
 * @returns An object mapping each sequence (as a string) to a boolean indicating whether it is a Munodi sequence.
 */
function checkSequences(filename: string): { [key: string]: boolean } {
    const sequences: number[][] = readSequencesFromFile(filename);
    const results: { [key: string]: boolean } = {};

    for (const seq of sequences) {
        results[seq.toString()] = isMunodiSequence(seq);
    }

    return results;
}

/**
 * Reads sequences from a file and returns them as a list of lists.
 *
 * @param filename - The file path containing the sequences.
 * @returns An array of sequences, where each sequence is an array of numbers.
 */
function readSequencesFromFile(filename: string): number[][] {
    const fileContent = fs.readFileSync(filename, 'utf8');
    const lines = fileContent.split('\n');

    const sequences: number[][] = [];
    for (const line of lines) {
        // Assuming sequences are comma-separated in the file
        const seq = line.trim().split(',').map((num) => parseInt(num, 10));
        sequences.push(seq);
    }

    return sequences;
}

/**
 * Checks if the given sequence is a Munodi sequence.
 *
 * @param sequence - The sequence to check.
 * @returns `true` if the sequence is a Munodi sequence, `false` otherwise.
 */
function isMunodiSequence(sequence: number[]): boolean {
    if (sequence.length < 2) {
        return false;  // A sequence with less than 2 elements cannot be a Munodi sequence
    }

    const commonDifference = sequence[1] - sequence[0];
    for (let i = 2; i < sequence.length; i++) {
        if (sequence[i] - sequence[i - 1] !== commonDifference) {
            return false;  // Found a different difference, not a Munodi sequence
        }
    }

    return true;  // All differences are the same
}

// Example usage
const filename = 'sequences.txt';
console.log(checkSequences(filename));
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc comments provide detailed descriptions of the functions, their parameters, and return types.

2. **Function Definitions**:
   - `checkSequences`: This function reads sequences from a file and determines if each sequence is a Munodi sequence.
   - `readSequencesFromFile`: This function reads sequences from a file and returns them as a list of lists.
   - `isMunodiSequence`: This function checks if a given sequence is a Munodi sequence.

3. **Type Annotations**:
   - Proper type annotations are used throughout the code to ensure type safety.

4. **File Reading**:
   - The `fs` module is used to read the file synchronously. Ensure you have Node.js installed to use this module.

5. **Example Usage**:
   - An example usage is provided at the end to demonstrate how to call the `checkSequences` function.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices.