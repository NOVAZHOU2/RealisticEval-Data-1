Sure! Here's how you can convert the Python unittest test class to TypeScript using Jest:

```typescript
import { describe, expect, test } from '@jest/globals';
import { checkSequences } from './yourModule'; // Adjust the import path accordingly

describe('checkSequences function', () => {
  test('should return true for a valid Munodi sequence', () => {
    const result = checkSequences('path/to/valid_sequence_file.txt');
    expect(result).toEqual({ 'sequence': true });
  });

  test('should return false for an invalid Munodi sequence', () => {
    const result = checkSequences('path/to/invalid_sequence_file.txt');
    expect(result).toEqual({ 'sequence': false });
  });

  test('should handle empty file correctly', () => {
    const result = checkSequences('path/to/empty_file.txt');
    expect(result).toEqual({});
  });

  test('should handle non-existent file correctly', () => {
    try {
      checkSequences('path/to/non_existent_file.txt');
    } catch (error) {
      expect(error.message).toContain('ENOENT');
    }
  });
});
```

In this TypeScript code:
- We use `describe` to group related tests together.
- Each `test` function represents a single test case.
- We use `expect` to assert the expected outcomes.
- The `checkSequences` function is imported from your module. Make sure to adjust the import path accordingly.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run your tests with:

```sh
npx jest
# or
yarn test
```