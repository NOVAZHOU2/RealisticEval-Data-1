Certainly! Hereâ€™s the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest class will be converted to a Jest test suite with appropriate assertions and setup/teardown logic.

### TypeScript Code with Jest Testing

```typescript
import fs from 'fs';
import os from 'os';
import path from 'path';

// Import the checkSequences function
import { checkSequences } from './path/to/checkSequences'; // Replace with the actual path

describe('TestCheckSequences', () => {
    let testFile: string;

    beforeAll(() => {
        // Set up the test cases with sequences
        testFile = 'test_sequences.dat';
        fs.writeFileSync(testFile, "2,4,6,8\n");    // Munodi sequence (d = 2)
        fs.writeFileSync(testFile, "1,3,5,7\n");    // Munodi sequence (d = 2)
        fs.writeFileSync(testFile, "10,20,30\n");   // Munodi sequence (d = 10)
        fs.writeFileSync(testFile, "1,2,4,8\n");    // Not a Munodi sequence (d changes)
        fs.writeFileSync(testFile, "5,10,15,20\n"); // Munodi sequence (d = 5)
    });

    afterAll(() => {
        // Clean up the test file after tests
        fs.unlinkSync(testFile);
    });

    it('should correctly identify Munodi sequences', () => {
        const expectedResults = {
            "2,4,6,8": true,
            "1,3,5,7": true,
            "10,20,30": true,
            "1,2,4,8": false,
            "5,10,15,20": true,
        };

        const results = checkSequences(testFile);

        Object.keys(expectedResults).forEach((seq) => {
            const parsedSeq = seq.split(',').map((num) => parseInt(num, 10));
            expect(results[parsedSeq.toString()]).toEqual(expectedResults[seq]);
        });
    });
});
```

### Explanation:
1. **Imports**:
   - Import necessary modules (`fs`, `os`, `path`) for file operations.
   - Import the `checkSequences` function from the appropriate module.

2. **Test Suite Setup**:
   - Use `beforeAll` to set up the test file with the required sequences.
   - Use `afterAll` to clean up the test file after all tests are completed.

3. **Test Case**:
   - Define the test case using `it` to verify the correctness of the `checkSequences` function.
   - Use Jest assertions (`expect`) to compare the results with the expected outcomes.

4. **File Operations**:
   - Use `fs.writeFileSync` to write the test sequences to the file.
   - Use `fs.unlinkSync` to remove the test file after all tests are completed.

### Notes:
- Ensure that the `checkSequences` function is imported from the correct module.
- The `beforeAll` and `afterAll` hooks ensure that the test file is created and cleaned up only once for the entire test suite.
- The test case iterates over the expected results and compares them with the actual results using Jest assertions.

This TypeScript code preserves the original functionality and logic of the Python unittest class while adapting it to Jest's testing framework.