Here's how you could translate your Python function into TypeScript:

```typescript
interface SequenceResult {
    [key: string]: boolean;
}

function checkSequences(filename: string): SequenceResult {
    // Your logic here
}
```

This will create an interface `SequenceResult` with key-value pairs where keys are strings and values are booleans. This matches the return type of your Python function.

However, note that reading files in TypeScript requires using Node.js' built-in 'fs' module or similar libraries which aren't available in browser-based JavaScript environments. Here's an example of how you might read a file asynchronously:

```typescript
import * as fs from 'fs';
import * as path from 'path';

interface SequenceResult {
    [key: string]: boolean;
}

async function checkSequences(filename: string): Promise<SequenceResult> {
    const filePath = path.resolve(__dirname, filename);
    try {
        const data = await fs.promises.readFile(filePath, 'utf8');
        // Process data here...
        return {};
    } catch (error) {
        console.error('Error reading file:', error);
        return {};
    }
}
```

In this version of the function, we're returning a promise because reading a file is an asynchronous operation. We use the `fs.promises.readFile()` method to read the file, which returns a promise that resolves with the contents of the file. If there's an error while reading the file, we catch it and log it to the console before returning an empty object.