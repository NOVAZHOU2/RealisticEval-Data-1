Sure! Here is the equivalent TypeScript code for the provided Python functions:

```typescript
function readSequencesFromFile(filename: string): number[][] {
    const sequences: number[][] = [];
    const fileContent = require('fs').readFileSync(filename, 'utf8');
    const lines = fileContent.split('\n');

    for (const line of lines) {
        // Assuming sequences are comma-separated in the file
        const seq = line.trim().split(',').map((num) => parseInt(num, 10));
        sequences.push(seq);
    }

    return sequences;
}

function isMunodiSequence(sequence: number[]): boolean {
    if (sequence.length < 2) {
        return false;  // A sequence with less than 2 elements cannot be a Munodi sequence
    }

    const commonDifference = sequence[1] - sequence[0];
    for (let i = 2; i < sequence.length; i++) {
        if (sequence[i] - sequence[i - 1] !== commonDifference) {
            return false;  // Found a different difference, not a Munodi sequence
        }
    }

    return true;  // All differences are the same
}

function checkSequences(filename: string): { [key: string]: boolean } {
    const sequences = readSequencesFromFile(filename);
    const results: { [key: string]: boolean } = {};

    for (const seq of sequences) {
        const key = JSON.stringify(seq);
        results[key] = isMunodiSequence(seq);
    }

    return results;
}
```

### Explanation:

1. **Type Definitions**:
   - `readSequencesFromFile` returns a list of lists (`number[][]`).
   - `isMunodiSequence` takes a list of numbers (`number[]`) and returns a boolean.
   - `checkSequences` returns an object with keys as strings (JSON representations of sequences) and values as booleans.

2. **File Reading**:
   - In TypeScript, we use Node.js's `fs` module to read the file synchronously. The file content is read using `readFileSync`.

3. **Sequence Parsing**:
   - Each line is split by commas, and each element is converted to an integer using `parseInt`.

4. **Munodi Sequence Check**:
   - The function checks if the sequence has at least two elements and then verifies if it is an arithmetic sequence.

5. **Result Mapping**:
   - The sequences are checked one by one, and the results are stored in an object using `JSON.stringify` to create unique keys for each sequence.

This TypeScript code maintains the functionality and logic of the original Python code while adapting to TypeScript's syntax and static type system.