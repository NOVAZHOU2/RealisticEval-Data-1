Sure, here's how you can translate the given Python code into Java:

```java
package org.real.temp;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class Answer {
    
    public static Map<String, Boolean> checkSequences(String filename) throws IOException {
        Map<String, Boolean> result = new HashMap<>();
        
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                boolean isMunodiSequence = true;
                long[] sequence = Arrays.stream(line.split(","))
                                        .mapToLong(Long::parseLong)
                                        .toArray();
                
                for (long num : sequence) {
                    if (!isMunodi(num)) {
                        isMunodiSequence = false;
                        break;
                    }
                }
                
                result.put(Arrays.toString(sequence), isMunodiSequence);
            }
        }
        
        return result;
    }

    private static boolean isMunodi(long n) {
        while (n != 1) {
            if (n % 2 == 0) {
                n /= 2;
            } else {
                n = 3 * n + 1;
            }
            
            // To prevent infinite loop in case of invalid input
            if (n < 1) {
                return false;
            }
        }
        
        return true;
    }
}
```

### Explanation:
- **`checkSequences` Method**:
  - Reads lines from the file specified by `filename`.
  - Each line is split into an array of numbers using `split(",")`.
  - Converts each number in the string array to a `long` array using `Arrays.stream().mapToLong()`.
  - Checks if each number in the sequence is part of a Munodi sequence using the helper method `isMunodi`.
  - Stores the result (`true` or `false`) for each sequence in a `Map`.

- **`isMunodi` Method**:
  - Determines if a given number `n` is part of a Munodi sequence.
  - Continues the process until `n` becomes `1`, applying the rules for even and odd numbers.
  - If `n` becomes less than `1` at any point, it returns `false` to indicate the sequence is not valid.

### Notes:
- Ensure that the file path provided is correct and accessible.
- This implementation assumes that the file contains sequences separated by commas and does not contain any invalid data.
- Exception handling is done using `try-with-resources` to ensure proper resource management.