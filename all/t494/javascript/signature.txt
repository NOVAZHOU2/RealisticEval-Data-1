Certainly! Below is the equivalent JavaScript code with the function signature and JSDoc comments:

```javascript
/**
 * Cleans the input object by removing keys with invalid values. Valid values are non-NaN, non-null, and non-whitespace strings.
 *
 * @param {Object} inputDict - An object to be cleaned.
 * @returns {Object} A new object containing only valid values.
 */
function cleanDictionary(inputDict) {
    const cleanedDict = {};

    for (const [key, value] of Object.entries(inputDict)) {
        // Check if the value is not null and not just whitespace
        if (value !== null && (typeof value === 'string' && value.trim().length > 0)) {
            // Check if value is a number (int or float) and is not NaN
            if (!(typeof value === 'number' && Number.isNaN(value))) {
                cleanedDict[key] = value;
            }
        }
    }

    return cleanedDict;
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block is placed above the function definition.
   - It includes a brief description of the function's purpose.
   - The `@param` tag specifies the parameter type and description.
   - The `@returns` tag specifies the return type and description.

2. **Function Definition**:
   - The function `cleanDictionary` is defined with a single parameter `inputDict`.
   - The parameter `inputDict` is expected to be an object.

3. **Initialization**:
   - An empty object `cleanedDict` is initialized to store the cleaned dictionary.

4. **Iteration**:
   - The `Object.entries` method is used to iterate over the key-value pairs of `inputDict`.

5. **Value Checks**:
   - The first check ensures that the value is not `null` and, if it is a string, it is not just whitespace (`value.trim().length > 0`).
   - The second check ensures that if the value is a number, it is not `NaN` (`!(typeof value === 'number' && Number.isNaN(value))`).

6. **Adding Valid Values**:
   - If the value passes all checks, it is added to `cleanedDict`.

7. **Return**:
   - The function returns the `cleanedDict`.

This JavaScript function preserves the purpose and structure of the original Python function, including the JSDoc comments for better documentation.