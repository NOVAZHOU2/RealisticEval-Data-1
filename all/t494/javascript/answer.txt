To convert the given Python function into JavaScript, we need to maintain the same functionality and logic. The JavaScript version will use similar checks to ensure that values are not `null`, not just whitespace, and not `NaN` if they are numbers. Here's the equivalent JavaScript code:

```javascript
function cleanDictionary(inputDict) {
    /**
     * Cleans the input object by removing keys with invalid values.
     * Valid values are non-NaN, non-null, and non-whitespace strings.
     *
     * @param {Object} inputDict - An object to be cleaned.
     * @return {Object} A new object containing only valid values.
     */
    const cleanedDict = {};

    for (const [key, value] of Object.entries(inputDict)) {
        // Check if the value is not null and not just whitespace
        if (value !== null && (typeof value === 'string' && value.trim().length > 0)) {
            // Check if value is a number (int or float) and is not NaN
            if (!(typeof value === 'number' && Number.isNaN(value))) {
                cleanedDict[key] = value;
            }
        }
    }

    return cleanedDict;
}
```

### Explanation:
1. **Function Definition**: The function `cleanDictionary` is defined with a single parameter `inputDict`.
2. **Initialization**: An empty object `cleanedDict` is initialized to store the cleaned dictionary.
3. **Iteration**: The `Object.entries` method is used to iterate over the key-value pairs of `inputDict`.
4. **Value Checks**:
   - The first check ensures that the value is not `null` and, if it is a string, it is not just whitespace (`value.trim().length > 0`).
   - The second check ensures that if the value is a number, it is not `NaN` (`!(typeof value === 'number' && Number.isNaN(value))`).
5. **Adding Valid Values**: If the value passes all checks, it is added to `cleanedDict`.
6. **Return**: The function returns the `cleanedDict`.

This JavaScript function maintains the same logic and functionality as the original Python function.