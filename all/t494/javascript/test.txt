Sure! Below is the equivalent JavaScript test case using Jest for the provided Python unittest test class:

```javascript
const { cleanDictionary } = require('./path-to-your-clean-dictionary-function');

describe('cleanDictionary', () => {
  it('should remove keys with invalid values', () => {
    const inputDict = {
      key1: 'value1',
      key2: null,
      key3: NaN,
      key4: '',
      key5: '   ',
      key6: undefined,
      key7: {},
      key8: [],
      key9: 'another value'
    };

    const expectedOutput = {
      key1: 'value1',
      key9: 'another value'
    };

    expect(cleanDictionary(inputDict)).toEqual(expectedOutput);
  });

  it('should return an empty object if all values are invalid', () => {
    const inputDict = {
      key1: null,
      key2: NaN,
      key3: '',
      key4: '   '
    };

    const expectedOutput = {};

    expect(cleanDictionary(inputDict)).toEqual(expectedOutput);
  });
});
```

### Explanation:
1. **Importing the Function**: The `cleanDictionary` function is imported from the specified path.
2. **Describe Block**: The `describe` block groups related tests together. In this case, it's grouped under the `cleanDictionary` function.
3. **It Blocks**: Each `it` block contains a specific test case.
   - The first test case checks that the function removes keys with invalid values (`null`, `NaN`, empty string, whitespace string, `undefined`, empty object, empty array).
   - The second test case checks that the function returns an empty object if all values in the input dictionary are invalid.
4. **Expectations**: The `expect` function is used to assert that the output of `cleanDictionary` matches the expected result.

Make sure to replace `'./path-to-your-clean-dictionary-function'` with the actual path to your `cleanDictionary` function file.