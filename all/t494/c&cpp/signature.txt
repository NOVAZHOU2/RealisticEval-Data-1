Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of type annotations, comments, and documentation:

```cpp
#include <iostream>
#include <map>
#include <string>
#include <cctype>
#include <cmath>

// Function to check if a string contains only whitespace characters
bool is_whitespace(const std::string& str) {
    return str.find_first_not_of(" \t\n\v\f\r") == std::string::npos;
}

// Function to check if a floating-point number is NaN
bool is_nan(double value) {
    return std::isnan(value);
}

/**
 * Cleans the input dictionary by removing keys with invalid values.
 * Valid values are non-NaN, non-nullptr, and non-whitespace strings.
 *
 * @param input_dict A map to be cleaned.
 * @return A new map containing only valid values.
 */
std::map<std::string, std::string> clean_dictionary(const std::map<std::string, std::string>& input_dict) {
    std::map<std::string, std::string> cleaned_dict;

    for (const auto& item : input_dict) {
        const std::string& value = item.second;

        // Check if the value is not empty and not a whitespace string
        if (!value.empty() && !is_whitespace(value)) {
            // Since we are dealing with strings, no need to check for NaN
            cleaned_dict[item.first] = value;
        }
    }

    return cleaned_dict;
}

int main() {
    // Example usage
    std::map<std::string, std::string> input_dict = {
        {"key1", "valid"},
        {"key2", ""},
        {"key3", "  "},
        {"key4", "another valid"},
        {"key5", "123"}
    };

    std::map<std::string, std::string> cleaned_dict = clean_dictionary(input_dict);

    // Print the cleaned dictionary
    for (const auto& item : cleaned_dict) {
        std::cout << item.first << ": " << item.second << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Helper Functions**:
   - `is_whitespace`: Checks if a string contains only whitespace characters.
   - `is_nan`: Checks if a floating-point number is NaN. This function is included for completeness, but it is not used directly in the `clean_dictionary` function since we are dealing with strings.

2. **Main Cleaning Function**:
   - `clean_dictionary`: Iterates over the input dictionary and checks each value. If the value is not empty and not a whitespace string, it is added to the cleaned dictionary.

3. **Documentation Comments**:
   - Multi-line comments (`/* ... */`) are used for the function documentation.
   - Single-line comments (`//`) are used for inline comments.

4. **Example Usage**:
   - The `main` function demonstrates how to use the `clean_dictionary` function and prints the cleaned dictionary.

This code preserves the original purpose and structure of the Python code while adapting it to C++ syntax and conventions.