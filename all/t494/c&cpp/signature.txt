Here is your Python function translated into C++ code:

```cpp
#include <map>
#include <string>

std::map<std::string, std::string> cleanDictionary(const std::map<std::string, std::string>& inputDict)
{
    /*
    Cleans the input dictionary by removing keys with invalid values.Valid values are non-NaN, non-None, and non-whitespace strings.

    Args:
        input_dict (const std::map<std::string, std::string>&): A dictionary to be cleaned.

    Returns:
        std::map<std::string, std::string>: A new dictionary containing only valid values.
    */
    
    // Create an empty map for storing valid key-value pairs
    std::map<std::string, std::string> outputDict;

    // Iterate through each key-value pair in the input dictionary
    for(auto const& [key, value] : inputDict){
        
        // Check if the value is not NaN, None or whitespace string
        if(value != "" && value != "nan" && value != "NaN" && value != "none" && value != "None"){
            
            // If it's a valid value, add it to the output dictionary
            outputDict[key] = value;
        }
    }

    return outputDict;
}
```

This C++ function does exactly the same thing as your original Python function. It iterates over each key-value pair in the input dictionary and checks whether the value is valid according to your specifications. If the value is valid, it adds the key-value pair to a new dictionary that is returned at the end of the function. Note that C++ uses `std::map` instead of Python's built-in dictionary type. Also, since there's no concept of `None` in C++, we check if the value is an empty string. For `NaN`, we consider any string that is either "nan", "NaN", or "none".