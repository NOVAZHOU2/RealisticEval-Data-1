Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a set of Catch2 test cases, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

Here is the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <map>
#include <string>
#include <cctype>

// Function to check if a string contains only whitespace characters
bool is_whitespace(const std::string& str) {
    return str.find_first_not_of(" \t\n\v\f\r") == std::string::npos;
}

// Function to check if a floating-point number is NaN
bool is_nan(double value) {
    return std::isnan(value);
}

// Function to clean the input dictionary
std::map<std::string, std::string> clean_dictionary(const std::map<std::string, std::string>& input_dict) {
    std::map<std::string, std::string> cleaned_dict;

    for (const auto& item : input_dict) {
        const std::string& value = item.second;

        // Check if the value is not empty and not a whitespace string
        if (!value.empty() && !is_whitespace(value)) {
            // Since we are dealing with strings, no need to check for NaN
            cleaned_dict[item.first] = value;
        }
    }

    return cleaned_dict;
}

TEST_CASE("Test clean_dictionary function", "[clean_dictionary]") {
    SECTION("Test a dictionary with valid strings") {
        std::map<std::string, std::string> input_dict = {
            {"key1", "valid string"},
            {"key2", "another valid string"}
        };
        std::map<std::string, std::string> expected_output = {
            {"key1", "valid string"},
            {"key2", "another valid string"}
        };
        REQUIRE(clean_dictionary(input_dict) == expected_output);
    }

    SECTION("Test a dictionary with None and NaN values") {
        std::map<std::string, std::string> input_dict = {
            {"key1", ""},
            {"key3", "valid string"}
        };
        std::map<std::string, std::string> expected_output = {
            {"key3", "valid string"}
        };
        REQUIRE(clean_dictionary(input_dict) == expected_output);
    }

    SECTION("Test a dictionary with whitespace strings") {
        std::map<std::string, std::string> input_dict = {
            {"key1", "   "},
            {"key2", ""},
            {"key3", "valid"}
        };
        std::map<std::string, std::string> expected_output = {
            {"key3", "valid"}
        };
        REQUIRE(clean_dictionary(input_dict) == expected_output);
    }

    SECTION("Test an empty dictionary") {
        std::map<std::string, std::string> input_dict = {};
        std::map<std::string, std::string> expected_output = {};
        REQUIRE(clean_dictionary(input_dict) == expected_output);
    }
}
```

### Explanation:
1. **Header Includes**:
   - Include the necessary headers for Catch2, `map`, `string`, and `cctype`.

2. **Helper Functions**:
   - `is_whitespace`: Checks if a string contains only whitespace characters.
   - `is_nan`: Checks if a floating-point number is NaN. This function is included for completeness but is not used directly in the `clean_dictionary` function since we are dealing with strings.

3. **Cleaning Function**:
   - `clean_dictionary`: Iterates over the input dictionary and checks each value. If the value is not empty and not a whitespace string, it is added to the cleaned dictionary.

4. **Catch2 Test Cases**:
   - `TEST_CASE`: Defines the overall test case for the `clean_dictionary` function.
   - `SECTION`: Defines individual test sections within the test case.
   - `REQUIRE`: Asserts that the output of `clean_dictionary` matches the expected output.

This code preserves the original purpose and structure of the Python unittest class while adapting it to the Catch2 testing framework in C++.