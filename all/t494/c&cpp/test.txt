To convert the given Python `unittest` test class to a C++ `Catch2` test case, we first need to define the function in C++ that performs the same logic as the Python function `clean_dictionary`. Then, we can write the corresponding test cases using Catch2.

Here's how you can do it:

### Step 1: Define the Function in C++

First, let's define the `clean_dictionary` function in C++. We'll use the `<map>` and `<string>` libraries for handling dictionaries and strings, respectively. We'll also include the `<algorithm>` library for string manipulation.

```cpp
#include <iostream>
#include <map>
#include <string>
#include <algorithm>

std::map<std::string, std::string> clean_dictionary(const std::map<std::string, std::string>& input_dict) {
    std::map<std::string, std::string> output_dict;
    
    for (const auto& pair : input_dict) {
        const std::string& key = pair.first;
        const std::string& value = pair.second;
        
        if (!value.empty() && !std::all_of(value.begin(), value.end(), ::isspace)) {
            output_dict[key] = value;
        }
    }
    
    return output_dict;
}
```

### Step 2: Write Test Cases Using Catch2

Next, let's write the test cases using Catch2. First, ensure you have Catch2 installed. If not, you can download it from [here](https://github.com/catchorg/Catch2).

Here's an example of how you might write the test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

TEST_CASE("Test clean_dictionary function", "[clean_dictionary]") {
    SECTION("Empty dictionary") {
        std::map<std::string, std::string> input_dict = {};
        std::map<std::string, std::string> expected_output = {};
        REQUIRE(clean_dictionary(input_dict) == expected_output);
    }

    SECTION("Dictionary with valid and invalid values") {
        std::map<std::string, std::string> input_dict = {
            {"key1", "value1"},
            {"key2", ""},
            {"key3", "   "},
            {"key4", "value4"}
        };
        std::map<std::string, std::string> expected_output = {
            {"key1", "value1"},
            {"key4", "value4"}
        };
        REQUIRE(clean_dictionary(input_dict) == expected_output);
    }

    SECTION("Dictionary with all invalid values") {
        std::map<std::string, std::string> input_dict = {
            {"key1", ""},
            {"key2", "   "}
        };
        std::map<std::string, std::string> expected_output = {};
        REQUIRE(clean_dictionary(input_dict) == expected_output);
    }
}
```

### Explanation

1. **Function Definition**:
   - The `clean_dictionary` function iterates through each key-value pair in the input dictionary.
   - It checks if the value is non-empty and does not consist solely of whitespace characters.
   - If both conditions are met, the key-value pair is added to the output dictionary.

2. **Test Cases**:
   - Each `SECTION` represents a different scenario or set of inputs.
   - The `REQUIRE` macro is used to assert that the output of `clean_dictionary` matches the expected result.

By following these steps, you should be able to convert your Python `unittest` test class to a C++ `Catch2` test case.