Certainly! Hereâ€™s the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Cleans the input object by removing keys with invalid values.
 * Valid values are non-NaN, non-null, and non-whitespace strings.
 *
 * @param inputObj - An object to be cleaned.
 * @returns A new object containing only valid values.
 */
function cleanObject(inputObj: Record<string, any>): Record<string, any> {
  const cleanedObj: Record<string, any> = {};

  for (const [key, value] of Object.entries(inputObj)) {
    // Check if the value is not null and not a whitespace string
    if (value !== null && (typeof value === 'string' && value.trim() !== '')) {
      // Check if value is a number (int or float) and is not NaN
      if (!(typeof value === 'number' && Number.isNaN(value))) {
        cleanedObj[key] = value;
      }
    }
  }

  return cleanedObj;
}

// Example usage
const exampleObj = {
  key1: '   ',
  key2: null,
  key3: 5,
  key4: 'valid',
  key5: NaN,
  key6: 0,
};

console.log(cleanObject(exampleObj));
```

### Explanation:
1. **Function Definition**:
   - The function `cleanObject` is defined with the type signature `Record<string, any>` for both the input and output objects. This allows for a generic object with string keys and any type of values.

2. **JSDoc Documentation**:
   - The JSDoc-style comments are used to document the function, its parameters, and its return type.

3. **Type Checking**:
   - `value !== null`: Checks if the value is not `null`.
   - `typeof value === 'string' && value.trim() !== ''`: Checks if the value is a non-whitespace string.
   - `!(typeof value === 'number' && Number.isNaN(value))`: Checks if the value is a number and not `NaN`.

4. **Iterating Over Object Entries**:
   - Using `Object.entries` to iterate over the key-value pairs of the input object.

5. **Example Usage**:
   - An example object is provided to demonstrate how the function works.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices.