Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
import { isNaN } from 'lodash';

/**
 * Cleans the input object by removing keys with invalid values.
 * Valid values are non-NaN, non-null, and non-whitespace strings.
 *
 * @param inputObj - An object to be cleaned.
 * @returns A new object containing only valid values.
 */
function cleanObject(inputObj: Record<string, any>): Record<string, any> {
  const cleanedObj: Record<string, any> = {};

  for (const [key, value] of Object.entries(inputObj)) {
    // Check if the value is not null and not a whitespace string
    if (value !== null && (typeof value === 'string' && value.trim() !== '')) {
      // Check if value is a number (int or float) and is not NaN
      if (!(typeof value === 'number' && isNaN(value))) {
        cleanedObj[key] = value;
      }
    }
  }

  return cleanedObj;
}

// Example usage
const exampleObj = {
  key1: '   ',
  key2: null,
  key3: 5,
  key4: 'valid',
  key5: NaN,
  key6: 0,
};

console.log(cleanObject(exampleObj));
```

### Explanation:
1. **Function Definition**: The function `cleanObject` is defined with a type signature `Record<string, any>` for both the input and output objects. This allows for a generic object with string keys and any type of values.
2. **Type Checking**:
   - `value !== null`: Checks if the value is not `null`.
   - `typeof value === 'string' && value.trim() !== ''`: Checks if the value is a non-whitespace string.
   - `!(typeof value === 'number' && isNaN(value))`: Checks if the value is a number and not `NaN`.
3. **Iterating Over Object Entries**: Using `Object.entries` to iterate over the key-value pairs of the input object.
4. **Importing `isNaN`**: The `isNaN` function is imported from the `lodash` library to check for `NaN` values. Alternatively, you can use the native `Number.isNaN` if available.

This TypeScript code maintains the same functionality as the Python code while adhering to TypeScript's static type system and best practices.