Sure! Here's how you can convert the given Python unittest test class into a TypeScript test case using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

// Assuming the function is defined in a file named 'cleanDictionary.ts'
import { cleanDictionary } from './cleanDictionary';

describe('cleanDictionary', () => {
  it('should remove keys with invalid values', () => {
    const inputDict = {
      key1: NaN,
      key2: null,
      key3: '',
      key4: 'value',
      key5: undefined,
      key6: {},
      key7: [],
    };

    const expectedOutput = {
      key4: 'value',
    };

    expect(cleanDictionary(inputDict)).toEqual(expectedOutput);
  });

  it('should return an empty object if all values are invalid', () => {
    const inputDict = {
      key1: NaN,
      key2: null,
      key3: '',
      key5: undefined,
      key6: {},
      key7: [],
    };

    const expectedOutput = {};

    expect(cleanDictionary(inputDict)).toEqual(expectedOutput);
  });

  it('should handle dictionaries with no invalid values', () => {
    const inputDict = {
      key1: 123,
      key2: 'test',
      key3: true,
      key4: {},
      key5: [],
    };

    const expectedOutput = {
      key1: 123,
      key2: 'test',
      key3: true,
      key4: {},
      key5: [],
    };

    expect(cleanDictionary(inputDict)).toEqual(expectedOutput);
  });
});
```

### Explanation:
1. **Importing Dependencies**: We import `describe`, `it`, and `expect` from `@jest/globals`.
2. **Describing the Test Suite**: We use `describe` to group related tests under the name `'cleanDictionary'`.
3. **Writing Individual Tests**:
   - The first test checks if the function removes keys with invalid values correctly.
   - The second test ensures that an empty object is returned if all values are invalid.
   - The third test verifies that the function handles dictionaries with no invalid values correctly.
4. **Using `expect` for Assertions**: We use `expect` to assert that the output of `cleanDictionary` matches the expected result.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```sh
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, update your `package.json` to include a test script:

```json
{
  "scripts": {
    "test": "jest"
  }
}
```

Finally, run your tests using:

```sh
npm test
# or
yarn test
```