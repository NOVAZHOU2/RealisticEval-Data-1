Sure, here's how you can translate your Python code into Java:

```java
package org.real.temp;

import java.util.HashMap;
import java.util.Map;

public class Answer {

    /**
     * Cleans the input map by removing keys with invalid values. Valid values are non-NaN, non-Null, and non-empty strings.
     *
     * @param inputMap The map to be cleaned.
     * @return A new map containing only valid values.
     */
    public static Map<String, Object> cleanDictionary(Map<String, Object> inputMap) {
        Map<String, Object> result = new HashMap<>();

        for (Map.Entry<String, Object> entry : inputMap.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();

            if (isValidValue(value)) {
                result.put(key, value);
            }
        }

        return result;
    }

    private static boolean isValidValue(Object value) {
        if (value == null) {
            return false;
        } else if (value instanceof String && ((String)value).trim().isEmpty()) {
            return false;
        } else if (Double.isNaN((double)value)) {
            return false;
        } else {
            return true;
        }
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration `package org.real.temp;` specifies where the `Answer` class resides.
2. **Class Definition**: The `Answer` class contains the method `cleanDictionary`.
3. **Method Signature**:
   - `public static Map<String, Object> cleanDictionary(Map<String, Object> inputMap)` declares a static method that takes a `Map<String, Object>` as an argument and returns a new `Map<String, Object>`.
4. **Cleaning Logic**:
   - We iterate over each entry in the input map.
   - We check if the value is valid using the helper method `isValidValue`.
   - If the value is valid, we add it to the result map.
5. **Helper Method `isValidValue`**:
   - This method checks if the given value is not `null`, not an empty string after trimming, and not NaN (for numeric types).

This Java code should achieve the same functionality as your original Python code.