Sure! Below is the equivalent Java JUnit test case for the provided Python unittest test class. The Java package is `org.real.temp`, and the class name is `Tester`.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class Tester {

    private Map<String, Object> inputDictionary;
    private Map<String, Object> expectedResult;

    @BeforeEach
    public void setUp() {
        inputDictionary = new HashMap<>();
        expectedResult = new HashMap<>();

        // Example data setup
        inputDictionary.put("key1", "value1");
        inputDictionary.put("key2", null);
        inputDictionary.put("key3", Double.NaN);
        inputDictionary.put("key4", "   ");
        inputDictionary.put("key5", 100);

        expectedResult.put("key1", "value1");
        expectedResult.put("key5", 100);
    }

    @Test
    public void testCleanDictionary() {
        Map<String, Object> result = cleanDictionary(inputDictionary);
        assertEquals(expectedResult, result);
        assertNotNull(result);
    }

    public static Map<String, Object> cleanDictionary(Map<String, Object> inputDict) {
        Map<String, Object> cleanedMap = new HashMap<>();
        for (Map.Entry<String, Object> entry : inputDict.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();

            if (isValidValue(value)) {
                cleanedMap.put(key, value);
            }
        }
        return cleanedMap;
    }

    private static boolean isValidValue(Object value) {
        if (value == null || value instanceof String && ((String) value).trim().isEmpty()) {
            return false;
        } else if (value instanceof Number) {
            return !Double.isNaN(((Number) value).doubleValue());
        }
        return true;
    }
}
```

### Explanation:

1. **Package Declaration**: The Java file starts with the package declaration `package org.real.temp;`.
2. **Imports**: Necessary imports are included at the top of the file.
3. **Class Definition**: The class `Tester` is defined within the specified package.
4. **Setup Method**: The `@BeforeEach` annotation marks the `setUp` method, which initializes the input dictionary and the expected result before each test method runs.
5. **Test Method**: The `testCleanDictionary` method contains the test logic. It calls the `cleanDictionary` method and asserts that the result matches the expected output.
6. **Static Methods**: The `cleanDictionary` method and `isValidValue` method are defined as static to allow them to be called without creating an instance of the class.

This Java JUnit test case should cover similar functionality as your Python unittest test class.