Here is the Java version of your Python code with the same functionality and comments:

```java
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;

import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

public class DataframeToMarkdown {

    /**
     * Converts a DataFrame object to a table in markdown format.
     *
     * @param dataFrame The DataFrame to be converted.
     * @param mdPath    The output markdown file path.
     * @return Markdown file content string.
     */
    public static String dataframeToMarkdown(List<Map<String, Object>> dataFrame, String mdPath) {
        try (FileWriter writer = new FileWriter(mdPath);
             CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT.withHeader(dataFrame.get(0).keySet().toArray(new String[0])))) {

            for (Map<String, Object> row : dataFrame) {
                List<Object> values = row.values().stream()
                        .map(value -> value instanceof Number ? ((Number) value).longValue() : value.toString())
                        .collect(Collectors.toList());
                csvPrinter.printRecord(values);
            }

            return "Successfully written to " + mdPath;
        } catch (IOException e) {
            e.printStackTrace();
            return "Error writing to file";
        }
    }
}
```

This Java method `dataframeToMarkdown` takes a list of maps (representing rows and columns), and a file path where the markdown file will be saved. It uses Apache Commons CSV library to handle CSV formatting which is similar to markdown tables.

Please note that you need to add the Apache Commons CSV dependency in your project if not already included. Here's how it can be added in Maven:

```xml
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-csv</artifactId>
    <version>1.9.0</version>
</dependency>
```
And also, please ensure that the `mdPath` provided is valid and writable.