Here is the C++ code equivalent for your Python function:

```cpp
#include <iostream>
#include <fstream>
#include <vector>

void dataframeToMarkdown(std::vector<std::pair<std::string, std::vector<std::string>>> data, const std::string& mdPath)
{
    // Open file in write mode
    std::ofstream mdFile(mdPath);
    
    if (!mdFile.is_open()) {
        std::cerr << "Error opening file!" << std::endl;
        return;
    }

    // Write the header row
    mdFile << "|";
    for (const auto& column : data[0].second) {
        mdFile << " " << column << " |";
    }
    mdFile << "\n";

    // Write the separator row
    mdFile << "|";
    for (size_t i = 0; i < data[0].second.size(); ++i) {
        mdFile << " --- |";
    }
    mdFile << "\n";

    // Write the data rows
    for (const auto& row : data) {
        mdFile << "|";
        for (const auto& cell : row.second) {
            mdFile << " " << cell << " |";
        }
        mdFile << "\n";
    }

    // Close file
    mdFile.close();
}

int main()
{
    std::vector<std::pair<std::string, std::vector<std::string>>> data = {{"Name", {"Alice", "Bob"}}, {"Age", {"25", "30"}}};
    dataframeToMarkdown(data, "output.md");
    return 0;
}
```

This C++ program does not use any external libraries like pandas and it uses vectors of pairs to represent the DataFrame. The `dataframeToMarkdown` function writes the Markdown table to a file specified by `mdPath`. Note that the structure of the data is different from pandas DataFrame, so you would need to adjust it according to your actual data structure.

Also note that error handling is minimal here, and you should add more robust error checking and exception handling depending on your requirements.