Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a C++ test class with equivalent functionality and logic.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 using the following steps:

1. Add the Catch2 header files to your project.
2. Include the necessary headers in your test file.

Here's the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

// Custom DataFrame class to mimic pandas DataFrame
class DataFrame {
public:
    std::vector<std::vector<std::string>> data;
    std::vector<std::string> columns;

    // Constructor to initialize the DataFrame
    DataFrame(const std::vector<std::vector<std::string>>& data, const std::vector<std::string>& columns)
        : data(data), columns(columns) {}

    // Iterator for rows
    struct RowIterator {
        const std::vector<std::vector<std::string>>& data;
        size_t index;

        RowIterator(const std::vector<std::vector<std::string>>& data, size_t index)
            : data(data), index(index) {}

        bool operator!=(const RowIterator& other) const {
            return index != other.index;
        }

        void operator++() {
            ++index;
        }

        std::vector<std::string>& operator*() {
            return data[index];
        }
    };

    RowIterator begin() {
        return RowIterator(data, 0);
    }

    RowIterator end() {
        return RowIterator(data, data.size());
    }
};

/**
 * Convert a DataFrame object to a table in Markdown format.
 *
 * Example:
 *     Input: DataFrame {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}
 *     Output: | Name | Age |\n| --- | --- |\n| Alice | 25 |\n| Bob | 30 |
 *
 * @param df DataFrame object containing the data
 * @param md_path Path to the output Markdown file
 * @return The content of the Markdown file as a string
 */
std::string dataframe_to_markdown(const DataFrame& df, const std::string& md_path) {
    // Construct the header row
    std::stringstream headers;
    headers << "| ";
    for (size_t i = 0; i < df.columns.size(); ++i) {
        headers << df.columns[i];
        if (i < df.columns.size() - 1) {
            headers << " | ";
        }
    }
    headers << " |\n";

    // Construct the separator row
    std::stringstream separators;
    separators << "| ";
    for (size_t i = 0; i < df.columns.size(); ++i) {
        separators << "---";
        if (i < df.columns.size() - 1) {
            separators << " | ";
        }
    }
    separators << " |\n";

    // Combine headers and separators
    std::string markdown = headers.str() + separators.str();

    // Build markdown table body
    for (auto it = df.begin(); it != df.end(); ++it) {
        std::stringstream row;
        row << "| ";
        for (size_t i = 0; i < (*it).size(); ++i) {
            row << (*it)[i];
            if (i < (*it).size() - 1) {
                row << " | ";
            }
        }
        row << " |\n";
        markdown += row.str();
    }

    // Write markdown to file
    std::ofstream handle(md_path);
    if (handle.is_open()) {
        handle << markdown;
        handle.close();
    } else {
        std::cerr << "Failed to open file: " << md_path << std::endl;
    }

    return markdown;
}

TEST_CASE("Test DataFrame to Markdown Conversion") {
    SECTION("Test df_to_str") {
        // Test that the function writes the correct markdown to a file
        std::vector<std::vector<std::string>> data = {{"Alice", "25"}, {"Bob", "30"}};
        std::vector<std::string> columns = {"Name", "Age"};
        DataFrame df(data, columns);

        std::string expected_markdown = "| Name   |   Age |\n|:-------|------:|\n| Alice  |    25 |\n| Bob    |    30 |";
        std::string result = dataframe_to_markdown(df, "dummy_path.md");
        REQUIRE(result == expected_markdown);
    }

    SECTION("Test empty dataframe") {
        // Test how the function handles an empty DataFrame
        std::vector<std::vector<std::string>> data = {};
        std::vector<std::string> columns = {};
        DataFrame df(data, columns);

        std::string expected_markdown = "";
        std::string result = dataframe_to_markdown(df, "dummy_path.md");
        REQUIRE(result == expected_markdown);
    }

    SECTION("Test single row dataframe") {
        // Test with a DataFrame that contains only one row
        std::vector<std::vector<std::string>> data = {{"Alice", "30"}};
        std::vector<std::string> columns = {"Name", "Age"};
        DataFrame df(data, columns);

        std::string expected_markdown = "| Name   |   Age |\n|:-------|------:|\n| Alice  |    30 |";
        std::string result = dataframe_to_markdown(df, "dummy_path.md");
        REQUIRE(result == expected_markdown);
    }

    SECTION("Test non-string columns") {
        // Test with non-string question types in the DataFrame
        std::vector<std::vector<std::string>> data = {{"Alice", "25", "5.5"}, {"Bob", "30", "6.0"}};
        std::vector<std::string> columns = {"Name", "Age", "Height"};
        DataFrame df(data, columns);

        std::string expected_markdown = "| Name   |   Age |   Height |\n|:-------|------:|---------:|\n| Alice  |    25 |      5.5 |\n| Bob    |    30 |      6   |";
        std::string result = dataframe_to_markdown(df, "dummy_path.md");
        REQUIRE(result == expected_markdown);
    }

    SECTION("Test special characters") {
        // Test handling of special characters in DataFrame
        std::vector<std::vector<std::string>> data = {{"Alice", "Good@Work!"}, {"Bob", "Excellent & Commendable"}};
        std::vector<std::string> columns = {"Name", "Comments"};
        DataFrame df(data, columns);

        std::string expected_markdown = "| Name   | Comments                |\n|:-------|:------------------------|\n| Alice  | Good@Work!              |\n| Bob    | Excellent & Commendable |";
        std::string result = dataframe_to_markdown(df, "dummy_path.md");
        REQUIRE(result == expected_markdown);
    }
}
```

### Explanation:
1. **Catch2 Header**: The Catch2 header is included at the beginning of the file.
2. **DataFrame Class**: A custom `DataFrame` class is defined to mimic the behavior of a pandas DataFrame.
3. **Row Iterator**: An iterator class `RowIterator` is implemented to iterate over the rows of the DataFrame.
4. **Markdown Construction**: The `dataframe_to_markdown` function constructs the Markdown table from the DataFrame.
5. **Testing Sections**: Each section in the `TEST_CASE` corresponds to a specific test case from the Python unittest class.
6. **Assertions**: `REQUIRE` is used for assertions to ensure the correctness of the results.

This code preserves the original functionality and logic of the Python tests while adapting them to the C++ Catch2 testing framework.