Sure! Below is the C++ version of your Python function `dataframe_to_markdown`, keeping the same structure and functionality. Note that C++ does not have built-in support for dataframes like Python's Pandas, so we'll need to use an external library such as `boost::serialization` or `sqlite` if you want to work with tabular data.

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

/**
 * Convert a DataFrame object to a table in markdown format.
 *
 * Example:
 * Input: dataframe {{'Name': ['Alice', 'Bob'], 'Age': [25, 30]}}
 * Output: | Name | Age |
 *         | ---- | --- |
 *         | Alice | 25 |
 *         | Bob | 30 |
 *
 * @param df A vector of vectors representing the DataFrame.
 * @param md_path The output Markdown file path.
 * @return The content of the Markdown file as a string.
 */
std::string dataframe_to_markdown(const std::vector<std::vector<std::string>>& df, const std::string& md_path) {
    // Check if the DataFrame is empty
    if (df.empty()) {
        return "";
    }

    // Determine the number of columns
    size_t num_columns = df[0].size();

    // Create the header row
    std::ostringstream oss;
    oss << "|";
    for (size_t i = 0; i < num_columns; ++i) {
        oss << " " << df[0][i] << " |";
    }
    oss << "\n";

    // Create the separator row
    oss << "|";
    for (size_t i = 0; i < num_columns; ++i) {
        oss << " --- |";
    }
    oss << "\n";

    // Add the data rows
    for (size_t i = 1; i < df.size(); ++i) {
        oss << "|";
        for (size_t j = 0; j < num_columns; ++j) {
            oss << " " << df[i][j] << " |";
        }
        oss << "\n";
    }

    // Write the Markdown content to a file
    std::ofstream outfile(md_path);
    if (!outfile.is_open()) {
        throw std::runtime_error("Unable to open file for writing");
    }
    outfile << oss.str();
    outfile.close();

    // Return the Markdown content as a string
    return oss.str();
}

int main() {
    // Example usage
    std::vector<std::vector<std::string>> df = {
        {"Name", "Age"},
        {"Alice", "25"},
        {"Bob", "30"}
    };
    std::string md_path = "output.md";
    std::string markdown_content = dataframe_to_markdown(df, md_path);
    std::cout << markdown_content << std::endl;

    return 0;
}
```

This C++ code defines a function `dataframe_to_markdown` that takes a vector of vectors (representing the DataFrame) and a file path where the Markdown output should be saved. It constructs the Markdown table and writes it to the specified file. The `main` function demonstrates how to use this function with an example DataFrame.