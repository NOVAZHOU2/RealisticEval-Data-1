Certainly! Here is the equivalent TypeScript code for the provided Python function, including proper type annotations and JSDoc-style documentation comments:

```typescript
import * as fs from 'fs';
import { DataFrame } from 'some-dataframe-library'; // Replace with the actual library you're using

/**
 * Converts a DataFrame object to a table in Markdown format.
 * 
 * Example:
 *   Input: DataFrame {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}
 *   Output: 
 *   ```
 *   | Name | Age |
 *   | --- | --- |
 *   | Alice | 25 |
 *   | Bob | 30 |
 *   ```
 * 
 * @param df - The DataFrame to convert.
 * @param mdPath - The path to the output Markdown file.
 * @returns The content of the Markdown file as a string.
 */
function dataframeToMarkdown(df: DataFrame, mdPath: string): string {
    // Construct the header row
    const headers = '| ' + df.columns.join(' | ') + ' |\n';

    // Construct the separator row
    const separators = '| ' + ('--- | '.repeat(df.columns.length)).slice(0, -3) + ' |\n';

    // Combine headers and separators
    let markdown = headers + separators;

    // Build markdown table body
    df.forEachRow((row: any[]) => {
        markdown += '| ' + row.map(value => String(value)).join(' | ') + ' |\n';
    });

    // Write markdown to file
    fs.writeFileSync(mdPath, markdown);

    return markdown;
}

// Example usage
// const df = new DataFrame({ Name: ['Alice', 'Bob'], Age: [25, 30] });
// const markdown = dataframeToMarkdown(df, 'output.md');
```

### Explanation:
1. **Imports**:
   - `fs` is used for file system operations.
   - `DataFrame` is assumed to be part of some library (replace `'some-dataframe-library'` with the actual library you are using).

2. **JSDoc Documentation**:
   - The function is documented using JSDoc comments, providing a clear description of the function, parameters, and return value.

3. **Function Definition**:
   - The function `dataframeToMarkdown` takes a `DataFrame` object and a path to the Markdown file.

4. **Header Row Construction**:
   - The header row is constructed by joining the column names with `|`.

5. **Separator Row Construction**:
   - The separator row uses `---` repeated for each column.

6. **Markdown Table Body Construction**:
   - Iterate over each row in the DataFrame and construct the Markdown table body.

7. **File Writing**:
   - Use `fs.writeFileSync` to write the Markdown content to the specified file.

8. **Return Value**:
   - The function returns the generated Markdown string.

### Notes:
- Make sure to replace `DataFrame` and its methods (`forEachRow`, etc.) with the actual methods provided by the DataFrame library you are using.
- Adjust the example usage based on how you initialize and use your DataFrame.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and documentation standards.