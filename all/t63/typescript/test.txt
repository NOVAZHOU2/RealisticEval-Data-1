Sure, I can help you convert the Python unittest test class to a TypeScript test case using Jest. Here's how you might write it:

First, ensure you have Jest installed in your project. If not, you can install it using npm or yarn:

```bash
npm install --save-dev jest
```

or

```bash
yarn add --dev jest
```

Next, create a new TypeScript file for your test cases. Let's call it `dataframeToMarkdown.test.ts`.

Here is an example of what the TypeScript test case might look like:

```typescript
import { describe, expect, test } from '@jest/globals';
import * as fs from 'fs';
import * as path from 'path';
import { dataframe_to_markdown } from './your_module'; // Adjust the import path accordingly

describe('dataframe_to_markdown function', () => {
    const testData = [
        {
            input: {
                df: new Map([
                    ['Name', ['Alice', 'Bob']],
                    ['Age', [25, 30]]
                ]),
                md_path: '/tmp/test_output.md'
            },
            expected: '| Name | Age |\n| --- | --- |\n| Alice | 25 |\n| Bob | 30 |\n'
        }
    ];

    testData.forEach(({ input, expected }, index) => {
        test(`should convert dataframe to markdown correctly for test case ${index + 1}`, async () => {
            // Mocking the fs.writeFile method
            const mockWriteFile = jest.spyOn(fs, 'writeFileSync');
            mockWriteFile.mockImplementation(() => {});

            // Call the function with the test data
            await dataframe_to_markdown(input.df, input.md_path);

            // Check if the function was called with the correct arguments
            expect(mockWriteFile).toHaveBeenCalledWith(
                input.md_path,
                expected
            );

            // Clean up the mock
            mockWriteFile.mockRestore();
        });
    });
});
```

In this example:

1. We use `@jest/globals` to import the necessary functions (`describe`, `expect`, and `test`) from Jest.
2. We mock the `fs.writeFileSync` method to avoid writing files during tests.
3. We define a `testData` array containing test cases, each with an `input` object and an `expected` string.
4. We loop through the `testData` array and create a test case for each item.
5. Inside each test case, we call the `dataframe_to_markdown` function with the test data and check if the `fs.writeFileSync` method was called with the correct arguments.

Make sure to adjust the import path in the `import { dataframe_to_markdown } from './your_module';` line to match where your `dataframe_to_markdown` function is located.

Finally, you can run your tests using Jest by adding a script to your `package.json`:

```json
"scripts": {
    "test": "jest"
}
```

Then run:

```bash
npm test
```

or

```bash
yarn test
```

This will execute your TypeScript test cases using Jest.