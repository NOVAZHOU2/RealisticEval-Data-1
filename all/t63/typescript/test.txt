Certainly! Here is the equivalent Jest test suite in TypeScript for the provided Python unittest class. The test cases will be converted to Jest’s assertion methods and will include proper type annotations and setup.

### TypeScript Code

```typescript
import * as fs from 'fs';
import { DataFrame } from 'some-dataframe-library'; // Replace with the actual library you're using
import { dataframeToMarkdown } from './path-to-your-function'; // Import your function

describe('TestDataframeToMarkdown', () => {
  let data: Record<string, any>;
  let df: DataFrame;

  beforeEach(() => {
    // Create a sample DataFrame
    data = { Name: ['Alice', 'Bob'], Age: [25, 30] };
    df = new DataFrame(data);
  });

  it('should write the correct markdown to a file', () => {
    const expectedMarkdown = `| Name   |   Age |\n|:-------|------:|\n| Alice  |    25 |\n| Bob    |    30 |`;
    const result = dataframeToMarkdown(df, 'dummy_path.md');
    expect(result).toEqual(expectedMarkdown);
  });

  it('should handle an empty DataFrame correctly', () => {
    const dfEmpty = new DataFrame({});
    const expectedMarkdown = '';
    const result = dataframeToMarkdown(dfEmpty, 'dummy_path.md');
    expect(result).toEqual(expectedMarkdown);
  });

  it('should handle a single-row DataFrame correctly', () => {
    const dfSingleRow = new DataFrame({ Name: ['Alice'], Age: [30] });
    const expectedMarkdown = `| Name   |   Age |\n|:-------|------:|\n| Alice  |    30 |`;
    const result = dataframeToMarkdown(dfSingleRow, 'dummy_path.md');
    expect(result).toEqual(expectedMarkdown);
  });

  it('should handle non-string columns correctly', () => {
    const dfNonString = new DataFrame({ Name: ['Alice', 'Bob'], Age: [25, 30], Height: [5.5, 6.0] });
    const expectedMarkdown = `| Name   |   Age |   Height |\n|:-------|------:|---------:|\n| Alice  |    25 |      5.5 |\n| Bob    |    30 |      6   |`;
    const result = dataframeToMarkdown(dfNonString, 'dummy_path.md');
    expect(result).toEqual(expectedMarkdown);
  });

  it('should handle special characters in DataFrame correctly', () => {
    const dfSpecialChars = new DataFrame({
      Name: ['Alice', 'Bob'],
      Comments: ['Good@Work!', 'Excellent & Commendable']
    });
    const expectedMarkdown = `| Name   | Comments                |\n|:-------|:------------------------|\n| Alice  | Good@Work!              |\n| Bob    | Excellent & Commendable |`;
    const result = dataframeToMarkdown(dfSpecialChars, 'dummy_path.md');
    expect(result).toEqual(expectedMarkdown);
  });
});

// Example usage of the function
// const df = new DataFrame({ Name: ['Alice', 'Bob'], Age: [25, 30] });
// const markdown = dataframeToMarkdown(df, 'output.md');
```

### Explanation:
1. **Imports**:
   - `fs` is used for file system operations.
   - `DataFrame` is assumed to be part of some library (replace `'some-dataframe-library'` with the actual library you are using).
   - `dataframeToMarkdown` is imported from the file where the function is defined.

2. **Describe Block**:
   - The `describe` block groups all the test cases under `TestDataframeToMarkdown`.

3. **BeforeEach Hook**:
   - The `beforeEach` hook sets up a common DataFrame for each test case.

4. **Test Cases**:
   - Each `it` block represents a test case.
   - The test cases use Jest’s `expect` assertions to verify the correctness of the function.

5. **Example Usage**:
   - An example usage of the `dataframeToMarkdown` function is provided at the end.

### Notes:
- Make sure to replace `DataFrame` and its methods (`new DataFrame`, etc.) with the actual methods provided by the DataFrame library you are using.
- Adjust the import paths and the actual DataFrame library according to your project setup.

This TypeScript code preserves the original functionality and logic of the Python unittest class while adapting it to Jest’s testing framework.