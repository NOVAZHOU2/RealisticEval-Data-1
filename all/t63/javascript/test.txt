Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Code:
```python
import unittest
import pandas as pd

class TestDataframeToMarkdown(unittest.TestCase):
    def setUp(self):
        # Create a sample DataFrame
        self.data = {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}
        self.df = pd.DataFrame(self.data)

    def test_df_to_str(self):
        # Test that the function writes the correct markdown to a file
        expected_markdown = "| Name   |   Age |\n|:-------|------:|\n| Alice  |    25 |\n| Bob    |    30 |"
        result = dataframe_to_markdown(self.df, 'dummy_path.md')
        self.assertEqual(result, expected_markdown)

    def test_empty_dataframe(self):
        # Test how the function handles an empty DataFrame
        df_empty = pd.DataFrame()
        expected_markdown = ""
        result = dataframe_to_markdown(df_empty, 'dummy_path.md')
        self.assertEqual(result, expected_markdown)

    def test_single_row_dataframe(self):
        # Test with a DataFrame that contains only one row
        df_single_row = pd.DataFrame({'Name': ['Alice'], 'Age': [30]})
        expected_markdown = "| Name   |   Age |\n|:-------|------:|\n| Alice  |    30 |"
        result = dataframe_to_markdown(df_single_row, 'dummy_path.md')
        self.assertEqual(result, expected_markdown)

    def test_non_string_columns(self):
        # Test with non-string question types in the DataFrame
        df_non_string = pd.DataFrame({'Name': ['Alice', 'Bob'], 'Age': [25, 30], 'Height': [5.5, 6.0]})
        expected_markdown = ('| Name   |   Age |   Height |\n'
                             '|:-------|------:|---------:|\n'
                             '| Alice  |    25 |      5.5 |\n'
                             '| Bob    |    30 |      6   |')
        result = dataframe_to_markdown(df_non_string, 'dummy_path.md')
        self.assertEqual(result, expected_markdown)

    def test_special_characters(self):
        # Test handling of special characters in DataFrame
        df_special_chars = pd.DataFrame(
            {'Name': ['Alice', 'Bob'], 'Comments': ['Good@Work!', 'Excellent & Commendable']})
        expected_markdown = ('| Name   | Comments                |\n'
                             '|:-------|:------------------------|\n'
                             '| Alice  | Good@Work!              |\n'
                             '| Bob    | Excellent & Commendable |')
        result = dataframe_to_markdown(df_special_chars, 'dummy_path.md')
        self.assertEqual(result, expected_markdown)
```

### Equivalent Jest Test Suite:

```javascript
const { dataframeToMarkdown } = require('./dataframeToMarkdown'); // Import the function from your module

describe('TestDataframeToMarkdown', () => {
    beforeEach(() => {
        // Create a sample DataFrame
        this.data = [{ Name: 'Alice', Age: 25 }, { Name: 'Bob', Age: 30 }];
        this.df = this.data;
    });

    it('should write the correct markdown to a file', () => {
        const expectedMarkdown = "| Name   |   Age |\n|:-------|------:|\n| Alice  |    25 |\n| Bob    |    30 |";
        const result = dataframeToMarkdown(this.data, 'dummy_path.md');
        expect(result).toEqual(expectedMarkdown);
    });

    it('should handle an empty DataFrame correctly', () => {
        const dfEmpty = [];
        const expectedMarkdown = "";
        const result = dataframeToMarkdown(dfEmpty, 'dummy_path.md');
        expect(result).toEqual(expectedMarkdown);
    });

    it('should handle a single-row DataFrame correctly', () => {
        const dfSingleRow = [{ Name: 'Alice', Age: 30 }];
        const expectedMarkdown = "| Name   |   Age |\n|:-------|------:|\n| Alice  |    30 |";
        const result = dataframeToMarkdown(dfSingleRow, 'dummy_path.md');
        expect(result).toEqual(expectedMarkdown);
    });

    it('should handle non-string columns correctly', () => {
        const dfNonString = [{ Name: 'Alice', Age: 25, Height: 5.5 }, { Name: 'Bob', Age: 30, Height: 6.0 }];
        const expectedMarkdown = '| Name   |   Age |   Height |\n|:-------|------:|---------:|\n| Alice  |    25 |      5.5 |\n| Bob    |    30 |      6   |';
        const result = dataframeToMarkdown(dfNonString, 'dummy_path.md');
        expect(result).toEqual(expectedMarkdown);
    });

    it('should handle special characters in DataFrame correctly', () => {
        const dfSpecialChars = [{ Name: 'Alice', Comments: 'Good@Work!' }, { Name: 'Bob', Comments: 'Excellent & Commendable' }];
        const expectedMarkdown = '| Name   | Comments                |\n|:-------|:------------------------|\n| Alice  | Good@Work!              |\n| Bob    | Excellent & Commendable |';
        const result = dataframeToMarkdown(dfSpecialChars, 'dummy_path.md');
        expect(result).toEqual(expectedMarkdown);
    });
});
```

### Explanation:
1. **Import Function**: Ensure that the `dataframeToMarkdown` function is imported from the appropriate module.
2. **Before Each Hook (`beforeEach`)**: Sets up the initial data for each test case.
3. **Test Cases**:
   - Each test case is defined using `it` blocks.
   - Assertions are made using `expect` and `toEqual`.
4. **Data Structure**: In JavaScript, we use an array of objects to represent the DataFrame, similar to how Pandas DataFrames are structured in Python.
5. **Assertions**: The `toEqual` matcher is used to compare the expected and actual Markdown strings.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.