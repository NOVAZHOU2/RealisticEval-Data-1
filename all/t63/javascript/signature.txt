Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Converts a DataFrame object to a table in Markdown format.
 * 
 * Example:
 *   Input: dataframe {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}
 *   Output: 
 *   ```
 *   | Name | Age |
 *   | --- | --- |
 *   | Alice | 25 |
 *   | Bob | 30 |
 *   ```
 *
 * @param {Array<Object>} data - An array of objects representing the DataFrame rows.
 * @param {string} mdPath - The output Markdown file path.
 * @returns {string} The Markdown file content.
 */
function dataframeToMarkdown(data, mdPath) {
    // Construct the header row
    const headers = "| " + Object.keys(data[0]).join(" | ") + " |\n";

    // Construct the separator row
    const separators = "| " + ("--- | ".repeat(Object.keys(data[0]).length)).slice(0, -3) + " |\n";

    // Combine headers and separators
    let markdown = headers + separators;

    // Build markdown table body
    data.forEach(row => {
        markdown += "| " + Object.values(row).map(value => String(value)).join(" | ") + " |\n";
    });

    // Write markdown to file
    fs.writeFile(mdPath, markdown, (err) => {
        if (err) throw err;
        console.log(`Markdown table has been written to ${mdPath}`);
    });

    return markdown;
}

// Example usage:
const exampleData = [
    { Name: 'Alice', Age: 25 },
    { Name: 'Bob', Age: 30 }
];
const outputPath = './output.md';

dataframeToMarkdown(exampleData, outputPath);
```

### Explanation:
1. **JSDoc Comments**:
   - The function is documented using JSDoc comments.
   - The example is included in the JSDoc comment block.
   - The parameters and return types are documented.

2. **Function Signature**:
   - The function `dataframeToMarkdown` takes two parameters: `data` (an array of objects representing the DataFrame rows) and `mdPath` (the output Markdown file path).

3. **Markdown Construction**:
   - The header row is constructed by joining the keys of the first object in the `data` array.
   - The separator row uses `---` repeated for each column.
   - The Markdown table body is built by iterating over each row and converting it to a string line.

4. **File Writing**:
   - The `fs.writeFile` method is used to write the generated Markdown content to a file specified by `mdPath`.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JSDoc documentation standards.