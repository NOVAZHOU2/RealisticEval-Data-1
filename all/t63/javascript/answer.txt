Certainly! Below is the equivalent JavaScript code that replicates the functionality of the provided Python function. This function will convert a DataFrame-like structure (represented as an array of objects) into a Markdown table and write it to a file.

```javascript
const fs = require('fs');

function dataframeToMarkdown(data, mdPath) {
    // Construct the header row
    const headers = "| " + Object.keys(data[0]).join(" | ") + " |\n";
    
    // Construct the separator row
    const separators = "| " + ("--- | ".repeat(Object.keys(data[0]).length)).slice(0, -3) + " |\n";
    
    // Combine headers and separators
    let markdown = headers + separators;

    // Build markdown table body
    data.forEach(row => {
        markdown += "| " + Object.values(row).map(value => String(value)).join(" | ") + " |\n";
    });

    // Write markdown to file
    fs.writeFile(mdPath, markdown, (err) => {
        if (err) throw err;
        console.log(`Markdown table has been written to ${mdPath}`);
    });

    return markdown;
}

// Example usage:
const exampleData = [
    { Column1: 'Value1', Column2: 'Value2' },
    { Column1: 'Value3', Column2: 'Value4' }
];
const outputPath = './output.md';

dataframeToMarkdown(exampleData, outputPath);
```

### Explanation:
1. **Header Row**: The header row is constructed by joining the keys of the first object in the `data` array.
2. **Separator Row**: The separator row uses `---` repeated for each column.
3. **Markdown Table Body**: Each row in the `data` array is converted to a string line in the Markdown table.
4. **File Writing**: The `fs.writeFile` method is used to write the generated Markdown content to a file specified by `mdPath`.

This JavaScript function assumes that the input `data` is an array of objects where each object represents a row in the DataFrame, and the keys of the objects represent the column names.