Certainly! Below is the equivalent Java test class using JUnit for the provided Python unittest class. The Java test class is placed in the package `org.real.temp` and named `Tester`.

### Java Code:

```java
package org.real.temp;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;

/**
 * Test class for the processCsv function.
 */
public class Tester {

    private String input_data_1 = "A,B,C\n1,2,3\n4,,6\n7,8,\n9,10,11";
    private String input_data_2 = "A,B,C,D\n,,\n1,,3,4\n2,3,,5\n,,,\n";
    private String input_data_3 = "A\n1\n2\n3";

    private String inputFilePath = "input.csv";
    private String outputFilePath = "output.csv";

    @Before
    public void setUp() throws IOException {
        // Write input data to a temporary CSV file
        Files.write(Paths.get(inputFilePath), input_data_1.getBytes());
    }

    @After
    public void tearDown() throws IOException {
        // Clean up temp files
        Files.deleteIfExists(Paths.get(inputFilePath));
        Files.deleteIfExists(Paths.get(outputFilePath));
    }

    private String processData(String input_data) throws IOException {
        // Write input data to a temp CSV file
        Files.write(Paths.get(inputFilePath), input_data.getBytes());

        // Process the CSV
        processCsv(inputFilePath, outputFilePath);

        // Read the output
        String output_data = new String(Files.readAllBytes(Paths.get(outputFilePath)));

        // Clean up temp files
        Files.deleteIfExists(Paths.get(inputFilePath));
        Files.deleteIfExists(Paths.get(outputFilePath));

        return output_data;
    }

    @Test
    public void testCase1() throws IOException {
        String output = processData(input_data_1);
        String expectedOutput = "A,B,C\n1,2.0,3.0\n4,,6.0\n7,8.0,\n9,10.0,11.0\n";
        assertEquals(expectedOutput, output);
    }

    @Test
    public void testCase2() throws IOException {
        String output = processData(input_data_2);
        String expectedOutput = "A,B,C,D\n1.0,,3.0,4.0\n2.0,3.0,,5.0\n";
        assertEquals(expectedOutput, output);
    }

    @Test
    public void testCase3() throws IOException {
        String output = processData(input_data_3);
        String expectedOutput = "A\n1\n2\n3\n";  // Single-column CSV should remain unchanged
        assertEquals(expectedOutput, output);
    }

    /**
     * Processes a CSV file and removes rows with two or more empty columns.
     *
     * @param filePath The path to the input CSV file.
     * @param outputPath The path where the processed CSV file will be saved.
     */
    private static void processCsv(String filePath, String outputPath) {
        try (Reader reader = new FileReader(filePath);
             CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withFirstRecordAsHeader());
             Writer writer = new FileWriter(outputPath);
             CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT)) {

            List<CSVRecord> records = new ArrayList<>();
            for (CSVRecord record : csvParser) {
                int emptyCount = 0;
                for (String value : record) {
                    if (value == null || value.trim().isEmpty()) {
                        emptyCount++;
                    }
                }

                // Filter the records to keep only those with less than 2 empty columns
                if (emptyCount < 2) {
                    records.add(record);
                }
            }

            // Write the filtered records to the output CSV file
            for (CSVRecord record : records) {
                csvPrinter.printRecord(record);
            }

        } catch (IOException e) {
            System.err.println("Error processing the CSV file: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("An unexpected error occurred: " + e.getMessage());
        }
    }
}
```

### Key Points:
1. **JUnit Annotations**: The `@Before` and `@After` annotations are used for setup and teardown operations.
2. **JUnit Assertions**: The `assertEquals` method is used for assertions.
3. **File Operations**: File operations are performed using `Files.write` and `Files.readAllBytes` for writing and reading files.
4. **ProcessCsv Function**: The `processCsv` function is included within the test class for completeness.

### Dependencies:
To use this code, you need to include the Apache Commons CSV library and JUnit in your project. You can add them via Maven or Gradle:

#### Maven Dependencies:
```xml
<dependencies>
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-csv</artifactId>
        <version>1.8</version>
    </dependency>
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.13.2</version>
        <scope>test</scope>
    </dependency>
</dependencies>
```

#### Gradle Dependencies:
```groovy
dependencies {
    implementation 'org.apache.commons:commons-csv:1.8'
    testImplementation 'junit:junit:4.13.2'
}
```

This setup ensures that the functionality and logic of the tests are preserved while adhering to Java's syntax and best practices.