Sure! Below is the equivalent TypeScript test case using Jest for the given Python unittest test class. Note that I'll assume some basic functionality for `process_csv` based on your description. If you have additional details or specific requirements, please let me know!

```typescript
import { readFileSync, writeFileSync } from 'fs';
import * as csv from 'csv-parser';

// Assuming the function process_csv is defined somewhere in your project
// For example:
function processCsv(file_path: string, output_path: string) {
    // Implementation of process_csv goes here
}

describe('processCsv', () => {
    it('should remove rows with two or more empty columns', () => {
        const inputFilePath = 'path/to/input.csv';
        const outputFilePath = 'path/to/output.csv';

        // Sample input data
        const inputData = `
id,name,email,age
1,Alice,,25
2,Bob,bob@example.com,
3,,charlie@example.com,30
4,David,david@example.com,35
`;

        // Write sample input data to a temporary file
        writeFileSync(inputFilePath, inputData);

        // Call the function under test
        processCsv(inputFilePath, outputFilePath);

        // Read the output file
        const outputFileData = readFileSync(outputFilePath, 'utf8');

        // Expected output data after processing
        const expectedOutputData = `
id,name,email,age
2,Bob,bob@example.com,
4,David,david@example.com,35
`;

        // Check if the output matches the expected data
        expect(outputFileData.trim()).toBe(expectedOutputData.trim());
    });

    it('should handle an empty input file gracefully', () => {
        const inputFilePath = 'path/to/empty_input.csv';
        const outputFilePath = 'path/to/empty_output.csv';

        // Create an empty input file
        writeFileSync(inputFilePath, '');

        // Call the function under test
        processCsv(inputFilePath, outputFilePath);

        // Check if the output file is empty
        const outputFileData = readFileSync(outputFilePath, 'utf8');
        expect(outputFileData).toBe('');
    });
});
```

### Explanation:
1. **Imports**: We import necessary modules like `fs` for file operations and `csv-parser` for handling CSV files.
2. **Function Mocking**: We assume `processCsv` is defined elsewhere in your project. If not, you need to implement it or mock it appropriately.
3. **Test Cases**:
   - **First Test Case**: This tests the scenario where there are rows with two or more empty columns. It writes a sample input file, calls `processCsv`, reads the output file, and checks if it matches the expected result.
   - **Second Test Case**: This tests the scenario where the input file is empty. It creates an empty input file, calls `processCsv`, and checks if the output file is also empty.

Make sure to adjust the file paths and data according to your actual implementation and testing environment.