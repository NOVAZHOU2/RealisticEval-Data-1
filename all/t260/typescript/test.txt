Certainly! Below is the equivalent TypeScript test class using Jest. The test cases and logic are preserved, and the necessary type annotations and Jest assertions are included.

### TypeScript Code

First, ensure you have the necessary dependencies installed:

```sh
npm install jest ts-jest @types/jest
```

Add the necessary Jest configuration to your `tsconfig.json` or `jest.config.js`:

```json
{
  "preset": "ts-jest",
  "testEnvironment": "node"
}
```

### TypeScript Test Class

```typescript
import { processCsv } from './your_module'; // Import the processCsv function
import { readFileSync, writeFileSync, unlinkSync } from 'fs';
import { join } from 'path';

describe('TestProcessCSV', () => {
  let input_data_1: string;
  let input_data_2: string;
  let input_data_3: string;

  beforeEach(() => {
    input_data_1 = `A,B,C
1,2,3
4,,6
7,8,
9,10,11`;

    input_data_2 = `A,B,C,D
,,
1,,3,4
2,3,,5
,,,`;

    input_data_3 = `A
1
2
3`;
  });

  const process_data = (input_data: string): string => {
    const inputFilePath = 'input.csv';
    const outputFilePath = 'output.csv';

    // Write input data to a temp CSV file
    writeFileSync(inputFilePath, input_data);

    // Process the CSV
    processCsv(inputFilePath, outputFilePath);

    // Read the output
    const outputData = readFileSync(outputFilePath, 'utf8');

    // Clean up temp files
    unlinkSync(inputFilePath);
    unlinkSync(outputFilePath);

    return outputData;
  };

  it('should correctly process input_data_1', () => {
    const output = process_data(input_data_1);
    const expectedOutput = `A,B,C\n1,2.0,3.0\n4,,6.0\n7,8.0,\n9,10.0,11.0\n`;
    expect(output).toEqual(expectedOutput);
  });

  it('should correctly process input_data_2', () => {
    const output = process_data(input_data_2);
    const expectedOutput = `A,B,C,D\n1.0,,3.0,4.0\n2.0,3.0,,5.0\n`;
    expect(output).toEqual(expectedOutput);
  });

  it('should correctly process input_data_3', () => {
    const output = process_data(input_data_3);
    const expectedOutput = `A\n1\n2\n3\n`; // Single-column CSV should remain unchanged
    expect(output).toEqual(expectedOutput);
  });
});
```

### Explanation:
1. **Imports**:
   - `processCsv` from the module where it is defined.
   - `readFileSync`, `writeFileSync`, and `unlinkSync` from the `fs` module for file operations.
   - `join` from the `path` module (not used in this example but can be useful for path manipulation).

2. **Test Suite**:
   - `describe` block sets up the test suite named `TestProcessCSV`.

3. **Before Each Hook**:
   - `beforeEach` hook initializes the input data for each test case.

4. **Helper Function**:
   - `process_data` function reads the input data, writes it to a temporary CSV file, processes the CSV, reads the output, and cleans up the temporary files.

5. **Test Cases**:
   - Each `it` block represents a test case.
   - `expect` assertions are used to verify the output against the expected output.

This TypeScript code preserves the original functionality and logic of the Python unittest test class while adapting to Jest's testing framework and TypeScript's static type system.