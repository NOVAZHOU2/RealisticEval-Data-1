Certainly! Below is the equivalent TypeScript code for processing a CSV file and removing rows with two or more empty columns. This code uses the `csv-parser` and `csv-writer` libraries to handle CSV reading and writing, as itâ€™s not possible to directly use Pandas in TypeScript. 

First, you need to install the required dependencies:

```sh
npm install csv-parser csv-writer fs path
```

Here is the TypeScript code:

```typescript
import * as fs from 'fs';
import * as createCsvParser from 'csv-parser';
import * as createCsvWriter from 'csv-writer';
import { parse } from 'path';

interface Row {
    [key: string]: string | null;
}

function processCsv(file_path: string, output_path: string): void {
    const results: Row[] = [];

    // Read the CSV file and store the rows
    fs.createReadStream(file_path)
        .pipe(createCsvParser())
        .on('data', (row: Row) => {
            results.push(row);
        })
        .on('end', () => {
            // Process the rows
            const filteredResults = results.filter((row) => {
                const emptyCount = Object.values(row).filter(value => value === '').length;
                return emptyCount < 2;
            });

            // Write the processed rows back to a new CSV file
            const csvWriter = createCsvWriter.createObjectCsvWriter({
                path: output_path,
                header: Object.keys(results[0]).map(key => ({ id: key, title: key })),
            });

            csvWriter.writeRecords(filteredResults)
                .then(() => console.log('CSV file was written successfully'))
                .catch(error => console.error('Error writing CSV file:', error));
        });
}

// Error handling functions
function handleEmptyDataError(outputPath: string): void {
    fs.writeFileSync(outputPath, '');
}

function handleParserError(): void {
    console.error("Error: The input CSV has inconsistent row lengths. Please check the input data.");
}

try {
    processCsv('input.csv', 'output.csv');
} catch (error) {
    if (error instanceof SyntaxError || error instanceof TypeError) {
        handleParserError();
    } else if (error instanceof fs.Error && error.code === 'ENOENT') {
        handleEmptyDataError('output.csv');
    } else {
        throw error; // Re-throw other unexpected errors
    }
}
```

### Explanation:
1. **Dependencies**: We use `csv-parser` for reading CSV files and `csv-writer` for writing CSV files.
2. **Row Interface**: We define a generic interface `Row` to represent the structure of a CSV row.
3. **Reading CSV**: We read the CSV file using `fs.createReadStream` and `csv-parser`.
4. **Filtering Rows**: We filter the rows based on the number of empty columns.
5. **Writing CSV**: We write the filtered rows back to a new CSV file using `csv-writer`.
6. **Error Handling**: We handle specific errors such as empty data and parsing errors.

This TypeScript code replicates the functionality of the Python script while adapting to TypeScript's static type system and using appropriate libraries for CSV processing.