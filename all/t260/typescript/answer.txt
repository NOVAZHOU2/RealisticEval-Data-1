Sure! Below is the equivalent TypeScript code for your Python function `process_csv`. This TypeScript code uses the `pandas` library, which you can install using npm (`npm install pandas`). Note that TypeScript does not have built-in support for reading and writing CSV files in the same way Python does, so we'll use Node.js's built-in `fs` module to handle file operations.

```typescript
import * as fs from 'fs';
import * as pandas as pd;

async function processCsv(filePath: string, outputPath: string): Promise<void> {
    try {
        // Read the CSV file
        const data = await fs.promises.readFile(filePath, 'utf8');
        
        // Convert the CSV data to a DataFrame
        const df = pd.DataFrame(data);

        // Remove rows with two or more empty columns
        const cleanedDf = df.dropna(thresh=1);

        // Check if the DataFrame is empty
        if (cleanedDf.isEmpty()) {
            fs.writeFileSync(outputPath, '');
            return;
        }

        // Convert the DataFrame back to CSV format
        const csvData = cleanedDf.toCSV();

        // Write the processed CSV data to the output file
        fs.writeFileSync(outputPath, csvData);
    } catch (error) {
        console.error('Error processing CSV:', error);
    }
}

// Example usage:
const filePath = 'input.csv';
const outputPath = 'output.csv';

processCsv(filePath, outputPath)
    .then(() => console.log('CSV processed successfully'))
    .catch(error => console.error('Error processing CSV:', error));
```

### Explanation:
1. **Reading the CSV File**: We use `fs.promises.readFile` to read the CSV file asynchronously.
2. **Converting to DataFrame**: We convert the CSV data into a `DataFrame` using `pd.DataFrame`.
3. **Removing Rows with Empty Columns**: We use `df.dropna(thresh=1)` to remove rows with one or more empty columns. If you want to remove rows with exactly two or more empty columns, you can adjust the threshold accordingly.
4. **Checking if DataFrame is Empty**: If the cleaned DataFrame is empty, we write an empty string to the output file.
5. **Writing to Output File**: We convert the cleaned DataFrame back to CSV format and write it to the specified output file using `fs.writeFileSync`.

Make sure to install the required dependencies by running `npm install pandas`. Also, ensure that you have Node.js installed on your system to run this TypeScript code.