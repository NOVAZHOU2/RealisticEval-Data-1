Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The test cases and setup logic are preserved, and appropriate assertions are used to verify the correctness of the `process_csv` function.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed. You can include it in your project by adding the Catch2 headers and ensuring your build system includes the necessary headers and dependencies.

```cpp
#include <catch2/catch_test_macros.hpp>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <stdexcept>
#include <filesystem>

namespace fs = std::filesystem;

// Function to split a string by a delimiter
std::vector<std::string> split(const std::string &s, char delimiter) {
    std::vector<std::string> tokens;
    std::string token;
    std::istringstream tokenStream(s);
    while (std::getline(tokenStream, token, delimiter)) {
        tokens.push_back(token);
    }
    return tokens;
}

// Function to count empty strings in a vector
int countEmpty(const std::vector<std::string> &row) {
    int count = 0;
    for (const auto &item : row) {
        if (item.empty()) {
            ++count;
        }
    }
    return count;
}

// Function to process a CSV file and remove rows with two or more empty columns
void process_csv(const std::string &file_path, const std::string &output_path) {
    try {
        std::ifstream input_file(file_path);
        if (!input_file.is_open()) {
            throw std::runtime_error("Failed to open input file.");
        }

        std::ofstream output_file(output_path);
        if (!output_file.is_open()) {
            throw std::runtime_error("Failed to open output file.");
        }

        std::string line;
        std::vector<std::string> header;

        // Read the CSV file line by line
        while (std::getline(input_file, line)) {
            if (header.empty()) {
                header = split(line, ',');
                output_file << line << '\n';
                continue;
            }

            std::vector<std::string> row = split(line, ',');
            int empty_count = countEmpty(row);

            // Filter the row based on the number of empty columns
            if (empty_count < 2) {
                output_file << line << '\n';
            }
        }

        input_file.close();
        output_file.close();

    } catch (const std::exception &e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }
}

TEST_CASE("TestProcessCSV", "[process_csv]") {
    SECTION("Test Case 1") {
        const std::string input_data_1 = R"(
A,B,C
1,2,3
4,,6
7,8,
9,10,11
)";

        const std::string input_file_path = "input.csv";
        const std::string output_file_path = "output.csv";

        // Write input data to a temp CSV file
        std::ofstream input_file(input_file_path);
        input_file << input_data_1;
        input_file.close();

        // Process the CSV
        process_csv(input_file_path, output_file_path);

        // Read the output
        std::ifstream output_file(output_file_path);
        std::stringstream output_stream;
        output_stream << output_file.rdbuf();
        std::string output_data = output_stream.str();
        output_file.close();

        // Clean up temp files
        fs::remove(input_file_path);
        fs::remove(output_file_path);

        const std::string expected_output = R"(
A,B,C
1,2.0,3.0
4,,6.0
7,8.0,
9,10.0,11.0
)";

        REQUIRE(output_data == expected_output);
    }

    SECTION("Test Case 2") {
        const std::string input_data_2 = R"(
A,B,C,D
,,
1,,3,4
2,3,,5
,,,
)";

        const std::string input_file_path = "input.csv";
        const std::string output_file_path = "output.csv";

        // Write input data to a temp CSV file
        std::ofstream input_file(input_file_path);
        input_file << input_data_2;
        input_file.close();

        // Process the CSV
        process_csv(input_file_path, output_file_path);

        // Read the output
        std::ifstream output_file(output_file_path);
        std::stringstream output_stream;
        output_stream << output_file.rdbuf();
        std::string output_data = output_stream.str();
        output_file.close();

        // Clean up temp files
        fs::remove(input_file_path);
        fs::remove(output_file_path);

        const std::string expected_output = R"(
A,B,C,D
1.0,,3.0,4.0
2.0,3.0,,5.0
)";

        REQUIRE(output_data == expected_output);
    }

    SECTION("Test Case 3") {
        const std::string input_data_3 = R"(
A
1
2
3
)";

        const std::string input_file_path = "input.csv";
        const std::string output_file_path = "output.csv";

        // Write input data to a temp CSV file
        std::ofstream input_file(input_file_path);
        input_file << input_data_3;
        input_file.close();

        // Process the CSV
        process_csv(input_file_path, output_file_path);

        // Read the output
        std::ifstream output_file(output_file_path);
        std::stringstream output_stream;
        output_stream << output_file.rdbuf();
        std::string output_data = output_stream.str();
        output_file.close();

        // Clean up temp files
        fs::remove(input_file_path);
        fs::remove(output_file_path);

        const std::string expected_output = R"(
A
1
2
3
)";

        REQUIRE(output_data == expected_output);
    }
}
```

### Explanation:
1. **Catch2 Setup**: The `Catch2` headers are included at the beginning.
2. **Test Cases**: Each test case is defined within a `SECTION` in the `TEST_CASE` macro.
3. **Input Data**: Input data is written to a temporary CSV file.
4. **Processing**: The `process_csv` function is called to process the CSV file.
5. **Output Verification**: The output is read from the processed CSV file and compared against the expected output.
6. **File Cleanup**: Temporary files are removed after the test to clean up the environment.
7. **Assertions**: `REQUIRE` is used to assert the equality of the output data with the expected output.

This code ensures that the functionality and logic of the Python test cases are preserved in C++ using the Catch2 testing framework.