Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the functionality and logic of the tests while adapting them to Jest's syntax and conventions.

### Python Code

```python
import unittest
import pandas as pd
from io import StringIO
import os

# Assuming process_csv function is imported from the module
# from your_module import process_csv

class TestProcessCSV(unittest.TestCase):

    def setUp(self):
        self.input_data_1 = """A,B,C
1,2,3
4,,6
7,8,
9,10,11"""

        self.input_data_2 = """A,B,C,D
,,
1,,3,4
2,3,,5
,,,"""

        self.input_data_3 = """A
1
2
3"""

    def process_data(self, input_data):
        input_file = StringIO(input_data)
        output_file = StringIO()
        input_file_path = "input.csv"
        output_file_path = "output.csv"

        # Write input data to a temp CSV file
        with open(input_file_path, 'w') as f:
            f.write(input_data)

        # Process the CSV
        process_csv(input_file_path, output_file_path)

        # Read the output
        with open(output_file_path, 'r') as f:
            output_data = f.read()

        # Clean up temp files
        os.remove(input_file_path)
        os.remove(output_file_path)

        return output_data

    def test_case_1(self):
        output = self.process_data(self.input_data_1)
        expected_output = """A,B,C\n1,2.0,3.0\n4,,6.0\n7,8.0,\n9,10.0,11.0\n"""
        self.assertEqual(output, expected_output)

    def test_case_2(self):
        output = self.process_data(self.input_data_2)
        expected_output = """A,B,C,D\n1.0,,3.0,4.0\n2.0,3.0,,5.0\n"""
        self.assertEqual(output, expected_output)

    def test_case_3(self):
        output = self.process_data(self.input_data_3)
        expected_output = """A\n1\n2\n3\n"""  # Single-column CSV should remain unchanged
        self.assertEqual(output, expected_output)
```

### Equivalent Jest Test Suite

```javascript
const fs = require('fs');
const os = require('os');
const path = require('path');
const processCSV = require('./your_module'); // Import the processCSV function

describe('TestProcessCSV', () => {
    let input_data_1 = `A,B,C
1,2,3
4,,6
7,8,
9,10,11`;

    let input_data_2 = `A,B,C,D
,,
1,,3,4
2,3,,5
,,,`;

    let input_data_3 = `A
1
2
3`;

    beforeEach(() => {
        // Temporary directory for test files
        const tempDir = os.tmpdir();
        const inputFilePath = path.join(tempDir, 'input.csv');
        const outputFilePath = path.join(tempDir, 'output.csv');

        // Helper function to process data
        const process_data = (input_data) => {
            // Write input data to a temp CSV file
            fs.writeFileSync(inputFilePath, input_data);

            // Process the CSV
            processCSV(inputFilePath, outputFilePath);

            // Read the output
            const output_data = fs.readFileSync(outputFilePath, 'utf8');

            // Clean up temp files
            fs.unlinkSync(inputFilePath);
            fs.unlinkSync(outputFilePath);

            return output_data;
        };

        // Test cases
        test('test_case_1', async () => {
            const output = process_data(input_data_1);
            const expected_output = `A,B,C\n1,2.0,3.0\n4,,6.0\n7,8.0,\n9,10.0,11.0\n`;
            expect(output).toEqual(expected_output);
        });

        test('test_case_2', async () => {
            const output = process_data(input_data_2);
            const expected_output = `A,B,C,D\n1.0,,3.0,4.0\n2.0,3.0,,5.0\n`;
            expect(output).toEqual(expected_output);
        });

        test('test_case_3', async () => {
            const output = process_data(input_data_3);
            const expected_output = `A\n1\n2\n3\n`; // Single-column CSV should remain unchanged
            expect(output).toEqual(expected_output);
        });
    });
});
```

### Explanation:
1. **Imports**:
   - Import necessary modules like `fs`, `os`, and `path`.
   - Import the `processCSV` function from the relevant module.

2. **Test Suite**:
   - Use `describe` to define the test suite.
   - Use `beforeEach` to set up the test environment and define helper functions.

3. **Helper Function `process_data`**:
   - This function writes the input data to a temporary CSV file, processes the CSV using `processCSV`, reads the output, and cleans up the temporary files.

4. **Test Cases**:
   - Each test case uses `test` to define the test scenario.
   - Assertions are made using `expect` to compare the actual output with the expected output.

5. **Temporary Files**:
   - Use `os.tmpdir()` to get a temporary directory for creating and cleaning up test files.

6. **File Operations**:
   - Use `fs.writeFileSync` and `fs.readFileSync` to write and read files.
   - Use `fs.unlinkSync` to remove temporary files.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.