Here's how you can convert your Python unittest test class to a Java JUnit test case:

```java
package org.real.temp;

import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class Tester {

    @Test
    public void testWrapContentGenerator() {
        String content = "This is a long string that needs to be wrapped to a specific width.";
        int width = 80;
        // Assuming you have an implementation for wrapContentGenerator method in Java
        // Replace the following with your actual implementation
        List<String> result = wrapContentGenerator(content, width);

        // Check if each line does not exceed the specified width
        for (String line : result) {
            assertEquals("Line length should not exceed " + width, width, line.length());
        }

        // Check if all lines combined form the original content
        StringBuilder sb = new StringBuilder();
        for (String line : result) {
            sb.append(line);
        }
        assertEquals("All lines combined should form the original content", content, sb.toString());
    }

    // Implement the wrapContentGenerator method here
    private List<String> wrapContentGenerator(String content, int width) {
        // Your implementation goes here
        return Collections.emptyList(); // Placeholder return value
    }
}
```

Please note that I've added a placeholder implementation for `wrapContentGenerator` method. You need to replace it with your actual implementation. Also, I've used JUnit's `assertEquals` method to check the conditions mentioned in your Python test code.