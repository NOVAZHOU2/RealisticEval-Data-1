Sure! I'll convert the given Python code into JavaScript while maintaining the functionality, logic, and structure as closely as possible.

Here's the equivalent JavaScript code:

```javascript
function* wrapContentGenerator(content, width = 80) {
    /**
     * Wrap the text content to the specified maximum width and generate these lines line by line.
     *
     * @param {string} content - The content to be wrapped and yielded line by line.
     * @param {number} width - The maximum width of the lines, default is 80 characters.
     *
     * @yields {string} Each line of the content wrapped to the specified width.
     */
    const lines = content.split('\n');

    for (const line of lines) {
        if (line.trim() === '') {  // Check if the line is essentially empty.
            yield '\n';
        } else {
            let currentLine = '';
            for (let i = 0; i < line.length; i++) {
                if (currentLine.length + line[i].length > width) {
                    yield currentLine;
                    currentLine = line[i];
                } else {
                    currentLine += line[i];
                }
            }
            if (currentLine !== '') {
                yield currentLine;
            }
        }
    }
}

// Example usage
const generator = wrapContentGenerator("This is a very long line of text that needs to be wrapped to fit within a certain width.", 40);

for (let line of generator) {
    console.log(line);
}
```

### Explanation:
1. **Function Definition**: The `wrapContentGenerator` function is defined using the `function*` syntax to make it a generator function.
2. **Splitting Content**: The input `content` is split into lines using `\n` as the delimiter.
3. **Empty Line Check**: If a line is empty after trimming, it yields a newline character (`\n`).
4. **Wrapping Logic**: For non-empty lines, the function iterates through each character and checks if adding the next character would exceed the specified width. If so, it yields the current line and starts a new one.
5. **Yielding Lines**: After processing all characters, if there is any remaining text in `currentLine`, it yields that as well.

This JavaScript code should provide similar functionality to the original Python code.