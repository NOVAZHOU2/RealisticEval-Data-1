Sure! Below is the equivalent JavaScript test case using Jest for the given Python unittest test class. Note that I've assumed some basic functionality for `wrapContentGenerator` since it's not provided in your original Python code.

Here's how you can write the Jest test cases:

```javascript
// Assuming the function wrapContentGenerator is defined somewhere in your codebase
const { wrapContentGenerator } = require('./path-to-your-module'); // Adjust the path accordingly

describe('wrapContentGenerator', () => {
  it('should wrap content to the specified maximum width', () => {
    const content = 'This is a long string that should be wrapped to the specified maximum width.';
    const expectedLines = [
      'This is a long string',
      'that should be wrapped',
      'to the specified',
      'maximum width.'
    ];

    const result = Array.from(wrapContentGenerator(content, 25));

    expect(result).toEqual(expectedLines);
  });

  it('should handle empty content', () => {
    const content = '';
    const expectedLines = [];

    const result = Array.from(wrapContentGenerator(content, 80));

    expect(result).toEqual(expectedLines);
  });

  it('should handle content with no spaces', () => {
    const content = 'abcdefghijklmnopqrstuvwxyz';
    const expectedLines = ['abcdefghij', 'klmnopqrst', 'uvwxyz'];

    const result = Array.from(wrapContentGenerator(content, 10));

    expect(result).toEqual(expectedLines);
  });
});
```

### Explanation:
1. **Importing the Function**: Replace `'./path-to-your-module'` with the actual path where your `wrapContentGenerator` function is located.
2. **Describe Block**: This block groups related tests together.
3. **It Blocks**: These blocks define individual test cases.
4. **Expectations**: These assertions check if the output of `wrapContentGenerator` matches the expected results.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```bash
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run your tests using:

```bash
npx jest
# or
yarn jest
```

This will execute all the test cases in your Jest configuration.