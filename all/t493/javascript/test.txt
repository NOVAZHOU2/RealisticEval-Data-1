Certainly! I will convert the given Python `unittest` test class into an equivalent Jest test suite, ensuring that the functionality and logic of the tests are maintained. I will also document any necessary changes due to language differences between Python and JavaScript.

Here is the equivalent Jest test suite:

```javascript
const wrapContentGenerator = require('./wrapContentGenerator'); // Import the generator function

describe('TestWrapContentGenerator', () => {
    it('test_empty_content', () => {
        /** Test with empty content. */
        const result = [...wrapContentGenerator("")];
        expect(result).toEqual([]);
    });

    it('test_single_line_content', () => {
        /** Test with a single line of content within default width. */
        const result = [...wrapContentGenerator("Hello, world!")];
        expect(result).toEqual(["Hello, world!"]);
    });

    it('test_multi_line_content', () => {
        /** Test with multiple lines of content each fitting within default width. */
        const content = "Hello\nWorld\nPython";
        const result = [...wrapContentGenerator(content)];
        expect(result).toEqual(["Hello", "World", "Python"]);
    });

    it('test_long_line', () => {
        /** Test with a single long line that exceeds the default width. */
        const content = "This is a very long line that should definitely be wrapped around the default width of 80 characters.";
        const result = [...wrapContentGenerator(content)];
        const longestLine = result.reduce((a, b) => a.length > b.length ? a : b, '');
        expect(longestLine.length).toBeLessThanOrEqual(80);
    });

    it('test_custom_width', () => {
        /** Test with a custom width. */
        const content = "This is a test for custom width setting.";
        const result = [...wrapContentGenerator(content, 10)];
        expect(result.every(line => line.length <= 10)).toBeTruthy();
    });

    it('test_only_whitespaces', () => {
        /** Test content that contains only whitespace characters. */
        const result = [...wrapContentGenerator("     ")];
        expect(result).toEqual(["\n"]);
    });
});

// Example implementation of wrapContentGenerator (for demonstration purposes)
function* wrapContentGenerator(content, width = 80) {
    const lines = content.split('\n');

    for (const line of lines) {
        if (line.trim() === '') {  // Check if the line is essentially empty.
            yield '\n';
        } else {
            let currentLine = '';
            for (let i = 0; i < line.length; i++) {
                if (currentLine.length + line[i].length > width) {
                    yield currentLine;
                    currentLine = line[i];
                } else {
                    currentLine += line[i];
                }
            }
            if (currentLine !== '') {
                yield currentLine;
            }
        }
    }
}

// Export the generator function for testing
module.exports = wrapContentGenerator;
```

### Explanation:
1. **Importing the Generator Function**:
   - The `wrapContentGenerator` function is imported from a separate file (assuming it is defined elsewhere).

2. **Describe Block**:
   - The `describe` block is used to group the tests under a common name.

3. **It Blocks**:
   - Each `it` block represents a specific test case.
   - The test descriptions are included as comments within the `it` blocks.

4. **Assertions**:
   - `expect(result).toEqual([])` is used to check if the result is an empty array.
   - `expect(result).toEqual(["Hello, world!"])` is used to check if the result matches the expected array.
   - `expect(longestLine.length).toBeLessThanOrEqual(80)` is used to check if the length of the longest line is less than or equal to 80.
   - `expect(result.every(line => line.length <= 10)).toBeTruthy()` is used to check if every line has a length less than or equal to 10.
   - `expect(result).toEqual(["\n"])` is used to check if the result is an array containing a single newline character.

5. **Generator Function Implementation**:
   - The `wrapContentGenerator` function is implemented and exported for testing purposes.

This Jest test suite maintains the functionality and logic of the original Python unittest test class while adapting to JavaScript and Jest conventions.