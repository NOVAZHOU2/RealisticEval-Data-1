Certainly! I will convert the given Python function signature and comments into equivalent JavaScript syntax, including proper JSDoc formatting for documentation.

Hereâ€™s the converted JavaScript code:

```javascript
/**
 * Wrap the text content to the specified maximum width and generate these lines line by line.
 *
 * @param {string} content - The content to be wrapped and yielded line by line.
 * @param {number} [width=80] - The maximum width of the lines, default is 80 characters.
 *
 * @yields {string} Each line of the content wrapped to the specified width.
 */
function* wrapContentGenerator(content, width = 80) {
    const lines = content.split('\n');

    for (const line of lines) {
        if (line.trim() === '') {  // Check if the line is essentially empty.
            yield '\n';
        } else {
            let currentLine = '';
            for (let i = 0; i < line.length; i++) {
                if (currentLine.length + line[i].length > width) {
                    yield currentLine;
                    currentLine = line[i];
                } else {
                    currentLine += line[i];
                }
            }
            if (currentLine !== '') {
                yield currentLine;
            }
        }
    }
}

// Example usage
const generator = wrapContentGenerator("This is a very long line of text that needs to be wrapped to fit within a certain width.", 40);

for (let line of generator) {
    console.log(line);
}
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comment block is placed at the beginning of the function definition.
   - The `@param` tags describe the parameters and their types.
   - The `@yields` tag describes the type of values yielded by the generator.

2. **Function Definition**:
   - The function is defined using the `function*` syntax to indicate that it is a generator function.
   - The default value for `width` is set to 80.

3. **Logic**:
   - The content is split into lines using `\n`.
   - Each line is checked for emptiness.
   - Non-empty lines are processed to ensure they do not exceed the specified width.

4. **Example Usage**:
   - An example usage is provided to demonstrate how to use the generator function.

This JavaScript code preserves the functionality, logic, and structure of the original Python code while adhering to JavaScript documentation standards using JSDoc.