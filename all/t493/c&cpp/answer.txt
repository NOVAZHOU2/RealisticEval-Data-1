Sure! Below is the equivalent C++ code for the provided Python code. This code will wrap the text content to a specified maximum width and generate these lines one by one. It uses the `<sstream>` library for string manipulation and splitting.

```cpp
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

// Function to split a string by newline character
std::vector<std::string> split(const std::string &s, char delimiter) {
    std::vector<std::string> tokens;
    std::string token;
    std::istringstream tokenStream(s);
    while (std::getline(tokenStream, token, delimiter)) {
        tokens.push_back(token);
    }
    return tokens;
}

// Function to wrap text
class TextWrapper {
public:
    TextWrapper(int width = 80) : m_width(width) {}

    // Generator function to wrap and yield lines
    class LineGenerator {
    private:
        std::string m_line;
        int m_width;
        std::istringstream m_stream;

    public:
        LineGenerator(const std::string &line, int width)
            : m_line(line), m_width(width), m_stream(line) {}

        bool next(std::string &wrappedLine) {
            std::string temp;
            std::string currentLine;
            while (m_stream >> temp) {
                if (currentLine.length() + temp.length() + 1 > m_width) {
                    wrappedLine = currentLine;
                    currentLine.clear();
                    if (!temp.empty()) {
                        m_stream.unget(); // Put back the last word to process it in the next iteration
                    }
                    return true;
                }
                if (!currentLine.empty())
                    currentLine += " ";
                currentLine += temp;
            }
            if (!currentLine.empty()) {
                wrappedLine = currentLine;
                return true;
            }
            return false;
        }
    };

    // Function to wrap and yield lines from the input content
    void wrapContent(const std::string &content, std::function<void(const std::string&)> callback) {
        auto lines = split(content, '\n');
        for (const auto &line : lines) {
            if (line.find_first_not_of(" \t") == std::string::npos) {  // Check if the line is essentially empty.
                callback("\n");
            } else {
                LineGenerator generator(line, m_width);
                std::string wrappedLine;
                while (generator.next(wrappedLine)) {
                    callback(wrappedLine);
                }
            }
        }
    }

private:
    int m_width;
};

// Example usage
int main() {
    std::string content = "This is a sample text that needs to be wrapped to a specified width. "
                          "The text should be split into multiple lines, each not exceeding the given width.";

    TextWrapper wrapper(40);  // Set the width to 40 characters

    wrapper.wrapContent(content, [](const std::string &line) {
        std::cout << line << std::endl;
    });

    return 0;
}
```

### Explanation:
1. **Split Function**: A helper function `split` is used to split the input string by newline characters.
2. **TextWrapper Class**: This class contains the logic for wrapping text.
   - **LineGenerator Class**: An inner class that generates wrapped lines.
   - **wrapContent Function**: This function processes the input content, splits it into lines, checks for empty lines, and wraps non-empty lines using the `LineGenerator`.
3. **Main Function**: Demonstrates how to use the `TextWrapper` class to wrap and print lines.

This code maintains the functionality of the original Python script while adapting to C++ syntax and features.