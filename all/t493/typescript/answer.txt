Sure! Here is the equivalent TypeScript code:

```typescript
import { wrap } from 'textwrap';

function* wrapContentGenerator(content: string, width: number = 80): Generator<string> {
    /**
     * Wrap the text content to the specified maximum width and generate these lines line by line.
     *
     * @param content - The content to be wrapped and yielded line by line.
     * @param width - The maximum width of the lines, default is 80 characters.
     * 
     * @yields Each line of the content wrapped to the specified width.
     */
    for (const line of content.split(/\r?\n/, width)) {
        if (line.trim() === '') {  // Check if the line is essentially empty.
            yield '\n';
        } else {
            const wrappedLines = wrap(line, { width });
            for (const line2 of wrappedLines) {
                yield line2;
            }
        }
    }
}

// Example usage
const content = "This is a sample text that will be wrapped to fit within a specified width.";
const generator = wrapContentGenerator(content, 30);

for (let line of generator) {
    console.log(line);
}
```

### Explanation:
1. **Imports**: TypeScript does not have a built-in `textwrap` module like Python. We assume you have a similar package installed, such as `textwrap` for TypeScript. If not, you can use a library like `textwrap` or implement your own wrapping logic.

2. **Function Definition**: The function `wrapContentGenerator` is defined as a generator function using the `function*` syntax. It takes two parameters: `content` (a string) and `width` (an integer with a default value of 80).

3. **Yielding Lines**: The function splits the input `content` into lines and processes each line. If a line is empty, it yields a newline character (`\n`). Otherwise, it wraps the line using the `wrap` function and yields each wrapped line.

4. **Example Usage**: An example usage of the generator function is provided at the end, demonstrating how to iterate over the generated lines and print them.

Make sure to install the required `textwrap` package or use a suitable alternative for wrapping text in TypeScript.