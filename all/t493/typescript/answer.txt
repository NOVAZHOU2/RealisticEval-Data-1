Here's how you can write the same function in TypeScript:

```typescript
function* wrapContentGenerator(content: string, width = 80): Generator<string> {
    /**
     * Wrap the text content to the specified maximum width and yield each line one by one.
     *
     * @param {string} content - The content to be wrapped and yielded line by line.
     * @param {number} [width=80] - The maximum width of the lines, default is 80 characters.
     * 
     * @yields {string} Each line of the content wrapped to the specified width.
     */
    
    let i = 0;
    while(i < content.length) {
        if(content[i] === ' ') {
            const end = Math.min(i + width, content.length);
            const line = content.substring(i, end).trimEnd();
            yield line;
            i += line.length;
        } else {
            // Find last space before width limit or end of string
            const end = Math.min(i + width, content.length);
            for(let j = end; j > i; j--) {
                if(content[j] === ' ') {
                    yield content.substring(i, j).trimEnd();
                    i = j;
                    break;
                }
            }
            if(i >= content.length) {
                yield content.substring(i).trimEnd();
                i = content.length;
            }
        }
    }
}
```

This TypeScript version uses a generator function (`function*`) to yield each line of the wrapped content, similar to the Python `yield` keyword. It also uses TypeScript's type annotations to specify the types of the function arguments and return value.