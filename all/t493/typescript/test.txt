Certainly! Here is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included:

```typescript
import { wrapContentGenerator } from './path/to/wrapContentGenerator'; // Import the wrapContentGenerator function

describe('wrapContentGenerator', () => {
  it('should handle empty content', () => {
    const result = Array.from(wrapContentGenerator(""));
    expect(result).toEqual([]);
  });

  it('should handle a single line of content within default width', () => {
    const result = Array.from(wrapContentGenerator("Hello, world!"));
    expect(result).toEqual(["Hello, world!"]);
  });

  it('should handle multiple lines of content each fitting within default width', () => {
    const content = "Hello\nWorld\nPython";
    const result = Array.from(wrapContentGenerator(content));
    expect(result).toEqual(["Hello", "World", "Python"]);
  });

  it('should handle a single long line that exceeds the default width', () => {
    const content = "This is a very long line that should definitely be wrapped around the default width of 80 characters.";
    const result = Array.from(wrapContentGenerator(content));
    const longestLine = result.reduce((max, line) => line.length > max.length ? line : max, "");
    expect(longestLine.length).toBeLessThanOrEqual(80);
  });

  it('should handle a custom width', () => {
    const content = "This is a test for custom width setting.";
    const result = Array.from(wrapContentGenerator(content, 10));
    expect(result.every(line => line.length <= 10)).toBe(true);
  });

  it('should handle content that contains only whitespace characters', () => {
    const result = Array.from(wrapContentGenerator("     "));
    expect(result).toEqual(["\n"]);
  });
});
```

### Explanation:
1. **Imports**: The `wrapContentGenerator` function is imported from the appropriate path. Ensure that the path is correct based on your project structure.

2. **Describe Block**: The `describe` block is used to group the tests under the `wrapContentGenerator` function.

3. **Test Cases**:
   - **Empty Content**: Tests that an empty string results in an empty array.
   - **Single Line Content**: Tests that a single line of content fits within the default width.
   - **Multiple Lines Content**: Tests that multiple lines of content fit within the default width.
   - **Long Line**: Tests that a single long line is wrapped within the default width.
   - **Custom Width**: Tests that a custom width constraint is applied correctly.
   - **Only Whitespace**: Tests that content containing only whitespace characters results in a newline character.

4. **Assertions**:
   - `expect(result).toEqual([])` checks that the result is an empty array.
   - `expect(result).toEqual(["Hello, world!"])` checks that the result matches the expected array.
   - `expect(longestLine.length).toBeLessThanOrEqual(80)` checks that the longest line is within the default width.
   - `expect(result.every(line => line.length <= 10)).toBe(true)` checks that every line is within the custom width.
   - `expect(result).toEqual(["\n"])` checks that the result is a newline character.

### Notes:
- The `Array.from` method is used to convert the generator output into an array for testing.
- Jest assertions are used to validate the results, ensuring that the tests are clear and concise.

This TypeScript code preserves the original functionality and logic of the Python unittests while adapting to Jest's testing framework.