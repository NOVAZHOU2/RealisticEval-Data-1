Here's how you can convert your Python unittest test class into a TypeScript test case using Jest:

```typescript
import { describe, it, expect } from '@jest/globals';

describe('wrapContentGenerator', () => {
  it('should wrap content to specified width', () => {
    const content = 'This is a sample text that needs to be wrapped to a specified width.';
    const expectedLines = [
      'This is a sample text that',
      'needs to be wrapped to a',
      'specified width.'
    ];

    const generator = wrapContentGenerator(content, 25);
    const resultLines = [];
    
    for (let line of generator) {
      resultLines.push(line);
    }

    expect(resultLines).toEqual(expectedLines);
  });

  // Add more tests here if needed...
});

function* wrapContentGenerator(content: string, width: number = 80): Generator<string> {
  let currentLine = '';
  
  for (const char of content) {
    if ((currentLine + char).length <= width) {
      currentLine += char;
    } else {
      yield currentLine;
      currentLine = char;
    }
  }

  if (currentLine.length > 0) {
    yield currentLine;
  }
}
```

Please note that I've used `@jest/globals` to access the Jest global functions like `describe`, `it`, and `expect`. Also, I've implemented the `wrapContentGenerator` function in TypeScript. 

In the test case, I'm creating an array of expected lines and comparing it with the actual lines generated by the `wrapContentGenerator` function. If they match, the test will pass.