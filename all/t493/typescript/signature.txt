Certainly! Here is the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation:

```typescript
import { wrap } from 'textwrap';

/**
 * Wrap the text content to the specified maximum width and generate these lines line by line.
 *
 * @param content - The content to be wrapped and yielded line by line.
 * @param width - The maximum width of the lines, default is 80 characters.
 * @yields Each line of the content wrapped to the specified width.
 */
function* wrapContentGenerator(content: string, width: number = 80): Generator<string> {
    for (const line of content.split(/\r?\n/)) {
        if (line.trim() === '') {  // Check if the line is essentially empty.
            yield '\n';
        } else {
            const wrappedLines = wrap(line, { width });
            for (const line2 of wrappedLines) {
                yield line2;
            }
        }
    }
}

// Example usage
const content = "This is a sample text that will be wrapped to fit within a specified width.";
const generator = wrapContentGenerator(content, 30);

for (let line of generator) {
    console.log(line);
}
```

### Explanation:
1. **Imports**: The `textwrap` package is imported using `import { wrap } from 'textwrap';`. This assumes you have a suitable `textwrap` package installed. If not, you can use a different library or implement your own wrapping logic.

2. **Function Definition**: The function `wrapContentGenerator` is defined as a generator function using the `function*` syntax. It takes two parameters:
   - `content` (a string)
   - `width` (an integer with a default value of 80)

3. **JSDoc Documentation**: The function is documented using JSDoc-style comments, which provide clear descriptions of the parameters and the yielded values.

4. **Yielding Lines**: The function splits the input `content` into lines and processes each line. If a line is empty, it yields a newline character (`\n`). Otherwise, it wraps the line using the `wrap` function and yields each wrapped line.

5. **Example Usage**: An example usage of the generator function is provided at the end, demonstrating how to iterate over the generated lines and print them.

### Adjustments:
- The `split` method is adjusted to handle both Windows (`\r\n`) and Unix (`\n`) line endings.
- The `width` parameter is explicitly typed as `number` instead of `str` as per the Python docstring.

This TypeScript code preserves the original functionality and structure while adhering to TypeScript's static type system and documentation standards.