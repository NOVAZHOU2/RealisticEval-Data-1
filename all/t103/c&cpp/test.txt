Certainly! Below is the equivalent C++ test case using Catch2, which is a popular C++ testing framework.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and writing the tests within the `CATCH_TEST_CASE` macro.

Here's the complete C++ test case using Catch2:

### Catch2 Header File

Make sure you have the Catch2 header file included in your project. You can download it from [Catch2 GitHub](https://github.com/catchorg/Catch2).

### Test Case Code

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>

// Function definition
std::string truncateStringWithReplacement(const std::string& str, int maxLength);

TEST_CASE("truncateStringWithReplacement", "[truncateStringWithReplacement]") {
    SECTION("should return the original string if it is shorter than maxLength") {
        const std::string result = truncateStringWithReplacement("Hello World", 20);
        REQUIRE(result == "Hello World");
    }

    SECTION("should truncate the string and replace the excess with ellipsis when longer than maxLength") {
        const std::string result = truncateStringWithReplacement("This is a long string that needs to be truncated.", 20);
        REQUIRE(result == "This is a long str...");
    }

    SECTION("should truncate the string at maxLength and add ellipsis") {
        const std::string result = truncateStringWithReplacement("Short string", 10);
        REQUIRE(result == "Short str...");
    }

    SECTION("should handle empty string correctly") {
        const std::string result = truncateStringWithReplacement("", 10);
        REQUIRE(result == "");
    }

    SECTION("should return the original string when maxLength is equal to string length") {
        const std::string result = truncateStringWithReplacement("Exact length", 12);
        REQUIRE(result == "Exact length");
    }

    SECTION("should replace excess part with ellipsis in a string with special characters") {
        const std::string result = truncateStringWithReplacement("This string has special characters: !@#$%^&*()", 30);
        REQUIRE(result == "This string has special c...");
    }

    SECTION("should return ellipsis only when the maxLength is 0") {
        const std::string result = truncateStringWithReplacement("Hello, world!", 0);
        REQUIRE(result == "...");
    }
}

// Function implementation
std::string truncateStringWithReplacement(const std::string& str, int maxLength) {
    // Check if the string length is less than or equal to the specified length
    if (str.length() <= maxLength) {
        return str; // No need to truncate
    }

    // Replace the excess part with ellipsis
    return str.substr(0, maxLength) + "...";
}

int main(int argc, char* argv[]) {
    // Run Catch2 tests
    return Catch::Session().run(argc, argv);
}
```

### Explanation

1. **Include Catch2**: Include the Catch2 header file.
2. **Test Case Definition**: Use `TEST_CASE` to define the test suite and `SECTION` to define individual test cases.
3. **Function Implementation**: Define and implement the `truncateStringWithReplacement` function.
4. **Main Function**: Run the Catch2 tests using the `Catch::Session().run()` method.

This setup ensures that the tests are structured similarly to the Jest tests and provide the same functionality.