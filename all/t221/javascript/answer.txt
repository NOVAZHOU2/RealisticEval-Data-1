Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
const fs = require('fs');
const util = require('util');

function extractParseDicts(filePath) {
    /**
     * Extracts and parses strings containing JSON-like dictionary syntax from a given file.
     *
     * @param {string} filePath - The path to the file from which to extract dictionary strings.
     * @returns {Array} An array of dictionaries extracted and parsed from the file.
     */
    // This regex pattern is designed to match simple dictionary structures
    const dictPattern = /\{[^\{]*?\}/g;
    const extractedDicts = [];

    const readFileAsync = util.promisify(fs.readFile);
    let fileContents = '';

    try {
        fileContents = (yield readFileAsync(filePath, 'utf8')).toString();
        let matches = fileContents.match(dictPattern);

        if (matches) {
            for (let match of matches) {
                try {
                    // Use JSON.parse to safely parse the string that looks like a dictionary
                    const parsedDict = JSON.parse(match);
                    extractedDicts.push(parsedDict);
                } catch (error) {
                    // Handle the case where the string is not a valid JSON dictionary
                    console.log(`Skipping invalid dictionary: ${match}`);
                }
            }
        }
    } catch (error) {
        console.error(`Error reading file: ${filePath}`, error);
    }

    return extractedDicts;
}

// Example usage:
(async () => {
    const filePath = './example.txt'; // Replace with your file path
    const result = await extractParseDicts(filePath);
    console.log(result);
})();
```

### Notes:
1. **File Reading**: In JavaScript, we use `fs` module to read files. The `util.promisify` function is used to make the `fs.readFile` method asynchronous.
2. **Regex Pattern**: The regex pattern remains the same but is adjusted to work with JavaScript's string matching capabilities.
3. **Parsing**: Instead of `ast.literal_eval`, we use `JSON.parse` to safely parse the dictionary strings.
4. **Error Handling**: Error handling is done using `try...catch` blocks.
5. **Asynchronous Code**: Since file operations are asynchronous in Node.js, the function is written as an asynchronous function (`async`/`await`) to handle the asynchronous nature of file reading.

This should provide the same functionality as the Python code but adapted to JavaScript.