Here is the equivalent TypeScript code for your Python function:

```typescript
interface Dictionary {
  [key: string]: any;
}

function extractParseDictionaries(filePath: string): Promise<Dictionary[]> {
  return new Promise((resolve, reject) => {
    const fs = require('fs');
    const readline = require('readline');

    let dictionaries: Dictionary[] = [];
    const rl = readline.createInterface({
      input: fs.createReadStream(filePath),
      crlfDelay: Infinity,
    });

    rl.on('line', (line) => {
      try {
        // Parse line as JSON assuming it's a valid dictionary
        const dict = JSON.parse(line);
        if (typeof dict === 'object' && dict !== null) {
          dictionaries.push(dict);
        }
      } catch (error) {
        console.error(`Error parsing line "${line}":`, error);
      }
    });

    rl.on('close', () => {
      resolve(dictionaries);
    });
  });
}
```

This TypeScript function reads a file line-by-line using Node.js's `readline` module and attempts to parse each line as a JSON object. If successful, it adds the resulting dictionary to an array. The function returns a promise that resolves with the array of dictionaries once all lines have been processed.

Please note that this assumes that the input file contains valid JSON objects on each line. If your actual data format differs, you may need to adjust the parsing logic accordingly.