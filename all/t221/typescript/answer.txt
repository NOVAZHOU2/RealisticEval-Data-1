Hereâ€™s the equivalent TypeScript code, including necessary type definitions and adjustments:

```typescript
import * as fs from 'fs';
import * as regex from 'regex';

function extractParseDicts(filePath: string): Record<string, any>[] {
    /**
     * Extracts and parses strings containing Python dictionary syntax from a given file.
     *
     * @param filePath - The path to the file from which to extract dictionary strings.
     * @returns An array of dictionaries extracted and parsed from the file.
     */
    // This regex pattern is designed to match simple dictionary structures
    const dictPattern = /\{[^\{]*?\}/g;
    const extractedDicts: Record<string, any>[] = [];

    const fileContents = fs.readFileSync(filePath, 'utf-8');
    const matches = fileContents.matchAll(dictPattern);

    for (const match of matches) {
        try {
            // Use JSON.parse to safely parse the string that looks like a dictionary
            const parsedDict = JSON.parse(match[0]);
            extractedDicts.push(parsedDict);
        } catch (error) {
            // Handle the case where the string is not a valid JSON object
            console.log(`Skipping invalid dictionary: ${match[0]}`);
        }
    }

    return extractedDicts;
}

// Example usage
const filePath = './example.txt';
console.log(extractParseDicts(filePath));
```

### Notes:
1. **File System**: In TypeScript/Node.js, we use `fs` (file system) module to read files synchronously using `fs.readFileSync`.
2. **Regular Expressions**: TypeScript uses JavaScript's regular expression syntax.
3. **JSON Parsing**: Instead of `ast.literal_eval`, we use `JSON.parse` to safely parse JSON strings.
4. **Type Definitions**: The function returns an array of objects (`Record<string, any>[]`) to represent dictionaries.
5. **Error Handling**: Error handling is done using a `try-catch` block, similar to Python.

This TypeScript code maintains the same functionality and logic as the original Python code but adapts it to TypeScript's static type system and Node.js environment.