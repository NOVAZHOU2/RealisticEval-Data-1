Certainly! Hereâ€™s the equivalent TypeScript code with proper type annotations and JSDoc-style documentation comments:

```typescript
/**
 * Extracts and parses strings containing Python dictionary syntax from a given file.
 * 
 * @param filePath - The path to the file from which to extract dictionary strings.
 * @returns An array of dictionaries extracted and parsed from the file.
 */
function extractParseDicts(filePath: string): Record<string, any>[] {
    // This regex pattern is designed to match simple dictionary structures
    const dictPattern = /\{[^\{]*?\}/g;
    const extractedDicts: Record<string, any>[] = [];

    const fileContents = fs.readFileSync(filePath, 'utf-8');
    const matches = fileContents.matchAll(dictPattern);

    for (const match of matches) {
        try {
            // Use JSON.parse to safely parse the string that looks like a dictionary
            const parsedDict = JSON.parse(match[0]);
            extractedDicts.push(parsedDict);
        } catch (error) {
            // Handle the case where the string is not a valid JSON object
            console.log(`Skipping invalid dictionary: ${match[0]}`);
        }
    }

    return extractedDicts;
}

// Example usage
const filePath = './example.txt';
console.log(extractParseDicts(filePath));
```

### Explanation:
1. **JSDoc Comments**: The Python docstring has been converted to JSDoc-style comments.
2. **Type Annotations**:
   - The function signature `extract_parse_dicts(file_path: str) -> List[Dict]` is translated to `extractParseDicts(filePath: string): Record<string, any>[]`.
   - `List[Dict]` is represented as `Record<string, any>[]` in TypeScript.
3. **Regex Pattern**: The regex pattern remains the same.
4. **File Reading**: The `fs` module is used to read the file synchronously.
5. **JSON Parsing**: `JSON.parse` is used to safely parse the dictionary strings.
6. **Error Handling**: The error handling remains the same with a `try-catch` block.

This TypeScript code preserves the original functionality and structure while adapting to TypeScript's static type system and JSDoc documentation conventions.