Sure! Here's how you can translate the provided Python function `extract_parse_dicts` into C++:

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <regex>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

std::vector<json> extract_parse_dicts(const std::string& file_path) {
    std::ifstream file(file_path);
    if (!file.is_open()) {
        throw std::runtime_error("Could not open file");
    }

    std::string line;
    std::vector<json> dicts;

    while (getline(file, line)) {
        // Regex pattern to match Python-like dictionary syntax
        std::regex dict_pattern(R"(\{.*?\})");

        auto words_begin = std::sregex_iterator(line.begin(), line.end(), dict_pattern);
        auto words_end = std::sregex_iterator();

        for (std::sregex_iterator i = words_begin; i != words_end; ++i) {
            std::smatch match = *i;
            std::string dict_str = match.str();
            try {
                // Parse the string as JSON
                json dict = json::parse(dict_str);
                dicts.push_back(dict);
            } catch (const json::parse_error& e) {
                // Handle parsing error (e.g., invalid dictionary syntax)
                std::cerr << "Error parsing dictionary: " << e.what() << std::endl;
            }
        }
    }

    return dicts;
}

int main() {
    try {
        std::string file_path = "path/to/your/file.txt";
        std::vector<json> dicts = extract_parse_dicts(file_path);

        for (const auto& dict : dicts) {
            std::cout << dict.dump(4) << std::endl;  // Pretty print JSON
        }
    } catch (const std::exception& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
    }

    return 0;
}
```

### Explanation:

1. **Dependencies**:
   - `nlohmann/json.hpp`: This is a popular C++ library for handling JSON data. It needs to be included in your project.

2. **Function `extract_parse_dicts`**:
   - Opens the specified file.
   - Reads each line of the file.
   - Uses a regular expression to find substrings that look like Python-like dictionary syntax (`\{.*?\}`).
   - Parses each found substring as JSON using `nlohmann::json::parse`.
   - Adds successfully parsed JSON objects to the result vector.

3. **Main Function**:
   - Calls `extract_parse_dicts` with a file path.
   - Prints each parsed dictionary in a pretty-printed format.

### Compilation:
To compile this code, you need to link against the `nlohmann_json` library. If you're using g++, you can do so with:

```sh
g++ -o extract_dicts extract_dicts.cpp -lnlohmann_json
```

Make sure to replace `"path/to/your/file.txt"` with the actual path to your input file.