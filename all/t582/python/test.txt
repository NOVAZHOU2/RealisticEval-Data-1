Here's how you can convert the provided TypeScript Jest test cases into Python unittest test cases. The functionality remains the same, and we will maintain the structure of the test cases while adapting them to Python's unittest framework.
Converted Python Code Using unittest
python
import unittest
from urllib.parse import quote

# Assuming the to_query_string function is defined somewhere above
def to_query_string(params: dict) -> str:
    """
    Converts a dictionary to a query string.
    
    :param params: The parameters to convert.
    :return: The query string.
    """
    query_parts = []
    for key, value in params.items():
        if value is not None:
            query_parts.append(f"{quote(str(key))}={quote(str(value))}")
    return '?' + '&'.join(query_parts) if query_parts else ''


class TestToQueryString(unittest.TestCase):

    def test_convert_simple_object_to_query_string(self):
        params = {'search': 'test', 'page': 1, 'size': 10}
        result = to_query_string(params)
        self.assertEqual(result, '?search=test&page=1&size=10')

    def test_encode_special_characters_in_query_string(self):
        params = {'search': 'hello world', 'filter': 'price < \$50'}
        result = to_query_string(params)
        self.assertEqual(result, '?search=hello%20world&filter=price%20%3C%20%2450')

    def test_handle_empty_string_values(self):
        params = {'search': '', 'page': 1}
        result = to_query_string(params)
        self.assertEqual(result, '?search=&page=1')

    def test_handle_boolean_values(self):
        params = {'isActive': True, 'isVerified': False}
        result = to_query_string(params)
        self.assertEqual(result, '?isActive=True&isVerified=False')


if __name__ == '__main__':
    unittest.main()
Explanation of the Converted Code:
Import Statements:
We import unittest for the testing framework and quote from urllib.parse to handle URL encoding.
Function Definition:
The to_query_string function is included for context. This function should match the implementation provided earlier.
Test Class:
A class TestToQueryString is defined, inheriting from unittest.TestCase.
Test Methods:
Each test case from the TypeScript code is converted to a method within the TestToQueryString class. The method names are descriptive to reflect their purpose.
The self.assertEqual() method is used to check if the result matches the expected output.
Main Block:
The if __name__ == '__main__': block allows the script to be run directly, executing the tests.
This Python unittest structure replicates the original TypeScript Jest functionality and should work in a similar way, providing clear feedback on whether the tests pass or fail.