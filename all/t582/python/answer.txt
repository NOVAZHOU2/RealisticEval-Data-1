Here’s how you can convert the provided TypeScript code to Python:
Converted Python Code
python
import urllib.parse

def to_query_string(params: dict) -> str:
    """
    Converts a dictionary to a query string.

    :param params: The parameters to convert.
    :return: The query string.
    """
    query_parts = []
    for key, value in params.items():
        # Check for None (equivalent to null/undefined in TypeScript)
        if value is not None:
            # Encode the key and value, then add to the list
            query_parts.append(f"{urllib.parse.quote(str(key))}={urllib.parse.quote(str(value))}")
    
    # Join the query parts and return the result
    return '?' + '&'.join(query_parts) if query_parts else ''
Explanation of the Converted Code:
urllib.parse.quote():
In Python, urllib.parse.quote() is used to URL-encode a string (similar to encodeURIComponent() in JavaScript/TypeScript).
params: dict:
In Python, the equivalent of Record<string, any> in TypeScript is a dict, which maps string keys to any type of value.
Dictionary Iteration:
Python's for key, value in params.items() is used to iterate over the dictionary. It replaces TypeScript’s for (const key in params) and params.hasOwnProperty(key).
Null/Undefined Check:
In Python, the equivalent of checking for null or undefined in TypeScript is checking if a value is None.
Return Query String:
The resulting query string is returned in the same format: starting with ? and joining all the encoded key-value pairs with &.
This Python function should now perform similarly to the original TypeScript function.