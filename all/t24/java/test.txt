Certainly! Here is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The test class will include all the necessary setup, teardown, and test methods to ensure the functionality and logic are preserved.

### Java Code

```java
package org.real.temp;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * Tests for converting YAML files to JSON files.
 */
public class Tester {

    private static final String SIMPLE_YAML = "simple.yaml";
    private static final String NESTED_YAML = "nested.yaml";
    private static final String EMPTY_YAML = "empty.yaml";
    private static final String LIST_YAML = "list.yaml";
    private static final String INVALID_YAML = "invalid.yaml";

    private Path tempDir;

    @BeforeEach
    public void setUp(@TempDir Path tempDir) throws IOException {
        this.tempDir = tempDir;

        // Create temporary YAML files for testing
        writeYamlFile(tempDir.resolve(SIMPLE_YAML), "name: John Doe\nage: 30\n");
        writeYamlFile(tempDir.resolve(NESTED_YAML), "person:\n  name: Jane Doe\n  age: 25\n  address:\n    city: New York\n    zip: 10001\n");
        writeYamlFile(tempDir.resolve(EMPTY_YAML), "");
        writeYamlFile(tempDir.resolve(LIST_YAML), "- item1\n- item2\n- item3\n");
        writeYamlFile(tempDir.resolve(INVALID_YAML), "{ invalid: YAML: structure }\n");
    }

    @AfterEach
    public void tearDown() {
        // Remove temporary files after testing
        new File(tempDir.resolve(SIMPLE_YAML).toString()).delete();
        new File(tempDir.resolve(NESTED_YAML).toString()).delete();
        new File(tempDir.resolve(EMPTY_YAML).toString()).delete();
        new File(tempDir.resolve(LIST_YAML).toString()).delete();
        new File(tempDir.resolve(INVALID_YAML).toString()).delete();

        File outputFile = new File(tempDir.resolve("output.json").toString());
        if (outputFile.exists()) {
            outputFile.delete();
        }
    }

    @Test
    public void testSimpleYamlConversion() throws IOException {
        convertYamlToJson(tempDir.resolve(SIMPLE_YAML).toString(), "output.json");
        assertEquals("{\"name\":\"John Doe\",\"age\":30}", readFileContent(tempDir.resolve("output.json")));
    }

    @Test
    public void testNestedYamlConversion() throws IOException {
        convertYamlToJson(tempDir.resolve(NESTED_YAML).toString(), "output.json");
        assertEquals("{\"person\":{\"name\":\"Jane Doe\",\"age\":25,\"address\":{\"city\":\"New York\",\"zip\":10001}}}", readFileContent(tempDir.resolve("output.json")));
    }

    @Test
    public void testEmptyYamlConversion() throws IOException {
        convertYamlToJson(tempDir.resolve(EMPTY_YAML).toString(), "output.json");
        assertEquals("", readFileContent(tempDir.resolve("output.json")));  // YAML.safe_load() returns null, but JSON dump of null is ""
    }

    @Test
    public void testListYamlConversion() throws IOException {
        convertYamlToJson(tempDir.resolve(LIST_YAML).toString(), "output.json");
        assertEquals("[\"item1\",\"item2\",\"item3\"]", readFileContent(tempDir.resolve("output.json")));
    }

    @Test
    public void testInvalidYamlConversion() {
        assertThrows(Exception.class, () -> convertYamlToJson(tempDir.resolve(INVALID_YAML).toString(), "output.json"));
    }

    private void writeYamlFile(Path filePath, String content) throws IOException {
        try (FileWriter writer = new FileWriter(filePath.toFile())) {
            writer.write(content);
        }
    }

    private String readFileContent(Path filePath) throws IOException {
        return new String(java.nio.file.Files.readAllBytes(filePath));
    }

    private void convertYamlToJson(String yamlFilePath, String jsonFilePath) {
        ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());
        ObjectMapper jsonWriter = new ObjectMapper();

        try {
            // Read the YAML file
            Object data = yamlReader.readValue(new File(yamlFilePath), Object.class);

            // Write the data to a JSON file
            jsonWriter.writerWithDefaultPrettyPrinter().writeValue(new File(jsonFilePath), data);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
```

### Explanation:
1. **Package Declaration**:
   - The package declaration `package org.real.temp;` ensures the code is organized within the specified package.

2. **Imports**:
   - Necessary imports are included for handling YAML and JSON files using Jackson libraries, JUnit assertions, and file operations.

3. **Class Definition**:
   - The class `Tester` contains the test methods and setup/teardown logic.

4. **JUnit Annotations**:
   - `@BeforeEach` and `@AfterEach` annotations are used for setup and teardown methods.
   - `@Test` annotations are used for individual test methods.

5. **Setup and Teardown Methods**:
   - `setUp` creates temporary YAML files for testing.
   - `tearDown` removes temporary files after testing.

6. **Test Methods**:
   - Each test method performs the conversion and asserts the expected results.
   - `testSimpleYamlConversion`, `testNestedYamlConversion`, `testEmptyYamlConversion`, `testListYamlConversion`, and `testInvalidYamlConversion` are implemented to match the Python test cases.

7. **Helper Methods**:
   - `writeYamlFile` writes content to a YAML file.
   - `readFileContent` reads the content of a file.
   - `convertYamlToJson` is the method that performs the conversion from YAML to JSON.

This Java code preserves the original functionality and structure of the Python test class while adhering to Java conventions and JUnit best practices.