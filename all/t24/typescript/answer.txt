Sure! Below is the equivalent TypeScript code for the provided Python script. Since TypeScript is primarily a superset of JavaScript, we'll need to use Node.js modules for handling YAML and JSON files. We will use `js-yaml` for YAML parsing and the native `fs` module for file operations.

First, you need to install the required dependencies:

```bash
npm install js-yaml
```

Here is the TypeScript code:

```typescript
import * as fs from 'fs';
import * as yaml from 'js-yaml';

function convertYamlToJson(yamlFile: string, jsonFile: string): void {
    /**
     * Convert a YAML file to a JSON file.
     *
     * @param yamlFile - Path to the input YAML file.
     * @param jsonFile - Path to the output JSON file.
     */
    // Read the YAML file
    const yamlData = fs.readFileSync(yamlFile, 'utf-8');
    const data = yaml.safeLoad(yamlData);

    // Write the data to a JSON file
    fs.writeFileSync(jsonFile, JSON.stringify(data, null, 4), 'utf-8');
}

// Example usage
convertYamlToJson('input.yaml', 'output.json');
```

### Explanation:
1. **Imports**: 
   - `fs` is used for reading and writing files.
   - `js-yaml` is used for parsing YAML content.

2. **Function Definition**:
   - The function `convertYamlToJson` takes two parameters: `yamlFile` (path to the input YAML file) and `jsonFile` (path to the output JSON file).

3. **Reading the YAML File**:
   - `fs.readFileSync` reads the YAML file synchronously.
   - `yaml.safeLoad` parses the YAML content into a JavaScript object.

4. **Writing to the JSON File**:
   - `JSON.stringify` converts the JavaScript object to a JSON string with indentation.
   - `fs.writeFileSync` writes the JSON string to the specified JSON file.

5. **Example Usage**:
   - The function is called with example paths to demonstrate its usage.

This TypeScript code maintains the same functionality as the original Python script but uses appropriate TypeScript/JavaScript libraries and syntax.