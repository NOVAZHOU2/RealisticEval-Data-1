Certainly! Below is the equivalent TypeScript test case using Jest for the given Python `unittest` test method. The TypeScript function `convertYamlToJson` would need to be implemented separately and then tested with Jest.

```typescript
import { describe, it, expect } from '@jest/globals';
import fs from 'fs';
import path from 'path';

// Assuming the convertYamlToJson function is defined somewhere in your project
import { convertYamlToJson } from './yourModule'; // Adjust the import path accordingly

describe('convertYamlToJson', () => {
  const tempDir = path.join(__dirname, 'temp');
  let inputYamlPath: string;
  let outputJsonPath: string;

  beforeEach(() => {
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir);
    }

    inputYamlPath = path.join(tempDir, 'input.yaml');
    outputJsonPath = path.join(tempDir, 'output.json');

    // Write some sample YAML content to the input file
    fs.writeFileSync(inputYamlPath, `
name: John Doe
age: 30
`);
  });

  afterEach(() => {
    fs.unlinkSync(inputYamlPath);
    fs.unlinkSync(outputJsonPath);
    fs.rmdirSync(tempDir);
  });

  it('should convert YAML to JSON successfully', async () => {
    await convertYamlToJson(inputYamlPath, outputJsonPath);

    const jsonContent = fs.readFileSync(outputJsonPath, 'utf8');
    const expectedJsonContent = '{"name":"John Doe","age":30}';

    expect(jsonContent).toBe(expectedJsonContent);
  });
});
```

### Explanation:
1. **Imports**: Import necessary modules like `@jest/globals` for Jest testing utilities, `fs` for file system operations, and `path` for handling file paths.
2. **Test Suite**: Use `describe` to create a test suite named `'convertYamlToJson'`.
3. **Setup and Teardown**:
   - `beforeEach`: Creates a temporary directory and writes a sample YAML file before each test.
   - `afterEach`: Deletes the temporary files and directory after each test.
4. **Test Case**: 
   - Uses `it` to define a test case named `'should convert YAML to JSON successfully'`.
   - Calls the `convertYamlToJson` function with the input and output file paths.
   - Reads the content of the output JSON file and compares it with the expected JSON content using `expect`.

Make sure you have Jest installed and configured in your project. You can install Jest using npm or yarn:

```sh
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run the tests using the following command:

```sh
npx jest
# or
yarn jest
```

This setup assumes that the `convertYamlToJson` function is correctly implemented and available for testing. If the function is part of another module, adjust the import statement accordingly.