Certainly! Below is the equivalent C++ code for the given Python function, including the translation of the function signature, comments, and docstrings into C++ style comments and documentation.

### C++ Code

```cpp
#include <fstream>
#include <iostream>
#include <yaml-cpp/yaml.h>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

/**
 * Convert a YAML file to a JSON file.
 *
 * @param yaml_file Path to the input YAML file.
 * @param json_file Path to the output JSON file.
 */
void convertYamlToJson(const std::string& yaml_file, const std::string& json_file) {
    try {
        // Read the YAML file
        YAML::Node yaml_data = YAML::LoadFile(yaml_file);

        // Convert YAML data to JSON
        json json_data = yaml_data;

        // Write the JSON data to a file
        std::ofstream outputFile(json_file);
        if (!outputFile.is_open()) {
            throw std::runtime_error("Failed to open JSON file.");
        }
        outputFile << std::setw(4) << json_data << std::endl;
        outputFile.close();
    } catch (const YAML::Exception& e) {
        std::cerr << "Error loading YAML file: " << e.what() << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }
}

int main() {
    // Example usage
    std::string yamlFilePath = "input.yaml";
    std::string jsonFilePath = "output.json";
    convertYamlToJson(yamlFilePath, jsonFilePath);
    return 0;
}
```

### Explanation:
1. **Function Signature**:
   - The Python function `def convert_yaml_to_json(yaml_file: str, json_file: str) -> None:` is translated to `void convertYamlToJson(const std::string& yaml_file, const std::string& json_file)` in C++.
   - The `-> None` annotation in Python indicates that the function does not return a value, which is represented by `void` in C++.

2. **Comments and Docstrings**:
   - The Python docstring is translated into a multi-line comment block in C++ using `/* */`.
   - Single-line comments are translated using `//`.

3. **Error Handling**:
   - Error handling is preserved using try-catch blocks to handle exceptions from file operations and YAML parsing.

4. **File Operations**:
   - The `std::ofstream` is used to write the JSON data to a file with proper indentation.

5. **Main Function**:
   - An example usage of the `convertYamlToJson` function is provided in the `main` function.

This code ensures that the functionality, logic, and structure of the original Python code are preserved while adapting to C++ syntax and conventions.