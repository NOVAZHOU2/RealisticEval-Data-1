Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JavaScript documentation standards using JSDoc format:

```javascript
const fs = require('fs');
const jsYaml = require('js-yaml');
const JSON5 = require('json5');

/**
 * Convert a YAML file to a JSON file.
 * @param {string} yamlFile - Path to the input YAML file.
 * @param {string} jsonFile - Path to the output JSON file.
 */
function convertYamlToJson(yamlFile, jsonFile) {
    // Read the YAML file
    const yamlData = fs.readFileSync(yamlFile, 'utf-8');
    const data = jsYaml.safeLoad(yamlData);

    // Write the data to a JSON file
    fs.writeFileSync(jsonFile, JSON5.stringify(data, null, 4), 'utf-8');
}

// Example usage
convertYamlToJson('input.yaml', 'output.json');
```

### Explanation:
1. **Node.js Modules**:
   - `fs`: Used for reading and writing files.
   - `js-yaml`: Used for parsing YAML content.
   - `json5`: Used for pretty-printing JSON (though `JSON.stringify` can also be used).

2. **Function Definition**:
   - The function `convertYamlToJson` takes two parameters: `yamlFile` and `jsonFile`.
   - It reads the YAML file using `fs.readFileSync` and parses it using `jsYaml.safeLoad`.
   - It then writes the parsed data to a JSON file using `fs.writeFileSync` and `JSON5.stringify`.

3. **JSDoc Comments**:
   - The JSDoc comment block provides a clear description of the function's purpose and parameters.
   - The `@param` tags describe the parameters and their types.
   - The function does not return any value, so there is no explicit `@returns` tag needed.

4. **Example Usage**:
   - The example usage at the end demonstrates how to call the function with specific file paths.

This JavaScript code preserves the functionality, structure, and documentation style of the original Python code.