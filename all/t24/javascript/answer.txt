Sure! Here's how you can convert the Python code to JavaScript using Node.js and its `js-yaml` and `fs` modules:

1. First, make sure you have Node.js installed on your machine.
2. Install the required packages by running `npm install js-yaml`.
3. Create a new JavaScript file (e.g., `convertYamlToJson.js`) and add the following code:

```javascript
const fs = require('fs');
const yaml = require('js-yaml');

function convertYamlToJson(yamlFile, jsonFile) {
    try {
        // Read the YAML file
        const yamlContent = fs.readFileSync(yamlFile, 'utf8');
        
        // Parse the YAML content into a JavaScript object
        const jsonObject = yaml.load(yamlContent);
        
        // Convert the JavaScript object to a JSON string
        const jsonString = JSON.stringify(jsonObject, null, 2);
        
        // Write the JSON string to a file
        fs.writeFileSync(jsonFile, jsonString);
        
        console.log(`Successfully converted ${yamlFile} to ${jsonFile}`);
    } catch (error) {
        console.error(`Error converting ${yamlFile}:`, error);
    }
}

// Example usage:
convertYamlToJson('input.yaml', 'output.json');
```

### Explanation:
- **`fs.readFileSync`**: Reads the contents of a file synchronously.
- **`yaml.load`**: Parses the YAML content into a JavaScript object.
- **`JSON.stringify`**: Converts the JavaScript object to a JSON string with indentation for better readability.
- **`fs.writeFileSync`**: Writes the JSON string to a file synchronously.

To run the script, save it in a file (e.g., `convertYamlToJson.js`) and execute it using Node.js:

```sh
node convertYamlToJson.js
```

This will convert the specified YAML file to a JSON file. Make sure to replace `'input.yaml'` and `'output.json'` with the actual paths to your input and output files.