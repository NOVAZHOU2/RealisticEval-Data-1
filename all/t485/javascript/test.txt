Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Unittest Code

```python
import unittest

# Assuming the prepare_query function is defined above or imported

class TestPrepareQuery(unittest.TestCase):

    def test_valid_named_parameters(self):
        sql_query = "SELECT * FROM users WHERE id = $user_id AND status = $status"
        parameters = {
            'user_id': 42,
            'status': 'active'
        }
        expected_sql = "SELECT * FROM users WHERE id = $1 AND status = $2"
        expected_values = [42, 'active']

        new_sql, value_list = prepare_query(sql_query, parameters)
        self.assertEqual(new_sql, expected_sql)
        self.assertEqual(value_list, expected_values)

    def test_missing_parameters(self):
        sql_query = "SELECT * FROM users WHERE id = $user_id AND status = $status"
        parameters = {
            'user_id': 42  # 'status' is missing
        }
        expected_sql = "SELECT * FROM users WHERE id = $1 AND status = $2"
        expected_values = [42]  # 'status' is not included

        new_sql, value_list = prepare_query(sql_query, parameters)
        self.assertEqual(new_sql, expected_sql)
        self.assertEqual(value_list, expected_values)

    def test_no_parameters(self):
        sql_query = "SELECT * FROM users"
        parameters = {}  # No parameters provided
        expected_sql = "SELECT * FROM users"
        expected_values = []

        new_sql, value_list = prepare_query(sql_query, parameters)
        self.assertEqual(new_sql, expected_sql)
        self.assertEqual(value_list, expected_values)

    def test_multiple_same_parameters(self):
        sql_query = "SELECT * FROM users WHERE id = $user_id AND status = $user_id"
        parameters = {
            'user_id': 42
        }
        expected_sql = "SELECT * FROM users WHERE id = $1 AND status = $1"
        expected_values = [42]  # Only one value for 'user_id'

        new_sql, value_list = prepare_query(sql_query, parameters)
        self.assertEqual(new_sql, expected_sql)
        self.assertEqual(value_list, expected_values)

    def test_special_characters_in_parameters(self):
        sql_query = "INSERT INTO users (name, email) VALUES ($name, $email)"
        parameters = {
            'name': "John Doe",
            'email': "john.doe@example.com"
        }
        expected_sql = "INSERT INTO users (name, email) VALUES ($1, $2)"
        expected_values = ["John Doe", "john.doe@example.com"]

        new_sql, value_list = prepare_query(sql_query, parameters)
        self.assertEqual(new_sql, expected_sql)
        self.assertEqual(value_list, expected_values)
```

### Equivalent Jest Test Suite

```javascript
const prepareQuery = require('./prepareQuery'); // Assuming prepareQuery is defined in a separate file

describe('TestPrepareQuery', () => {
    it('test_valid_named_parameters', () => {
        const sql_query = "SELECT * FROM users WHERE id = $user_id AND status = $status";
        const parameters = {
            'user_id': 42,
            'status': 'active'
        };
        const expected_sql = "SELECT * FROM users WHERE id = $1 AND status = $2";
        const expected_values = [42, 'active'];

        const [new_sql, value_list] = prepareQuery(sql_query, parameters);
        expect(new_sql).toEqual(expected_sql);
        expect(value_list).toEqual(expected_values);
    });

    it('test_missing_parameters', () => {
        const sql_query = "SELECT * FROM users WHERE id = $user_id AND status = $status";
        const parameters = {
            'user_id': 42  // 'status' is missing
        };
        const expected_sql = "SELECT * FROM users WHERE id = $1 AND status = $2";
        const expected_values = [42];  // 'status' is not included

        const [new_sql, value_list] = prepareQuery(sql_query, parameters);
        expect(new_sql).toEqual(expected_sql);
        expect(value_list).toEqual(expected_values);
    });

    it('test_no_parameters', () => {
        const sql_query = "SELECT * FROM users";
        const parameters = {};  // No parameters provided
        const expected_sql = "SELECT * FROM users";
        const expected_values = [];

        const [new_sql, value_list] = prepareQuery(sql_query, parameters);
        expect(new_sql).toEqual(expected_sql);
        expect(value_list).toEqual(expected_values);
    });

    it('test_multiple_same_parameters', () => {
        const sql_query = "SELECT * FROM users WHERE id = $user_id AND status = $user_id";
        const parameters = {
            'user_id': 42
        };
        const expected_sql = "SELECT * FROM users WHERE id = $1 AND status = $1";
        const expected_values = [42];  // Only one value for 'user_id'

        const [new_sql, value_list] = prepareQuery(sql_query, parameters);
        expect(new_sql).toEqual(expected_sql);
        expect(value_list).toEqual(expected_values);
    });

    it('test_special_characters_in_parameters', () => {
        const sql_query = "INSERT INTO users (name, email) VALUES ($name, $email)";
        const parameters = {
            'name': "John Doe",
            'email': "john.doe@example.com"
        };
        const expected_sql = "INSERT INTO users (name, email) VALUES ($1, $2)";
        const expected_values = ["John Doe", "john.doe@example.com"];

        const [new_sql, value_list] = prepareQuery(sql_query, parameters);
        expect(new_sql).toEqual(expected_sql);
        expect(value_list).toEqual(expected_values);
    });
});
```

### Explanation:
1. **Import Statement**: The `prepareQuery` function is assumed to be defined in a separate file and imported at the beginning of the test suite.
2. **Describe Block**: The `describe` block is used to group the tests under a common description.
3. **It Blocks**: Each `it` block represents a single test case.
4. **Assertions**: The `expect` function is used for assertions, similar to `self.assertEqual` in Python.
5. **Array Destructuring**: The result of `prepareQuery` is destructured into `[new_sql, value_list]` to match the Python tuple unpacking.

This conversion ensures that the functionality and logic of the tests are preserved while adapting to Jest's syntax and conventions.