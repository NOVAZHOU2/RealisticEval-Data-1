Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JavaScript documentation standards using JSDoc format:

```javascript
/**
 * This function modifies a SQL query string containing named parameters
 * (like $name, $age) into a format compatible with libraries that require
 * positional parameters (like $1, $2, etc.), such as asyncpg. It returns
 * a tuple containing the modified SQL string and a list of parameter values
 * ordered according to their new positions in the query.
 * 
 * Example:
 *   Input:
 *     sql: "SELECT * FROM users WHERE id = $user_id AND status = $status"
 *     params: {'user_id': 42, 'status': 'active'}
 *   Output:
 *     ["SELECT * FROM users WHERE id = $1 AND status = $2", [42, 'active']]
 * 
 * @param {string} sql - The original SQL query string with named parameters.
 * @param {Object} params - A dictionary mapping parameter names to their values.
 * @returns {Array} - An array where the first element is the modified SQL query string
 *                    with positional parameters, and the second element is a list of
 *                    parameter values sorted according to the order of the positional parameters.
 */
function prepareQuery(sql, params) {
    // Find all occurrences of named parameters in the SQL string
    const namedParams = sql.match(/\$(\w+)/g).map(match => match.slice(1));

    // Remove duplicates while preserving order
    const uniqueParams = [...new Set(namedParams)];

    // Substitute each named parameter with its corresponding positional parameter
    uniqueParams.forEach((param, index) => {
        sql = sql.replace(new RegExp(`\\$${param}`, 'g'), `$${index + 1}`);
    });

    // Prepare the list of values corresponding to the order of the positional parameters
    const values = uniqueParams.filter(param => param in params).map(param => params[param]);

    return [sql, values];
}

// Example usage
const sql = "SELECT * FROM users WHERE id = $user_id AND status = $status";
const params = { user_id: 42, status: 'active' };
console.log(prepareQuery(sql, params));
```

### Explanation:
1. **JSDoc Comments**: The Python docstring has been converted to JSDoc format, providing detailed descriptions of the function's purpose, arguments, and return value.
2. **Function Signature**: The Python function signature `def prepare_query(sql: str, params: dict) -> tuple:` has been translated to the equivalent JavaScript function signature `function prepareQuery(sql, params)`.
3. **Regular Expression**: The regular expression used to find named parameters is implemented using JavaScript's `match` method.
4. **Removing Duplicates**: The `Set` object is used to remove duplicates while preserving the order of the named parameters.
5. **Substituting Parameters**: Each named parameter is replaced with its corresponding positional parameter using a regular expression.
6. **Preparing Values**: The values are extracted from the `params` object based on the order of the positional parameters.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JavaScript documentation standards.