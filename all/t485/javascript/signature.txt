Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * This function modifies a SQL query string containing named parameters
 * (like $name, $age) into a format compatible with libraries that require
 * positional parameters (like $1, $2, etc.), such as asyncpg. It returns
 * a tuple containing the modified SQL string and a list of parameter values
 * ordered according to their new positions in the query.
 * 
 * Example:
 *   Input:
 *     sql: "SELECT * FROM users WHERE id = $user_id AND status = $status"
 *     params: {"user_id": 42, "status": "active"}
 *   Output:
 *     ["SELECT * FROM users WHERE id = $1 AND status = $2", [42, "active"]]
 *
 * @param {string} sql - The original SQL query string with named parameters.
 * @param {Object} params - A dictionary mapping parameter names to their values.
 * @returns {Array} - An array where the first element is the modified SQL query string
 *                    with positional parameters, and the second element is an array of
 *                    parameter values sorted according to the order of the positional parameters.
 */
const prepareQuery = (sql, params) => {
    // Find all occurrences of named parameters in the SQL string
    const namedParams = sql.match(/\$(\w+)/g).map(match => match.slice(1));

    // Remove duplicates while preserving order
    const uniqueParams = [...new Set(namedParams)];

    // Substitute each named parameter with its corresponding positional parameter
    for (let index = 0; index < uniqueParams.length; index++) {
        const param = uniqueParams[index];
        sql = sql.replace(new RegExp(`\\$${param}`, 'g'), `$${index + 1}`);
    }

    // Prepare the list of values corresponding to the order of the positional parameters
    const values = uniqueParams.map(param => params[param]).filter(value => value !== undefined);

    return [sql, values];
};

// Example usage
const sql = "SELECT * FROM users WHERE id = $user_id AND status = $status";
const params = { user_id: 42, status: 'active' };

console.log(prepareQuery(sql, params));
```

### Explanation:
1. **JSDoc Comments**:
   - The JSDoc comments are structured to provide a clear description of the function's purpose, examples, and parameters.
   - The `@param` tags describe the types and meanings of the input parameters.
   - The `@returns` tag describes the type and structure of the return value.

2. **Function Implementation**:
   - The function `prepareQuery` is defined using the ES6 arrow function syntax.
   - The `sql.match` method is used to find all named parameters in the SQL string.
   - The `Set` is used to remove duplicates while preserving the order.
   - The `replace` method is used to substitute named parameters with positional parameters.
   - The `map` and `filter` methods are used to create the list of values.

3. **Example Usage**:
   - The example usage demonstrates how to call the function with sample inputs and outputs the result.

This JavaScript code preserves the functionality and structure of the original Python code while adhering to JavaScript documentation standards.