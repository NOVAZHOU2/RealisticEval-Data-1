Certainly! Below is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <regex>

/**
 * This function modifies a SQL query string containing named parameters
 * (like $name, $age) into a format compatible with libraries that require
 * positional parameters (like $1, $2, etc.), such as asyncpg. It returns
 * a pair containing the modified SQL string and a vector of parameter values
 * ordered according to their new positions in the query.
 * 
 * Example:
 *     Input:
 *         sql: SELECT * FROM users WHERE id = $user_id AND status = $status
 *         params: {{"user_id", "42"}, {"status", "active"}}
 *     Output:
 *         Modified SQL: SELECT * FROM users WHERE id = $1 AND status = $2
 *         Values: ["42", "active"]
 * 
 * @param sql The original SQL query string with named parameters.
 * @param params A map mapping parameter names to their values.
 * @return A pair where the first element is the modified SQL query string with positional parameters,
 *         and the second element is a vector of parameter values sorted according to the order of the positional parameters.
 */
std::pair<std::string, std::vector<std::string>> prepare_query(const std::string& sql, const std::map<std::string, std::string>& params) {
    // Find all occurrences of named parameters in the SQL string
    std::regex named_param_pattern("\\$([a-zA-Z][a-zA-Z0-9]*)");
    std::sregex_iterator it(sql.begin(), sql.end(), named_param_pattern);
    std::sregex_iterator end;

    std::vector<std::string> named_params;
    for (; it != end; ++it) {
        named_params.push_back(it->str());
    }

    // Remove duplicates while preserving order
    std::map<std::string, bool> seen;
    std::vector<std::string> unique_params;
    for (const auto& param : named_params) {
        std::string paramName = param.substr(1); // Remove the '$' prefix
        if (seen.find(paramName) == seen.end()) {
            seen[paramName] = true;
            unique_params.push_back(param);
        }
    }

    // Substitute each named parameter with its corresponding positional parameter
    for (size_t index = 1; index <= unique_params.size(); ++index) {
        std::string param = unique_params[index - 1];
        std::string paramName = param.substr(1); // Remove the '$' prefix
        std::string replacement = "$" + std::to_string(index);
        sql = std::regex_replace(sql, std::regex("\\$" + paramName), replacement);
    }

    // Prepare the list of values corresponding to the order of the positional parameters
    std::vector<std::string> values;
    for (const auto& param : unique_params) {
        std::string paramName = param.substr(1); // Remove the '$' prefix
        auto it = params.find(paramName);
        if (it != params.end()) {
            values.push_back(it->second);
        }
    }

    return {sql, values};
}

int main() {
    std::string sql = "SELECT * FROM users WHERE id = $user_id AND status = $status";
    std::map<std::string, std::string> params = {{"user_id", "42"}, {"status", "active"}};

    auto result = prepare_query(sql, params);
    std::cout << "Modified SQL: " << result.first << std::endl;
    std::cout << "Values: ";
    for (const auto& value : result.second) {
        std::cout << value << " ";
    }
    std::cout << std::endl;

    return 0;
}
```

### Explanation:
1. **Header Files**: The necessary header files (`<iostream>`, `<string>`, `<vector>`, `<map>`, `<regex>`) are included.
2. **Function Definition**: The `prepare_query` function takes a `std::string` for the SQL query and a `std::map<std::string, std::string>` for the parameters.
3. **Documentation**: The Python docstring is translated into a C++ style comment block.
4. **Regular Expression**: The regular expression `\\$([a-zA-Z][a-zA-Z0-9]*)` is used to find named parameters in the SQL string.
5. **Removing Duplicates**: A `std::map` is used to remove duplicates while preserving the order of the named parameters.
6. **Substitution**: Each named parameter is replaced with its corresponding positional parameter using `std::regex_replace`.
7. **Preparing Values**: The values are collected into a `std::vector<std::string>` based on the order of the positional parameters.
8. **Main Function**: An example usage of the `prepare_query` function is shown in the `main` function.