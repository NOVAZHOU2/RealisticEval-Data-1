Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Java-style comments and Javadoc documentation. The Python function signature and logic have been translated to Java, ensuring that the functionality remains consistent.

```java
package org.real.temp;

import java.util.*;
import java.util.regex.*;

/**
 * This class provides methods to modify SQL queries by converting named parameters
 * (like $name, $age) into positional parameters (like $1, $2, etc.). It also returns
 * the modified SQL string along with a list of parameter values sorted according to
 * their new positions in the query.
 */
public class Answer {

    /**
     * Modifies a SQL query string containing named parameters (like $name, $age)
     * into a format compatible with libraries that require positional parameters
     * (like $1, $2, etc.), such as asyncpg. It returns a tuple containing the
     * modified SQL string and a list of parameter values ordered according to
     * their new positions in the query.
     * 
     * Example:
     *     Input:
     *         sql: SELECT * FROM users WHERE id = $user_id AND status = $status
     *         params: {'user_id': 42, 'status': 'active'}
     *     Output:
     *         SELECT * FROM users WHERE id = $1 AND status = $2, [42, 'active']
     * 
     * @param sql The original SQL query string with named parameters.
     * @param params A map mapping parameter names to their values.
     * @return A tuple where the first element is the modified SQL query string with positional parameters,
     *         and the second element is a list of parameter values sorted according to the order of the positional parameters.
     */
    public static Tuple<String, List<Object>> prepareQuery(String sql, Map<String, Object> params) {
        // Find all occurrences of named parameters in the SQL string
        Pattern pattern = Pattern.compile("\\$(\\w+)");
        Matcher matcher = pattern.matcher(sql);
        Set<String> namedParams = new LinkedHashSet<>();

        while (matcher.find()) {
            namedParams.add(matcher.group(1)); // Extracting the parameter name without the '$'
        }

        // Remove duplicates while preserving order
        List<String> uniqueParams = new ArrayList<>(namedParams);

        // Substitute each named parameter with its corresponding positional parameter
        for (int index = 0; index < uniqueParams.size(); index++) {
            String param = uniqueParams.get(index);
            String positionalParam = "$" + (index + 1);
            sql = sql.replace("$" + param, positionalParam);
        }

        // Prepare the list of values corresponding to the order of the positional parameters
        List<Object> values = new ArrayList<>();
        for (String param : uniqueParams) {
            if (params.containsKey(param)) {
                values.add(params.get(param));
            }
        }

        return new Tuple<>(sql, values);
    }

    // A simple Tuple class to hold two values
    public static class Tuple<X, Y> {
        public final X first;
        public final Y second;

        public Tuple(X first, Y second) {
            this.first = first;
            this.second = second;
        }
    }

    // Example usage
    public static void main(String[] args) {
        String sql = "SELECT * FROM users WHERE id = $user_id AND status = $status";
        Map<String, Object> params = new HashMap<>();
        params.put("user_id", 42);
        params.put("status", "active");

        Tuple<String, List<Object>> result = prepareQuery(sql, params);
        System.out.println("Modified SQL: " + result.first);
        System.out.println("Values: " + result.second);
    }
}
```

### Explanation:
1. **Javadoc Comments**: The Javadoc comments provide detailed explanations of the method's purpose, parameters, and return value.
2. **Pattern and Matcher**: Used to find all named parameters in the SQL string.
3. **LinkedHashSet**: Used to remove duplicates while preserving the order of named parameters.
4. **Replacement Logic**: Replaces named parameters with positional parameters.
5. **List of Values**: Constructs a list of values based on the order of positional parameters.
6. **Tuple Class**: A simple class to hold two values, similar to Python's tuple.

This Java code maintains the functionality and structure of the original Python code while adhering to Java's syntax and conventions.