Certainly! Below is the equivalent Java code for the provided Python code, organized within the `org.real.temp` package and the `Answer` class. This includes handling of type declarations, method signatures, and other necessary adjustments:

```java
package org.real.temp;

import java.util.*;
import java.util.regex.*;

public class Answer {

    /**
     * This method modifies a SQL query string containing named parameters
     * (like $name, $age) into a format compatible with libraries that require
     * positional parameters (like $1, $2, etc.), such as asyncpg. It returns
     * a tuple containing the modified SQL string and a list of parameter values
     * ordered according to their new positions in the query.
     *
     * @param sql The original SQL query string with named parameters.
     * @param params A map mapping parameter names to their values.
     * @return A tuple where the first element is the modified SQL query string
     *         with positional parameters, and the second element is a list of
     *         parameter values sorted according to the order of the positional parameters.
     */
    public static Tuple<String, List<Object>> prepareQuery(String sql, Map<String, Object> params) {
        // Find all occurrences of named parameters in the SQL string
        Pattern pattern = Pattern.compile("\\$\\w+");
        Matcher matcher = pattern.matcher(sql);
        Set<String> namedParams = new LinkedHashSet<>();

        while (matcher.find()) {
            namedParams.add(matcher.group());
        }

        // Remove duplicates while preserving order
        List<String> uniqueParams = new ArrayList<>(namedParams);

        // Substitute each named parameter with its corresponding positional parameter
        for (int index = 0; index < uniqueParams.size(); index++) {
            String param = uniqueParams.get(index);
            String positionalParam = "$" + (index + 1);
            sql = sql.replace(param, positionalParam);
        }

        // Prepare the list of values corresponding to the order of the positional parameters
        List<Object> values = new ArrayList<>();
        for (String param : uniqueParams) {
            if (params.containsKey(param.substring(1))) { // Removing the '$' prefix
                values.add(params.get(param.substring(1)));
            }
        }

        return new Tuple<>(sql, values);
    }

    // A simple Tuple class to hold two values
    public static class Tuple<X, Y> {
        public final X first;
        public final Y second;

        public Tuple(X first, Y second) {
            this.first = first;
            this.second = second;
        }
    }

    // Example usage
    public static void main(String[] args) {
        String sql = "SELECT * FROM users WHERE name = $name AND age = $age";
        Map<String, Object> params = new HashMap<>();
        params.put("name", "Alice");
        params.put("age", 30);

        Tuple<String, List<Object>> result = prepareQuery(sql, params);
        System.out.println("Modified SQL: " + result.first);
        System.out.println("Values: " + result.second);
    }
}
```

### Explanation:
1. **Pattern and Matcher**: Used to find all named parameters in the SQL string.
2. **LinkedHashSet**: Used to remove duplicates while preserving the order of named parameters.
3. **Replacement Logic**: Replaces named parameters with positional parameters.
4. **List of Values**: Constructs a list of values based on the order of positional parameters.
5. **Tuple Class**: A simple class to hold two values, similar to Python's tuple.

This Java code maintains the functionality and logic of the original Python code while adapting to Java's syntax and conventions.