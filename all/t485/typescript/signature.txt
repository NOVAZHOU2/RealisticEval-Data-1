Certainly! Hereâ€™s the equivalent TypeScript code, including proper type annotations and JSDoc-style documentation comments:

```typescript
import { match, replace } from 'lodash';

/**
 * This function modifies a SQL query string containing named parameters
 * (like $name, $age) into a format compatible with libraries that require
 * positional parameters (like $1, $2, etc.), such as asyncpg. It returns
 * a tuple containing the modified SQL string and a list of parameter values
 * ordered according to their new positions in the query.
 * 
 * Example:
 *   Input:
 *     sql: "SELECT * FROM users WHERE id = $user_id AND status = $status"
 *     params: { user_id: 42, status: 'active' }
 *   Output:
 *     ["SELECT * FROM users WHERE id = $1 AND status = $2", [42, 'active']]
 * 
 * @param sql - The original SQL query string with named parameters.
 * @param params - A dictionary mapping parameter names to their values.
 * @returns A tuple where the first element is the modified SQL query string with positional parameters, and the second element is a list of parameter values sorted according to the order of the positional parameters.
 */
function prepareQuery(sql: string, params: Record<string, any>): [string, any[]] {
    // Find all occurrences of named parameters in the SQL string
    const namedParams = match(sql, /\$(\w+)/g);

    // Remove duplicates while preserving order
    const uniqueParams = Array.from(new Set(namedParams));

    // Substitute each named parameter with its corresponding positional parameter
    let modifiedSql = sql;
    for (let index = 0; index < uniqueParams.length; index++) {
        const param = uniqueParams[index];
        const paramName = param.substring(1); // Extract the name without the '$'
        modifiedSql = modifiedSql.replace(new RegExp(`\\$${paramName}`, 'g'), `$${index + 1}`);
    }

    // Prepare the list of values corresponding to the order of the positional parameters
    const values = uniqueParams.map(param => {
        const paramName = param.substring(1); // Extract the name without the '$'
        return params[paramName];
    }).filter(value => value !== undefined);

    return [modifiedSql, values];
}

// Example usage
const sql = "SELECT * FROM users WHERE id = $user_id AND status = $status";
const params = { user_id: 42, status: 'active' };
const [modifiedSql, values] = prepareQuery(sql, params);
console.log(modifiedSql); // "SELECT * FROM users WHERE id = $1 AND status = $2"
console.log(values);      // [42, 'active']
```

### Explanation:
1. **JSDoc Documentation**:
   - The JSDoc comment block provides detailed documentation for the function, including examples and argument descriptions.

2. **Type Annotations**:
   - `sql` is defined as `string`.
   - `params` is defined as `Record<string, any>` to represent a dictionary of parameter names and values.
   - The return type is `[string, any[]]` to match the Python tuple return type.

3. **Regular Expressions**:
   - Used `match` from lodash to find all named parameters in the SQL string.
   - Used `Set` to remove duplicates while preserving the order.

4. **String Replacement**:
   - Used `replace` with a regular expression to substitute named parameters with positional parameters.

5. **Value Extraction**:
   - Used `map` and `filter` to create a list of values corresponding to the order of the positional parameters.

6. **Example Usage**:
   - Provided an example usage to demonstrate how the function works.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate adjustments for TypeScript syntax and idioms.