Here's the TypeScript version of your Python code:

```typescript
import { match } from "assert";

/**
 * This function modifies a SQL query string containing named parameters
 * (like $name, $age) into a format compatible with libraries that require
 * positional parameters (like $1, $2, etc.), such as asyncpg. It returns
 * a tuple containing the modified SQL string and a list of parameter values
 * ordered according to their new positions in the query.
 * For example:
 *     input:
 *         sql: SELECT * FROM users WHERE id = $user_id AND status = $status
 *         params: {'user_id': 42,'status': 'active'}
 *     output:
 *         SELECT * FROM users WHERE id = $1 AND status = $2,[42, 'active']
 *
 * @param sql - The original SQL query string with named parameters.
 * @param params - A dictionary mapping parameter names to their values.
 * @returns A tuple where the first element is the modified SQL query string with positional parameters, and the second element is a list of parameter values sorted according to the order of the positional parameters.
 */
function prepareQuery(sql: string, params: {[key: string]: any}): [string, any[]] {
    // ...
}
```

Please note that I've used `any` for the type of values in the `params` object since the exact types aren't specified in the original Python code. If you have specific types for these values, you can replace `any` with those types.