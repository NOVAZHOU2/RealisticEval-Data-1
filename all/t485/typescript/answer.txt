Hereâ€™s the equivalent TypeScript code, including type definitions and logic:

```typescript
import { replace, match } from 'lodash';

function prepareQuery(sql: string, params: Record<string, any>): [string, any[]] {
    /**
     * This function modifies a SQL query string containing named parameters
     * (like $name, $age) into a format compatible with libraries that require
     * positional parameters (like $1, $2, etc.), such as asyncpg. It returns
     * a tuple containing the modified SQL string and a list of parameter values
     * ordered according to their new positions in the query.
     *
     * @param sql - The original SQL query string with named parameters.
     * @param params - A dictionary mapping parameter names to their values.
     * @returns A tuple where the first element is the modified SQL query string
     *          with positional parameters, and the second element is a list of
     *          parameter values sorted according to the order of the positional parameters.
     */

    // Find all occurrences of named parameters in the SQL string
    const namedParams = sql.match(/\$(\w+)/g)?.map((match) => match.substring(1)) || [];

    // Remove duplicates while preserving order
    const uniqueParams = Array.from(new Set(namedParams));

    // Substitute each named parameter with its corresponding positional parameter
    let modifiedSql = sql;
    for (let index = 0; index < uniqueParams.length; index++) {
        const param = uniqueParams[index];
        modifiedSql = modifiedSql.replace(new RegExp(`\\$${param}`, 'g'), `$${index + 1}`);
    }

    // Prepare the list of values corresponding to the order of the positional parameters
    const values = uniqueParams.map((param) => params[param]);

    return [modifiedSql, values];
}

// Example usage
const sql = "SELECT * FROM users WHERE name = $name AND age = $age";
const params = { name: "John Doe", age: 30 };

const [modifiedSql, values] = prepareQuery(sql, params);
console.log(modifiedSql); // Output: SELECT * FROM users WHERE name = $1 AND age = $2
console.log(values); // Output: ["John Doe", 30]
```

### Explanation:
1. **Type Definitions**:
   - `sql` is a string.
   - `params` is a dictionary (`Record<string, any>`).
   - The function returns a tuple `[string, any[]]`.

2. **Regular Expressions**:
   - Used `match` to find all named parameters in the SQL string.
   - Used `replace` with a global regex to substitute named parameters with positional parameters.

3. **Removing Duplicates**:
   - Used `Set` to remove duplicates while preserving the order.

4. **Mapping Parameters**:
   - Used `map` to create an array of parameter values.

This TypeScript code preserves the functionality and logic of the Python code while adapting it to TypeScript's static type system and idioms.