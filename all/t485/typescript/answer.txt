Here's the equivalent TypeScript code for your Python function:

```typescript
function prepareQuery(sql: string, params: { [key: string]: any }): [string, any[]] {
    // Create an array from the keys of the params object
    const paramKeys = Object.keys(params);

    // Sort the keys based on the order they appear in the SQL string
    const sortedParamKeys = paramKeys.sort((a, b) => sql.indexOf(`$${a}`) - sql.indexOf(`$${b}`));

    // Replace each named parameter in the SQL string with its corresponding positional parameter
    let modifiedSql = sql;
    sortedParamKeys.forEach((key, index) => {
        modifiedSql = modifiedSql.replace(new RegExp(`\\$${key}`, 'g'), `$${index + 1}`);
    });

    // Extract the values of the parameters in the order of the positional parameters
    const paramValues = sortedParamKeys.map(key => params[key]);

    return [modifiedSql, paramValues];
}
```

This TypeScript function does the same thing as your Python function. It takes a SQL query string and a dictionary of parameter values, replaces the named parameters with positional parameters, and returns a tuple containing the modified SQL query string and a list of parameter values in the correct order.