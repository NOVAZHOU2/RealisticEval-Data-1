Sure! Below is the equivalent TypeScript test case using Jest for the provided Python unittest test class:

```typescript
import { describe, it, expect } from '@jest/globals';

// Assuming the function is defined in a file called prepareQuery.ts
import { prepareQuery } from './prepareQuery';

describe('prepareQuery', () => {
    it('should convert named parameters to positional parameters', () => {
        const sql = 'SELECT * FROM users WHERE id = $user_id AND status = $status';
        const params = { user_id: 42, status: 'active' };

        const result = prepareQuery(sql, params);

        expect(result).toEqual([
            'SELECT * FROM users WHERE id = $1 AND status = $2',
            [42, 'active']
        ]);
    });

    it('should handle multiple named parameters correctly', () => {
        const sql = 'INSERT INTO users (id, name, age) VALUES ($user_id, $username, $user_age)';
        const params = { user_id: 42, username: 'John Doe', user_age: 30 };

        const result = prepareQuery(sql, params);

        expect(result).toEqual([
            'INSERT INTO users (id, name, age) VALUES ($1, $2, $3)',
            [42, 'John Doe', 30]
        ]);
    });

    it('should handle empty parameters correctly', () => {
        const sql = 'SELECT * FROM users';
        const params = {};

        const result = prepareQuery(sql, params);

        expect(result).toEqual([
            'SELECT * FROM users',
            []
        ]);
    });
});
```

### Explanation:
- **`describe`**: Groups related tests together.
- **`it`**: Defines an individual test case.
- **`expect`**: Used to assert that the actual value matches the expected value.
- **`toEqual`**: Compares two objects or arrays deeply to check if they are equal.

Make sure you have Jest installed in your project. If not, you can install it using npm or yarn:

```bash
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run your tests using:

```bash
npx jest
# or
yarn test
```