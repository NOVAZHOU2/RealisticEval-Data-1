Certainly! Below is the equivalent TypeScript code for the provided Python function:

```typescript
function calculateRedProportion(pixels: [number, number, number][]): number {
    /**
     * Calculate the proportion of red in a list of pixels.
     *
     * @param pixels - An array of pixels, where each pixel is represented as a tuple of [R, G, B].
     * @returns The proportion of red in the list of pixels, as a value between 0 and 1.
     */
    if (pixels.length === 0) {
        return 0.0;
    }

    let totalRed = 0;
    let totalIntensity = 0;

    for (const [r, g, b] of pixels) {
        totalRed += r;
        totalIntensity += (r + g + b);
    }

    // Avoid division by zero
    if (totalIntensity === 0) {
        return 0.0;
    }

    const redProportion = totalRed / totalIntensity;
    return redProportion;
}
```

### Explanation:
1. **Type Definitions**:
   - The `pixels` parameter is defined as an array of tuples `[number, number, number][]`, which corresponds to the Python `List[Tuple[int, int, int]]`.

2. **Function Signature**:
   - The function `calculateRedProportion` takes an array of tuples and returns a number, which matches the Python function signature.

3. **Logic**:
   - The logic remains the same, including the checks for empty arrays and avoiding division by zero.

4. **Variable Names**:
   - Variable names have been adjusted to follow TypeScript conventions (`totalRed`, `totalIntensity`, `redProportion`).

5. **Loop**:
   - The loop uses a destructuring assignment to extract `r`, `g`, and `b` from each tuple in the array.

This TypeScript code maintains the original functionality and logic of the Python code while adhering to TypeScript's static type system and best practices.