Certainly! Below is the equivalent TypeScript code for the provided Python function, including appropriate JSDoc-style documentation comments:

```typescript
/**
 * Analyze a list of pixels, each represented by RGB, and calculate the proportion of red in the list.
 *
 * @param pixels - An array of pixels, where each pixel is represented as a tuple of [R, G, B].
 * @returns The proportion of red in the list of pixels, as a value between 0 and 1.
 */
function calculateRedProportion(pixels: [number, number, number][]): number {
    if (pixels.length === 0) {
        return 0.0;
    }

    let totalRed = 0;
    let totalIntensity = 0;

    for (const [r, g, b] of pixels) {
        totalRed += r;
        totalIntensity += (r + g + b);
    }

    // Avoid division by zero
    if (totalIntensity === 0) {
        return 0.0;
    }

    const redProportion = totalRed / totalIntensity;
    return redProportion;
}
```

### Explanation:
1. **Function Signature**:
   - The function `calculateRedProportion` is defined with the type signature `([number, number, number][]): number`. This matches the Python type `List[Tuple[int, int, int]] -> float`.

2. **JSDoc Documentation**:
   - The JSDoc-style comments are used to provide detailed documentation for the function, parameters, and return type.

3. **Logic**:
   - The logic remains the same, including the check for an empty array and the calculation of the red proportion.

4. **Variable Names**:
   - Variable names are adjusted to follow TypeScript conventions (`totalRed`, `totalIntensity`, `redProportion`).

5. **Loop**:
   - The loop uses a destructuring assignment to extract `r`, `g`, and `b` from each tuple in the array.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript's static type system and best practices.