Certainly! Below is the equivalent TypeScript test class using Jest, ensuring that the functionality and logic of the tests are preserved. The provided Python unittest test cases will be converted to Jest test cases, and the necessary type annotations and Jest assertions will be included.

### TypeScript Code with Jest Tests

First, ensure you have Jest installed in your TypeScript project:

```sh
npm install --save-dev jest @types/jest ts-jest
```

Add Jest configuration to your `tsconfig.json`:

```json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"],
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node"
  }
}
```

Now, here is the TypeScript test class using Jest:

```typescript
import { calculateRedProportion } from './path/to/calculateRedProportion'; // Import the function

describe('TestCalculateRedProportion', () => {
  it('should return 1.0 for all fully red pixels', () => {
    const pixels: [number, number, number][] = [[255, 0, 0], [255, 0, 0], [255, 0, 0]];
    const result = calculateRedProportion(pixels);
    expect(result).toBeCloseTo(1.0);
  });

  it('should return 0.0 for no red component in any pixel', () => {
    const pixels: [number, number, number][] = [[0, 255, 0], [0, 0, 255], [0, 255, 255]];
    const result = calculateRedProportion(pixels);
    expect(result).toBeCloseTo(0.0);
  });

  it('should return 0.0 for an empty list of pixels', () => {
    const pixels: [number, number, number][] = [];
    const result = calculateRedProportion(pixels);
    expect(result).toBeCloseTo(0.0);
  });

  it('should return 0.0 for all black pixels', () => {
    const pixels: [number, number, number][] = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
    const result = calculateRedProportion(pixels);
    expect(result).toBeCloseTo(0.0);
  });
});
```

### Explanation:
1. **Import Function**:
   - Import the `calculateRedProportion` function from the appropriate module.

2. **Describe Block**:
   - Use the `describe` block to group the test cases under a descriptive name.

3. **Test Cases**:
   - Each test case is defined using the `it` block, which describes the expected behavior.
   - The `expect` function is used with appropriate Jest matchers to verify the results.

4. **Type Annotations**:
   - The `pixels` variable is annotated with the type `[number, number, number][]` to match the tuple array type.

5. **Assertion Methods**:
   - The `toBeCloseTo` matcher is used to handle floating-point comparisons, similar to `assertAlmostEqual` in Python.

This TypeScript code preserves the original functionality and logic of the Python unittest test cases while adapting them to Jest's syntax and conventions.