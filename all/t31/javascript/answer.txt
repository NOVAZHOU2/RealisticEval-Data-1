Sure! Below is the equivalent JavaScript code for the provided Python function:

```javascript
function calculateRedProportion(pixels) {
    /**
     * Calculate the proportion of red in a list of pixels.
     *
     * @param {Array<Array<number>>} pixels - A list of pixels, where each pixel is represented as an array [R, G, B].
     * @returns {number} The proportion of red in the list of pixels, as a value between 0 and 1.
     */
    if (!pixels.length) {
        return 0.0;
    }

    let totalRed = 0;
    let totalIntensity = 0;

    for (const [r, g, b] of pixels) {
        totalRed += r;
        totalIntensity += (r + g + b);
    }

    // Avoid division by zero
    if (totalIntensity === 0) {
        return 0.0;
    }

    const redProportion = totalRed / totalIntensity;
    return redProportion;
}
```

### Explanation:
- **Function Definition**: The `calculateRedProportion` function takes an array of arrays (`pixels`) as input.
- **Type Annotations**: In JavaScript, we don't have type annotations like Python's `typing`, but we can use comments to describe the types.
- **Empty Check**: The function checks if the `pixels` array is empty using `!pixels.length`.
- **Looping Through Pixels**: We use a `for...of` loop to iterate over the `pixels` array.
- **Division by Zero Check**: We ensure that `totalIntensity` is not zero before performing the division.
- **Return Value**: The function returns the calculated `redProportion`.

This JavaScript code maintains the same functionality, logic, and structure as the original Python code.