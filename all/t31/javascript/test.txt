Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will convert the Python unittest class into a Jest test suite, ensuring that the functionality and logic of the tests are maintained.

### Python Unittest Code:
```python
import unittest

class TestCalculateRedProportion(unittest.TestCase):

    def test_all_red_pixels(self):
        # All pixels are fully red
        pixels = [(255, 0, 0), (255, 0, 0), (255, 0, 0)]
        result = calculate_red_proportion(pixels)
        self.assertAlmostEqual(result, 1.0)

    def test_no_red_pixels(self):
        # No red component in any pixel
        pixels = [(0, 255, 0), (0, 0, 255), (0, 255, 255)]
        result = calculate_red_proportion(pixels)
        self.assertAlmostEqual(result, 0.0)

    def test_empty_pixel_list(self):
        # Empty list of pixels
        pixels = []
        result = calculate_red_proportion(pixels)
        self.assertAlmostEqual(result, 0.0)

    def test_all_black_pixels(self):
        # All pixels are black
        pixels = [(0, 0, 0), (0, 0, 0), (0, 0, 0)]
        result = calculate_red_proportion(pixels)
        self.assertAlmostEqual(result, 0.0)
```

### Equivalent Jest Test Suite:
```javascript
const calculateRedProportion = require('./calculateRedProportion');

describe('TestCalculateRedProportion', () => {
    it('should return 1.0 when all pixels are fully red', () => {
        const pixels = [[255, 0, 0], [255, 0, 0], [255, 0, 0]];
        const result = calculateRedProportion(pixels);
        expect(result).toBeCloseTo(1.0);
    });

    it('should return 0.0 when no red component in any pixel', () => {
        const pixels = [[0, 255, 0], [0, 0, 255], [0, 255, 255]];
        const result = calculateRedProportion(pixels);
        expect(result).toBeCloseTo(0.0);
    });

    it('should return 0.0 when the pixel list is empty', () => {
        const pixels = [];
        const result = calculateRedProportion(pixels);
        expect(result).toBeCloseTo(0.0);
    });

    it('should return 0.0 when all pixels are black', () => {
        const pixels = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
        const result = calculateRedProportion(pixels);
        expect(result).toBeCloseTo(0.0);
    });
});
```

### Explanation:
1. **Import Statement**:
   - In Jest, we import the `calculateRedProportion` function from the module where it is defined.

2. **Describe Block**:
   - The `describe` block is used to group related tests together. It is similar to the `unittest.TestCase` class in Python.

3. **It Blocks**:
   - Each `it` block represents a single test case. It is similar to a method in the `unittest.TestCase` class.

4. **Assertions**:
   - The `expect` function is used for assertions. `toBeCloseTo` is used to check floating-point numbers for approximate equality, which is similar to `assertAlmostEqual` in Python.

5. **Data Structures**:
   - In JavaScript, we use arrays of arrays to represent the pixels, just like in Python. Each pixel is represented as `[R, G, B]`.

By following these steps, the Jest test suite maintains the same functionality and logic as the original Python unittest class.