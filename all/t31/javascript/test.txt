Sure! Below is an equivalent JavaScript test case using Jest for your Python function `calculate_red_proportion`. Note that I'll assume you have a corresponding JavaScript function named `calculateRedProportion` that performs the same calculation.

```javascript
// Assuming calculateRedProportion is defined somewhere in your codebase
const { calculateRedProportion } = require('./path-to-your-function');

describe('calculateRedProportion', () => {
  it('should return the correct proportion of red in the list of pixels', () => {
    const pixels = [
      [255, 0, 0], // Red
      [0, 255, 0], // Green
      [0, 0, 255], // Blue
      [255, 0, 0]  // Red again
    ];

    const result = calculateRedProportion(pixels);
    expect(result).toBeCloseTo(0.5, 2); // Expecting approximately 0.5 with 2 decimal places precision
  });

  it('should handle an empty list of pixels', () => {
    const pixels = [];

    const result = calculateRedProportion(pixels);
    expect(result).toBeCloseTo(0, 2); // Expecting 0 because there are no pixels
  });

  it('should handle a list of pixels with no red', () => {
    const pixels = [
      [0, 255, 0], // Green
      [0, 0, 255], // Blue
      [255, 255, 255] // White
    ];

    const result = calculateRedProportion(pixels);
    expect(result).toBeCloseTo(0, 2); // Expecting 0 because there is no red
  });
});
```

### Explanation:
1. **Import the Function**: Ensure that the `calculateRedProportion` function is imported correctly at the beginning of your test file.
2. **Describe Block**: The `describe` block groups related tests together under a common title.
3. **It Blocks**: Each `it` block contains a specific test case.
4. **Expectations**: The `expect` function is used to make assertions about the output of the `calculateRedProportion` function. In this case, we're checking if the returned value is close to the expected result using `toBeCloseTo`.
5. **Edge Cases**: Tests are included for edge cases such as an empty list and a list with no red pixels.

Make sure to adjust the path to the function (`./path-to-your-function`) according to your project structure.