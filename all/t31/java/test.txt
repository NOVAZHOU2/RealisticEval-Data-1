Sure, here's how you can convert your Python `unittest` test class to a Java JUnit test case. Since the provided Python code does not include any test cases, I'll create a simple example based on the function `calculate_red_proportion`.

First, let's define the Java version of the function:

```java
import java.util.List;
import java.util.Arrays;

public class PixelAnalyzer {
    public static double calculateRedProportion(List<int[]> pixels) {
        if (pixels == null || pixels.isEmpty()) {
            return 0.0;
        }

        int totalPixels = pixels.size();
        int redPixels = 0;

        for (int[] pixel : pixels) {
            if (pixel[0] > 0 && pixel[1] < 50 && pixel[2] < 50) { // Assuming red if R > 0 and G and B are low
                redPixels++;
            }
        }

        return (double) redPixels / totalPixels;
    }
}
```

Now, let's write the JUnit test case for this method:

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;
import java.util.List;

public class PixelAnalyzerTest {

    @Test
    public void testCalculateRedProportion() {
        List<int[]> pixels = Arrays.asList(
            new int[]{255, 0, 0}, // Red
            new int[]{0, 255, 0}, // Green
            new int[]{0, 0, 255}, // Blue
            new int[]{255, 0, 0}  // Red again
        );

        double result = PixelAnalyzer.calculateRedProportion(pixels);
        assertEquals(0.5, result, "The proportion of red should be 0.5");
    }

    @Test
    public void testEmptyPixelList() {
        List<int[]> pixels = Arrays.asList();

        double result = PixelAnalyzer.calculateRedProportion(pixels);
        assertEquals(0.0, result, "The proportion of red should be 0.0 for an empty list");
    }

    @Test
    public void testNoRedPixels() {
        List<int[]> pixels = Arrays.asList(
            new int[]{0, 255, 0}, // Green
            new int[]{0, 0, 255}, // Blue
            new int[]{100, 100, 100} // Gray
        );

        double result = PixelAnalyzer.calculateRedProportion(pixels);
        assertEquals(0.0, result, "The proportion of red should be 0.0 when there are no red pixels");
    }
}
```

In this Java test case, we've used JUnit 5 annotations (`@Test`) to mark the methods that contain test cases. We're testing different scenarios such as a list with red pixels, an empty list, and a list without any red pixels. The `assertEquals` method is used to verify that the calculated proportion matches the expected result.