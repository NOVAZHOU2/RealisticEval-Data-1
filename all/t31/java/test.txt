Certainly! Here is the equivalent Java JUnit test class for the provided Python unittest class. The Java test class will be placed in the package `org.real.temp` and named `Tester`. It will use JUnit annotations and assertions to ensure the functionality and logic of the tests are preserved.

### Java JUnit Test Class

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Test class for the calculateRedProportion method.
 */
public class Tester {

    /**
     * Test case for all fully red pixels.
     */
    @Test
    public void testAllRedPixels() {
        List<int[]> pixels = Arrays.asList(
                new int[]{255, 0, 0},
                new int[]{255, 0, 0},
                new int[]{255, 0, 0}
        );
        double result = calculateRedProportion(pixels);
        assertEquals(1.0, result, 0.001);
    }

    /**
     * Test case for no red component in any pixel.
     */
    @Test
    public void testNoRedPixels() {
        List<int[]> pixels = Arrays.asList(
                new int[]{0, 255, 0},
                new int[]{0, 0, 255},
                new int[]{0, 255, 255}
        );
        double result = calculateRedProportion(pixels);
        assertEquals(0.0, result, 0.001);
    }

    /**
     * Test case for an empty list of pixels.
     */
    @Test
    public void testEmptyPixelList() {
        List<int[]> pixels = new ArrayList<>();
        double result = calculateRedProportion(pixels);
        assertEquals(0.0, result, 0.001);
    }

    /**
     * Test case for all black pixels.
     */
    @Test
    public void testAllBlackPixels() {
        List<int[]> pixels = Arrays.asList(
                new int[]{0, 0, 0},
                new int[]{0, 0, 0},
                new int[]{0, 0, 0}
        );
        double result = calculateRedProportion(pixels);
        assertEquals(0.0, result, 0.001);
    }

    /**
     * Helper method to calculate the proportion of red in a list of pixels.
     *
     * @param pixels A list of pixels, where each pixel is represented as an array of [R, G, B].
     * @return The proportion of red in the list of pixels, as a value between 0 and 1.
     */
    private static double calculateRedProportion(List<int[]> pixels) {
        if (pixels.isEmpty()) {
            return 0.0;
        }

        int totalRed = 0;
        int totalIntensity = 0;

        for (int[] pixel : pixels) {
            int r = pixel[0];
            int g = pixel[1];
            int b = pixel[2];

            totalRed += r;
            totalIntensity += (r + g + b);
        }

        // Avoid division by zero
        if (totalIntensity == 0) {
            return 0.0;
        }

        double redProportion = (double) totalRed / totalIntensity;
        return redProportion;
    }
}
```

### Explanation:
1. **Package Declaration**: The Java code starts with the package declaration `package org.real.temp;`.
2. **Imports**:
   - Import `List`, `ArrayList`, and `Arrays` from the standard Java library.
   - Import `@Test` annotation and `assertEquals` method from JUnit.
3. **Class Definition**: The class `Tester` contains several test methods.
4. **JUnit Annotations**:
   - Each test method is annotated with `@Test` to indicate that it is a test case.
5. **Test Methods**:
   - `testAllRedPixels`: Tests the case where all pixels are fully red.
   - `testNoRedPixels`: Tests the case where no pixel has a red component.
   - `testEmptyPixelList`: Tests the case where the pixel list is empty.
   - `testAllBlackPixels`: Tests the case where all pixels are black.
6. **Assertions**:
   - `assertEquals` is used to verify the expected results with a tolerance of 0.001.
7. **Helper Method**:
   - The `calculateRedProportion` method is defined within the test class to perform the actual calculation.

This Java JUnit test class preserves the functionality and logic of the original Python unittest class while adhering to Java's syntax and conventions.