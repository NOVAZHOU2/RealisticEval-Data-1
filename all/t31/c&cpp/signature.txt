Certainly! Below is the equivalent C++ code for the given Python function, including the translation of type annotations, comments, and documentation:

```cpp
#include <vector>
#include <tuple>
#include <iostream>

// Function to calculate the proportion of red in a list of pixels.
// Each pixel is represented as a tuple of (R, G, B).
//
// Args:
//     pixels (const std::vector<std::tuple<int, int, int>>&): A list of pixels,
//         where each pixel is represented as a tuple of (R, G, B).
//
// Returns:
//     float: The proportion of red in the list of pixels, as a value between 0 and 1.
float calculateRedProportion(const std::vector<std::tuple<int, int, int>>& pixels) {
    if (pixels.empty()) {
        return 0.0f;
    }

    int totalRed = 0;
    int totalIntensity = 0;

    for (const auto& pixel : pixels) {
        int r, g, b;
        std::tie(r, g, b) = pixel;
        totalRed += r;
        totalIntensity += (r + g + b);
    }

    // Avoid division by zero
    if (totalIntensity == 0) {
        return 0.0f;
    }

    float redProportion = static_cast<float>(totalRed) / totalIntensity;
    return redProportion;
}

int main() {
    // Example usage
    std::vector<std::tuple<int, int, int>> pixels = {{255, 0, 0}, {0, 255, 0}, {0, 0, 255}};
    float result = calculateRedProportion(pixels);
    std::cout << "Red Proportion: " << result << std::endl;
    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `#include <vector>`: For using `std::vector`.
   - `#include <tuple>`: For using `std::tuple`.
   - `#include <iostream>`: For input/output operations.

2. **Function Documentation**:
   - The function documentation is translated into C++ comments using `//` for single-line comments and `/* */` for multi-line comments.
   - The purpose, arguments, and return values are clearly documented.

3. **Function Definition**:
   - `calculateRedProportion`: This function takes a vector of tuples representing RGB values and calculates the proportion of red.
   - The function signature includes the type `const std::vector<std::tuple<int, int, int>>&` for the input parameter and `float` for the return type.

4. **Empty Check**:
   - If the `pixels` vector is empty, the function returns `0.0f`.

5. **Loop Through Pixels**:
   - Using a range-based for loop to iterate through each pixel.
   - Unpack the tuple using `std::tie` to get individual color components.

6. **Total Calculations**:
   - Accumulate the total red value and the total intensity (sum of all color components).

7. **Avoid Division by Zero**:
   - Check if `totalIntensity` is zero to avoid division by zero.

8. **Return Red Proportion**:
   - Calculate the proportion of red and return it as a floating-point value.

9. **Example Usage**:
   - In the `main` function, an example vector of pixels is created and passed to `calculateRedProportion`, and the result is printed.

This conversion preserves the original purpose and structure of the Python code while adhering to C++ syntax and documentation standards.