Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite with appropriate assertions and test cases.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or install it using a package manager.

Here is the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>
#include <tuple>

// Function to calculate the proportion of red in a list of pixels.
// Each pixel is represented as a tuple of (R, G, B).
//
// Args:
//     pixels (const std::vector<std::tuple<int, int, int>>&): A list of pixels,
//         where each pixel is represented as a tuple of (R, G, B).
//
// Returns:
//     float: The proportion of red in the list of pixels, as a value between 0 and 1.
float calculateRedProportion(const std::vector<std::tuple<int, int, int>>& pixels) {
    if (pixels.empty()) {
        return 0.0f;
    }

    int totalRed = 0;
    int totalIntensity = 0;

    for (const auto& pixel : pixels) {
        int r, g, b;
        std::tie(r, g, b) = pixel;
        totalRed += r;
        totalIntensity += (r + g + b);
    }

    // Avoid division by zero
    if (totalIntensity == 0) {
        return 0.0f;
    }

    float redProportion = static_cast<float>(totalRed) / totalIntensity;
    return redProportion;
}

TEST_CASE("Test calculateRedProportion", "[calculateRedProportion]") {
    SECTION("All red pixels") {
        // All pixels are fully red
        std::vector<std::tuple<int, int, int>> pixels = {{255, 0, 0}, {255, 0, 0}, {255, 0, 0}};
        float result = calculateRedProportion(pixels);
        REQUIRE_THAT(result, Catch::Matchers::WithinAbs(1.0f, 0.001));
    }

    SECTION("No red pixels") {
        // No red component in any pixel
        std::vector<std::tuple<int, int, int>> pixels = {{0, 255, 0}, {0, 0, 255}, {0, 255, 255}};
        float result = calculateRedProportion(pixels);
        REQUIRE_THAT(result, Catch::Matchers::WithinAbs(0.0f, 0.001));
    }

    SECTION("Empty pixel list") {
        // Empty list of pixels
        std::vector<std::tuple<int, int, int>> pixels = {};
        float result = calculateRedProportion(pixels);
        REQUIRE_THAT(result, Catch::Matchers::WithinAbs(0.0f, 0.001));
    }

    SECTION("All black pixels") {
        // All pixels are black
        std::vector<std::tuple<int, int, int>> pixels = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
        float result = calculateRedProportion(pixels);
        REQUIRE_THAT(result, Catch::Matchers::WithinAbs(0.0f, 0.001));
    }
}
```

### Explanation:
1. **Header Files**:
   - `#include <catch2/catch_test_macros.hpp>`: For using Catch2 test macros.
   - `#include <vector>`: For using `std::vector`.
   - `#include <tuple>`: For using `std::tuple`.

2. **Function Definition**:
   - `calculateRedProportion`: This function takes a vector of tuples representing RGB values and calculates the proportion of red.

3. **Test Suite**:
   - `TEST_CASE`: Defines a test case named "Test calculateRedProportion" with a tag `[calculateRedProportion]`.

4. **Test Sections**:
   - `SECTION`: Each section represents a specific test case.
   - `All red pixels`: Tests the scenario where all pixels are fully red.
   - `No red pixels`: Tests the scenario where no pixel has a red component.
   - `Empty pixel list`: Tests the scenario with an empty list of pixels.
   - `All black pixels`: Tests the scenario where all pixels are black.

5. **Assertions**:
   - `REQUIRE_THAT`: Used to assert that the calculated result is within a specified tolerance (`WithinAbs`) of the expected value.

This conversion ensures that the functionality and logic of the tests are preserved while adhering to the syntax and features of the Catch2 testing framework.