Sure! Below is the TypeScript code with the same function signature and comments as your Python code:

```typescript
import { NDArray } from 'ndarray';

interface QuadratureRule {
    x: NDArray;
    w: NDArray;
}

function lanczos(n: number, quadratureRule: QuadratureRule): [NDArray, NDArray, NDArray, QuadratureRule] {
    /**
     * Implements the Lanczos function for the recursive relation coefficient algorithm for computing orthogonal polynomials.
     * 
     * @param n - The number of orthogonal polynomials to generate.
     * @param quadratureRule - An object containing x (nodes) and w (weights) for the quadrature.
     * @returns A tuple containing three NDArrays and an updated QuadratureRule object.
     */
}
```

### Explanation:
1. **Interfaces**: In TypeScript, we use interfaces to define the structure of objects. Here, `QuadratureRule` is defined as an interface that includes properties `x` and `w`, both of type `NDArray`.
2. **Function Signature**: The function `lanczos` takes two parameters: `n` (a number) and `quadratureRule` (an object conforming to the `QuadratureRule` interface). It returns a tuple containing three `NDArray` objects and another `QuadratureRule` object.

Make sure you have the necessary dependencies installed in your TypeScript project. For example, if you're using `ndarray`, you can install it via npm or yarn:

```sh
npm install ndarray
# or
yarn add ndarray
```

This setup should help you maintain consistency between your Python and TypeScript code signatures while keeping the functionality intact.