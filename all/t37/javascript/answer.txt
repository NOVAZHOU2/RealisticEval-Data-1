Certainly! Below is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
class OrthogonalPolynomial {
    constructor(alpha, beta, gamma, quadratureRule) {
        this.alpha = alpha;
        this.beta = beta;
        this.gamma = gamma;
        this.quadratureRule = quadratureRule;
    }
}

function lanczos(n, quadratureRule) {
    if (n <= 0 || n > quadratureRule.x.length) {
        throw new Error('n must be between 1 and len(x).');
    }

    const x = quadratureRule.x;
    const w = quadratureRule.w;
    const alpha = new Array(n).fill(0);
    const beta = n > 1 ? new Array(n - 1).fill(0) : [];
    const gamma = new Array(n).fill(0);

    // Initial polynomial p_0(x) = 1, p_-1(x) = 0 (non-existent, thus ignored in calculations)
    const p0 = new Array(x.length).fill(1);
    const p1 = new Array(x.length).fill(0);

    for (let i = 0; i < n; i++) {
        // Compute new polynomial p_i
        let pi;
        if (i > 0) {
            pi = (x.map((xi, index) => xi - alpha[i - 1])).map((val, index) => val * p0[index]);
        } else {
            pi = p0;
        }

        if (i > 1) {
            pi = (x.map((xi, index) => xi - alpha[i - 1])).map((val, index) => val * p0[index]).map((val, index) => val - beta[i - 1] * p1[index]);
        }

        gamma[i] = dotProduct(w, pi, pi);
        alpha[i] = dotProduct(w, x, pi, pi) / gamma[i];

        if (i < n - 1) {
            beta[i] = dotProduct(w, pi, pi, pi) / gamma[i];
            [p1, p0] = [p0, pi]; // Update polynomials for next iteration
        }
    }

    return { alpha, beta, gamma, quadratureRule };
}

// Helper function for dot product
function dotProduct(...arrays) {
    if (arrays.length < 2) {
        throw new Error('At least two arrays are required for dot product.');
    }

    return arrays.reduce((acc, curr, idx, arr) => {
        if (idx === 0) return curr;
        return acc.map((a, i) => a * curr[i]);
    }, arrays[0]).reduce((sum, val) => sum + val, 0);
}
```

### Explanation:
1. **Class Definition**: The `OrthogonalPolynomial` class is defined similarly to the Python class.
2. **Function Definition**: The `lanczos` function is defined with the same parameters and logic.
3. **Array Initialization**: Arrays are initialized using `new Array(length).fill(0)` to mimic the behavior of `np.zeros`.
4. **Dot Product Function**: A helper function `dotProduct` is defined to compute the dot product of arrays, which is used in the main function.
5. **Polynomial Calculation**: The polynomial calculation logic is implemented using array mapping and multiplication.

This JavaScript code should provide the same functionality as the original Python code.