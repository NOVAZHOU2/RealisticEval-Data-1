Sure! Below is the equivalent JavaScript code for the provided Python code:

```javascript
class QuadratureRule {
  constructor(x, w) {
    this.x = x;
    this.w = w;
  }
}

function lanczos(n, quadratureRule) {
  // Implement the Lanczos function here
  // This will depend on the specific implementation details of the algorithm
  // For now, let's assume we return some dummy values
  const alpha = new Array(n).fill(0);
  const beta = new Array(n).fill(0);
  const hessenbergMatrix = new Array(n).fill(null).map(() => new Array(n).fill(0));
  
  // Dummy implementation for demonstration purposes
  for (let i = 0; i < n; i++) {
    alpha[i] = i + 1;
    beta[i] = i + 2;
    for (let j = 0; j <= i; j++) {
      hessenbergMatrix[i][j] = i + j;
    }
  }

  return [alpha, beta, hessenbergMatrix, new QuadratureRule(quadratureRule.x, quadratureRule.w)];
}
```

### Explanation:
1. **Class Definition**: The `QuadratureRule` class is defined similarly in both languages.
2. **Function Signature**: The `lanczos` function takes an integer `n` and a `QuadratureRule` object as arguments and returns a tuple of arrays and another `QuadratureRule` object.
3. **Dummy Implementation**: Since the actual implementation of the Lanczos algorithm depends on the specific details, I've provided a dummy implementation that initializes some arrays with dummy values.

You can replace the dummy implementation with the actual logic of the Lanczos algorithm as needed.