To convert the given Python unittest test class to a C++ test case using Catch2, you first need to define your `QuadratureRule` class in C++ and then implement the `lanczos` function. Below is an example of how you can do it:

### Step 1: Define the `QuadratureRule` Class in C++

```cpp
#include <vector>
#include <array>

struct QuadratureRule {
    std::vector<double> x;
    std::vector<double> w;

    QuadratureRule(const std::vector<double>& _x, const std::vector<double>& _w)
        : x(_x), w(_w) {}
};
```

### Step 2: Implement the `lanczos` Function in C++

```cpp
#include <vector>
#include <array>

std::tuple<std::vector<double>, std::vector<double>, std::vector<double>, QuadratureRule>
lanczos(int n, const QuadratureRule& quadrature_rule) {
    // Implementation of the Lanczos function goes here
    // This is just a placeholder implementation
    std::vector<double> alpha(n);
    std::vector<double> beta(n);
    std::vector<double> p(n + 1);
    std::vector<double> q(n + 1);

    // Placeholder values
    for (int i = 0; i < n; ++i) {
        alpha[i] = 0.0;
        beta[i] = 0.0;
        p[i] = 0.0;
        q[i] = 0.0;
    }

    return {alpha, beta, p, quadrature_rule};
}
```

### Step 3: Write the Test Case Using Catch2

First, ensure you have Catch2 installed. If not, you can download it from [Catch2's GitHub repository](https://github.com/catchorg/Catch2).

Here is an example of how you can write the test case using Catch2:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"

#include <vector>
#include <array>

struct QuadratureRule {
    std::vector<double> x;
    std::vector<double> w;

    QuadratureRule(const std::vector<double>& _x, const std::vector<double>& _w)
        : x(_x), w(_w) {}
};

std::tuple<std::vector<double>, std::vector<double>, std::vector<double>, QuadratureRule>
lanczos(int n, const QuadratureRule& quadrature_rule) {
    // Implementation of the Lanczos function goes here
    // This is just a placeholder implementation
    std::vector<double> alpha(n);
    std::vector<double> beta(n);
    std::vector<double> p(n + 1);
    std::vector<double> q(n + 1);

    // Placeholder values
    for (int i = 0; i < n; ++i) {
        alpha[i] = 0.0;
        beta[i] = 0.0;
        p[i] = 0.0;
        q[i] = 0.0;
    }

    return {alpha, beta, p, quadrature_rule};
}

TEST_CASE("Lanczos Function", "[lanczos]") {
    // Create a sample QuadratureRule
    std::vector<double> nodes = {0.0, 0.5, 1.0};
    std::vector<double> weights = {1.0, 1.0, 1.0};
    QuadratureRule qr(nodes, weights);

    // Call the lanczos function
    auto result = lanczos(3, qr);

    // Extract the results
    auto [alpha, beta, p, new_qr] = result;

    // Perform assertions
    REQUIRE(alpha.size() == 3);
    REQUIRE(beta.size() == 3);
    REQUIRE(p.size() == 4);
    REQUIRE(new_qr.x == qr.x);
    REQUIRE(new_qr.w == qr.w);
}
```

### Explanation

1. **Define the `QuadratureRule` Struct**: The struct is defined similarly to the Python version but uses standard C++ containers.

2. **Implement the `lanczos` Function**: The function signature and logic are converted to C++. Note that the actual implementation of the Lanczos algorithm should be added where indicated.

3. **Write the Test Case**: The test case uses Catch2 macros to create a test case named "Lanczos Function". It sets up a sample `QuadratureRule`, calls the `lanczos` function, and performs assertions to check if the output is as expected.

Make sure to compile and run your tests using a build system that supports C++ and Catch2.