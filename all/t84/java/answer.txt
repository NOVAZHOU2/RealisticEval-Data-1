Here's how you can convert your Python code into Java:

```java
import java.util.HashMap;
import java.util.Map;

public class Answer {
    public static String findMinWindowSubstring(String source, String target) {
        Map<Character, Integer> targetCount = new HashMap<>();
        Map<Character, Integer> currentCount = new HashMap<>();

        // Count the frequency of each character in the target string
        for(char c : target.toCharArray()) {
            targetCount.put(c, targetCount.getOrDefault(c, 0) + 1);
        }

        int left = 0, right = 0, formed = 0;
        String minWindow = "";

        while(right < source.length()) {
            char c = source.charAt(right);

            // Update the count of the current character
            currentCount.put(c, currentCount.getOrDefault(c, 0) + 1);

            // If the current character matches the required character and its count matches,
            // increment the 'formed' counter
            if(targetCount.containsKey(c) && currentCount.get(c).equals(targetCount.get(c))) {
                formed++;
            }

            // Try to minimize the window size
            while(left <= right && formed == targetCount.size()) {
                char lChar = source.charAt(left);

                // Update the minimum window if the current window is smaller than the previous one
                if(minWindow.isEmpty() || right - left + 1 < minWindow.length()) {
                    minWindow = source.substring(left, right + 1);
                }

                // Shrink the window from the left side
                currentCount.put(lChar, currentCount.get(lChar) - 1);

                // If the removed character was part of the target string and its count becomes less than the required count,
                // decrement the 'formed' counter
                if(targetCount.containsKey(lChar) && currentCount.get(lChar) < targetCount.get(lChar)) {
                    formed--;
                }

                left++;
            }

            right++;
        }

        return minWindow;
    }
}
```
This Java code does the same thing as your Python code: it finds the shortest substring in `source` that contains all the characters in `target`. It uses two pointers (`left` and `right`) to keep track of the current window, and a map (`currentCount`) to keep track of the number of times each character appears in the current window. When the current window contains all the characters in `target`, it tries to make the window smaller by moving the `left` pointer to the right.