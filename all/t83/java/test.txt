Certainly! Below is the equivalent Java test class using JUnit, placed in the package `org.real.temp` and named `Tester`. The test methods are converted to use JUnit annotations and assertions, ensuring that the functionality and logic of the tests are preserved.

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Test class for rotating list elements.
 */
public class Tester {

    /**
     * Rotates the elements of the list to the left by one position. The first element
     * is moved to the end of the list, and all other elements are shifted one position to the left.
     *
     * @param elements A list of integers to be rotated.
     * @return The rotated list with elements shifted to the left by one position.
     */
    private static List<Integer> rotateListElements(List<Integer> elements) {
        if (elements.size() > 1) {
            List<Integer> rotated = new ArrayList<>(elements.subList(1, elements.size()));
            rotated.add(elements.get(0));
            return rotated;
        }
        return elements;
    }

    @Test
    public void testBasicRotation() {
        List<Integer> originalList = new ArrayList<>(Arrays.asList(1, 2, 3, 4));
        List<Integer> expectedList = new ArrayList<>(Arrays.asList(2, 3, 4, 1));
        assertEquals(expectedList, rotateListElements(originalList), "Should rotate the list elements correctly");
    }

    @Test
    public void testSingleElementList() {
        List<Integer> originalList = new ArrayList<>(Arrays.asList(10));
        List<Integer> expectedList = new ArrayList<>(Arrays.asList(10));
        assertEquals(expectedList, rotateListElements(originalList), "Single element list should remain unchanged");
    }

    @Test
    public void testEmptyList() {
        List<Integer> originalList = new ArrayList<>();
        List<Integer> expectedList = new ArrayList<>();
        assertEquals(expectedList, rotateListElements(originalList), "Empty list should remain unchanged");
    }

    @Test
    public void testTwoElementList() {
        List<Integer> originalList = new ArrayList<>(Arrays.asList(5, 9));
        List<Integer> expectedList = new ArrayList<>(Arrays.asList(9, 5));
        assertEquals(expectedList, rotateListElements(originalList), "Should correctly rotate a two-element list");
    }

    @Test
    public void testLargeList() {
        List<Integer> largeList = new ArrayList<>();
        for (int i = 1; i <= 1000; i++) {
            largeList.add(i);
        }
        List<Integer> expectedList = new ArrayList<>(largeList.subList(1, largeList.size()));
        expectedList.add(largeList.get(0));
        assertEquals(expectedList, rotateListElements(largeList), "Should correctly rotate a large list");
    }
}
```

### Explanation:
1. **Package Declaration**: The code starts with the package declaration `package org.real.temp;`.
2. **Imports**: The necessary imports for `ArrayList`, `Arrays`, `List`, `JUnit` annotations (`@Test`), and `assertEquals` are included.
3. **Class Definition**: The class `Tester` is defined.
4. **Javadoc Comments**: The Javadoc comments are added to provide detailed documentation for the method.
5. **Method `rotateListElements`**:
   - This method is defined within the test class to ensure it is accessible for testing.
   - It takes a `List<Integer>` as input and returns a new list with the elements rotated to the left by one position.
   - It checks if the list has more than one element before performing the rotation.
   - If the condition is met, it creates a new `ArrayList` containing all elements except the first one and then adds the first element at the end.
6. **JUnit Test Methods**:
   - Each test method is annotated with `@Test` to indicate that it is a test method.
   - Assertions are made using `assertEquals` to verify the correctness of the `rotateListElements` method.
7. **Test Cases**:
   - `testBasicRotation`: Tests basic rotation of a list with four elements.
   - `testSingleElementList`: Tests a single-element list.
   - `testEmptyList`: Tests an empty list.
   - `testTwoElementList`: Tests a two-element list.
   - `testLargeList`: Tests a large list with 1000 elements.

This Java code preserves the original functionality and logic of the Python test cases while adhering to JUnit's syntax and conventions.