Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The conversion will maintain the functionality and logic of the tests, ensuring that all assertions are appropriately mapped to Jest equivalents.

### Python unittest Code:

```python
import unittest

class TestRotateListElements(unittest.TestCase):

    def test_basic_rotation(self):
        self.assertEqual(rotate_list_elements([1, 2, 3, 4]), [2, 3, 4, 1], "Should rotate the list elements correctly")

    def test_single_element_list(self):
        self.assertEqual(rotate_list_elements([10]), [10], "Single element list should remain unchanged")

    def test_empty_list(self):
        self.assertEqual(rotate_list_elements([]), [], "Empty list should remain unchanged")

    def test_two_element_list(self):
        self.assertEqual(rotate_list_elements([5, 9]), [9, 5], "Should correctly rotate a two-element list")

    def test_large_list(self):
        large_list = list(range(1, 1001))
        rotated_list = rotate_list_elements(large_list)
        self.assertEqual(rotated_list, list(range(2, 1001)) + [1], "Should correctly rotate a large list")
```

### Equivalent Jest Test Suite:

```javascript
const { rotateListElements } = require('./rotateListElements'); // Import the function to be tested

describe('TestRotateListElements', () => {
    it('should rotate the list elements correctly', () => {
        expect(rotateListElements([1, 2, 3, 4])).toEqual([2, 3, 4, 1]);
    });

    it('single element list should remain unchanged', () => {
        expect(rotateListElements([10])).toEqual([10]);
    });

    it('empty list should remain unchanged', () => {
        expect(rotateListElements([])).toEqual([]);
    });

    it('should correctly rotate a two-element list', () => {
        expect(rotateListElements([5, 9])).toEqual([9, 5]);
    });

    it('should correctly rotate a large list', () => {
        const largeList = Array.from({ length: 1000 }, (_, i) => i + 1);
        const rotatedList = rotateListElements(largeList);
        expect(rotatedList).toEqual(Array.from({ length: 999 }, (_, i) => i + 2).concat([1]));
    });
});
```

### Explanation:
1. **Importing the Function**:
   - The `rotateListElements` function is imported from the module where it is defined.

2. **Describe Block**:
   - The `describe` block is used to group the tests under a descriptive name, similar to the Python class name.

3. **It Blocks**:
   - Each `it` block represents a single test case, similar to a method in the Python unittest class.
   - The description of each test case is provided as the first argument to `it`.

4. **Expect Assertions**:
   - The `expect` function is used to make assertions, similar to `self.assertEqual` in Python.
   - `toEqual` is used to check deep equality between the expected and actual values.

5. **Large List Construction**:
   - In the `test_large_list` case, the large list is constructed using `Array.from` to generate a range of numbers from 1 to 1000.
   - The expected result is constructed similarly using `Array.from` and `concat`.

This Jest test suite ensures that the functionality and logic of the tests are preserved, and all assertions are appropriately mapped to Jest equivalents.