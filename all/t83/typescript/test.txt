Certainly! Below is the equivalent TypeScript test class using Jest, which preserves the functionality and logic of the provided Python unittest class. The necessary type annotations and Jest assertions are included:

### TypeScript Code

```typescript
import { rotateListElements } from './rotateListElements'; // Import the rotateListElements function

describe('TestRotateListElements', () => {
    it('should rotate the list elements correctly', () => {
        expect(rotateListElements([1, 2, 3, 4])).toEqual([2, 3, 4, 1]);
    });

    it('single element list should remain unchanged', () => {
        expect(rotateListElements([10])).toEqual([10]);
    });

    it('empty list should remain unchanged', () => {
        expect(rotateListElements([])).toEqual([]);
    });

    it('should correctly rotate a two-element list', () => {
        expect(rotateListElements([5, 9])).toEqual([9, 5]);
    });

    it('should correctly rotate a large list', () => {
        const largeList = Array.from({ length: 1000 }, (_, i) => i + 1);
        const rotatedList = rotateListElements(largeList);
        expect(rotatedList).toEqual(Array.from({ length: 999 }, (_, i) => i + 2).concat([1]));
    });
});
```

### Explanation:
1. **Import Statement**:
   - The `rotateListElements` function is imported from the file `rotateListElements`.

2. **Describe Block**:
   - The `describe` block groups the test cases together under the name `TestRotateListElements`.

3. **Test Cases**:
   - Each test case is defined using the `it` function, which takes a description and a callback function containing the assertions.
   - The `expect` function is used to perform assertions, similar to `assertEqual` in Python's `unittest`.

4. **Assertions**:
   - `toEqual` is used to check that the actual result matches the expected result.

5. **Large List Creation**:
   - The `largeList` is created using `Array.from` to generate a range of numbers from 1 to 1000.
   - The expected result is generated similarly using `Array.from` and concatenation.

### `rotateListElements` Function Implementation

Here is the implementation of the `rotateListElements` function in TypeScript:

```typescript
/**
 * Rotate the elements of the list to the left by one position. The first element
 * is moved to the end of the list, and all other elements are shifted one position to the left.
 *
 * @param elements - An array of numbers to be rotated.
 * @returns The rotated array with elements shifted to the left by one position.
 */
function rotateListElements(elements: number[]): number[] {
    if (elements.length > 1) {
        return elements.slice(1).concat(elements[0]);
    }
    return elements;
}

export { rotateListElements };
```

### File Structure

- **rotateListElements.ts**:
  ```typescript
  function rotateListElements(elements: number[]): number[] {
      if (elements.length > 1) {
          return elements.slice(1).concat(elements[0]);
      }
      return elements;
  }

  export { rotateListElements };
  ```

- **testRotateListElements.ts**:
  ```typescript
  import { rotateListElements } from './rotateListElements';

  describe('TestRotateListElements', () => {
      it('should rotate the list elements correctly', () => {
          expect(rotateListElements([1, 2, 3, 4])).toEqual([2, 3, 4, 1]);
      });

      it('single element list should remain unchanged', () => {
          expect(rotateListElements([10])).toEqual([10]);
      });

      it('empty list should remain unchanged', () => {
          expect(rotateListElements([])).toEqual([]);
      });

      it('should correctly rotate a two-element list', () => {
          expect(rotateListElements([5, 9])).toEqual([9, 5]);
      });

      it('should correctly rotate a large list', () => {
          const largeList = Array.from({ length: 1000 }, (_, i) => i + 1);
          const rotatedList = rotateListElements(largeList);
          expect(rotatedList).toEqual(Array.from({ length: 999 }, (_, i) => i + 2).concat([1]));
      });
  });
  ```

This setup ensures that the functionality and logic of the tests are preserved, and the code is structured according to TypeScript and Jest conventions.