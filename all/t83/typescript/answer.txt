Certainly! Below is the TypeScript code that is equivalent to the provided Python code. It includes proper type definitions and follows TypeScript's static type system:

```typescript
function rotateListElements(elements: number[]): number[] {
    /**
     * Rotate the elements of the array to the left by one position. The first element
     * is moved to the end of the array, and all other elements are shifted one position to the left.
     *
     * @param elements - An array of numbers to be rotated.
     * @returns The rotated array with elements shifted to the left by one position.
     */
    if (elements.length > 1) {
        elements = elements.slice(1).concat([elements[0]]);
    }
    return elements;
}

function rotateList<T>(elements: T[]): T[] {
    /**
     * Rotate the elements of the array, moving the first element to the end and shifting all others forward.
     *
     * @param elements - The array of elements to rotate.
     * @returns The array after rotation.
     */
    if (!elements.length) {
        return elements; // Return the array as is if it's empty
    }

    // Move the first element to the last and shift others forward
    const rotatedList = elements.slice(1).concat(elements.slice(0, 1));

    return rotatedList;
}
```

### Explanation:
1. **Type Definitions**:
   - `rotateListElements` takes an array of numbers (`number[]`) and returns an array of numbers (`number[]`).
   - `rotateList` is a generic function that can work with any type of array (`T[]`).

2. **Function Logic**:
   - Both functions check if the input array has more than one element before performing the rotation.
   - If the array has more than one element, the first element is moved to the end using slicing and concatenation methods (`slice` and `concat`).

3. **Handling Empty Arrays**:
   - `rotateList` checks if the array is empty and returns it as is if true.

This TypeScript code maintains the same functionality and logic as the original Python code.