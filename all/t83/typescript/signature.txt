Certainly! Below is the TypeScript code that converts the provided Python function into equivalent TypeScript code, including appropriate JSDoc-style documentation comments:

```typescript
import { List } from "typescript";

/**
 * Rotate the elements of the list to the left by one position. The first element
 * is moved to the end of the list, and all other elements are shifted one position to the left.
 *
 * @param elements - An array of numbers to be rotated.
 * @returns The rotated array with elements shifted to the left by one position.
 */
function rotateListElements(elements: number[]): number[] {
    if (elements.length > 1) {
        return elements.slice(1).concat(elements[0]);
    }
    return elements;
}

// Example usage
const exampleArray: number[] = [1, 2, 3, 4, 5];
const rotatedArray: number[] = rotateListElements(exampleArray);
console.log(rotatedArray); // Output: [2, 3, 4, 5, 1]
```

### Explanation:
1. **Function Signature**:
   - The function `rotateListElements` takes an array of numbers (`number[]`) and returns an array of numbers (`number[]`).

2. **JSDoc Documentation**:
   - The JSDoc-style documentation comments are added to describe the function, its parameters, and its return value.

3. **Function Logic**:
   - The function checks if the input array has more than one element.
   - If the array has more than one element, it uses slicing and concatenation to move the first element to the end.

4. **Example Usage**:
   - An example usage is provided to demonstrate how the function works.

This TypeScript code preserves the original functionality and structure of the Python code while adhering to TypeScript conventions and documentation standards.