Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a set of Catch2 test cases to ensure the same functionality and logic are preserved.

### C++ Code with Catch2 Testing Framework

First, make sure you have Catch2 installed and included in your project. You can include Catch2 via a header-only library or through a package manager.

Here is the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <vector>

// Function to rotate the elements of a vector to the left by one position.
// The first element is moved to the end of the vector,
// and all other elements are shifted one position to the left.
std::vector<int> rotate_vector_elements(const std::vector<int>& elements) {
    if (elements.size() <= 1) {
        return elements;
    }

    std::vector<int> rotated(elements.size());
    std::copy(elements.begin() + 1, elements.end(), rotated.begin());
    rotated.back() = elements.front();

    return rotated;
}

TEST_CASE("Test Rotate Vector Elements", "[rotate_vector_elements]") {
    SECTION("Basic Rotation") {
        REQUIRE(rotate_vector_elements({1, 2, 3, 4}) == std::vector<int>({2, 3, 4, 1}));
    }

    SECTION("Single Element List") {
        REQUIRE(rotate_vector_elements({10}) == std::vector<int>({10}));
    }

    SECTION("Empty List") {
        REQUIRE(rotate_vector_elements({}) == std::vector<int>({}));
    }

    SECTION("Two Element List") {
        REQUIRE(rotate_vector_elements({5, 9}) == std::vector<int>({9, 5}));
    }

    SECTION("Large List") {
        std::vector<int> large_list;
        for (int i = 1; i <= 1000; ++i) {
            large_list.push_back(i);
        }
        std::vector<int> rotated_list = rotate_vector_elements(large_list);
        std::vector<int> expected_list(large_list.begin() + 1, large_list.end());
        expected_list.push_back(large_list.front());

        REQUIRE(rotated_list == expected_list);
    }
}
```

### Explanation:
1. **Header Inclusion**:
   - Include the Catch2 header file `#include <catch2/catch_test_macros.hpp>` to use the testing macros.

2. **Function Definition**:
   - `rotate_vector_elements`: This function takes a `const std::vector<int>&` as input and returns a `std::vector<int>` with elements rotated to the left by one position.

3. **Test Class**:
   - `TEST_CASE`: This macro defines a test case named "Test Rotate Vector Elements".
   - `SECTION`: Each section represents a specific test case.

4. **Assertions**:
   - `REQUIRE`: This assertion is used to check the correctness of the function output. It behaves similarly to `assertEqual` in Python's `unittest`.

5. **Test Cases**:
   - **Basic Rotation**: Checks the basic rotation of a list.
   - **Single Element List**: Checks that a single-element list remains unchanged.
   - **Empty List**: Checks that an empty list remains unchanged.
   - **Two Element List**: Checks the rotation of a two-element list.
   - **Large List**: Checks the rotation of a large list (1000 elements).

### Running the Tests
To run the tests, you need to link against Catch2. If you are using a build system like CMake, you can add the following lines to your `CMakeLists.txt`:

```cmake
cmake_minimum_required(VERSION 3.10)
project(RotateVectorElements)

# Find Catch2
find_package(Catch2 REQUIRED)

# Add executable
add_executable(RotateVectorElements main.cpp rotate_vector_elements.cpp)

# Link against Catch2
target_link_libraries(RotateVectorElements PUBLIC Catch2::Catch2)
```

And in your `main.cpp` file:

```cpp
#include <catch2/catch_test_macros.hpp>

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

This setup ensures that the tests are executed when you run the executable.