Certainly! Below is an equivalent C++ test case using Catch2 for the provided Python unittest function `rotate_list_elements`.

```cpp
#include <vector>
#include <catch2/catch_test_macros.hpp>

std::vector<int> rotate_list_elements(const std::vector<int>& elements) {
    if (elements.empty()) return elements;

    std::vector<int> rotated = elements;
    int first_element = rotated.front();
    rotated.erase(rotated.begin());
    rotated.push_back(first_element);

    return rotated;
}

TEST_CASE("Rotate List Elements", "[rotate_list_elements]") {
    SECTION("Empty List") {
        std::vector<int> empty_list = {};
        REQUIRE(rotate_list_elements(empty_list).empty());
    }

    SECTION("Single Element List") {
        std::vector<int> single_element_list = {42};
        std::vector<int> expected_result = {42};
        REQUIRE(rotate_list_elements(single_element_list) == expected_result);
    }

    SECTION("Multiple Elements List") {
        std::vector<int> multiple_elements_list = {1, 2, 3, 4, 5};
        std::vector<int> expected_result = {2, 3, 4, 5, 1};
        REQUIRE(rotate_list_elements(multiple_elements_list) == expected_result);
    }
}
```

### Explanation:

1. **Function Definition**:
   - The `rotate_list_elements` function is implemented in C++. It takes a vector of integers and rotates it to the left by one position.

2. **Catch2 Test Cases**:
   - `TEST_CASE("Rotate List Elements", "[rotate_list_elements]")`: Defines a test case named "Rotate List Elements".
   - `SECTION("Empty List")`: Tests the function with an empty list.
   - `SECTION("Single Element List")`: Tests the function with a list containing a single element.
   - `SECTION("Multiple Elements List")`: Tests the function with a list containing multiple elements.

Each section uses `REQUIRE` to assert that the output of `rotate_list_elements` matches the expected result. If any assertion fails, Catch2 will report the failure along with the line number and the expected/actual values.