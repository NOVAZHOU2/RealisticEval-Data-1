Sure! Below is the equivalent TypeScript test case using Jest for the provided Python function `replace_words_in_file`.

```typescript
import fs from 'fs';
import { replaceWordsInFile } from './path-to-your-module'; // Adjust the import path accordingly

describe('replaceWordsInFile', () => {
  const testFilePath = 'test-file.txt';

  beforeEach(() => {
    // Create a test file with some initial content
    fs.writeFileSync(testFilePath, 'hello world');
  });

  afterEach(() => {
    // Clean up after each test
    if (fs.existsSync(testFilePath)) {
      fs.unlinkSync(testFilePath);
    }
  });

  it('should replace words in the file', async () => {
    const replacementDict = {
      hello: 'hi',
      world: 'earth'
    };

    await replaceWordsInFile(testFilePath, replacementDict);

    const updatedContent = fs.readFileSync(testFilePath, 'utf8');
    expect(updatedContent).toBe('hi earth');
  });
});
```

### Explanation:

1. **Imports**: We import the necessary modules (`fs` for file operations) and the `replaceWordsInFile` function from your module.
2. **Test Suite**: We define a test suite using `describe` with the name of the function we're testing.
3. **Setup and Cleanup**:
   - `beforeEach`: This hook runs before each test case. It creates a test file with initial content.
   - `afterEach`: This hook runs after each test case. It cleans up by deleting the test file if it exists.
4. **Test Case**: 
   - We define an individual test case using `it`.
   - We create a `replacementDict` object that maps words to their replacements.
   - We call the `replaceWordsInFile` function with the test file path and the replacement dictionary.
   - We read the updated content of the file and use `expect` to verify that the words have been replaced correctly.

Make sure to adjust the import path to match where your `replaceWordsInFile` function is located. Also, ensure you have Jest installed and properly configured in your project.