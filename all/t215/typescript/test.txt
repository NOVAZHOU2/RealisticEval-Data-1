Certainly! Below is the equivalent TypeScript test class using Jest, which preserves the functionality and logic of the provided Python unittest class. The necessary type annotations and Jest assertions are included.

### TypeScript Code

```typescript
import fs from 'fs';
import { replaceWordsInFile } from './path/to/replaceWordsInFile'; // Import the function to be tested

describe('TestReplaceWordsInFile', () => {
  const mockFileData = "hello world";

  beforeEach(() => {
    jest.spyOn(fs, 'readFileSync').mockImplementation(() => mockFileData);
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  it('should replace a single word', () => {
    const file_path = "dummy_path.txt";
    const replacement_dict = { "hello": "hi" };
    const expected_output = "hi world";

    const result = replaceWordsInFile(file_path, replacement_dict);
    expect(result).toBe(expected_output);
  });

  it('should replace multiple words', () => {
    const file_path = "dummy_path.txt";
    const replacement_dict = { "hello": "hi", "world": "earth" };
    const expected_output = "hi earth";

    const result = replaceWordsInFile(file_path, replacement_dict);
    expect(result).toBe(expected_output);
  });

  it('should not replace any words when no matching keys are present', () => {
    const file_path = "dummy_path.txt";
    const replacement_dict = { "goodbye": "bye" };
    const expected_output = "hello world";

    const result = replaceWordsInFile(file_path, replacement_dict);
    expect(result).toBe(expected_output);
  });

  it('should handle an empty file', () => {
    const file_path = "dummy_path.txt";
    const replacement_dict = { "hello": "hi" };
    const expected_output = "";

    jest.spyOn(fs, 'readFileSync').mockImplementation(() => "");
    const result = replaceWordsInFile(file_path, replacement_dict);
    expect(result).toBe(expected_output);
  });
});
```

### Explanation:
1. **Imports**:
   - Import the `fs` module to handle file system operations.
   - Import the `replaceWordsInFile` function from the relevant file.

2. **Describe Block**:
   - Use Jest’s `describe` block to group the test cases.

3. **Before Each**:
   - Use `beforeEach` to set up a spy on `fs.readFileSync` to mock the file content.

4. **After Each**:
   - Use `afterEach` to restore all mocks after each test case.

5. **Test Cases**:
   - Each test case uses `it` to describe the behavior being tested.
   - Use Jest’s `expect` assertions to verify the expected outcomes.

6. **Mocking File Content**:
   - Use `jest.spyOn` to mock `fs.readFileSync` and set the file content for each test case.

### Example Usage
Ensure you have Jest installed in your project:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Configure Jest in your `tsconfig.json` and `jest.config.js` files:

```json
// tsconfig.json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react",
    "lib": ["es6", "dom"]
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}
```

```js
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest',
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
};
```

This setup ensures that your TypeScript tests run correctly with Jest.