Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The conversion will maintain the functionality and logic of the tests, adapting them to Jest's syntax and conventions.

### Python Code:
```python
import unittest
from unittest.mock import mock_open, patch

def replace_words_in_file(file_path, replacement_dict):
    """
    Read a text file, replace words according to a dictionary map, and return the modified text.

    Parameters:
    - file_path (str): The path to the text file.
    - replacement_dict (dict): A dictionary where the keys are words to be replaced, and the values are the replacement words.

    Returns:
    - str: The text with the words replaced.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            text = file.read()

        for old_word, new_word in replacement_dict.items():
            text = text.replace(old_word, new_word)

        return text

    except FileNotFoundError:
        return "Error: The file was not found."
    except Exception as e:
        return f"Error: {str(e)}"


class TestReplaceWordsInFile(unittest.TestCase):

    @patch("builtins.open", new_callable=mock_open, read_data="hello world")
    def test_replace_single_word(self, mock_file):
        file_path = "dummy_path.txt"
        replacement_dict = {"hello": "hi"}
        expected_output = "hi world"

        result = replace_words_in_file(file_path, replacement_dict)
        self.assertEqual(result, expected_output)

    @patch("builtins.open", new_callable=mock_open, read_data="hello world")
    def test_replace_multiple_words(self, mock_file):
        file_path = "dummy_path.txt"
        replacement_dict = {"hello": "hi", "world": "earth"}
        expected_output = "hi earth"

        result = replace_words_in_file(file_path, replacement_dict)
        self.assertEqual(result, expected_output)

    @patch("builtins.open", new_callable=mock_open, read_data="hello world")
    def test_no_replacement(self, mock_file):
        file_path = "dummy_path.txt"
        replacement_dict = {"goodbye": "bye"}
        expected_output = "hello world"

        result = replace_words_in_file(file_path, replacement_dict)
        self.assertEqual(result, expected_output)

    @patch("builtins.open", new_callable=mock_open, read_data="")
    def test_empty_file(self, mock_file):
        file_path = "dummy_path.txt"
        replacement_dict = {"hello": "hi"}
        expected_output = ""

        result = replace_words_in_file(file_path, replacement_dict)
        self.assertEqual(result, expected_output)


if __name__ == '__main__':
    unittest.main()
```

### Equivalent Jest Test Suite:

```javascript
const fs = require('fs');
const { mock } = require('jest-mock-extended');

// Mock the fs.readFile function
jest.mock('fs', () => ({
  ...jest.requireActual('fs'),
  readFile: jest.fn(),
}));

// Function to replace words in a file
function replaceWordsInFile(file_path, replacement_dict) {
  try {
    const text = fs.readFileSync(file_path, 'utf-8');

    for (const [oldWord, newWord] of Object.entries(replacement_dict)) {
      text = text.replace(new RegExp(oldWord, 'g'), newWord);
    }

    return text;

  } catch (error) {
    if (error.code === 'ENOENT') {
      return "Error: The file was not found.";
    }
    return `Error: ${error.message}`;
  }
}

describe('replaceWordsInFile', () => {
  beforeEach(() => {
    // Reset the mock implementation before each test
    fs.readFile.mockClear();
  });

  it('replaces a single word', () => {
    const file_path = "dummy_path.txt";
    const replacement_dict = {"hello": "hi"};
    const expected_output = "hi world";

    // Mock the file content
    fs.readFile.mockImplementationOnce((path, callback) => {
      callback(null, "hello world");
    });

    const result = replaceWordsInFile(file_path, replacement_dict);
    expect(result).toBe(expected_output);
  });

  it('replaces multiple words', () => {
    const file_path = "dummy_path.txt";
    const replacement_dict = {"hello": "hi", "world": "earth"};
    const expected_output = "hi earth";

    // Mock the file content
    fs.readFile.mockImplementationOnce((path, callback) => {
      callback(null, "hello world");
    });

    const result = replaceWordsInFile(file_path, replacement_dict);
    expect(result).toBe(expected_output);
  });

  it('does not replace non-existent words', () => {
    const file_path = "dummy_path.txt";
    const replacement_dict = {"goodbye": "bye"};
    const expected_output = "hello world";

    // Mock the file content
    fs.readFile.mockImplementationOnce((path, callback) => {
      callback(null, "hello world");
    });

    const result = replaceWordsInFile(file_path, replacement_dict);
    expect(result).toBe(expected_output);
  });

  it('handles empty files', () => {
    const file_path = "dummy_path.txt";
    const replacement_dict = {"hello": "hi"};
    const expected_output = "";

    // Mock the file content
    fs.readFile.mockImplementationOnce((path, callback) => {
      callback(null, "");
    });

    const result = replaceWordsInFile(file_path, replacement_dict);
    expect(result).toBe(expected_output);
  });
});
```

### Explanation:
1. **Importing Modules**:
   ```javascript
   const fs = require('fs');
   const { mock } = require('jest-mock-extended');
   ```

2. **Mocking `fs.readFile`**:
   ```javascript
   jest.mock('fs', () => ({
     ...jest.requireActual('fs'),
     readFile: jest.fn(),
   }));
   ```

3. **Function Definition**:
   ```javascript
   function replaceWordsInFile(file_path, replacement_dict) {
     try {
       const text = fs.readFileSync(file_path, 'utf-8');

       for (const [oldWord, newWord] of Object.entries(replacement_dict)) {
         text = text.replace(new RegExp(oldWord, 'g'), newWord);
       }

       return text;

     } catch (error) {
       if (error.code === 'ENOENT') {
         return "Error: The file was not found.";
       }
       return `Error: ${error.message}`;
     }
   }
   ```

4. **Test Cases**:
   ```javascript
   describe('replaceWordsInFile', () => {
     beforeEach(() => {
       fs.readFile.mockClear();
     });

     it('replaces a single word', () => {
       const file_path = "dummy_path.txt";
       const replacement_dict = {"hello": "hi"};
       const expected_output = "hi world";

       fs.readFile.mockImplementationOnce((path, callback) => {
         callback(null, "hello world");
       });

       const result = replaceWordsInFile(file_path, replacement_dict);
       expect(result).toBe(expected_output);
     });

     it('replaces multiple words', () => {
       const file_path = "dummy_path.txt";
       const replacement_dict = {"hello": "hi", "world": "earth"};
       const expected_output = "hi earth";

       fs.readFile.mockImplementationOnce((path, callback) => {
         callback(null, "hello world");
       });

       const result = replaceWordsInFile(file_path, replacement_dict);
       expect(result).toBe(expected_output);
     });

     it('does not replace non-existent words', () => {
       const file_path = "dummy_path.txt";
       const replacement_dict = {"goodbye": "bye"};
       const expected_output = "hello world";

       fs.readFile.mockImplementationOnce((path, callback) => {
         callback(null, "hello world");
       });

       const result = replaceWordsInFile(file_path, replacement_dict);
       expect(result).toBe(expected_output);
     });

     it('handles empty files', () => {
       const file_path = "dummy_path.txt";
       const replacement_dict = {"hello": "hi"};
       const expected_output = "";

       fs.readFile.mockImplementationOnce((path, callback) => {
         callback(null, "");
       });

       const result = replaceWordsInFile(file_path, replacement_dict);
       expect(result).toBe(expected_output);
     });
   });
   ```

This conversion ensures that the functionality and logic of the tests are preserved, and the Jest test suite is structured clearly and follows Jest conventions.