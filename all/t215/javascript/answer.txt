Here is the equivalent JavaScript code that maintains the same functionality, logic, and structure as the provided Python code:

```javascript
const fs = require('fs').promises; // Import the fs.promises API for asynchronous file operations

/**
 * Read a text file, replace words according to a dictionary map, and return the modified text.
 *
 * @param {string} file_path - The path to the text file.
 * @param {Object} replacement_dict - An object where the keys are words to be replaced, and the values are the replacement words.
 * @returns {Promise<string>} A promise that resolves to the text with the words replaced or an error message.
 */
async function replaceWordsInFile(file_path, replacement_dict) {
    try {
        // Read the content of the file
        const text = await fs.readFile(file_path, 'utf-8');

        // Replace words according to the replacement dictionary
        for (const [oldWord, newWord] of Object.entries(replacement_dict)) {
            text = text.replace(new RegExp(oldWord, 'g'), newWord);
        }

        return text;

    } catch (error) {
        if (error.code === 'ENOENT') {
            return "Error: The file was not found.";
        }
        return `Error: ${error.message}`;
    }
}

// Example usage:
(async () => {
    try {
        const result = await replaceWordsInFile('example.txt', {'hello': 'hi', 'world': 'earth'});
        console.log(result);
    } catch (error) {
        console.error(error);
    }
})();
```

### Explanation:
1. **Importing `fs.promises`**: In JavaScript, we use the `fs.promises` API for asynchronous file operations. This ensures that our function does not block the execution of other code while reading the file.

2. **Function Definition**: The `replaceWordsInFile` function is defined using the `async` keyword to indicate that it performs asynchronous operations.

3. **Reading the File**: We use `await fs.readFile(file_path, 'utf-8')` to read the content of the file asynchronously. The second argument `'utf-8'` specifies that the file should be read as a UTF-8 encoded string.

4. **Replacing Words**: We iterate over the entries of the `replacement_dict` using `Object.entries` and replace each occurrence of `oldWord` with `newWord` using a global regular expression (`new RegExp(oldWord, 'g')`).

5. **Handling Errors**: We catch any errors that occur during file operations and return appropriate error messages based on the type of error.

6. **Example Usage**: An example usage of the function is provided at the end, demonstrating how to call the function and handle the returned value.