Certainly! Here is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
const fs = require('fs').promises; // Import the fs.promises API for asynchronous file operations

/**
 * Read a text file, replace words according to a dictionary map, and return the modified text.
 *
 * @param {string} file_path - The path to the text file.
 * @param {Object} replacement_dict - An object where the keys are words to be replaced, and the values are the replacement words.
 * @returns {Promise<string>} A promise that resolves to the text with the words replaced or an error message.
 */
async function replaceWordsInFile(file_path, replacement_dict) {
    try {
        // Read the content of the file
        const text = await fs.readFile(file_path, 'utf-8');

        // Replace words according to the replacement dictionary
        for (const [oldWord, newWord] of Object.entries(replacement_dict)) {
            text = text.replace(new RegExp(oldWord, 'g'), newWord);
        }

        return text;

    } catch (error) {
        if (error.code === 'ENOENT') {
            return "Error: The file was not found.";
        }
        return `Error: ${error.message}`;
    }
}

// Example usage:
(async () => {
    try {
        const result = await replaceWordsInFile('example.txt', {'hello': 'hi', 'world': 'earth'});
        console.log(result);
    } catch (error) {
        console.error(error);
    }
})();
```

### Explanation:
1. **Importing `fs.promises`**: 
   ```javascript
   const fs = require('fs').promises;
   ```
   This imports the `fs.promises` API for asynchronous file operations.

2. **JSDoc Comments**:
   ```javascript
   /**
    * Read a text file, replace words according to a dictionary map, and return the modified text.
    *
    * @param {string} file_path - The path to the text file.
    * @param {Object} replacement_dict - An object where the keys are words to be replaced, and the values are the replacement words.
    * @returns {Promise<string>} A promise that resolves to the text with the words replaced or an error message.
    */
   ```
   These comments provide detailed documentation using JSDoc format, specifying the parameters and return types.

3. **Function Definition**:
   ```javascript
   async function replaceWordsInFile(file_path, replacement_dict) {
       try {
           // Read the content of the file
           const text = await fs.readFile(file_path, 'utf-8');

           // Replace words according to the replacement dictionary
           for (const [oldWord, newWord] of Object.entries(replacement_dict)) {
               text = text.replace(new RegExp(oldWord, 'g'), newWord);
           }

           return text;

       } catch (error) {
           if (error.code === 'ENOENT') {
               return "Error: The file was not found.";
           }
           return `Error: ${error.message}`;
       }
   }
   ```
   This function reads the file content, replaces the words according to the dictionary, and handles errors appropriately.

4. **Example Usage**:
   ```javascript
   (async () => {
       try {
           const result = await replaceWordsInFile('example.txt', {'hello': 'hi', 'world': 'earth'});
           console.log(result);
       } catch (error) {
           console.error(error);
       }
   })();
   ```
   This demonstrates how to call the function and handle the returned value.

This conversion preserves the original functionality, logic, and structure of the Python code while adhering to JavaScript standards and JSDoc documentation.