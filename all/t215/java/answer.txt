Here's the equivalent Java code for the given Python function:

```java
package org.real.temp;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class Answer {

    /**
     * Read a text file, replace words according to a dictionary map, and return the modified text.
     *
     * @param filePath       The path to the text file.
     * @param replacementDict A dictionary where the keys are words to be replaced, and the values are the replacement words.
     * @return The text with the words replaced.
     */
    public static String replaceWordsInFile(String filePath, Map<String, String> replacementDict) {
        StringBuilder result = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                for (Map.Entry<String, String> entry : replacementDict.entrySet()) {
                    line = line.replace(entry.getKey(), entry.getValue());
                }
                result.append(line).append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result.toString().trim(); // Remove trailing newline
    }

    public static void main(String[] args) {
        // Example usage
        Map<String, String> replacements = new HashMap<>();
        replacements.put("hello", "hi");
        replacements.put("world", "earth");

        String filePath = "path/to/your/file.txt";
        String modifiedText = replaceWordsInFile(filePath, replacements);
        System.out.println(modifiedText);
    }
}
```

### Explanation:
1. **Package Declaration**: The `package` declaration is set to `org.real.temp`.
2. **Class Definition**: The class `Answer` is defined within the package.
3. **Method Signature**: The method `replaceWordsInFile` is defined with the same parameters and return type as in the Python code.
4. **File Reading**: The `BufferedReader` is used to read the file line by line.
5. **Word Replacement**: For each line, the method iterates over the `replacementDict` and replaces occurrences of the keys with their corresponding values.
6. **Result Construction**: The modified lines are appended to a `StringBuilder`, which is then converted to a string and returned.
7. **Exception Handling**: The `IOException` is caught and printed to the console.
8. **Main Method**: An example usage of the `replaceWordsInFile` method is provided in the `main` method.

Make sure to replace `"path/to/your/file.txt"` with the actual path to your text file.