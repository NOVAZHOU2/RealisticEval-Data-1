Sure! Below is an equivalent C++ unit test case using Catch2 for the `replace_words_in_file` function. Note that I'll assume you have a function implementation for `replace_words_in_file` in your C++ code, which reads a file, replaces words according to a dictionary, and returns the modified text.

First, let's define the function signature in C++:

```cpp
#include <string>
#include <unordered_map>

std::string replace_words_in_file(const std::string& file_path, const std::unordered_map<std::string, std::string>& replacement_dict);
```

Now, here is the Catch2 unit test case:

```cpp
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file

#include "catch.hpp"
#include "your_header_file.h"  // Include the header file containing replace_words_in_file declaration

TEST_CASE("Replace words in file", "[file_replacement]") {
    // Define a sample input file content
    std::string file_content = "hello world\nthis is a test";

    // Write the sample input file to disk
    std::ofstream file("test_input.txt");
    file << file_content;
    file.close();

    // Define the replacement dictionary
    std::unordered_map<std::string, std::string> replacement_dict = {
        {"hello", "hi"},
        {"world", "earth"}
    };

    // Call the function under test
    std::string result = replace_words_in_file("test_input.txt", replacement_dict);

    // Expected output after replacements
    std::string expected_output = "hi earth\ntest is a test";

    // Check if the result matches the expected output
    REQUIRE(result == expected_output);

    // Clean up the temporary file
    remove("test_input.txt");
}
```

### Explanation:
1. **Catch2 Configuration**: The `#define CATCH_CONFIG_MAIN` directive tells Catch2 to provide the `main()` function automatically.
2. **Test Case Definition**: The `TEST_CASE` macro defines a new test case named "Replace words in file".
3. **Sample Input File**: We create a sample input file `test_input.txt` with some initial content.
4. **Replacement Dictionary**: We define a replacement dictionary with key-value pairs indicating which words should be replaced.
5. **Function Call**: We call the `replace_words_in_file` function with the test file path and the replacement dictionary.
6. **Expected Output**: We define the expected output after applying the replacements.
7. **Assertion**: We use `REQUIRE` to assert that the result of the function matches the expected output.
8. **Cleanup**: Finally, we clean up by removing the temporary test file.

Make sure to include the appropriate headers and link against the Catch2 library when compiling your C++ code.