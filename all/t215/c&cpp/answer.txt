Sure, here is how you can convert the given Python function into C++ code:

```c++
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <map>

std::string replaceWordsInFile(const std::string& filePath, const std::map<std::string, std::string>& replacementDict) {
    std::ifstream file(filePath);
    if (!file.is_open()) {
        throw std::runtime_error("Unable to open file");
    }

    std::stringstream buffer;
    buffer << file.rdbuf();
    std::string content = buffer.str();

    for (const auto& pair : replacementDict) {
        size_t pos = 0;
        while ((pos = content.find(pair.first, pos)) != std::string::npos) {
            content.replace(pos, pair.first.length(), pair.second);
            pos += pair.second.length();
        }
    }

    file.close();
    return content;
}
```

This C++ code does exactly what your Python function does. It reads the content of a file, replaces words according to a dictionary, and returns the modified text.

### Explanation:
- **`std::ifstream file(filePath);`**: Opens the file specified by `filePath`.
- **`if (!file.is_open()) { ... }`**: Checks if the file was successfully opened. If not, it throws an exception.
- **`std::stringstream buffer; buffer << file.rdbuf(); std::string content = buffer.str();`**: Reads the entire content of the file into a string.
- **`for (const auto& pair : replacementDict) { ... }`**: Iterates over each key-value pair in the replacement dictionary.
- **`while ((pos = content.find(pair.first, pos)) != std::string::npos) { ... }`**: Finds the position of the word to be replaced and replaces it with the corresponding value from the dictionary.
- **`file.close();`**: Closes the file after reading its contents.

Make sure to include error handling and proper resource management in production-quality code. This example is kept simple for clarity.