Certainly! Below is the equivalent C++ code for the given Python function, including appropriate comments and documentation:

```cpp
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <string>
#include <stdexcept>

/**
 * Read a text file, replace words according to a dictionary map, and return the modified text.
 *
 * Parameters:
 * - file_path (std::string): The path to the text file.
 * - replacement_dict (std::unordered_map<std::string, std::string>): A dictionary where the keys are words to be replaced, and the values are the replacement words.
 *
 * Returns:
 * - std::string: The text with the words replaced.
 */
std::string replaceWordsInFile(const std::string& file_path, const std::unordered_map<std::string, std::string>& replacement_dict) {
    try {
        // Read the content of the file
        std::ifstream file(file_path);
        if (!file.is_open()) {
            throw std::runtime_error("The file was not found.");
        }

        std::string text((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
        file.close();

        // Replace words according to the replacement dictionary
        for (const auto& pair : replacement_dict) {
            size_t startPos = 0;
            while ((startPos = text.find(pair.first, startPos)) != std::string::npos) {
                text.replace(startPos, pair.first.length(), pair.second);
                startPos += pair.second.length();
            }
        }

        return text;

    } catch (const std::exception& e) {
        return "Error: " + std::string(e.what());
    }
}

int main() {
    // Example usage
    std::unordered_map<std::string, std::string> replacementDict = {
        {"old_word", "new_word"},
        {"another_old", "another_new"}
    };

    std::string filePath = "example.txt";
    std::string modifiedText = replaceWordsInFile(filePath, replacementDict);

    std::cout << modifiedText << std::endl;

    return 0;
}
```

### Explanation:
1. **Header Files**:
   - `#include <iostream>` for input/output operations.
   - `#include <fstream>` for file handling.
   - `#include <unordered_map>` for dictionary mapping.
   - `#include <string>` for string manipulation.
   - `#include <stdexcept>` for exception handling.

2. **Function Definition**:
   - `replaceWordsInFile` takes a file path (`std::string`) and a dictionary (`std::unordered_map<std::string, std::string>`) as parameters.
   - It reads the content of the file using `std::ifstream`.
   - If the file cannot be opened, it throws a `std::runtime_error`.
   - It uses `std::string::find` and `std::string::replace` to replace words according to the dictionary.

3. **Documentation Comments**:
   - Multi-line comments (`/* ... */`) are used for the function documentation.
   - Single-line comments (`//`) are used for inline comments within the function.

4. **Exception Handling**:
   - Uses a try-catch block to handle exceptions, specifically catching `std::exception` to provide error messages.

5. **Main Function**:
   - Demonstrates how to use the `replaceWordsInFile` function with an example dictionary and file path.
   - Prints the modified text to the console.

This C++ code preserves the original purpose and structure of the Python code, translating it appropriately to C++ syntax and conventions.