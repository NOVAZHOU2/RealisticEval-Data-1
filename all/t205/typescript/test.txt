Hereâ€™s the equivalent test case using TypeScript's Jest framework, adapted from the provided C++ Catch2 tests:

```typescript
describe("getCurrentDate function", () => {
    test("Correct format YYYY-MM-DD", () => {
        const currentDate = getCurrentDate();
        expect(currentDate.length).toBe(10);
        expect(currentDate[4]).toBe('-');
        expect(currentDate[7]).toBe('-');
    });

    test("Returns correct year", () => {
        const now = new Date();
        const currentYear = now.getFullYear();

        const currentDate = getCurrentDate();
        const yearPart = currentDate.substr(0, 4);

        expect(parseInt(yearPart, 10)).toBe(currentYear);
    });

    test("Returns correct month", () => {
        const now = new Date();
        const currentMonth = now.getMonth() + 1; // Months are 0-indexed

        const currentDate = getCurrentDate();
        const monthPart = currentDate.substr(5, 2);

        expect(parseInt(monthPart, 10)).toBe(currentMonth);
    });

    test("Returns correct day", () => {
        const now = new Date();
        const currentDay = now.getDate();

        const currentDate = getCurrentDate();
        const dayPart = currentDate.substr(8, 2);

        expect(parseInt(dayPart, 10)).toBe(currentDay);
    });

    test("Consistency of output within the same second", () => {
        const firstCall = getCurrentDate();
        const secondCall = getCurrentDate();
        expect(firstCall).toBe(secondCall);
    });
});
```

### Key Adjustments:
1. **`describe` and `test` Structure**: Jest uses `describe` for grouping tests and `test` for individual test cases.
2. **Assertions**: Replaced `REQUIRE` with Jest's `expect` syntax, using `.toBe()` for comparisons.
3. **Date Handling**: Used the `Date` object in JavaScript for current date calculations instead of `std::time_t` and `std::tm`.
4. **String Parsing**: Used `parseInt` to convert string parts into integers.

This adaptation maintains the logic and structure of the original tests while adhering to Jest's syntax and conventions.