Hereâ€™s the equivalent C++ test case using Catch2 for the provided JavaScript Jest test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <string>

// Assume compressHTML is defined elsewhere
std::string compressHTML(const std::string& htmlString);

TEST_CASE("compressHTML") {
    SECTION("should remove leading and trailing spaces around tags") {
        std::string input = "  <div>  <p>Test</p>  </div>  ";
        std::string expected = "<div><p>Test</p></div>";
        REQUIRE(compressHTML(input) == expected);
    }

    SECTION("should replace multiple newlines with a single space") {
        std::string input = "<div>\n\n<p>Test</p>\n\n</div>";
        std::string expected = "<div> <p>Test</p> </div>";
        REQUIRE(compressHTML(input) == expected);
    }

    SECTION("should remove unnecessary spaces within text") {
        std::string input = "<p>This    is a test</p>";
        std::string expected = "<p>This is a test</p>";
        REQUIRE(compressHTML(input) == expected);
    }

    SECTION("should handle empty strings") {
        std::string input = "";
        std::string expected = "";
        REQUIRE(compressHTML(input) == expected);
    }

    SECTION("should process complex nested HTML correctly") {
        std::string input = "<div>   <span>    Text <i>    Italic </i> more text </span>   </div>";
        std::string expected = "<div><span>Text <i>Italic</i> more text</span></div>";
        REQUIRE(compressHTML(input) == expected);
    }

    SECTION("should not disrupt content within <pre> and <textarea> tags") {
        std::string input = "<pre>\n    function example() {\n        console.log(\"example\");\n    }\n</pre>";
        std::string expected = "<pre>\n    function example() {\n        console.log(\"example\");\n    }\n</pre>"; // assuming no changes in <pre> and <textarea>
        REQUIRE(compressHTML(input) == expected);
    }

    SECTION("should handle HTML with attributes correctly") {
        std::string input = "<a href=\"http://example.com\"    title=\"Example\" >Link</a>";
        std::string expected = "<a href=\"http://example.com\" title=\"Example\">Link</a>";
        REQUIRE(compressHTML(input) == expected);
    }
}
```

This C++ code uses Catch2's `TEST_CASE` and `SECTION` macros to structure the tests similarly to Jest, and it uses `REQUIRE` to assert that the results of `compressHTML` match the expected output.