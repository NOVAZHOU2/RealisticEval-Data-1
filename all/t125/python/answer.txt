To convert the provided JavaScript function that compresses HTML to Python, we can use the re module for regular expressions, which provides functionality similar to JavaScript's String.prototype.replace(). Here's the Python equivalent of the JavaScript code:
JavaScript Code
javascript
function compressHTML(html) {
    // Remove leading/trailing whitespace around tags
    html = html.replace(/\s*(<[^>]+>)\s*/g, '\$1');
    // Remove multiple newlines and replace with a single space
    html = html.replace(/\n+/g, ' ');
    // Remove multiple spaces and replace them with a single space
    html = html.replace(/[ \t]+/g, ' ');
    return html.trim();
}
Python Code
python
import re

def compress_html(html):
    # Remove leading/trailing whitespace around tags
    html = re.sub(r'\s*(<[^>]+>)\s*', r'\1', html)
    # Remove multiple newlines and replace with a single space
    html = re.sub(r'\n+', ' ', html)
    # Remove multiple spaces and replace them with a single space
    html = re.sub(r'[ \t]+', ' ', html)
    return html.strip()

# Example usage
html_string = "  <div>   \n\n  <span>   Hello World!   </span>  \n  </div>  "
compressed_html = compress_html(html_string)
print(compressed_html)  # Output: "<div><span>Hello World!</span></div>"
Explanation of the Python Code:
Importing the re Module: The re module is imported for handling regular expressions.
Function Definition: The function is defined as compress_html, following Python's naming conventions (snake_case).
Regular Expression Substitutions:
The first re.sub() removes leading and trailing whitespace around tags. The regex \s*(<[^>]+>)\s* matches optional whitespace around HTML tags.
The second re.sub() replaces multiple newlines with a single space using the regex \n+.
The third re.sub() replaces multiple spaces (including tabs) with a single space using the regex [ \t]+.
Trimming the Result: Finally, strip() is used to remove any leading or trailing whitespace from the final string.
Example Usage: An example HTML string is provided to demonstrate how the function can be used, and the output is printed.
This Python implementation closely follows the logic of the original JavaScript function while adapting it to Python syntax and conventions.