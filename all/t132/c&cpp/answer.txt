To convert the provided JavaScript code into C++, we can use the C++ standard library for file operations. Hereâ€™s a simple equivalent:

```cpp
#include <iostream>
#include <fstream>
#include <stdexcept>
#include <string>

/**
 * Reads the content of a file synchronously and returns it as a string.
 *
 * @param filePath - The path to the file to be read.
 * @returns The content of the file as a UTF-8 encoded string.
 * @throws std::runtime_error - Throws an error if the file cannot be read.
 */
std::string readFile(const std::string& filePath) {
    std::ifstream file(filePath);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to read file at " + filePath);
    }
    std::string content((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
    return content;
}

/**
 * Writes data to a file synchronously.
 *
 * @param filePath - The path to the file where data will be written.
 * @param data - The data to be written to the file.
 * @throws std::runtime_error - Throws an error if the file cannot be written.
 */
void writeFile(const std::string& filePath, const std::string& data) {
    std::ofstream file(filePath);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to write file at " + filePath);
    }
    file << data;
}
```

This C++ code utilizes the `fstream` library for file operations, ensuring you can read and write files similarly to the JavaScript version. Would you like to delve deeper into any specific part of this code?