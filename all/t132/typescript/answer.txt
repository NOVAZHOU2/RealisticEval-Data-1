Here's the JavaScript code converted to TypeScript. I've added type annotations for the function parameters and return types.

```typescript
import * as fs from 'fs';

/**
 * Reads the content of a file synchronously and returns it as a string.
 *
 * @param {string} filePath - The path to the file to be read.
 * @returns {string} - The content of the file as a UTF-8 encoded string.
 * @throws {Error} - Throws an error if the file cannot be read.
 */
function readFile(filePath: string): string {
    try {
        return fs.readFileSync(filePath, 'utf8');
    } catch (error) {
        throw new Error(`Failed to read file at ${filePath}: ${(error as Error).message}`);
    }
}

/**
 * Writes question to a file synchronously.
 *
 * @param {string} filePath - The path to the file where question will be written.
 * @param {string} data - The question to be written to the file.
 * @throws {Error} - Throws an error if the file cannot be written.
 */
function writeFile(filePath: string, data: string): void {
    try {
        fs.writeFileSync(filePath, data);
    } catch (error) {
        throw new Error(`Failed to write file at ${filePath}: ${(error as Error).message}`);
    }
}
```

### Changes Made:
1. **Imports**: Changed `require` to `import` for ESM syntax.
2. **Type Annotations**: Added types for function parameters and return types.
3. **Error Handling**: Used a type assertion `(error as Error)` to ensure TypeScript recognizes the `message` property.