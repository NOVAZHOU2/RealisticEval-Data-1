Here is the equivalent Java code:

```java
package org.real.temp;

import java.util.List;

public class Answer {
    public static int canCompleteCircuit(List<Integer> gas, List<Integer> cost) {
        /**
         * Determines if there exists a starting gas station's index where you can travel
         * around the circuit once in a clockwise direction.
         *
         * @param gas  List of integers representing the amount of gas at each station.
         * @param cost List of integers representing the cost of gas to travel from each station to the next.
         * @return The starting gas station's index if the circuit can be completed, otherwise -1.
         */
        
        int totalGas = 0;
        int currentGas = 0;
        int startStation = 0;

        for(int i = 0; i < gas.size(); i++) {
            totalGas += gas.get(i) - cost.get(i);
            currentGas += gas.get(i) - cost.get(i);

            if(currentGas < 0) {
                startStation = i + 1;
                currentGas = 0;
            }
        }

        return totalGas >= 0 ? startStation : -1;
    }
}
```

This Java code defines a method `canCompleteCircuit` within the class `Answer`. It takes two lists of integers, `gas` and `cost`, as parameters. This method returns an integer that represents the starting gas station's index if the circuit can be completed, otherwise it returns `-1`.

The logic of this method is similar to your Python function. It iterates through the list, calculates the difference between the gas and cost at each station, and checks if the total gas is sufficient to complete the circuit. If not, it resets the start station to the next one. At the end, it returns the starting station index or `-1` if it's not possible to complete the circuit.