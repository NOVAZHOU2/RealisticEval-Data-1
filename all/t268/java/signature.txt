Certainly! Below is the equivalent Java code for the given Python function, including appropriate Java-style comments and Javadoc documentation:

```java
import java.util.List;

public class Answer {

    /**
     * Determines if there exists a starting gas station's index where you can travel
     * around the circuit once in a clockwise direction.
     *
     * @param gas List of integers representing the amount of gas at each station.
     * @param cost List of integers representing the cost of gas to travel from each station to the next.
     * @return The starting gas station's index if the circuit can be completed, otherwise -1.
     */
    public static int canCompleteCircuit(List<Integer> gas, List<Integer> cost) {
        int n = gas.size();
        int totalGas = 0, totalCost = 0, tank = 0, startIndex = 0;

        for (int i = 0; i < n; i++) {
            totalGas += gas.get(i);
            totalCost += cost.get(i);
            tank += gas.get(i) - cost.get(i);

            if (tank < 0) {  // If tank becomes negative, update startIndex and reset tank
                startIndex = i + 1;
                tank = 0;
            }
        }

        return totalGas >= totalCost ? startIndex : -1;
    }

    public static void main(String[] args) {
        // Example usage
        List<Integer> gas = List.of(1, 2, 3, 4, 5);
        List<Integer> cost = List.of(3, 4, 5, 1, 2);
        System.out.println(canCompleteCircuit(gas, cost));
    }
}
```

### Explanation:
1. **Import Statements**:
   - `import java.util.List;`: This is required to use the `List` interface in Java.

2. **Class Definition**:
   - The class `Answer` is defined.

3. **Javadoc Documentation**:
   - The method `canCompleteCircuit` is documented using Javadoc comments, providing details about the method's purpose, arguments, and return value.

4. **Method Signature**:
   - The method `canCompleteCircuit` takes two `List<Integer>` parameters (`gas` and `cost`) and returns an `int`.

5. **Logic**:
   - The logic remains the same as the Python code, including the loop to calculate `totalGas`, `totalCost`, and `tank`, and updating `startIndex` when the tank becomes negative.

6. **Return Statement**:
   - The method returns `startIndex` if `totalGas` is greater than or equal to `totalCost`; otherwise, it returns `-1`.

7. **Example Usage**:
   - The `main` method demonstrates how to call the `canCompleteCircuit` method with example data.

This Java code preserves the functionality and structure of the original Python code while adhering to Java's syntax and conventions.