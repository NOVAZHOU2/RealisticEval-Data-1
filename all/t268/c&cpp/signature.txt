Certainly! Here is the equivalent C++ code for the provided Python function, including the translation of the function signature, comments, and documentation:

```cpp
#include <vector>
#include <iostream>

/**
 * Determines if there exists a starting gas station's index where you can travel
 * around the circuit once in a clockwise direction.
 *
 * @param gas A vector of integers representing the amount of gas at each station.
 * @param cost A vector of integers representing the cost of gas to travel from each station to the next.
 * @return The starting gas station's index if the circuit can be completed, otherwise -1.
 */
int canCompleteCircuit(const std::vector<int>& gas, const std::vector<int>& cost) {
    int n = gas.size();
    int total_gas = 0;
    int total_cost = 0;
    int tank = 0;
    int start_index = 0;

    for (int i = 0; i < n; ++i) {
        total_gas += gas[i];
        total_cost += cost[i];
        tank += gas[i] - cost[i];

        if (tank < 0) {  // If tank becomes negative, update start_index and reset tank
            start_index = i + 1;
            tank = 0;
        }
    }

    return (total_gas >= total_cost) ? start_index : -1;
}

// Example usage:
int main() {
    std::vector<int> gas = {1, 2, 3, 4, 5};
    std::vector<int> cost = {3, 4, 5, 1, 2};
    int result = canCompleteCircuit(gas, cost);
    std::cout << "Starting index: " << result << std::endl;
    return 0;
}
```

### Explanation:
1. **Include Directives**: Include necessary headers (`<vector>` and `<iostream>`).
2. **Function Documentation**: Use `/** ... */` for multi-line comments to document the function.
3. **Function Signature**: The function `canCompleteCircuit` takes two `std::vector<int>` parameters, `gas` and `cost`, and returns an `int`.
4. **Variable Initialization**: Initialize variables `n`, `total_gas`, `total_cost`, `tank`, and `start_index`.
5. **Loop**: Iterate through the stations using a `for` loop.
6. **Conditions**: Update `total_gas` and `total_cost` within the loop. If `tank` becomes negative, update `start_index` and reset `tank`.
7. **Return Statement**: Return `start_index` if `total_gas` is greater than or equal to `total_cost`; otherwise, return `-1`.
8. **Example Usage**: Provide an example usage in the `main` function to demonstrate how to call the function.

This C++ code preserves the original purpose and structure of the Python code, including the comments and documentation.