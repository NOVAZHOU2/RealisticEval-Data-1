Sure! Here is the equivalent C++ code for the provided Python function:

```cpp
#include <vector>
#include <algorithm>

int canCompleteCircuit(const std::vector<int>& gas, const std::vector<int>& cost) {
    int n = gas.size();
    int total_gas = 0;
    int total_cost = 0;
    int tank = 0;
    int start_index = 0;

    for (int i = 0; i < n; ++i) {
        total_gas += gas[i];
        total_cost += cost[i];
        tank += gas[i] - cost[i];

        if (tank < 0) {  // If tank becomes negative, update start_index and reset tank
            start_index = i + 1;
            tank = 0;
        }
    }

    return (total_gas >= total_cost) ? start_index : -1;
}

// Example usage:
int main() {
    std::vector<int> gas = {1, 2, 3, 4, 5};
    std::vector<int> cost = {3, 4, 5, 1, 2};
    int result = canCompleteCircuit(gas, cost);
    std::cout << "Starting index: " << result << std::endl;
    return 0;
}
```

### Explanation:
1. **Function Definition**: The function `canCompleteCircuit` takes two `std::vector<int>` parameters, `gas` and `cost`, which represent the amount of gas at each station and the cost of traveling to the next station, respectively.
2. **Variables Initialization**: Initialize variables `n`, `total_gas`, `total_cost`, `tank`, and `start_index`.
3. **Loop**: Iterate through the stations using a `for` loop.
4. **Conditions**: Update `total_gas` and `total_cost` within the loop. If `tank` becomes negative, update `start_index` and reset `tank`.
5. **Return Statement**: Return `start_index` if `total_gas` is greater than or equal to `total_cost`; otherwise, return `-1`.

This C++ code maintains the same functionality and logic as the original Python code.