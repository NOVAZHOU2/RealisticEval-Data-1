Sure, here is the equivalent C++ code for the given Python function:

```cpp
#include <vector>
#include <algorithm>

int canCompleteCircuit(const std::vector<int>& gas, const std::vector<int>& cost) {
    int n = gas.size();
    int total_gas = 0, total_cost = 0, tank = 0, start_index = 0;

    for (int i = 0; i < n; ++i) {
        total_gas += gas[i];
        total_cost += cost[i];
        tank += gas[i] - cost[i];

        if (tank < 0) {  // If tank becomes negative, update start_index and reset tank
            start_index = i + 1;
            tank = 0;
        }
    }

    return (total_gas >= total_cost) ? start_index : -1;
}

// Example usage
int main() {
    std::vector<int> gas = {1, 2, 3, 4, 5};
    std::vector<int> cost = {3, 4, 5, 1, 2};
    int result = canCompleteCircuit(gas, cost);
    // Process the result
    return 0;
}
```

### Explanation:
- **Headers**: The necessary headers are included (`<vector>` and `<algorithm>`).
- **Function Definition**: The function `canCompleteCircuit` takes two `std::vector<int>` parameters, `gas` and `cost`.
- **Variables**: Variables `n`, `total_gas`, `total_cost`, `tank`, and `start_index` are declared and initialized.
- **Loop**: A `for` loop iterates over the elements of the vectors `gas` and `cost`.
- **Logic**: The logic inside the loop remains the same as in the Python version, including updating `total_gas`, `total_cost`, `tank`, and `start_index`.
- **Return Statement**: The function returns `start_index` if `total_gas` is greater than or equal to `total_cost`; otherwise, it returns `-1`.

This C++ code should perform the same functionality as the original Python code.