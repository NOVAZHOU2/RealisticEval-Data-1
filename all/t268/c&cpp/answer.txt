Here is a C++ version of your Python code:

```c++
#include <vector>
using namespace std;

int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
    int total_gas = 0;
    int current_gas = 0;
    int start_station = 0;

    for(int i=0; i<gas.size(); i++){
        total_gas += gas[i] - cost[i];
        current_gas += gas[i] - cost[i];

        // If current gas becomes negative, we need to reset our start station
        if(current_gas < 0){
            start_station = i + 1;
            current_gas = 0;
        }
    }

    // If total gas is less than zero, it means we cannot complete the circuit
    return (total_gas >= 0)? start_station : -1;
}
```

And here is a corresponding C version of your Python code:

```c
#include <stdio.h>

int canCompleteCircuit(int* gas, int gasSize, int* cost, int costSize) {
    int total_gas = 0;
    int current_gas = 0;
    int start_station = 0;

    for(int i=0; i<gasSize; i++){
        total_gas += gas[i] - cost[i];
        current_gas += gas[i] - cost[i];

        // If current gas becomes negative, we need to reset our start station
        if(current_gas < 0){
            start_station = i + 1;
            current_gas = 0;
        }
    }

    // If total gas is less than zero, it means we cannot complete the circuit
    return (total_gas >= 0)? start_station : -1;
}

int main() {
    int gas[] = {1,2,3,4,5};
    int cost[] = {3,4,5,1,2};

    printf("%d\n", canCompleteCircuit(gas, sizeof(gas)/sizeof(gas[0]), cost, sizeof(cost)/sizeof(cost[0])));

    return 0;
}
```
In both versions, the function `canCompleteCircuit` takes two arrays of integers `gas` and `cost`, and their sizes `gasSize` and `costSize`. It returns the starting gas station's index if the circuit can be completed, otherwise -1.