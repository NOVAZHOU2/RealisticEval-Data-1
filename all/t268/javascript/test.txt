To convert the provided Python code into JavaScript, we need to first implement the function `canCompleteCircuit` in JavaScript and then write the corresponding Jest tests for it. Below is the step-by-step conversion:

### Step 1: Implement the `canCompleteCircuit` Function in JavaScript

```javascript
/**
 * Determines if there exists a starting gas station's index where you can travel
 * around the circuit once in a clockwise direction.
 *
 * @param {number[]} gas - List of integers representing the amount of gas at each station.
 * @param {number[]} cost - List of integers representing the cost of gas to travel from each station to the next.
 * @returns {number} The starting gas station's index if the circuit can be completed, otherwise -1.
 */
function canCompleteCircuit(gas, cost) {
    let totalGas = 0;
    let totalCost = 0;
    let start = 0;
    let gasTank = 0;

    // Check if there is a valid starting point
    for (let i = 0; i < gas.length; i++) {
        totalGas += gas[i];
        totalCost += cost[i];
        gasTank += gas[i] - cost[i];

        // If the gas tank goes negative, reset the start and gasTank
        if (gasTank < 0) {
            start = i + 1;
            gasTank = 0;
        }
    }

    // If the total gas is less than the total cost, no solution exists
    if (totalGas < totalCost) {
        return -1;
    } else {
        return start;
    }
}
```

### Step 2: Write Jest Tests

Now, we will write Jest tests to verify the correctness of the `canCompleteCircuit` function. We will use Jest's `describe`, `it`, and `expect` functions to structure our tests.

```javascript
const canCompleteCircuit = require('./canCompleteCircuit'); // Import the function

describe('canCompleteCircuit', () => {
    it('should return -1 when the circuit cannot be completed', () => {
        const gas = [1, 2, 3, 4, 5];
        const cost = [3, 4, 5, 1, 2];
        expect(canCompleteCircuit(gas, cost)).toBe(3);
    });

    it('should return -1 when the total gas is less than the total cost', () => {
        const gas = [2, 3, 4];
        const cost = [3, 4, 3];
        expect(canCompleteCircuit(gas, cost)).toBe(-1);
    });

    it('should return the correct starting station index when the circuit can be completed', () => {
        const gas = [5, 1, 2, 3, 4];
        const cost = [4, 4, 1, 5, 1];
        expect(canCompleteCircuit(gas, cost)).toBe(4);
    });
});
```

### Explanation of Changes:

1. **Function Definition**: The Python function `def canCompleteCircuit(gas: List[int], cost: List[int]) -> int:` is converted to a JavaScript function with typed parameters using JSDoc comments.
   
2. **Test Structure**: The Python `unittest` framework uses classes and methods to define tests, while Jest uses `describe` blocks and `it` blocks. The tests are structured similarly but using Jest syntax.

3. **Assertions**: Python's `unittest` framework uses various assertion methods like `assertEqual`. In Jest, we use `expect` along with matchers like `toBe`.

4. **Import/Export**: In JavaScript, we need to export the function and import it in the test file. This is not required in Python's `unittest` framework.

This conversion ensures that the functionality and logic of the tests are maintained, and the structure is clear and idiomatic for JavaScript using Jest.