Sure, here is how you could convert your Python unittest test class to a Jest test case in JavaScript:

```javascript
const canCompleteCircuit = require('./canCompleteCircuit'); // assuming your function is exported from a file named 'canCompleteCircuit.js'

describe('canCompleteCircuit', () => {
  it('should return the correct starting gas station\'s index', () => {
    const gas = [1,2,3,4,5];
    const cost = [3,4,5,1,2];
    expect(canCompleteCircuit(gas, cost)).toBe(3);
  });

  it('should return -1 when it cannot complete the circuit', () => {
    const gas = [2,3,4];
    const cost = [3,4,3];
    expect(canCompleteCircuit(gas, cost)).toBe(-1);
  });
});
```

In this example, we're using `require` to import our `canCompleteCircuit` function from another file. We then use the `describe` and `it` functions provided by Jest to create a test suite and individual tests respectively. Each test calls the `canCompleteCircuit` function with specific inputs and uses `expect` to assert that the output matches the expected result.