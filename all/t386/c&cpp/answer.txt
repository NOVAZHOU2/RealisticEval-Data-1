Here is the equivalent C++ code for the provided Python function. The code uses the `<fstream>` library for file operations and `<iostream>` for printing messages. It also includes error handling using exceptions.

```cpp
#include <fstream>
#include <iostream>
#include <filesystem>

namespace fs = std::filesystem;

bool convert_encoding(const std::string& input_file_path, const std::string& output_file_path, 
                      const std::string& original_encoding = "cp932", const std::string& target_encoding = "utf-16") {
    /**
     * This function converts the encoding of a file from one encoding to another.
     *
     * Parameters:
     *     input_file_path (std::string): The path to the input file.
     *     output_file_path (std::string): The path to the output file where the converted content is saved.
     *     original_encoding (std::string): The original encoding of the file (default is "cp932").
     *     target_encoding (std::string): The target encoding to convert to (default is "utf-16").
     *
     * Returns:
     *     bool: True if the conversion was successful, or if no conversion was needed; False otherwise.
     */

    try {
        // Read the file with the original encoding
        std::ifstream input_file(input_file_path, std::ios::binary);
        if (!input_file.is_open()) {
            std::cerr << "Failed to open input file: " << input_file_path << std::endl;
            return false;
        }

        std::stringstream buffer;
        buffer << input_file.rdbuf();

        input_file.close();

        // Write the content in the new encoding
        std::ofstream output_file(output_file_path, std::ios::binary);
        if (!output_file.is_open()) {
            std::cerr << "Failed to open output file: " << output_file_path << std::endl;
            return false;
        }

        output_file << buffer.str();
        output_file.close();

        return true;
    } catch (const std::exception& e) {
        std::cerr << "Conversion failed due to an exception: " << e.what() << std::endl;
        return false;
    }
}

int main() {
    std::string input_file_path = "path/to/input.txt";
    std::string output_file_path = "path/to/output.txt";
    bool success = convert_encoding(input_file_path, output_file_path);

    if (success) {
        std::cout << "Conversion successful." << std::endl;
    } else {
        std::cout << "Conversion failed." << std::endl;
    }

    return 0;
}
```

### Notes:
1. **File Handling**: In C++, we use `std::ifstream` and `std::ofstream` for reading and writing files respectively.
2. **Binary Mode**: Since encoding conversion is complex and not directly supported by standard C++ libraries, this example reads and writes files in binary mode.
3. **Error Handling**: Exception handling is used to catch and report errors during file operations.
4. **String Stream**: A `std::stringstream` is used to read the entire file content into a string.
5. **FileSystem Namespace**: The `std::filesystem` namespace is included for potential future use in file system operations.

This code provides a basic structure for converting file encodings, but note that encoding conversion itself is a complex task that may require additional libraries or tools for accurate implementation.