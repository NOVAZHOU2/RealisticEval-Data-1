First, let's define the TypeScript function `convertEncoding` which is equivalent to the Python function `convert_encoding`. Then we'll write the Jest test class to cover this function.

### TypeScript Function Definition

```typescript
import * as fs from 'fs';
import { promisify } from 'util';

const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);

async function convertEncoding(
  inputFilePath: string,
  outputFilePath: string,
  originalEncoding: string = "cp932",
  targetEncoding: string = "utf-16"
): Promise<boolean> {
  try {
    const content = await readFileAsync(inputFilePath, { encoding: originalEncoding });
    await writeFileAsync(outputFilePath, content, { encoding: targetEncoding });
    return true;
  } catch (error) {
    console.error("Error converting encoding:", error);
    return false;
  }
}

export default convertEncoding;
```

### Jest Test Class

Now, let's write the Jest test class for `convertEncoding`.

```typescript
import convertEncoding from './path/to/convertEncoding'; // Adjust the import path accordingly

describe('convertEncoding', () => {
  const inputFilePath = './testInput.txt';
  const outputFilePath = './testOutput.txt';
  const testContent = 'Hello, World!';

  beforeEach(() => {
    // Write the test content to the input file with the specified encoding
    fs.writeFileSync(inputFilePath, testContent, { encoding: 'cp932' });
  });

  afterEach(() => {
    // Clean up by removing the test files
    fs.unlinkSync(inputFilePath);
    fs.unlinkSync(outputFilePath);
  });

  it('should successfully convert the encoding of a file', async () => {
    const result = await convertEncoding(inputFilePath, outputFilePath);
    expect(result).toBe(true);

    const convertedContent = await fs.promises.readFile(outputFilePath, { encoding: 'utf-16' });
    expect(convertedContent).toBe(testContent);
  });

  it('should handle errors during encoding conversion', async () => {
    // Simulate an error by providing a non-existent input file
    const result = await convertEncoding('./nonExistentFile.txt', outputFilePath);
    expect(result).toBe(false);
  });
});
```

### Explanation:

1. **Function Definition**: The `convertEncoding` function reads the content of the input file with the specified original encoding and writes it to the output file with the specified target encoding. It returns `true` on success and `false` on failure.

2. **Jest Test Class**:
   - **Before Each**: Before each test, it sets up the test environment by writing the test content to the input file with the specified original encoding.
   - **After Each**: After each test, it cleans up by removing the test files.
   - **Test Cases**:
     - **Success Case**: Checks that the function successfully converts the encoding and verifies the content of the output file.
     - **Error Handling**: Simulates an error by providing a non-existent input file and checks that the function returns `false`.

Make sure you have Jest installed (`npm install --save-dev jest`) and adjust the import paths as needed.