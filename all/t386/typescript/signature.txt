Here is the equivalent TypeScript code for the given Python function:

```typescript
import { copyfile } from 'fs';

/**
 * Converts the encoding of a file from one encoding to another.
 * 
 * @param inputFilePath - The path to the input file.
 * @param outputFilePath - The path to the output file where the converted content is saved.
 * @param originalEncoding - The original encoding of the file (default is "cp932").
 * @param targetEncoding - The target encoding to convert to (default is "utf-16").
 * @returns {Promise<boolean>} A promise that resolves to true if the conversion was successful, or if no conversion was needed; false otherwise.
 */
async function convertEncoding(inputFilePath: string, outputFilePath: string, originalEncoding: string = "cp932", targetEncoding: string = "utf-16"): Promise<boolean> {
    try {
        // Assuming a utility function or library method to handle encoding conversion
        // For demonstration purposes, we'll use a placeholder function `convertFileEncoding`
        await convertFileEncoding(inputFilePath, outputFilePath, originalEncoding, targetEncoding);
        return true;
    } catch (error) {
        console.error("Error converting file encoding:", error);
        return false;
    }
}

// Placeholder function for encoding conversion
async function convertFileEncoding(inputFilePath: string, outputFilePath: string, originalEncoding: string, targetEncoding: string): Promise<void> {
    // Implement the logic to convert the encoding of the file here
    // For example, using a library like `iconv-lite` or similar
    // This is just a placeholder implementation
    const fs = require('fs');
    const iconv = require('iconv-lite');

    const buffer = fs.readFileSync(inputFilePath);
    const decoded = iconv.decode(buffer, originalEncoding);
    const encoded = iconv.encode(decoded, targetEncoding);

    fs.writeFileSync(outputFilePath, encoded);
}

export { convertEncoding };
```

### Notes:
1. **Asynchronous Function**: Since file operations are I/O bound and typically asynchronous in Node.js, the function is defined as `async`.
2. **Placeholder `convertFileEncoding` Function**: A placeholder function is provided to demonstrate how you might implement the actual encoding conversion using `iconv-lite`.
3. **Imports**: The `fs` module is used for reading and writing files, and `iconv-lite` is used for encoding conversion. You would need to install these packages (`fs` is part of Node.js core, but `iconv-lite` needs to be installed separately).
4. **JSDoc Comments**: The TypeScript function includes JSDoc comments for better documentation and type checking.

This conversion assumes that the file conversion process is handled by a suitable library or custom implementation.