Here's how you can write the same Python function in TypeScript:

```typescript
import * as fs from 'fs';

function convertEncoding(inputFilePath: string, outputFilePath: string, originalEncoding: string = "cp932", 
                         targetEncoding: string = "utf-16"): boolean {
    try {
        let data = fs.readFileSync(inputFilePath, {encoding: originalEncoding});
        fs.writeFileSync(outputFilePath, data, {encoding: targetEncoding});
        return true;
    } catch (err) {
        console.error(err);
        return false;
    }
}
```

This TypeScript function reads the contents of the input file with the specified original encoding, and then writes those contents to the output file using the specified target encoding. If any errors occur during this process, it logs them to the console and returns `false`. Otherwise, it returns `true`.

Please note that Node.js's built-in `fs` module does not support all encodings like Python's `shutil`, so some encodings may not work correctly when reading or writing files.

Also, TypeScript doesn't have direct support for encoding conversions like Python, so we're just assuming that Node.js will handle the encoding conversion automatically. For more complex encoding conversions, you might need to use third-party libraries like iconv-lite.