Certainly! Below is the equivalent TypeScript code for the provided Python script. This TypeScript version will maintain the same functionality, structure, and logic, while adhering to TypeScript's static type system and best practices.

```typescript
import * as fs from 'fs';
import * as path from 'path';
import * as util from 'util';

// Promisify the fs methods
const readFileAsync = util.promisify(fs.readFile);
const writeFileAsync = util.promisify(fs.writeFile);

/**
 * Converts the encoding of a file from one encoding to another.
 * 
 * @param inputFilePath - The path to the input file.
 * @param outputFilePath - The path to the output file where the converted content is saved.
 * @param originalEncoding - The original encoding of the file (default is 'cp932').
 * @param targetEncoding - The target encoding to convert to (default is 'utf16').
 * @returns A promise that resolves to true if the conversion was successful, or if no conversion was needed; false otherwise.
 */
async function convertEncoding(
  inputFilePath: string,
  outputFilePath: string,
  originalEncoding: string = 'cp932',
  targetEncoding: string = 'utf16'
): Promise<boolean> {
  try {
    // Read the file with the original encoding
    const content = await readFileAsync(inputFilePath, { encoding: originalEncoding });

    // Write the content in the new encoding
    await writeFileAsync(outputFilePath, content, { encoding: targetEncoding });

    return true;
  } catch (error) {
    if (error instanceof Error && error.name === 'UnicodeDecodeError') {
      try {
        // Check if the file is already in the target encoding
        await readFileAsync(inputFilePath, { encoding: targetEncoding });
        // Copy the file if no error occurs
        fs.copyFileSync(inputFilePath, outputFilePath);
        console.log(`File already in target encoding: ${inputFilePath}`);
        return true;
      } catch {
        console.error(`Conversion failed due to encoding error: ${error.message}`);
        return false;
      }
    } else {
      console.error(`An unexpected error occurred: ${error.message}`);
      return false;
    }
  }
}

// Example usage
(async () => {
  try {
    const result = await convertEncoding('input.txt', 'output.txt');
    console.log('Conversion result:', result);
  } catch (error) {
    console.error('An error occurred during conversion:', error);
  }
})();
```

### Explanation:
1. **Import Statements**: The necessary Node.js modules (`fs`, `path`, `util`) are imported to handle file operations and asynchronous functions.
2. **Promisified File System Methods**: The `readFile` and `writeFile` methods are promisified using `util.promisify` to enable asynchronous handling.
3. **Function Definition**: The `convertEncoding` function is defined with the appropriate types for parameters and return values.
4. **Error Handling**: The function catches errors and handles them appropriately, including checking if the file is already in the target encoding.
5. **Example Usage**: An example usage is provided at the end to demonstrate how to call the `convertEncoding` function asynchronously.

This TypeScript code ensures that the file encoding conversion logic remains consistent with the original Python implementation, while leveraging TypeScript's static typing and async/await for better readability and error handling.