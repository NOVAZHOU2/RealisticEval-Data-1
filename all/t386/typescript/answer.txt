Hereâ€™s the equivalent TypeScript code for the provided Python function, including proper type definitions and handling:

```typescript
import * as fs from 'fs';
import * as path from 'path';
import * as util from 'util';

const readFileAsync = util.promisify(fs.readFile);
const writeFileAsync = util.promisify(fs.writeFile);

/**
 * This function converts the encoding of a file from one encoding to another.
 *
 * @param inputFilePath - The path to the input file.
 * @param outputFilePath - The path to the output file where the converted content is saved.
 * @param originalEncoding - The original encoding of the file (default is 'cp932').
 * @param targetEncoding - The target encoding to convert to (default is 'utf16').
 * @returns A promise that resolves to true if the conversion was successful, or if no conversion was needed; false otherwise.
 */
async function convertEncoding(
  inputFilePath: string,
  outputFilePath: string,
  originalEncoding: string = 'cp932',
  targetEncoding: string = 'utf16'
): Promise<boolean> {
  try {
    // Read the file with the original encoding
    const content = await readFileAsync(inputFilePath, { encoding: originalEncoding });

    // Write the content in the new encoding
    await writeFileAsync(outputFilePath, content, { encoding: targetEncoding });

    return true;
  } catch (error) {
    if (error instanceof Error && error.name === 'UnicodeDecodeError') {
      try {
        // Check if the file is already in the target encoding
        await readFileAsync(inputFilePath, { encoding: targetEncoding });
        // Copy if no error occurs
        fs.copyFileSync(inputFilePath, outputFilePath);
        console.log(`File already in target encoding: ${inputFilePath}`);
        return true;
      } catch (innerError) {
        if (innerError instanceof Error && innerError.name === 'UnicodeDecodeError') {
          console.error(`Conversion failed due to encoding error: ${error.message}`);
          return false;
        }
      }
    }

    console.error(`Conversion failed due to encoding error: ${error.message}`);
    return false;
  }
}

// Example usage
(async () => {
  const result = await convertEncoding('input.txt', 'output.txt');
  console.log(`Conversion result: ${result}`);
})();
```

### Explanation:
1. **Imports**: TypeScript requires importing the necessary modules (`fs`, `path`, `util`) to handle file operations and asynchronous functions.
2. **Promises**: The `convertEncoding` function uses asynchronous file operations (`readFileAsync` and `writeFileAsync`) to handle file reading and writing.
3. **Error Handling**: The function catches errors and specifically checks for `UnicodeDecodeError`. Since Node.js does not have a built-in `UnicodeDecodeError`, we assume it's a decoding error by checking the error name.
4. **Logging**: Console logging is used to provide feedback on the success or failure of the conversion process.

This TypeScript code maintains the same functionality and logic as the Python code, adapting it to TypeScript's syntax and asynchronous capabilities.