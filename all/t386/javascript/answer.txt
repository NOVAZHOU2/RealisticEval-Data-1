Here's the equivalent JavaScript code for the provided Python code:

```javascript
const fs = require('fs');
const iconv = require('iconv-lite');

function convertEncoding(inputFilePath, outputFilePath, originalEncoding = 'shift_jis', targetEncoding = 'utf16le') {
  try {
    const buffer = fs.readFileSync(inputFilePath);
    const decodedString = iconv.decode(buffer, originalEncoding);
    
    // Check if decoding and re-encoding will produce the same result
    if (decodedString === iconv.encode(decodedString, targetEncoding).toString(targetEncoding)) {
      return true;
    }

    const encodedBuffer = iconv.encode(decodedString, targetEncoding);
    fs.writeFileSync(outputFilePath, encodedBuffer);

    return true;
  } catch (error) {
    console.error(`Error converting file ${inputFilePath} to ${outputFilePath}:`, error);
    return false;
  }
}

module.exports = convertEncoding;
```

This JavaScript code uses the `fs` module for reading and writing files and the `iconv-lite` library for handling character encodings. Make sure to install `iconv-lite` using npm before running the script:

```sh
npm install iconv-lite
```

### Explanation:

1. **Reading the File**: The `fs.readFileSync` method reads the entire contents of the file into a buffer.
  
2. **Decoding the Buffer**: The `iconv.decode` method decodes the buffer from the specified original encoding.

3. **Checking for No Change**: The code checks if decoding and then re-encoding the string back to the original encoding produces the same result. If it does, it means no actual conversion was necessary, and the function returns `true`.

4. **Encoding and Writing the File**: If a conversion is necessary, the `iconv.encode` method encodes the string into the target encoding, and the `fs.writeFileSync` method writes the encoded buffer to the output file.

5. **Error Handling**: Any errors encountered during the process are caught in the `catch` block, logged to the console, and the function returns `false`.

### Note:

- The default values for `originalEncoding` and `targetEncoding` have been changed to match common defaults used in JavaScript (`'shift_jis'` for Japanese and `'utf16le'` for little-endian UTF-16). You can adjust these values as needed.
- The `iconv-lite` library supports various encodings, so you can use any encoding supported by the library.