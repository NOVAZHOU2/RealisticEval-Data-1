Certainly! Below is the equivalent JavaScript code for the provided Python function, maintaining the same functionality, logic, and structure:

```javascript
const fs = require('fs');
const path = require('path');

function convertEncoding(inputFilePath, outputFilePath, originalEncoding = "cp932", targetEncoding = "utf-16") {
    /**
     * This function converts the encoding of a file from one encoding to another.
     *
     * Parameters:
     *   inputFilePath (string): The path to the input file.
     *   outputFilePath (string): The path to the output file where the converted content is saved.
     *   originalEncoding (string): The original encoding of the file (default is cp932).
     *   targetEncoding (string): The target encoding to convert to (default is utf-16).
     *
     * Returns:
     *   boolean: True if the conversion was successful, or if no conversion was needed; False otherwise.
     */

    try {
        // Read the file with the original encoding
        const content = fs.readFileSync(inputFilePath, { encoding: originalEncoding });

        // Write the content in the new encoding
        fs.writeFileSync(outputFilePath, content, { encoding: targetEncoding });

        return true;
    } catch (error) {
        if (error instanceof Error && error.code === 'ERR_STRING_DECODE') {
            // Handle encoding errors if the file was already in the target encoding
            try {
                fs.readFileSync(inputFilePath, { encoding: targetEncoding });  // Try reading to check if it's already in target encoding
                fs.copyFileSync(inputFilePath, outputFilePath);  // Copy if no error occurs
                console.log(`File already in target encoding: ${inputFilePath}`);
                return true;
            } catch (innerError) {
                console.log(`Conversion failed due to encoding error: ${error.message}`);
                return false;
            }
        } else {
            console.log(`Conversion failed due to an unexpected error: ${error.message}`);
            return false;
        }
    }
}

// Example usage
convertEncoding('input.txt', 'output.txt');
```

### Notes:
1. **Node.js Environment**: This code uses Node.js modules (`fs` and `path`) to handle file operations.
2. **Synchronous Operations**: The JavaScript code uses synchronous file I/O functions (`fs.readFileSync`, `fs.writeFileSync`, `fs.copyFileSync`). If you need asynchronous operations, you can modify the code accordingly.
3. **Error Handling**: The code checks for specific error codes to handle encoding issues more accurately.

This JavaScript code maintains the same functionality and logic as the provided Python code.