Certainly! Below is the equivalent Java method for the given Python function, including the Javadoc comments and type conversions:

```java
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCharsets;
import java.nio.charset.Charset;

public class EncodingConverter {

    /**
     * Converts the encoding of a file from one encoding to another.
     *
     * @param inputFilePath      The path to the input file.
     * @param outputFilePath     The path to the output file where the converted content is saved.
     * @param originalEncoding   The original encoding of the file (default is "cp932").
     * @param targetEncoding     The target encoding to convert to (default is "utf-16").
     * @return                   True if the conversion was successful, or if no conversion was needed; False otherwise.
     */
    public static boolean convertEncoding(String inputFilePath, String outputFilePath, String originalEncoding, String targetEncoding) {
        // Set default values if null is provided
        if (originalEncoding == null || originalEncoding.isEmpty()) {
            originalEncoding = "cp932";
        }
        if (targetEncoding == null || targetEncoding.isEmpty()) {
            targetEncoding = "utf-16";
        }

        Charset origCharset = Charset.forName(originalEncoding);
        Charset targetCharset = Charset.forName(targetEncoding);

        try {
            Path inputFile = Path.of(inputFilePath);
            byte[] contentBytes = Files.readAllBytes(inputFile);
            String content = new String(contentBytes, origCharset);
            byte[] encodedContent = content.getBytes(targetCharset);
            Path outputFile = Path.of(outputFilePath);
            Files.write(outputFile, encodedContent);

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
}
```

### Explanation:
1. **Imports**: 
   - `java.nio.file.Files` for file operations.
   - `java.nio.file.Path` for representing file paths.
   - `java.nio.file.StandardCharsets` for standard encodings.
   - `java.nio.charset.Charset` for handling custom encodings.

2. **Class Definition**:
   - The class `EncodingConverter` encapsulates the conversion logic.

3. **Method Definition**:
   - The method `convertEncoding` takes four parameters with default values for `originalEncoding` and `targetEncoding`.
   - The Javadoc comment provides detailed information about the method's purpose, parameters, and return value.

4. **Implementation**:
   - The method reads the content of the input file using the specified original encoding.
   - It then writes the content back to the output file using the target encoding.
   - Exception handling is included to ensure robustness.

This approach preserves the original functionality and structure of the Python function while adapting it to Java's conventions and syntax.