Sure, here's how you can translate the provided Python code into Java:

```java
package org.real.temp;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

public class Answer {

    /**
     * Converts numeric values in a CSV row from string format to a standardized format.
     *
     * @param row A map representing a row of CSV data where
     *            keys are column names and values are strings.
     * @return A new map with values converted:
     *         - Numeric strings have commas replaced with dots.
     *         - Non-numeric strings are set to null.
     */
    public static Map<String, String> convertCsvValues(Map<String, String> row) {
        Map<String, String> result = new HashMap<>();
        
        for (Map.Entry<String, String> entry : row.entrySet()) {
            try {
                // Attempt to parse the value as a double to check if it's numeric
                Double.parseDouble(entry.getValue().replace(",", "."));
                // Replace commas with dots and add to result
                result.put(entry.getKey(), entry.getValue().replace(",", "."));
            } catch (NumberFormatException e) {
                // If not numeric, add null to result
                result.put(entry.getKey(), null);
            }
        }

        return result;
    }
}
```

### Explanation:
1. **Package Declaration**: The `Answer` class is placed within the package `org.real.temp`.
2. **Method Signature**: The method `convertCsvValues` is defined as `static`, meaning it can be called without creating an instance of the `Answer` class.
3. **Return Type**: The method returns a `Map<String, String>` instead of `Optional<String>`. This is because Java doesn't have a direct equivalent to Python's `Optional` type, but we use `null` to represent the absence of a value.
4. **Try-Catch Block**: We use a `try-catch` block to attempt parsing each value as a `double`. If successful, we replace commas with dots and add the value to the result map. If a `NumberFormatException` is thrown, we add `null` to the result map.

This Java code should achieve the same functionality as your original Python code.