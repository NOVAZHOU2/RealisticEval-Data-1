Sure! Below is the equivalent Java JUnit test case for your Python unittest test class. The package name is `org.real.temp` and the class name is `Tester`.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

public class Tester {

    @BeforeEach
    public void setUp() {
        // Initialization if needed
    }

    @Test
    public void testConvertCsvValuesNumericString() {
        Map<String, String> input = new HashMap<>();
        input.put("column1", "123,456");
        input.put("column2", "789");

        Map<String, Object> expectedOutput = new HashMap<>();
        expectedOutput.put("column1", "123.456");
        expectedOutput.put("column2", 789);

        Map<String, Object> actualOutput = convertCsvValues(input);

        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testConvertCsvValuesNonNumericString() {
        Map<String, String> input = new HashMap<>();
        input.put("column1", "abc");
        input.put("column2", "xyz");

        Map<String, Object> expectedOutput = new HashMap<>();
        expectedOutput.put("column1", null);
        expectedOutput.put("column2", null);

        Map<String, Object> actualOutput = convertCsvValues(input);

        assertEquals(expectedOutput, actualOutput);
    }

    private Map<String, Object> convertCsvValues(Map<String, String> row) {
        Map<String, Object> result = new HashMap<>();
        for (Map.Entry<String, String> entry : row.entrySet()) {
            try {
                double value = Double.parseDouble(entry.getValue().replace(",", "."));
                result.put(entry.getKey(), value);
            } catch (NumberFormatException e) {
                result.put(entry.getKey(), null);
            }
        }
        return result;
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration at the top specifies the package name `org.real.temp`.
2. **Class Declaration**: The class `Tester` is declared within the specified package.
3. **Setup Method**: The `setUp` method is annotated with `@BeforeEach`, which is used to initialize any required resources before each test method runs.
4. **Test Methods**:
   - `testConvertCsvValuesNumericString`: This method tests the conversion of numeric strings to doubles.
   - `testConvertCsvValuesNonNumericString`: This method tests the handling of non-numeric strings, ensuring they are converted to `null`.
5. **Conversion Logic**: The `convertCsvValues` method is implemented to mimic the functionality of the Python function. It iterates over the input map, attempts to parse numeric values, and handles exceptions for non-numeric values.

This Java code should work similarly to your original Python unittest test class.