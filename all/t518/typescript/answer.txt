Sure, here is the equivalent TypeScript code for your Python function:

```typescript
interface Row {
  [key: string]: string;
}

function convertCsvValues(row: Row): { [key: string]: string | null } {
  /**
   * Convert numeric values in a CSV row from string format to a standardized format.
   *
   * @param {Row} row - A dictionary representing a row of CSV data where
   *                    keys are column names and values are strings.
   * @returns {{ [key: string]: string | null }} - A new dictionary with values converted:
   *                                              - Numeric strings have commas replaced with dots.
   *                                              - Non-numeric strings are set to null.
   */
  const result: { [key: string]: string | null } = {};

  for (const key in row) {
    if (row.hasOwnProperty(key)) {
      const value = row[key];
      if (/^\d+(\.\d+)?$/.test(value)) {
        // It's a number, replace commas with dots
        result[key] = value.replace(',', '.');
      } else {
        // Not a number, set to null
        result[key] = null;
      }
    }
  }

  return result;
}
```

### Explanation:
1. **Interface Definition**: The `Row` interface defines the structure of the input object, which is a dictionary where keys are strings and values are strings.
2. **Function Signature**: The `convertCsvValues` function takes an object of type `Row` and returns another object where the values are either strings or `null`.
3. **Regex Check**: The regular expression `/^\d+(\.\d+)?$/` checks if the string is a valid number (either integer or float).
4. **Conversion Logic**: If the string matches the regex, it replaces commas with dots; otherwise, it sets the value to `null`.

This TypeScript code should achieve the same functionality as your original Python function.