Certainly! Below is an equivalent C++ test case using Catch2 for the provided Python `unittest` test class. Note that Catch2 is a header-only library, so you'll need to include it in your project.

First, let's define the function `convert_csv_values` in C++. Then, we'll write a test case using Catch2.

### C++ Code

```cpp
#include <catch2/catch.hpp>
#include <string>
#include <optional>
#include <map>

std::map<std::string, std::optional<std::string>> convert_csv_values(const std::map<std::string, std::string>& row) {
    std::map<std::string, std::optional<std::string>> result;
    for (const auto& [key, value] : row) {
        try {
            // Attempt to convert the string to a double
            double num = std::stod(value);
            // Replace commas with dots
            std::string converted_value = std::to_string(num).replace(std::string::npos, 1, ".");
            result[key] = converted_value;
        } catch (...) {
            // If conversion fails, store nullptr
            result[key] = std::nullopt;
        }
    }
    return result;
}

TEST_CASE("Convert CSV Values", "[convert_csv_values]") {
    SECTION("Numeric String") {
        std::map<std::string, std::string> input = {{"value", "123,456"}};
        std::map<std::string, std::optional<std::string>> expected = {{"value", "123.456"}};
        REQUIRE(convert_csv_values(input) == expected);
    }

    SECTION("Non-Numeric String") {
        std::map<std::string, std::string> input = {{"value", "abc"}};
        std::map<std::string, std::optional<std::string>> expected = {{"value", std::nullopt}};
        REQUIRE(convert_csv_values(input) == expected);
    }

    SECTION("Empty String") {
        std::map<std::string, std::string> input = {{"value", ""}};
        std::map<std::string, std::optional<std::string>> expected = {{"value", std::nullopt}};
        REQUIRE(convert_csv_values(input) == expected);
    }

    SECTION("Multiple Columns") {
        std::map<std::string, std::string> input = {{"value1", "123,456"}, {"value2", "789"}};
        std::map<std::string, std::optional<std::string>> expected = {{"value1", "123.456"}, {"value2", "789"}};
        REQUIRE(convert_csv_values(input) == expected);
    }
}
```

### Explanation

1. **Function Definition**: The `convert_csv_values` function takes a `std::map<std::string, std::string>` as input and returns a `std::map<std::string, std::optional<std::string>>`. It attempts to convert each string value to a double, replaces commas with dots, and stores the result. If the conversion fails, it stores `std::nullopt`.

2. **Catch2 Test Case**:
   - We use the `TEST_CASE` macro to define a test case named "Convert CSV Values".
   - Inside the test case, we use `SECTION` macros to define different scenarios.
   - We use `REQUIRE` to assert that the output of `convert_csv_values` matches the expected result.

Make sure you have Catch2 installed and properly configured in your project to compile and run these tests.