Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. The provided Python unittest class will be converted into a Catch2 test suite, ensuring that the functionality and logic of the tests are preserved.

### C++ Code with Catch2 Testing Framework

```cpp
#include <catch2/catch_test_macros.hpp>
#include <map>
#include <string>
#include <cctype>

// Function to check if a string is numeric with possible comma and negative sign
bool isNumeric(const std::string& value) {
    std::string temp = value;
    size_t commaCount = 0;
    bool hasNegativeSign = false;

    for (char& c : temp) {
        if (c == ',') {
            if (++commaCount > 1) return false; // More than one comma is invalid
            c = '.'; // Replace comma with dot
        } else if (c == '-') {
            if (&c != &temp[0]) return false; // Negative sign must be at the beginning
            hasNegativeSign = true;
            c = '0'; // Replace negative sign temporarily
        }
    }

    // Check if all remaining characters are digits
    return std::all_of(temp.begin(), temp.end(), ::isdigit) && commaCount <= 1 && hasNegativeSign;
}

// Function to convert numeric values in a CSV row from string format to a standardized format
std::map<std::string, std::string> convertCsvValues(const std::map<std::string, std::string>& row) {
    std::map<std::string, std::string> convertedRow;

    for (const auto& item : row) {
        const std::string& key = item.first;
        const std::string& value = item.second;

        if (isNumeric(value)) {
            std::string newValue = value;
            for (char& c : newValue) {
                if (c == ',') {
                    c = '.'; // Replace comma with dot
                }
            }
            convertedRow[key] = newValue;
        } else {
            convertedRow[key] = ""; // Use empty string to represent None
        }
    }

    return convertedRow;
}

TEST_CASE("TestConvertCsvValues", "[convertCsvValues]") {
    SECTION("test_valid_numeric_strings") {
        std::map<std::string, std::string> row = {
            {"value1", "1,234"},
            {"value2", "5,678"},
            {"value3", "9,876"}
        };
        std::map<std::string, std::string> expected = {
            {"value1", "1.234"},
            {"value2", "5.678"},
            {"value3", "9.876"}
        };
        auto result = convertCsvValues(row);
        REQUIRE(result == expected);
    }

    SECTION("test_non_numeric_strings") {
        std::map<std::string, std::string> row = {
            {"value1", "not_a_number"},
            {"value2", "hello"},
            {"value3", "world"}
        };
        std::map<std::string, std::string> expected = {
            {"value1", ""},
            {"value2", ""},
            {"value3", ""}
        };
        auto result = convertCsvValues(row);
        REQUIRE(result == expected);
    }

    SECTION("test_mixed_values") {
        std::map<std::string, std::string> row = {
            {"value1", "1,234"},
            {"value2", "not_a_number"},
            {"value3", "3,14159"}
        };
        std::map<std::string, std::string> expected = {
            {"value1", "1.234"},
            {"value2", ""},
            {"value3", "3.14159"}
        };
        auto result = convertCsvValues(row);
        REQUIRE(result == expected);
    }

    SECTION("test_no_values") {
        std::map<std::string, std::string> row = {
            {"value1", "aaaa"},
            {"value2", "not_a_number"},
            {"value3", "3,14"}
        };
        std::map<std::string, std::string> expected = {
            {"value1", ""},
            {"value2", ""},
            {"value3", "3.14"}
        };
        auto result = convertCsvValues(row);
        REQUIRE(result == expected);
    }

    SECTION("test_edge_cases") {
        std::map<std::string, std::string> row = {
            {"value1", ""},
            {"value2", "0.0"},
            {"value3", "1,23"}
        };
        std::map<std::string, std::string> expected = {
            {"value1", ""},
            {"value2", "0.0"},
            {"value3", "1.23"}
        };
        auto result = convertCsvValues(row);
        REQUIRE(result == expected);
    }
}
```

### Explanation:
1. **Catch2 Test Case Structure**:
   - The `TEST_CASE` macro defines a test case named `TestConvertCsvValues`.
   - Each `SECTION` within the test case represents a specific test scenario.

2. **Function `isNumeric`**:
   - This function checks if a given string is numeric, considering possible commas and a negative sign.
   - It replaces commas with dots and checks if all characters are digits.

3. **Function `convertCsvValues`**:
   - This function takes a `std::map<std::string, std::string>` representing a row of CSV data.
   - It converts numeric strings by replacing commas with dots.
   - Non-numeric strings are represented using an empty string (`""`) to mimic the behavior of setting them to `None` in Python.

4. **Assertions**:
   - The `REQUIRE` macro is used to assert that the result matches the expected outcome.

5. **Test Sections**:
   - Each `SECTION` contains a specific test scenario, such as valid numeric strings, non-numeric strings, mixed values, no values, and edge cases.

This C++ code preserves the functionality and logic of the original Python unittest class while adhering to the Catch2 testing framework's conventions.