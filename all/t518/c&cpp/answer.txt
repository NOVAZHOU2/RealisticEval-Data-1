Here is the equivalent C++ code for your Python function:

```c++
#include <string>
#include <map>
#include <optional>

std::map<std::string, std::optional<std::string>> convertCsvValues(const std::map<std::string, std::string>& row) {
    std::map<std::string, std::optional<std::string>> result;
    for(auto it = row.begin(); it != row.end(); ++it) {
        try {
            // Try to convert to double
            double value = std::stod(it->second);
            std::string convertedValue = std::to_string(value);
            // Replace '.' with ',' if needed
            size_t dotPos = convertedValue.find('.');
            if(dotPos != std::string::npos)
                convertedValue.replace(dotPos, 1, ",");
            result[it->first] = convertedValue;
        } catch(...) {
            // If conversion fails, set to nullptr
            result[it->first] = std::nullopt;
        }
    }
    return result;
}
```

Please note that this C++ code uses `std::optional` instead of Python's `Optional`, and the conversion logic is slightly different because C++ does not support type hinting like Python. This C++ version assumes that all strings represent either valid numeric values or non-numeric values. If there might be other types of strings, additional checks should be added. Also, error handling is done using exception handling in C++.