Sure! Below is the equivalent JavaScript test case using Jest for the provided Python unittest test class. The function `convert_csv_values` has been assumed to be part of a module named `csv_utils`.

```javascript
// csv_utils.js
module.exports = {
  convertCsvValues: function(row) {
    const result = {};
    for (const [key, value] of Object.entries(row)) {
      if (!isNaN(value)) {
        result[key] = value.replace(',', '.');
      } else {
        result[key] = null;
      }
    }
    return result;
  }
};
```

```javascript
// csv_utils.test.js
const { convertCsvValues } = require('./csv_utils');

describe('convertCsvValues', () => {
  it('should convert numeric values with commas to dots', () => {
    const input = { id: '123', price: '456,78' };
    const expectedOutput = { id: '123', price: '456.78' };
    expect(convertCsvValues(input)).toEqual(expectedOutput);
  });

  it('should set non-numeric values to null', () => {
    const input = { id: 'abc', name: 'John Doe' };
    const expectedOutput = { id: null, name: null };
    expect(convertCsvValues(input)).toEqual(expectedOutput);
  });
});
```

In this example:

1. The `csv_utils.js` file contains the implementation of the `convertCsvValues` function.
2. The `csv_utils.test.js` file contains the Jest test cases for the `convertCsvValues` function.

To run these tests, you need to have Jest installed. If not already installed, you can install it using npm:

```sh
npm install --save-dev jest
```

Then, you can run the tests using the following command:

```sh
npx jest
```

This will execute the test cases and provide you with the results.