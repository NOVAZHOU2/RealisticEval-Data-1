Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to Jest's syntax and conventions.

### Python Unittest Code

```python
import unittest

class TestConvertCsvValues(unittest.TestCase):

    def test_valid_numeric_strings(self):
        """Test with valid numeric strings including commas."""
        row = {'value1': '1,234', 'value2': '5,678', 'value3': '9,876'}
        expected = {'value1': '1.234', 'value2': '5.678', 'value3': '9.876'}
        result = convert_csv_values(row)
        self.assertEqual(result, expected)

    def test_non_numeric_strings(self):
        """Test with non-numeric strings."""
        row = {'value1': 'not_a_number', 'value2': 'hello', 'value3': 'world'}
        expected = {'value1': None, 'value2': None, 'value3': None}
        result = convert_csv_values(row)
        self.assertEqual(result, expected)

    def test_mixed_values(self):
        """Test with a mix of numeric and non-numeric strings."""
        row = {'value1': '1,234', 'value2': 'not_a_number', 'value3': '3,14159'}
        expected = {'value1': '1.234', 'value2': None, 'value3': '3.14159'}
        result = convert_csv_values(row)
        self.assertEqual(result, expected)

    def test_no_values(self):
        row = {'value1': 'aaaa', 'value2': 'not_a_number', 'value3': '3,14'}
        expected = {'value1': None, 'value2': None, 'value3': '3.14'}
        result = convert_csv_values(row)
        self.assertEqual(result, expected)

    def test_edge_cases(self):
        """Test edge cases with empty strings and negative numbers."""
        row = {'value1': '', 'value2': '0.0', 'value3': '1,23'}
        expected = {'value1': None, 'value2': '0.0', 'value3': '1.23'}
        result = convert_csv_values(row)
        self.assertEqual(result, expected)
```

### Equivalent Jest Test Suite

```javascript
// Import the function to be tested
const convertCsvValues = require('./path/to/convertCsvValues');

describe('TestConvertCsvValues', () => {
    describe('test_valid_numeric_strings', () => {
        it('should handle valid numeric strings including commas', () => {
            const row = {'value1': '1,234', 'value2': '5,678', 'value3': '9,876'};
            const expected = {'value1': '1.234', 'value2': '5.678', 'value3': '9.876'};
            const result = convertCsvValues(row);
            expect(result).toEqual(expected);
        });
    });

    describe('test_non_numeric_strings', () => {
        it('should handle non-numeric strings', () => {
            const row = {'value1': 'not_a_number', 'value2': 'hello', 'value3': 'world'};
            const expected = {'value1': null, 'value2': null, 'value3': null};
            const result = convertCsvValues(row);
            expect(result).toEqual(expected);
        });
    });

    describe('test_mixed_values', () => {
        it('should handle a mix of numeric and non-numeric strings', () => {
            const row = {'value1': '1,234', 'value2': 'not_a_number', 'value3': '3,14159'};
            const expected = {'value1': '1.234', 'value2': null, 'value3': '3.14159'};
            const result = convertCsvValues(row);
            expect(result).toEqual(expected);
        });
    });

    describe('test_no_values', () => {
        it('should handle a mix of non-numeric and numeric strings', () => {
            const row = {'value1': 'aaaa', 'value2': 'not_a_number', 'value3': '3,14'};
            const expected = {'value1': null, 'value2': null, 'value3': '3.14'};
            const result = convertCsvValues(row);
            expect(result).toEqual(expected);
        });
    });

    describe('test_edge_cases', () => {
        it('should handle edge cases with empty strings and negative numbers', () => {
            const row = {'value1': '', 'value2': '0.0', 'value3': '1,23'};
            const expected = {'value1': null, 'value2': '0.0', 'value3': '1.23'};
            const result = convertCsvValues(row);
            expect(result).toEqual(expected);
        });
    });
});
```

### Explanation:
1. **Import Function**: The `convertCsvValues` function is imported at the beginning of the test file.
2. **Describe Blocks**: Each test case is wrapped in a `describe` block to group related tests.
3. **It Blocks**: Each test case is defined using an `it` block, which includes a descriptive message.
4. **Assertions**: The `expect` function is used with `toEqual` to assert that the result matches the expected output.

This Jest test suite maintains the same functionality and logic as the original Python unittest class, ensuring that all assertions are properly mapped to Jest equivalents.