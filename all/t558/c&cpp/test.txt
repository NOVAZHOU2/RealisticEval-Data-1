Certainly! Below is the equivalent C++ test case using Catch2 for the given Python unittest test class. The function `degrees_to_radians` is assumed to be implemented and available in your C++ codebase.

```cpp
#include <catch2/catch.hpp>
#include <cmath> // For M_PI

// Function declaration
double degrees_to_radians(int degrees);

// Test cases using Catch2
TEST_CASE("Degrees to Radians Conversion", "[conversion]") {
    REQUIRE(degrees_to_radians(0) == 0);
    REQUIRE(degrees_to_radians(180) == Approx(M_PI));
    REQUIRE(degrees_to_radians(90) == Approx(M_PI / 2));
    REQUIRE(degrees_to_radians(-180) == -M_PI);
    REQUIRE(degrees_to_radians(360) == 2 * M_PI);
}
```

### Explanation:

- **Catch2**: Catch2 is a modern, C++-native testing framework designed to be simple and easy to use.
- **TEST_CASE**: This macro defines a test case. It takes two arguments: a string describing the test case and a tag or tags that can be used to filter tests.
- **REQUIRE**: This macro asserts that the condition is true. If the condition is false, the test fails.
- **Approx**: This macro is used to compare floating-point numbers with a certain level of precision. It's useful when dealing with mathematical functions where small numerical errors might occur.

Make sure you have Catch2 installed and properly configured in your project. If you're using a build system like CMake, you can add Catch2 as a subdirectory or via vcpkg. Hereâ€™s a basic example of how to include it in a CMake project:

```cmake
# Add Catch2 as a subdirectory
add_subdirectory(path/to/catch2)

# Link Catch2 to your test executable
target_link_libraries(your_test_executable PRIVATE Catch2::Catch2)
```

Replace `path/to/catch2` with the actual path to the Catch2 library on your system.