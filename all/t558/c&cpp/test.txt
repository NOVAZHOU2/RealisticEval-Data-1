Certainly! Here’s the equivalent C++ test class using the Catch2 testing framework. This will ensure that the functionality and logic of the tests are preserved, with appropriate assertions and setup.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header file and using the `CATCH_TEST_CASE` macro for each test case.

Here’s the complete C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <cmath>

// Function to convert degrees to radians
double degrees_to_radians(int degrees) {
    return degrees * (M_PI / 180.0);
}

TEST_CASE("Test conversion of angles", "[degrees_to_radians]") {
    SECTION("Test conversion of 0 degrees") {
        REQUIRE(std::abs(degrees_to_radians(0) - 0) < 1e-5);
    }

    SECTION("Test conversion of 90 degrees") {
        REQUIRE(std::abs(degrees_to_radians(90) - (M_PI / 2)) < 1e-5);
    }

    SECTION("Test conversion of 180 degrees") {
        REQUIRE(std::abs(degrees_to_radians(180) - M_PI) < 1e-5);
    }

    SECTION("Test conversion of 270 degrees") {
        REQUIRE(std::abs(degrees_to_radians(270) - (3 * M_PI / 2)) < 1e-5);
    }

    SECTION("Test conversion of 360 degrees") {
        REQUIRE(std::abs(degrees_to_radians(360) - (2 * M_PI)) < 1e-5);
    }

    SECTION("Test conversion of negative degrees") {
        REQUIRE(std::abs(degrees_to_radians(-90) - (-M_PI / 2)) < 1e-5);
    }

    SECTION("Test conversion of a large angle (720 degrees)") {
        REQUIRE(std::abs(degrees_to_radians(720) - (4 * M_PI)) < 1e-5);
    }
}
```

### Explanation:
1. **Header Inclusions**:
   - `#include <catch2/catch_test_macros.hpp>` for Catch2 test macros.
   - `#include <cmath>` for mathematical constants and functions.

2. **Function Definition**:
   - The `degrees_to_radians` function takes an integer parameter `degrees` and returns a `double`.

3. **Test Class**:
   - The `TEST_CASE` macro is used to define a test case named "Test conversion of angles".
   - Each `SECTION` within the test case corresponds to a specific test scenario.
   - The `REQUIRE` macro is used to assert the conditions with a tolerance of `1e-5`.

4. **Assertions**:
   - `REQUIRE(std::abs(actual - expected) < tolerance)` is used to compare floating-point values with a tolerance.

This setup ensures that the tests are structured similarly to the Python unittest class and that the functionality and logic are preserved in C++ using Catch2.