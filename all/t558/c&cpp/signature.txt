Certainly! Hereâ€™s the equivalent C++ code for the given Python function, including the translation of comments and docstrings into C++ style comments:

```cpp
#include <iostream>
#include <cmath> // For M_PI and trigonometric functions

/**
 * Convert an angle from degrees to radians.
 *
 * @param degrees The angle in degrees to convert.
 * @return The angle in radians.
 */
double degrees_to_radians(int degrees) {
    double radians = degrees * (M_PI / 180.0);
    return radians;
}

// A simple check function to verify the correctness of the conversion.
void check_conversion() {
    int degrees = 180;
    double expected_radians = M_PI; // Expected result when converting 180 degrees to radians.
    double calculated_radians = degrees_to_radians(degrees);

    if (std::abs(calculated_radians - expected_radians) < 1e-6) {
        std::cout << "Conversion is correct." << std::endl;
    } else {
        std::cout << "Conversion is incorrect." << std::endl;
    }
}

int main() {
    check_conversion(); // Run the check function to verify the conversion.
    return 0;
}
```

### Explanation:
1. **Header Inclusions**:
   - `#include <iostream>` for input/output operations.
   - `#include <cmath>` for mathematical constants and functions.

2. **Function Definition**:
   - The function `degrees_to_radians` takes an integer parameter `degrees` and returns a `double`.
   - The function converts the angle from degrees to radians using the formula `radians = degrees * (M_PI / 180.0)`.

3. **Documentation Comments**:
   - Multi-line comments (`/* ... */`) are used for the function documentation.
   - Single-line comments (`//`) are used for inline comments.

4. **Check Function**:
   - A simple check function `check_conversion` is included to verify the correctness of the conversion.
   - It compares the calculated radians with the expected value using a small tolerance (`1e-6`).

5. **Main Function**:
   - The `main` function calls `check_conversion` to run the verification.

This ensures that the functionality, logic, and structure of the original Python code are preserved in the C++ version.