Certainly! Below is the equivalent TypeScript code using Jest for the provided Python unittest test class. The test cases will be written using Jest's assertion methods to ensure the functionality and logic are preserved.

First, let's include the TypeScript function `degreesToRadians` and then write the Jest test suite.

### TypeScript Function

```typescript
import { PI } from 'mathjs';

/**
 * Convert an angle from degrees to radians.
 *
 * @param degrees - The angle in degrees to convert.
 * @returns The angle in radians.
 */
function degreesToRadians(degrees: number): number {
    const radians = degrees * (PI / 180);
    return radians;
}

export { degreesToRadians };
```

### Jest Test Suite

```typescript
import { degreesToRadians } from './path/to/degreesToRadians'; // Adjust the import path as needed

describe('degreesToRadians', () => {
    it('should convert 0 degrees to 0 radians', () => {
        expect(degreesToRadians(0)).toBeCloseTo(0, 5);
    });

    it('should convert 90 degrees to π/2 radians', () => {
        expect(degreesToRadians(90)).toBeCloseTo(PI / 2, 5);
    });

    it('should convert 180 degrees to π radians', () => {
        expect(degreesToRadians(180)).toBeCloseTo(PI, 5);
    });

    it('should convert 270 degrees to 3π/2 radians', () => {
        expect(degreesToRadians(270)).toBeCloseTo(3 * PI / 2, 5);
    });

    it('should convert 360 degrees to 2π radians', () => {
        expect(degreesToRadians(360)).toBeCloseTo(2 * PI, 5);
    });

    it('should convert -90 degrees to -π/2 radians', () => {
        expect(degreesToRadians(-90)).toBeCloseTo(-PI / 2, 5);
    });

    it('should convert 720 degrees to 4π radians', () => {
        expect(degreesToRadians(720)).toBeCloseTo(4 * PI, 5);
    });
});
```

### Explanation:
1. **Import Statements**:
   - Import `degreesToRadians` from the file where it is defined.
   - Import `PI` from `mathjs` or another suitable math library.

2. **Test Suite**:
   - Use `describe` to group the tests under the `degreesToRadians` function.
   - Each test case uses `it` to describe the test scenario.
   - Use `expect` with `toBeCloseTo` to perform floating-point comparisons with a precision of 5 decimal places, which is equivalent to `assertAlmostEqual` in Python.

3. **Assertion Methods**:
   - `toBeCloseTo` is used to compare floating-point numbers with a specified precision.

This setup ensures that the tests are structured and behave similarly to the original Python unittest test class, while taking advantage of Jest's powerful assertion methods.