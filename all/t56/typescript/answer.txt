Sure! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function findShiftJisNotGbk(): string[] {
    // Array to store characters that are in Shift-JIS but not in GBK
    const uniqueToShiftJis: string[] = [];

    // Iterate over a range of Unicode code points
    // The BMP goes up to U+FFFF, which is 65535 in decimal
    for (let codepoint = 0; codepoint < 65536; codepoint++) {
        const character = String.fromCodePoint(codepoint);

        try {
            // Try encoding the character in Shift-JIS
            Buffer.from(character, 'shift-jis').toString('shift-jis');
            try {
                // Try encoding the character in GBK
                Buffer.from(character, 'gbk').toString('gbk');
            } catch (error) {
                // If it fails, the character is not representable in GBK but is in Shift-JIS
                uniqueToShiftJis.push(character);
            }
        } catch (error) {
            // If it fails, the character is not representable in Shift-JIS, so we skip it
            continue;
        }
    }

    return uniqueToShiftJis;
}

// Example usage
console.log(findShiftJisNotGbk());
```

### Explanation:
1. **Function Definition**: The function `findShiftJisNotGbk` is defined with a return type of `string[]`.
2. **Array Initialization**: An array `uniqueToShiftJis` is initialized to store characters that are in Shift-JIS but not in GBK.
3. **Loop Over Code Points**: A loop iterates over the range of Unicode code points from 0 to 65535.
4. **Character Conversion**: The `String.fromCodePoint` method is used to convert the code point to a character.
5. **Encoding Attempts**:
   - The `Buffer.from` method is used to encode the character in Shift-JIS and GBK.
   - If encoding in Shift-JIS succeeds, it then attempts to encode the character in GBK.
   - If encoding in GBK fails, the character is added to the `uniqueToShiftJis` array.
   - If encoding in Shift-JIS fails, the loop continues to the next iteration.

This TypeScript code maintains the same functionality as the Python code, using Node.js's `Buffer` for encoding and decoding operations.