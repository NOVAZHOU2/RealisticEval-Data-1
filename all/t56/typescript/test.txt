Certainly! Here is the equivalent Jest test class in TypeScript, ensuring that the functionality and logic of the tests are preserved. The necessary type annotations and Jest assertions are included:

```typescript
import { findShiftJisNotGbk } from './path-to-your-function'; // Import the function you want to test

describe('TestFindShiftJISNotGBK', () => {
    let shiftjisNotGbk: string[];

    beforeAll(() => {
        // Pre-calculate the list once since it's computationally expensive
        shiftjisNotGbk = findShiftJisNotGbk();
    });

    it('should not include known Shift-JIS characters not in GBK', () => {
        // Test known characters (example values provided might not actually be in one and not the other; please adjust accordingly based on actual encoding tables)
        const knownShiftJisOnly = 'ヱ';  // An example character, ensure this is correct as per your encodings
        expect(shiftjisNotGbk).not.toContain(knownShiftJisOnly);
    });

    it('should not include characters known to be in both encodings', () => {
        // Test characters known to be in both encodings
        const commonCharacter = '水';  // Common in both, ensure accuracy
        expect(shiftjisNotGbk).not.toContain(commonCharacter);
    });

    it('should not include characters not in either encoding', () => {
        // Character not typically found in either encoding
        const neitherEncodingChar = '\u{1F4A9}';  // Emoji, not in basic Shift-JIS or GBK
        expect(shiftjisNotGbk).not.toContain(neitherEncodingChar);
    });

    it('should handle characters at the edge of the BMP correctly', () => {
        // Characters at the edge of the BMP should be checked
        const edgeOfBmp = '\uffff';  // Last character in BMP
        if (shiftjisNotGbk.includes(edgeOfBmp)) {
            expect(shiftjisNotGbk).toContain(edgeOfBmp);
        } else {
            expect(shiftjisNotGbk).not.toContain(edgeOfBmp);
        }
    });
});
```

### Explanation:
1. **Import Function**: Import the `findShiftJisNotGbk` function from the appropriate module.
2. **Describe Block**: Use Jest's `describe` block to group the tests.
3. **BeforeAll Hook**: Use the `beforeAll` hook to pre-calculate the list once, as it is computationally expensive.
4. **Test Cases**:
   - **Known Shift-JIS Character Not in GBK**: Use `expect(shiftjisNotGbk).not.toContain(knownShiftJisOnly)` to check that a known Shift-JIS character is not in the list.
   - **Character in Both Encodings**: Use `expect(shiftjisNotGbk).not.toContain(commonCharacter)` to check that a common character is not in the list.
   - **Character in Neither Encoding**: Use `expect(shiftjisNotGbk).not.toContain(neitherEncodingChar)` to check that a character not in either encoding is not in the list.
   - **Characters at the Edge of the BMP**: Check the presence of the character at the edge of the BMP and use conditional assertions based on the result.

### Notes:
- **Unicode Literals**: Use `\u{}` for Unicode literals in TypeScript.
- **Assertions**: Jest provides various assertion methods like `toContain` and `not.toContain` for checking array contents.

This TypeScript code preserves the original functionality and logic of the Python unittest class, ensuring that the tests are properly structured and annotated in Jest.