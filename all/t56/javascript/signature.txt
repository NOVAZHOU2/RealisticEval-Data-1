Certainly! Below is the equivalent JavaScript code with the function signature and comments rewritten to conform to JSDoc standards:

```javascript
/**
 * Finds all the characters that can be represented in Shift-JIS but not in GBK, and returns them as an array.
 *
 * @returns {string[]} An array of characters that are unique to Shift-JIS and not encodable in GBK.
 */
function findShiftJisNotGbk() {
    // Array to store characters that are in Shift-JIS but not in GBK
    const uniqueToShiftJis = [];

    // Iterate over a range of Unicode code points
    // The BMP goes up to U+FFFF, which is 65535 in decimal
    for (let codepoint = 0; codepoint < 65536; codepoint++) {
        const character = String.fromCodePoint(codepoint);

        try {
            // Try encoding the character in Shift-JIS
            new TextEncoder('x-user-defined').encode(character); // Using 'x-user-defined' to simulate Shift-JIS
            try {
                // Try encoding the character in GBK
                new TextEncoder('gbk').encode(character);
            } catch (gbkError) {
                // If it fails, the character is not representable in GBK but is in Shift-JIS
                uniqueToShiftJis.push(character);
            }
        } catch (shiftJisError) {
            // If it fails, the character is not representable in Shift-JIS, so we skip it
            continue;
        }
    }

    return uniqueToShiftJis;
}
```

### Explanation:
1. **Function Signature**:
   - The function `findShiftJisNotGbk` is defined with a JSDoc comment block at the beginning.
   - The JSDoc comment includes a description of the function's purpose and the return type.

2. **JSDoc Comment Block**:
   - `@returns {string[]}` specifies that the function returns an array of strings.

3. **Function Body**:
   - The function body remains the same as previously provided, including the loop and encoding attempts.
   - Comments within the function are preserved to maintain clarity.

This ensures that the JavaScript code is well-documented and follows best practices for function signatures and documentation.