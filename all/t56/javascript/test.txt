Certainly! Below is the equivalent Jest test suite for the given Python unittest class. I will ensure that the functionality and logic of the tests are maintained, and any necessary changes due to language differences are documented.

### Python Unittest Class:
```python
import unittest

class TestFindShiftJISNotGBK(unittest.TestCase):

    def setUp(self):
        # Pre-calculate the list once since it's computationally expensive
        self.shiftjis_not_gbk = find_shiftjis_not_gbk()

    def test_known_shiftjis_character_not_in_gbk(self):
        # Test known characters (example values provided might not actually be in one and not the other; please adjust accordingly based on actual encoding tables)
        known_shiftjis_only = 'ヱ'  # An example character, ensure this is correct as per your encodings
        self.assertNotIn(known_shiftjis_only, self.shiftjis_not_gbk)

    def test_character_in_both_encodings(self):
        # Test characters known to be in both encodings
        common_character = '水'  # Common in both, ensure accuracy
        self.assertNotIn(common_character, self.shiftjis_not_gbk)

    def test_character_in_neither_encoding(self):
        # Character not typically found in either encoding
        neither_encoding_char = '\U0001F4A9'  # Emoji, not in basic Shift-JIS or GBK
        self.assertNotIn(neither_encoding_char, self.shiftjis_not_gbk)

    def test_bounds_of_bmp(self):
        # Characters at the edge of the BMP should be checked
        edge_of_bmp = '\uffff'  # Last character in BMP
        # Since this test.js is situational, we check based on the known state; may not be necessary
        if edge_of_bmp in self.shiftjis_not_gbk:
            self.assertIn(edge_of_bmp, self.shiftjis_not_gbk)
        else:
            self.assertNotIn(edge_of_bmp, self.shiftjis_not_gbk)
```

### Equivalent Jest Test Suite:
```javascript
const findShiftJisNotGbk = require('./findShiftJisNotGbk'); // Import the function

describe('TestFindShiftJISNotGBK', () => {
    let shiftjisNotGbk;

    beforeAll(() => {
        // Pre-calculate the list once since it's computationally expensive
        shiftjisNotGbk = findShiftJisNotGbk();
    });

    test('test_known_shiftjis_character_not_in_gbk', () => {
        // Test known characters (example values provided might not actually be in one and not the other; please adjust accordingly based on actual encoding tables)
        const knownShiftJisOnly = 'ヱ';  // An example character, ensure this is correct as per your encodings
        expect(shiftjisNotGbk).not.toContain(knownShiftJisOnly);
    });

    test('test_character_in_both_encodings', () => {
        // Test characters known to be in both encodings
        const commonCharacter = '水';  // Common in both, ensure accuracy
        expect(shiftjisNotGbk).not.toContain(commonCharacter);
    });

    test('test_character_in_neither_encoding', () => {
        // Character not typically found in either encoding
        const neitherEncodingChar = '\u{1F4A9}';  // Emoji, not in basic Shift-JIS or GBK
        expect(shiftjisNotGbk).not.toContain(neitherEncodingChar);
    });

    test('test_bounds_of_bmp', () => {
        // Characters at the edge of the BMP should be checked
        const edgeOfBmp = '\uffff';  // Last character in BMP
        // Since this test.js is situational, we check based on the known state; may not be necessary
        if (shiftjisNotGbk.includes(edgeOfBmp)) {
            expect(shiftjisNotGbk).toContain(edgeOfBmp);
        } else {
            expect(shiftjisNotGbk).not.toContain(edgeOfBmp);
        }
    });
});
```

### Explanation:
1. **Import Function**:
   - The `findShiftJisNotGbk` function is imported at the beginning of the test file.

2. **Describe Block**:
   - The `describe` block is used to group the tests under a single test suite named `TestFindShiftJISNotGBK`.

3. **BeforeAll Hook**:
   - The `beforeAll` hook is used to pre-calculate the list of characters once, similar to the `setUp` method in Python.

4. **Test Cases**:
   - Each test case is defined using the `test` function.
   - Assertions are made using Jest's `expect` function with appropriate matchers (`toContain` and `not.toContain`).

5. **Character Representation**:
   - The character `\U0001F4A9` is represented using the Unicode escape sequence `\u{1F4A9}` in JavaScript.

This ensures that the Jest test suite maintains the same functionality and logic as the original Python unittest class.