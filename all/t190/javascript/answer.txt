Hereâ€™s the equivalent JavaScript code that maintains the logic and functionality of the provided C++ code, using JavaScript conventions and best practices:

```javascript
function hexStringToFloat(hexStr) {
    // Convert hexadecimal string to an integer
    const intValue = parseInt(hexStr, 16);
    
    // Create a Float32Array to interpret the bits as a float
    const floatArray = new Float32Array(1);
    const uintArray = new Uint32Array(floatArray.buffer);

    // Assign the integer value to the Uint32Array
    uintArray[0] = intValue;

    // Return the float value
    return floatArray[0];
}
```

### Explanation:
1. **Hexadecimal to Integer Conversion**: The `parseInt` function is used to convert the hexadecimal string to an integer, specifying a radix of 16.
2. **Typed Arrays**: JavaScript's `Float32Array` and `Uint32Array` are used to manipulate the binary representation of the float.
3. **Buffer Sharing**: The `Float32Array` and `Uint32Array` share the same underlying buffer, allowing us to set the integer value and read it as a float.
4. **Return Statement**: Finally, the function returns the float value. 

This version adheres to JavaScript best practices and effectively replicates the behavior of the original C++ function.