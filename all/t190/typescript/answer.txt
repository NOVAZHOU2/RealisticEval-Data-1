Hereâ€™s the TypeScript version of the provided C++ code. This translation maintains the original logic while adapting it to TypeScript conventions.

```typescript
function hexStringToFloat(hexStr: string): number {
    // Convert hex string to integer
    const intValue = parseInt(hexStr, 16);
    
    // Create a Float32Array to convert the integer to a float
    const floatArray = new Float32Array(1);
    const intArray = new Uint32Array(floatArray.buffer);

    // Set the integer value to the Uint32Array
    intArray[0] = intValue;

    // Return the float value
    return floatArray[0];
}
```

### Key Changes and Adaptations:
1. **Function Signature**: TypeScript uses `number` for floating-point values instead of `float`.
2. **Hexadecimal Conversion**: Used `parseInt` with base 16 for converting the hex string to an integer.
3. **Typed Arrays**: Utilized `Float32Array` and `Uint32Array` for memory manipulation, similar to `std::memcpy` in C++.
4. **Buffer Sharing**: By using the same buffer for both `Float32Array` and `Uint32Array`, we can safely reinterpret the bits of the integer as a float. 

This TypeScript code will provide the same functionality as the original C++ code.