Here's how you can translate your Python function `xml_to_dataframe` into Java:

```java
package org.real.temp;

import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.util.*;

public class Answer {

    public static List<Map<String, String>> xmlToDataFrame(String xmlFile) {
        try {
            File inputFile = new File(xmlFile);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(inputFile);

            // Optional, but recommended
            // read data in the same order as specified in XSD
            doc.getDocumentElement().normalize();

            NodeList nList = doc.getElementsByTagName("sequence");
            List<Map<String, String>> resultList = new ArrayList<>();

            for (int temp = 0; temp < nList.getLength(); temp++) {
                Node nNode = nList.item(temp);

                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element eElement = (Element) nNode;
                    Map<String, String> map = new HashMap<>();
                    map.put("question", eElement.getTextContent());
                    resultList.add(map);
                }
            }

            return resultList;
        } catch (Exception e) {
            e.printStackTrace();
            return Collections.emptyList();
        }
    }
}
```

This Java code uses the DOM parser to parse an XML file and extract all `<sequence>` elements. Each element's text content is considered as a single column named "question" in a list of maps, which represents rows in a DataFrame-like structure. Please note that this is a simplified version and might need adjustments based on the actual structure of your XML files and specific requirements.