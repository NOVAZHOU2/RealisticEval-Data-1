Here's how you can write the TypeScript version of your Python function signature:

```typescript
import { readFileSync } from 'fs';
import * as xml2js from 'xml2js';

interface ISequence {
    [key: string]: any;
}

function xmlToDataFrame(xmlFile: string): Promise<ISequence[]> {
    /**
     * Convert the XML file into an array of objects, where each <sequence> tag is treated as an object record in the XML,
     * and the tag and text content of each sub-element are treated as properties and values of the object.
     *
     * @param xmlFile - Path to the XML file.
     * @returns An array of objects representing the data from the XML file.
     */
    
    return new Promise((resolve, reject) => {
        const parser = new xml2js.Parser();
        
        parser.parseString(readFileSync(xmlFile), (err, result) => {
            if (err) {
                reject(err);
            } else {
                resolve(result.sequence || []);
            }
        });
    });
}
```

Please note that in TypeScript, we need to use Promises instead of synchronous functions since parsing XML files could potentially block the execution thread for a long time. Also, `xml2js` library should be installed in your project. If it's not already installed, you can install it using npm or yarn. 

The `ISequence` interface represents the structure of each sequence tag in the XML file. It allows for any number of properties with string keys and any type of values. Adjust this interface according to your specific XML structure if necessary.