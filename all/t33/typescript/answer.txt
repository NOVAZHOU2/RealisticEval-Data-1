Sure! Here's how you can convert your Python function to TypeScript using `xml2js` for parsing XML files and `pandas-js` for handling DataFrames:

First, install the necessary packages:
```bash
npm install xml2js @types/xml2js pandas-js
```

Then, here's the equivalent TypeScript code:

```typescript
import * as fs from 'fs';
import { parseStringPromise } from 'xml2js';
import { DataFrame, Series } from 'pandas-js';

async function xmlToDataFrame(xmlFile: string): Promise<DataFrame> {
    /**
     * Convert the XML file into a pandas DataFrame, where each <sequence> tag is treated as a row record in the XML,
     * and the tag and text content of each sub-element are treated as columns and values of the DataFrame.
     *
     * @param xmlFile - Path to the XML file.
     * @returns DataFrame containing the data from the XML file.
     */
    
    // Read the XML file
    const xmlContent = await fs.promises.readFile(xmlFile, 'utf8');

    // Parse the XML content
    const parsedXml = await parseStringPromise(xmlContent);

    // Extract data from the parsed XML
    const sequences = parsedXml.root.sequence; // Assuming the root element contains multiple <sequence> tags

    // Create an array to hold the rows of the DataFrame
    const rows: Record<string, any>[] = [];

    // Iterate over each <sequence> tag and extract its child elements
    for (const sequence of sequences) {
        const row: Record<string, any> = {};
        for (const key in sequence) {
            if (sequence.hasOwnProperty(key)) {
                row[key] = sequence[key][0]; // Assuming each sub-element has only one text node
            }
        }
        rows.push(row);
    }

    // Create a DataFrame from the rows
    const df = new DataFrame(rows);

    return df;
}

// Example usage:
(async () => {
    try {
        const df = await xmlToDataFrame('path/to/your/xml/file.xml');
        console.log(df.toString());
    } catch (error) {
        console.error('Error reading or processing the XML file:', error);
    }
})();
```

### Explanation:
1. **Reading the XML File**: The `fs.promises.readFile` function reads the contents of the XML file asynchronously.
2. **Parsing the XML Content**: The `parseStringPromise` function from `xml2js` parses the XML content into a JavaScript object.
3. **Extracting Data**: The code iterates over each `<sequence>` tag and extracts the text content of its sub-elements.
4. **Creating a DataFrame**: The extracted data is used to create a DataFrame using the `pandas-js` library.

Make sure to adjust the path to your XML file and handle any specific structure of your XML file as needed.