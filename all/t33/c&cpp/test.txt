Certainly! Below is the equivalent C++ test class using the Catch2 testing framework. We will convert the Python unittests into C++ tests using Catch2, ensuring that the functionality and logic of the tests are preserved.

### C++ Code

```cpp
#include <catch2/catch_test_macros.hpp>
#include <fstream>
#include <vector>
#include <map>
#include <string>
#include <pugixml.hpp>

// Function to convert an XML file into a vector of maps
std::vector<std::map<std::string, std::string>> xml_to_vector_of_maps(const std::string& xml_data) {
    // Parse the XML data
    pugi::xml_document doc;
    if (!doc.load_buffer(xml_data.c_str(), xml_data.size())) {
        std::cerr << "Failed to load XML data" << std::endl;
        return {};
    }

    // Prepare a vector to hold all rows
    std::vector<std::map<std::string, std::string>> rows;

    // Iterate over each <sequence> element in the XML data
    for (pugi::xml_node sequence : doc.child("root").children("sequence")) {
        std::map<std::string, std::string> row_data;

        // Iterate over each child of the <sequence> element
        for (pugi::xml_node child : sequence.children()) {
            // Use the tag as the column name and the text content as the value
            row_data[child.name()] = child.text().get();
        }

        rows.push_back(row_data);
    }

    return rows;
}

TEST_CASE("Test XML to DataFrame conversion", "[xml_to_dataframe]") {
    SECTION("Single sequence") {
        const std::string xml_data = R"(<root>
                                            <sequence>
                                                <name>John</name>
                                                <age>30</age>
                                            </sequence>
                                        </root>)";
        auto result = xml_to_vector_of_maps(xml_data);
        REQUIRE(result.size() == 1);
        REQUIRE(result[0]["name"] == "John");
        REQUIRE(result[0]["age"] == "30");
    }

    SECTION("Multiple sequences") {
        const std::string xml_data = R"(<root>
                                            <sequence>
                                                <name>Alice</name>
                                                <age>25</age>
                                            </sequence>
                                            <sequence>
                                                <name>Bob</name>
                                                <age>22</age>
                                            </sequence>
                                        </root>)";
        auto result = xml_to_vector_of_maps(xml_data);
        REQUIRE(result.size() == 2);
        REQUIRE(result[0]["name"] == "Alice");
        REQUIRE(result[0]["age"] == "25");
        REQUIRE(result[1]["name"] == "Bob");
        REQUIRE(result[1]["age"] == "22");
    }

    SECTION("Empty sequence") {
        const std::string xml_data = R"(<root>
                                            <sequence></sequence>
                                        </root>)";
        auto result = xml_to_vector_of_maps(xml_data);
        REQUIRE(result.size() == 1);
        REQUIRE(result[0].empty());
    }

    SECTION("Mixed content") {
        const std::string xml_data = R"(<root>
                                            <sequence>
                                                <name>Chris</name>
                                            </sequence>
                                            <sequence>
                                                <age>28</age>
                                            </sequence>
                                        </root>)";
        auto result = xml_to_vector_of_maps(xml_data);
        REQUIRE(result.size() == 2);
        REQUIRE(result[0]["name"] == "Chris");
        REQUIRE(!result[0].count("age"));
        REQUIRE(!result[1].count("name"));
        REQUIRE(result[1]["age"] == "28");
    }

    SECTION("No sequences") {
        const std::string xml_data = R"(<root></root>)";
        auto result = xml_to_vector_of_maps(xml_data);
        REQUIRE(result.empty());
    }
}
```

### Explanation:
1. **Header Files**: Include necessary headers (`<catch2/catch_test_macros.hpp>`, `<fstream>`, `<vector>`, `<map>`, `<string>`, `<pugixml.hpp>`).
2. **Function Definition**: Define a function `xml_to_vector_of_maps` that takes the XML data as a string and returns a vector of maps.
3. **Documentation**: Use comments to describe the purpose of the function.
4. **XML Parsing**: Use `pugixml` to parse the XML data.
5. **Data Structure**: Use a `std::vector<std::map<std::string, std::string>>` to store the data.
6. **Iterating Over Elements**: Iterate over `<sequence>` elements and their children to populate the map.
7. **Catch2 Tests**: Use the `TEST_CASE` and `SECTION` macros to define test cases and sections.
8. **Assertions**: Use `REQUIRE` to assert the correctness of the results.

This code preserves the original purpose and structure of the Python unittests while adapting them to C++ conventions and the Catch2 testing framework.