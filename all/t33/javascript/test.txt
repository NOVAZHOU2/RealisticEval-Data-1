Certainly! Below is the equivalent Jest test suite for the given Python unittest class. The goal is to maintain the same functionality and logic while adapting to JavaScript and Jest.

### Python Code:
```python
import unittest
import pandas as pd
from io import StringIO
import xml.etree.ElementTree as ET

class TestXmlToDataFrame(unittest.TestCase):
    def test_single_sequence(self):
        xml_data = """<root>
                        <sequence>
                            <name>John</name>
                            <age>30</age>
                        </sequence>
                      </root>"""
        xml_input = StringIO(xml_data)
        df = xml_to_dataframe(xml_input)
        expected = pd.DataFrame([{'name': 'John', 'age': '30'}])
        pd.testing.assert_frame_equal(df, expected)

    def test_multiple_sequences(self):
        xml_data = """<root>
                        <sequence>
                            <name>Alice</name>
                            <age>25</age>
                        </sequence>
                        <sequence>
                            <name>Bob</name>
                            <age>22</age>
                        </sequence>
                      </root>"""
        xml_input = StringIO(xml_data)
        df = xml_to_dataframe(xml_input)
        expected = pd.DataFrame([{'name': 'Alice', 'age': '25'}, {'name': 'Bob', 'age': '22'}])
        pd.testing.assert_frame_equal(df, expected)

    def test_empty_sequence(self):
        xml_data = """<root>
                        <sequence></sequence>
                      </root>"""
        xml_input = StringIO(xml_data)
        df = xml_to_dataframe(xml_input)
        expected = pd.DataFrame([{}])
        pd.testing.assert_frame_equal(df, expected)

    def test_mixed_content(self):
        xml_data = """<root>
                        <sequence>
                            <name>Chris</name>
                        </sequence>
                        <sequence>
                            <age>28</age>
                        </sequence>
                      </root>"""
        xml_input = StringIO(xml_data)
        df = xml_to_dataframe(xml_input)
        expected = pd.DataFrame([{'name': 'Chris', 'age': None}, {'name': None, 'age': '28'}])
        pd.testing.assert_frame_equal(df, expected)

    def test_no_sequences(self):
        xml_data = """<root></root>"""
        xml_input = StringIO(xml_data)
        df = xml_to_dataframe(xml_input)
        expected = pd.DataFrame()
        pd.testing.assert_frame_equal(df, expected)
```

### JavaScript Code with Jest Testing Framework:

```javascript
const { parse } = require('xml2js');
const parser = new parse.Parser();
const { DataFrame } = require('dataframe-js'); // Assuming a DataFrame library similar to pandas

// Mock the xml_to_dataframe function
function xmlToDataFrame(xmlInput) {
  return new Promise((resolve, reject) => {
    parser.parseString(xmlInput, (err, result) => {
      if (err) {
        reject(err);
      } else {
        resolve(result);
      }
    });
  }).then((result) => {
    const sequences = result.root.sequence;
    const rows = [];

    sequences.forEach(sequence => {
      const rowData = {};
      Object.keys(sequence).forEach(childTag => {
        rowData[childTag] = sequence[childTag][0];
      });
      rows.push(rowData);
    });

    return new DataFrame(rows);
  });
}

describe('TestXmlToDataFrame', () => {
  it('test_single_sequence', async () => {
    const xmlData = `
      <root>
        <sequence>
          <name>John</name>
          <age>30</age>
        </sequence>
      </root>
    `;
    const df = await xmlToDataFrame(xmlData);
    const expected = new DataFrame([{ name: 'John', age: '30' }]);
    expect(df.equals(expected)).toBe(true);
  });

  it('test_multiple_sequences', async () => {
    const xmlData = `
      <root>
        <sequence>
          <name>Alice</name>
          <age>25</age>
        </sequence>
        <sequence>
          <name>Bob</name>
          <age>22</age>
        </sequence>
      </root>
    `;
    const df = await xmlToDataFrame(xmlData);
    const expected = new DataFrame([
      { name: 'Alice', age: '25' },
      { name: 'Bob', age: '22' }
    ]);
    expect(df.equals(expected)).toBe(true);
  });

  it('test_empty_sequence', async () => {
    const xmlData = `
      <root>
        <sequence></sequence>
      </root>
    `;
    const df = await xmlToDataFrame(xmlData);
    const expected = new DataFrame([{}]);
    expect(df.equals(expected)).toBe(true);
  });

  it('test_mixed_content', async () => {
    const xmlData = `
      <root>
        <sequence>
          <name>Chris</name>
        </sequence>
        <sequence>
          <age>28</age>
        </sequence>
      </root>
    `;
    const df = await xmlToDataFrame(xmlData);
    const expected = new DataFrame([
      { name: 'Chris', age: null },
      { name: null, age: '28' }
    ]);
    expect(df.equals(expected)).toBe(true);
  });

  it('test_no_sequences', async () => {
    const xmlData = `
      <root></root>
    `;
    const df = await xmlToDataFrame(xmlData);
    const expected = new DataFrame([]);
    expect(df.equals(expected)).toBe(true);
  });
});
```

### Explanation:
1. **Imports**:
   - `xml2js` is used to parse the XML content.
   - `dataframe-js` is assumed to be a library similar to pandas for handling DataFrame-like structures in JavaScript.

2. **Mock Function**:
   - `xmlToDataFrame` is a mock function that simulates the behavior of the Python function. It parses the XML content and converts it into a DataFrame-like structure.

3. **Jest Testing Suite**:
   - The `describe` block groups the test cases under `TestXmlToDataFrame`.
   - Each `it` block defines a specific test case.
   - The `async` keyword is used because the `xmlToDataFrame` function returns a promise.
   - The `expect` function is used to assert the equality of the DataFrame objects.

4. **Assertions**:
   - The `equals` method of the DataFrame object is used to compare the actual and expected DataFrames.
   - `expect(df.equals(expected)).toBe(true)` checks if the DataFrames are equal.

This conversion maintains the functionality and logic of the original Python unittest class while adapting to JavaScript and Jest.