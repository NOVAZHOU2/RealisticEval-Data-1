Here’s how you can convert the provided TypeScript code to Python, maintaining the same functionality of deeply merging two objects.
Converted Python Code
python
from typing import Any, Dict, Optional

PlainObject = Dict[str, Any]

def deep_merge_objects(obj1: PlainObject, obj2: Optional[PlainObject]) -> PlainObject:
    """
    Deeply merges two objects.
    If properties are objects in both objects, they are recursively merged.
    If a property exists in both objects but is not an object, the value from obj1 is used.

    :param obj1: The first object to merge.
    :param obj2: The second object to merge (can be None).
    :returns: A new object that is the result of the merge.
    """
    # Return obj1 if obj2 is None
    if obj2 is None:
        return obj1

    # Create a shallow copy of obj2 to be modified
    output: PlainObject = obj2.copy()

    # Iterate through the keys of obj1
    for key in obj1:
        if key in obj1:  # Check if key exists in obj1
            value1 = obj1[key]
            value2 = obj2.get(key)  # Get the value from obj2, defaults to None if not present

            # Check if both values are dictionaries
            if isinstance(value1, dict) and isinstance(value2, dict):
                # Recursively merge objects
                output[key] = deep_merge_objects(value1, value2)
            else:
                # Use the value from obj1
                output[key] = value1

    return output
Key Changes Explained:
Type Definitions:
The TypeScript PlainObject type is represented as PlainObject = Dict[str, Any] in Python. This defines it as a dictionary with string keys and values of any type.
Function Definition:
The function deep_merge_objects takes two parameters: obj1 and obj2. The second parameter is optional and can be None, as indicated by Optional[PlainObject].
Docstring:
The comment block describing the function in TypeScript is converted into a docstring, formatted with triple quotes.
Handling Null Values:
The check for null in TypeScript (if (obj2 == null)) is changed to if obj2 is None: in Python.
Copying Objects:
The shallow copy of obj2 is made using obj2.copy() instead of the spread operator in TypeScript.
Key Iteration:
Iteration over keys is done using a simple for loop (for key in obj1:), which is Pythonic and simpler than using Object.keys().
Value Checks:
The TypeScript check for object types (typeof value1 === "object") is replaced with Python’s isinstance(value1, dict) to ensure that the values are dictionaries before recursively merging them.
Updating Output:
The assignment to output is done directly using dictionary operations.
This Python function retains the same logic and functionality as the TypeScript code while adhering to Python's syntax and conventions. Let me know if you have any further questions or need additional modifications!