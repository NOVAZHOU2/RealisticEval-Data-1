Hereâ€™s how you can convert the provided TypeScript Jest test cases to C++ Catch2 test cases:

```cpp
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include <map>
#include <variant>

using PlainObject = std::map<std::string, std::variant<std::nullptr_t, int, double, std::string, PlainObject>>;

// Assume deepMergeObjects is defined here

TEST_CASE("deepMergeObjects") {
    SECTION("handles null values in obj2") {
        PlainObject obj1 = {{"a", 1}, {"b", 2}};
        PlainObject obj2; // empty map for null equivalent
        PlainObject result = deepMergeObjects(obj1, obj2);
        REQUIRE(result == obj1); // Should return obj1
    }

    SECTION("handles undefined values in obj2") {
        PlainObject obj1 = {{"a", 1}, {"b", 2}};
        PlainObject obj2; // empty map for undefined equivalent
        PlainObject result = deepMergeObjects(obj1, obj2);
        REQUIRE(result == obj1); // Should return obj1
    }

    SECTION("merges deeply nested objects") {
        PlainObject obj1 = {{"a", PlainObject{{"b", PlainObject{{"c", 1}}}}}, {"d", 2}};
        PlainObject obj2 = {{"a", PlainObject{{"b", PlainObject{{"d", 3}}}}}, {"e", 4}};
        PlainObject expected = {{"a", PlainObject{{"b", PlainObject{{"c", 1}}}}}, {"d", 2}};
        PlainObject result = deepMergeObjects(obj1, obj2);
        REQUIRE(result == expected);
    }

    SECTION("does not merge arrays but takes them from obj1") {
        PlainObject obj1 = {{"a", PlainObject{{"0", 1}, {"1", 2}, {"2", 3}}}}}; // Simulating array with map
        PlainObject obj2 = {{"a", PlainObject{{"0", 4}, {"1", 5}}}}; // Simulating array with map
        PlainObject result = deepMergeObjects(obj1, obj2);
        REQUIRE(result == obj1); // Should keep array from obj1
    }
}
```

### Key Points:
- **Catch2 Framework**: The `#define CATCH_CONFIG_MAIN` and `#include <catch2/catch.hpp>` include Catch2 functionalities.
- **Sections**: Each `SECTION` corresponds to a test case.
- **REQUIRE**: Used to check conditions, similar to `expect` in Jest.
- **Simulating Arrays**: C++ does not support arrays as directly as JavaScript, so arrays are represented using `PlainObject` maps for testing. Adjust as needed for real use cases.