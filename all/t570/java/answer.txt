Here's the equivalent Java code for the provided TypeScript function that deeply merges two objects:

```java
import java.util.HashMap;
import java.util.Map;

public class DeepMerge {

    public static Map<String, Object> deepMergeObjects(Map<String, Object> obj1, Map<String, Object> obj2) {
        // Return obj1 if obj2 is null
        if (obj2 == null) {
            return obj1;
        }

        // Create a shallow copy of obj2 to be modified
        Map<String, Object> output = new HashMap<>(obj2);

        // Iterate through the keys of obj1
        for (String key : obj1.keySet()) {
            Object value1 = obj1.get(key);
            Object value2 = obj2.get(key);

            // Check if both values are maps (objects)
            if (value1 instanceof Map && value2 instanceof Map) {
                // Recursively merge objects
                output.put(key, deepMergeObjects((Map<String, Object>) value1, (Map<String, Object>) value2));
            } else {
                // Use the value from obj1
                output.put(key, value1);
            }
        }

        return output;
    }
}
```

### Explanation:
1. **Imports**: We import `HashMap` and `Map` from the `java.util` package.
2. **Method Signature**: The method `deepMergeObjects` takes two `Map<String, Object>` parameters, corresponding to the TypeScript `PlainObject` type.
3. **Null Check**: We check if `obj2` is `null` and return `obj1` in that case.
4. **Shallow Copy**: We create a shallow copy of `obj2` using its constructor.
5. **Iteration**: We iterate through the keys of `obj1` and check if both corresponding values are instances of `Map`.
6. **Recursion**: If they are both maps, we recursively call `deepMergeObjects`. Otherwise, we use the value from `obj1`.
7. **Return Value**: Finally, we return the merged `output` map.