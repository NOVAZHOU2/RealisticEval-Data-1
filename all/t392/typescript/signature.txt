Certainly! Here is the equivalent TypeScript code with proper type annotations and JSDoc-style documentation:

```typescript
/**
 * Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
 * grouping by consecutive digits.
 *
 * @param {string} number - The current sequence as a string.
 * @returns {string} - The next sequence in the 'look-and-say' series.
 */
function lookAndSay(number: string): string {
    let result: string[] = [];
    let count: number = 1;
    const length: number = number.length;

    // Iterate through the number, group by consecutive digits and count them
    for (let i = 1; i < length; i++) {
        if (number[i] === number[i - 1]) {
            count += 1;
        } else {
            result.push(`${count}${number[i - 1]}`);
            count = 1;
        }
    }

    // Append the last group of digits
    result.push(`${count}${number[length - 1]}`);

    return result.join('');
}

// Example usage
console.log(lookAndSay("1")); // "11"
console.log(lookAndSay("11")); // "21"
console.log(lookAndSay("21")); // "1211"
```

### Explanation:
- **Function Definition**: The function `lookAndSay` is defined with a single parameter `number` of type `string`.
- **JSDoc Documentation**: The function is documented using JSDoc-style comments, which include descriptions of the parameters and return type.
- **Variable Declarations**: Variables `result`, `count`, and `length` are declared with their respective types.
- **Loop**: The loop iterates through the `number` string, checking for consecutive digits and counting them.
- **Appending Results**: The final result is constructed by appending the count and digit to the `result` array.
- **Joining the Result**: The `result` array is joined into a single string using `join('')`.

This TypeScript code preserves the original functionality and structure of the Python code, with appropriate type annotations and documentation.