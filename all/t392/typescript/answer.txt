Sure, here is the equivalent TypeScript code for your Python function:

```typescript
function lookAndSay(number: string): string {
    /**
     * Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
     * grouping by consecutive digits.
     *
     * @param {string} number - The current sequence as a string.
     * @returns {string} - The next sequence in the 'look-and-say' series.
     */
    let result = '';
    let count = 1;

    for (let i = 0; i < number.length; i++) {
        if (number[i] === number[i + 1]) {
            count++;
        } else {
            result += count.toString() + number[i];
            count = 1;
        }
    }

    return result;
}
```

### Explanation:
- **Function Signature**: The TypeScript function `lookAndSay` takes a single argument `number` of type `string` and returns a `string`.
- **Initialization**: We initialize an empty string `result` to store the next sequence and a variable `count` to keep track of consecutive digits.
- **Loop Through Digits**: We loop through each digit in the input string `number`.
  - If the current digit is the same as the next one, we increment the `count`.
  - If the current digit is different from the next one, we append the `count` and the digit to the `result`, then reset the `count` to 1.
- **Return Result**: Finally, we return the `result` which contains the next sequence in the 'look-and-say' series.