Certainly! Here is the equivalent TypeScript code for the provided Python function:

```typescript
function lookAndSay(number: string): string {
    let result: string[] = [];
    let count: number = 1;
    const length: number = number.length;

    // Iterate through the number, group by consecutive digits and count them
    for (let i = 1; i < length; i++) {
        if (number[i] === number[i - 1]) {
            count += 1;
        } else {
            result.push(`${count}${number[i - 1]}`);
            count = 1;
        }
    }

    // Append the last group of digits
    result.push(`${count}${number[length - 1]}`);

    return result.join('');
}

// Example usage
console.log(lookAndSay("1")); // "11"
console.log(lookAndSay("11")); // "21"
console.log(lookAndSay("21")); // "1211"
```

### Explanation:
- **Function Definition**: The function `lookAndSay` is defined with a single parameter `number` of type `string`.
- **Variable Declarations**: Variables `result`, `count`, and `length` are declared with their respective types.
- **Loop**: A `for` loop iterates through the string starting from index 1.
- **Conditional Logic**: Inside the loop, we check if the current character is the same as the previous one. If it is, we increment the count. Otherwise, we append the count and the previous digit to the result array and reset the count.
- **Appending Last Group**: After the loop, we append the final count and the last digit to the result array.
- **Joining Result**: Finally, we join the result array into a string and return it.

This TypeScript code preserves the functionality, structure, and logic of the original Python code while adapting it to TypeScript's syntax and static type system.