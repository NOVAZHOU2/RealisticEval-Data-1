Certainly! Here is the equivalent TypeScript test class using Jest, along with the necessary setup and imports. The provided Python unittest class will be converted to a Jest test suite in TypeScript.

### TypeScript Code

First, ensure you have Jest installed in your project:

```sh
npm install --save-dev jest ts-jest @types/jest
```

Add the necessary Jest configuration to your `tsconfig.json` or `jest.config.js`:

```json
// tsconfig.json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./src",
    "incremental": true,
    "strict": true,
    "jsx": "react"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

```js
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest',
  },
  testRegex: '.*\\.test\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
};
```

Now, here is the TypeScript test class using Jest:

```typescript
import { lookAndSay } from './lookAndSay'; // Import the lookAndSay function

describe('TestLookAndSay', () => {
  it('should replicate a single digit correctly', () => {
    expect(lookAndSay('1')).toBe('11');
  });

  it('should handle a sequence of the same digits', () => {
    expect(lookAndSay('111')).toBe('31');
  });

  it('should handle a sequence with different digits', () => {
    expect(lookAndSay('1211')).toBe('111221');
  });

  it('should handle a more complex sequence', () => {
    expect(lookAndSay('312211')).toBe('13112221');
  });
});
```

### Explanation:
1. **Imports**: The `lookAndSay` function is imported from the file `lookAndSay.ts`.
2. **Describe Block**: The `describe` block groups all the test cases under the `TestLookAndSay` description.
3. **It Blocks**: Each `it` block represents a specific test case.
4. **Assertions**: The `expect` function is used with `toBe` to check the equality of the results.

### `lookAndSay.ts` Implementation

Ensure that the `lookAndSay` function is implemented correctly in TypeScript:

```typescript
/**
 * Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
 * grouping by consecutive digits.
 *
 * @param {string} number - The current sequence as a string.
 * @returns {string} - The next sequence in the 'look-and-say' series.
 */
function lookAndSay(number: string): string {
  let result: string[] = [];
  let count: number = 1;
  const length: number = number.length;

  // Iterate through the number, group by consecutive digits and count them
  for (let i = 1; i < length; i++) {
    if (number[i] === number[i - 1]) {
      count += 1;
    } else {
      result.push(`${count}${number[i - 1]}`);
      count = 1;
    }
  }

  // Append the last group of digits
  result.push(`${count}${number[length - 1]}`);

  return result.join('');
}

export { lookAndSay };
```

### Summary
- **TypeScript Implementation**: The `lookAndSay` function is properly typed and implemented.
- **Jest Testing**: The test cases are written using Jest's `describe` and `it` blocks with appropriate assertions.
- **Configuration**: Ensure Jest and TypeScript configurations are set up correctly for running tests.

This setup ensures that the functionality and logic of the tests are preserved, and the code is properly annotated and structured for TypeScript and Jest.