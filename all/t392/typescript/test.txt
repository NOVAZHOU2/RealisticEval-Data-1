Sure! Below is the equivalent TypeScript test case using Jest for the `look_and_say` function. Note that I'll provide the implementation of the `look_and_say` function as well since it's not included in your original Python code snippet.

```typescript
// lookAndSay.ts
export function lookAndSay(number: string): string {
    let result = '';
    let count = 1;

    for (let i = 1; i <= number.length; i++) {
        if (number[i] === number[i - 1]) {
            count++;
        } else {
            result += count.toString() + number[i - 1];
            count = 1;
        }
    }

    return result;
}
```

Now, here is the corresponding Jest test file:

```typescript
// lookAndSay.test.ts
import { lookAndSay } from './lookAndSay';

describe('lookAndSay', () => {
    test('should generate the correct next sequence in the "look-and-say" series', () => {
        expect(lookAndSay('1')).toBe('11');
        expect(lookAndSay('11')).toBe('21');
        expect(lookAndSay('21')).toBe('1211');
        expect(lookAndSay('1211')).toBe('111221');
        expect(lookAndSay('111221')).toBe('312211');
    });
});
```

To run these tests, you need to have Jest installed in your project. If you haven't already, you can install it using npm or yarn:

```sh
npm install --save-dev jest
# or
yarn add --dev jest
```

Then, you can run the tests using the following command:

```sh
npx jest
# or
yarn jest
```

This will execute the test cases and verify that the `lookAndSay` function works correctly.