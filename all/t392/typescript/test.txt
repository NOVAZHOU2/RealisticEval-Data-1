Firstly, I see you've provided a function description for a 'look_and_say' function but there's no actual function body or unittest class to convert to Jest. However, I can still provide you with a skeleton of how you might write this in TypeScript using Jest for testing. 

Here's how you might define the function and write tests for it:

**look-and-say.ts**
```typescript
export function lookAndSay(number: string): string {
  // TODO: Implement the 'look-and-say' function
  throw new Error('Not implemented yet');
}
```

**look-and-say.test.ts**
```typescript
import { lookAndSay } from './look-and-say';

describe('lookAndSay', () => {
  test('should handle basic cases', () => {
    expect(lookAndSay('1')).toBe('11'); 
    expect(lookAndSay('11')).toBe('21'); 
    expect(lookAndSay('21')).toBe('1211'); 
    expect(lookAndSay('1211')).toBe('111221'); 
  });

  test('should throw error when not provided with a string', () => {
    expect(() => lookAndSay(123 as any)).toThrow();
  });
});
```
In the above example, `describe` is used to group one or more related tests together, `test` is used to write individual tests, and `expect` is used to make assertions about the outcomes of those tests. 

Remember to replace `'TODO: Implement the 'look-and-say' function'` with your implementation of the 'look-and-say' algorithm. 

Please provide the Python unittest class if you want a direct conversion to Jest.