Sure! Below is the Java code that replicates the functionality of the provided Python code within the `org.real.temp` package and the `Answer` class:

```java
package org.real.temp;

public class Answer {

    /**
     * Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
     * grouping by consecutive digits.
     *
     * @param number The current sequence as a string.
     * @return The next sequence in the 'look-and-say' series.
     */
    public static String lookAndSay(String number) {
        StringBuilder result = new StringBuilder();
        int count = 1;
        int length = number.length();

        // Iterate through the number, group by consecutive digits and count them
        for (int i = 1; i < length; i++) {
            if (number.charAt(i) == number.charAt(i - 1)) {
                count++;
            } else {
                result.append(count).append(number.charAt(i - 1));
                count = 1;
            }
        }

        // Append the last group of digits
        result.append(count).append(number.charAt(length - 1));

        return result.toString();
    }

    public static void main(String[] args) {
        // Example usage
        String sequence = "1";
        System.out.println("Original sequence: " + sequence);
        String nextSequence = lookAndSay(sequence);
        System.out.println("Next sequence: " + nextSequence);
    }
}
```

### Explanation:
1. **Method Signature**: The method `lookAndSay` is declared as `public static String lookAndSay(String number)` to match the Python function's behavior.
2. **String Manipulation**: Java uses `StringBuilder` for efficient string manipulation, which is more performant than concatenating strings using the `+` operator.
3. **Character Access**: In Java, characters are accessed using `charAt(index)` instead of the Python-style indexing.
4. **Loop Iteration**: The loop iterates from 1 to the length of the string, similar to the Python code.
5. **Appending Results**: The final result is appended to the `StringBuilder` and converted to a string using `toString()` before returning.

This Java code maintains the same functionality and logic as the provided Python code, adapting to Java's syntax and best practices.