Certainly! Below is the equivalent Java code for the provided Python function, including appropriate Javadoc comments and method signature:

```java
package org.real.temp;

/**
 * Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
 * grouping by consecutive digits.
 */
public class Answer {

    /**
     * Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
     * grouping by consecutive digits.
     *
     * @param number The current sequence as a string.
     * @return The next sequence in the 'look-and-say' series.
     */
    public static String lookAndSay(String number) {
        StringBuilder result = new StringBuilder();
        int count = 1;
        int length = number.length();

        // Iterate through the number, group by consecutive digits and count them
        for (int i = 1; i < length; i++) {
            if (number.charAt(i) == number.charAt(i - 1)) {
                count++;
            } else {
                result.append(count).append(number.charAt(i - 1));
                count = 1;
            }
        }

        // Append the last group of digits
        result.append(count).append(number.charAt(length - 1));

        return result.toString();
    }

    /**
     * Main method to demonstrate the usage of the lookAndSay method.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        // Example usage
        String input = "1";
        String output = lookAndSay(input);
        System.out.println(output); // Expected output: "11"
    }
}
```

### Explanation:
1. **Class Definition**: The class `Answer` is defined with the package `org.real.temp`.
2. **Javadoc Comments**: The method `lookAndSay` includes detailed Javadoc comments that describe the purpose, parameters, and return value.
3. **Method Signature**: The method `lookAndSay` is defined as `public static String lookAndSay(String number)` to match the Python function signature.
4. **StringBuilder**: `StringBuilder` is used for efficient string manipulation.
5. **Character Access**: Characters are accessed using `charAt(index)`.
6. **String Concatenation**: `StringBuilder.append()` is used for efficient string concatenation.
7. **Main Method**: A `main` method is included to demonstrate how to call the `lookAndSay` method.

This Java code preserves the original functionality and structure of the Python code while adhering to Java conventions and best practices.