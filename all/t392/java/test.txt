Certainly! Below is the equivalent Java test class using JUnit. The test class will be placed in the package `org.real.temp` and named `Tester`. It will include the equivalent tests for the `lookAndSay` method.

### Java Code Using JUnit

```java
package org.real.temp;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

/**
 * Test cases for the 'lookAndSay' method.
 */
public class Tester {

    /**
     * Tests the 'lookAndSay' method with a single digit.
     */
    @Test
    public void testSingleDigit() {
        // Test with a single digit to see if it replicates correctly
        assertEquals("11", lookAndSay("1"));
    }

    /**
     * Tests the 'lookAndSay' method with a sequence of the same digits.
     */
    @Test
    public void testRepetitiveDigits() {
        // Test a sequence of the same digits
        assertEquals("31", lookAndSay("111"));
    }

    /**
     * Tests the 'lookAndSay' method with a sequence containing different digits.
     */
    @Test
    public void testMixedDigits() {
        // Test a sequence with different digits
        assertEquals("111221", lookAndSay("1211"));
    }

    /**
     * Tests the 'lookAndSay' method with a more complex sequence.
     */
    @Test
    public void testComplexSequence() {
        // Test a more complex sequence
        assertEquals("13112221", lookAndSay("312211"));
    }

    /**
     * Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
     * grouping by consecutive digits.
     *
     * @param number The current sequence as a string.
     * @return The next sequence in the 'look-and-say' series.
     */
    private static String lookAndSay(String number) {
        StringBuilder result = new StringBuilder();
        int count = 1;
        int length = number.length();

        // Iterate through the number, group by consecutive digits and count them
        for (int i = 1; i < length; i++) {
            if (number.charAt(i) == number.charAt(i - 1)) {
                count++;
            } else {
                result.append(count).append(number.charAt(i - 1));
                count = 1;
            }
        }

        // Append the last group of digits
        result.append(count).append(number.charAt(length - 1));

        return result.toString();
    }
}
```

### Explanation:
1. **Package and Class Definition**: The test class `Tester` is defined within the package `org.real.temp`.
2. **JUnit Annotations**: Each test method is annotated with `@Test` to indicate that it is a test case.
3. **Assertion Methods**: The `assertEquals` method from JUnit is used to verify the expected results.
4. **Test Methods**: Each test method corresponds to a specific test case from the Python code.
5. **lookAndSay Method**: The `lookAndSay` method is defined within the test class to ensure it is accessible for testing.

This Java code preserves the functionality and logic of the Python test cases while adhering to JUnit conventions and best practices.