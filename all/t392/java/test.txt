Certainly! Below is the equivalent Java JUnit test case for the provided Python `unittest` test class. This Java code assumes that you have already implemented the `lookAndSay` method in your Java class. If not, please provide the implementation of the `lookAndSay` method so I can complete the example.

```java
package org.real.temp;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class Tester {

    @Test
    public void testLookAndSay() {
        // Assuming the lookAndSay method is implemented here or imported from another class
        assertEquals("1", lookAndSay("1"));
        assertEquals("11", lookAndSay("11"));
        assertEquals("21", lookAndSay("1211"));
        assertEquals("1211", lookAndSay("21"));
        assertEquals("312211", lookAndSay("111221"));
        assertEquals("13112221", lookAndSay("312211"));
        // Add more test cases as needed
    }

    // Placeholder for the lookAndSay method
    private String lookAndSay(String number) {
        // Implement the logic for the look-and-say sequence generation here
        return "";
    }
}
```

### Explanation:
1. **Package Declaration**: The package declaration at the top specifies where the class belongs (`org.real.temp`).
2. **Class Declaration**: The class `Tester` contains the test methods.
3. **JUnit Test Annotation**: The `@Test` annotation marks the `testLookAndSay` method as a test case.
4. **Assertions**: The `assertEquals` method is used to verify that the output of the `lookAndSay` method matches the expected result.
5. **Method Stub**: A placeholder for the `lookAndSay` method is included. You need to implement the actual logic for generating the 'look-and-say' sequence within this method.

Make sure to replace the `lookAndSay` method with the actual implementation before running the tests.