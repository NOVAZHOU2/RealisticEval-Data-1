Sure, here's how you can convert the provided Python function into a JUnit test class in Java. Note that the actual implementation of the `lookAndSay` method is also included, along with the corresponding JUnit tests.

```java
package org.real.temp;

import static org.junit.Assert.assertEquals;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class Tester {

    /**
     * Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
     * grouping by consecutive digits.
     *
     * @param number The current sequence as a string.
     * @return The next sequence in the 'look-and-say' series.
     */
    public String lookAndSay(String number) {
        StringBuilder result = new StringBuilder();
        char[] chars = number.toCharArray();
        int count = 1;
        
        for (int i = 1; i < chars.length; i++) {
            if (chars[i] == chars[i - 1]) {
                count++;
            } else {
                result.append(count).append(chars[i - 1]);
                count = 1;
            }
        }
        // Append the last group
        result.append(count).append(chars[chars.length - 1]);
        
        return result.toString();
    }

    @Test
    public void testLookAndSay() {
        assertEquals("12", lookAndSay("11"));
        assertEquals("13112221", lookAndSay("1321131112"));
        assertEquals("31131122211311122113212221", lookAndSay("31131122211311122113212221"));
    }
}
```

### Explanation:
1. **JUnit Annotations**: The `@RunWith(JUnit4.class)` annotation specifies that JUnit 4 should be used to run the tests.
2. **Method Implementation**: The `lookAndSay` method implements the logic of generating the next sequence in the 'look-and-say' series.
3. **JUnit Test Method**: The `testLookAndSay` method uses assertions to verify the correctness of the `lookAndSay` method with different inputs.

This setup ensures that the functionality of the Python unittest is replicated in Java using JUnit.