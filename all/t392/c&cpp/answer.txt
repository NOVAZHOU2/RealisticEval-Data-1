Sure! Here is the equivalent C++ code for the provided Python function `look_and_say`:

```cpp
#include <iostream>
#include <string>

std::string look_and_say(const std::string& number) {
    std::string result;
    int count = 1;

    if (number.empty()) return result;

    for (size_t i = 1; i <= number.size(); ++i) {
        if (i < number.size() && number[i] == number[i - 1]) {
            ++count;
        } else {
            result += std::to_string(count) + number[i - 1];
            count = 1;
        }
    }

    return result;
}

int main() {
    std::string input = "1";
    std::cout << "Input: " << input << std::endl;
    std::cout << "Output: " << look_and_say(input) << std::endl;

    // Test with other inputs
    input = "11";
    std::cout << "Input: " << input << std::endl;
    std::cout << "Output: " << look_and_say(input) << std::endl;

    input = "2221";
    std::cout << "Input: " << input << std::endl;
    std::cout << "Output: " << look_and_say(input) << std::endl;

    input = "123321";
    std::cout << "Input: " << input << std::endl;
    std::cout << "Output: " << look_and_say(input) << std::endl;

    return 0;
}
```

### Explanation:
- **Function Definition**: The `look_and_say` function takes a constant reference to a `std::string` and returns a `std::string`.
- **Initialization**: We initialize an empty `result` string and a counter `count` set to 1.
- **Edge Case**: If the input string is empty, we return an empty result.
- **Loop Through String**: We loop through each character of the input string. If the current character is the same as the previous one, we increment the counter. Otherwise, we append the count and the digit to the result string and reset the counter.
- **Main Function**: The `main` function demonstrates how to use the `look_and_say` function with different inputs.

This C++ code should produce the same results as the original Python function.