Sure! Here is the equivalent C++ code for the provided Python function:

```cpp
#include <iostream>
#include <string>
#include <vector>

// Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
// grouping by consecutive digits.
std::string look_and_say(const std::string& number) {
    std::vector<std::string> result;
    int count = 1;
    size_t length = number.length();

    // Iterate through the number, group by consecutive digits and count them
    for (size_t i = 1; i < length; ++i) {
        if (number[i] == number[i - 1]) {
            ++count;
        } else {
            result.push_back(std::to_string(count) + number[i - 1]);
            count = 1;
        }
    }

    // Append the last group of digits
    result.push_back(std::to_string(count) + number.back());

    // Join all parts of the result vector into a single string
    std::string final_result;
    for (const auto& part : result) {
        final_result += part;
    }

    return final_result;
}

int main() {
    std::string input = "1";
    std::cout << "Next sequence: " << look_and_say(input) << std::endl;

    // Example usage with multiple iterations
    for (int i = 0; i < 5; ++i) {
        input = look_and_say(input);
        std::cout << "Next sequence: " << input << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Function Definition**: 
   - The `look_and_say` function takes a `std::string` as an argument and returns a `std::string`.
   
2. **Variables**:
   - `result`: A `std::vector<std::string>` to store intermediate results.
   - `count`: An integer to keep track of the count of consecutive digits.
   - `length`: The length of the input string.

3. **Loop**:
   - Iterates through the string starting from the second character (`i = 1`).
   - Compares adjacent characters and increments the count if they are the same.
   - When different characters are found, appends the count and the digit to the `result` vector and resets the count.

4. **Appending the Last Group**:
   - After the loop, appends the last group of digits to the `result` vector.

5. **Joining the Result**:
   - Joins all parts of the `result` vector into a single string and returns it.

6. **Main Function**:
   - Demonstrates usage with an example input and multiple iterations to generate subsequent sequences.

This C++ code maintains the same functionality and logic as the original Python code.