To convert the provided Python `look_and_say` function into a C++ test class using Catch2, we need to first implement the `look_and_say` function in C++. Then, we will create a test class with equivalent test cases using Catch2â€™s assertion methods. Below is the step-by-step conversion:

1. **Implement the `look_and_say` function** in C++.
2. **Create a test class** using Catch2.
3. **Write test cases** to verify the correctness of the `look_and_say` function.

Here is the C++ code:

```cpp
#include <catch2/catch.hpp>
#include <string>

// Function to generate the next sequence in the 'look-and-say' series
std::string look_and_say(const std::string& number) {
    if (number.empty()) return "";

    std::string result;
    char current_char = number[0];
    int count = 1;

    // Iterate through the string, grouping consecutive digits
    for (size_t i = 1; i < number.length(); ++i) {
        if (number[i] == current_char) {
            ++count;
        } else {
            result += std::to_string(count) + current_char;
            current_char = number[i];
            count = 1;
        }
    }

    // Append the last group
    result += std::to_string(count) + current_char;

    return result;
}

// Test class using Catch2
TEST_CASE("look_and_say function") {
    SECTION("Empty string") {
        REQUIRE(look_and_say("") == "");
    }

    SECTION("Single digit") {
        REQUIRE(look_and_say("1") == "11");
        REQUIRE(look_and_say("2") == "12");
    }

    SECTION("Consecutive digits") {
        REQUIRE(look_and_say("11") == "21");
        REQUIRE(look_and_say("22") == "22");
    }

    SECTION("Mixed digits") {
        REQUIRE(look_and_say("123") == "111213");
        REQUIRE(look_and_say("333") == "33");
    }

    SECTION("Complex sequences") {
        REQUIRE(look_and_say("111221") == "312211");
        REQUIRE(look_and_say("11112222333344445555") == "4142434445");
    }
}
```

### Explanation:
1. **Function Implementation (`look_and_say`)**:
   - The function takes a string `number` and generates the next sequence in the 'look-and-say' series.
   - It iterates through the string, counting consecutive digits and appending the count followed by the digit to the result string.

2. **Test Class (`TEST_CASE`)**:
   - The `TEST_CASE` macro defines a test case named "look_and_say function".
   - Each `SECTION` within the test case contains specific test scenarios.
   - `REQUIRE` is used to assert that the output of `look_and_say` matches the expected result.

This setup ensures that the functionality and logic of the original Python unittest are preserved in the C++ version using Catch2.