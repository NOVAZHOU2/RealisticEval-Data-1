Certainly! Here is the equivalent C++ test class using the Catch2 testing framework. I will ensure that the functionality and logic of the tests are preserved, and use appropriate assertions in Catch2.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 in your C++ project by adding the necessary headers and ensuring the Catch2 namespace is used.

Here’s the complete C++ code with the test cases:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <string>
#include <vector>

// Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
// grouping by consecutive digits.
//
// Args:
//     number (std::string): The current sequence as a string.
//
// Returns:
//     std::string: The next sequence in the 'look-and-say' series.
std::string look_and_say(const std::string& number) {
    std::vector<std::string> result;
    int count = 1;
    size_t length = number.length();

    // Iterate through the number, group by consecutive digits and count them
    for (size_t i = 1; i < length; ++i) {
        if (number[i] == number[i - 1]) {
            ++count;
        } else {
            result.push_back(std::to_string(count) + std::string(1, number[i - 1]));
            count = 1;
        }
    }

    // Append the last group of digits
    result.push_back(std::to_string(count) + std::string(1, number.back()));

    // Join the result vector into a single string
    std::string finalResult;
    for (const auto& part : result) {
        finalResult += part;
    }

    return finalResult;
}

TEST_CASE("Test Look and Say Sequence", "[look_and_say]") {
    SECTION("Test with a single digit") {
        // Test with a single digit to see if it replicates correctly
        CHECK(look_and_say("1") == "11");
    }

    SECTION("Test a sequence of the same digits") {
        // Test a sequence of the same digits
        CHECK(look_and_say("111") == "31");
    }

    SECTION("Test a sequence with different digits") {
        // Test a sequence with different digits
        CHECK(look_and_say("1211") == "111221");
    }

    SECTION("Test a more complex sequence") {
        // Test a more complex sequence
        CHECK(look_and_say("312211") == "13112221");
    }
}

int main(int argc, char* argv[]) {
    return Catch::Session().run(argc, argv);
}
```

### Explanation:
1. **Include Catch2 Headers**:
   - Include the necessary Catch2 headers at the beginning of the file.

2. **Function Definition**:
   - The `look_and_say` function is defined as before, with appropriate comments and logic.

3. **Test Class Using Catch2**:
   - The `TEST_CASE` macro defines a test case named "Test Look and Say Sequence".
   - Each `SECTION` within the test case represents a specific test scenario.
   - The `CHECK` macro is used to assert the expected results.

4. **Main Function**:
   - The `main` function initializes and runs the Catch2 test session.

### Running the Tests:
To run the tests, you need to compile the code with the Catch2 library. Here’s an example command to compile the code using g++:

```sh
g++ -o look_and_say_test look_and_say_test.cpp -lcatch2
./look_and_say_test
```

This setup ensures that the tests are executed and the results are printed out, verifying the correctness of the `look_and_say` function.