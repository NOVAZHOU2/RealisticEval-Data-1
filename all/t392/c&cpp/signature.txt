Here is the C++ version of your Python function:

```cpp
#include <string>
#include <sstream>

/**
 * Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
 * grouping by consecutive digits.
 *
 * @param number The current sequence as a string.
 * @return The next sequence in the 'look-and-say' series.
 */
std::string look_and_say(const std::string& number) {
    std::stringstream ss;
    char prev = number[0];
    int count = 1;

    for (size_t i = 1; i < number.length(); ++i) {
        if (number[i] == prev) {
            ++count;
        } else {
            ss << count << prev;
            prev = number[i];
            count = 1;
        }
    }

    ss << count << prev;
    return ss.str();
}
```

This C++ code does exactly the same thing as your original Python function. It reads through the input string and counts the consecutive characters, appending each character and its count to the output string. When it encounters a different character, it appends the previous character's count and then resets the count. At the end of the loop, it appends the last counted character and its count.