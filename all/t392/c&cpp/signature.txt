Certainly! Here is the equivalent C++ code for the provided Python function, including the translation of the docstring and comments:

```cpp
#include <iostream>
#include <string>
#include <vector>

// Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
// grouping by consecutive digits.
//
// Args:
//     number (std::string): The current sequence as a string.
//
// Returns:
//     std::string: The next sequence in the 'look-and-say' series.
std::string look_and_say(const std::string& number) {
    std::vector<std::string> result;
    int count = 1;
    size_t length = number.length();

    // Iterate through the number, group by consecutive digits and count them
    for (size_t i = 1; i < length; ++i) {
        if (number[i] == number[i - 1]) {
            ++count;
        } else {
            result.push_back(std::to_string(count) + std::string(1, number[i - 1]));
            count = 1;
        }
    }

    // Append the last group of digits
    result.push_back(std::to_string(count) + std::string(1, number.back()));

    // Join the result vector into a single string
    std::string finalResult;
    for (const auto& part : result) {
        finalResult += part;
    }

    return finalResult;
}

int main() {
    std::string input = "11222";
    std::string output = look_and_say(input);
    std::cout << "Next sequence: " << output << std::endl;
    return 0;
}
```

### Explanation:
1. **Function Definition**:
   - The function `look_and_say` takes a `const std::string&` as input and returns a `std::string`.

2. **Documentation Comments**:
   - The Python docstring is translated into C++ comments using `//` for single-line comments and `/* */` for multi-line comments.
   - The arguments and return values are documented in a similar format.

3. **Initialization**:
   - `result` is a `std::vector<std::string>` to store intermediate results.
   - `count` is an integer to keep track of the count of consecutive digits.
   - `length` is the length of the input string.

4. **Loop Through the String**:
   - Iterate through the string from index 1 to `length - 1`.
   - If the current digit is the same as the previous one, increment `count`.
   - Otherwise, append the count and the digit to the `result` vector and reset `count` to 1.

5. **Append the Last Group**:
   - After the loop, append the count and the last digit to the `result` vector.

6. **Join the Result**:
   - Concatenate all strings in the `result` vector into a single string.

7. **Main Function**:
   - Demonstrates usage with an example input and prints the output.

This C++ code preserves the original purpose and structure of the Python code, including the documentation and comments.