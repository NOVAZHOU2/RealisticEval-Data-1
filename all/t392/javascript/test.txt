To convert the given Python function into a Jest test class, we need to first implement the `look_and_say` function in JavaScript and then write the corresponding Jest tests for it. Here's how you can do it:

1. **Implement the `look_and_say` function in JavaScript:**

```javascript
function lookAndSay(number) {
    let result = '';
    let i = 0;
    while (i < number.length) {
        let count = 1;
        while (i + 1 < number.length && number[i] === number[i + 1]) {
            i++;
            count++;
        }
        result += count.toString() + number[i];
        i++;
    }
    return result;
}
```

2. **Write the Jest test class for `lookAndSay`:**

```javascript
const lookAndSay = require('./lookAndSay'); // Assuming the function is defined in a separate file

describe('lookAndSay', () => {
    it('should handle the base case correctly', () => {
        expect(lookAndSay('1')).toBe('11');
    });

    it('should handle two consecutive digits correctly', () => {
        expect(lookAndSay('11')).toBe('21');
    });

    it('should handle three consecutive digits correctly', () => {
        expect(lookAndSay('222')).toBe('32');
    });

    it('should handle mixed digits correctly', () => {
        expect(lookAndSay('1211')).toBe('111221');
    });

    it('should handle more complex sequences correctly', () => {
        expect(lookAndSay('1113222113')).toBe('3113322113');
    });
});
```

### Explanation of Changes:

1. **Function Implementation:**
   - The `lookAndSay` function is implemented in JavaScript. It uses a loop to iterate over the digits and counts consecutive occurrences, building the result string accordingly.

2. **Test Structure:**
   - The `describe` block groups all the tests related to the `lookAndSay` function.
   - Each `it` block defines a specific test case with an assertion using `expect`.
   - We use `toBe` to check if the output matches the expected value.

3. **Assertions:**
   - The `expect` function in Jest is used to make assertions similar to `assertEqual` in Python's unittest.
   - The `toBe` matcher checks if the actual value is strictly equal to the expected value.

This setup ensures that the functionality and logic of the original Python tests are preserved in the Jest environment.