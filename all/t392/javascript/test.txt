Sure, here's how you can convert the Python `unittest` test class into a JavaScript test case using Jest:

```javascript
// Define the function that generates the next sequence in the 'look-and-say' sequence
function lookAndSay(number) {
    let result = '';
    let count = 1;
    for (let i = 1; i <= number.length; i++) {
        if (number[i] === number[i - 1]) {
            count++;
        } else {
            result += count + number[i - 1];
            count = 1;
        }
    }
    return result;
}

// Import the expect function from Jest
const { expect } = require('@jest/globals');

// Write the test cases using Jest
describe('lookAndSay', () => {
    it('should generate the correct next sequence in the "look-and-say" series', () => {
        expect(lookAndSay('1')).toBe('11');
        expect(lookAndSay('11')).toBe('21');
        expect(lookAndSay('21')).toBe('1211');
        expect(lookAndSay('1211')).toBe('111221');
        expect(lookAndSay('111221')).toBe('312211');
    });
});
```

In this JavaScript code:
- We define the `lookAndSay` function which generates the next sequence in the 'look-and-say' series.
- We import the `expect` function from Jest to write our test cases.
- We use the `describe` function to group related tests together and the `it` function to write individual test cases.
- Each test case uses the `expect` function to assert that the output of `lookAndSay` matches the expected result.