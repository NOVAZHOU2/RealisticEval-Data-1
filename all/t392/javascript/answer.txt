Sure! Below is the JavaScript code that replicates the functionality of the provided Python function `look_and_say`. The goal is to generate the next sequence in the "look-and-say" series.

```javascript
function lookAndSay(number) {
    /**
     * Generates the next sequence in the 'look-and-say' sequence by reading off the digits of the given number,
     * grouping by consecutive digits.
     *
     * @param {string} number - The current sequence as a string.
     * @returns {string} The next sequence in the 'look-and-say' series.
     */
    let result = [];
    let count = 1;
    const length = number.length;

    // Iterate through the number, group by consecutive digits and count them
    for (let i = 1; i < length; i++) {
        if (number[i] === number[i - 1]) {
            count += 1;
        } else {
            result.push(`${count}${number[i - 1]}`);
            count = 1;
        }
    }

    // Append the last group of digits
    result.push(`${count}${number[length - 1]}`);

    return result.join('');
}

// Example usage
console.log(lookAndSay("1")); // "11"
console.log(lookAndSay("11")); // "21"
console.log(lookAndSay("21")); // "1211"
console.log(lookAndSay("1211")); // "111221"
```

### Explanation:
- **Function Definition**: The `lookAndSay` function takes a string `number` as input.
- **Initialization**: It initializes an empty array `result` to store the resulting sequence, and a variable `count` to keep track of the consecutive digit counts.
- **Loop Through Number**: It iterates through the `number` string starting from index 1. If the current digit is the same as the previous one, it increments `count`. Otherwise, it appends the current count and digit to the `result` array and resets the count to 1.
- **Append Last Group**: After the loop, it appends the final count and digit to the `result` array.
- **Join Result**: Finally, it joins the elements of the `result` array into a single string and returns it.

This JavaScript function mirrors the behavior of the original Python function accurately.