describe('compressFileName', () => {
    test('returns the original file name if within maxLength', () => {
        // @ts-ignore
        expect(compressFileName('example.txt', 12)).toBe('example.txt');
    });

    test('compresses the file name correctly when it exceeds maxLength', () => {
        // @ts-ignore
        expect(compressFileName('longfilenameexample.txt', 18)).toBe('longf...xample.txt');
    });

    test('handles file names without extension correctly', () => {
        // @ts-ignore
        expect(compressFileName('averylongfilenamewithoutanextension', 20)).toBe('averylon...extension');
    });

    test('returns the original file name when maxLength is larger than file name', () => {
        // @ts-ignore
        expect(compressFileName('short.txt', 20)).toBe('short.txt');
    });

    test('compresses file names with special characters correctly', () => {
        // @ts-ignore
        expect(compressFileName('my$pecialfilename.txt', 18)).toBe('my$pe...lename.txt');
    });
});

// Helper function generated by ChatGPT
export function compressFileName(
    fileName: string,
    maxLength: number = 18
  ): string {
    // Check if the fileName is longer than the maximum length
    if (fileName.length > maxLength) {
      // Extract the first part of the fileName (before the extension)
      const fileNameWithoutExtension = fileName.split('.').slice(0, -1).join('.');
  
      // Extract the extension from the fileName
      const fileExtension = fileName.split('.').pop() || '';
  
      // Calculate the length of characters to keep in the middle
      const charsToKeep =
        maxLength - (fileNameWithoutExtension.length + fileExtension.length + 3);
  
      // Create the compressed fileName
      const compressedFileName =
        fileNameWithoutExtension.substring(
          0,
          maxLength - fileExtension.length - 3
        ) +
        '...' +
        fileNameWithoutExtension.slice(-charsToKeep) +
        '.' +
        fileExtension;
  
      return compressedFileName;
    } else {
      // If the fileName is shorter than the maximum length, return it as is
      return fileName.trim();
    }
  }