describe('getPrice', () => {
    test('should return a number within the default range for a given recipe ID', () => {
        const price = getPrice('recipe123');
        expect(price).toBeGreaterThanOrEqual(10);
        expect(price).toBeLessThanOrEqual(30);
    });

    test('should return the same price for the same recipe ID', () => {
        const price1 = getPrice('recipe123');
        const price2 = getPrice('recipe123');
        expect(price1).toBe(price2);
    });

    test('should return different prices for different recipe IDs', () => {
        const price1 = getPrice('recipe123');
        const price2 = getPrice('recipe456');
        expect(price1).not.toBe(price2);
    });

    test('should return a price within a custom range', () => {
        const minVal = 20;
        const maxVal = 50;
        const price = getPrice('recipe789', minVal, maxVal);
        expect(price).toBeGreaterThanOrEqual(minVal);
        expect(price).toBeLessThanOrEqual(maxVal);
    });

    test('should handle very long recipe IDs without error', () => {
        const longRecipeId = 'recipe' + 'A'.repeat(1000);
        const price = getPrice(longRecipeId);
        expect(price).toBeGreaterThanOrEqual(10);
        expect(price).toBeLessThanOrEqual(30);
    });
});
// Hash function to hash recipe price
// getPrice function is generated by ChatGPT OpenAI and Fresh Plate team studied
// it and modified it to fit the project
function getPrice(recipeId, minVal = 10, maxVal = 30) {
    let hash = 0;
    for (let i = 0; i < recipeId.length; i++) {
      let char = recipeId.charCodeAt(i);
      hash = (hash << 5) - hash + char; // multiply by 31 and add the char code
      hash |= 0; // make sure it's a 32-bit integer
    }
  
    // Convert hash to a positive value
    let decimalValue = Math.abs(hash);
  
    // Map the decimal value to the desired range
    let mappedValue = (decimalValue % ((maxVal - minVal) * 100)) / 100 + minVal;
  
    // Ensure it has exactly two decimal places
    let finalValue = Math.round(mappedValue * 100) / 100;
  
    return finalValue;
  }
  module.exports = getPrice;