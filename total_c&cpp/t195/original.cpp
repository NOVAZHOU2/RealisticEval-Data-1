#ifndef _BASIC_STACK_H_
#define _BASIC_STACK_H_
#include <stdint.h>
#include "defs.h"

// Generated by chatGPT - openAI

typedef struct {
    float items[STACK_SIZE];
    uint16_t top;
} stack_t;


void stack_discard(stack_t *stack) {

    ESP_LOGI(TAGGEN, "discarding stack");

    if (stack->top >= (STACK_SIZE * DISCARD_THRESHOLD) / 100) {
        uint16_t num_to_discard = stack->top / 10;
        for (int i = 0; i < num_to_discard; i++) {
            for (int j = 0; j < stack->top - 1; j++) {
                stack->items[j] = stack->items[j + 1];
            }
            stack->top--;
        }
    }
}
/**  
 * @brief initialize/reset stack
 * @param stack : the stack to be initialized/reset
*/
void stack_init_reset(stack_t *stack) {

    ESP_LOGI(TAGGEN, "resetting stack");

    stack->top = 0;
}

/** 
 * @brief push onto the stack
 * @return 1 for error, 0 for no error
*/
int stack_push(stack_t *stack, float data) {
    if (stack->top >= STACK_SIZE) {
        return 1;
    }

    stack->items[stack->top] = data;
    stack->top++;

    ESP_LOGI(TAGGEN, "pushed onto stack, top: %d", stack->top);

    stack_discard(stack); // won't discard if not above threshold

    return 0;
}
/** 
 * @brief pop from stack
 * @return 1 for error, 0 for no error
*/
int stack_pop(stack_t *stack, float *data) {
    if (stack->top == 0) {
        return 1;
    }
    stack->top--;
    *data = stack->items[stack->top];

    ESP_LOGI(TAGGEN, "popped from stack, top: %d", stack->top);

    return 0;
}
/** 
 * @brief get the top most item 
 * @return 1 for error, 0 for no error
 * 
*/
int stack_peek(stack_t *stack, float *data) {
    if (stack->top == 0) {
        return 1;
    }
    *data = stack->items[stack->top - 1];
    return 0;
}




#endif