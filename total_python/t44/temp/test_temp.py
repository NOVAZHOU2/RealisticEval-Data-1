import unittest

class TestStringSideBySide(unittest.TestCase):

    def test_equal_length_strings(self):
        str1 = "Hello\nWorld"
        str2 = "Python\nCode"
        result = string_side_by_side(str1, str2)
        expected = "Hello                | Python              \nWorld                | Code                "
        self.assertEqual(result, expected)

    def test_first_string_longer(self):
        str1 = "Hello\nWorld\nTest"
        str2 = "Python\nCode"
        result = string_side_by_side(str1, str2)
        expected = "Hello                | Python              \nWorld                | Code                \nTest                 |                     "
        self.assertEqual(result, expected)

    def test_second_string_longer(self):
        str1 = "Hello\nWorld"
        str2 = "Python\nCode\nTest"
        result = string_side_by_side(str1, str2)
        expected = "Hello                | Python              \nWorld                | Code                \n                     | Test                "
        self.assertEqual(result, expected)

    def test_empty_first_string(self):
        str1 = ""
        str2 = "Python\nCode"
        result = string_side_by_side(str1, str2)
        expected = "                     | Python              \n                     | Code                "
        self.assertEqual(result, expected)

    def test_custom_column_width(self):
        str1 = "Hello\nWorld"
        str2 = "Python\nCode"
        result = string_side_by_side(str1, str2, column_width=10)
        expected = "Hello      | Python    \nWorld      | Code      "
        self.assertEqual(result, expected)

# Code generated by ChatGPT-4


def string_side_by_side(string1, string2, column_width=20):
    lines1 = string1.splitlines()
    lines2 = string2.splitlines()

    max_length = max(len(lines1), len(lines2))
    padded_lines1 = (line for line in lines1)  # Generator expression
    padded_lines2 = (line for line in lines2)  # Generator expression

    # Adding padding to the shorter list
    padded_lines1 = (padded_lines1 if len(lines1) == max_length
                     else (lines1[i] if i < len(lines1) else ''
                           for i in range(max_length)))
    padded_lines2 = (padded_lines2 if len(lines2) == max_length
                     else (lines2[i] if i < len(lines2) else ''
                           for i in range(max_length)))

    # Use a generator expression to format and concatenate lines
    formatted_lines = (f"{line1:<{column_width}} | {line2:<{column_width}}"
                       for line1, line2 in zip(padded_lines1, padded_lines2))

    # Join all formatted lines into a single string in one step
    return '\n'.join(formatted_lines)
