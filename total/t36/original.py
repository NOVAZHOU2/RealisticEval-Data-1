def floyd(W):
    """ Floyd's algorithm for all-pairs shortest paths w/ adj matrix W. """
    n = len(W)

    # Iterative version-from copilot, for time comparison.
    # for k in range(n):
    #    for i in range(n):
    #        for j in range(n):
    #            W[i][j] = min(W[i][j], W[i][k] + W[k][j])

    # return W

    # Recursive version-exploring a potiential unique version of the algorithm-mostly generated by copilot,
    # I started with function name.
    # Copilot started the original floyd function, ChatGPT-3, added the base case and the recursive call.

    def _floyd_recursive(k):
        if k == n:
            return W
        for i in range(n):
            for j in range(n):
                W[i][j] = min(W[i][j], W[i][k] + W[k][j])
        return _floyd_recursive(k + 1)

    return _floyd_recursive(0)